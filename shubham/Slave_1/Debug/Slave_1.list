
Slave_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a3c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005c0c  08005c0c  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c78  08005c78  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005c88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  08005cf8  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08005cf8  00007460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e354  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e3  00000000  00000000  000153f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000174d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa9  00000000  00000000  00018278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a1e  00000000  00000000  00018d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102e1  00000000  00000000  0003b73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2d48  00000000  00000000  0004ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e768  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040bc  00000000  00000000  0011e7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00122868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bf4 	.word	0x08005bf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005bf4 	.word	0x08005bf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char rxbuff[2];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 2);
 80005a8:	2202      	movs	r2, #2
 80005aa:	4904      	ldr	r1, [pc, #16]	@ (80005bc <HAL_UART_RxCpltCallback+0x1c>)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <HAL_UART_RxCpltCallback+0x20>)
 80005ae:	f003 fae4 	bl	8003b7a <HAL_UART_Receive_DMA>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000308 	.word	0x20000308
 80005c0:	200001f4 	.word	0x200001f4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 ff3c 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f8ce 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fb5e 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 fb3c 	bl	8000c50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 fb10 	bl	8000bfc <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005dc:	f000 fae4 	bl	8000ba8 <MX_UART4_Init>
  MX_TIM8_Init();
 80005e0:	f000 f9a8 	bl	8000934 <MX_TIM8_Init>
  MX_TIM5_Init();
 80005e4:	f000 f930 	bl	8000848 <MX_TIM5_Init>
  MX_TIM10_Init();
 80005e8:	f000 f9f4 	bl	80009d4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80005ec:	f000 fa40 	bl	8000a70 <MX_TIM11_Init>
  MX_TIM13_Init();
 80005f0:	f000 fa8c 	bl	8000b0c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart4, rxbuff, 2);
 80005f4:	2202      	movs	r2, #2
 80005f6:	494d      	ldr	r1, [pc, #308]	@ (800072c <main+0x168>)
 80005f8:	484d      	ldr	r0, [pc, #308]	@ (8000730 <main+0x16c>)
 80005fa:	f003 fabe 	bl	8003b7a <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cir = (int8_t)rxbuff[0];
 80005fe:	4b4b      	ldr	r3, [pc, #300]	@ (800072c <main+0x168>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b25a      	sxtb	r2, r3
 8000604:	4b4b      	ldr	r3, [pc, #300]	@ (8000734 <main+0x170>)
 8000606:	701a      	strb	r2, [r3, #0]
	  printf("Circle: %d, Cross: %d\r\n", (int8_t)rxbuff[0], (int8_t)rxbuff[1]);
 8000608:	4b48      	ldr	r3, [pc, #288]	@ (800072c <main+0x168>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b25b      	sxtb	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	4b46      	ldr	r3, [pc, #280]	@ (800072c <main+0x168>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	b25b      	sxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	4847      	ldr	r0, [pc, #284]	@ (8000738 <main+0x174>)
 800061a:	f004 fc7d 	bl	8004f18 <iprintf>

	  /* Stepper */

	  		/* Test */
	  		stepper_running = 1;
 800061e:	4b47      	ldr	r3, [pc, #284]	@ (800073c <main+0x178>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
	  		stepper_running1 = 1;
 8000624:	4b46      	ldr	r3, [pc, #280]	@ (8000740 <main+0x17c>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
	  		/* Test */
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 800062a:	4b46      	ldr	r3, [pc, #280]	@ (8000744 <main+0x180>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	bf14      	ite	ne
 8000632:	2301      	movne	r3, #1
 8000634:	2300      	moveq	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	2108      	movs	r1, #8
 800063c:	4842      	ldr	r0, [pc, #264]	@ (8000748 <main+0x184>)
 800063e:	f001 fe1b 	bl	8002278 <HAL_GPIO_WritePin>
	  				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,
 8000642:	4b40      	ldr	r3, [pc, #256]	@ (8000744 <main+0x180>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	bf14      	ite	ne
 800064a:	2301      	movne	r3, #1
 800064c:	2300      	moveq	r3, #0
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	2140      	movs	r1, #64	@ 0x40
 8000654:	483c      	ldr	r0, [pc, #240]	@ (8000748 <main+0x184>)
 8000656:	f001 fe0f 	bl	8002278 <HAL_GPIO_WritePin>
//	  		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
//	  			direction1 = 0;  // Set to Clockwise
//	  			stepper_running = 1;
//	  			stepper_running1 = 1;
//	  		}
	  		if (cir == 1 && !prev_cir) {
 800065a:	4b36      	ldr	r3, [pc, #216]	@ (8000734 <main+0x170>)
 800065c:	f993 3000 	ldrsb.w	r3, [r3]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d109      	bne.n	8000678 <main+0xb4>
 8000664:	4b39      	ldr	r3, [pc, #228]	@ (800074c <main+0x188>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d105      	bne.n	8000678 <main+0xb4>
	  			stepper_running = 0;
 800066c:	4b33      	ldr	r3, [pc, #204]	@ (800073c <main+0x178>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	  			stepper_running1 = 0;
 8000672:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <main+0x17c>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
	  		}
//	  		prev_ll1 = ll1;
//	  		prev_rr1 = rr1;
	  		prev_cir = cir;
 8000678:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <main+0x170>)
 800067a:	f993 3000 	ldrsb.w	r3, [r3]
 800067e:	461a      	mov	r2, r3
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <main+0x188>)
 8000682:	601a      	str	r2, [r3, #0]

	  		if (stepper_running && (HAL_GetTick() - last_step_time) >= step_delay) {
 8000684:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <main+0x178>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d023      	beq.n	80006d4 <main+0x110>
 800068c:	f000 ff40 	bl	8001510 <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <main+0x18c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	4a2e      	ldr	r2, [pc, #184]	@ (8000754 <main+0x190>)
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	4293      	cmp	r3, r2
 800069e:	d319      	bcc.n	80006d4 <main+0x110>
	  			last_step_time = HAL_GetTick();
 80006a0:	f000 ff36 	bl	8001510 <HAL_GetTick>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <main+0x18c>)
 80006a8:	6013      	str	r3, [r2, #0]

	  			if (step_state == 0) {
 80006aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000758 <main+0x194>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d108      	bne.n	80006c4 <main+0x100>
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 80006b2:	2201      	movs	r2, #1
 80006b4:	2120      	movs	r1, #32
 80006b6:	4824      	ldr	r0, [pc, #144]	@ (8000748 <main+0x184>)
 80006b8:	f001 fdde 	bl	8002278 <HAL_GPIO_WritePin>
	  				step_state = 1;
 80006bc:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <main+0x194>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e007      	b.n	80006d4 <main+0x110>
	  			} else {
	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	481f      	ldr	r0, [pc, #124]	@ (8000748 <main+0x184>)
 80006ca:	f001 fdd5 	bl	8002278 <HAL_GPIO_WritePin>
	  				step_state = 0;
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <main+0x194>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if (stepper_running1
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <main+0x17c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d090      	beq.n	80005fe <main+0x3a>
	  				&& (HAL_GetTick() - last_step_time1) >= step_delay1) {
 80006dc:	f000 ff18 	bl	8001510 <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <main+0x198>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <main+0x19c>)
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d386      	bcc.n	80005fe <main+0x3a>
	  			last_step_time1 = HAL_GetTick(); // Update last step time
 80006f0:	f000 ff0e 	bl	8001510 <HAL_GetTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a19      	ldr	r2, [pc, #100]	@ (800075c <main+0x198>)
 80006f8:	6013      	str	r3, [r2, #0]

	  			if (step_state1 == 0) {
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <main+0x1a0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d109      	bne.n	8000716 <main+0x152>
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Step HIGH
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000708:	4817      	ldr	r0, [pc, #92]	@ (8000768 <main+0x1a4>)
 800070a:	f001 fdb5 	bl	8002278 <HAL_GPIO_WritePin>
	  				step_state1 = 1;
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <main+0x1a0>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e773      	b.n	80005fe <main+0x3a>
	  			} else {
	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071c:	4812      	ldr	r0, [pc, #72]	@ (8000768 <main+0x1a4>)
 800071e:	f001 fdab 	bl	8002278 <HAL_GPIO_WritePin>
	  				step_state1 = 0;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <main+0x1a0>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
  {
 8000728:	e769      	b.n	80005fe <main+0x3a>
 800072a:	bf00      	nop
 800072c:	20000308 	.word	0x20000308
 8000730:	200001f4 	.word	0x200001f4
 8000734:	200002e4 	.word	0x200002e4
 8000738:	08005c0c 	.word	0x08005c0c
 800073c:	200002fc 	.word	0x200002fc
 8000740:	20000300 	.word	0x20000300
 8000744:	20000000 	.word	0x20000000
 8000748:	40020800 	.word	0x40020800
 800074c:	20000304 	.word	0x20000304
 8000750:	200002e8 	.word	0x200002e8
 8000754:	20000004 	.word	0x20000004
 8000758:	200002f0 	.word	0x200002f0
 800075c:	200002ec 	.word	0x200002ec
 8000760:	200002f8 	.word	0x200002f8
 8000764:	200002f4 	.word	0x200002f4
 8000768:	40020400 	.word	0x40020400

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	@ 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2234      	movs	r2, #52	@ 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f004 fc21 	bl	8004fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <SystemClock_Config+0xd4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a29      	ldr	r2, [pc, #164]	@ (8000840 <SystemClock_Config+0xd4>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <SystemClock_Config+0xd4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <SystemClock_Config+0xd8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b8:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <SystemClock_Config+0xd8>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <SystemClock_Config+0xd8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e0:	2310      	movs	r3, #16
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ea:	2304      	movs	r3, #4
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 f8a0 	bl	8002940 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000806:	f000 fb03 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fd40 	bl	80022ac <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000832:	f000 faed 	bl	8000e10 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	@ 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	@ 0x38
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000878:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_TIM5_Init+0xe4>)
 800087a:	4a2d      	ldr	r2, [pc, #180]	@ (8000930 <MX_TIM5_Init+0xe8>)
 800087c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 179;
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_TIM5_Init+0xe4>)
 8000880:	22b3      	movs	r2, #179	@ 0xb3
 8000882:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_TIM5_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_TIM5_Init+0xe4>)
 800088c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000890:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_TIM5_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_TIM5_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800089e:	4823      	ldr	r0, [pc, #140]	@ (800092c <MX_TIM5_Init+0xe4>)
 80008a0:	f002 faec 	bl	8002e7c <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80008aa:	f000 fab1 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481c      	ldr	r0, [pc, #112]	@ (800092c <MX_TIM5_Init+0xe4>)
 80008bc:	f002 fc48 	bl	8003150 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80008c6:	f000 faa3 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80008ca:	4818      	ldr	r0, [pc, #96]	@ (800092c <MX_TIM5_Init+0xe4>)
 80008cc:	f002 fb25 	bl	8002f1a <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80008d6:	f000 fa9b 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4619      	mov	r1, r3
 80008e8:	4810      	ldr	r0, [pc, #64]	@ (800092c <MX_TIM5_Init+0xe4>)
 80008ea:	f002 ffef 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80008f4:	f000 fa8c 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	@ 0x60
 80008fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	4807      	ldr	r0, [pc, #28]	@ (800092c <MX_TIM5_Init+0xe4>)
 8000910:	f002 fb5c 	bl	8002fcc <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800091a:	f000 fa79 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800091e:	4803      	ldr	r0, [pc, #12]	@ (800092c <MX_TIM5_Init+0xe4>)
 8000920:	f000 fb1e 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000924:	bf00      	nop
 8000926:	3738      	adds	r7, #56	@ 0x38
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000008c 	.word	0x2000008c
 8000930:	40000c00 	.word	0x40000c00

08000934 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000950:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <MX_TIM8_Init+0x98>)
 8000952:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <MX_TIM8_Init+0x9c>)
 8000954:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8000956:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_TIM8_Init+0x98>)
 8000958:	22b3      	movs	r2, #179	@ 0xb3
 800095a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <MX_TIM8_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TIM8_Init+0x98>)
 8000964:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000968:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_TIM8_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000970:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <MX_TIM8_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_TIM8_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800097c:	4813      	ldr	r0, [pc, #76]	@ (80009cc <MX_TIM8_Init+0x98>)
 800097e:	f002 fa7d 	bl	8002e7c <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 fa42 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <MX_TIM8_Init+0x98>)
 800099a:	f002 fbd9 	bl	8003150 <HAL_TIM_ConfigClockSource>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80009a4:	f000 fa34 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_TIM8_Init+0x98>)
 80009b6:	f002 ff89 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80009c0:	f000 fa26 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000d4 	.word	0x200000d4
 80009d0:	40010400 	.word	0x40010400

080009d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <MX_TIM10_Init+0x94>)
 80009ee:	4a1f      	ldr	r2, [pc, #124]	@ (8000a6c <MX_TIM10_Init+0x98>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 179;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_TIM10_Init+0x94>)
 80009f4:	22b3      	movs	r2, #179	@ 0xb3
 80009f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_TIM10_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_TIM10_Init+0x94>)
 8000a00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_TIM10_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_TIM10_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a12:	4815      	ldr	r0, [pc, #84]	@ (8000a68 <MX_TIM10_Init+0x94>)
 8000a14:	f002 fa32 	bl	8002e7c <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000a1e:	f000 f9f7 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000a22:	4811      	ldr	r0, [pc, #68]	@ (8000a68 <MX_TIM10_Init+0x94>)
 8000a24:	f002 fa79 	bl	8002f1a <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000a2e:	f000 f9ef 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	@ 0x60
 8000a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <MX_TIM10_Init+0x94>)
 8000a4a:	f002 fabf 	bl	8002fcc <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000a54:	f000 f9dc 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <MX_TIM10_Init+0x94>)
 8000a5a:	f000 fa81 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000011c 	.word	0x2000011c
 8000a6c:	40014400 	.word	0x40014400

08000a70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b08 <MX_TIM11_Init+0x98>)
 8000a8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000a90:	22b3      	movs	r2, #179	@ 0xb3
 8000a92:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000a9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000aae:	4815      	ldr	r0, [pc, #84]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000ab0:	f002 f9e4 	bl	8002e7c <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000aba:	f000 f9a9 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000abe:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000ac0:	f002 fa2b 	bl	8002f1a <HAL_TIM_PWM_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000aca:	f000 f9a1 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	@ 0x60
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000ae6:	f002 fa71 	bl	8002fcc <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000af0:	f000 f98e 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <MX_TIM11_Init+0x94>)
 8000af6:	f000 fa33 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000164 	.word	0x20000164
 8000b08:	40014800 	.word	0x40014800

08000b0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <MX_TIM13_Init+0x98>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 179;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b2c:	22b3      	movs	r2, #179	@ 0xb3
 8000b2e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b3c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000b4a:	4815      	ldr	r0, [pc, #84]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b4c:	f002 f996 	bl	8002e7c <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000b56:	f000 f95b 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000b5a:	4811      	ldr	r0, [pc, #68]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b5c:	f002 f9dd 	bl	8002f1a <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000b66:	f000 f953 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b6a:	2360      	movs	r3, #96	@ 0x60
 8000b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4807      	ldr	r0, [pc, #28]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b82:	f002 fa23 	bl	8002fcc <HAL_TIM_PWM_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000b8c:	f000 f940 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000b90:	4803      	ldr	r0, [pc, #12]	@ (8000ba0 <MX_TIM13_Init+0x94>)
 8000b92:	f000 f9e5 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001ac 	.word	0x200001ac
 8000ba4:	40001c00 	.word	0x40001c00

08000ba8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_UART4_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000be0:	f002 fef0 	bl	80039c4 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f911 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001f4 	.word	0x200001f4
 8000bf8:	40004c00 	.word	0x40004c00

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f002 fec6 	bl	80039c4 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f8e7 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000023c 	.word	0x2000023c
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_DMA_Init+0x3c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <MX_DMA_Init+0x3c>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_DMA_Init+0x3c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200d      	movs	r0, #13
 8000c78:	f000 fd31 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c7c:	200d      	movs	r0, #13
 8000c7e:	f000 fd4a 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a49      	ldr	r2, [pc, #292]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b47      	ldr	r3, [pc, #284]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b43      	ldr	r3, [pc, #268]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a42      	ldr	r2, [pc, #264]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b40      	ldr	r3, [pc, #256]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b39      	ldr	r3, [pc, #228]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a34      	ldr	r2, [pc, #208]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <MX_GPIO_Init+0x144>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|stepper_speed_Pin
 8000d16:	2200      	movs	r2, #0
 8000d18:	f240 31c7 	movw	r1, #967	@ 0x3c7
 8000d1c:	482e      	ldr	r0, [pc, #184]	@ (8000dd8 <MX_GPIO_Init+0x148>)
 8000d1e:	f001 faab 	bl	8002278 <HAL_GPIO_WritePin>
                          |motor1_Pin|motor2_Pin|motor3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2120      	movs	r1, #32
 8000d26:	482d      	ldr	r0, [pc, #180]	@ (8000ddc <MX_GPIO_Init+0x14c>)
 8000d28:	f001 faa6 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(stepper_direction_GPIO_Port, stepper_direction_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d32:	482b      	ldr	r0, [pc, #172]	@ (8000de0 <MX_GPIO_Init+0x150>)
 8000d34:	f001 faa0 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4822      	ldr	r0, [pc, #136]	@ (8000dd8 <MX_GPIO_Init+0x148>)
 8000d50:	f001 f8fe 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 stepper_speed_Pin
                           motor1_Pin motor2_Pin motor3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|stepper_speed_Pin
 8000d54:	f240 33c7 	movw	r3, #967	@ 0x3c7
 8000d58:	617b      	str	r3, [r7, #20]
                          |motor1_Pin|motor2_Pin|motor3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481a      	ldr	r0, [pc, #104]	@ (8000dd8 <MX_GPIO_Init+0x148>)
 8000d6e:	f001 f8ef 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d72:	2320      	movs	r3, #32
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4814      	ldr	r0, [pc, #80]	@ (8000ddc <MX_GPIO_Init+0x14c>)
 8000d8a:	f001 f8e1 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : stepper_direction_Pin */
  GPIO_InitStruct.Pin = stepper_direction_Pin;
 8000d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(stepper_direction_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <MX_GPIO_Init+0x150>)
 8000da8:	f001 f8d2 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dac:	23c0      	movs	r3, #192	@ 0xc0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	@ (8000de0 <MX_GPIO_Init+0x150>)
 8000dc8:	f001 f8c2 	bl	8001f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	@ 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400

08000de4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <_write+0x28>)
 8000dfc:	f002 fe32 	bl	8003a64 <HAL_UART_Transmit>
	return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000023c 	.word	0x2000023c

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <Error_Handler+0x8>

08000e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f000 fc34 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <HAL_TIM_Base_MspInit+0xdc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10e      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a31      	ldr	r2, [pc, #196]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	61fb      	str	r3, [r7, #28]
 8000e98:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000e9a:	e04e      	b.n	8000f3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM8)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f50 <HAL_TIM_Base_MspInit+0xe4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10e      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a27      	ldr	r2, [pc, #156]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b25      	ldr	r3, [pc, #148]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
}
 8000ec2:	e03a      	b.n	8000f3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a22      	ldr	r2, [pc, #136]	@ (8000f54 <HAL_TIM_Base_MspInit+0xe8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10e      	bne.n	8000eec <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
}
 8000eea:	e026      	b.n	8000f3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM11)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <HAL_TIM_Base_MspInit+0xec>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10e      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
}
 8000f12:	e012      	b.n	8000f3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM13)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <HAL_TIM_Base_MspInit+0xf0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10d      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <HAL_TIM_Base_MspInit+0xe0>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40000c00 	.word	0x40000c00
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40010400 	.word	0x40010400
 8000f54:	40014400 	.word	0x40014400
 8000f58:	40014800 	.word	0x40014800
 8000f5c:	40001c00 	.word	0x40001c00

08000f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a49      	ldr	r2, [pc, #292]	@ (80010a4 <HAL_TIM_MspPostInit+0x144>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11e      	bne.n	8000fc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	4b48      	ldr	r3, [pc, #288]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a47      	ldr	r2, [pc, #284]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b45      	ldr	r3, [pc, #276]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	483c      	ldr	r0, [pc, #240]	@ (80010ac <HAL_TIM_MspPostInit+0x14c>)
 8000fba:	f000 ffc9 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8000fbe:	e06c      	b.n	800109a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a3a      	ldr	r2, [pc, #232]	@ (80010b0 <HAL_TIM_MspPostInit+0x150>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d11f      	bne.n	800100a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b36      	ldr	r3, [pc, #216]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a35      	ldr	r2, [pc, #212]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b33      	ldr	r3, [pc, #204]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	482c      	ldr	r0, [pc, #176]	@ (80010b4 <HAL_TIM_MspPostInit+0x154>)
 8001004:	f000 ffa4 	bl	8001f50 <HAL_GPIO_Init>
}
 8001008:	e047      	b.n	800109a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM11)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a2a      	ldr	r2, [pc, #168]	@ (80010b8 <HAL_TIM_MspPostInit+0x158>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d11f      	bne.n	8001054 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101c:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	6313      	str	r3, [r2, #48]	@ 0x30
 8001024:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001042:	2303      	movs	r3, #3
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4819      	ldr	r0, [pc, #100]	@ (80010b4 <HAL_TIM_MspPostInit+0x154>)
 800104e:	f000 ff7f 	bl	8001f50 <HAL_GPIO_Init>
}
 8001052:	e022      	b.n	800109a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM13)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a18      	ldr	r2, [pc, #96]	@ (80010bc <HAL_TIM_MspPostInit+0x15c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d11d      	bne.n	800109a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_TIM_MspPostInit+0x148>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800107a:	2340      	movs	r3, #64	@ 0x40
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800108a:	2309      	movs	r3, #9
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <HAL_TIM_MspPostInit+0x14c>)
 8001096:	f000 ff5b 	bl	8001f50 <HAL_GPIO_Init>
}
 800109a:	bf00      	nop
 800109c:	3730      	adds	r7, #48	@ 0x30
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40000c00 	.word	0x40000c00
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40014400 	.word	0x40014400
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40014800 	.word	0x40014800
 80010bc:	40001c00 	.word	0x40001c00

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001218 <HAL_UART_MspInit+0x158>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d164      	bne.n	80011ac <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b4d      	ldr	r3, [pc, #308]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a4c      	ldr	r2, [pc, #304]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80010ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b4a      	ldr	r3, [pc, #296]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	4b46      	ldr	r3, [pc, #280]	@ (800121c <HAL_UART_MspInit+0x15c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a45      	ldr	r2, [pc, #276]	@ (800121c <HAL_UART_MspInit+0x15c>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b43      	ldr	r3, [pc, #268]	@ (800121c <HAL_UART_MspInit+0x15c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800111a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800112c:	2308      	movs	r3, #8
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	483a      	ldr	r0, [pc, #232]	@ (8001220 <HAL_UART_MspInit+0x160>)
 8001138:	f000 ff0a 	bl	8001f50 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800113c:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <HAL_UART_MspInit+0x164>)
 800113e:	4a3a      	ldr	r2, [pc, #232]	@ (8001228 <HAL_UART_MspInit+0x168>)
 8001140:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001142:	4b38      	ldr	r3, [pc, #224]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001144:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001148:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114a:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <HAL_UART_MspInit+0x164>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001150:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001156:	4b33      	ldr	r3, [pc, #204]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001158:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800115e:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001164:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800116a:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <HAL_UART_MspInit+0x164>)
 800116c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001170:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <HAL_UART_MspInit+0x164>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800117e:	4829      	ldr	r0, [pc, #164]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001180:	f000 fae4 	bl	800174c <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800118a:	f7ff fe41 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a24      	ldr	r2, [pc, #144]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001194:	4a23      	ldr	r2, [pc, #140]	@ (8001224 <HAL_UART_MspInit+0x164>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2034      	movs	r0, #52	@ 0x34
 80011a0:	f000 fa9d 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011a4:	2034      	movs	r0, #52	@ 0x34
 80011a6:	f000 fab6 	bl	8001716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011aa:	e030      	b.n	800120e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <HAL_UART_MspInit+0x16c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12b      	bne.n	800120e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a17      	ldr	r2, [pc, #92]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_UART_MspInit+0x15c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ee:	230c      	movs	r3, #12
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	@ (8001230 <HAL_UART_MspInit+0x170>)
 800120a:	f000 fea1 	bl	8001f50 <HAL_GPIO_Init>
}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	@ 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40004c00 	.word	0x40004c00
 800121c:	40023800 	.word	0x40023800
 8001220:	40020800 	.word	0x40020800
 8001224:	20000284 	.word	0x20000284
 8001228:	40026040 	.word	0x40026040
 800122c:	40004400 	.word	0x40004400
 8001230:	40020000 	.word	0x40020000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <NMI_Handler+0x4>

0800123c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <MemManage_Handler+0x4>

0800124c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <UsageFault_Handler+0x4>

0800125c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128a:	f000 f92d 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <DMA1_Stream2_IRQHandler+0x10>)
 800129a:	f000 fbef 	bl	8001a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000284 	.word	0x20000284

080012a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <UART4_IRQHandler+0x10>)
 80012ae:	f002 fc89 	bl	8003bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001f4 	.word	0x200001f4

080012bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
  }

  return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800131e:	605a      	str	r2, [r3, #4]
  return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_isatty>:

int _isatty(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001368:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <_sbrk+0x5c>)
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <_sbrk+0x60>)
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <_sbrk+0x64>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <_sbrk+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d207      	bcs.n	80013a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001390:	f003 fe66 	bl	8005060 <__errno>
 8001394:	4603      	mov	r3, r0
 8001396:	220c      	movs	r2, #12
 8001398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <_sbrk+0x64>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <_sbrk+0x64>)
 80013b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b2:	68fb      	ldr	r3, [r7, #12]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20020000 	.word	0x20020000
 80013c0:	00000400 	.word	0x00000400
 80013c4:	2000030c 	.word	0x2000030c
 80013c8:	20000460 	.word	0x20000460

080013cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001428 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013f4:	f7ff ffea 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	@ (8001430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800141e:	f003 fe25 	bl	800506c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001422:	f7ff f8cf 	bl	80005c4 <main>
  bx  lr    
 8001426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001434:	08005c88 	.word	0x08005c88
  ldr r2, =_sbss
 8001438:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800143c:	20000460 	.word	0x20000460

08001440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <HAL_Init+0x40>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <HAL_Init+0x40>)
 800145a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <HAL_Init+0x40>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f92b 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f808 	bl	8001488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001478:	f7ff fcd0 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_InitTick+0x54>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_InitTick+0x58>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f943 	bl	8001732 <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 f90b 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_InitTick+0x5c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000010 	.word	0x20000010
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	@ (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000010 	.word	0x20000010
 800150c:	20000310 	.word	0x20000310

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000310 	.word	0x20000310

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	@ (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	@ (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff3e 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff feda 	bl	8001510 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e099      	b.n	800189c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001788:	e00f      	b.n	80017aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800178a:	f7ff fec1 	bl	8001510 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b05      	cmp	r3, #5
 8001796:	d908      	bls.n	80017aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2220      	movs	r2, #32
 800179c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e078      	b.n	800189c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e8      	bne.n	800178a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <HAL_DMA_Init+0x158>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	2b04      	cmp	r3, #4
 8001802:	d107      	bne.n	8001814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4313      	orrs	r3, r2
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f023 0307 	bic.w	r3, r3, #7
 800182a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	4313      	orrs	r3, r2
 8001834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	2b04      	cmp	r3, #4
 800183c:	d117      	bne.n	800186e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00e      	beq.n	800186e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fb01 	bl	8001e58 <DMA_CheckFifoParam>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2240      	movs	r2, #64	@ 0x40
 8001860:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800186a:	2301      	movs	r3, #1
 800186c:	e016      	b.n	800189c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fab8 	bl	8001dec <DMA_CalcBaseAndBitshift>
 800187c:	4603      	mov	r3, r0
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001884:	223f      	movs	r2, #63	@ 0x3f
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	f010803f 	.word	0xf010803f

080018a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_DMA_Start_IT+0x26>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e040      	b.n	8001950 <HAL_DMA_Start_IT+0xa8>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d12f      	bne.n	8001942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2202      	movs	r2, #2
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 fa4a 	bl	8001d90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001900:	223f      	movs	r2, #63	@ 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0216 	orr.w	r2, r2, #22
 8001916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0208 	orr.w	r2, r2, #8
 800192e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e005      	b.n	800194e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800194a:	2302      	movs	r3, #2
 800194c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800194e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001966:	f7ff fdd3 	bl	8001510 <HAL_GetTick>
 800196a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d008      	beq.n	800198a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e052      	b.n	8001a30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0216 	bic.w	r2, r2, #22
 8001998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <HAL_DMA_Abort+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0208 	bic.w	r2, r2, #8
 80019c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019da:	e013      	b.n	8001a04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019dc:	f7ff fd98 	bl	8001510 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d90c      	bls.n	8001a04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2203      	movs	r2, #3
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e015      	b.n	8001a30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1e4      	bne.n	80019dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	223f      	movs	r2, #63	@ 0x3f
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d004      	beq.n	8001a56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00c      	b.n	8001a70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2205      	movs	r2, #5
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a88:	4b8e      	ldr	r3, [pc, #568]	@ (8001cc4 <HAL_DMA_IRQHandler+0x248>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a8e      	ldr	r2, [pc, #568]	@ (8001cc8 <HAL_DMA_IRQHandler+0x24c>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0a9b      	lsrs	r3, r3, #10
 8001a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01a      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aec:	2201      	movs	r2, #1
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d012      	beq.n	8001b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b16:	f043 0202 	orr.w	r2, r3, #2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	2204      	movs	r2, #4
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d012      	beq.n	8001b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00b      	beq.n	8001b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b40:	2204      	movs	r2, #4
 8001b42:	409a      	lsls	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4c:	f043 0204 	orr.w	r2, r3, #4
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2210      	movs	r2, #16
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d043      	beq.n	8001bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d03c      	beq.n	8001bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	2210      	movs	r2, #16
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d018      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d108      	bne.n	8001bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d024      	beq.n	8001bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
 8001baa:	e01f      	b.n	8001bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01b      	beq.n	8001bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e016      	b.n	8001bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0208 	bic.w	r2, r2, #8
 8001bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 808f 	beq.w	8001d1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8087 	beq.w	8001d1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c12:	2220      	movs	r2, #32
 8001c14:	409a      	lsls	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d136      	bne.n	8001c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0216 	bic.w	r2, r2, #22
 8001c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d103      	bne.n	8001c56 <HAL_DMA_IRQHandler+0x1da>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0208 	bic.w	r2, r2, #8
 8001c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	223f      	movs	r2, #63	@ 0x3f
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d07e      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
        }
        return;
 8001c92:	e079      	b.n	8001d88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01d      	beq.n	8001cde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10d      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d031      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
 8001cc0:	e02c      	b.n	8001d1c <HAL_DMA_IRQHandler+0x2a0>
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d023      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
 8001cdc:	e01e      	b.n	8001d1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10f      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0210 	bic.w	r2, r2, #16
 8001cfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d032      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d022      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2205      	movs	r2, #5
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d307      	bcc.n	8001d64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f2      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x2cc>
 8001d62:	e000      	b.n	8001d66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
 8001d86:	e000      	b.n	8001d8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d88:	bf00      	nop
    }
  }
}
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b40      	cmp	r3, #64	@ 0x40
 8001dbc:	d108      	bne.n	8001dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dce:	e007      	b.n	8001de0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b10      	subs	r3, #16
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <DMA_CalcBaseAndBitshift+0x64>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e06:	4a13      	ldr	r2, [pc, #76]	@ (8001e54 <DMA_CalcBaseAndBitshift+0x68>)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d909      	bls.n	8001e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	1d1a      	adds	r2, r3, #4
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e2c:	e007      	b.n	8001e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	aaaaaaab 	.word	0xaaaaaaab
 8001e54:	08005c3c 	.word	0x08005c3c

08001e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d11f      	bne.n	8001eb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d856      	bhi.n	8001f26 <DMA_CheckFifoParam+0xce>
 8001e78:	a201      	add	r2, pc, #4	@ (adr r2, 8001e80 <DMA_CheckFifoParam+0x28>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001e91 	.word	0x08001e91
 8001e84:	08001ea3 	.word	0x08001ea3
 8001e88:	08001e91 	.word	0x08001e91
 8001e8c:	08001f27 	.word	0x08001f27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d046      	beq.n	8001f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea0:	e043      	b.n	8001f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eaa:	d140      	bne.n	8001f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb0:	e03d      	b.n	8001f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eba:	d121      	bne.n	8001f00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d837      	bhi.n	8001f32 <DMA_CheckFifoParam+0xda>
 8001ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <DMA_CheckFifoParam+0x70>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	08001edf 	.word	0x08001edf
 8001ed0:	08001ed9 	.word	0x08001ed9
 8001ed4:	08001ef1 	.word	0x08001ef1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      break;
 8001edc:	e030      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d025      	beq.n	8001f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eee:	e022      	b.n	8001f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ef8:	d11f      	bne.n	8001f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001efe:	e01c      	b.n	8001f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d903      	bls.n	8001f0e <DMA_CheckFifoParam+0xb6>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d003      	beq.n	8001f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f0c:	e018      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
      break;
 8001f12:	e015      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00e      	beq.n	8001f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
      break;
 8001f24:	e00b      	b.n	8001f3e <DMA_CheckFifoParam+0xe6>
      break;
 8001f26:	bf00      	nop
 8001f28:	e00a      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      break;
 8001f2a:	bf00      	nop
 8001f2c:	e008      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      break;
 8001f2e:	bf00      	nop
 8001f30:	e006      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      break;
 8001f32:	bf00      	nop
 8001f34:	e004      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      break;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e165      	b.n	8002238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 8154 	bne.w	8002232 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d005      	beq.n	8001fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d130      	bne.n	8002004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 0201 	and.w	r2, r3, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b03      	cmp	r3, #3
 800200e:	d017      	beq.n	8002040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d123      	bne.n	8002094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3208      	adds	r2, #8
 8002054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	69b9      	ldr	r1, [r7, #24]
 8002090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0203 	and.w	r2, r3, #3
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80ae 	beq.w	8002232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b5d      	ldr	r3, [pc, #372]	@ (8002250 <HAL_GPIO_Init+0x300>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4a5c      	ldr	r2, [pc, #368]	@ (8002250 <HAL_GPIO_Init+0x300>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002250 <HAL_GPIO_Init+0x300>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a58      	ldr	r2, [pc, #352]	@ (8002254 <HAL_GPIO_Init+0x304>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4f      	ldr	r2, [pc, #316]	@ (8002258 <HAL_GPIO_Init+0x308>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4e      	ldr	r2, [pc, #312]	@ (800225c <HAL_GPIO_Init+0x30c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4d      	ldr	r2, [pc, #308]	@ (8002260 <HAL_GPIO_Init+0x310>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4c      	ldr	r2, [pc, #304]	@ (8002264 <HAL_GPIO_Init+0x314>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4b      	ldr	r2, [pc, #300]	@ (8002268 <HAL_GPIO_Init+0x318>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x20a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4a      	ldr	r2, [pc, #296]	@ (800226c <HAL_GPIO_Init+0x31c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x206>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a49      	ldr	r2, [pc, #292]	@ (8002270 <HAL_GPIO_Init+0x320>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x202>
 800214e:	2306      	movs	r3, #6
 8002150:	e00c      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002152:	2307      	movs	r3, #7
 8002154:	e00a      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002156:	2305      	movs	r3, #5
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800215a:	2304      	movs	r3, #4
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4935      	ldr	r1, [pc, #212]	@ (8002254 <HAL_GPIO_Init+0x304>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_GPIO_Init+0x324>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a31      	ldr	r2, [pc, #196]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021de:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <HAL_GPIO_Init+0x324>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002202:	4a1c      	ldr	r2, [pc, #112]	@ (8002274 <HAL_GPIO_Init+0x324>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002208:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_GPIO_Init+0x324>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222c:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <HAL_GPIO_Init+0x324>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f ae96 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40021000 	.word	0x40021000
 800226c:	40021400 	.word	0x40021400
 8002270:	40021800 	.word	0x40021800
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0cc      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b68      	ldr	r3, [pc, #416]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d90c      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b65      	ldr	r3, [pc, #404]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a58      	ldr	r2, [pc, #352]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e067      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4934      	ldr	r1, [pc, #208]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7ff f8b8 	bl	8001510 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7ff f8b4 	bl	8001510 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20c      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f855 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490a      	ldr	r1, [pc, #40]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f818 	bl	8001488 <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00
 8002468:	40023800 	.word	0x40023800
 800246c:	08005c24 	.word	0x08005c24
 8002470:	20000008 	.word	0x20000008
 8002474:	2000000c 	.word	0x2000000c

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_GetHCLKFreq+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000008 	.word	0x20000008

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002494:	f7ff fff0 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	@ (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08005c34 	.word	0x08005c34

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024bc:	f7ff ffdc 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0b5b      	lsrs	r3, r3, #13
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	@ (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08005c34 	.word	0x08005c34

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e4:	b0ae      	sub	sp, #184	@ 0xb8
 80024e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002506:	4bcb      	ldr	r3, [pc, #812]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b0c      	cmp	r3, #12
 8002510:	f200 8206 	bhi.w	8002920 <HAL_RCC_GetSysClockFreq+0x440>
 8002514:	a201      	add	r2, pc, #4	@ (adr r2, 800251c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	08002551 	.word	0x08002551
 8002520:	08002921 	.word	0x08002921
 8002524:	08002921 	.word	0x08002921
 8002528:	08002921 	.word	0x08002921
 800252c:	08002559 	.word	0x08002559
 8002530:	08002921 	.word	0x08002921
 8002534:	08002921 	.word	0x08002921
 8002538:	08002921 	.word	0x08002921
 800253c:	08002561 	.word	0x08002561
 8002540:	08002921 	.word	0x08002921
 8002544:	08002921 	.word	0x08002921
 8002548:	08002921 	.word	0x08002921
 800254c:	08002751 	.word	0x08002751
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4bb9      	ldr	r3, [pc, #740]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x358>)
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002556:	e1e7      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002558:	4bb8      	ldr	r3, [pc, #736]	@ (800283c <HAL_RCC_GetSysClockFreq+0x35c>)
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800255e:	e1e3      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4bb4      	ldr	r3, [pc, #720]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256c:	4bb1      	ldr	r3, [pc, #708]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d071      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002578:	4bae      	ldr	r3, [pc, #696]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	2200      	movs	r2, #0
 8002580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002584:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002588:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800258c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002590:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800259a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b0:	0150      	lsls	r0, r2, #5
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4621      	mov	r1, r4
 80025b8:	1a51      	subs	r1, r2, r1
 80025ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80025bc:	4629      	mov	r1, r5
 80025be:	eb63 0301 	sbc.w	r3, r3, r1
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025d0:	4649      	mov	r1, r9
 80025d2:	018b      	lsls	r3, r1, #6
 80025d4:	4641      	mov	r1, r8
 80025d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025da:	4641      	mov	r1, r8
 80025dc:	018a      	lsls	r2, r1, #6
 80025de:	4641      	mov	r1, r8
 80025e0:	1a51      	subs	r1, r2, r1
 80025e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025e4:	4649      	mov	r1, r9
 80025e6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025f8:	4649      	mov	r1, r9
 80025fa:	00cb      	lsls	r3, r1, #3
 80025fc:	4641      	mov	r1, r8
 80025fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002602:	4641      	mov	r1, r8
 8002604:	00ca      	lsls	r2, r1, #3
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	4603      	mov	r3, r0
 800260c:	4622      	mov	r2, r4
 800260e:	189b      	adds	r3, r3, r2
 8002610:	633b      	str	r3, [r7, #48]	@ 0x30
 8002612:	462b      	mov	r3, r5
 8002614:	460a      	mov	r2, r1
 8002616:	eb42 0303 	adc.w	r3, r2, r3
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002628:	4629      	mov	r1, r5
 800262a:	024b      	lsls	r3, r1, #9
 800262c:	4621      	mov	r1, r4
 800262e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002632:	4621      	mov	r1, r4
 8002634:	024a      	lsls	r2, r1, #9
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800263e:	2200      	movs	r2, #0
 8002640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002644:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002648:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800264c:	f7fd fe30 	bl	80002b0 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800265a:	e067      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4b75      	ldr	r3, [pc, #468]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	2200      	movs	r2, #0
 8002664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002668:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800266c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002676:	2300      	movs	r3, #0
 8002678:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800267a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800267e:	4622      	mov	r2, r4
 8002680:	462b      	mov	r3, r5
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	0159      	lsls	r1, r3, #5
 800268c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002690:	0150      	lsls	r0, r2, #5
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4621      	mov	r1, r4
 8002698:	1a51      	subs	r1, r2, r1
 800269a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800269c:	4629      	mov	r1, r5
 800269e:	eb63 0301 	sbc.w	r3, r3, r1
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026b0:	4649      	mov	r1, r9
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	4641      	mov	r1, r8
 80026b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ba:	4641      	mov	r1, r8
 80026bc:	018a      	lsls	r2, r1, #6
 80026be:	4641      	mov	r1, r8
 80026c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80026c4:	4649      	mov	r1, r9
 80026c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026de:	4692      	mov	sl, r2
 80026e0:	469b      	mov	fp, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb1a 0303 	adds.w	r3, sl, r3
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	462b      	mov	r3, r5
 80026ec:	eb4b 0303 	adc.w	r3, fp, r3
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002714:	2200      	movs	r2, #0
 8002716:	673b      	str	r3, [r7, #112]	@ 0x70
 8002718:	677a      	str	r2, [r7, #116]	@ 0x74
 800271a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800271e:	f7fd fdc7 	bl	80002b0 <__aeabi_uldivmod>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4613      	mov	r3, r2
 8002728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800272c:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800273e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800274e:	e0eb      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002750:	4b38      	ldr	r3, [pc, #224]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275c:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d06b      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002768:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	2200      	movs	r2, #0
 8002770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	663b      	str	r3, [r7, #96]	@ 0x60
 800277c:	2300      	movs	r3, #0
 800277e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002780:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002784:	4622      	mov	r2, r4
 8002786:	462b      	mov	r3, r5
 8002788:	f04f 0000 	mov.w	r0, #0
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	0159      	lsls	r1, r3, #5
 8002792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002796:	0150      	lsls	r0, r2, #5
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4621      	mov	r1, r4
 800279e:	1a51      	subs	r1, r2, r1
 80027a0:	61b9      	str	r1, [r7, #24]
 80027a2:	4629      	mov	r1, r5
 80027a4:	eb63 0301 	sbc.w	r3, r3, r1
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027b6:	4659      	mov	r1, fp
 80027b8:	018b      	lsls	r3, r1, #6
 80027ba:	4651      	mov	r1, sl
 80027bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c0:	4651      	mov	r1, sl
 80027c2:	018a      	lsls	r2, r1, #6
 80027c4:	4651      	mov	r1, sl
 80027c6:	ebb2 0801 	subs.w	r8, r2, r1
 80027ca:	4659      	mov	r1, fp
 80027cc:	eb63 0901 	sbc.w	r9, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027e4:	4690      	mov	r8, r2
 80027e6:	4699      	mov	r9, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	eb18 0303 	adds.w	r3, r8, r3
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	462b      	mov	r3, r5
 80027f2:	eb49 0303 	adc.w	r3, r9, r3
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002804:	4629      	mov	r1, r5
 8002806:	024b      	lsls	r3, r1, #9
 8002808:	4621      	mov	r1, r4
 800280a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800280e:	4621      	mov	r1, r4
 8002810:	024a      	lsls	r2, r1, #9
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800281a:	2200      	movs	r2, #0
 800281c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800281e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002820:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002824:	f7fd fd44 	bl	80002b0 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4613      	mov	r3, r2
 800282e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002832:	e065      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x420>
 8002834:	40023800 	.word	0x40023800
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002840:	4b3d      	ldr	r3, [pc, #244]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x458>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	2200      	movs	r2, #0
 8002848:	4618      	mov	r0, r3
 800284a:	4611      	mov	r1, r2
 800284c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002850:	653b      	str	r3, [r7, #80]	@ 0x50
 8002852:	2300      	movs	r3, #0
 8002854:	657b      	str	r3, [r7, #84]	@ 0x54
 8002856:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800285a:	4642      	mov	r2, r8
 800285c:	464b      	mov	r3, r9
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286c:	0150      	lsls	r0, r2, #5
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4641      	mov	r1, r8
 8002874:	1a51      	subs	r1, r2, r1
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	4649      	mov	r1, r9
 800287a:	eb63 0301 	sbc.w	r3, r3, r1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800288c:	4659      	mov	r1, fp
 800288e:	018b      	lsls	r3, r1, #6
 8002890:	4651      	mov	r1, sl
 8002892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002896:	4651      	mov	r1, sl
 8002898:	018a      	lsls	r2, r1, #6
 800289a:	4651      	mov	r1, sl
 800289c:	1a54      	subs	r4, r2, r1
 800289e:	4659      	mov	r1, fp
 80028a0:	eb63 0501 	sbc.w	r5, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	00eb      	lsls	r3, r5, #3
 80028ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b2:	00e2      	lsls	r2, r4, #3
 80028b4:	4614      	mov	r4, r2
 80028b6:	461d      	mov	r5, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	464b      	mov	r3, r9
 80028c0:	eb45 0303 	adc.w	r3, r5, r3
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d2:	4629      	mov	r1, r5
 80028d4:	028b      	lsls	r3, r1, #10
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028dc:	4621      	mov	r1, r4
 80028de:	028a      	lsls	r2, r1, #10
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028e8:	2200      	movs	r2, #0
 80028ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80028ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028f2:	f7fd fcdd 	bl	80002b0 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4613      	mov	r3, r2
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002900:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x458>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0f1b      	lsrs	r3, r3, #28
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800290e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800291e:	e003      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800292c:	4618      	mov	r0, r3
 800292e:	37b8      	adds	r7, #184	@ 0xb8
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	00f42400 	.word	0x00f42400

08002940 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e28d      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8083 	beq.w	8002a66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002960:	4b94      	ldr	r3, [pc, #592]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b04      	cmp	r3, #4
 800296a:	d019      	beq.n	80029a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800296c:	4b91      	ldr	r3, [pc, #580]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
        || \
 8002974:	2b08      	cmp	r3, #8
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002978:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002984:	d00c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002986:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4b88      	ldr	r3, [pc, #544]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299e:	d10b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	4b84      	ldr	r3, [pc, #528]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x124>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d157      	bne.n	8002a64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e25a      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d106      	bne.n	80029d0 <HAL_RCC_OscConfig+0x90>
 80029c2:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7b      	ldr	r2, [pc, #492]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xcc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xb4>
 80029da:	4b76      	ldr	r3, [pc, #472]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a75      	ldr	r2, [pc, #468]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a72      	ldr	r2, [pc, #456]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xcc>
 80029f4:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fd7c 	bl	8001510 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fd78 	bl	8001510 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e21f      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b61      	ldr	r3, [pc, #388]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xdc>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fd68 	bl	8001510 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fd64 	bl	8001510 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e20b      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b57      	ldr	r3, [pc, #348]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x104>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d06f      	beq.n	8002b52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a72:	4b50      	ldr	r3, [pc, #320]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d017      	beq.n	8002aae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d105      	bne.n	8002a96 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b44      	ldr	r3, [pc, #272]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x186>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1d3      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4937      	ldr	r1, [pc, #220]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <HAL_RCC_OscConfig+0x278>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fd11 	bl	8001510 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fe fd0d 	bl	8001510 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1b4      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4925      	ldr	r1, [pc, #148]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <HAL_RCC_OscConfig+0x278>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fcf0 	bl	8001510 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fcec 	bl	8001510 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e193      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d036      	beq.n	8002bcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fcd0 	bl	8001510 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe fccc 	bl	8001510 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e173      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x234>
 8002b92:	e01b      	b.n	8002bcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fcb9 	bl	8001510 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fcb5 	bl	8001510 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d907      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e15c      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470000 	.word	0x42470000
 8002bbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ea      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8097 	beq.w	8002d08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b83      	ldr	r3, [pc, #524]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b7f      	ldr	r3, [pc, #508]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b79      	ldr	r3, [pc, #484]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4b76      	ldr	r3, [pc, #472]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fe fc75 	bl	8001510 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7fe fc71 	bl	8001510 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e118      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x31e>
 8002c50:	4b66      	ldr	r3, [pc, #408]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	4a65      	ldr	r2, [pc, #404]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x358>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x340>
 8002c66:	4b61      	ldr	r3, [pc, #388]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	4a60      	ldr	r2, [pc, #384]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c72:	4b5e      	ldr	r3, [pc, #376]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	4a5d      	ldr	r2, [pc, #372]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x358>
 8002c80:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a59      	ldr	r2, [pc, #356]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	4b57      	ldr	r3, [pc, #348]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	4a56      	ldr	r2, [pc, #344]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fc36 	bl	8001510 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fc32 	bl	8001510 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0d7      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ee      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x368>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fc20 	bl	8001510 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe fc1c 	bl	8001510 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0c1      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ee      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	4a3a      	ldr	r2, [pc, #232]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80ad 	beq.w	8002e6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d12:	4b36      	ldr	r3, [pc, #216]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d060      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d145      	bne.n	8002db2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_RCC_OscConfig+0x4b4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fbf0 	bl	8001510 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe fbec 	bl	8001510 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e093      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b29      	ldr	r3, [pc, #164]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	071b      	lsls	r3, r3, #28
 8002d7e:	491b      	ldr	r1, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x4b4>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fbc1 	bl	8001510 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fbbd 	bl	8001510 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e064      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x452>
 8002db0:	e05c      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_RCC_OscConfig+0x4b4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fbaa 	bl	8001510 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fba6 	bl	8001510 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04d      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x480>
 8002dde:	e045      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e040      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e78 <HAL_RCC_OscConfig+0x538>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d030      	beq.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d129      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d122      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d119      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d10f      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd ffe2 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 fa10 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e041      	b.n	8002fb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f839 	bl	8002fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f000 f9c1 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e0ae      	b.n	8003148 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	f200 809f 	bhi.w	8003138 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8003000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003035 	.word	0x08003035
 8003004:	08003139 	.word	0x08003139
 8003008:	08003139 	.word	0x08003139
 800300c:	08003139 	.word	0x08003139
 8003010:	08003075 	.word	0x08003075
 8003014:	08003139 	.word	0x08003139
 8003018:	08003139 	.word	0x08003139
 800301c:	08003139 	.word	0x08003139
 8003020:	080030b7 	.word	0x080030b7
 8003024:	08003139 	.word	0x08003139
 8003028:	08003139 	.word	0x08003139
 800302c:	08003139 	.word	0x08003139
 8003030:	080030f7 	.word	0x080030f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f9fc 	bl	8003438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0208 	orr.w	r2, r2, #8
 800304e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6999      	ldr	r1, [r3, #24]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	619a      	str	r2, [r3, #24]
      break;
 8003072:	e064      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa4c 	bl	8003518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800308e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6999      	ldr	r1, [r3, #24]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	619a      	str	r2, [r3, #24]
      break;
 80030b4:	e043      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 faa1 	bl	8003604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0208 	orr.w	r2, r2, #8
 80030d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69d9      	ldr	r1, [r3, #28]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
      break;
 80030f4:	e023      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 faf5 	bl	80036ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69d9      	ldr	r1, [r3, #28]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	61da      	str	r2, [r3, #28]
      break;
 8003136:	e002      	b.n	800313e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
      break;
 800313c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_TIM_ConfigClockSource+0x1c>
 8003168:	2302      	movs	r3, #2
 800316a:	e0b4      	b.n	80032d6 <HAL_TIM_ConfigClockSource+0x186>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800318a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a4:	d03e      	beq.n	8003224 <HAL_TIM_ConfigClockSource+0xd4>
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031aa:	f200 8087 	bhi.w	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b2:	f000 8086 	beq.w	80032c2 <HAL_TIM_ConfigClockSource+0x172>
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ba:	d87f      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b70      	cmp	r3, #112	@ 0x70
 80031be:	d01a      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0xa6>
 80031c0:	2b70      	cmp	r3, #112	@ 0x70
 80031c2:	d87b      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b60      	cmp	r3, #96	@ 0x60
 80031c6:	d050      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x11a>
 80031c8:	2b60      	cmp	r3, #96	@ 0x60
 80031ca:	d877      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b50      	cmp	r3, #80	@ 0x50
 80031ce:	d03c      	beq.n	800324a <HAL_TIM_ConfigClockSource+0xfa>
 80031d0:	2b50      	cmp	r3, #80	@ 0x50
 80031d2:	d873      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b40      	cmp	r3, #64	@ 0x40
 80031d6:	d058      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x13a>
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d86f      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b30      	cmp	r3, #48	@ 0x30
 80031de:	d064      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	2b30      	cmp	r3, #48	@ 0x30
 80031e2:	d86b      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d060      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d867      	bhi.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d05c      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d05a      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x15a>
 80031f4:	e062      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003206:	f000 fb41 	bl	800388c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	609a      	str	r2, [r3, #8]
      break;
 8003222:	e04f      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003234:	f000 fb2a 	bl	800388c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003246:	609a      	str	r2, [r3, #8]
      break;
 8003248:	e03c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	461a      	mov	r2, r3
 8003258:	f000 fa9e 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2150      	movs	r1, #80	@ 0x50
 8003262:	4618      	mov	r0, r3
 8003264:	f000 faf7 	bl	8003856 <TIM_ITRx_SetConfig>
      break;
 8003268:	e02c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003276:	461a      	mov	r2, r3
 8003278:	f000 fabd 	bl	80037f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2160      	movs	r1, #96	@ 0x60
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fae7 	bl	8003856 <TIM_ITRx_SetConfig>
      break;
 8003288:	e01c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	461a      	mov	r2, r3
 8003298:	f000 fa7e 	bl	8003798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2140      	movs	r1, #64	@ 0x40
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fad7 	bl	8003856 <TIM_ITRx_SetConfig>
      break;
 80032a8:	e00c      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f000 face 	bl	8003856 <TIM_ITRx_SetConfig>
      break;
 80032ba:	e003      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e000      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a46      	ldr	r2, [pc, #280]	@ (800340c <TIM_Base_SetConfig+0x12c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fe:	d00f      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a43      	ldr	r2, [pc, #268]	@ (8003410 <TIM_Base_SetConfig+0x130>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00b      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a42      	ldr	r2, [pc, #264]	@ (8003414 <TIM_Base_SetConfig+0x134>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a41      	ldr	r2, [pc, #260]	@ (8003418 <TIM_Base_SetConfig+0x138>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a40      	ldr	r2, [pc, #256]	@ (800341c <TIM_Base_SetConfig+0x13c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a35      	ldr	r2, [pc, #212]	@ (800340c <TIM_Base_SetConfig+0x12c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d02b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003340:	d027      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a32      	ldr	r2, [pc, #200]	@ (8003410 <TIM_Base_SetConfig+0x130>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d023      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a31      	ldr	r2, [pc, #196]	@ (8003414 <TIM_Base_SetConfig+0x134>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a30      	ldr	r2, [pc, #192]	@ (8003418 <TIM_Base_SetConfig+0x138>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2f      	ldr	r2, [pc, #188]	@ (800341c <TIM_Base_SetConfig+0x13c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d017      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2e      	ldr	r2, [pc, #184]	@ (8003420 <TIM_Base_SetConfig+0x140>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <TIM_Base_SetConfig+0x144>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2c      	ldr	r2, [pc, #176]	@ (8003428 <TIM_Base_SetConfig+0x148>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a2b      	ldr	r2, [pc, #172]	@ (800342c <TIM_Base_SetConfig+0x14c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2a      	ldr	r2, [pc, #168]	@ (8003430 <TIM_Base_SetConfig+0x150>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a29      	ldr	r2, [pc, #164]	@ (8003434 <TIM_Base_SetConfig+0x154>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a10      	ldr	r2, [pc, #64]	@ (800340c <TIM_Base_SetConfig+0x12c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a12      	ldr	r2, [pc, #72]	@ (800341c <TIM_Base_SetConfig+0x13c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  }
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40010400 	.word	0x40010400
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800
 800342c:	40001800 	.word	0x40001800
 8003430:	40001c00 	.word	0x40001c00
 8003434:	40002000 	.word	0x40002000

08003438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f023 0201 	bic.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f023 0302 	bic.w	r3, r3, #2
 8003480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a20      	ldr	r2, [pc, #128]	@ (8003510 <TIM_OC1_SetConfig+0xd8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d003      	beq.n	800349c <TIM_OC1_SetConfig+0x64>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <TIM_OC1_SetConfig+0xdc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10c      	bne.n	80034b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0308 	bic.w	r3, r3, #8
 80034a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a15      	ldr	r2, [pc, #84]	@ (8003510 <TIM_OC1_SetConfig+0xd8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_OC1_SetConfig+0x8e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a14      	ldr	r2, [pc, #80]	@ (8003514 <TIM_OC1_SetConfig+0xdc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d111      	bne.n	80034ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40010000 	.word	0x40010000
 8003514:	40010400 	.word	0x40010400

08003518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 0210 	bic.w	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800354e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0320 	bic.w	r3, r3, #32
 8003562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a22      	ldr	r2, [pc, #136]	@ (80035fc <TIM_OC2_SetConfig+0xe4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC2_SetConfig+0x68>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a21      	ldr	r2, [pc, #132]	@ (8003600 <TIM_OC2_SetConfig+0xe8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10d      	bne.n	800359c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800359a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <TIM_OC2_SetConfig+0xe4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_OC2_SetConfig+0x94>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a16      	ldr	r2, [pc, #88]	@ (8003600 <TIM_OC2_SetConfig+0xe8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d113      	bne.n	80035d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400

08003604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800364c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a21      	ldr	r2, [pc, #132]	@ (80036e4 <TIM_OC3_SetConfig+0xe0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_OC3_SetConfig+0x66>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a20      	ldr	r2, [pc, #128]	@ (80036e8 <TIM_OC3_SetConfig+0xe4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10d      	bne.n	8003686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a16      	ldr	r2, [pc, #88]	@ (80036e4 <TIM_OC3_SetConfig+0xe0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_OC3_SetConfig+0x92>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a15      	ldr	r2, [pc, #84]	@ (80036e8 <TIM_OC3_SetConfig+0xe4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d113      	bne.n	80036be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800369c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010400 	.word	0x40010400

080036ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	031b      	lsls	r3, r3, #12
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a12      	ldr	r2, [pc, #72]	@ (8003790 <TIM_OC4_SetConfig+0xa4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_OC4_SetConfig+0x68>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <TIM_OC4_SetConfig+0xa8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d109      	bne.n	8003768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800375a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40010400 	.word	0x40010400

08003798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 030a 	bic.w	r3, r3, #10
 80037d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b087      	sub	sp, #28
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f023 0210 	bic.w	r2, r3, #16
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	031b      	lsls	r3, r3, #12
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003856:	b480      	push	{r7}
 8003858:	b085      	sub	sp, #20
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	f043 0307 	orr.w	r3, r3, #7
 8003878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	609a      	str	r2, [r3, #8]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	021a      	lsls	r2, r3, #8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e05a      	b.n	800399a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a21      	ldr	r2, [pc, #132]	@ (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d022      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003930:	d01d      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d018      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1b      	ldr	r2, [pc, #108]	@ (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1a      	ldr	r2, [pc, #104]	@ (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00e      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a18      	ldr	r2, [pc, #96]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a17      	ldr	r2, [pc, #92]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d004      	beq.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a15      	ldr	r2, [pc, #84]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10c      	bne.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4313      	orrs	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40010400 	.word	0x40010400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40001800 	.word	0x40001800

080039c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e042      	b.n	8003a5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fb68 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2224      	movs	r2, #36	@ 0x24
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 ff4f 	bl	80048ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	@ 0x28
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d175      	bne.n	8003b70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_UART_Transmit+0x2c>
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e06e      	b.n	8003b72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2221      	movs	r2, #33	@ 0x21
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aa2:	f7fd fd35 	bl	8001510 <HAL_GetTick>
 8003aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abc:	d108      	bne.n	8003ad0 <HAL_UART_Transmit+0x6c>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	e003      	b.n	8003ad8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad8:	e02e      	b.n	8003b38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2180      	movs	r1, #128	@ 0x80
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fc27 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e03a      	b.n	8003b72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	3302      	adds	r3, #2
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e007      	b.n	8003b2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	3301      	adds	r3, #1
 8003b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1cb      	bne.n	8003ada <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2140      	movs	r1, #64	@ 0x40
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fbf3 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e006      	b.n	8003b72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	4613      	mov	r3, r2
 8003b86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d112      	bne.n	8003bba <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Receive_DMA+0x26>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e00b      	b.n	8003bbc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	461a      	mov	r2, r3
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fc1b 	bl	80043ec <UART_Start_Receive_DMA>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	e000      	b.n	8003bbc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0ba      	sub	sp, #232	@ 0xe8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_UART_IRQHandler+0x66>
 8003c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fd83 	bl	800472e <UART_Receive_IT>
      return;
 8003c28:	e25b      	b.n	80040e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80de 	beq.w	8003df0 <HAL_UART_IRQHandler+0x22c>
 8003c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80d1 	beq.w	8003df0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_UART_IRQHandler+0xae>
 8003c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_UART_IRQHandler+0xd2>
 8003c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	f043 0202 	orr.w	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_UART_IRQHandler+0xf6>
 8003ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	f043 0204 	orr.w	r2, r3, #4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d011      	beq.n	8003cea <HAL_UART_IRQHandler+0x126>
 8003cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d105      	bne.n	8003cde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	f043 0208 	orr.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 81f2 	beq.w	80040d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_UART_IRQHandler+0x14e>
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fd0e 	bl	800472e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_UART_IRQHandler+0x17a>
 8003d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d04f      	beq.n	8003dde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fc16 	bl	8004570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b40      	cmp	r3, #64	@ 0x40
 8003d50:	d141      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3314      	adds	r3, #20
 8003d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1d9      	bne.n	8003d52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa4 <HAL_UART_IRQHandler+0x3e0>)
 8003dac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd fe40 	bl	8001a38 <HAL_DMA_Abort_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	e00e      	b.n	8003dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f99e 	bl	8004110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	e00a      	b.n	8003dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f99a 	bl	8004110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e006      	b.n	8003dec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f996 	bl	8004110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dea:	e175      	b.n	80040d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	bf00      	nop
    return;
 8003dee:	e173      	b.n	80040d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 814f 	bne.w	8004098 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8148 	beq.w	8004098 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8141 	beq.w	8004098 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b40      	cmp	r3, #64	@ 0x40
 8003e38:	f040 80b6 	bne.w	8003fa8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8145 	beq.w	80040dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	f080 813e 	bcs.w	80040dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e72:	f000 8088 	beq.w	8003f86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ea2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1d9      	bne.n	8003e76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ed2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ee6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003eee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ef8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e1      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e3      	bne.n	8003efe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f56:	f023 0310 	bic.w	r3, r3, #16
 8003f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e3      	bne.n	8003f44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fd fce9 	bl	8001958 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8c1 	bl	8004124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fa2:	e09b      	b.n	80040dc <HAL_UART_IRQHandler+0x518>
 8003fa4:	08004637 	.word	0x08004637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 808e 	beq.w	80040e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8089 	beq.w	80040e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ff2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ff4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e3      	bne.n	8003fce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	623b      	str	r3, [r7, #32]
   return(result);
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3314      	adds	r3, #20
 8004026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800402a:	633a      	str	r2, [r7, #48]	@ 0x30
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e3      	bne.n	8004006 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	60fb      	str	r3, [r7, #12]
   return(result);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0310 	bic.w	r3, r3, #16
 8004062:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004070:	61fa      	str	r2, [r7, #28]
 8004072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	617b      	str	r3, [r7, #20]
   return(result);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e3      	bne.n	800404c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800408a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f847 	bl	8004124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004096:	e023      	b.n	80040e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <HAL_UART_IRQHandler+0x4f4>
 80040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fad4 	bl	800465e <UART_Transmit_IT>
    return;
 80040b6:	e014      	b.n	80040e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00e      	beq.n	80040e2 <HAL_UART_IRQHandler+0x51e>
 80040c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fb14 	bl	80046fe <UART_EndTransmit_IT>
    return;
 80040d6:	e004      	b.n	80040e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80040d8:	bf00      	nop
 80040da:	e002      	b.n	80040e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80040e0:	bf00      	nop
  }
}
 80040e2:	37e8      	adds	r7, #232	@ 0xe8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b09c      	sub	sp, #112	@ 0x70
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d172      	bne.n	800423e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415a:	2200      	movs	r2, #0
 800415c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800416e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800417e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004180:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800418c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80041aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	623b      	str	r3, [r7, #32]
   return(result);
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3314      	adds	r3, #20
 80041e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e5      	bne.n	80041c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	2b01      	cmp	r3, #1
 8004208:	d119      	bne.n	800423e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	60fb      	str	r3, [r7, #12]
   return(result);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f023 0310 	bic.w	r3, r3, #16
 8004220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800422a:	61fa      	str	r2, [r7, #28]
 800422c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	69b9      	ldr	r1, [r7, #24]
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	617b      	str	r3, [r7, #20]
   return(result);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800423e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004240:	2200      	movs	r2, #0
 8004242:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	2b01      	cmp	r3, #1
 800424a:	d106      	bne.n	800425a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800424e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004250:	4619      	mov	r1, r3
 8004252:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004254:	f7ff ff66 	bl	8004124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004258:	e002      	b.n	8004260 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800425a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800425c:	f7fc f9a0 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 8004260:	bf00      	nop
 8004262:	3770      	adds	r7, #112	@ 0x70
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	2b01      	cmp	r3, #1
 8004282:	d108      	bne.n	8004296 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	4619      	mov	r1, r3
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff ff48 	bl	8004124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004294:	e002      	b.n	800429c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff30 	bl	80040fc <HAL_UART_RxHalfCpltCallback>
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c0:	2b80      	cmp	r3, #128	@ 0x80
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b21      	cmp	r3, #33	@ 0x21
 80042d6:	d108      	bne.n	80042ea <UART_DMAError+0x46>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2200      	movs	r2, #0
 80042e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80042e4:	68b8      	ldr	r0, [r7, #8]
 80042e6:	f000 f91b 	bl	8004520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b22      	cmp	r3, #34	@ 0x22
 800430a:	d108      	bne.n	800431e <UART_DMAError+0x7a>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2200      	movs	r2, #0
 8004316:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004318:	68b8      	ldr	r0, [r7, #8]
 800431a:	f000 f929 	bl	8004570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	f043 0210 	orr.w	r2, r3, #16
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800432a:	68b8      	ldr	r0, [r7, #8]
 800432c:	f7ff fef0 	bl	8004110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004348:	e03b      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d037      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fd f8dd 	bl	8001510 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <UART_WaitOnFlagUntilTimeout+0x30>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e03a      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	d020      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d01d      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d116      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f8e0 	bl	8004570 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2208      	movs	r2, #8
 80043b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e00f      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d0b4      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b098      	sub	sp, #96	@ 0x60
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2222      	movs	r2, #34	@ 0x22
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	4a3e      	ldr	r2, [pc, #248]	@ (8004514 <UART_Start_Receive_DMA+0x128>)
 800441a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004420:	4a3d      	ldr	r2, [pc, #244]	@ (8004518 <UART_Start_Receive_DMA+0x12c>)
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	4a3c      	ldr	r2, [pc, #240]	@ (800451c <UART_Start_Receive_DMA+0x130>)
 800442a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	2200      	movs	r2, #0
 8004432:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004434:	f107 0308 	add.w	r3, r7, #8
 8004438:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	f7fd fa2c 	bl	80018a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800447e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800448e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004490:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004494:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	617b      	str	r3, [r7, #20]
   return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80044f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80044f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6a39      	ldr	r1, [r7, #32]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	61fb      	str	r3, [r7, #28]
   return(result);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3760      	adds	r7, #96	@ 0x60
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	0800413d 	.word	0x0800413d
 8004518:	08004269 	.word	0x08004269
 800451c:	080042a5 	.word	0x080042a5

08004520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	60bb      	str	r3, [r7, #8]
   return(result);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	61ba      	str	r2, [r7, #24]
 800454a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6979      	ldr	r1, [r7, #20]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	613b      	str	r3, [r7, #16]
   return(result);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e5      	bne.n	8004528 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004564:	bf00      	nop
 8004566:	3724      	adds	r7, #36	@ 0x24
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b095      	sub	sp, #84	@ 0x54
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800458e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004598:	643a      	str	r2, [r7, #64]	@ 0x40
 800459a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800459e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d119      	bne.n	800461c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0310 	bic.w	r3, r3, #16
 80045fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004608:	61ba      	str	r2, [r7, #24]
 800460a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e5      	bne.n	80045e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800462a:	bf00      	nop
 800462c:	3754      	adds	r7, #84	@ 0x54
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff fd5d 	bl	8004110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b21      	cmp	r3, #33	@ 0x21
 8004670:	d13e      	bne.n	80046f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467a:	d114      	bne.n	80046a6 <UART_Transmit_IT+0x48>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d110      	bne.n	80046a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]
 80046a4:	e008      	b.n	80046b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6211      	str	r1, [r2, #32]
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4619      	mov	r1, r3
 80046c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fce2 	bl	80040e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08c      	sub	sp, #48	@ 0x30
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b22      	cmp	r3, #34	@ 0x22
 8004740:	f040 80ae 	bne.w	80048a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474c:	d117      	bne.n	800477e <UART_Receive_IT+0x50>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d113      	bne.n	800477e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	b29a      	uxth	r2, r3
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	@ 0x28
 800477c:	e026      	b.n	80047cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d007      	beq.n	80047a2 <UART_Receive_IT+0x74>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <UART_Receive_IT+0x82>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e008      	b.n	80047c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4619      	mov	r1, r3
 80047da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d15d      	bne.n	800489c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0220 	bic.w	r2, r2, #32
 80047ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004822:	2b01      	cmp	r3, #1
 8004824:	d135      	bne.n	8004892 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	613b      	str	r3, [r7, #16]
   return(result);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484c:	623a      	str	r2, [r7, #32]
 800484e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	6a3a      	ldr	r2, [r7, #32]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	61bb      	str	r3, [r7, #24]
   return(result);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b10      	cmp	r3, #16
 800486c:	d10a      	bne.n	8004884 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fc4a 	bl	8004124 <HAL_UARTEx_RxEventCallback>
 8004890:	e002      	b.n	8004898 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fb fe84 	bl	80005a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e002      	b.n	80048a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b0c0      	sub	sp, #256	@ 0x100
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	ea40 0301 	orr.w	r3, r0, r1
 80048d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004904:	f021 010c 	bic.w	r1, r1, #12
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004912:	430b      	orrs	r3, r1
 8004914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	6999      	ldr	r1, [r3, #24]
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	ea40 0301 	orr.w	r3, r0, r1
 8004932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b78 <UART_SetConfig+0x2cc>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d005      	beq.n	800494c <UART_SetConfig+0xa0>
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8d      	ldr	r3, [pc, #564]	@ (8004b7c <UART_SetConfig+0x2d0>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d104      	bne.n	8004956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fd fdb4 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 8004950:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004954:	e003      	b.n	800495e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004956:	f7fd fd9b 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 800495a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004968:	f040 810c 	bne.w	8004b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004976:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800497a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	1891      	adds	r1, r2, r2
 8004984:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004986:	415b      	adcs	r3, r3
 8004988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800498e:	4621      	mov	r1, r4
 8004990:	eb12 0801 	adds.w	r8, r2, r1
 8004994:	4629      	mov	r1, r5
 8004996:	eb43 0901 	adc.w	r9, r3, r1
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ae:	4690      	mov	r8, r2
 80049b0:	4699      	mov	r9, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	eb18 0303 	adds.w	r3, r8, r3
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049bc:	462b      	mov	r3, r5
 80049be:	eb49 0303 	adc.w	r3, r9, r3
 80049c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049da:	460b      	mov	r3, r1
 80049dc:	18db      	adds	r3, r3, r3
 80049de:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e0:	4613      	mov	r3, r2
 80049e2:	eb42 0303 	adc.w	r3, r2, r3
 80049e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049f0:	f7fb fc5e 	bl	80002b0 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b61      	ldr	r3, [pc, #388]	@ (8004b80 <UART_SetConfig+0x2d4>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011c      	lsls	r4, r3, #4
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a24:	4641      	mov	r1, r8
 8004a26:	eb12 0a01 	adds.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a44:	4692      	mov	sl, r2
 8004a46:	469b      	mov	fp, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a52:	464b      	mov	r3, r9
 8004a54:	eb4b 0303 	adc.w	r3, fp, r3
 8004a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a70:	460b      	mov	r3, r1
 8004a72:	18db      	adds	r3, r3, r3
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	4613      	mov	r3, r2
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a86:	f7fb fc13 	bl	80002b0 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004a92:	fba3 2301 	umull	r2, r3, r3, r1
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2264      	movs	r2, #100	@ 0x64
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	1acb      	subs	r3, r1, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004aa6:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ab4:	441c      	add	r4, r3
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	18db      	adds	r3, r3, r3
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b32:	4613      	mov	r3, r2
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b42:	f7fb fbb5 	bl	80002b0 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	@ 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	@ 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 0207 	and.w	r2, r3, #7
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b74:	e106      	b.n	8004d84 <UART_SetConfig+0x4d8>
 8004b76:	bf00      	nop
 8004b78:	40011000 	.word	0x40011000
 8004b7c:	40011400 	.word	0x40011400
 8004b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	6239      	str	r1, [r7, #32]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb43 0501 	adc.w	r5, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	00eb      	lsls	r3, r5, #3
 8004bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bbe:	00e2      	lsls	r2, r4, #3
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	18e3      	adds	r3, r4, r3
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bcc:	464b      	mov	r3, r9
 8004bce:	eb45 0303 	adc.w	r3, r5, r3
 8004bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004be2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	008a      	lsls	r2, r1, #2
 8004c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c04:	f7fb fb54 	bl	80002b0 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b60      	ldr	r3, [pc, #384]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011c      	lsls	r4, r3, #4
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	61b9      	str	r1, [r7, #24]
 8004c30:	415b      	adcs	r3, r3
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6139      	str	r1, [r7, #16]
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c90:	4649      	mov	r1, r9
 8004c92:	008b      	lsls	r3, r1, #2
 8004c94:	4641      	mov	r1, r8
 8004c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	008a      	lsls	r2, r1, #2
 8004c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ca2:	f7fb fb05 	bl	80002b0 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	@ 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	3332      	adds	r3, #50	@ 0x32
 8004cc0:	4a33      	ldr	r2, [pc, #204]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ccc:	441c      	add	r4, r3
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d1e:	464b      	mov	r3, r9
 8004d20:	460a      	mov	r2, r1
 8004d22:	eb42 0303 	adc.w	r3, r2, r3
 8004d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d32:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d52:	f7fb faad 	bl	80002b0 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	@ 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	3332      	adds	r3, #50	@ 0x32
 8004d6e:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4422      	add	r2, r4
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d90:	51eb851f 	.word	0x51eb851f

08004d94 <std>:
 8004d94:	2300      	movs	r3, #0
 8004d96:	b510      	push	{r4, lr}
 8004d98:	4604      	mov	r4, r0
 8004d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004da2:	6083      	str	r3, [r0, #8]
 8004da4:	8181      	strh	r1, [r0, #12]
 8004da6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004da8:	81c2      	strh	r2, [r0, #14]
 8004daa:	6183      	str	r3, [r0, #24]
 8004dac:	4619      	mov	r1, r3
 8004dae:	2208      	movs	r2, #8
 8004db0:	305c      	adds	r0, #92	@ 0x5c
 8004db2:	f000 f906 	bl	8004fc2 <memset>
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <std+0x58>)
 8004db8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <std+0x5c>)
 8004dbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <std+0x60>)
 8004dc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <std+0x64>)
 8004dc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <std+0x68>)
 8004dc8:	6224      	str	r4, [r4, #32]
 8004dca:	429c      	cmp	r4, r3
 8004dcc:	d006      	beq.n	8004ddc <std+0x48>
 8004dce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dd2:	4294      	cmp	r4, r2
 8004dd4:	d002      	beq.n	8004ddc <std+0x48>
 8004dd6:	33d0      	adds	r3, #208	@ 0xd0
 8004dd8:	429c      	cmp	r4, r3
 8004dda:	d105      	bne.n	8004de8 <std+0x54>
 8004ddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de4:	f000 b966 	b.w	80050b4 <__retarget_lock_init_recursive>
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	bf00      	nop
 8004dec:	08004f3d 	.word	0x08004f3d
 8004df0:	08004f5f 	.word	0x08004f5f
 8004df4:	08004f97 	.word	0x08004f97
 8004df8:	08004fbb 	.word	0x08004fbb
 8004dfc:	20000314 	.word	0x20000314

08004e00 <stdio_exit_handler>:
 8004e00:	4a02      	ldr	r2, [pc, #8]	@ (8004e0c <stdio_exit_handler+0xc>)
 8004e02:	4903      	ldr	r1, [pc, #12]	@ (8004e10 <stdio_exit_handler+0x10>)
 8004e04:	4803      	ldr	r0, [pc, #12]	@ (8004e14 <stdio_exit_handler+0x14>)
 8004e06:	f000 b869 	b.w	8004edc <_fwalk_sglue>
 8004e0a:	bf00      	nop
 8004e0c:	20000014 	.word	0x20000014
 8004e10:	08005955 	.word	0x08005955
 8004e14:	20000024 	.word	0x20000024

08004e18 <cleanup_stdio>:
 8004e18:	6841      	ldr	r1, [r0, #4]
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <cleanup_stdio+0x34>)
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	b510      	push	{r4, lr}
 8004e20:	4604      	mov	r4, r0
 8004e22:	d001      	beq.n	8004e28 <cleanup_stdio+0x10>
 8004e24:	f000 fd96 	bl	8005954 <_fflush_r>
 8004e28:	68a1      	ldr	r1, [r4, #8]
 8004e2a:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <cleanup_stdio+0x38>)
 8004e2c:	4299      	cmp	r1, r3
 8004e2e:	d002      	beq.n	8004e36 <cleanup_stdio+0x1e>
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 fd8f 	bl	8005954 <_fflush_r>
 8004e36:	68e1      	ldr	r1, [r4, #12]
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <cleanup_stdio+0x3c>)
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	d004      	beq.n	8004e48 <cleanup_stdio+0x30>
 8004e3e:	4620      	mov	r0, r4
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f000 bd86 	b.w	8005954 <_fflush_r>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000314 	.word	0x20000314
 8004e50:	2000037c 	.word	0x2000037c
 8004e54:	200003e4 	.word	0x200003e4

08004e58 <global_stdio_init.part.0>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <global_stdio_init.part.0+0x30>)
 8004e5c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e8c <global_stdio_init.part.0+0x34>)
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <global_stdio_init.part.0+0x38>)
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	4620      	mov	r0, r4
 8004e64:	2200      	movs	r2, #0
 8004e66:	2104      	movs	r1, #4
 8004e68:	f7ff ff94 	bl	8004d94 <std>
 8004e6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e70:	2201      	movs	r2, #1
 8004e72:	2109      	movs	r1, #9
 8004e74:	f7ff ff8e 	bl	8004d94 <std>
 8004e78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e82:	2112      	movs	r1, #18
 8004e84:	f7ff bf86 	b.w	8004d94 <std>
 8004e88:	2000044c 	.word	0x2000044c
 8004e8c:	20000314 	.word	0x20000314
 8004e90:	08004e01 	.word	0x08004e01

08004e94 <__sfp_lock_acquire>:
 8004e94:	4801      	ldr	r0, [pc, #4]	@ (8004e9c <__sfp_lock_acquire+0x8>)
 8004e96:	f000 b90e 	b.w	80050b6 <__retarget_lock_acquire_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	20000455 	.word	0x20000455

08004ea0 <__sfp_lock_release>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	@ (8004ea8 <__sfp_lock_release+0x8>)
 8004ea2:	f000 b909 	b.w	80050b8 <__retarget_lock_release_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	20000455 	.word	0x20000455

08004eac <__sinit>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	4604      	mov	r4, r0
 8004eb0:	f7ff fff0 	bl	8004e94 <__sfp_lock_acquire>
 8004eb4:	6a23      	ldr	r3, [r4, #32]
 8004eb6:	b11b      	cbz	r3, 8004ec0 <__sinit+0x14>
 8004eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ebc:	f7ff bff0 	b.w	8004ea0 <__sfp_lock_release>
 8004ec0:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <__sinit+0x28>)
 8004ec2:	6223      	str	r3, [r4, #32]
 8004ec4:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <__sinit+0x2c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f5      	bne.n	8004eb8 <__sinit+0xc>
 8004ecc:	f7ff ffc4 	bl	8004e58 <global_stdio_init.part.0>
 8004ed0:	e7f2      	b.n	8004eb8 <__sinit+0xc>
 8004ed2:	bf00      	nop
 8004ed4:	08004e19 	.word	0x08004e19
 8004ed8:	2000044c 	.word	0x2000044c

08004edc <_fwalk_sglue>:
 8004edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	4688      	mov	r8, r1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eec:	f1b9 0901 	subs.w	r9, r9, #1
 8004ef0:	d505      	bpl.n	8004efe <_fwalk_sglue+0x22>
 8004ef2:	6824      	ldr	r4, [r4, #0]
 8004ef4:	2c00      	cmp	r4, #0
 8004ef6:	d1f7      	bne.n	8004ee8 <_fwalk_sglue+0xc>
 8004ef8:	4630      	mov	r0, r6
 8004efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d907      	bls.n	8004f14 <_fwalk_sglue+0x38>
 8004f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	d003      	beq.n	8004f14 <_fwalk_sglue+0x38>
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4638      	mov	r0, r7
 8004f10:	47c0      	blx	r8
 8004f12:	4306      	orrs	r6, r0
 8004f14:	3568      	adds	r5, #104	@ 0x68
 8004f16:	e7e9      	b.n	8004eec <_fwalk_sglue+0x10>

08004f18 <iprintf>:
 8004f18:	b40f      	push	{r0, r1, r2, r3}
 8004f1a:	b507      	push	{r0, r1, r2, lr}
 8004f1c:	4906      	ldr	r1, [pc, #24]	@ (8004f38 <iprintf+0x20>)
 8004f1e:	ab04      	add	r3, sp, #16
 8004f20:	6808      	ldr	r0, [r1, #0]
 8004f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f26:	6881      	ldr	r1, [r0, #8]
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	f000 f9e9 	bl	8005300 <_vfiprintf_r>
 8004f2e:	b003      	add	sp, #12
 8004f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f34:	b004      	add	sp, #16
 8004f36:	4770      	bx	lr
 8004f38:	20000020 	.word	0x20000020

08004f3c <__sread>:
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	460c      	mov	r4, r1
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	f000 f868 	bl	8005018 <_read_r>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	bfab      	itete	ge
 8004f4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f50:	181b      	addge	r3, r3, r0
 8004f52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f56:	bfac      	ite	ge
 8004f58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f5a:	81a3      	strhlt	r3, [r4, #12]
 8004f5c:	bd10      	pop	{r4, pc}

08004f5e <__swrite>:
 8004f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f62:	461f      	mov	r7, r3
 8004f64:	898b      	ldrh	r3, [r1, #12]
 8004f66:	05db      	lsls	r3, r3, #23
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	d505      	bpl.n	8004f7c <__swrite+0x1e>
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	2302      	movs	r3, #2
 8004f76:	2200      	movs	r2, #0
 8004f78:	f000 f83c 	bl	8004ff4 <_lseek_r>
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	4632      	mov	r2, r6
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	f000 b853 	b.w	800503c <_write_r>

08004f96 <__sseek>:
 8004f96:	b510      	push	{r4, lr}
 8004f98:	460c      	mov	r4, r1
 8004f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9e:	f000 f829 	bl	8004ff4 <_lseek_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	bf15      	itete	ne
 8004fa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004faa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fb2:	81a3      	strheq	r3, [r4, #12]
 8004fb4:	bf18      	it	ne
 8004fb6:	81a3      	strhne	r3, [r4, #12]
 8004fb8:	bd10      	pop	{r4, pc}

08004fba <__sclose>:
 8004fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbe:	f000 b809 	b.w	8004fd4 <_close_r>

08004fc2 <memset>:
 8004fc2:	4402      	add	r2, r0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d100      	bne.n	8004fcc <memset+0xa>
 8004fca:	4770      	bx	lr
 8004fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd0:	e7f9      	b.n	8004fc6 <memset+0x4>
	...

08004fd4 <_close_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4d06      	ldr	r5, [pc, #24]	@ (8004ff0 <_close_r+0x1c>)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4608      	mov	r0, r1
 8004fde:	602b      	str	r3, [r5, #0]
 8004fe0:	f7fc f989 	bl	80012f6 <_close>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d102      	bne.n	8004fee <_close_r+0x1a>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	b103      	cbz	r3, 8004fee <_close_r+0x1a>
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
 8004ff0:	20000450 	.word	0x20000450

08004ff4 <_lseek_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d07      	ldr	r5, [pc, #28]	@ (8005014 <_lseek_r+0x20>)
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	2200      	movs	r2, #0
 8005000:	602a      	str	r2, [r5, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	f7fc f99e 	bl	8001344 <_lseek>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_lseek_r+0x1e>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_lseek_r+0x1e>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000450 	.word	0x20000450

08005018 <_read_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4d07      	ldr	r5, [pc, #28]	@ (8005038 <_read_r+0x20>)
 800501c:	4604      	mov	r4, r0
 800501e:	4608      	mov	r0, r1
 8005020:	4611      	mov	r1, r2
 8005022:	2200      	movs	r2, #0
 8005024:	602a      	str	r2, [r5, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	f7fc f948 	bl	80012bc <_read>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_read_r+0x1e>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_read_r+0x1e>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	20000450 	.word	0x20000450

0800503c <_write_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4d07      	ldr	r5, [pc, #28]	@ (800505c <_write_r+0x20>)
 8005040:	4604      	mov	r4, r0
 8005042:	4608      	mov	r0, r1
 8005044:	4611      	mov	r1, r2
 8005046:	2200      	movs	r2, #0
 8005048:	602a      	str	r2, [r5, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f7fb feca 	bl	8000de4 <_write>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_write_r+0x1e>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_write_r+0x1e>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	20000450 	.word	0x20000450

08005060 <__errno>:
 8005060:	4b01      	ldr	r3, [pc, #4]	@ (8005068 <__errno+0x8>)
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	20000020 	.word	0x20000020

0800506c <__libc_init_array>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	4d0d      	ldr	r5, [pc, #52]	@ (80050a4 <__libc_init_array+0x38>)
 8005070:	4c0d      	ldr	r4, [pc, #52]	@ (80050a8 <__libc_init_array+0x3c>)
 8005072:	1b64      	subs	r4, r4, r5
 8005074:	10a4      	asrs	r4, r4, #2
 8005076:	2600      	movs	r6, #0
 8005078:	42a6      	cmp	r6, r4
 800507a:	d109      	bne.n	8005090 <__libc_init_array+0x24>
 800507c:	4d0b      	ldr	r5, [pc, #44]	@ (80050ac <__libc_init_array+0x40>)
 800507e:	4c0c      	ldr	r4, [pc, #48]	@ (80050b0 <__libc_init_array+0x44>)
 8005080:	f000 fdb8 	bl	8005bf4 <_init>
 8005084:	1b64      	subs	r4, r4, r5
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	2600      	movs	r6, #0
 800508a:	42a6      	cmp	r6, r4
 800508c:	d105      	bne.n	800509a <__libc_init_array+0x2e>
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	f855 3b04 	ldr.w	r3, [r5], #4
 8005094:	4798      	blx	r3
 8005096:	3601      	adds	r6, #1
 8005098:	e7ee      	b.n	8005078 <__libc_init_array+0xc>
 800509a:	f855 3b04 	ldr.w	r3, [r5], #4
 800509e:	4798      	blx	r3
 80050a0:	3601      	adds	r6, #1
 80050a2:	e7f2      	b.n	800508a <__libc_init_array+0x1e>
 80050a4:	08005c80 	.word	0x08005c80
 80050a8:	08005c80 	.word	0x08005c80
 80050ac:	08005c80 	.word	0x08005c80
 80050b0:	08005c84 	.word	0x08005c84

080050b4 <__retarget_lock_init_recursive>:
 80050b4:	4770      	bx	lr

080050b6 <__retarget_lock_acquire_recursive>:
 80050b6:	4770      	bx	lr

080050b8 <__retarget_lock_release_recursive>:
 80050b8:	4770      	bx	lr
	...

080050bc <_free_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4605      	mov	r5, r0
 80050c0:	2900      	cmp	r1, #0
 80050c2:	d041      	beq.n	8005148 <_free_r+0x8c>
 80050c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c8:	1f0c      	subs	r4, r1, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfb8      	it	lt
 80050ce:	18e4      	addlt	r4, r4, r3
 80050d0:	f000 f8e0 	bl	8005294 <__malloc_lock>
 80050d4:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <_free_r+0x90>)
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	b933      	cbnz	r3, 80050e8 <_free_r+0x2c>
 80050da:	6063      	str	r3, [r4, #4]
 80050dc:	6014      	str	r4, [r2, #0]
 80050de:	4628      	mov	r0, r5
 80050e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e4:	f000 b8dc 	b.w	80052a0 <__malloc_unlock>
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d908      	bls.n	80050fe <_free_r+0x42>
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	1821      	adds	r1, r4, r0
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf01      	itttt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	1809      	addeq	r1, r1, r0
 80050fa:	6021      	streq	r1, [r4, #0]
 80050fc:	e7ed      	b.n	80050da <_free_r+0x1e>
 80050fe:	461a      	mov	r2, r3
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	b10b      	cbz	r3, 8005108 <_free_r+0x4c>
 8005104:	42a3      	cmp	r3, r4
 8005106:	d9fa      	bls.n	80050fe <_free_r+0x42>
 8005108:	6811      	ldr	r1, [r2, #0]
 800510a:	1850      	adds	r0, r2, r1
 800510c:	42a0      	cmp	r0, r4
 800510e:	d10b      	bne.n	8005128 <_free_r+0x6c>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	4401      	add	r1, r0
 8005114:	1850      	adds	r0, r2, r1
 8005116:	4283      	cmp	r3, r0
 8005118:	6011      	str	r1, [r2, #0]
 800511a:	d1e0      	bne.n	80050de <_free_r+0x22>
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	6053      	str	r3, [r2, #4]
 8005122:	4408      	add	r0, r1
 8005124:	6010      	str	r0, [r2, #0]
 8005126:	e7da      	b.n	80050de <_free_r+0x22>
 8005128:	d902      	bls.n	8005130 <_free_r+0x74>
 800512a:	230c      	movs	r3, #12
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	e7d6      	b.n	80050de <_free_r+0x22>
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	1821      	adds	r1, r4, r0
 8005134:	428b      	cmp	r3, r1
 8005136:	bf04      	itt	eq
 8005138:	6819      	ldreq	r1, [r3, #0]
 800513a:	685b      	ldreq	r3, [r3, #4]
 800513c:	6063      	str	r3, [r4, #4]
 800513e:	bf04      	itt	eq
 8005140:	1809      	addeq	r1, r1, r0
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	6054      	str	r4, [r2, #4]
 8005146:	e7ca      	b.n	80050de <_free_r+0x22>
 8005148:	bd38      	pop	{r3, r4, r5, pc}
 800514a:	bf00      	nop
 800514c:	2000045c 	.word	0x2000045c

08005150 <sbrk_aligned>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4e0f      	ldr	r6, [pc, #60]	@ (8005190 <sbrk_aligned+0x40>)
 8005154:	460c      	mov	r4, r1
 8005156:	6831      	ldr	r1, [r6, #0]
 8005158:	4605      	mov	r5, r0
 800515a:	b911      	cbnz	r1, 8005162 <sbrk_aligned+0x12>
 800515c:	f000 fcb6 	bl	8005acc <_sbrk_r>
 8005160:	6030      	str	r0, [r6, #0]
 8005162:	4621      	mov	r1, r4
 8005164:	4628      	mov	r0, r5
 8005166:	f000 fcb1 	bl	8005acc <_sbrk_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	d103      	bne.n	8005176 <sbrk_aligned+0x26>
 800516e:	f04f 34ff 	mov.w	r4, #4294967295
 8005172:	4620      	mov	r0, r4
 8005174:	bd70      	pop	{r4, r5, r6, pc}
 8005176:	1cc4      	adds	r4, r0, #3
 8005178:	f024 0403 	bic.w	r4, r4, #3
 800517c:	42a0      	cmp	r0, r4
 800517e:	d0f8      	beq.n	8005172 <sbrk_aligned+0x22>
 8005180:	1a21      	subs	r1, r4, r0
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fca2 	bl	8005acc <_sbrk_r>
 8005188:	3001      	adds	r0, #1
 800518a:	d1f2      	bne.n	8005172 <sbrk_aligned+0x22>
 800518c:	e7ef      	b.n	800516e <sbrk_aligned+0x1e>
 800518e:	bf00      	nop
 8005190:	20000458 	.word	0x20000458

08005194 <_malloc_r>:
 8005194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005198:	1ccd      	adds	r5, r1, #3
 800519a:	f025 0503 	bic.w	r5, r5, #3
 800519e:	3508      	adds	r5, #8
 80051a0:	2d0c      	cmp	r5, #12
 80051a2:	bf38      	it	cc
 80051a4:	250c      	movcc	r5, #12
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	4606      	mov	r6, r0
 80051aa:	db01      	blt.n	80051b0 <_malloc_r+0x1c>
 80051ac:	42a9      	cmp	r1, r5
 80051ae:	d904      	bls.n	80051ba <_malloc_r+0x26>
 80051b0:	230c      	movs	r3, #12
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	2000      	movs	r0, #0
 80051b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005290 <_malloc_r+0xfc>
 80051be:	f000 f869 	bl	8005294 <__malloc_lock>
 80051c2:	f8d8 3000 	ldr.w	r3, [r8]
 80051c6:	461c      	mov	r4, r3
 80051c8:	bb44      	cbnz	r4, 800521c <_malloc_r+0x88>
 80051ca:	4629      	mov	r1, r5
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff ffbf 	bl	8005150 <sbrk_aligned>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	4604      	mov	r4, r0
 80051d6:	d158      	bne.n	800528a <_malloc_r+0xf6>
 80051d8:	f8d8 4000 	ldr.w	r4, [r8]
 80051dc:	4627      	mov	r7, r4
 80051de:	2f00      	cmp	r7, #0
 80051e0:	d143      	bne.n	800526a <_malloc_r+0xd6>
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	d04b      	beq.n	800527e <_malloc_r+0xea>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	4639      	mov	r1, r7
 80051ea:	4630      	mov	r0, r6
 80051ec:	eb04 0903 	add.w	r9, r4, r3
 80051f0:	f000 fc6c 	bl	8005acc <_sbrk_r>
 80051f4:	4581      	cmp	r9, r0
 80051f6:	d142      	bne.n	800527e <_malloc_r+0xea>
 80051f8:	6821      	ldr	r1, [r4, #0]
 80051fa:	1a6d      	subs	r5, r5, r1
 80051fc:	4629      	mov	r1, r5
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff ffa6 	bl	8005150 <sbrk_aligned>
 8005204:	3001      	adds	r0, #1
 8005206:	d03a      	beq.n	800527e <_malloc_r+0xea>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	442b      	add	r3, r5
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	f8d8 3000 	ldr.w	r3, [r8]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	bb62      	cbnz	r2, 8005270 <_malloc_r+0xdc>
 8005216:	f8c8 7000 	str.w	r7, [r8]
 800521a:	e00f      	b.n	800523c <_malloc_r+0xa8>
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	1b52      	subs	r2, r2, r5
 8005220:	d420      	bmi.n	8005264 <_malloc_r+0xd0>
 8005222:	2a0b      	cmp	r2, #11
 8005224:	d917      	bls.n	8005256 <_malloc_r+0xc2>
 8005226:	1961      	adds	r1, r4, r5
 8005228:	42a3      	cmp	r3, r4
 800522a:	6025      	str	r5, [r4, #0]
 800522c:	bf18      	it	ne
 800522e:	6059      	strne	r1, [r3, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	bf08      	it	eq
 8005234:	f8c8 1000 	streq.w	r1, [r8]
 8005238:	5162      	str	r2, [r4, r5]
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	4630      	mov	r0, r6
 800523e:	f000 f82f 	bl	80052a0 <__malloc_unlock>
 8005242:	f104 000b 	add.w	r0, r4, #11
 8005246:	1d23      	adds	r3, r4, #4
 8005248:	f020 0007 	bic.w	r0, r0, #7
 800524c:	1ac2      	subs	r2, r0, r3
 800524e:	bf1c      	itt	ne
 8005250:	1a1b      	subne	r3, r3, r0
 8005252:	50a3      	strne	r3, [r4, r2]
 8005254:	e7af      	b.n	80051b6 <_malloc_r+0x22>
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	42a3      	cmp	r3, r4
 800525a:	bf0c      	ite	eq
 800525c:	f8c8 2000 	streq.w	r2, [r8]
 8005260:	605a      	strne	r2, [r3, #4]
 8005262:	e7eb      	b.n	800523c <_malloc_r+0xa8>
 8005264:	4623      	mov	r3, r4
 8005266:	6864      	ldr	r4, [r4, #4]
 8005268:	e7ae      	b.n	80051c8 <_malloc_r+0x34>
 800526a:	463c      	mov	r4, r7
 800526c:	687f      	ldr	r7, [r7, #4]
 800526e:	e7b6      	b.n	80051de <_malloc_r+0x4a>
 8005270:	461a      	mov	r2, r3
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	42a3      	cmp	r3, r4
 8005276:	d1fb      	bne.n	8005270 <_malloc_r+0xdc>
 8005278:	2300      	movs	r3, #0
 800527a:	6053      	str	r3, [r2, #4]
 800527c:	e7de      	b.n	800523c <_malloc_r+0xa8>
 800527e:	230c      	movs	r3, #12
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	4630      	mov	r0, r6
 8005284:	f000 f80c 	bl	80052a0 <__malloc_unlock>
 8005288:	e794      	b.n	80051b4 <_malloc_r+0x20>
 800528a:	6005      	str	r5, [r0, #0]
 800528c:	e7d6      	b.n	800523c <_malloc_r+0xa8>
 800528e:	bf00      	nop
 8005290:	2000045c 	.word	0x2000045c

08005294 <__malloc_lock>:
 8005294:	4801      	ldr	r0, [pc, #4]	@ (800529c <__malloc_lock+0x8>)
 8005296:	f7ff bf0e 	b.w	80050b6 <__retarget_lock_acquire_recursive>
 800529a:	bf00      	nop
 800529c:	20000454 	.word	0x20000454

080052a0 <__malloc_unlock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	@ (80052a8 <__malloc_unlock+0x8>)
 80052a2:	f7ff bf09 	b.w	80050b8 <__retarget_lock_release_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000454 	.word	0x20000454

080052ac <__sfputc_r>:
 80052ac:	6893      	ldr	r3, [r2, #8]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	b410      	push	{r4}
 80052b4:	6093      	str	r3, [r2, #8]
 80052b6:	da08      	bge.n	80052ca <__sfputc_r+0x1e>
 80052b8:	6994      	ldr	r4, [r2, #24]
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	db01      	blt.n	80052c2 <__sfputc_r+0x16>
 80052be:	290a      	cmp	r1, #10
 80052c0:	d103      	bne.n	80052ca <__sfputc_r+0x1e>
 80052c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c6:	f000 bb6d 	b.w	80059a4 <__swbuf_r>
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	1c58      	adds	r0, r3, #1
 80052ce:	6010      	str	r0, [r2, #0]
 80052d0:	7019      	strb	r1, [r3, #0]
 80052d2:	4608      	mov	r0, r1
 80052d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d8:	4770      	bx	lr

080052da <__sfputs_r>:
 80052da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052dc:	4606      	mov	r6, r0
 80052de:	460f      	mov	r7, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	18d5      	adds	r5, r2, r3
 80052e4:	42ac      	cmp	r4, r5
 80052e6:	d101      	bne.n	80052ec <__sfputs_r+0x12>
 80052e8:	2000      	movs	r0, #0
 80052ea:	e007      	b.n	80052fc <__sfputs_r+0x22>
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	463a      	mov	r2, r7
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ffda 	bl	80052ac <__sfputc_r>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d1f3      	bne.n	80052e4 <__sfputs_r+0xa>
 80052fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005300 <_vfiprintf_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	460d      	mov	r5, r1
 8005306:	b09d      	sub	sp, #116	@ 0x74
 8005308:	4614      	mov	r4, r2
 800530a:	4698      	mov	r8, r3
 800530c:	4606      	mov	r6, r0
 800530e:	b118      	cbz	r0, 8005318 <_vfiprintf_r+0x18>
 8005310:	6a03      	ldr	r3, [r0, #32]
 8005312:	b90b      	cbnz	r3, 8005318 <_vfiprintf_r+0x18>
 8005314:	f7ff fdca 	bl	8004eac <__sinit>
 8005318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800531a:	07d9      	lsls	r1, r3, #31
 800531c:	d405      	bmi.n	800532a <_vfiprintf_r+0x2a>
 800531e:	89ab      	ldrh	r3, [r5, #12]
 8005320:	059a      	lsls	r2, r3, #22
 8005322:	d402      	bmi.n	800532a <_vfiprintf_r+0x2a>
 8005324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005326:	f7ff fec6 	bl	80050b6 <__retarget_lock_acquire_recursive>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	071b      	lsls	r3, r3, #28
 800532e:	d501      	bpl.n	8005334 <_vfiprintf_r+0x34>
 8005330:	692b      	ldr	r3, [r5, #16]
 8005332:	b99b      	cbnz	r3, 800535c <_vfiprintf_r+0x5c>
 8005334:	4629      	mov	r1, r5
 8005336:	4630      	mov	r0, r6
 8005338:	f000 fb72 	bl	8005a20 <__swsetup_r>
 800533c:	b170      	cbz	r0, 800535c <_vfiprintf_r+0x5c>
 800533e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005340:	07dc      	lsls	r4, r3, #31
 8005342:	d504      	bpl.n	800534e <_vfiprintf_r+0x4e>
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	b01d      	add	sp, #116	@ 0x74
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	89ab      	ldrh	r3, [r5, #12]
 8005350:	0598      	lsls	r0, r3, #22
 8005352:	d4f7      	bmi.n	8005344 <_vfiprintf_r+0x44>
 8005354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005356:	f7ff feaf 	bl	80050b8 <__retarget_lock_release_recursive>
 800535a:	e7f3      	b.n	8005344 <_vfiprintf_r+0x44>
 800535c:	2300      	movs	r3, #0
 800535e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005360:	2320      	movs	r3, #32
 8005362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005366:	f8cd 800c 	str.w	r8, [sp, #12]
 800536a:	2330      	movs	r3, #48	@ 0x30
 800536c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800551c <_vfiprintf_r+0x21c>
 8005370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005374:	f04f 0901 	mov.w	r9, #1
 8005378:	4623      	mov	r3, r4
 800537a:	469a      	mov	sl, r3
 800537c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005380:	b10a      	cbz	r2, 8005386 <_vfiprintf_r+0x86>
 8005382:	2a25      	cmp	r2, #37	@ 0x25
 8005384:	d1f9      	bne.n	800537a <_vfiprintf_r+0x7a>
 8005386:	ebba 0b04 	subs.w	fp, sl, r4
 800538a:	d00b      	beq.n	80053a4 <_vfiprintf_r+0xa4>
 800538c:	465b      	mov	r3, fp
 800538e:	4622      	mov	r2, r4
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff ffa1 	bl	80052da <__sfputs_r>
 8005398:	3001      	adds	r0, #1
 800539a:	f000 80a7 	beq.w	80054ec <_vfiprintf_r+0x1ec>
 800539e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053a0:	445a      	add	r2, fp
 80053a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80053a4:	f89a 3000 	ldrb.w	r3, [sl]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 809f 	beq.w	80054ec <_vfiprintf_r+0x1ec>
 80053ae:	2300      	movs	r3, #0
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295
 80053b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053b8:	f10a 0a01 	add.w	sl, sl, #1
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	9307      	str	r3, [sp, #28]
 80053c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80053c6:	4654      	mov	r4, sl
 80053c8:	2205      	movs	r2, #5
 80053ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ce:	4853      	ldr	r0, [pc, #332]	@ (800551c <_vfiprintf_r+0x21c>)
 80053d0:	f7fa ff1e 	bl	8000210 <memchr>
 80053d4:	9a04      	ldr	r2, [sp, #16]
 80053d6:	b9d8      	cbnz	r0, 8005410 <_vfiprintf_r+0x110>
 80053d8:	06d1      	lsls	r1, r2, #27
 80053da:	bf44      	itt	mi
 80053dc:	2320      	movmi	r3, #32
 80053de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053e2:	0713      	lsls	r3, r2, #28
 80053e4:	bf44      	itt	mi
 80053e6:	232b      	movmi	r3, #43	@ 0x2b
 80053e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053ec:	f89a 3000 	ldrb.w	r3, [sl]
 80053f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f2:	d015      	beq.n	8005420 <_vfiprintf_r+0x120>
 80053f4:	9a07      	ldr	r2, [sp, #28]
 80053f6:	4654      	mov	r4, sl
 80053f8:	2000      	movs	r0, #0
 80053fa:	f04f 0c0a 	mov.w	ip, #10
 80053fe:	4621      	mov	r1, r4
 8005400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005404:	3b30      	subs	r3, #48	@ 0x30
 8005406:	2b09      	cmp	r3, #9
 8005408:	d94b      	bls.n	80054a2 <_vfiprintf_r+0x1a2>
 800540a:	b1b0      	cbz	r0, 800543a <_vfiprintf_r+0x13a>
 800540c:	9207      	str	r2, [sp, #28]
 800540e:	e014      	b.n	800543a <_vfiprintf_r+0x13a>
 8005410:	eba0 0308 	sub.w	r3, r0, r8
 8005414:	fa09 f303 	lsl.w	r3, r9, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	46a2      	mov	sl, r4
 800541e:	e7d2      	b.n	80053c6 <_vfiprintf_r+0xc6>
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	1d19      	adds	r1, r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	9103      	str	r1, [sp, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	bfbb      	ittet	lt
 800542c:	425b      	neglt	r3, r3
 800542e:	f042 0202 	orrlt.w	r2, r2, #2
 8005432:	9307      	strge	r3, [sp, #28]
 8005434:	9307      	strlt	r3, [sp, #28]
 8005436:	bfb8      	it	lt
 8005438:	9204      	strlt	r2, [sp, #16]
 800543a:	7823      	ldrb	r3, [r4, #0]
 800543c:	2b2e      	cmp	r3, #46	@ 0x2e
 800543e:	d10a      	bne.n	8005456 <_vfiprintf_r+0x156>
 8005440:	7863      	ldrb	r3, [r4, #1]
 8005442:	2b2a      	cmp	r3, #42	@ 0x2a
 8005444:	d132      	bne.n	80054ac <_vfiprintf_r+0x1ac>
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	9203      	str	r2, [sp, #12]
 800544e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005452:	3402      	adds	r4, #2
 8005454:	9305      	str	r3, [sp, #20]
 8005456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800552c <_vfiprintf_r+0x22c>
 800545a:	7821      	ldrb	r1, [r4, #0]
 800545c:	2203      	movs	r2, #3
 800545e:	4650      	mov	r0, sl
 8005460:	f7fa fed6 	bl	8000210 <memchr>
 8005464:	b138      	cbz	r0, 8005476 <_vfiprintf_r+0x176>
 8005466:	9b04      	ldr	r3, [sp, #16]
 8005468:	eba0 000a 	sub.w	r0, r0, sl
 800546c:	2240      	movs	r2, #64	@ 0x40
 800546e:	4082      	lsls	r2, r0
 8005470:	4313      	orrs	r3, r2
 8005472:	3401      	adds	r4, #1
 8005474:	9304      	str	r3, [sp, #16]
 8005476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547a:	4829      	ldr	r0, [pc, #164]	@ (8005520 <_vfiprintf_r+0x220>)
 800547c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005480:	2206      	movs	r2, #6
 8005482:	f7fa fec5 	bl	8000210 <memchr>
 8005486:	2800      	cmp	r0, #0
 8005488:	d03f      	beq.n	800550a <_vfiprintf_r+0x20a>
 800548a:	4b26      	ldr	r3, [pc, #152]	@ (8005524 <_vfiprintf_r+0x224>)
 800548c:	bb1b      	cbnz	r3, 80054d6 <_vfiprintf_r+0x1d6>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	3307      	adds	r3, #7
 8005492:	f023 0307 	bic.w	r3, r3, #7
 8005496:	3308      	adds	r3, #8
 8005498:	9303      	str	r3, [sp, #12]
 800549a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800549c:	443b      	add	r3, r7
 800549e:	9309      	str	r3, [sp, #36]	@ 0x24
 80054a0:	e76a      	b.n	8005378 <_vfiprintf_r+0x78>
 80054a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80054a6:	460c      	mov	r4, r1
 80054a8:	2001      	movs	r0, #1
 80054aa:	e7a8      	b.n	80053fe <_vfiprintf_r+0xfe>
 80054ac:	2300      	movs	r3, #0
 80054ae:	3401      	adds	r4, #1
 80054b0:	9305      	str	r3, [sp, #20]
 80054b2:	4619      	mov	r1, r3
 80054b4:	f04f 0c0a 	mov.w	ip, #10
 80054b8:	4620      	mov	r0, r4
 80054ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054be:	3a30      	subs	r2, #48	@ 0x30
 80054c0:	2a09      	cmp	r2, #9
 80054c2:	d903      	bls.n	80054cc <_vfiprintf_r+0x1cc>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0c6      	beq.n	8005456 <_vfiprintf_r+0x156>
 80054c8:	9105      	str	r1, [sp, #20]
 80054ca:	e7c4      	b.n	8005456 <_vfiprintf_r+0x156>
 80054cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80054d0:	4604      	mov	r4, r0
 80054d2:	2301      	movs	r3, #1
 80054d4:	e7f0      	b.n	80054b8 <_vfiprintf_r+0x1b8>
 80054d6:	ab03      	add	r3, sp, #12
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	462a      	mov	r2, r5
 80054dc:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <_vfiprintf_r+0x228>)
 80054de:	a904      	add	r1, sp, #16
 80054e0:	4630      	mov	r0, r6
 80054e2:	f3af 8000 	nop.w
 80054e6:	4607      	mov	r7, r0
 80054e8:	1c78      	adds	r0, r7, #1
 80054ea:	d1d6      	bne.n	800549a <_vfiprintf_r+0x19a>
 80054ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054ee:	07d9      	lsls	r1, r3, #31
 80054f0:	d405      	bmi.n	80054fe <_vfiprintf_r+0x1fe>
 80054f2:	89ab      	ldrh	r3, [r5, #12]
 80054f4:	059a      	lsls	r2, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_vfiprintf_r+0x1fe>
 80054f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054fa:	f7ff fddd 	bl	80050b8 <__retarget_lock_release_recursive>
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	065b      	lsls	r3, r3, #25
 8005502:	f53f af1f 	bmi.w	8005344 <_vfiprintf_r+0x44>
 8005506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005508:	e71e      	b.n	8005348 <_vfiprintf_r+0x48>
 800550a:	ab03      	add	r3, sp, #12
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	462a      	mov	r2, r5
 8005510:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <_vfiprintf_r+0x228>)
 8005512:	a904      	add	r1, sp, #16
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f879 	bl	800560c <_printf_i>
 800551a:	e7e4      	b.n	80054e6 <_vfiprintf_r+0x1e6>
 800551c:	08005c44 	.word	0x08005c44
 8005520:	08005c4e 	.word	0x08005c4e
 8005524:	00000000 	.word	0x00000000
 8005528:	080052db 	.word	0x080052db
 800552c:	08005c4a 	.word	0x08005c4a

08005530 <_printf_common>:
 8005530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	4616      	mov	r6, r2
 8005536:	4698      	mov	r8, r3
 8005538:	688a      	ldr	r2, [r1, #8]
 800553a:	690b      	ldr	r3, [r1, #16]
 800553c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005540:	4293      	cmp	r3, r2
 8005542:	bfb8      	it	lt
 8005544:	4613      	movlt	r3, r2
 8005546:	6033      	str	r3, [r6, #0]
 8005548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800554c:	4607      	mov	r7, r0
 800554e:	460c      	mov	r4, r1
 8005550:	b10a      	cbz	r2, 8005556 <_printf_common+0x26>
 8005552:	3301      	adds	r3, #1
 8005554:	6033      	str	r3, [r6, #0]
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	0699      	lsls	r1, r3, #26
 800555a:	bf42      	ittt	mi
 800555c:	6833      	ldrmi	r3, [r6, #0]
 800555e:	3302      	addmi	r3, #2
 8005560:	6033      	strmi	r3, [r6, #0]
 8005562:	6825      	ldr	r5, [r4, #0]
 8005564:	f015 0506 	ands.w	r5, r5, #6
 8005568:	d106      	bne.n	8005578 <_printf_common+0x48>
 800556a:	f104 0a19 	add.w	sl, r4, #25
 800556e:	68e3      	ldr	r3, [r4, #12]
 8005570:	6832      	ldr	r2, [r6, #0]
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	42ab      	cmp	r3, r5
 8005576:	dc26      	bgt.n	80055c6 <_printf_common+0x96>
 8005578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	3b00      	subs	r3, #0
 8005580:	bf18      	it	ne
 8005582:	2301      	movne	r3, #1
 8005584:	0692      	lsls	r2, r2, #26
 8005586:	d42b      	bmi.n	80055e0 <_printf_common+0xb0>
 8005588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800558c:	4641      	mov	r1, r8
 800558e:	4638      	mov	r0, r7
 8005590:	47c8      	blx	r9
 8005592:	3001      	adds	r0, #1
 8005594:	d01e      	beq.n	80055d4 <_printf_common+0xa4>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	6922      	ldr	r2, [r4, #16]
 800559a:	f003 0306 	and.w	r3, r3, #6
 800559e:	2b04      	cmp	r3, #4
 80055a0:	bf02      	ittt	eq
 80055a2:	68e5      	ldreq	r5, [r4, #12]
 80055a4:	6833      	ldreq	r3, [r6, #0]
 80055a6:	1aed      	subeq	r5, r5, r3
 80055a8:	68a3      	ldr	r3, [r4, #8]
 80055aa:	bf0c      	ite	eq
 80055ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b0:	2500      	movne	r5, #0
 80055b2:	4293      	cmp	r3, r2
 80055b4:	bfc4      	itt	gt
 80055b6:	1a9b      	subgt	r3, r3, r2
 80055b8:	18ed      	addgt	r5, r5, r3
 80055ba:	2600      	movs	r6, #0
 80055bc:	341a      	adds	r4, #26
 80055be:	42b5      	cmp	r5, r6
 80055c0:	d11a      	bne.n	80055f8 <_printf_common+0xc8>
 80055c2:	2000      	movs	r0, #0
 80055c4:	e008      	b.n	80055d8 <_printf_common+0xa8>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4652      	mov	r2, sl
 80055ca:	4641      	mov	r1, r8
 80055cc:	4638      	mov	r0, r7
 80055ce:	47c8      	blx	r9
 80055d0:	3001      	adds	r0, #1
 80055d2:	d103      	bne.n	80055dc <_printf_common+0xac>
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055dc:	3501      	adds	r5, #1
 80055de:	e7c6      	b.n	800556e <_printf_common+0x3e>
 80055e0:	18e1      	adds	r1, r4, r3
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	2030      	movs	r0, #48	@ 0x30
 80055e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ea:	4422      	add	r2, r4
 80055ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055f4:	3302      	adds	r3, #2
 80055f6:	e7c7      	b.n	8005588 <_printf_common+0x58>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4622      	mov	r2, r4
 80055fc:	4641      	mov	r1, r8
 80055fe:	4638      	mov	r0, r7
 8005600:	47c8      	blx	r9
 8005602:	3001      	adds	r0, #1
 8005604:	d0e6      	beq.n	80055d4 <_printf_common+0xa4>
 8005606:	3601      	adds	r6, #1
 8005608:	e7d9      	b.n	80055be <_printf_common+0x8e>
	...

0800560c <_printf_i>:
 800560c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005610:	7e0f      	ldrb	r7, [r1, #24]
 8005612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005614:	2f78      	cmp	r7, #120	@ 0x78
 8005616:	4691      	mov	r9, r2
 8005618:	4680      	mov	r8, r0
 800561a:	460c      	mov	r4, r1
 800561c:	469a      	mov	sl, r3
 800561e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005622:	d807      	bhi.n	8005634 <_printf_i+0x28>
 8005624:	2f62      	cmp	r7, #98	@ 0x62
 8005626:	d80a      	bhi.n	800563e <_printf_i+0x32>
 8005628:	2f00      	cmp	r7, #0
 800562a:	f000 80d2 	beq.w	80057d2 <_printf_i+0x1c6>
 800562e:	2f58      	cmp	r7, #88	@ 0x58
 8005630:	f000 80b9 	beq.w	80057a6 <_printf_i+0x19a>
 8005634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800563c:	e03a      	b.n	80056b4 <_printf_i+0xa8>
 800563e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005642:	2b15      	cmp	r3, #21
 8005644:	d8f6      	bhi.n	8005634 <_printf_i+0x28>
 8005646:	a101      	add	r1, pc, #4	@ (adr r1, 800564c <_printf_i+0x40>)
 8005648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800564c:	080056a5 	.word	0x080056a5
 8005650:	080056b9 	.word	0x080056b9
 8005654:	08005635 	.word	0x08005635
 8005658:	08005635 	.word	0x08005635
 800565c:	08005635 	.word	0x08005635
 8005660:	08005635 	.word	0x08005635
 8005664:	080056b9 	.word	0x080056b9
 8005668:	08005635 	.word	0x08005635
 800566c:	08005635 	.word	0x08005635
 8005670:	08005635 	.word	0x08005635
 8005674:	08005635 	.word	0x08005635
 8005678:	080057b9 	.word	0x080057b9
 800567c:	080056e3 	.word	0x080056e3
 8005680:	08005773 	.word	0x08005773
 8005684:	08005635 	.word	0x08005635
 8005688:	08005635 	.word	0x08005635
 800568c:	080057db 	.word	0x080057db
 8005690:	08005635 	.word	0x08005635
 8005694:	080056e3 	.word	0x080056e3
 8005698:	08005635 	.word	0x08005635
 800569c:	08005635 	.word	0x08005635
 80056a0:	0800577b 	.word	0x0800577b
 80056a4:	6833      	ldr	r3, [r6, #0]
 80056a6:	1d1a      	adds	r2, r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6032      	str	r2, [r6, #0]
 80056ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056b4:	2301      	movs	r3, #1
 80056b6:	e09d      	b.n	80057f4 <_printf_i+0x1e8>
 80056b8:	6833      	ldr	r3, [r6, #0]
 80056ba:	6820      	ldr	r0, [r4, #0]
 80056bc:	1d19      	adds	r1, r3, #4
 80056be:	6031      	str	r1, [r6, #0]
 80056c0:	0606      	lsls	r6, r0, #24
 80056c2:	d501      	bpl.n	80056c8 <_printf_i+0xbc>
 80056c4:	681d      	ldr	r5, [r3, #0]
 80056c6:	e003      	b.n	80056d0 <_printf_i+0xc4>
 80056c8:	0645      	lsls	r5, r0, #25
 80056ca:	d5fb      	bpl.n	80056c4 <_printf_i+0xb8>
 80056cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	da03      	bge.n	80056dc <_printf_i+0xd0>
 80056d4:	232d      	movs	r3, #45	@ 0x2d
 80056d6:	426d      	negs	r5, r5
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056dc:	4859      	ldr	r0, [pc, #356]	@ (8005844 <_printf_i+0x238>)
 80056de:	230a      	movs	r3, #10
 80056e0:	e011      	b.n	8005706 <_printf_i+0xfa>
 80056e2:	6821      	ldr	r1, [r4, #0]
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	0608      	lsls	r0, r1, #24
 80056e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80056ec:	d402      	bmi.n	80056f4 <_printf_i+0xe8>
 80056ee:	0649      	lsls	r1, r1, #25
 80056f0:	bf48      	it	mi
 80056f2:	b2ad      	uxthmi	r5, r5
 80056f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80056f6:	4853      	ldr	r0, [pc, #332]	@ (8005844 <_printf_i+0x238>)
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	bf14      	ite	ne
 80056fc:	230a      	movne	r3, #10
 80056fe:	2308      	moveq	r3, #8
 8005700:	2100      	movs	r1, #0
 8005702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005706:	6866      	ldr	r6, [r4, #4]
 8005708:	60a6      	str	r6, [r4, #8]
 800570a:	2e00      	cmp	r6, #0
 800570c:	bfa2      	ittt	ge
 800570e:	6821      	ldrge	r1, [r4, #0]
 8005710:	f021 0104 	bicge.w	r1, r1, #4
 8005714:	6021      	strge	r1, [r4, #0]
 8005716:	b90d      	cbnz	r5, 800571c <_printf_i+0x110>
 8005718:	2e00      	cmp	r6, #0
 800571a:	d04b      	beq.n	80057b4 <_printf_i+0x1a8>
 800571c:	4616      	mov	r6, r2
 800571e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005722:	fb03 5711 	mls	r7, r3, r1, r5
 8005726:	5dc7      	ldrb	r7, [r0, r7]
 8005728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800572c:	462f      	mov	r7, r5
 800572e:	42bb      	cmp	r3, r7
 8005730:	460d      	mov	r5, r1
 8005732:	d9f4      	bls.n	800571e <_printf_i+0x112>
 8005734:	2b08      	cmp	r3, #8
 8005736:	d10b      	bne.n	8005750 <_printf_i+0x144>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	07df      	lsls	r7, r3, #31
 800573c:	d508      	bpl.n	8005750 <_printf_i+0x144>
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	6861      	ldr	r1, [r4, #4]
 8005742:	4299      	cmp	r1, r3
 8005744:	bfde      	ittt	le
 8005746:	2330      	movle	r3, #48	@ 0x30
 8005748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800574c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005750:	1b92      	subs	r2, r2, r6
 8005752:	6122      	str	r2, [r4, #16]
 8005754:	f8cd a000 	str.w	sl, [sp]
 8005758:	464b      	mov	r3, r9
 800575a:	aa03      	add	r2, sp, #12
 800575c:	4621      	mov	r1, r4
 800575e:	4640      	mov	r0, r8
 8005760:	f7ff fee6 	bl	8005530 <_printf_common>
 8005764:	3001      	adds	r0, #1
 8005766:	d14a      	bne.n	80057fe <_printf_i+0x1f2>
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	b004      	add	sp, #16
 800576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f043 0320 	orr.w	r3, r3, #32
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	4833      	ldr	r0, [pc, #204]	@ (8005848 <_printf_i+0x23c>)
 800577c:	2778      	movs	r7, #120	@ 0x78
 800577e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	6831      	ldr	r1, [r6, #0]
 8005786:	061f      	lsls	r7, r3, #24
 8005788:	f851 5b04 	ldr.w	r5, [r1], #4
 800578c:	d402      	bmi.n	8005794 <_printf_i+0x188>
 800578e:	065f      	lsls	r7, r3, #25
 8005790:	bf48      	it	mi
 8005792:	b2ad      	uxthmi	r5, r5
 8005794:	6031      	str	r1, [r6, #0]
 8005796:	07d9      	lsls	r1, r3, #31
 8005798:	bf44      	itt	mi
 800579a:	f043 0320 	orrmi.w	r3, r3, #32
 800579e:	6023      	strmi	r3, [r4, #0]
 80057a0:	b11d      	cbz	r5, 80057aa <_printf_i+0x19e>
 80057a2:	2310      	movs	r3, #16
 80057a4:	e7ac      	b.n	8005700 <_printf_i+0xf4>
 80057a6:	4827      	ldr	r0, [pc, #156]	@ (8005844 <_printf_i+0x238>)
 80057a8:	e7e9      	b.n	800577e <_printf_i+0x172>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f023 0320 	bic.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	e7f6      	b.n	80057a2 <_printf_i+0x196>
 80057b4:	4616      	mov	r6, r2
 80057b6:	e7bd      	b.n	8005734 <_printf_i+0x128>
 80057b8:	6833      	ldr	r3, [r6, #0]
 80057ba:	6825      	ldr	r5, [r4, #0]
 80057bc:	6961      	ldr	r1, [r4, #20]
 80057be:	1d18      	adds	r0, r3, #4
 80057c0:	6030      	str	r0, [r6, #0]
 80057c2:	062e      	lsls	r6, r5, #24
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	d501      	bpl.n	80057cc <_printf_i+0x1c0>
 80057c8:	6019      	str	r1, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <_printf_i+0x1c6>
 80057cc:	0668      	lsls	r0, r5, #25
 80057ce:	d5fb      	bpl.n	80057c8 <_printf_i+0x1bc>
 80057d0:	8019      	strh	r1, [r3, #0]
 80057d2:	2300      	movs	r3, #0
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	4616      	mov	r6, r2
 80057d8:	e7bc      	b.n	8005754 <_printf_i+0x148>
 80057da:	6833      	ldr	r3, [r6, #0]
 80057dc:	1d1a      	adds	r2, r3, #4
 80057de:	6032      	str	r2, [r6, #0]
 80057e0:	681e      	ldr	r6, [r3, #0]
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	2100      	movs	r1, #0
 80057e6:	4630      	mov	r0, r6
 80057e8:	f7fa fd12 	bl	8000210 <memchr>
 80057ec:	b108      	cbz	r0, 80057f2 <_printf_i+0x1e6>
 80057ee:	1b80      	subs	r0, r0, r6
 80057f0:	6060      	str	r0, [r4, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	2300      	movs	r3, #0
 80057f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057fc:	e7aa      	b.n	8005754 <_printf_i+0x148>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	47d0      	blx	sl
 8005808:	3001      	adds	r0, #1
 800580a:	d0ad      	beq.n	8005768 <_printf_i+0x15c>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	079b      	lsls	r3, r3, #30
 8005810:	d413      	bmi.n	800583a <_printf_i+0x22e>
 8005812:	68e0      	ldr	r0, [r4, #12]
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	4298      	cmp	r0, r3
 8005818:	bfb8      	it	lt
 800581a:	4618      	movlt	r0, r3
 800581c:	e7a6      	b.n	800576c <_printf_i+0x160>
 800581e:	2301      	movs	r3, #1
 8005820:	4632      	mov	r2, r6
 8005822:	4649      	mov	r1, r9
 8005824:	4640      	mov	r0, r8
 8005826:	47d0      	blx	sl
 8005828:	3001      	adds	r0, #1
 800582a:	d09d      	beq.n	8005768 <_printf_i+0x15c>
 800582c:	3501      	adds	r5, #1
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	9903      	ldr	r1, [sp, #12]
 8005832:	1a5b      	subs	r3, r3, r1
 8005834:	42ab      	cmp	r3, r5
 8005836:	dcf2      	bgt.n	800581e <_printf_i+0x212>
 8005838:	e7eb      	b.n	8005812 <_printf_i+0x206>
 800583a:	2500      	movs	r5, #0
 800583c:	f104 0619 	add.w	r6, r4, #25
 8005840:	e7f5      	b.n	800582e <_printf_i+0x222>
 8005842:	bf00      	nop
 8005844:	08005c55 	.word	0x08005c55
 8005848:	08005c66 	.word	0x08005c66

0800584c <__sflush_r>:
 800584c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	0716      	lsls	r6, r2, #28
 8005856:	4605      	mov	r5, r0
 8005858:	460c      	mov	r4, r1
 800585a:	d454      	bmi.n	8005906 <__sflush_r+0xba>
 800585c:	684b      	ldr	r3, [r1, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	dc02      	bgt.n	8005868 <__sflush_r+0x1c>
 8005862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	dd48      	ble.n	80058fa <__sflush_r+0xae>
 8005868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800586a:	2e00      	cmp	r6, #0
 800586c:	d045      	beq.n	80058fa <__sflush_r+0xae>
 800586e:	2300      	movs	r3, #0
 8005870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005874:	682f      	ldr	r7, [r5, #0]
 8005876:	6a21      	ldr	r1, [r4, #32]
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	d030      	beq.n	80058de <__sflush_r+0x92>
 800587c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	0759      	lsls	r1, r3, #29
 8005882:	d505      	bpl.n	8005890 <__sflush_r+0x44>
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800588a:	b10b      	cbz	r3, 8005890 <__sflush_r+0x44>
 800588c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	2300      	movs	r3, #0
 8005892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005894:	6a21      	ldr	r1, [r4, #32]
 8005896:	4628      	mov	r0, r5
 8005898:	47b0      	blx	r6
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	d106      	bne.n	80058ae <__sflush_r+0x62>
 80058a0:	6829      	ldr	r1, [r5, #0]
 80058a2:	291d      	cmp	r1, #29
 80058a4:	d82b      	bhi.n	80058fe <__sflush_r+0xb2>
 80058a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005950 <__sflush_r+0x104>)
 80058a8:	410a      	asrs	r2, r1
 80058aa:	07d6      	lsls	r6, r2, #31
 80058ac:	d427      	bmi.n	80058fe <__sflush_r+0xb2>
 80058ae:	2200      	movs	r2, #0
 80058b0:	6062      	str	r2, [r4, #4]
 80058b2:	04d9      	lsls	r1, r3, #19
 80058b4:	6922      	ldr	r2, [r4, #16]
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	d504      	bpl.n	80058c4 <__sflush_r+0x78>
 80058ba:	1c42      	adds	r2, r0, #1
 80058bc:	d101      	bne.n	80058c2 <__sflush_r+0x76>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b903      	cbnz	r3, 80058c4 <__sflush_r+0x78>
 80058c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80058c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058c6:	602f      	str	r7, [r5, #0]
 80058c8:	b1b9      	cbz	r1, 80058fa <__sflush_r+0xae>
 80058ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058ce:	4299      	cmp	r1, r3
 80058d0:	d002      	beq.n	80058d8 <__sflush_r+0x8c>
 80058d2:	4628      	mov	r0, r5
 80058d4:	f7ff fbf2 	bl	80050bc <_free_r>
 80058d8:	2300      	movs	r3, #0
 80058da:	6363      	str	r3, [r4, #52]	@ 0x34
 80058dc:	e00d      	b.n	80058fa <__sflush_r+0xae>
 80058de:	2301      	movs	r3, #1
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b0      	blx	r6
 80058e4:	4602      	mov	r2, r0
 80058e6:	1c50      	adds	r0, r2, #1
 80058e8:	d1c9      	bne.n	800587e <__sflush_r+0x32>
 80058ea:	682b      	ldr	r3, [r5, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0c6      	beq.n	800587e <__sflush_r+0x32>
 80058f0:	2b1d      	cmp	r3, #29
 80058f2:	d001      	beq.n	80058f8 <__sflush_r+0xac>
 80058f4:	2b16      	cmp	r3, #22
 80058f6:	d11e      	bne.n	8005936 <__sflush_r+0xea>
 80058f8:	602f      	str	r7, [r5, #0]
 80058fa:	2000      	movs	r0, #0
 80058fc:	e022      	b.n	8005944 <__sflush_r+0xf8>
 80058fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005902:	b21b      	sxth	r3, r3
 8005904:	e01b      	b.n	800593e <__sflush_r+0xf2>
 8005906:	690f      	ldr	r7, [r1, #16]
 8005908:	2f00      	cmp	r7, #0
 800590a:	d0f6      	beq.n	80058fa <__sflush_r+0xae>
 800590c:	0793      	lsls	r3, r2, #30
 800590e:	680e      	ldr	r6, [r1, #0]
 8005910:	bf08      	it	eq
 8005912:	694b      	ldreq	r3, [r1, #20]
 8005914:	600f      	str	r7, [r1, #0]
 8005916:	bf18      	it	ne
 8005918:	2300      	movne	r3, #0
 800591a:	eba6 0807 	sub.w	r8, r6, r7
 800591e:	608b      	str	r3, [r1, #8]
 8005920:	f1b8 0f00 	cmp.w	r8, #0
 8005924:	dde9      	ble.n	80058fa <__sflush_r+0xae>
 8005926:	6a21      	ldr	r1, [r4, #32]
 8005928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800592a:	4643      	mov	r3, r8
 800592c:	463a      	mov	r2, r7
 800592e:	4628      	mov	r0, r5
 8005930:	47b0      	blx	r6
 8005932:	2800      	cmp	r0, #0
 8005934:	dc08      	bgt.n	8005948 <__sflush_r+0xfc>
 8005936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800593e:	81a3      	strh	r3, [r4, #12]
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005948:	4407      	add	r7, r0
 800594a:	eba8 0800 	sub.w	r8, r8, r0
 800594e:	e7e7      	b.n	8005920 <__sflush_r+0xd4>
 8005950:	dfbffffe 	.word	0xdfbffffe

08005954 <_fflush_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	690b      	ldr	r3, [r1, #16]
 8005958:	4605      	mov	r5, r0
 800595a:	460c      	mov	r4, r1
 800595c:	b913      	cbnz	r3, 8005964 <_fflush_r+0x10>
 800595e:	2500      	movs	r5, #0
 8005960:	4628      	mov	r0, r5
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	b118      	cbz	r0, 800596e <_fflush_r+0x1a>
 8005966:	6a03      	ldr	r3, [r0, #32]
 8005968:	b90b      	cbnz	r3, 800596e <_fflush_r+0x1a>
 800596a:	f7ff fa9f 	bl	8004eac <__sinit>
 800596e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f3      	beq.n	800595e <_fflush_r+0xa>
 8005976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005978:	07d0      	lsls	r0, r2, #31
 800597a:	d404      	bmi.n	8005986 <_fflush_r+0x32>
 800597c:	0599      	lsls	r1, r3, #22
 800597e:	d402      	bmi.n	8005986 <_fflush_r+0x32>
 8005980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005982:	f7ff fb98 	bl	80050b6 <__retarget_lock_acquire_recursive>
 8005986:	4628      	mov	r0, r5
 8005988:	4621      	mov	r1, r4
 800598a:	f7ff ff5f 	bl	800584c <__sflush_r>
 800598e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005990:	07da      	lsls	r2, r3, #31
 8005992:	4605      	mov	r5, r0
 8005994:	d4e4      	bmi.n	8005960 <_fflush_r+0xc>
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	059b      	lsls	r3, r3, #22
 800599a:	d4e1      	bmi.n	8005960 <_fflush_r+0xc>
 800599c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800599e:	f7ff fb8b 	bl	80050b8 <__retarget_lock_release_recursive>
 80059a2:	e7dd      	b.n	8005960 <_fflush_r+0xc>

080059a4 <__swbuf_r>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	460e      	mov	r6, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	4605      	mov	r5, r0
 80059ac:	b118      	cbz	r0, 80059b6 <__swbuf_r+0x12>
 80059ae:	6a03      	ldr	r3, [r0, #32]
 80059b0:	b90b      	cbnz	r3, 80059b6 <__swbuf_r+0x12>
 80059b2:	f7ff fa7b 	bl	8004eac <__sinit>
 80059b6:	69a3      	ldr	r3, [r4, #24]
 80059b8:	60a3      	str	r3, [r4, #8]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	071a      	lsls	r2, r3, #28
 80059be:	d501      	bpl.n	80059c4 <__swbuf_r+0x20>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	b943      	cbnz	r3, 80059d6 <__swbuf_r+0x32>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f82a 	bl	8005a20 <__swsetup_r>
 80059cc:	b118      	cbz	r0, 80059d6 <__swbuf_r+0x32>
 80059ce:	f04f 37ff 	mov.w	r7, #4294967295
 80059d2:	4638      	mov	r0, r7
 80059d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	6922      	ldr	r2, [r4, #16]
 80059da:	1a98      	subs	r0, r3, r2
 80059dc:	6963      	ldr	r3, [r4, #20]
 80059de:	b2f6      	uxtb	r6, r6
 80059e0:	4283      	cmp	r3, r0
 80059e2:	4637      	mov	r7, r6
 80059e4:	dc05      	bgt.n	80059f2 <__swbuf_r+0x4e>
 80059e6:	4621      	mov	r1, r4
 80059e8:	4628      	mov	r0, r5
 80059ea:	f7ff ffb3 	bl	8005954 <_fflush_r>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d1ed      	bne.n	80059ce <__swbuf_r+0x2a>
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	60a3      	str	r3, [r4, #8]
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	701e      	strb	r6, [r3, #0]
 8005a00:	6962      	ldr	r2, [r4, #20]
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d004      	beq.n	8005a12 <__swbuf_r+0x6e>
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	07db      	lsls	r3, r3, #31
 8005a0c:	d5e1      	bpl.n	80059d2 <__swbuf_r+0x2e>
 8005a0e:	2e0a      	cmp	r6, #10
 8005a10:	d1df      	bne.n	80059d2 <__swbuf_r+0x2e>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	f7ff ff9d 	bl	8005954 <_fflush_r>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0d9      	beq.n	80059d2 <__swbuf_r+0x2e>
 8005a1e:	e7d6      	b.n	80059ce <__swbuf_r+0x2a>

08005a20 <__swsetup_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4b29      	ldr	r3, [pc, #164]	@ (8005ac8 <__swsetup_r+0xa8>)
 8005a24:	4605      	mov	r5, r0
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	460c      	mov	r4, r1
 8005a2a:	b118      	cbz	r0, 8005a34 <__swsetup_r+0x14>
 8005a2c:	6a03      	ldr	r3, [r0, #32]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <__swsetup_r+0x14>
 8005a30:	f7ff fa3c 	bl	8004eac <__sinit>
 8005a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a38:	0719      	lsls	r1, r3, #28
 8005a3a:	d422      	bmi.n	8005a82 <__swsetup_r+0x62>
 8005a3c:	06da      	lsls	r2, r3, #27
 8005a3e:	d407      	bmi.n	8005a50 <__swsetup_r+0x30>
 8005a40:	2209      	movs	r2, #9
 8005a42:	602a      	str	r2, [r5, #0]
 8005a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	e033      	b.n	8005ab8 <__swsetup_r+0x98>
 8005a50:	0758      	lsls	r0, r3, #29
 8005a52:	d512      	bpl.n	8005a7a <__swsetup_r+0x5a>
 8005a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a56:	b141      	cbz	r1, 8005a6a <__swsetup_r+0x4a>
 8005a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d002      	beq.n	8005a66 <__swsetup_r+0x46>
 8005a60:	4628      	mov	r0, r5
 8005a62:	f7ff fb2b 	bl	80050bc <_free_r>
 8005a66:	2300      	movs	r3, #0
 8005a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	2300      	movs	r3, #0
 8005a74:	6063      	str	r3, [r4, #4]
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f043 0308 	orr.w	r3, r3, #8
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	b94b      	cbnz	r3, 8005a9a <__swsetup_r+0x7a>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a90:	d003      	beq.n	8005a9a <__swsetup_r+0x7a>
 8005a92:	4621      	mov	r1, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 f84f 	bl	8005b38 <__smakebuf_r>
 8005a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9e:	f013 0201 	ands.w	r2, r3, #1
 8005aa2:	d00a      	beq.n	8005aba <__swsetup_r+0x9a>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	60a2      	str	r2, [r4, #8]
 8005aa8:	6962      	ldr	r2, [r4, #20]
 8005aaa:	4252      	negs	r2, r2
 8005aac:	61a2      	str	r2, [r4, #24]
 8005aae:	6922      	ldr	r2, [r4, #16]
 8005ab0:	b942      	cbnz	r2, 8005ac4 <__swsetup_r+0xa4>
 8005ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ab6:	d1c5      	bne.n	8005a44 <__swsetup_r+0x24>
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
 8005aba:	0799      	lsls	r1, r3, #30
 8005abc:	bf58      	it	pl
 8005abe:	6962      	ldrpl	r2, [r4, #20]
 8005ac0:	60a2      	str	r2, [r4, #8]
 8005ac2:	e7f4      	b.n	8005aae <__swsetup_r+0x8e>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e7f7      	b.n	8005ab8 <__swsetup_r+0x98>
 8005ac8:	20000020 	.word	0x20000020

08005acc <_sbrk_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d06      	ldr	r5, [pc, #24]	@ (8005ae8 <_sbrk_r+0x1c>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fb fc42 	bl	8001360 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_sbrk_r+0x1a>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_sbrk_r+0x1a>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000450 	.word	0x20000450

08005aec <__swhatbuf_r>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	460c      	mov	r4, r1
 8005af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af4:	2900      	cmp	r1, #0
 8005af6:	b096      	sub	sp, #88	@ 0x58
 8005af8:	4615      	mov	r5, r2
 8005afa:	461e      	mov	r6, r3
 8005afc:	da0d      	bge.n	8005b1a <__swhatbuf_r+0x2e>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b04:	f04f 0100 	mov.w	r1, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2340      	movne	r3, #64	@ 0x40
 8005b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b10:	2000      	movs	r0, #0
 8005b12:	6031      	str	r1, [r6, #0]
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	b016      	add	sp, #88	@ 0x58
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
 8005b1a:	466a      	mov	r2, sp
 8005b1c:	f000 f848 	bl	8005bb0 <_fstat_r>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	dbec      	blt.n	8005afe <__swhatbuf_r+0x12>
 8005b24:	9901      	ldr	r1, [sp, #4]
 8005b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b2e:	4259      	negs	r1, r3
 8005b30:	4159      	adcs	r1, r3
 8005b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b36:	e7eb      	b.n	8005b10 <__swhatbuf_r+0x24>

08005b38 <__smakebuf_r>:
 8005b38:	898b      	ldrh	r3, [r1, #12]
 8005b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b3c:	079d      	lsls	r5, r3, #30
 8005b3e:	4606      	mov	r6, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	d507      	bpl.n	8005b54 <__smakebuf_r+0x1c>
 8005b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	6163      	str	r3, [r4, #20]
 8005b50:	b003      	add	sp, #12
 8005b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b54:	ab01      	add	r3, sp, #4
 8005b56:	466a      	mov	r2, sp
 8005b58:	f7ff ffc8 	bl	8005aec <__swhatbuf_r>
 8005b5c:	9f00      	ldr	r7, [sp, #0]
 8005b5e:	4605      	mov	r5, r0
 8005b60:	4639      	mov	r1, r7
 8005b62:	4630      	mov	r0, r6
 8005b64:	f7ff fb16 	bl	8005194 <_malloc_r>
 8005b68:	b948      	cbnz	r0, 8005b7e <__smakebuf_r+0x46>
 8005b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b6e:	059a      	lsls	r2, r3, #22
 8005b70:	d4ee      	bmi.n	8005b50 <__smakebuf_r+0x18>
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	f043 0302 	orr.w	r3, r3, #2
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	e7e2      	b.n	8005b44 <__smakebuf_r+0xc>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	6020      	str	r0, [r4, #0]
 8005b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	9b01      	ldr	r3, [sp, #4]
 8005b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b8e:	b15b      	cbz	r3, 8005ba8 <__smakebuf_r+0x70>
 8005b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f81d 	bl	8005bd4 <_isatty_r>
 8005b9a:	b128      	cbz	r0, 8005ba8 <__smakebuf_r+0x70>
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	431d      	orrs	r5, r3
 8005bac:	81a5      	strh	r5, [r4, #12]
 8005bae:	e7cf      	b.n	8005b50 <__smakebuf_r+0x18>

08005bb0 <_fstat_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	@ (8005bd0 <_fstat_r+0x20>)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	f7fb fba6 	bl	800130e <_fstat>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	d102      	bne.n	8005bcc <_fstat_r+0x1c>
 8005bc6:	682b      	ldr	r3, [r5, #0]
 8005bc8:	b103      	cbz	r3, 8005bcc <_fstat_r+0x1c>
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	bd38      	pop	{r3, r4, r5, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000450 	.word	0x20000450

08005bd4 <_isatty_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d06      	ldr	r5, [pc, #24]	@ (8005bf0 <_isatty_r+0x1c>)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	f7fb fba5 	bl	800132e <_isatty>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_isatty_r+0x1a>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_isatty_r+0x1a>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20000450 	.word	0x20000450

08005bf4 <_init>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr

08005c00 <_fini>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr
