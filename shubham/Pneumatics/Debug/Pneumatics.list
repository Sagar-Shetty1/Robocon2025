
Pneumatics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004ce8  08004ce8  00005ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d84  08004d84  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d84  08004d84  00005d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d8c  08004d8c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d8c  08004d8c  00005d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d90  08004d90  00005d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000068  08004dfc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004dfc  00006334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a7d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b68  00000000  00000000  0000fb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00011680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000632  00000000  00000000  00011ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c2f  00000000  00000000  000124da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad86  00000000  00000000  00034109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca475  00000000  00000000  0003ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a4  00000000  00000000  00109348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010baec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cd0 	.word	0x08004cd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004cd0 	.word	0x08004cd0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80005a8:	2210      	movs	r2, #16
 80005aa:	4904      	ldr	r1, [pc, #16]	@ (80005bc <HAL_UART_RxCpltCallback+0x1c>)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <HAL_UART_RxCpltCallback+0x20>)
 80005ae:	f002 fb52 	bl	8002c56 <HAL_UART_Receive_DMA>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000174 	.word	0x20000174
 80005c0:	20000084 	.word	0x20000084

080005c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	b08d      	sub	sp, #52	@ 0x34
 80005c8:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ca:	f000 fd4d 	bl	8001068 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ce:	f000 f9db 	bl	8000988 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d2:	f000 fabb 	bl	8000b4c <MX_GPIO_Init>
	MX_DMA_Init();
 80005d6:	f000 fa99 	bl	8000b0c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80005da:	f000 fa6d 	bl	8000ab8 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80005de:	f000 fa41 	bl	8000a64 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80005e2:	2210      	movs	r2, #16
 80005e4:	496f      	ldr	r1, [pc, #444]	@ (80007a4 <main+0x1e0>)
 80005e6:	4870      	ldr	r0, [pc, #448]	@ (80007a8 <main+0x1e4>)
 80005e8:	f002 fb35 	bl	8002c56 <HAL_UART_Receive_DMA>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* ps5 controller */
		lx = (rxbuff[0] & 0x80) ?
 80005ec:	4b6d      	ldr	r3, [pc, #436]	@ (80007a4 <main+0x1e0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	da04      	bge.n	8000600 <main+0x3c>
 80005f6:	4b6b      	ldr	r3, [pc, #428]	@ (80007a4 <main+0x1e0>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005fe:	e001      	b.n	8000604 <main+0x40>
 8000600:	4b68      	ldr	r3, [pc, #416]	@ (80007a4 <main+0x1e0>)
 8000602:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 8000604:	4a69      	ldr	r2, [pc, #420]	@ (80007ac <main+0x1e8>)
 8000606:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 8000608:	4b66      	ldr	r3, [pc, #408]	@ (80007a4 <main+0x1e0>)
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 800060e:	2b00      	cmp	r3, #0
 8000610:	da04      	bge.n	800061c <main+0x58>
 8000612:	4b64      	ldr	r3, [pc, #400]	@ (80007a4 <main+0x1e0>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800061a:	e001      	b.n	8000620 <main+0x5c>
 800061c:	4b61      	ldr	r3, [pc, #388]	@ (80007a4 <main+0x1e0>)
 800061e:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 8000620:	4a63      	ldr	r2, [pc, #396]	@ (80007b0 <main+0x1ec>)
 8000622:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 8000624:	4b5f      	ldr	r3, [pc, #380]	@ (80007a4 <main+0x1e0>)
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 800062a:	2b00      	cmp	r3, #0
 800062c:	da04      	bge.n	8000638 <main+0x74>
 800062e:	4b5d      	ldr	r3, [pc, #372]	@ (80007a4 <main+0x1e0>)
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000636:	e001      	b.n	800063c <main+0x78>
 8000638:	4b5a      	ldr	r3, [pc, #360]	@ (80007a4 <main+0x1e0>)
 800063a:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 800063c:	4a5d      	ldr	r2, [pc, #372]	@ (80007b4 <main+0x1f0>)
 800063e:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 8000640:	4b58      	ldr	r3, [pc, #352]	@ (80007a4 <main+0x1e0>)
 8000642:	78db      	ldrb	r3, [r3, #3]
 8000644:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8000646:	2b00      	cmp	r3, #0
 8000648:	da04      	bge.n	8000654 <main+0x90>
 800064a:	4b56      	ldr	r3, [pc, #344]	@ (80007a4 <main+0x1e0>)
 800064c:	78db      	ldrb	r3, [r3, #3]
 800064e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000652:	e001      	b.n	8000658 <main+0x94>
 8000654:	4b53      	ldr	r3, [pc, #332]	@ (80007a4 <main+0x1e0>)
 8000656:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 8000658:	4a57      	ldr	r2, [pc, #348]	@ (80007b8 <main+0x1f4>)
 800065a:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 800065c:	4b51      	ldr	r3, [pc, #324]	@ (80007a4 <main+0x1e0>)
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8000662:	2b00      	cmp	r3, #0
 8000664:	da04      	bge.n	8000670 <main+0xac>
 8000666:	4b4f      	ldr	r3, [pc, #316]	@ (80007a4 <main+0x1e0>)
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800066e:	e001      	b.n	8000674 <main+0xb0>
 8000670:	4b4c      	ldr	r3, [pc, #304]	@ (80007a4 <main+0x1e0>)
 8000672:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 8000674:	4a51      	ldr	r2, [pc, #324]	@ (80007bc <main+0x1f8>)
 8000676:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 8000678:	4b4a      	ldr	r3, [pc, #296]	@ (80007a4 <main+0x1e0>)
 800067a:	795b      	ldrb	r3, [r3, #5]
 800067c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 800067e:	2b00      	cmp	r3, #0
 8000680:	da04      	bge.n	800068c <main+0xc8>
 8000682:	4b48      	ldr	r3, [pc, #288]	@ (80007a4 <main+0x1e0>)
 8000684:	795b      	ldrb	r3, [r3, #5]
 8000686:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800068a:	e001      	b.n	8000690 <main+0xcc>
 800068c:	4b45      	ldr	r3, [pc, #276]	@ (80007a4 <main+0x1e0>)
 800068e:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 8000690:	4a4b      	ldr	r2, [pc, #300]	@ (80007c0 <main+0x1fc>)
 8000692:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 8000694:	4b43      	ldr	r3, [pc, #268]	@ (80007a4 <main+0x1e0>)
 8000696:	799b      	ldrb	r3, [r3, #6]
 8000698:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 800069a:	2b00      	cmp	r3, #0
 800069c:	da04      	bge.n	80006a8 <main+0xe4>
 800069e:	4b41      	ldr	r3, [pc, #260]	@ (80007a4 <main+0x1e0>)
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006a6:	e001      	b.n	80006ac <main+0xe8>
 80006a8:	4b3e      	ldr	r3, [pc, #248]	@ (80007a4 <main+0x1e0>)
 80006aa:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 80006ac:	4a45      	ldr	r2, [pc, #276]	@ (80007c4 <main+0x200>)
 80006ae:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 80006b0:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <main+0x1e0>)
 80006b2:	79db      	ldrb	r3, [r3, #7]
 80006b4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	da04      	bge.n	80006c4 <main+0x100>
 80006ba:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <main+0x1e0>)
 80006bc:	79db      	ldrb	r3, [r3, #7]
 80006be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006c2:	e001      	b.n	80006c8 <main+0x104>
 80006c4:	4b37      	ldr	r3, [pc, #220]	@ (80007a4 <main+0x1e0>)
 80006c6:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 80006c8:	4a3f      	ldr	r2, [pc, #252]	@ (80007c8 <main+0x204>)
 80006ca:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 80006cc:	4b35      	ldr	r3, [pc, #212]	@ (80007a4 <main+0x1e0>)
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	da04      	bge.n	80006e0 <main+0x11c>
 80006d6:	4b33      	ldr	r3, [pc, #204]	@ (80007a4 <main+0x1e0>)
 80006d8:	7a1b      	ldrb	r3, [r3, #8]
 80006da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006de:	e001      	b.n	80006e4 <main+0x120>
 80006e0:	4b30      	ldr	r3, [pc, #192]	@ (80007a4 <main+0x1e0>)
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 80006e4:	4a39      	ldr	r2, [pc, #228]	@ (80007cc <main+0x208>)
 80006e6:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <main+0x1e0>)
 80006ea:	7a5b      	ldrb	r3, [r3, #9]
 80006ec:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da04      	bge.n	80006fc <main+0x138>
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <main+0x1e0>)
 80006f4:	7a5b      	ldrb	r3, [r3, #9]
 80006f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006fa:	e001      	b.n	8000700 <main+0x13c>
 80006fc:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <main+0x1e0>)
 80006fe:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 8000700:	4a33      	ldr	r2, [pc, #204]	@ (80007d0 <main+0x20c>)
 8000702:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <main+0x1e0>)
 8000706:	7a9b      	ldrb	r3, [r3, #10]
 8000708:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 800070a:	2b00      	cmp	r3, #0
 800070c:	da04      	bge.n	8000718 <main+0x154>
 800070e:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <main+0x1e0>)
 8000710:	7a9b      	ldrb	r3, [r3, #10]
 8000712:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000716:	e001      	b.n	800071c <main+0x158>
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <main+0x1e0>)
 800071a:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 800071c:	4a2d      	ldr	r2, [pc, #180]	@ (80007d4 <main+0x210>)
 800071e:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <main+0x1e0>)
 8000722:	7adb      	ldrb	r3, [r3, #11]
 8000724:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 8000726:	2b00      	cmp	r3, #0
 8000728:	da04      	bge.n	8000734 <main+0x170>
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <main+0x1e0>)
 800072c:	7adb      	ldrb	r3, [r3, #11]
 800072e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000732:	e001      	b.n	8000738 <main+0x174>
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <main+0x1e0>)
 8000736:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 8000738:	4a27      	ldr	r2, [pc, #156]	@ (80007d8 <main+0x214>)
 800073a:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <main+0x1e0>)
 800073e:	7b1b      	ldrb	r3, [r3, #12]
 8000740:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8000742:	2b00      	cmp	r3, #0
 8000744:	da04      	bge.n	8000750 <main+0x18c>
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <main+0x1e0>)
 8000748:	7b1b      	ldrb	r3, [r3, #12]
 800074a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800074e:	e001      	b.n	8000754 <main+0x190>
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <main+0x1e0>)
 8000752:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 8000754:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <main+0x218>)
 8000756:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <main+0x1e0>)
 800075a:	7b5b      	ldrb	r3, [r3, #13]
 800075c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 800075e:	2b00      	cmp	r3, #0
 8000760:	da04      	bge.n	800076c <main+0x1a8>
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <main+0x1e0>)
 8000764:	7b5b      	ldrb	r3, [r3, #13]
 8000766:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800076a:	e001      	b.n	8000770 <main+0x1ac>
 800076c:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <main+0x1e0>)
 800076e:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <main+0x21c>)
 8000772:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 8000774:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <main+0x1e0>)
 8000776:	7b9b      	ldrb	r3, [r3, #14]
 8000778:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 800077a:	2b00      	cmp	r3, #0
 800077c:	da04      	bge.n	8000788 <main+0x1c4>
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <main+0x1e0>)
 8000780:	7b9b      	ldrb	r3, [r3, #14]
 8000782:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000786:	e001      	b.n	800078c <main+0x1c8>
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <main+0x1e0>)
 800078a:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 800078c:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <main+0x220>)
 800078e:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <main+0x1e0>)
 8000792:	7bdb      	ldrb	r3, [r3, #15]
 8000794:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 8000796:	2b00      	cmp	r3, #0
 8000798:	da26      	bge.n	80007e8 <main+0x224>
 800079a:	4b02      	ldr	r3, [pc, #8]	@ (80007a4 <main+0x1e0>)
 800079c:	7bdb      	ldrb	r3, [r3, #15]
 800079e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007a2:	e023      	b.n	80007ec <main+0x228>
 80007a4:	20000174 	.word	0x20000174
 80007a8:	20000084 	.word	0x20000084
 80007ac:	20000184 	.word	0x20000184
 80007b0:	20000188 	.word	0x20000188
 80007b4:	2000018c 	.word	0x2000018c
 80007b8:	20000190 	.word	0x20000190
 80007bc:	20000194 	.word	0x20000194
 80007c0:	20000198 	.word	0x20000198
 80007c4:	2000019c 	.word	0x2000019c
 80007c8:	200001a0 	.word	0x200001a0
 80007cc:	200001a4 	.word	0x200001a4
 80007d0:	200001a8 	.word	0x200001a8
 80007d4:	200001ac 	.word	0x200001ac
 80007d8:	200001b0 	.word	0x200001b0
 80007dc:	200001b4 	.word	0x200001b4
 80007e0:	200001bc 	.word	0x200001bc
 80007e4:	200001b8 	.word	0x200001b8
 80007e8:	4b53      	ldr	r3, [pc, #332]	@ (8000938 <main+0x374>)
 80007ea:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 80007ec:	4a53      	ldr	r2, [pc, #332]	@ (800093c <main+0x378>)
 80007ee:	6013      	str	r3, [r2, #0]

		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld States: %d %d %d\r\n", lx, ly,
 80007f0:	4b53      	ldr	r3, [pc, #332]	@ (8000940 <main+0x37c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b53      	ldr	r3, [pc, #332]	@ (8000944 <main+0x380>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	60ba      	str	r2, [r7, #8]
 80007fc:	4b52      	ldr	r3, [pc, #328]	@ (8000948 <main+0x384>)
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	4b52      	ldr	r3, [pc, #328]	@ (800094c <main+0x388>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a52      	ldr	r2, [pc, #328]	@ (8000950 <main+0x38c>)
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	4952      	ldr	r1, [pc, #328]	@ (8000954 <main+0x390>)
 800080c:	6809      	ldr	r1, [r1, #0]
 800080e:	4852      	ldr	r0, [pc, #328]	@ (8000958 <main+0x394>)
 8000810:	6800      	ldr	r0, [r0, #0]
 8000812:	4c52      	ldr	r4, [pc, #328]	@ (800095c <main+0x398>)
 8000814:	6824      	ldr	r4, [r4, #0]
 8000816:	603c      	str	r4, [r7, #0]
 8000818:	4d51      	ldr	r5, [pc, #324]	@ (8000960 <main+0x39c>)
 800081a:	682d      	ldr	r5, [r5, #0]
 800081c:	4e51      	ldr	r6, [pc, #324]	@ (8000964 <main+0x3a0>)
 800081e:	6836      	ldr	r6, [r6, #0]
 8000820:	4c51      	ldr	r4, [pc, #324]	@ (8000968 <main+0x3a4>)
 8000822:	6824      	ldr	r4, [r4, #0]
 8000824:	9407      	str	r4, [sp, #28]
 8000826:	9606      	str	r6, [sp, #24]
 8000828:	9505      	str	r5, [sp, #20]
 800082a:	683c      	ldr	r4, [r7, #0]
 800082c:	9404      	str	r4, [sp, #16]
 800082e:	9003      	str	r0, [sp, #12]
 8000830:	9102      	str	r1, [sp, #8]
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	68f9      	ldr	r1, [r7, #12]
 800083c:	484b      	ldr	r0, [pc, #300]	@ (800096c <main+0x3a8>)
 800083e:	f003 fbd9 	bl	8003ff4 <iprintf>
//	  }
//	  if(cro == 1 && !prev_cro){
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
//	  }

		if (state_tri == 1) {
 8000842:	4b47      	ldr	r3, [pc, #284]	@ (8000960 <main+0x39c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d106      	bne.n	8000858 <main+0x294>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000850:	4847      	ldr	r0, [pc, #284]	@ (8000970 <main+0x3ac>)
 8000852:	f001 fb23 	bl	8001e9c <HAL_GPIO_WritePin>
 8000856:	e005      	b.n	8000864 <main+0x2a0>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800085e:	4844      	ldr	r0, [pc, #272]	@ (8000970 <main+0x3ac>)
 8000860:	f001 fb1c 	bl	8001e9c <HAL_GPIO_WritePin>
		}
		if (state_cir == 1) {
 8000864:	4b3f      	ldr	r3, [pc, #252]	@ (8000964 <main+0x3a0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d106      	bne.n	800087a <main+0x2b6>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000872:	483f      	ldr	r0, [pc, #252]	@ (8000970 <main+0x3ac>)
 8000874:	f001 fb12 	bl	8001e9c <HAL_GPIO_WritePin>
 8000878:	e005      	b.n	8000886 <main+0x2c2>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000880:	483b      	ldr	r0, [pc, #236]	@ (8000970 <main+0x3ac>)
 8000882:	f001 fb0b 	bl	8001e9c <HAL_GPIO_WritePin>
		}
		if (state_cro == 1) {
 8000886:	4b38      	ldr	r3, [pc, #224]	@ (8000968 <main+0x3a4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d106      	bne.n	800089c <main+0x2d8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000894:	4837      	ldr	r0, [pc, #220]	@ (8000974 <main+0x3b0>)
 8000896:	f001 fb01 	bl	8001e9c <HAL_GPIO_WritePin>
 800089a:	e005      	b.n	80008a8 <main+0x2e4>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008a2:	4834      	ldr	r0, [pc, #208]	@ (8000974 <main+0x3b0>)
 80008a4:	f001 fafa 	bl	8001e9c <HAL_GPIO_WritePin>
		}

		if(tri == 1 && !prev_tri){
 80008a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <main+0x394>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10d      	bne.n	80008cc <main+0x308>
 80008b0:	4b31      	ldr	r3, [pc, #196]	@ (8000978 <main+0x3b4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d109      	bne.n	80008cc <main+0x308>
			state_tri = !state_tri;
 80008b8:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <main+0x39c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	bf0c      	ite	eq
 80008c0:	2301      	moveq	r3, #1
 80008c2:	2300      	movne	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <main+0x39c>)
 80008ca:	601a      	str	r2, [r3, #0]
		}
		if(cir == 1 && !prev_cir){
 80008cc:	4b23      	ldr	r3, [pc, #140]	@ (800095c <main+0x398>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10d      	bne.n	80008f0 <main+0x32c>
 80008d4:	4b29      	ldr	r3, [pc, #164]	@ (800097c <main+0x3b8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d109      	bne.n	80008f0 <main+0x32c>
			state_cir = !state_cir;
 80008dc:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <main+0x3a0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf0c      	ite	eq
 80008e4:	2301      	moveq	r3, #1
 80008e6:	2300      	movne	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <main+0x3a0>)
 80008ee:	601a      	str	r2, [r3, #0]
		}
		if(cro == 1 && !prev_cro){
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <main+0x38c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d10d      	bne.n	8000914 <main+0x350>
 80008f8:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <main+0x3bc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <main+0x350>
			state_cro = !state_cro;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <main+0x3a4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf0c      	ite	eq
 8000908:	2301      	moveq	r3, #1
 800090a:	2300      	movne	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <main+0x3a4>)
 8000912:	601a      	str	r2, [r3, #0]
//		if(squ == 1 && !prev_squ){
//			state_tri = 0;
//			state_cir = 0;
//			state_cro = 0;
//		}
	  prev_tri = tri;
 8000914:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <main+0x394>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <main+0x3b4>)
 800091a:	6013      	str	r3, [r2, #0]
	  prev_cir = cir;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <main+0x398>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a16      	ldr	r2, [pc, #88]	@ (800097c <main+0x3b8>)
 8000922:	6013      	str	r3, [r2, #0]
	  prev_cro = cro;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <main+0x38c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a15      	ldr	r2, [pc, #84]	@ (8000980 <main+0x3bc>)
 800092a:	6013      	str	r3, [r2, #0]
	  prev_squ = squ;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <main+0x390>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a14      	ldr	r2, [pc, #80]	@ (8000984 <main+0x3c0>)
 8000932:	6013      	str	r3, [r2, #0]
	while (1) {
 8000934:	e65a      	b.n	80005ec <main+0x28>
 8000936:	bf00      	nop
 8000938:	20000174 	.word	0x20000174
 800093c:	200001c0 	.word	0x200001c0
 8000940:	20000184 	.word	0x20000184
 8000944:	20000188 	.word	0x20000188
 8000948:	2000018c 	.word	0x2000018c
 800094c:	20000190 	.word	0x20000190
 8000950:	20000194 	.word	0x20000194
 8000954:	20000198 	.word	0x20000198
 8000958:	2000019c 	.word	0x2000019c
 800095c:	200001a0 	.word	0x200001a0
 8000960:	200001d4 	.word	0x200001d4
 8000964:	200001d8 	.word	0x200001d8
 8000968:	200001dc 	.word	0x200001dc
 800096c:	08004ce8 	.word	0x08004ce8
 8000970:	40020000 	.word	0x40020000
 8000974:	40020400 	.word	0x40020400
 8000978:	200001c4 	.word	0x200001c4
 800097c:	200001c8 	.word	0x200001c8
 8000980:	200001cc 	.word	0x200001cc
 8000984:	200001d0 	.word	0x200001d0

08000988 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	@ 0x50
 800098c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2234      	movs	r2, #52	@ 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fb81 	bl	800409e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <SystemClock_Config+0xd4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a29      	ldr	r2, [pc, #164]	@ (8000a5c <SystemClock_Config+0xd4>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <SystemClock_Config+0xd4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009d4:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <SystemClock_Config+0xd8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f0:	2310      	movs	r3, #16
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f4:	2302      	movs	r3, #2
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80009fc:	2310      	movs	r3, #16
 80009fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a04:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a06:	2304      	movs	r3, #4
 8000a08:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 fda4 	bl	8002564 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x9e>
		Error_Handler();
 8000a22:	f000 f931 	bl	8000c88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2102      	movs	r1, #2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fa44 	bl	8001ed0 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xca>
		Error_Handler();
 8000a4e:	f000 f91b 	bl	8000c88 <Error_Handler>
	}
}
 8000a52:	bf00      	nop
 8000a54:	3750      	adds	r7, #80	@ 0x50
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <MX_UART4_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_UART4_Init+0x4c>)
 8000a9c:	f002 f800 	bl	8002aa0 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART4_Init+0x46>
		Error_Handler();
 8000aa6:	f000 f8ef 	bl	8000c88 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000084 	.word	0x20000084
 8000ab4:	40004c00 	.word	0x40004c00

08000ab8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <MX_USART2_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f001 ffd6 	bl	8002aa0 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000afa:	f000 f8c5 	bl	8000c88 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000cc 	.word	0x200000cc
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_DMA_Init+0x3c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b48 <MX_DMA_Init+0x3c>)
 8000b1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_DMA_Init+0x3c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200d      	movs	r0, #13
 8000b34:	f000 fbe5 	bl	8001302 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b38:	200d      	movs	r0, #13
 8000b3a:	f000 fbfe 	bl	800133a <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b39      	ldr	r3, [pc, #228]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a38      	ldr	r2, [pc, #224]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b36      	ldr	r3, [pc, #216]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b32      	ldr	r3, [pc, #200]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a31      	ldr	r2, [pc, #196]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b24      	ldr	r3, [pc, #144]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a23      	ldr	r2, [pc, #140]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <MX_GPIO_Init+0x100>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_11 | GPIO_PIN_12,
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000bd8:	481d      	ldr	r0, [pc, #116]	@ (8000c50 <MX_GPIO_Init+0x104>)
 8000bda:	f001 f95f 	bl	8001e9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_12, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000be4:	481b      	ldr	r0, [pc, #108]	@ (8000c54 <MX_GPIO_Init+0x108>)
 8000be6:	f001 f959 	bl	8001e9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4815      	ldr	r0, [pc, #84]	@ (8000c58 <MX_GPIO_Init+0x10c>)
 8000c02:	f000 ffb7 	bl	8001b74 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA11 PA12 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_11 | GPIO_PIN_12;
 8000c06:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000c0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <MX_GPIO_Init+0x104>)
 8000c20:	f000 ffa8 	bl	8001b74 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000c24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_GPIO_Init+0x108>)
 8000c3e:	f000 ff99 	bl	8001b74 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40020800 	.word	0x40020800

08000c5c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <_write+0x28>)
 8000c74:	f001 ff64 	bl	8002b40 <HAL_UART_Transmit>
	return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000cc 	.word	0x200000cc

08000c88 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 fb0a 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	@ 0x30
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a4e      	ldr	r2, [pc, #312]	@ (8000e3c <HAL_UART_MspInit+0x158>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d164      	bne.n	8000dd0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000d10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b4a      	ldr	r3, [pc, #296]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	4b46      	ldr	r3, [pc, #280]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a45      	ldr	r2, [pc, #276]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b43      	ldr	r3, [pc, #268]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d50:	2308      	movs	r3, #8
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	483a      	ldr	r0, [pc, #232]	@ (8000e44 <HAL_UART_MspInit+0x160>)
 8000d5c:	f000 ff0a 	bl	8001b74 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000d60:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d62:	4a3a      	ldr	r2, [pc, #232]	@ (8000e4c <HAL_UART_MspInit+0x168>)
 8000d64:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000d66:	4b38      	ldr	r3, [pc, #224]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d68:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d6c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6e:	4b36      	ldr	r3, [pc, #216]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b34      	ldr	r3, [pc, #208]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b33      	ldr	r3, [pc, #204]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d82:	4b31      	ldr	r3, [pc, #196]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d88:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000da2:	4829      	ldr	r0, [pc, #164]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000da4:	f000 fae4 	bl	8001370 <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000dae:	f7ff ff6b 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000db8:	4a23      	ldr	r2, [pc, #140]	@ (8000e48 <HAL_UART_MspInit+0x164>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2034      	movs	r0, #52	@ 0x34
 8000dc4:	f000 fa9d 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000dc8:	2034      	movs	r0, #52	@ 0x34
 8000dca:	f000 fab6 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dce:	e030      	b.n	8000e32 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e50 <HAL_UART_MspInit+0x16c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12b      	bne.n	8000e32 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a17      	ldr	r2, [pc, #92]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_UART_MspInit+0x15c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e12:	230c      	movs	r3, #12
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e22:	2307      	movs	r3, #7
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <HAL_UART_MspInit+0x170>)
 8000e2e:	f000 fea1 	bl	8001b74 <HAL_GPIO_Init>
}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	@ 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40004c00 	.word	0x40004c00
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020800 	.word	0x40020800
 8000e48:	20000114 	.word	0x20000114
 8000e4c:	40026040 	.word	0x40026040
 8000e50:	40004400 	.word	0x40004400
 8000e54:	40020000 	.word	0x40020000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 f92d 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DMA1_Stream2_IRQHandler+0x10>)
 8000ebe:	f000 fbef 	bl	80016a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000114 	.word	0x20000114

08000ecc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <UART4_IRQHandler+0x10>)
 8000ed2:	f001 fee5 	bl	8002ca0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000084 	.word	0x20000084

08000ee0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
  }

  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f003 f8c2 	bl	800413c <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200001e0 	.word	0x200001e0
 8000fec:	20000338 	.word	0x20000338

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800104c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001042:	f003 f881 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fabd 	bl	80005c4 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001058:	08004d94 	.word	0x08004d94
  ldr r2, =_sbss
 800105c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001060:	20000334 	.word	0x20000334

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f92b 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fdfa 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f943 	bl	8001356 <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f90b 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200001e4 	.word	0x200001e4

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200001e4 	.word	0x200001e4

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	@ (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff feda 	bl	8001134 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e099      	b.n	80014c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ac:	e00f      	b.n	80013ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ae:	f7ff fec1 	bl	8001134 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d908      	bls.n	80013ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2203      	movs	r2, #3
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e078      	b.n	80014c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e8      	bne.n	80013ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4b38      	ldr	r3, [pc, #224]	@ (80014c8 <HAL_DMA_Init+0x158>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	2b04      	cmp	r3, #4
 8001426:	d107      	bne.n	8001438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001430:	4313      	orrs	r3, r2
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f023 0307 	bic.w	r3, r3, #7
 800144e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	2b04      	cmp	r3, #4
 8001460:	d117      	bne.n	8001492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00e      	beq.n	8001492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fb01 	bl	8001a7c <DMA_CheckFifoParam>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800148e:	2301      	movs	r3, #1
 8001490:	e016      	b.n	80014c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fab8 	bl	8001a10 <DMA_CalcBaseAndBitshift>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a8:	223f      	movs	r2, #63	@ 0x3f
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	f010803f 	.word	0xf010803f

080014cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_DMA_Start_IT+0x26>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e040      	b.n	8001574 <HAL_DMA_Start_IT+0xa8>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d12f      	bne.n	8001566 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fa4a 	bl	80019b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001524:	223f      	movs	r2, #63	@ 0x3f
 8001526:	409a      	lsls	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0216 	orr.w	r2, r2, #22
 800153a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0208 	orr.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e005      	b.n	8001572 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800156e:	2302      	movs	r3, #2
 8001570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800158a:	f7ff fdd3 	bl	8001134 <HAL_GetTick>
 800158e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d008      	beq.n	80015ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2280      	movs	r2, #128	@ 0x80
 80015a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e052      	b.n	8001654 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0216 	bic.w	r2, r2, #22
 80015bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d103      	bne.n	80015de <HAL_DMA_Abort+0x62>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0208 	bic.w	r2, r2, #8
 80015ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fe:	e013      	b.n	8001628 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001600:	f7ff fd98 	bl	8001134 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b05      	cmp	r3, #5
 800160c:	d90c      	bls.n	8001628 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2220      	movs	r2, #32
 8001612:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e015      	b.n	8001654 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1e4      	bne.n	8001600 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163a:	223f      	movs	r2, #63	@ 0x3f
 800163c:	409a      	lsls	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d004      	beq.n	800167a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2280      	movs	r2, #128	@ 0x80
 8001674:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00c      	b.n	8001694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2205      	movs	r2, #5
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016ac:	4b8e      	ldr	r3, [pc, #568]	@ (80018e8 <HAL_DMA_IRQHandler+0x248>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a8e      	ldr	r2, [pc, #568]	@ (80018ec <HAL_DMA_IRQHandler+0x24c>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0a9b      	lsrs	r3, r3, #10
 80016b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ca:	2208      	movs	r2, #8
 80016cc:	409a      	lsls	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d01a      	beq.n	800170c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f8:	2208      	movs	r2, #8
 80016fa:	409a      	lsls	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001710:	2201      	movs	r2, #1
 8001712:	409a      	lsls	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d012      	beq.n	8001742 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172e:	2201      	movs	r2, #1
 8001730:	409a      	lsls	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173a:	f043 0202 	orr.w	r2, r3, #2
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001746:	2204      	movs	r2, #4
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d012      	beq.n	8001778 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001764:	2204      	movs	r2, #4
 8001766:	409a      	lsls	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	f043 0204 	orr.w	r2, r3, #4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	2210      	movs	r2, #16
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d043      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d03c      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	2210      	movs	r2, #16
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d018      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d108      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d024      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
 80017ce:	e01f      	b.n	8001810 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01b      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
 80017e0:	e016      	b.n	8001810 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d107      	bne.n	8001800 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0208 	bic.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001814:	2220      	movs	r2, #32
 8001816:	409a      	lsls	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 808f 	beq.w	8001940 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8087 	beq.w	8001940 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001836:	2220      	movs	r2, #32
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b05      	cmp	r3, #5
 8001848:	d136      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0216 	bic.w	r2, r2, #22
 8001858:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001868:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <HAL_DMA_IRQHandler+0x1da>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0208 	bic.w	r2, r2, #8
 8001888:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188e:	223f      	movs	r2, #63	@ 0x3f
 8001890:	409a      	lsls	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d07e      	beq.n	80019ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
        }
        return;
 80018b6:	e079      	b.n	80019ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01d      	beq.n	8001902 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10d      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d031      	beq.n	8001940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
 80018e4:	e02c      	b.n	8001940 <HAL_DMA_IRQHandler+0x2a0>
 80018e6:	bf00      	nop
 80018e8:	20000000 	.word	0x20000000
 80018ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d023      	beq.n	8001940 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
 8001900:	e01e      	b.n	8001940 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10f      	bne.n	8001930 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0210 	bic.w	r2, r2, #16
 800191e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	2b00      	cmp	r3, #0
 8001946:	d032      	beq.n	80019ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d022      	beq.n	800199a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2205      	movs	r2, #5
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3301      	adds	r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	d307      	bcc.n	8001988 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f2      	bne.n	800196c <HAL_DMA_IRQHandler+0x2cc>
 8001986:	e000      	b.n	800198a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001988:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
 80019aa:	e000      	b.n	80019ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80019ac:	bf00      	nop
    }
  }
}
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b40      	cmp	r3, #64	@ 0x40
 80019e0:	d108      	bne.n	80019f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019f2:	e007      	b.n	8001a04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	60da      	str	r2, [r3, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3b10      	subs	r3, #16
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <DMA_CalcBaseAndBitshift+0x64>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a2a:	4a13      	ldr	r2, [pc, #76]	@ (8001a78 <DMA_CalcBaseAndBitshift+0x68>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d909      	bls.n	8001a52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	1d1a      	adds	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a50:	e007      	b.n	8001a62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a5a:	f023 0303 	bic.w	r3, r3, #3
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	aaaaaaab 	.word	0xaaaaaaab
 8001a78:	08004d48 	.word	0x08004d48

08001a7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d11f      	bne.n	8001ad6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d856      	bhi.n	8001b4a <DMA_CheckFifoParam+0xce>
 8001a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa4 <DMA_CheckFifoParam+0x28>)
 8001a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa2:	bf00      	nop
 8001aa4:	08001ab5 	.word	0x08001ab5
 8001aa8:	08001ac7 	.word	0x08001ac7
 8001aac:	08001ab5 	.word	0x08001ab5
 8001ab0:	08001b4b 	.word	0x08001b4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d046      	beq.n	8001b4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac4:	e043      	b.n	8001b4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ace:	d140      	bne.n	8001b52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad4:	e03d      	b.n	8001b52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ade:	d121      	bne.n	8001b24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d837      	bhi.n	8001b56 <DMA_CheckFifoParam+0xda>
 8001ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aec <DMA_CheckFifoParam+0x70>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001afd 	.word	0x08001afd
 8001af0:	08001b03 	.word	0x08001b03
 8001af4:	08001afd 	.word	0x08001afd
 8001af8:	08001b15 	.word	0x08001b15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
      break;
 8001b00:	e030      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d025      	beq.n	8001b5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b12:	e022      	b.n	8001b5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b1c:	d11f      	bne.n	8001b5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b22:	e01c      	b.n	8001b5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d903      	bls.n	8001b32 <DMA_CheckFifoParam+0xb6>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d003      	beq.n	8001b38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b30:	e018      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
      break;
 8001b36:	e015      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00e      	beq.n	8001b62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      break;
 8001b48:	e00b      	b.n	8001b62 <DMA_CheckFifoParam+0xe6>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e00a      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
 8001b50:	e008      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
 8001b54:	e006      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b56:	bf00      	nop
 8001b58:	e004      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b5a:	bf00      	nop
 8001b5c:	e002      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b5e:	bf00      	nop
 8001b60:	e000      	b.n	8001b64 <DMA_CheckFifoParam+0xe8>
      break;
 8001b62:	bf00      	nop
    }
  } 
  
  return status; 
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e165      	b.n	8001e5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 8154 	bne.w	8001e56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80ae 	beq.w	8001e56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <HAL_GPIO_Init+0x300>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <HAL_GPIO_Init+0x300>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e74 <HAL_GPIO_Init+0x300>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a58      	ldr	r2, [pc, #352]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e7c <HAL_GPIO_Init+0x308>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d025      	beq.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4e      	ldr	r2, [pc, #312]	@ (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01f      	beq.n	8001d8a <HAL_GPIO_Init+0x216>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e84 <HAL_GPIO_Init+0x310>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d019      	beq.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4c      	ldr	r2, [pc, #304]	@ (8001e88 <HAL_GPIO_Init+0x314>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0x20e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e8c <HAL_GPIO_Init+0x318>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00d      	beq.n	8001d7e <HAL_GPIO_Init+0x20a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4a      	ldr	r2, [pc, #296]	@ (8001e90 <HAL_GPIO_Init+0x31c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <HAL_GPIO_Init+0x206>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a49      	ldr	r2, [pc, #292]	@ (8001e94 <HAL_GPIO_Init+0x320>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_GPIO_Init+0x202>
 8001d72:	2306      	movs	r3, #6
 8001d74:	e00c      	b.n	8001d90 <HAL_GPIO_Init+0x21c>
 8001d76:	2307      	movs	r3, #7
 8001d78:	e00a      	b.n	8001d90 <HAL_GPIO_Init+0x21c>
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	e008      	b.n	8001d90 <HAL_GPIO_Init+0x21c>
 8001d7e:	2304      	movs	r3, #4
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x21c>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x21c>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x21c>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x21c>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f002 0203 	and.w	r2, r2, #3
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da0:	4935      	ldr	r1, [pc, #212]	@ (8001e78 <HAL_GPIO_Init+0x304>)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a31      	ldr	r2, [pc, #196]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a26      	ldr	r2, [pc, #152]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e02:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e50:	4a11      	ldr	r2, [pc, #68]	@ (8001e98 <HAL_GPIO_Init+0x324>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	f67f ae96 	bls.w	8001b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40021400 	.word	0x40021400
 8001e94:	40021800 	.word	0x40021800
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0cc      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b68      	ldr	r3, [pc, #416]	@ (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d90c      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b65      	ldr	r3, [pc, #404]	@ (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	@ (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a58      	ldr	r2, [pc, #352]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a52      	ldr	r2, [pc, #328]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d044      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d119      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e06f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e067      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b37      	ldr	r3, [pc, #220]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4934      	ldr	r1, [pc, #208]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7ff f8b8 	bl	8001134 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff f8b4 	bl	8001134 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e04f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d20c      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002042:	4b12      	ldr	r3, [pc, #72]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f855 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	@ (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f818 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023c00 	.word	0x40023c00
 800208c:	40023800 	.word	0x40023800
 8002090:	08004d30 	.word	0x08004d30
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	@ (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08004d40 	.word	0x08004d40

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffdc 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0b5b      	lsrs	r3, r3, #13
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08004d40 	.word	0x08004d40

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002108:	b0ae      	sub	sp, #184	@ 0xb8
 800210a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800212a:	4bcb      	ldr	r3, [pc, #812]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b0c      	cmp	r3, #12
 8002134:	f200 8206 	bhi.w	8002544 <HAL_RCC_GetSysClockFreq+0x440>
 8002138:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <HAL_RCC_GetSysClockFreq+0x3c>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002175 	.word	0x08002175
 8002144:	08002545 	.word	0x08002545
 8002148:	08002545 	.word	0x08002545
 800214c:	08002545 	.word	0x08002545
 8002150:	0800217d 	.word	0x0800217d
 8002154:	08002545 	.word	0x08002545
 8002158:	08002545 	.word	0x08002545
 800215c:	08002545 	.word	0x08002545
 8002160:	08002185 	.word	0x08002185
 8002164:	08002545 	.word	0x08002545
 8002168:	08002545 	.word	0x08002545
 800216c:	08002545 	.word	0x08002545
 8002170:	08002375 	.word	0x08002375
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002174:	4bb9      	ldr	r3, [pc, #740]	@ (800245c <HAL_RCC_GetSysClockFreq+0x358>)
 8002176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800217a:	e1e7      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800217c:	4bb8      	ldr	r3, [pc, #736]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x35c>)
 800217e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002182:	e1e3      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002184:	4bb4      	ldr	r3, [pc, #720]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800218c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002190:	4bb1      	ldr	r3, [pc, #708]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d071      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219c:	4bae      	ldr	r3, [pc, #696]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021c2:	4622      	mov	r2, r4
 80021c4:	462b      	mov	r3, r5
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	0159      	lsls	r1, r3, #5
 80021d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d4:	0150      	lsls	r0, r2, #5
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4621      	mov	r1, r4
 80021dc:	1a51      	subs	r1, r2, r1
 80021de:	6439      	str	r1, [r7, #64]	@ 0x40
 80021e0:	4629      	mov	r1, r5
 80021e2:	eb63 0301 	sbc.w	r3, r3, r1
 80021e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80021f4:	4649      	mov	r1, r9
 80021f6:	018b      	lsls	r3, r1, #6
 80021f8:	4641      	mov	r1, r8
 80021fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021fe:	4641      	mov	r1, r8
 8002200:	018a      	lsls	r2, r1, #6
 8002202:	4641      	mov	r1, r8
 8002204:	1a51      	subs	r1, r2, r1
 8002206:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002208:	4649      	mov	r1, r9
 800220a:	eb63 0301 	sbc.w	r3, r3, r1
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800221c:	4649      	mov	r1, r9
 800221e:	00cb      	lsls	r3, r1, #3
 8002220:	4641      	mov	r1, r8
 8002222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002226:	4641      	mov	r1, r8
 8002228:	00ca      	lsls	r2, r1, #3
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	4603      	mov	r3, r0
 8002230:	4622      	mov	r2, r4
 8002232:	189b      	adds	r3, r3, r2
 8002234:	633b      	str	r3, [r7, #48]	@ 0x30
 8002236:	462b      	mov	r3, r5
 8002238:	460a      	mov	r2, r1
 800223a:	eb42 0303 	adc.w	r3, r2, r3
 800223e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800224c:	4629      	mov	r1, r5
 800224e:	024b      	lsls	r3, r1, #9
 8002250:	4621      	mov	r1, r4
 8002252:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002256:	4621      	mov	r1, r4
 8002258:	024a      	lsls	r2, r1, #9
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002262:	2200      	movs	r2, #0
 8002264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002268:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800226c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002270:	f7fe f81e 	bl	80002b0 <__aeabi_uldivmod>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4613      	mov	r3, r2
 800227a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800227e:	e067      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002280:	4b75      	ldr	r3, [pc, #468]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	2200      	movs	r2, #0
 8002288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800228c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002290:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800229a:	2300      	movs	r3, #0
 800229c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800229e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80022a2:	4622      	mov	r2, r4
 80022a4:	462b      	mov	r3, r5
 80022a6:	f04f 0000 	mov.w	r0, #0
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	0159      	lsls	r1, r3, #5
 80022b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b4:	0150      	lsls	r0, r2, #5
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4621      	mov	r1, r4
 80022bc:	1a51      	subs	r1, r2, r1
 80022be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022c0:	4629      	mov	r1, r5
 80022c2:	eb63 0301 	sbc.w	r3, r3, r1
 80022c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022d4:	4649      	mov	r1, r9
 80022d6:	018b      	lsls	r3, r1, #6
 80022d8:	4641      	mov	r1, r8
 80022da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022de:	4641      	mov	r1, r8
 80022e0:	018a      	lsls	r2, r1, #6
 80022e2:	4641      	mov	r1, r8
 80022e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80022e8:	4649      	mov	r1, r9
 80022ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002302:	4692      	mov	sl, r2
 8002304:	469b      	mov	fp, r3
 8002306:	4623      	mov	r3, r4
 8002308:	eb1a 0303 	adds.w	r3, sl, r3
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	462b      	mov	r3, r5
 8002310:	eb4b 0303 	adc.w	r3, fp, r3
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002322:	4629      	mov	r1, r5
 8002324:	028b      	lsls	r3, r1, #10
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800232c:	4621      	mov	r1, r4
 800232e:	028a      	lsls	r2, r1, #10
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002338:	2200      	movs	r2, #0
 800233a:	673b      	str	r3, [r7, #112]	@ 0x70
 800233c:	677a      	str	r2, [r7, #116]	@ 0x74
 800233e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002342:	f7fd ffb5 	bl	80002b0 <__aeabi_uldivmod>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4613      	mov	r3, r2
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002350:	4b41      	ldr	r3, [pc, #260]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002372:	e0eb      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002374:	4b38      	ldr	r3, [pc, #224]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002380:	4b35      	ldr	r3, [pc, #212]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d06b      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238c:	4b32      	ldr	r3, [pc, #200]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	2200      	movs	r2, #0
 8002394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002396:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800239a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239e:	663b      	str	r3, [r7, #96]	@ 0x60
 80023a0:	2300      	movs	r3, #0
 80023a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80023a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023a8:	4622      	mov	r2, r4
 80023aa:	462b      	mov	r3, r5
 80023ac:	f04f 0000 	mov.w	r0, #0
 80023b0:	f04f 0100 	mov.w	r1, #0
 80023b4:	0159      	lsls	r1, r3, #5
 80023b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ba:	0150      	lsls	r0, r2, #5
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4621      	mov	r1, r4
 80023c2:	1a51      	subs	r1, r2, r1
 80023c4:	61b9      	str	r1, [r7, #24]
 80023c6:	4629      	mov	r1, r5
 80023c8:	eb63 0301 	sbc.w	r3, r3, r1
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023da:	4659      	mov	r1, fp
 80023dc:	018b      	lsls	r3, r1, #6
 80023de:	4651      	mov	r1, sl
 80023e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023e4:	4651      	mov	r1, sl
 80023e6:	018a      	lsls	r2, r1, #6
 80023e8:	4651      	mov	r1, sl
 80023ea:	ebb2 0801 	subs.w	r8, r2, r1
 80023ee:	4659      	mov	r1, fp
 80023f0:	eb63 0901 	sbc.w	r9, r3, r1
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002400:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002404:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002408:	4690      	mov	r8, r2
 800240a:	4699      	mov	r9, r3
 800240c:	4623      	mov	r3, r4
 800240e:	eb18 0303 	adds.w	r3, r8, r3
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	462b      	mov	r3, r5
 8002416:	eb49 0303 	adc.w	r3, r9, r3
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002428:	4629      	mov	r1, r5
 800242a:	024b      	lsls	r3, r1, #9
 800242c:	4621      	mov	r1, r4
 800242e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002432:	4621      	mov	r1, r4
 8002434:	024a      	lsls	r2, r1, #9
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800243e:	2200      	movs	r2, #0
 8002440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002442:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002444:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002448:	f7fd ff32 	bl	80002b0 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002456:	e065      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x420>
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400
 8002460:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002464:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <HAL_RCC_GetSysClockFreq+0x458>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	2200      	movs	r2, #0
 800246c:	4618      	mov	r0, r3
 800246e:	4611      	mov	r1, r2
 8002470:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002474:	653b      	str	r3, [r7, #80]	@ 0x50
 8002476:	2300      	movs	r3, #0
 8002478:	657b      	str	r3, [r7, #84]	@ 0x54
 800247a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800247e:	4642      	mov	r2, r8
 8002480:	464b      	mov	r3, r9
 8002482:	f04f 0000 	mov.w	r0, #0
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002490:	0150      	lsls	r0, r2, #5
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4641      	mov	r1, r8
 8002498:	1a51      	subs	r1, r2, r1
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	4649      	mov	r1, r9
 800249e:	eb63 0301 	sbc.w	r3, r3, r1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024b0:	4659      	mov	r1, fp
 80024b2:	018b      	lsls	r3, r1, #6
 80024b4:	4651      	mov	r1, sl
 80024b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ba:	4651      	mov	r1, sl
 80024bc:	018a      	lsls	r2, r1, #6
 80024be:	4651      	mov	r1, sl
 80024c0:	1a54      	subs	r4, r2, r1
 80024c2:	4659      	mov	r1, fp
 80024c4:	eb63 0501 	sbc.w	r5, r3, r1
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	00eb      	lsls	r3, r5, #3
 80024d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024d6:	00e2      	lsls	r2, r4, #3
 80024d8:	4614      	mov	r4, r2
 80024da:	461d      	mov	r5, r3
 80024dc:	4643      	mov	r3, r8
 80024de:	18e3      	adds	r3, r4, r3
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	464b      	mov	r3, r9
 80024e4:	eb45 0303 	adc.w	r3, r5, r3
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024f6:	4629      	mov	r1, r5
 80024f8:	028b      	lsls	r3, r1, #10
 80024fa:	4621      	mov	r1, r4
 80024fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002500:	4621      	mov	r1, r4
 8002502:	028a      	lsls	r2, r1, #10
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250c:	2200      	movs	r2, #0
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002510:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002512:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002516:	f7fd fecb 	bl	80002b0 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4613      	mov	r3, r2
 8002520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002524:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <HAL_RCC_GetSysClockFreq+0x458>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	0f1b      	lsrs	r3, r3, #28
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002542:	e003      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800254a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002550:	4618      	mov	r0, r3
 8002552:	37b8      	adds	r7, #184	@ 0xb8
 8002554:	46bd      	mov	sp, r7
 8002556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	00f42400 	.word	0x00f42400

08002564 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e28d      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8083 	beq.w	800268a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002584:	4b94      	ldr	r3, [pc, #592]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b04      	cmp	r3, #4
 800258e:	d019      	beq.n	80025c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002590:	4b91      	ldr	r3, [pc, #580]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
        || \
 8002598:	2b08      	cmp	r3, #8
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800259c:	4b8e      	ldr	r3, [pc, #568]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025a8:	d00c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025aa:	4b8b      	ldr	r3, [pc, #556]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d112      	bne.n	80025dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b6:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c2:	d10b      	bne.n	80025dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	4b84      	ldr	r3, [pc, #528]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05b      	beq.n	8002688 <HAL_RCC_OscConfig+0x124>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d157      	bne.n	8002688 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e25a      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e4:	d106      	bne.n	80025f4 <HAL_RCC_OscConfig+0x90>
 80025e6:	4b7c      	ldr	r3, [pc, #496]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a7b      	ldr	r2, [pc, #492]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xcc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0xb4>
 80025fe:	4b76      	ldr	r3, [pc, #472]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a75      	ldr	r2, [pc, #468]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b73      	ldr	r3, [pc, #460]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a72      	ldr	r2, [pc, #456]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xcc>
 8002618:	4b6f      	ldr	r3, [pc, #444]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6e      	ldr	r2, [pc, #440]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b6c      	ldr	r3, [pc, #432]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a6b      	ldr	r2, [pc, #428]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fd7c 	bl	8001134 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fd78 	bl	8001134 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	@ 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e21f      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b61      	ldr	r3, [pc, #388]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xdc>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fd68 	bl	8001134 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe fd64 	bl	8001134 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e20b      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x104>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d06f      	beq.n	8002776 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002696:	4b50      	ldr	r3, [pc, #320]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d017      	beq.n	80026d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026a2:	4b4d      	ldr	r3, [pc, #308]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026ae:	4b4a      	ldr	r3, [pc, #296]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b47      	ldr	r3, [pc, #284]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d11c      	bne.n	8002700 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b44      	ldr	r3, [pc, #272]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d116      	bne.n	8002700 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	4b41      	ldr	r3, [pc, #260]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_RCC_OscConfig+0x186>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1d3      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b3b      	ldr	r3, [pc, #236]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4937      	ldr	r1, [pc, #220]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	e03a      	b.n	8002776 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002708:	4b34      	ldr	r3, [pc, #208]	@ (80027dc <HAL_RCC_OscConfig+0x278>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fd11 	bl	8001134 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7fe fd0d 	bl	8001134 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1b4      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	4b2b      	ldr	r3, [pc, #172]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b28      	ldr	r3, [pc, #160]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4925      	ldr	r1, [pc, #148]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b24      	ldr	r3, [pc, #144]	@ (80027dc <HAL_RCC_OscConfig+0x278>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fcf0 	bl	8001134 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002758:	f7fe fcec 	bl	8001134 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e193      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d036      	beq.n	80027f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_RCC_OscConfig+0x27c>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fcd0 	bl	8001134 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe fccc 	bl	8001134 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e173      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCC_OscConfig+0x274>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x234>
 80027b6:	e01b      	b.n	80027f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b8:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fcb9 	bl	8001134 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	e00e      	b.n	80027e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fcb5 	bl	8001134 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d907      	bls.n	80027e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e15c      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	42470000 	.word	0x42470000
 80027e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ea      	bne.n	80027c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8097 	beq.w	800292c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b83      	ldr	r3, [pc, #524]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b7f      	ldr	r3, [pc, #508]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	4a7e      	ldr	r2, [pc, #504]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	@ 0x40
 800281e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b79      	ldr	r3, [pc, #484]	@ (8002a14 <HAL_RCC_OscConfig+0x4b0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283a:	4b76      	ldr	r3, [pc, #472]	@ (8002a14 <HAL_RCC_OscConfig+0x4b0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	@ (8002a14 <HAL_RCC_OscConfig+0x4b0>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7fe fc75 	bl	8001134 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7fe fc71 	bl	8001134 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e118      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	4b6c      	ldr	r3, [pc, #432]	@ (8002a14 <HAL_RCC_OscConfig+0x4b0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x31e>
 8002874:	4b66      	ldr	r3, [pc, #408]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a65      	ldr	r2, [pc, #404]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x358>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x340>
 800288a:	4b61      	ldr	r3, [pc, #388]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288e:	4a60      	ldr	r2, [pc, #384]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6713      	str	r3, [r2, #112]	@ 0x70
 8002896:	4b5e      	ldr	r3, [pc, #376]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a5d      	ldr	r2, [pc, #372]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0x358>
 80028a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a59      	ldr	r2, [pc, #356]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b0:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a56      	ldr	r2, [pc, #344]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fc36 	bl	8001134 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7fe fc32 	bl	8001134 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0d7      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ee      	beq.n	80028cc <HAL_RCC_OscConfig+0x368>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe fc20 	bl	8001134 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fc1c 	bl	8001134 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0c1      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ee      	bne.n	80028f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	4a3a      	ldr	r2, [pc, #232]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80ad 	beq.w	8002a90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002936:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b08      	cmp	r3, #8
 8002940:	d060      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d145      	bne.n	80029d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b33      	ldr	r3, [pc, #204]	@ (8002a18 <HAL_RCC_OscConfig+0x4b4>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fbf0 	bl	8001134 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fbec 	bl	8001134 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e093      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	071b      	lsls	r3, r3, #28
 80029a2:	491b      	ldr	r1, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x4b4>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fbc1 	bl	8001134 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fbbd 	bl	8001134 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e064      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x452>
 80029d4:	e05c      	b.n	8002a90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_RCC_OscConfig+0x4b4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fbaa 	bl	8001134 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe fba6 	bl	8001134 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04d      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x480>
 8002a02:	e045      	b.n	8002a90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e040      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <HAL_RCC_OscConfig+0x538>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d030      	beq.n	8002a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d129      	bne.n	8002a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d122      	bne.n	8002a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d119      	bne.n	8002a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	3b01      	subs	r3, #1
 8002a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d10f      	bne.n	8002a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e042      	b.n	8002b38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe f90c 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	@ 0x24
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 ff4f 	bl	8003988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	@ 0x28
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d175      	bne.n	8002c4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_UART_Transmit+0x2c>
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e06e      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2221      	movs	r2, #33	@ 0x21
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7e:	f7fe fad9 	bl	8001134 <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b98:	d108      	bne.n	8002bac <HAL_UART_Transmit+0x6c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e003      	b.n	8002bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bb4:	e02e      	b.n	8002c14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2180      	movs	r1, #128	@ 0x80
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fc27 	bl	8003414 <UART_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e03a      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e007      	b.n	8002c06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1cb      	bne.n	8002bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2140      	movs	r1, #64	@ 0x40
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fbf3 	bl	8003414 <UART_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e006      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d112      	bne.n	8002c96 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_UART_Receive_DMA+0x26>
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e00b      	b.n	8002c98 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fc1b 	bl	80034c8 <UART_Start_Receive_DMA>
 8002c92:	4603      	mov	r3, r0
 8002c94:	e000      	b.n	8002c98 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b0ba      	sub	sp, #232	@ 0xe8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_UART_IRQHandler+0x66>
 8002cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fd83 	bl	800380a <UART_Receive_IT>
      return;
 8002d04:	e25b      	b.n	80031be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80de 	beq.w	8002ecc <HAL_UART_IRQHandler+0x22c>
 8002d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80d1 	beq.w	8002ecc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_UART_IRQHandler+0xae>
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_UART_IRQHandler+0xd2>
 8002d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_UART_IRQHandler+0xf6>
 8002d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	f043 0204 	orr.w	r2, r3, #4
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d011      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x126>
 8002da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f043 0208 	orr.w	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 81f2 	beq.w	80031b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_UART_IRQHandler+0x14e>
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fd0e 	bl	800380a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df8:	2b40      	cmp	r3, #64	@ 0x40
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <HAL_UART_IRQHandler+0x17a>
 8002e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d04f      	beq.n	8002eba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fc16 	bl	800364c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2a:	2b40      	cmp	r3, #64	@ 0x40
 8002e2c:	d141      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3314      	adds	r3, #20
 8002e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1d9      	bne.n	8002e2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d013      	beq.n	8002eaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e86:	4a7e      	ldr	r2, [pc, #504]	@ (8003080 <HAL_UART_IRQHandler+0x3e0>)
 8002e88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fbe4 	bl	800165c <HAL_DMA_Abort_IT>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea8:	e00e      	b.n	8002ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f99e 	bl	80031ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	e00a      	b.n	8002ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f99a 	bl	80031ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb8:	e006      	b.n	8002ec8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f996 	bl	80031ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ec6:	e175      	b.n	80031b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	bf00      	nop
    return;
 8002eca:	e173      	b.n	80031b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	f040 814f 	bne.w	8003174 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8148 	beq.w	8003174 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8141 	beq.w	8003174 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f12:	2b40      	cmp	r3, #64	@ 0x40
 8002f14:	f040 80b6 	bne.w	8003084 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8145 	beq.w	80031b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f36:	429a      	cmp	r2, r3
 8002f38:	f080 813e 	bcs.w	80031b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f4e:	f000 8088 	beq.w	8003062 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1d9      	bne.n	8002f52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3314      	adds	r3, #20
 8002fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e1      	bne.n	8002f9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ffe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003000:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003004:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800300c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e3      	bne.n	8002fda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003032:	f023 0310 	bic.w	r3, r3, #16
 8003036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003044:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003046:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800304a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e3      	bne.n	8003020 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fa8d 	bl	800157c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003070:	b29b      	uxth	r3, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8c1 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800307e:	e09b      	b.n	80031b8 <HAL_UART_IRQHandler+0x518>
 8003080:	08003713 	.word	0x08003713
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800308c:	b29b      	uxth	r3, r3
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 808e 	beq.w	80031bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80030a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8089 	beq.w	80031bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80030d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e3      	bne.n	80030aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	623b      	str	r3, [r7, #32]
   return(result);
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003106:	633a      	str	r2, [r7, #48]	@ 0x30
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800310c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e3      	bne.n	80030e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	60fb      	str	r3, [r7, #12]
   return(result);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0310 	bic.w	r3, r3, #16
 800313e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800314c:	61fa      	str	r2, [r7, #28]
 800314e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	69b9      	ldr	r1, [r7, #24]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	617b      	str	r3, [r7, #20]
   return(result);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e3      	bne.n	8003128 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f847 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003172:	e023      	b.n	80031bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <HAL_UART_IRQHandler+0x4f4>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fad4 	bl	800373a <UART_Transmit_IT>
    return;
 8003192:	e014      	b.n	80031be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00e      	beq.n	80031be <HAL_UART_IRQHandler+0x51e>
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fb14 	bl	80037da <UART_EndTransmit_IT>
    return;
 80031b2:	e004      	b.n	80031be <HAL_UART_IRQHandler+0x51e>
    return;
 80031b4:	bf00      	nop
 80031b6:	e002      	b.n	80031be <HAL_UART_IRQHandler+0x51e>
      return;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <HAL_UART_IRQHandler+0x51e>
      return;
 80031bc:	bf00      	nop
  }
}
 80031be:	37e8      	adds	r7, #232	@ 0xe8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b09c      	sub	sp, #112	@ 0x70
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d172      	bne.n	800331a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003236:	2200      	movs	r2, #0
 8003238:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800323a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800324a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800324c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800325a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800325c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003260:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800327e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	667b      	str	r3, [r7, #100]	@ 0x64
 8003286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800328e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003290:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800329c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	623b      	str	r3, [r7, #32]
   return(result);
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3314      	adds	r3, #20
 80032c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e5      	bne.n	80032a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d119      	bne.n	800331a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f023 0310 	bic.w	r3, r3, #16
 80032fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003306:	61fa      	str	r2, [r7, #28]
 8003308:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	617b      	str	r3, [r7, #20]
   return(result);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800332a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800332c:	4619      	mov	r1, r3
 800332e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003330:	f7ff ff66 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003334:	e002      	b.n	800333c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003336:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003338:	f7fd f932 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 800333c:	bf00      	nop
 800333e:	3770      	adds	r7, #112	@ 0x70
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	4619      	mov	r1, r3
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ff48 	bl	8003200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003370:	e002      	b.n	8003378 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff30 	bl	80031d8 <HAL_UART_RxHalfCpltCallback>
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339c:	2b80      	cmp	r3, #128	@ 0x80
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b21      	cmp	r3, #33	@ 0x21
 80033b2:	d108      	bne.n	80033c6 <UART_DMAError+0x46>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f000 f91b 	bl	80035fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	2b40      	cmp	r3, #64	@ 0x40
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b22      	cmp	r3, #34	@ 0x22
 80033e6:	d108      	bne.n	80033fa <UART_DMAError+0x7a>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2200      	movs	r2, #0
 80033f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80033f4:	68b8      	ldr	r0, [r7, #8]
 80033f6:	f000 f929 	bl	800364c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f043 0210 	orr.w	r2, r3, #16
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003406:	68b8      	ldr	r0, [r7, #8]
 8003408:	f7ff fef0 	bl	80031ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003424:	e03b      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d037      	beq.n	800349e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342e:	f7fd fe81 	bl	8001134 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <UART_WaitOnFlagUntilTimeout+0x30>
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e03a      	b.n	80034be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d023      	beq.n	800349e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d020      	beq.n	800349e <UART_WaitOnFlagUntilTimeout+0x8a>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d01d      	beq.n	800349e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b08      	cmp	r3, #8
 800346e:	d116      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f8e0 	bl	800364c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2208      	movs	r2, #8
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00f      	b.n	80034be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4013      	ands	r3, r2
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d0b4      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b098      	sub	sp, #96	@ 0x60
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2222      	movs	r2, #34	@ 0x22
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	4a3e      	ldr	r2, [pc, #248]	@ (80035f0 <UART_Start_Receive_DMA+0x128>)
 80034f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	4a3d      	ldr	r2, [pc, #244]	@ (80035f4 <UART_Start_Receive_DMA+0x12c>)
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	4a3c      	ldr	r2, [pc, #240]	@ (80035f8 <UART_Start_Receive_DMA+0x130>)
 8003506:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	2200      	movs	r2, #0
 800350e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003510:	f107 0308 	add.w	r3, r7, #8
 8003514:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	f7fd ffd0 	bl	80014cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d019      	beq.n	800357e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800355a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800356a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800356c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3314      	adds	r3, #20
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	657b      	str	r3, [r7, #84]	@ 0x54
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800359e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80035a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e5      	bne.n	800357e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3314      	adds	r3, #20
 80035b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	617b      	str	r3, [r7, #20]
   return(result);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3314      	adds	r3, #20
 80035d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80035d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6a39      	ldr	r1, [r7, #32]
 80035d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	61fb      	str	r3, [r7, #28]
   return(result);
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3760      	adds	r7, #96	@ 0x60
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	08003219 	.word	0x08003219
 80035f4:	08003345 	.word	0x08003345
 80035f8:	08003381 	.word	0x08003381

080035fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	@ 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	60bb      	str	r3, [r7, #8]
   return(result);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	61ba      	str	r2, [r7, #24]
 8003626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	613b      	str	r3, [r7, #16]
   return(result);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003640:	bf00      	nop
 8003642:	3724      	adds	r7, #36	@ 0x24
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b095      	sub	sp, #84	@ 0x54
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800366a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003674:	643a      	str	r2, [r7, #64]	@ 0x40
 8003676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800367a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	61fb      	str	r3, [r7, #28]
   return(result);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3314      	adds	r3, #20
 80036a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d119      	bne.n	80036f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	647b      	str	r3, [r7, #68]	@ 0x44
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036e4:	61ba      	str	r2, [r7, #24]
 80036e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6979      	ldr	r1, [r7, #20]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	613b      	str	r3, [r7, #16]
   return(result);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e5      	bne.n	80036c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003706:	bf00      	nop
 8003708:	3754      	adds	r7, #84	@ 0x54
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff fd5d 	bl	80031ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b21      	cmp	r3, #33	@ 0x21
 800374c:	d13e      	bne.n	80037cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003756:	d114      	bne.n	8003782 <UART_Transmit_IT+0x48>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d110      	bne.n	8003782 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003774:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	e008      	b.n	8003794 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6211      	str	r1, [r2, #32]
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29b      	uxth	r3, r3
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4619      	mov	r1, r3
 80037a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fce2 	bl	80031c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b08c      	sub	sp, #48	@ 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b22      	cmp	r3, #34	@ 0x22
 800381c:	f040 80ae 	bne.w	800397c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003828:	d117      	bne.n	800385a <UART_Receive_IT+0x50>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d113      	bne.n	800385a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003848:	b29a      	uxth	r2, r3
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	1c9a      	adds	r2, r3, #2
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28
 8003858:	e026      	b.n	80038a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386c:	d007      	beq.n	800387e <UART_Receive_IT+0x74>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <UART_Receive_IT+0x82>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e008      	b.n	800389e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003898:	b2da      	uxtb	r2, r3
 800389a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4619      	mov	r1, r3
 80038b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d15d      	bne.n	8003978 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0220 	bic.w	r2, r2, #32
 80038ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d135      	bne.n	800396e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	613b      	str	r3, [r7, #16]
   return(result);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	623a      	str	r2, [r7, #32]
 800392a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	69f9      	ldr	r1, [r7, #28]
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	61bb      	str	r3, [r7, #24]
   return(result);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b10      	cmp	r3, #16
 8003948:	d10a      	bne.n	8003960 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fc4a 	bl	8003200 <HAL_UARTEx_RxEventCallback>
 800396c:	e002      	b.n	8003974 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fc fe16 	bl	80005a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e002      	b.n	800397e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3730      	adds	r7, #48	@ 0x30
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800398c:	b0c0      	sub	sp, #256	@ 0x100
 800398e:	af00      	add	r7, sp, #0
 8003990:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	ea40 0301 	orr.w	r3, r0, r1
 80039b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	431a      	orrs	r2, r3
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039e0:	f021 010c 	bic.w	r1, r1, #12
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039ee:	430b      	orrs	r3, r1
 80039f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a02:	6999      	ldr	r1, [r3, #24]
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	ea40 0301 	orr.w	r3, r0, r1
 8003a0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b8f      	ldr	r3, [pc, #572]	@ (8003c54 <UART_SetConfig+0x2cc>)
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d005      	beq.n	8003a28 <UART_SetConfig+0xa0>
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b8d      	ldr	r3, [pc, #564]	@ (8003c58 <UART_SetConfig+0x2d0>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d104      	bne.n	8003a32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a28:	f7fe fb58 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8003a2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a30:	e003      	b.n	8003a3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a32:	f7fe fb3f 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8003a36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a44:	f040 810c 	bne.w	8003c60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	1891      	adds	r1, r2, r2
 8003a60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a62:	415b      	adcs	r3, r3
 8003a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	eb12 0801 	adds.w	r8, r2, r1
 8003a70:	4629      	mov	r1, r5
 8003a72:	eb43 0901 	adc.w	r9, r3, r1
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8a:	4690      	mov	r8, r2
 8003a8c:	4699      	mov	r9, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	eb18 0303 	adds.w	r3, r8, r3
 8003a94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a98:	462b      	mov	r3, r5
 8003a9a:	eb49 0303 	adc.w	r3, r9, r3
 8003a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ab2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	18db      	adds	r3, r3, r3
 8003aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003abc:	4613      	mov	r3, r2
 8003abe:	eb42 0303 	adc.w	r3, r2, r3
 8003ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ac4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ac8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003acc:	f7fc fbf0 	bl	80002b0 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4b61      	ldr	r3, [pc, #388]	@ (8003c5c <UART_SetConfig+0x2d4>)
 8003ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	011c      	lsls	r4, r3, #4
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ae8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003aec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003af8:	415b      	adcs	r3, r3
 8003afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003afc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b00:	4641      	mov	r1, r8
 8003b02:	eb12 0a01 	adds.w	sl, r2, r1
 8003b06:	4649      	mov	r1, r9
 8003b08:	eb43 0b01 	adc.w	fp, r3, r1
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b20:	4692      	mov	sl, r2
 8003b22:	469b      	mov	fp, r3
 8003b24:	4643      	mov	r3, r8
 8003b26:	eb1a 0303 	adds.w	r3, sl, r3
 8003b2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	eb4b 0303 	adc.w	r3, fp, r3
 8003b34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	18db      	adds	r3, r3, r3
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b52:	4613      	mov	r3, r2
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b62:	f7fc fba5 	bl	80002b0 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c5c <UART_SetConfig+0x2d4>)
 8003b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2264      	movs	r2, #100	@ 0x64
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	1acb      	subs	r3, r1, r3
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b82:	4b36      	ldr	r3, [pc, #216]	@ (8003c5c <UART_SetConfig+0x2d4>)
 8003b84:	fba3 2302 	umull	r2, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b90:	441c      	add	r4, r3
 8003b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ba0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	1891      	adds	r1, r2, r2
 8003baa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bac:	415b      	adcs	r3, r3
 8003bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	1851      	adds	r1, r2, r1
 8003bb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bba:	4649      	mov	r1, r9
 8003bbc:	414b      	adcs	r3, r1
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bcc:	4659      	mov	r1, fp
 8003bce:	00cb      	lsls	r3, r1, #3
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	00ca      	lsls	r2, r1, #3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	4642      	mov	r2, r8
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003be8:	464b      	mov	r3, r9
 8003bea:	460a      	mov	r2, r1
 8003bec:	eb42 0303 	adc.w	r3, r2, r3
 8003bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c08:	460b      	mov	r3, r1
 8003c0a:	18db      	adds	r3, r3, r3
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c0e:	4613      	mov	r3, r2
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c1e:	f7fc fb47 	bl	80002b0 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <UART_SetConfig+0x2d4>)
 8003c28:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	2164      	movs	r1, #100	@ 0x64
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	3332      	adds	r3, #50	@ 0x32
 8003c3a:	4a08      	ldr	r2, [pc, #32]	@ (8003c5c <UART_SetConfig+0x2d4>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	f003 0207 	and.w	r2, r3, #7
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4422      	add	r2, r4
 8003c4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c50:	e106      	b.n	8003e60 <UART_SetConfig+0x4d8>
 8003c52:	bf00      	nop
 8003c54:	40011000 	.word	0x40011000
 8003c58:	40011400 	.word	0x40011400
 8003c5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c72:	4642      	mov	r2, r8
 8003c74:	464b      	mov	r3, r9
 8003c76:	1891      	adds	r1, r2, r2
 8003c78:	6239      	str	r1, [r7, #32]
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c82:	4641      	mov	r1, r8
 8003c84:	1854      	adds	r4, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb43 0501 	adc.w	r5, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	00eb      	lsls	r3, r5, #3
 8003c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c9a:	00e2      	lsls	r2, r4, #3
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	18e3      	adds	r3, r4, r3
 8003ca4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ca8:	464b      	mov	r3, r9
 8003caa:	eb45 0303 	adc.w	r3, r5, r3
 8003cae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cce:	4629      	mov	r1, r5
 8003cd0:	008b      	lsls	r3, r1, #2
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd8:	4621      	mov	r1, r4
 8003cda:	008a      	lsls	r2, r1, #2
 8003cdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ce0:	f7fc fae6 	bl	80002b0 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4b60      	ldr	r3, [pc, #384]	@ (8003e6c <UART_SetConfig+0x4e4>)
 8003cea:	fba3 2302 	umull	r2, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	011c      	lsls	r4, r3, #4
 8003cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	1891      	adds	r1, r2, r2
 8003d0a:	61b9      	str	r1, [r7, #24]
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d14:	4641      	mov	r1, r8
 8003d16:	1851      	adds	r1, r2, r1
 8003d18:	6139      	str	r1, [r7, #16]
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	414b      	adcs	r3, r1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	00cb      	lsls	r3, r1, #3
 8003d30:	4651      	mov	r1, sl
 8003d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d36:	4651      	mov	r1, sl
 8003d38:	00ca      	lsls	r2, r1, #3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4642      	mov	r2, r8
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d48:	464b      	mov	r3, r9
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	eb42 0303 	adc.w	r3, r2, r3
 8003d50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	008b      	lsls	r3, r1, #2
 8003d70:	4641      	mov	r1, r8
 8003d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d76:	4641      	mov	r1, r8
 8003d78:	008a      	lsls	r2, r1, #2
 8003d7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d7e:	f7fc fa97 	bl	80002b0 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	4b38      	ldr	r3, [pc, #224]	@ (8003e6c <UART_SetConfig+0x4e4>)
 8003d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2264      	movs	r2, #100	@ 0x64
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	1acb      	subs	r3, r1, r3
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	3332      	adds	r3, #50	@ 0x32
 8003d9c:	4a33      	ldr	r2, [pc, #204]	@ (8003e6c <UART_SetConfig+0x4e4>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da8:	441c      	add	r4, r3
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dae:	2200      	movs	r2, #0
 8003db0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003db2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003db4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	1891      	adds	r1, r2, r2
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	415b      	adcs	r3, r3
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dc8:	4641      	mov	r1, r8
 8003dca:	1851      	adds	r1, r2, r1
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	4649      	mov	r1, r9
 8003dd0:	414b      	adcs	r3, r1
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003de0:	4659      	mov	r1, fp
 8003de2:	00cb      	lsls	r3, r1, #3
 8003de4:	4651      	mov	r1, sl
 8003de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dea:	4651      	mov	r1, sl
 8003dec:	00ca      	lsls	r2, r1, #3
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	4642      	mov	r2, r8
 8003df6:	189b      	adds	r3, r3, r2
 8003df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	eb42 0303 	adc.w	r3, r2, r3
 8003e02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	008b      	lsls	r3, r1, #2
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e26:	4641      	mov	r1, r8
 8003e28:	008a      	lsls	r2, r1, #2
 8003e2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e2e:	f7fc fa3f 	bl	80002b0 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <UART_SetConfig+0x4e4>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	@ 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	3332      	adds	r3, #50	@ 0x32
 8003e4a:	4a08      	ldr	r2, [pc, #32]	@ (8003e6c <UART_SetConfig+0x4e4>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4422      	add	r2, r4
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e66:	46bd      	mov	sp, r7
 8003e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6c:	51eb851f 	.word	0x51eb851f

08003e70 <std>:
 8003e70:	2300      	movs	r3, #0
 8003e72:	b510      	push	{r4, lr}
 8003e74:	4604      	mov	r4, r0
 8003e76:	e9c0 3300 	strd	r3, r3, [r0]
 8003e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e7e:	6083      	str	r3, [r0, #8]
 8003e80:	8181      	strh	r1, [r0, #12]
 8003e82:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e84:	81c2      	strh	r2, [r0, #14]
 8003e86:	6183      	str	r3, [r0, #24]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	305c      	adds	r0, #92	@ 0x5c
 8003e8e:	f000 f906 	bl	800409e <memset>
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <std+0x58>)
 8003e94:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <std+0x5c>)
 8003e98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <std+0x60>)
 8003e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <std+0x64>)
 8003ea0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <std+0x68>)
 8003ea4:	6224      	str	r4, [r4, #32]
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	d006      	beq.n	8003eb8 <std+0x48>
 8003eaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003eae:	4294      	cmp	r4, r2
 8003eb0:	d002      	beq.n	8003eb8 <std+0x48>
 8003eb2:	33d0      	adds	r3, #208	@ 0xd0
 8003eb4:	429c      	cmp	r4, r3
 8003eb6:	d105      	bne.n	8003ec4 <std+0x54>
 8003eb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec0:	f000 b966 	b.w	8004190 <__retarget_lock_init_recursive>
 8003ec4:	bd10      	pop	{r4, pc}
 8003ec6:	bf00      	nop
 8003ec8:	08004019 	.word	0x08004019
 8003ecc:	0800403b 	.word	0x0800403b
 8003ed0:	08004073 	.word	0x08004073
 8003ed4:	08004097 	.word	0x08004097
 8003ed8:	200001e8 	.word	0x200001e8

08003edc <stdio_exit_handler>:
 8003edc:	4a02      	ldr	r2, [pc, #8]	@ (8003ee8 <stdio_exit_handler+0xc>)
 8003ede:	4903      	ldr	r1, [pc, #12]	@ (8003eec <stdio_exit_handler+0x10>)
 8003ee0:	4803      	ldr	r0, [pc, #12]	@ (8003ef0 <stdio_exit_handler+0x14>)
 8003ee2:	f000 b869 	b.w	8003fb8 <_fwalk_sglue>
 8003ee6:	bf00      	nop
 8003ee8:	2000000c 	.word	0x2000000c
 8003eec:	08004a31 	.word	0x08004a31
 8003ef0:	2000001c 	.word	0x2000001c

08003ef4 <cleanup_stdio>:
 8003ef4:	6841      	ldr	r1, [r0, #4]
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <cleanup_stdio+0x34>)
 8003ef8:	4299      	cmp	r1, r3
 8003efa:	b510      	push	{r4, lr}
 8003efc:	4604      	mov	r4, r0
 8003efe:	d001      	beq.n	8003f04 <cleanup_stdio+0x10>
 8003f00:	f000 fd96 	bl	8004a30 <_fflush_r>
 8003f04:	68a1      	ldr	r1, [r4, #8]
 8003f06:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <cleanup_stdio+0x38>)
 8003f08:	4299      	cmp	r1, r3
 8003f0a:	d002      	beq.n	8003f12 <cleanup_stdio+0x1e>
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 fd8f 	bl	8004a30 <_fflush_r>
 8003f12:	68e1      	ldr	r1, [r4, #12]
 8003f14:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <cleanup_stdio+0x3c>)
 8003f16:	4299      	cmp	r1, r3
 8003f18:	d004      	beq.n	8003f24 <cleanup_stdio+0x30>
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f20:	f000 bd86 	b.w	8004a30 <_fflush_r>
 8003f24:	bd10      	pop	{r4, pc}
 8003f26:	bf00      	nop
 8003f28:	200001e8 	.word	0x200001e8
 8003f2c:	20000250 	.word	0x20000250
 8003f30:	200002b8 	.word	0x200002b8

08003f34 <global_stdio_init.part.0>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <global_stdio_init.part.0+0x30>)
 8003f38:	4c0b      	ldr	r4, [pc, #44]	@ (8003f68 <global_stdio_init.part.0+0x34>)
 8003f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f6c <global_stdio_init.part.0+0x38>)
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	2200      	movs	r2, #0
 8003f42:	2104      	movs	r1, #4
 8003f44:	f7ff ff94 	bl	8003e70 <std>
 8003f48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2109      	movs	r1, #9
 8003f50:	f7ff ff8e 	bl	8003e70 <std>
 8003f54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f58:	2202      	movs	r2, #2
 8003f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5e:	2112      	movs	r1, #18
 8003f60:	f7ff bf86 	b.w	8003e70 <std>
 8003f64:	20000320 	.word	0x20000320
 8003f68:	200001e8 	.word	0x200001e8
 8003f6c:	08003edd 	.word	0x08003edd

08003f70 <__sfp_lock_acquire>:
 8003f70:	4801      	ldr	r0, [pc, #4]	@ (8003f78 <__sfp_lock_acquire+0x8>)
 8003f72:	f000 b90e 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8003f76:	bf00      	nop
 8003f78:	20000329 	.word	0x20000329

08003f7c <__sfp_lock_release>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	@ (8003f84 <__sfp_lock_release+0x8>)
 8003f7e:	f000 b909 	b.w	8004194 <__retarget_lock_release_recursive>
 8003f82:	bf00      	nop
 8003f84:	20000329 	.word	0x20000329

08003f88 <__sinit>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	f7ff fff0 	bl	8003f70 <__sfp_lock_acquire>
 8003f90:	6a23      	ldr	r3, [r4, #32]
 8003f92:	b11b      	cbz	r3, 8003f9c <__sinit+0x14>
 8003f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f98:	f7ff bff0 	b.w	8003f7c <__sfp_lock_release>
 8003f9c:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <__sinit+0x28>)
 8003f9e:	6223      	str	r3, [r4, #32]
 8003fa0:	4b04      	ldr	r3, [pc, #16]	@ (8003fb4 <__sinit+0x2c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f5      	bne.n	8003f94 <__sinit+0xc>
 8003fa8:	f7ff ffc4 	bl	8003f34 <global_stdio_init.part.0>
 8003fac:	e7f2      	b.n	8003f94 <__sinit+0xc>
 8003fae:	bf00      	nop
 8003fb0:	08003ef5 	.word	0x08003ef5
 8003fb4:	20000320 	.word	0x20000320

08003fb8 <_fwalk_sglue>:
 8003fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fbc:	4607      	mov	r7, r0
 8003fbe:	4688      	mov	r8, r1
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8003fcc:	d505      	bpl.n	8003fda <_fwalk_sglue+0x22>
 8003fce:	6824      	ldr	r4, [r4, #0]
 8003fd0:	2c00      	cmp	r4, #0
 8003fd2:	d1f7      	bne.n	8003fc4 <_fwalk_sglue+0xc>
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fda:	89ab      	ldrh	r3, [r5, #12]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d907      	bls.n	8003ff0 <_fwalk_sglue+0x38>
 8003fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	d003      	beq.n	8003ff0 <_fwalk_sglue+0x38>
 8003fe8:	4629      	mov	r1, r5
 8003fea:	4638      	mov	r0, r7
 8003fec:	47c0      	blx	r8
 8003fee:	4306      	orrs	r6, r0
 8003ff0:	3568      	adds	r5, #104	@ 0x68
 8003ff2:	e7e9      	b.n	8003fc8 <_fwalk_sglue+0x10>

08003ff4 <iprintf>:
 8003ff4:	b40f      	push	{r0, r1, r2, r3}
 8003ff6:	b507      	push	{r0, r1, r2, lr}
 8003ff8:	4906      	ldr	r1, [pc, #24]	@ (8004014 <iprintf+0x20>)
 8003ffa:	ab04      	add	r3, sp, #16
 8003ffc:	6808      	ldr	r0, [r1, #0]
 8003ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004002:	6881      	ldr	r1, [r0, #8]
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	f000 f9e9 	bl	80043dc <_vfiprintf_r>
 800400a:	b003      	add	sp, #12
 800400c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004010:	b004      	add	sp, #16
 8004012:	4770      	bx	lr
 8004014:	20000018 	.word	0x20000018

08004018 <__sread>:
 8004018:	b510      	push	{r4, lr}
 800401a:	460c      	mov	r4, r1
 800401c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004020:	f000 f868 	bl	80040f4 <_read_r>
 8004024:	2800      	cmp	r0, #0
 8004026:	bfab      	itete	ge
 8004028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800402a:	89a3      	ldrhlt	r3, [r4, #12]
 800402c:	181b      	addge	r3, r3, r0
 800402e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004032:	bfac      	ite	ge
 8004034:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004036:	81a3      	strhlt	r3, [r4, #12]
 8004038:	bd10      	pop	{r4, pc}

0800403a <__swrite>:
 800403a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	461f      	mov	r7, r3
 8004040:	898b      	ldrh	r3, [r1, #12]
 8004042:	05db      	lsls	r3, r3, #23
 8004044:	4605      	mov	r5, r0
 8004046:	460c      	mov	r4, r1
 8004048:	4616      	mov	r6, r2
 800404a:	d505      	bpl.n	8004058 <__swrite+0x1e>
 800404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004050:	2302      	movs	r3, #2
 8004052:	2200      	movs	r2, #0
 8004054:	f000 f83c 	bl	80040d0 <_lseek_r>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800405e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004062:	81a3      	strh	r3, [r4, #12]
 8004064:	4632      	mov	r2, r6
 8004066:	463b      	mov	r3, r7
 8004068:	4628      	mov	r0, r5
 800406a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800406e:	f000 b853 	b.w	8004118 <_write_r>

08004072 <__sseek>:
 8004072:	b510      	push	{r4, lr}
 8004074:	460c      	mov	r4, r1
 8004076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407a:	f000 f829 	bl	80040d0 <_lseek_r>
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	bf15      	itete	ne
 8004084:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800408a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800408e:	81a3      	strheq	r3, [r4, #12]
 8004090:	bf18      	it	ne
 8004092:	81a3      	strhne	r3, [r4, #12]
 8004094:	bd10      	pop	{r4, pc}

08004096 <__sclose>:
 8004096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800409a:	f000 b809 	b.w	80040b0 <_close_r>

0800409e <memset>:
 800409e:	4402      	add	r2, r0
 80040a0:	4603      	mov	r3, r0
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d100      	bne.n	80040a8 <memset+0xa>
 80040a6:	4770      	bx	lr
 80040a8:	f803 1b01 	strb.w	r1, [r3], #1
 80040ac:	e7f9      	b.n	80040a2 <memset+0x4>
	...

080040b0 <_close_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d06      	ldr	r5, [pc, #24]	@ (80040cc <_close_r+0x1c>)
 80040b4:	2300      	movs	r3, #0
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7fc ff2d 	bl	8000f1a <_close>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_close_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_close_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000324 	.word	0x20000324

080040d0 <_lseek_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4d07      	ldr	r5, [pc, #28]	@ (80040f0 <_lseek_r+0x20>)
 80040d4:	4604      	mov	r4, r0
 80040d6:	4608      	mov	r0, r1
 80040d8:	4611      	mov	r1, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	602a      	str	r2, [r5, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7fc ff42 	bl	8000f68 <_lseek>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_lseek_r+0x1e>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_lseek_r+0x1e>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000324 	.word	0x20000324

080040f4 <_read_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4d07      	ldr	r5, [pc, #28]	@ (8004114 <_read_r+0x20>)
 80040f8:	4604      	mov	r4, r0
 80040fa:	4608      	mov	r0, r1
 80040fc:	4611      	mov	r1, r2
 80040fe:	2200      	movs	r2, #0
 8004100:	602a      	str	r2, [r5, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f7fc feec 	bl	8000ee0 <_read>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_read_r+0x1e>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_read_r+0x1e>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	20000324 	.word	0x20000324

08004118 <_write_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d07      	ldr	r5, [pc, #28]	@ (8004138 <_write_r+0x20>)
 800411c:	4604      	mov	r4, r0
 800411e:	4608      	mov	r0, r1
 8004120:	4611      	mov	r1, r2
 8004122:	2200      	movs	r2, #0
 8004124:	602a      	str	r2, [r5, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fc fd98 	bl	8000c5c <_write>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_write_r+0x1e>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_write_r+0x1e>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000324 	.word	0x20000324

0800413c <__errno>:
 800413c:	4b01      	ldr	r3, [pc, #4]	@ (8004144 <__errno+0x8>)
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000018 	.word	0x20000018

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4d0d      	ldr	r5, [pc, #52]	@ (8004180 <__libc_init_array+0x38>)
 800414c:	4c0d      	ldr	r4, [pc, #52]	@ (8004184 <__libc_init_array+0x3c>)
 800414e:	1b64      	subs	r4, r4, r5
 8004150:	10a4      	asrs	r4, r4, #2
 8004152:	2600      	movs	r6, #0
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	4d0b      	ldr	r5, [pc, #44]	@ (8004188 <__libc_init_array+0x40>)
 800415a:	4c0c      	ldr	r4, [pc, #48]	@ (800418c <__libc_init_array+0x44>)
 800415c:	f000 fdb8 	bl	8004cd0 <_init>
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	2600      	movs	r6, #0
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	08004d8c 	.word	0x08004d8c
 8004184:	08004d8c 	.word	0x08004d8c
 8004188:	08004d8c 	.word	0x08004d8c
 800418c:	08004d90 	.word	0x08004d90

08004190 <__retarget_lock_init_recursive>:
 8004190:	4770      	bx	lr

08004192 <__retarget_lock_acquire_recursive>:
 8004192:	4770      	bx	lr

08004194 <__retarget_lock_release_recursive>:
 8004194:	4770      	bx	lr
	...

08004198 <_free_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4605      	mov	r5, r0
 800419c:	2900      	cmp	r1, #0
 800419e:	d041      	beq.n	8004224 <_free_r+0x8c>
 80041a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a4:	1f0c      	subs	r4, r1, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfb8      	it	lt
 80041aa:	18e4      	addlt	r4, r4, r3
 80041ac:	f000 f8e0 	bl	8004370 <__malloc_lock>
 80041b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004228 <_free_r+0x90>)
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	b933      	cbnz	r3, 80041c4 <_free_r+0x2c>
 80041b6:	6063      	str	r3, [r4, #4]
 80041b8:	6014      	str	r4, [r2, #0]
 80041ba:	4628      	mov	r0, r5
 80041bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041c0:	f000 b8dc 	b.w	800437c <__malloc_unlock>
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d908      	bls.n	80041da <_free_r+0x42>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	1821      	adds	r1, r4, r0
 80041cc:	428b      	cmp	r3, r1
 80041ce:	bf01      	itttt	eq
 80041d0:	6819      	ldreq	r1, [r3, #0]
 80041d2:	685b      	ldreq	r3, [r3, #4]
 80041d4:	1809      	addeq	r1, r1, r0
 80041d6:	6021      	streq	r1, [r4, #0]
 80041d8:	e7ed      	b.n	80041b6 <_free_r+0x1e>
 80041da:	461a      	mov	r2, r3
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	b10b      	cbz	r3, 80041e4 <_free_r+0x4c>
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d9fa      	bls.n	80041da <_free_r+0x42>
 80041e4:	6811      	ldr	r1, [r2, #0]
 80041e6:	1850      	adds	r0, r2, r1
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d10b      	bne.n	8004204 <_free_r+0x6c>
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	4401      	add	r1, r0
 80041f0:	1850      	adds	r0, r2, r1
 80041f2:	4283      	cmp	r3, r0
 80041f4:	6011      	str	r1, [r2, #0]
 80041f6:	d1e0      	bne.n	80041ba <_free_r+0x22>
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	6053      	str	r3, [r2, #4]
 80041fe:	4408      	add	r0, r1
 8004200:	6010      	str	r0, [r2, #0]
 8004202:	e7da      	b.n	80041ba <_free_r+0x22>
 8004204:	d902      	bls.n	800420c <_free_r+0x74>
 8004206:	230c      	movs	r3, #12
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	e7d6      	b.n	80041ba <_free_r+0x22>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf04      	itt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	6063      	str	r3, [r4, #4]
 800421a:	bf04      	itt	eq
 800421c:	1809      	addeq	r1, r1, r0
 800421e:	6021      	streq	r1, [r4, #0]
 8004220:	6054      	str	r4, [r2, #4]
 8004222:	e7ca      	b.n	80041ba <_free_r+0x22>
 8004224:	bd38      	pop	{r3, r4, r5, pc}
 8004226:	bf00      	nop
 8004228:	20000330 	.word	0x20000330

0800422c <sbrk_aligned>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4e0f      	ldr	r6, [pc, #60]	@ (800426c <sbrk_aligned+0x40>)
 8004230:	460c      	mov	r4, r1
 8004232:	6831      	ldr	r1, [r6, #0]
 8004234:	4605      	mov	r5, r0
 8004236:	b911      	cbnz	r1, 800423e <sbrk_aligned+0x12>
 8004238:	f000 fcb6 	bl	8004ba8 <_sbrk_r>
 800423c:	6030      	str	r0, [r6, #0]
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 fcb1 	bl	8004ba8 <_sbrk_r>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	d103      	bne.n	8004252 <sbrk_aligned+0x26>
 800424a:	f04f 34ff 	mov.w	r4, #4294967295
 800424e:	4620      	mov	r0, r4
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	1cc4      	adds	r4, r0, #3
 8004254:	f024 0403 	bic.w	r4, r4, #3
 8004258:	42a0      	cmp	r0, r4
 800425a:	d0f8      	beq.n	800424e <sbrk_aligned+0x22>
 800425c:	1a21      	subs	r1, r4, r0
 800425e:	4628      	mov	r0, r5
 8004260:	f000 fca2 	bl	8004ba8 <_sbrk_r>
 8004264:	3001      	adds	r0, #1
 8004266:	d1f2      	bne.n	800424e <sbrk_aligned+0x22>
 8004268:	e7ef      	b.n	800424a <sbrk_aligned+0x1e>
 800426a:	bf00      	nop
 800426c:	2000032c 	.word	0x2000032c

08004270 <_malloc_r>:
 8004270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004274:	1ccd      	adds	r5, r1, #3
 8004276:	f025 0503 	bic.w	r5, r5, #3
 800427a:	3508      	adds	r5, #8
 800427c:	2d0c      	cmp	r5, #12
 800427e:	bf38      	it	cc
 8004280:	250c      	movcc	r5, #12
 8004282:	2d00      	cmp	r5, #0
 8004284:	4606      	mov	r6, r0
 8004286:	db01      	blt.n	800428c <_malloc_r+0x1c>
 8004288:	42a9      	cmp	r1, r5
 800428a:	d904      	bls.n	8004296 <_malloc_r+0x26>
 800428c:	230c      	movs	r3, #12
 800428e:	6033      	str	r3, [r6, #0]
 8004290:	2000      	movs	r0, #0
 8004292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800436c <_malloc_r+0xfc>
 800429a:	f000 f869 	bl	8004370 <__malloc_lock>
 800429e:	f8d8 3000 	ldr.w	r3, [r8]
 80042a2:	461c      	mov	r4, r3
 80042a4:	bb44      	cbnz	r4, 80042f8 <_malloc_r+0x88>
 80042a6:	4629      	mov	r1, r5
 80042a8:	4630      	mov	r0, r6
 80042aa:	f7ff ffbf 	bl	800422c <sbrk_aligned>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	4604      	mov	r4, r0
 80042b2:	d158      	bne.n	8004366 <_malloc_r+0xf6>
 80042b4:	f8d8 4000 	ldr.w	r4, [r8]
 80042b8:	4627      	mov	r7, r4
 80042ba:	2f00      	cmp	r7, #0
 80042bc:	d143      	bne.n	8004346 <_malloc_r+0xd6>
 80042be:	2c00      	cmp	r4, #0
 80042c0:	d04b      	beq.n	800435a <_malloc_r+0xea>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	4639      	mov	r1, r7
 80042c6:	4630      	mov	r0, r6
 80042c8:	eb04 0903 	add.w	r9, r4, r3
 80042cc:	f000 fc6c 	bl	8004ba8 <_sbrk_r>
 80042d0:	4581      	cmp	r9, r0
 80042d2:	d142      	bne.n	800435a <_malloc_r+0xea>
 80042d4:	6821      	ldr	r1, [r4, #0]
 80042d6:	1a6d      	subs	r5, r5, r1
 80042d8:	4629      	mov	r1, r5
 80042da:	4630      	mov	r0, r6
 80042dc:	f7ff ffa6 	bl	800422c <sbrk_aligned>
 80042e0:	3001      	adds	r0, #1
 80042e2:	d03a      	beq.n	800435a <_malloc_r+0xea>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	442b      	add	r3, r5
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	f8d8 3000 	ldr.w	r3, [r8]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	bb62      	cbnz	r2, 800434c <_malloc_r+0xdc>
 80042f2:	f8c8 7000 	str.w	r7, [r8]
 80042f6:	e00f      	b.n	8004318 <_malloc_r+0xa8>
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	1b52      	subs	r2, r2, r5
 80042fc:	d420      	bmi.n	8004340 <_malloc_r+0xd0>
 80042fe:	2a0b      	cmp	r2, #11
 8004300:	d917      	bls.n	8004332 <_malloc_r+0xc2>
 8004302:	1961      	adds	r1, r4, r5
 8004304:	42a3      	cmp	r3, r4
 8004306:	6025      	str	r5, [r4, #0]
 8004308:	bf18      	it	ne
 800430a:	6059      	strne	r1, [r3, #4]
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	bf08      	it	eq
 8004310:	f8c8 1000 	streq.w	r1, [r8]
 8004314:	5162      	str	r2, [r4, r5]
 8004316:	604b      	str	r3, [r1, #4]
 8004318:	4630      	mov	r0, r6
 800431a:	f000 f82f 	bl	800437c <__malloc_unlock>
 800431e:	f104 000b 	add.w	r0, r4, #11
 8004322:	1d23      	adds	r3, r4, #4
 8004324:	f020 0007 	bic.w	r0, r0, #7
 8004328:	1ac2      	subs	r2, r0, r3
 800432a:	bf1c      	itt	ne
 800432c:	1a1b      	subne	r3, r3, r0
 800432e:	50a3      	strne	r3, [r4, r2]
 8004330:	e7af      	b.n	8004292 <_malloc_r+0x22>
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	42a3      	cmp	r3, r4
 8004336:	bf0c      	ite	eq
 8004338:	f8c8 2000 	streq.w	r2, [r8]
 800433c:	605a      	strne	r2, [r3, #4]
 800433e:	e7eb      	b.n	8004318 <_malloc_r+0xa8>
 8004340:	4623      	mov	r3, r4
 8004342:	6864      	ldr	r4, [r4, #4]
 8004344:	e7ae      	b.n	80042a4 <_malloc_r+0x34>
 8004346:	463c      	mov	r4, r7
 8004348:	687f      	ldr	r7, [r7, #4]
 800434a:	e7b6      	b.n	80042ba <_malloc_r+0x4a>
 800434c:	461a      	mov	r2, r3
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	d1fb      	bne.n	800434c <_malloc_r+0xdc>
 8004354:	2300      	movs	r3, #0
 8004356:	6053      	str	r3, [r2, #4]
 8004358:	e7de      	b.n	8004318 <_malloc_r+0xa8>
 800435a:	230c      	movs	r3, #12
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	4630      	mov	r0, r6
 8004360:	f000 f80c 	bl	800437c <__malloc_unlock>
 8004364:	e794      	b.n	8004290 <_malloc_r+0x20>
 8004366:	6005      	str	r5, [r0, #0]
 8004368:	e7d6      	b.n	8004318 <_malloc_r+0xa8>
 800436a:	bf00      	nop
 800436c:	20000330 	.word	0x20000330

08004370 <__malloc_lock>:
 8004370:	4801      	ldr	r0, [pc, #4]	@ (8004378 <__malloc_lock+0x8>)
 8004372:	f7ff bf0e 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	20000328 	.word	0x20000328

0800437c <__malloc_unlock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_unlock+0x8>)
 800437e:	f7ff bf09 	b.w	8004194 <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	20000328 	.word	0x20000328

08004388 <__sfputc_r>:
 8004388:	6893      	ldr	r3, [r2, #8]
 800438a:	3b01      	subs	r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	b410      	push	{r4}
 8004390:	6093      	str	r3, [r2, #8]
 8004392:	da08      	bge.n	80043a6 <__sfputc_r+0x1e>
 8004394:	6994      	ldr	r4, [r2, #24]
 8004396:	42a3      	cmp	r3, r4
 8004398:	db01      	blt.n	800439e <__sfputc_r+0x16>
 800439a:	290a      	cmp	r1, #10
 800439c:	d103      	bne.n	80043a6 <__sfputc_r+0x1e>
 800439e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a2:	f000 bb6d 	b.w	8004a80 <__swbuf_r>
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	1c58      	adds	r0, r3, #1
 80043aa:	6010      	str	r0, [r2, #0]
 80043ac:	7019      	strb	r1, [r3, #0]
 80043ae:	4608      	mov	r0, r1
 80043b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <__sfputs_r>:
 80043b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b8:	4606      	mov	r6, r0
 80043ba:	460f      	mov	r7, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	18d5      	adds	r5, r2, r3
 80043c0:	42ac      	cmp	r4, r5
 80043c2:	d101      	bne.n	80043c8 <__sfputs_r+0x12>
 80043c4:	2000      	movs	r0, #0
 80043c6:	e007      	b.n	80043d8 <__sfputs_r+0x22>
 80043c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043cc:	463a      	mov	r2, r7
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7ff ffda 	bl	8004388 <__sfputc_r>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d1f3      	bne.n	80043c0 <__sfputs_r+0xa>
 80043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043dc <_vfiprintf_r>:
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	460d      	mov	r5, r1
 80043e2:	b09d      	sub	sp, #116	@ 0x74
 80043e4:	4614      	mov	r4, r2
 80043e6:	4698      	mov	r8, r3
 80043e8:	4606      	mov	r6, r0
 80043ea:	b118      	cbz	r0, 80043f4 <_vfiprintf_r+0x18>
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	b90b      	cbnz	r3, 80043f4 <_vfiprintf_r+0x18>
 80043f0:	f7ff fdca 	bl	8003f88 <__sinit>
 80043f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043f6:	07d9      	lsls	r1, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_vfiprintf_r+0x2a>
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	059a      	lsls	r2, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_vfiprintf_r+0x2a>
 8004400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004402:	f7ff fec6 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	071b      	lsls	r3, r3, #28
 800440a:	d501      	bpl.n	8004410 <_vfiprintf_r+0x34>
 800440c:	692b      	ldr	r3, [r5, #16]
 800440e:	b99b      	cbnz	r3, 8004438 <_vfiprintf_r+0x5c>
 8004410:	4629      	mov	r1, r5
 8004412:	4630      	mov	r0, r6
 8004414:	f000 fb72 	bl	8004afc <__swsetup_r>
 8004418:	b170      	cbz	r0, 8004438 <_vfiprintf_r+0x5c>
 800441a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800441c:	07dc      	lsls	r4, r3, #31
 800441e:	d504      	bpl.n	800442a <_vfiprintf_r+0x4e>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	b01d      	add	sp, #116	@ 0x74
 8004426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	0598      	lsls	r0, r3, #22
 800442e:	d4f7      	bmi.n	8004420 <_vfiprintf_r+0x44>
 8004430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004432:	f7ff feaf 	bl	8004194 <__retarget_lock_release_recursive>
 8004436:	e7f3      	b.n	8004420 <_vfiprintf_r+0x44>
 8004438:	2300      	movs	r3, #0
 800443a:	9309      	str	r3, [sp, #36]	@ 0x24
 800443c:	2320      	movs	r3, #32
 800443e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004442:	f8cd 800c 	str.w	r8, [sp, #12]
 8004446:	2330      	movs	r3, #48	@ 0x30
 8004448:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045f8 <_vfiprintf_r+0x21c>
 800444c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004450:	f04f 0901 	mov.w	r9, #1
 8004454:	4623      	mov	r3, r4
 8004456:	469a      	mov	sl, r3
 8004458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445c:	b10a      	cbz	r2, 8004462 <_vfiprintf_r+0x86>
 800445e:	2a25      	cmp	r2, #37	@ 0x25
 8004460:	d1f9      	bne.n	8004456 <_vfiprintf_r+0x7a>
 8004462:	ebba 0b04 	subs.w	fp, sl, r4
 8004466:	d00b      	beq.n	8004480 <_vfiprintf_r+0xa4>
 8004468:	465b      	mov	r3, fp
 800446a:	4622      	mov	r2, r4
 800446c:	4629      	mov	r1, r5
 800446e:	4630      	mov	r0, r6
 8004470:	f7ff ffa1 	bl	80043b6 <__sfputs_r>
 8004474:	3001      	adds	r0, #1
 8004476:	f000 80a7 	beq.w	80045c8 <_vfiprintf_r+0x1ec>
 800447a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800447c:	445a      	add	r2, fp
 800447e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004480:	f89a 3000 	ldrb.w	r3, [sl]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 809f 	beq.w	80045c8 <_vfiprintf_r+0x1ec>
 800448a:	2300      	movs	r3, #0
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004494:	f10a 0a01 	add.w	sl, sl, #1
 8004498:	9304      	str	r3, [sp, #16]
 800449a:	9307      	str	r3, [sp, #28]
 800449c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80044a2:	4654      	mov	r4, sl
 80044a4:	2205      	movs	r2, #5
 80044a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044aa:	4853      	ldr	r0, [pc, #332]	@ (80045f8 <_vfiprintf_r+0x21c>)
 80044ac:	f7fb feb0 	bl	8000210 <memchr>
 80044b0:	9a04      	ldr	r2, [sp, #16]
 80044b2:	b9d8      	cbnz	r0, 80044ec <_vfiprintf_r+0x110>
 80044b4:	06d1      	lsls	r1, r2, #27
 80044b6:	bf44      	itt	mi
 80044b8:	2320      	movmi	r3, #32
 80044ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044be:	0713      	lsls	r3, r2, #28
 80044c0:	bf44      	itt	mi
 80044c2:	232b      	movmi	r3, #43	@ 0x2b
 80044c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c8:	f89a 3000 	ldrb.w	r3, [sl]
 80044cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ce:	d015      	beq.n	80044fc <_vfiprintf_r+0x120>
 80044d0:	9a07      	ldr	r2, [sp, #28]
 80044d2:	4654      	mov	r4, sl
 80044d4:	2000      	movs	r0, #0
 80044d6:	f04f 0c0a 	mov.w	ip, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e0:	3b30      	subs	r3, #48	@ 0x30
 80044e2:	2b09      	cmp	r3, #9
 80044e4:	d94b      	bls.n	800457e <_vfiprintf_r+0x1a2>
 80044e6:	b1b0      	cbz	r0, 8004516 <_vfiprintf_r+0x13a>
 80044e8:	9207      	str	r2, [sp, #28]
 80044ea:	e014      	b.n	8004516 <_vfiprintf_r+0x13a>
 80044ec:	eba0 0308 	sub.w	r3, r0, r8
 80044f0:	fa09 f303 	lsl.w	r3, r9, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	46a2      	mov	sl, r4
 80044fa:	e7d2      	b.n	80044a2 <_vfiprintf_r+0xc6>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	1d19      	adds	r1, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	9103      	str	r1, [sp, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	bfbb      	ittet	lt
 8004508:	425b      	neglt	r3, r3
 800450a:	f042 0202 	orrlt.w	r2, r2, #2
 800450e:	9307      	strge	r3, [sp, #28]
 8004510:	9307      	strlt	r3, [sp, #28]
 8004512:	bfb8      	it	lt
 8004514:	9204      	strlt	r2, [sp, #16]
 8004516:	7823      	ldrb	r3, [r4, #0]
 8004518:	2b2e      	cmp	r3, #46	@ 0x2e
 800451a:	d10a      	bne.n	8004532 <_vfiprintf_r+0x156>
 800451c:	7863      	ldrb	r3, [r4, #1]
 800451e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004520:	d132      	bne.n	8004588 <_vfiprintf_r+0x1ac>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9203      	str	r2, [sp, #12]
 800452a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800452e:	3402      	adds	r4, #2
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004608 <_vfiprintf_r+0x22c>
 8004536:	7821      	ldrb	r1, [r4, #0]
 8004538:	2203      	movs	r2, #3
 800453a:	4650      	mov	r0, sl
 800453c:	f7fb fe68 	bl	8000210 <memchr>
 8004540:	b138      	cbz	r0, 8004552 <_vfiprintf_r+0x176>
 8004542:	9b04      	ldr	r3, [sp, #16]
 8004544:	eba0 000a 	sub.w	r0, r0, sl
 8004548:	2240      	movs	r2, #64	@ 0x40
 800454a:	4082      	lsls	r2, r0
 800454c:	4313      	orrs	r3, r2
 800454e:	3401      	adds	r4, #1
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004556:	4829      	ldr	r0, [pc, #164]	@ (80045fc <_vfiprintf_r+0x220>)
 8004558:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800455c:	2206      	movs	r2, #6
 800455e:	f7fb fe57 	bl	8000210 <memchr>
 8004562:	2800      	cmp	r0, #0
 8004564:	d03f      	beq.n	80045e6 <_vfiprintf_r+0x20a>
 8004566:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <_vfiprintf_r+0x224>)
 8004568:	bb1b      	cbnz	r3, 80045b2 <_vfiprintf_r+0x1d6>
 800456a:	9b03      	ldr	r3, [sp, #12]
 800456c:	3307      	adds	r3, #7
 800456e:	f023 0307 	bic.w	r3, r3, #7
 8004572:	3308      	adds	r3, #8
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004578:	443b      	add	r3, r7
 800457a:	9309      	str	r3, [sp, #36]	@ 0x24
 800457c:	e76a      	b.n	8004454 <_vfiprintf_r+0x78>
 800457e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004582:	460c      	mov	r4, r1
 8004584:	2001      	movs	r0, #1
 8004586:	e7a8      	b.n	80044da <_vfiprintf_r+0xfe>
 8004588:	2300      	movs	r3, #0
 800458a:	3401      	adds	r4, #1
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	4619      	mov	r1, r3
 8004590:	f04f 0c0a 	mov.w	ip, #10
 8004594:	4620      	mov	r0, r4
 8004596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800459a:	3a30      	subs	r2, #48	@ 0x30
 800459c:	2a09      	cmp	r2, #9
 800459e:	d903      	bls.n	80045a8 <_vfiprintf_r+0x1cc>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0c6      	beq.n	8004532 <_vfiprintf_r+0x156>
 80045a4:	9105      	str	r1, [sp, #20]
 80045a6:	e7c4      	b.n	8004532 <_vfiprintf_r+0x156>
 80045a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ac:	4604      	mov	r4, r0
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7f0      	b.n	8004594 <_vfiprintf_r+0x1b8>
 80045b2:	ab03      	add	r3, sp, #12
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	462a      	mov	r2, r5
 80045b8:	4b12      	ldr	r3, [pc, #72]	@ (8004604 <_vfiprintf_r+0x228>)
 80045ba:	a904      	add	r1, sp, #16
 80045bc:	4630      	mov	r0, r6
 80045be:	f3af 8000 	nop.w
 80045c2:	4607      	mov	r7, r0
 80045c4:	1c78      	adds	r0, r7, #1
 80045c6:	d1d6      	bne.n	8004576 <_vfiprintf_r+0x19a>
 80045c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045ca:	07d9      	lsls	r1, r3, #31
 80045cc:	d405      	bmi.n	80045da <_vfiprintf_r+0x1fe>
 80045ce:	89ab      	ldrh	r3, [r5, #12]
 80045d0:	059a      	lsls	r2, r3, #22
 80045d2:	d402      	bmi.n	80045da <_vfiprintf_r+0x1fe>
 80045d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045d6:	f7ff fddd 	bl	8004194 <__retarget_lock_release_recursive>
 80045da:	89ab      	ldrh	r3, [r5, #12]
 80045dc:	065b      	lsls	r3, r3, #25
 80045de:	f53f af1f 	bmi.w	8004420 <_vfiprintf_r+0x44>
 80045e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045e4:	e71e      	b.n	8004424 <_vfiprintf_r+0x48>
 80045e6:	ab03      	add	r3, sp, #12
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	462a      	mov	r2, r5
 80045ec:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <_vfiprintf_r+0x228>)
 80045ee:	a904      	add	r1, sp, #16
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f879 	bl	80046e8 <_printf_i>
 80045f6:	e7e4      	b.n	80045c2 <_vfiprintf_r+0x1e6>
 80045f8:	08004d50 	.word	0x08004d50
 80045fc:	08004d5a 	.word	0x08004d5a
 8004600:	00000000 	.word	0x00000000
 8004604:	080043b7 	.word	0x080043b7
 8004608:	08004d56 	.word	0x08004d56

0800460c <_printf_common>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	4616      	mov	r6, r2
 8004612:	4698      	mov	r8, r3
 8004614:	688a      	ldr	r2, [r1, #8]
 8004616:	690b      	ldr	r3, [r1, #16]
 8004618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800461c:	4293      	cmp	r3, r2
 800461e:	bfb8      	it	lt
 8004620:	4613      	movlt	r3, r2
 8004622:	6033      	str	r3, [r6, #0]
 8004624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004628:	4607      	mov	r7, r0
 800462a:	460c      	mov	r4, r1
 800462c:	b10a      	cbz	r2, 8004632 <_printf_common+0x26>
 800462e:	3301      	adds	r3, #1
 8004630:	6033      	str	r3, [r6, #0]
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	0699      	lsls	r1, r3, #26
 8004636:	bf42      	ittt	mi
 8004638:	6833      	ldrmi	r3, [r6, #0]
 800463a:	3302      	addmi	r3, #2
 800463c:	6033      	strmi	r3, [r6, #0]
 800463e:	6825      	ldr	r5, [r4, #0]
 8004640:	f015 0506 	ands.w	r5, r5, #6
 8004644:	d106      	bne.n	8004654 <_printf_common+0x48>
 8004646:	f104 0a19 	add.w	sl, r4, #25
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	6832      	ldr	r2, [r6, #0]
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	42ab      	cmp	r3, r5
 8004652:	dc26      	bgt.n	80046a2 <_printf_common+0x96>
 8004654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004658:	6822      	ldr	r2, [r4, #0]
 800465a:	3b00      	subs	r3, #0
 800465c:	bf18      	it	ne
 800465e:	2301      	movne	r3, #1
 8004660:	0692      	lsls	r2, r2, #26
 8004662:	d42b      	bmi.n	80046bc <_printf_common+0xb0>
 8004664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004668:	4641      	mov	r1, r8
 800466a:	4638      	mov	r0, r7
 800466c:	47c8      	blx	r9
 800466e:	3001      	adds	r0, #1
 8004670:	d01e      	beq.n	80046b0 <_printf_common+0xa4>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	f003 0306 	and.w	r3, r3, #6
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf02      	ittt	eq
 800467e:	68e5      	ldreq	r5, [r4, #12]
 8004680:	6833      	ldreq	r3, [r6, #0]
 8004682:	1aed      	subeq	r5, r5, r3
 8004684:	68a3      	ldr	r3, [r4, #8]
 8004686:	bf0c      	ite	eq
 8004688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800468c:	2500      	movne	r5, #0
 800468e:	4293      	cmp	r3, r2
 8004690:	bfc4      	itt	gt
 8004692:	1a9b      	subgt	r3, r3, r2
 8004694:	18ed      	addgt	r5, r5, r3
 8004696:	2600      	movs	r6, #0
 8004698:	341a      	adds	r4, #26
 800469a:	42b5      	cmp	r5, r6
 800469c:	d11a      	bne.n	80046d4 <_printf_common+0xc8>
 800469e:	2000      	movs	r0, #0
 80046a0:	e008      	b.n	80046b4 <_printf_common+0xa8>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4641      	mov	r1, r8
 80046a8:	4638      	mov	r0, r7
 80046aa:	47c8      	blx	r9
 80046ac:	3001      	adds	r0, #1
 80046ae:	d103      	bne.n	80046b8 <_printf_common+0xac>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b8:	3501      	adds	r5, #1
 80046ba:	e7c6      	b.n	800464a <_printf_common+0x3e>
 80046bc:	18e1      	adds	r1, r4, r3
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	2030      	movs	r0, #48	@ 0x30
 80046c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046c6:	4422      	add	r2, r4
 80046c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046d0:	3302      	adds	r3, #2
 80046d2:	e7c7      	b.n	8004664 <_printf_common+0x58>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4622      	mov	r2, r4
 80046d8:	4641      	mov	r1, r8
 80046da:	4638      	mov	r0, r7
 80046dc:	47c8      	blx	r9
 80046de:	3001      	adds	r0, #1
 80046e0:	d0e6      	beq.n	80046b0 <_printf_common+0xa4>
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7d9      	b.n	800469a <_printf_common+0x8e>
	...

080046e8 <_printf_i>:
 80046e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	7e0f      	ldrb	r7, [r1, #24]
 80046ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046f0:	2f78      	cmp	r7, #120	@ 0x78
 80046f2:	4691      	mov	r9, r2
 80046f4:	4680      	mov	r8, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	469a      	mov	sl, r3
 80046fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046fe:	d807      	bhi.n	8004710 <_printf_i+0x28>
 8004700:	2f62      	cmp	r7, #98	@ 0x62
 8004702:	d80a      	bhi.n	800471a <_printf_i+0x32>
 8004704:	2f00      	cmp	r7, #0
 8004706:	f000 80d2 	beq.w	80048ae <_printf_i+0x1c6>
 800470a:	2f58      	cmp	r7, #88	@ 0x58
 800470c:	f000 80b9 	beq.w	8004882 <_printf_i+0x19a>
 8004710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004718:	e03a      	b.n	8004790 <_printf_i+0xa8>
 800471a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800471e:	2b15      	cmp	r3, #21
 8004720:	d8f6      	bhi.n	8004710 <_printf_i+0x28>
 8004722:	a101      	add	r1, pc, #4	@ (adr r1, 8004728 <_printf_i+0x40>)
 8004724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004728:	08004781 	.word	0x08004781
 800472c:	08004795 	.word	0x08004795
 8004730:	08004711 	.word	0x08004711
 8004734:	08004711 	.word	0x08004711
 8004738:	08004711 	.word	0x08004711
 800473c:	08004711 	.word	0x08004711
 8004740:	08004795 	.word	0x08004795
 8004744:	08004711 	.word	0x08004711
 8004748:	08004711 	.word	0x08004711
 800474c:	08004711 	.word	0x08004711
 8004750:	08004711 	.word	0x08004711
 8004754:	08004895 	.word	0x08004895
 8004758:	080047bf 	.word	0x080047bf
 800475c:	0800484f 	.word	0x0800484f
 8004760:	08004711 	.word	0x08004711
 8004764:	08004711 	.word	0x08004711
 8004768:	080048b7 	.word	0x080048b7
 800476c:	08004711 	.word	0x08004711
 8004770:	080047bf 	.word	0x080047bf
 8004774:	08004711 	.word	0x08004711
 8004778:	08004711 	.word	0x08004711
 800477c:	08004857 	.word	0x08004857
 8004780:	6833      	ldr	r3, [r6, #0]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6032      	str	r2, [r6, #0]
 8004788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800478c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004790:	2301      	movs	r3, #1
 8004792:	e09d      	b.n	80048d0 <_printf_i+0x1e8>
 8004794:	6833      	ldr	r3, [r6, #0]
 8004796:	6820      	ldr	r0, [r4, #0]
 8004798:	1d19      	adds	r1, r3, #4
 800479a:	6031      	str	r1, [r6, #0]
 800479c:	0606      	lsls	r6, r0, #24
 800479e:	d501      	bpl.n	80047a4 <_printf_i+0xbc>
 80047a0:	681d      	ldr	r5, [r3, #0]
 80047a2:	e003      	b.n	80047ac <_printf_i+0xc4>
 80047a4:	0645      	lsls	r5, r0, #25
 80047a6:	d5fb      	bpl.n	80047a0 <_printf_i+0xb8>
 80047a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047ac:	2d00      	cmp	r5, #0
 80047ae:	da03      	bge.n	80047b8 <_printf_i+0xd0>
 80047b0:	232d      	movs	r3, #45	@ 0x2d
 80047b2:	426d      	negs	r5, r5
 80047b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b8:	4859      	ldr	r0, [pc, #356]	@ (8004920 <_printf_i+0x238>)
 80047ba:	230a      	movs	r3, #10
 80047bc:	e011      	b.n	80047e2 <_printf_i+0xfa>
 80047be:	6821      	ldr	r1, [r4, #0]
 80047c0:	6833      	ldr	r3, [r6, #0]
 80047c2:	0608      	lsls	r0, r1, #24
 80047c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80047c8:	d402      	bmi.n	80047d0 <_printf_i+0xe8>
 80047ca:	0649      	lsls	r1, r1, #25
 80047cc:	bf48      	it	mi
 80047ce:	b2ad      	uxthmi	r5, r5
 80047d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80047d2:	4853      	ldr	r0, [pc, #332]	@ (8004920 <_printf_i+0x238>)
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	bf14      	ite	ne
 80047d8:	230a      	movne	r3, #10
 80047da:	2308      	moveq	r3, #8
 80047dc:	2100      	movs	r1, #0
 80047de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047e2:	6866      	ldr	r6, [r4, #4]
 80047e4:	60a6      	str	r6, [r4, #8]
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	bfa2      	ittt	ge
 80047ea:	6821      	ldrge	r1, [r4, #0]
 80047ec:	f021 0104 	bicge.w	r1, r1, #4
 80047f0:	6021      	strge	r1, [r4, #0]
 80047f2:	b90d      	cbnz	r5, 80047f8 <_printf_i+0x110>
 80047f4:	2e00      	cmp	r6, #0
 80047f6:	d04b      	beq.n	8004890 <_printf_i+0x1a8>
 80047f8:	4616      	mov	r6, r2
 80047fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80047fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004802:	5dc7      	ldrb	r7, [r0, r7]
 8004804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004808:	462f      	mov	r7, r5
 800480a:	42bb      	cmp	r3, r7
 800480c:	460d      	mov	r5, r1
 800480e:	d9f4      	bls.n	80047fa <_printf_i+0x112>
 8004810:	2b08      	cmp	r3, #8
 8004812:	d10b      	bne.n	800482c <_printf_i+0x144>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	07df      	lsls	r7, r3, #31
 8004818:	d508      	bpl.n	800482c <_printf_i+0x144>
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	6861      	ldr	r1, [r4, #4]
 800481e:	4299      	cmp	r1, r3
 8004820:	bfde      	ittt	le
 8004822:	2330      	movle	r3, #48	@ 0x30
 8004824:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004828:	f106 36ff 	addle.w	r6, r6, #4294967295
 800482c:	1b92      	subs	r2, r2, r6
 800482e:	6122      	str	r2, [r4, #16]
 8004830:	f8cd a000 	str.w	sl, [sp]
 8004834:	464b      	mov	r3, r9
 8004836:	aa03      	add	r2, sp, #12
 8004838:	4621      	mov	r1, r4
 800483a:	4640      	mov	r0, r8
 800483c:	f7ff fee6 	bl	800460c <_printf_common>
 8004840:	3001      	adds	r0, #1
 8004842:	d14a      	bne.n	80048da <_printf_i+0x1f2>
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	b004      	add	sp, #16
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	4833      	ldr	r0, [pc, #204]	@ (8004924 <_printf_i+0x23c>)
 8004858:	2778      	movs	r7, #120	@ 0x78
 800485a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	6831      	ldr	r1, [r6, #0]
 8004862:	061f      	lsls	r7, r3, #24
 8004864:	f851 5b04 	ldr.w	r5, [r1], #4
 8004868:	d402      	bmi.n	8004870 <_printf_i+0x188>
 800486a:	065f      	lsls	r7, r3, #25
 800486c:	bf48      	it	mi
 800486e:	b2ad      	uxthmi	r5, r5
 8004870:	6031      	str	r1, [r6, #0]
 8004872:	07d9      	lsls	r1, r3, #31
 8004874:	bf44      	itt	mi
 8004876:	f043 0320 	orrmi.w	r3, r3, #32
 800487a:	6023      	strmi	r3, [r4, #0]
 800487c:	b11d      	cbz	r5, 8004886 <_printf_i+0x19e>
 800487e:	2310      	movs	r3, #16
 8004880:	e7ac      	b.n	80047dc <_printf_i+0xf4>
 8004882:	4827      	ldr	r0, [pc, #156]	@ (8004920 <_printf_i+0x238>)
 8004884:	e7e9      	b.n	800485a <_printf_i+0x172>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	f023 0320 	bic.w	r3, r3, #32
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	e7f6      	b.n	800487e <_printf_i+0x196>
 8004890:	4616      	mov	r6, r2
 8004892:	e7bd      	b.n	8004810 <_printf_i+0x128>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	6825      	ldr	r5, [r4, #0]
 8004898:	6961      	ldr	r1, [r4, #20]
 800489a:	1d18      	adds	r0, r3, #4
 800489c:	6030      	str	r0, [r6, #0]
 800489e:	062e      	lsls	r6, r5, #24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	d501      	bpl.n	80048a8 <_printf_i+0x1c0>
 80048a4:	6019      	str	r1, [r3, #0]
 80048a6:	e002      	b.n	80048ae <_printf_i+0x1c6>
 80048a8:	0668      	lsls	r0, r5, #25
 80048aa:	d5fb      	bpl.n	80048a4 <_printf_i+0x1bc>
 80048ac:	8019      	strh	r1, [r3, #0]
 80048ae:	2300      	movs	r3, #0
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	4616      	mov	r6, r2
 80048b4:	e7bc      	b.n	8004830 <_printf_i+0x148>
 80048b6:	6833      	ldr	r3, [r6, #0]
 80048b8:	1d1a      	adds	r2, r3, #4
 80048ba:	6032      	str	r2, [r6, #0]
 80048bc:	681e      	ldr	r6, [r3, #0]
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	2100      	movs	r1, #0
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7fb fca4 	bl	8000210 <memchr>
 80048c8:	b108      	cbz	r0, 80048ce <_printf_i+0x1e6>
 80048ca:	1b80      	subs	r0, r0, r6
 80048cc:	6060      	str	r0, [r4, #4]
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	2300      	movs	r3, #0
 80048d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d8:	e7aa      	b.n	8004830 <_printf_i+0x148>
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	4632      	mov	r2, r6
 80048de:	4649      	mov	r1, r9
 80048e0:	4640      	mov	r0, r8
 80048e2:	47d0      	blx	sl
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0ad      	beq.n	8004844 <_printf_i+0x15c>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	079b      	lsls	r3, r3, #30
 80048ec:	d413      	bmi.n	8004916 <_printf_i+0x22e>
 80048ee:	68e0      	ldr	r0, [r4, #12]
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	4298      	cmp	r0, r3
 80048f4:	bfb8      	it	lt
 80048f6:	4618      	movlt	r0, r3
 80048f8:	e7a6      	b.n	8004848 <_printf_i+0x160>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4632      	mov	r2, r6
 80048fe:	4649      	mov	r1, r9
 8004900:	4640      	mov	r0, r8
 8004902:	47d0      	blx	sl
 8004904:	3001      	adds	r0, #1
 8004906:	d09d      	beq.n	8004844 <_printf_i+0x15c>
 8004908:	3501      	adds	r5, #1
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	9903      	ldr	r1, [sp, #12]
 800490e:	1a5b      	subs	r3, r3, r1
 8004910:	42ab      	cmp	r3, r5
 8004912:	dcf2      	bgt.n	80048fa <_printf_i+0x212>
 8004914:	e7eb      	b.n	80048ee <_printf_i+0x206>
 8004916:	2500      	movs	r5, #0
 8004918:	f104 0619 	add.w	r6, r4, #25
 800491c:	e7f5      	b.n	800490a <_printf_i+0x222>
 800491e:	bf00      	nop
 8004920:	08004d61 	.word	0x08004d61
 8004924:	08004d72 	.word	0x08004d72

08004928 <__sflush_r>:
 8004928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004930:	0716      	lsls	r6, r2, #28
 8004932:	4605      	mov	r5, r0
 8004934:	460c      	mov	r4, r1
 8004936:	d454      	bmi.n	80049e2 <__sflush_r+0xba>
 8004938:	684b      	ldr	r3, [r1, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	dc02      	bgt.n	8004944 <__sflush_r+0x1c>
 800493e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	dd48      	ble.n	80049d6 <__sflush_r+0xae>
 8004944:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004946:	2e00      	cmp	r6, #0
 8004948:	d045      	beq.n	80049d6 <__sflush_r+0xae>
 800494a:	2300      	movs	r3, #0
 800494c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004950:	682f      	ldr	r7, [r5, #0]
 8004952:	6a21      	ldr	r1, [r4, #32]
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	d030      	beq.n	80049ba <__sflush_r+0x92>
 8004958:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	0759      	lsls	r1, r3, #29
 800495e:	d505      	bpl.n	800496c <__sflush_r+0x44>
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004966:	b10b      	cbz	r3, 800496c <__sflush_r+0x44>
 8004968:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004970:	6a21      	ldr	r1, [r4, #32]
 8004972:	4628      	mov	r0, r5
 8004974:	47b0      	blx	r6
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	d106      	bne.n	800498a <__sflush_r+0x62>
 800497c:	6829      	ldr	r1, [r5, #0]
 800497e:	291d      	cmp	r1, #29
 8004980:	d82b      	bhi.n	80049da <__sflush_r+0xb2>
 8004982:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <__sflush_r+0x104>)
 8004984:	410a      	asrs	r2, r1
 8004986:	07d6      	lsls	r6, r2, #31
 8004988:	d427      	bmi.n	80049da <__sflush_r+0xb2>
 800498a:	2200      	movs	r2, #0
 800498c:	6062      	str	r2, [r4, #4]
 800498e:	04d9      	lsls	r1, r3, #19
 8004990:	6922      	ldr	r2, [r4, #16]
 8004992:	6022      	str	r2, [r4, #0]
 8004994:	d504      	bpl.n	80049a0 <__sflush_r+0x78>
 8004996:	1c42      	adds	r2, r0, #1
 8004998:	d101      	bne.n	800499e <__sflush_r+0x76>
 800499a:	682b      	ldr	r3, [r5, #0]
 800499c:	b903      	cbnz	r3, 80049a0 <__sflush_r+0x78>
 800499e:	6560      	str	r0, [r4, #84]	@ 0x54
 80049a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049a2:	602f      	str	r7, [r5, #0]
 80049a4:	b1b9      	cbz	r1, 80049d6 <__sflush_r+0xae>
 80049a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049aa:	4299      	cmp	r1, r3
 80049ac:	d002      	beq.n	80049b4 <__sflush_r+0x8c>
 80049ae:	4628      	mov	r0, r5
 80049b0:	f7ff fbf2 	bl	8004198 <_free_r>
 80049b4:	2300      	movs	r3, #0
 80049b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80049b8:	e00d      	b.n	80049d6 <__sflush_r+0xae>
 80049ba:	2301      	movs	r3, #1
 80049bc:	4628      	mov	r0, r5
 80049be:	47b0      	blx	r6
 80049c0:	4602      	mov	r2, r0
 80049c2:	1c50      	adds	r0, r2, #1
 80049c4:	d1c9      	bne.n	800495a <__sflush_r+0x32>
 80049c6:	682b      	ldr	r3, [r5, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0c6      	beq.n	800495a <__sflush_r+0x32>
 80049cc:	2b1d      	cmp	r3, #29
 80049ce:	d001      	beq.n	80049d4 <__sflush_r+0xac>
 80049d0:	2b16      	cmp	r3, #22
 80049d2:	d11e      	bne.n	8004a12 <__sflush_r+0xea>
 80049d4:	602f      	str	r7, [r5, #0]
 80049d6:	2000      	movs	r0, #0
 80049d8:	e022      	b.n	8004a20 <__sflush_r+0xf8>
 80049da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049de:	b21b      	sxth	r3, r3
 80049e0:	e01b      	b.n	8004a1a <__sflush_r+0xf2>
 80049e2:	690f      	ldr	r7, [r1, #16]
 80049e4:	2f00      	cmp	r7, #0
 80049e6:	d0f6      	beq.n	80049d6 <__sflush_r+0xae>
 80049e8:	0793      	lsls	r3, r2, #30
 80049ea:	680e      	ldr	r6, [r1, #0]
 80049ec:	bf08      	it	eq
 80049ee:	694b      	ldreq	r3, [r1, #20]
 80049f0:	600f      	str	r7, [r1, #0]
 80049f2:	bf18      	it	ne
 80049f4:	2300      	movne	r3, #0
 80049f6:	eba6 0807 	sub.w	r8, r6, r7
 80049fa:	608b      	str	r3, [r1, #8]
 80049fc:	f1b8 0f00 	cmp.w	r8, #0
 8004a00:	dde9      	ble.n	80049d6 <__sflush_r+0xae>
 8004a02:	6a21      	ldr	r1, [r4, #32]
 8004a04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a06:	4643      	mov	r3, r8
 8004a08:	463a      	mov	r2, r7
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b0      	blx	r6
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	dc08      	bgt.n	8004a24 <__sflush_r+0xfc>
 8004a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a24:	4407      	add	r7, r0
 8004a26:	eba8 0800 	sub.w	r8, r8, r0
 8004a2a:	e7e7      	b.n	80049fc <__sflush_r+0xd4>
 8004a2c:	dfbffffe 	.word	0xdfbffffe

08004a30 <_fflush_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	690b      	ldr	r3, [r1, #16]
 8004a34:	4605      	mov	r5, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	b913      	cbnz	r3, 8004a40 <_fflush_r+0x10>
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	b118      	cbz	r0, 8004a4a <_fflush_r+0x1a>
 8004a42:	6a03      	ldr	r3, [r0, #32]
 8004a44:	b90b      	cbnz	r3, 8004a4a <_fflush_r+0x1a>
 8004a46:	f7ff fa9f 	bl	8003f88 <__sinit>
 8004a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f3      	beq.n	8004a3a <_fflush_r+0xa>
 8004a52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a54:	07d0      	lsls	r0, r2, #31
 8004a56:	d404      	bmi.n	8004a62 <_fflush_r+0x32>
 8004a58:	0599      	lsls	r1, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_fflush_r+0x32>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a5e:	f7ff fb98 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004a62:	4628      	mov	r0, r5
 8004a64:	4621      	mov	r1, r4
 8004a66:	f7ff ff5f 	bl	8004928 <__sflush_r>
 8004a6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6c:	07da      	lsls	r2, r3, #31
 8004a6e:	4605      	mov	r5, r0
 8004a70:	d4e4      	bmi.n	8004a3c <_fflush_r+0xc>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	d4e1      	bmi.n	8004a3c <_fflush_r+0xc>
 8004a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7a:	f7ff fb8b 	bl	8004194 <__retarget_lock_release_recursive>
 8004a7e:	e7dd      	b.n	8004a3c <_fflush_r+0xc>

08004a80 <__swbuf_r>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	460e      	mov	r6, r1
 8004a84:	4614      	mov	r4, r2
 8004a86:	4605      	mov	r5, r0
 8004a88:	b118      	cbz	r0, 8004a92 <__swbuf_r+0x12>
 8004a8a:	6a03      	ldr	r3, [r0, #32]
 8004a8c:	b90b      	cbnz	r3, 8004a92 <__swbuf_r+0x12>
 8004a8e:	f7ff fa7b 	bl	8003f88 <__sinit>
 8004a92:	69a3      	ldr	r3, [r4, #24]
 8004a94:	60a3      	str	r3, [r4, #8]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	071a      	lsls	r2, r3, #28
 8004a9a:	d501      	bpl.n	8004aa0 <__swbuf_r+0x20>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	b943      	cbnz	r3, 8004ab2 <__swbuf_r+0x32>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 f82a 	bl	8004afc <__swsetup_r>
 8004aa8:	b118      	cbz	r0, 8004ab2 <__swbuf_r+0x32>
 8004aaa:	f04f 37ff 	mov.w	r7, #4294967295
 8004aae:	4638      	mov	r0, r7
 8004ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	6922      	ldr	r2, [r4, #16]
 8004ab6:	1a98      	subs	r0, r3, r2
 8004ab8:	6963      	ldr	r3, [r4, #20]
 8004aba:	b2f6      	uxtb	r6, r6
 8004abc:	4283      	cmp	r3, r0
 8004abe:	4637      	mov	r7, r6
 8004ac0:	dc05      	bgt.n	8004ace <__swbuf_r+0x4e>
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f7ff ffb3 	bl	8004a30 <_fflush_r>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d1ed      	bne.n	8004aaa <__swbuf_r+0x2a>
 8004ace:	68a3      	ldr	r3, [r4, #8]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	60a3      	str	r3, [r4, #8]
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	701e      	strb	r6, [r3, #0]
 8004adc:	6962      	ldr	r2, [r4, #20]
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d004      	beq.n	8004aee <__swbuf_r+0x6e>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	07db      	lsls	r3, r3, #31
 8004ae8:	d5e1      	bpl.n	8004aae <__swbuf_r+0x2e>
 8004aea:	2e0a      	cmp	r6, #10
 8004aec:	d1df      	bne.n	8004aae <__swbuf_r+0x2e>
 8004aee:	4621      	mov	r1, r4
 8004af0:	4628      	mov	r0, r5
 8004af2:	f7ff ff9d 	bl	8004a30 <_fflush_r>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d0d9      	beq.n	8004aae <__swbuf_r+0x2e>
 8004afa:	e7d6      	b.n	8004aaa <__swbuf_r+0x2a>

08004afc <__swsetup_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4b29      	ldr	r3, [pc, #164]	@ (8004ba4 <__swsetup_r+0xa8>)
 8004b00:	4605      	mov	r5, r0
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	460c      	mov	r4, r1
 8004b06:	b118      	cbz	r0, 8004b10 <__swsetup_r+0x14>
 8004b08:	6a03      	ldr	r3, [r0, #32]
 8004b0a:	b90b      	cbnz	r3, 8004b10 <__swsetup_r+0x14>
 8004b0c:	f7ff fa3c 	bl	8003f88 <__sinit>
 8004b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b14:	0719      	lsls	r1, r3, #28
 8004b16:	d422      	bmi.n	8004b5e <__swsetup_r+0x62>
 8004b18:	06da      	lsls	r2, r3, #27
 8004b1a:	d407      	bmi.n	8004b2c <__swsetup_r+0x30>
 8004b1c:	2209      	movs	r2, #9
 8004b1e:	602a      	str	r2, [r5, #0]
 8004b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2a:	e033      	b.n	8004b94 <__swsetup_r+0x98>
 8004b2c:	0758      	lsls	r0, r3, #29
 8004b2e:	d512      	bpl.n	8004b56 <__swsetup_r+0x5a>
 8004b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b32:	b141      	cbz	r1, 8004b46 <__swsetup_r+0x4a>
 8004b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <__swsetup_r+0x46>
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f7ff fb2b 	bl	8004198 <_free_r>
 8004b42:	2300      	movs	r3, #0
 8004b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	b94b      	cbnz	r3, 8004b76 <__swsetup_r+0x7a>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b6c:	d003      	beq.n	8004b76 <__swsetup_r+0x7a>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f84f 	bl	8004c14 <__smakebuf_r>
 8004b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7a:	f013 0201 	ands.w	r2, r3, #1
 8004b7e:	d00a      	beq.n	8004b96 <__swsetup_r+0x9a>
 8004b80:	2200      	movs	r2, #0
 8004b82:	60a2      	str	r2, [r4, #8]
 8004b84:	6962      	ldr	r2, [r4, #20]
 8004b86:	4252      	negs	r2, r2
 8004b88:	61a2      	str	r2, [r4, #24]
 8004b8a:	6922      	ldr	r2, [r4, #16]
 8004b8c:	b942      	cbnz	r2, 8004ba0 <__swsetup_r+0xa4>
 8004b8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b92:	d1c5      	bne.n	8004b20 <__swsetup_r+0x24>
 8004b94:	bd38      	pop	{r3, r4, r5, pc}
 8004b96:	0799      	lsls	r1, r3, #30
 8004b98:	bf58      	it	pl
 8004b9a:	6962      	ldrpl	r2, [r4, #20]
 8004b9c:	60a2      	str	r2, [r4, #8]
 8004b9e:	e7f4      	b.n	8004b8a <__swsetup_r+0x8e>
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e7f7      	b.n	8004b94 <__swsetup_r+0x98>
 8004ba4:	20000018 	.word	0x20000018

08004ba8 <_sbrk_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d06      	ldr	r5, [pc, #24]	@ (8004bc4 <_sbrk_r+0x1c>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	4604      	mov	r4, r0
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	f7fc f9e6 	bl	8000f84 <_sbrk>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_sbrk_r+0x1a>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_sbrk_r+0x1a>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20000324 	.word	0x20000324

08004bc8 <__swhatbuf_r>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	460c      	mov	r4, r1
 8004bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	b096      	sub	sp, #88	@ 0x58
 8004bd4:	4615      	mov	r5, r2
 8004bd6:	461e      	mov	r6, r3
 8004bd8:	da0d      	bge.n	8004bf6 <__swhatbuf_r+0x2e>
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	bf14      	ite	ne
 8004be6:	2340      	movne	r3, #64	@ 0x40
 8004be8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bec:	2000      	movs	r0, #0
 8004bee:	6031      	str	r1, [r6, #0]
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	b016      	add	sp, #88	@ 0x58
 8004bf4:	bd70      	pop	{r4, r5, r6, pc}
 8004bf6:	466a      	mov	r2, sp
 8004bf8:	f000 f848 	bl	8004c8c <_fstat_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	dbec      	blt.n	8004bda <__swhatbuf_r+0x12>
 8004c00:	9901      	ldr	r1, [sp, #4]
 8004c02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c0a:	4259      	negs	r1, r3
 8004c0c:	4159      	adcs	r1, r3
 8004c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c12:	e7eb      	b.n	8004bec <__swhatbuf_r+0x24>

08004c14 <__smakebuf_r>:
 8004c14:	898b      	ldrh	r3, [r1, #12]
 8004c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c18:	079d      	lsls	r5, r3, #30
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	d507      	bpl.n	8004c30 <__smakebuf_r+0x1c>
 8004c20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	6123      	str	r3, [r4, #16]
 8004c28:	2301      	movs	r3, #1
 8004c2a:	6163      	str	r3, [r4, #20]
 8004c2c:	b003      	add	sp, #12
 8004c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c30:	ab01      	add	r3, sp, #4
 8004c32:	466a      	mov	r2, sp
 8004c34:	f7ff ffc8 	bl	8004bc8 <__swhatbuf_r>
 8004c38:	9f00      	ldr	r7, [sp, #0]
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	4639      	mov	r1, r7
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f7ff fb16 	bl	8004270 <_malloc_r>
 8004c44:	b948      	cbnz	r0, 8004c5a <__smakebuf_r+0x46>
 8004c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4a:	059a      	lsls	r2, r3, #22
 8004c4c:	d4ee      	bmi.n	8004c2c <__smakebuf_r+0x18>
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	f043 0302 	orr.w	r3, r3, #2
 8004c56:	81a3      	strh	r3, [r4, #12]
 8004c58:	e7e2      	b.n	8004c20 <__smakebuf_r+0xc>
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	6020      	str	r0, [r4, #0]
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	9b01      	ldr	r3, [sp, #4]
 8004c66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c6a:	b15b      	cbz	r3, 8004c84 <__smakebuf_r+0x70>
 8004c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c70:	4630      	mov	r0, r6
 8004c72:	f000 f81d 	bl	8004cb0 <_isatty_r>
 8004c76:	b128      	cbz	r0, 8004c84 <__smakebuf_r+0x70>
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	431d      	orrs	r5, r3
 8004c88:	81a5      	strh	r5, [r4, #12]
 8004c8a:	e7cf      	b.n	8004c2c <__smakebuf_r+0x18>

08004c8c <_fstat_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d07      	ldr	r5, [pc, #28]	@ (8004cac <_fstat_r+0x20>)
 8004c90:	2300      	movs	r3, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	602b      	str	r3, [r5, #0]
 8004c9a:	f7fc f94a 	bl	8000f32 <_fstat>
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	d102      	bne.n	8004ca8 <_fstat_r+0x1c>
 8004ca2:	682b      	ldr	r3, [r5, #0]
 8004ca4:	b103      	cbz	r3, 8004ca8 <_fstat_r+0x1c>
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	bd38      	pop	{r3, r4, r5, pc}
 8004caa:	bf00      	nop
 8004cac:	20000324 	.word	0x20000324

08004cb0 <_isatty_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4d06      	ldr	r5, [pc, #24]	@ (8004ccc <_isatty_r+0x1c>)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	f7fc f949 	bl	8000f52 <_isatty>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_isatty_r+0x1a>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_isatty_r+0x1a>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	20000324 	.word	0x20000324

08004cd0 <_init>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr

08004cdc <_fini>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr
