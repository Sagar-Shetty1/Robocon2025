
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004528  08004528  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004530  08004530  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004530  08004530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004534  08004534  00005534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004538  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000068  080045a0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080045a0  00006290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009850  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2d  00000000  00000000  0000f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00011418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000625  00000000  00000000  00011c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dd2  00000000  00000000  00012255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abeb  00000000  00000000  00034027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca450  00000000  00000000  0003ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000275c  00000000  00000000  001090a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010b804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044a8 	.word	0x080044a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080044a8 	.word	0x080044a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fb08 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f822 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8d8 	bl	8000760 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f8b6 	bl	8000720 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f88a 	bl	80006cc <MX_USART2_UART_Init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		rxBuffer[9] = '\0';
		HAL_UART_Receive(&huart2, rxBuffer, 4, 1000);
 80005b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005bc:	2204      	movs	r2, #4
 80005be:	4908      	ldr	r1, [pc, #32]	@ (80005e0 <main+0x40>)
 80005c0:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <main+0x44>)
 80005c2:	f002 f884 	bl	80026ce <HAL_UART_Receive>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005c6:	2120      	movs	r1, #32
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <main+0x48>)
 80005ca:	f001 f9a2 	bl	8001912 <HAL_GPIO_TogglePin>
		printf("Data Received: %d\r\n", rxBuffer[1]);
 80005ce:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <main+0x40>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <main+0x4c>)
 80005d6:	f003 f8f9 	bl	80037cc <iprintf>
		HAL_UART_Receive(&huart2, rxBuffer, 4, 1000);
 80005da:	bf00      	nop
 80005dc:	e7ec      	b.n	80005b8 <main+0x18>
 80005de:	bf00      	nop
 80005e0:	2000012c 	.word	0x2000012c
 80005e4:	20000084 	.word	0x20000084
 80005e8:	40020000 	.word	0x40020000
 80005ec:	080044c0 	.word	0x080044c0

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2234      	movs	r2, #52	@ 0x34
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 f939 	bl	8003876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <SystemClock_Config+0xd4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <SystemClock_Config+0xd4>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800063c:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <SystemClock_Config+0xd8>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <SystemClock_Config+0xd8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000664:	2310      	movs	r3, #16
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fcac 	bl	8001fdc <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800068a:	f000 f8dd 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f94c 	bl	8001948 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006b6:	f000 f8c7 	bl	8000848 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	@ 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f001 ff08 	bl	8002518 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f89b 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000084 	.word	0x20000084
 800071c:	40004400 	.word	0x40004400

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a0b      	ldr	r2, [pc, #44]	@ (800075c <MX_DMA_Init+0x3c>)
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_DMA_Init+0x3c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2010      	movs	r0, #16
 8000748:	f000 fb83 	bl	8000e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800074c:	2010      	movs	r0, #16
 800074e:	f000 fb9c 	bl	8000e8a <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <MX_GPIO_Init+0xb4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <MX_GPIO_Init+0xb4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xb4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xb4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <MX_GPIO_Init+0xb4>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_GPIO_Init+0xb4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_GPIO_Init+0xb4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <MX_GPIO_Init+0xb4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_GPIO_Init+0xb4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_GPIO_Init+0xb4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_GPIO_Init+0xb4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_GPIO_Init+0xb4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <MX_GPIO_Init+0xb8>)
 80007ec:	f001 f878 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xb8>)
 8000808:	f000 fed6 	bl	80015b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000

0800081c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	b29a      	uxth	r2, r3
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	4804      	ldr	r0, [pc, #16]	@ (8000844 <_write+0x28>)
 8000834:	f001 fec0 	bl	80025b8 <HAL_UART_Transmit>
	return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000084 	.word	0x20000084

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <Error_Handler+0x8>

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000868:	6453      	str	r3, [r2, #68]	@ 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000892:	2007      	movs	r0, #7
 8000894:	f000 fad2 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a34      	ldr	r2, [pc, #208]	@ (8000994 <HAL_UART_MspInit+0xf0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d162      	bne.n	800098c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b33      	ldr	r3, [pc, #204]	@ (8000998 <HAL_UART_MspInit+0xf4>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a32      	ldr	r2, [pc, #200]	@ (8000998 <HAL_UART_MspInit+0xf4>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <HAL_UART_MspInit+0xf4>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <HAL_UART_MspInit+0xf4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000998 <HAL_UART_MspInit+0xf4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <HAL_UART_MspInit+0xf4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008fe:	230c      	movs	r3, #12
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090e:	2307      	movs	r3, #7
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4820      	ldr	r0, [pc, #128]	@ (800099c <HAL_UART_MspInit+0xf8>)
 800091a:	f000 fe4d 	bl	80015b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000920:	4a20      	ldr	r2, [pc, #128]	@ (80009a4 <HAL_UART_MspInit+0x100>)
 8000922:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000924:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000926:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800092a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092c:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 800093a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800093e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 800094e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000952:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000960:	480f      	ldr	r0, [pc, #60]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000962:	f000 faad 	bl	8000ec0 <HAL_DMA_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800096c:	f7ff ff6c 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000974:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_UART_MspInit+0xfc>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2026      	movs	r0, #38	@ 0x26
 8000982:	f000 fa66 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000986:	2026      	movs	r0, #38	@ 0x26
 8000988:	f000 fa7f 	bl	8000e8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40004400 	.word	0x40004400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	200000cc 	.word	0x200000cc
 80009a4:	40026088 	.word	0x40026088

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <UsageFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f92d 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <DMA1_Stream5_IRQHandler+0x10>)
 8000a0e:	f000 fb97 	bl	8001140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000cc 	.word	0x200000cc

08000a1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <USART2_IRQHandler+0x10>)
 8000a22:	f001 feeb 	bl	80027fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000084 	.word	0x20000084

08000a30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e00a      	b.n	8000a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a42:	f3af 8000 	nop.w
 8000a46:	4601      	mov	r1, r0
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf0      	blt.n	8000a42 <_read+0x12>
  }

  return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a92:	605a      	str	r2, [r3, #4]
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:

int _isatty(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	@ (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f002 ff06 	bl	8003914 <__errno>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20020000 	.word	0x20020000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	2000013c 	.word	0x2000013c
 8000b3c:	20000290 	.word	0x20000290

08000b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f002 fec5 	bl	8003920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fd03 	bl	80005a0 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba8:	08004538 	.word	0x08004538
  ldr r2, =_sbss
 8000bac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bb0:	20000290 	.word	0x20000290

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f92b 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe32 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f943 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f90b 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000140 	.word	0x20000140

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000140 	.word	0x20000140

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff29 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff3e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff31 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa2 	bl	8000df8 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff feda 	bl	8000c84 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e099      	b.n	8001010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000efc:	e00f      	b.n	8000f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000efe:	f7ff fec1 	bl	8000c84 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d908      	bls.n	8000f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e078      	b.n	8001010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e8      	bne.n	8000efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <HAL_DMA_Init+0x158>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d107      	bne.n	8000f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4313      	orrs	r3, r2
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f023 0307 	bic.w	r3, r3, #7
 8000f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00e      	beq.n	8000fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fa7b 	bl	80014c0 <DMA_CheckFifoParam>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2240      	movs	r2, #64	@ 0x40
 8000fd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e016      	b.n	8001010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fa32 	bl	8001454 <DMA_CalcBaseAndBitshift>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff8:	223f      	movs	r2, #63	@ 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	f010803f 	.word	0xf010803f

0800101c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001028:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800102a:	f7ff fe2b 	bl	8000c84 <HAL_GetTick>
 800102e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d008      	beq.n	800104e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2280      	movs	r2, #128	@ 0x80
 8001040:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e052      	b.n	80010f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0216 	bic.w	r2, r2, #22
 800105c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800106c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <HAL_DMA_Abort+0x62>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0208 	bic.w	r2, r2, #8
 800108c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800109e:	e013      	b.n	80010c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a0:	f7ff fdf0 	bl	8000c84 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d90c      	bls.n	80010c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2220      	movs	r2, #32
 80010b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e015      	b.n	80010f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e4      	bne.n	80010a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010da:	223f      	movs	r2, #63	@ 0x3f
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d004      	beq.n	800111a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00c      	b.n	8001134 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2205      	movs	r2, #5
 800111e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800114c:	4b8e      	ldr	r3, [pc, #568]	@ (8001388 <HAL_DMA_IRQHandler+0x248>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a8e      	ldr	r2, [pc, #568]	@ (800138c <HAL_DMA_IRQHandler+0x24c>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0a9b      	lsrs	r3, r3, #10
 8001158:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800116a:	2208      	movs	r2, #8
 800116c:	409a      	lsls	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d01a      	beq.n	80011ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0204 	bic.w	r2, r2, #4
 8001192:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001198:	2208      	movs	r2, #8
 800119a:	409a      	lsls	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b0:	2201      	movs	r2, #1
 80011b2:	409a      	lsls	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d012      	beq.n	80011e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ce:	2201      	movs	r2, #1
 80011d0:	409a      	lsls	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011da:	f043 0202 	orr.w	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e6:	2204      	movs	r2, #4
 80011e8:	409a      	lsls	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d012      	beq.n	8001218 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001204:	2204      	movs	r2, #4
 8001206:	409a      	lsls	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001210:	f043 0204 	orr.w	r2, r3, #4
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800121c:	2210      	movs	r2, #16
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d043      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d03c      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123a:	2210      	movs	r2, #16
 800123c:	409a      	lsls	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d018      	beq.n	8001282 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d024      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
 800126e:	e01f      	b.n	80012b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001274:	2b00      	cmp	r3, #0
 8001276:	d01b      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	4798      	blx	r3
 8001280:	e016      	b.n	80012b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d107      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0208 	bic.w	r2, r2, #8
 800129e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b4:	2220      	movs	r2, #32
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 808f 	beq.w	80013e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8087 	beq.w	80013e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d6:	2220      	movs	r2, #32
 80012d8:	409a      	lsls	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d136      	bne.n	8001358 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0216 	bic.w	r2, r2, #22
 80012f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001308:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_DMA_IRQHandler+0x1da>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0208 	bic.w	r2, r2, #8
 8001328:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132e:	223f      	movs	r2, #63	@ 0x3f
 8001330:	409a      	lsls	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800134a:	2b00      	cmp	r3, #0
 800134c:	d07e      	beq.n	800144c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
        }
        return;
 8001356:	e079      	b.n	800144c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01d      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10d      	bne.n	8001390 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001378:	2b00      	cmp	r3, #0
 800137a:	d031      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4798      	blx	r3
 8001384:	e02c      	b.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
 8001386:	bf00      	nop
 8001388:	20000000 	.word	0x20000000
 800138c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
 80013a0:	e01e      	b.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10f      	bne.n	80013d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0210 	bic.w	r2, r2, #16
 80013be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d032      	beq.n	800144e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d022      	beq.n	800143a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2205      	movs	r2, #5
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3301      	adds	r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	429a      	cmp	r2, r3
 8001416:	d307      	bcc.n	8001428 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f2      	bne.n	800140c <HAL_DMA_IRQHandler+0x2cc>
 8001426:	e000      	b.n	800142a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001428:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
 800144a:	e000      	b.n	800144e <HAL_DMA_IRQHandler+0x30e>
        return;
 800144c:	bf00      	nop
    }
  }
}
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	3b10      	subs	r3, #16
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800146e:	4a13      	ldr	r2, [pc, #76]	@ (80014bc <DMA_CalcBaseAndBitshift+0x68>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d909      	bls.n	8001496 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800148a:	f023 0303 	bic.w	r3, r3, #3
 800148e:	1d1a      	adds	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	659a      	str	r2, [r3, #88]	@ 0x58
 8001494:	e007      	b.n	80014a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	aaaaaaab 	.word	0xaaaaaaab
 80014bc:	080044ec 	.word	0x080044ec

080014c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d11f      	bne.n	800151a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d856      	bhi.n	800158e <DMA_CheckFifoParam+0xce>
 80014e0:	a201      	add	r2, pc, #4	@ (adr r2, 80014e8 <DMA_CheckFifoParam+0x28>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	0800150b 	.word	0x0800150b
 80014f0:	080014f9 	.word	0x080014f9
 80014f4:	0800158f 	.word	0x0800158f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d046      	beq.n	8001592 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001508:	e043      	b.n	8001592 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001512:	d140      	bne.n	8001596 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001518:	e03d      	b.n	8001596 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001522:	d121      	bne.n	8001568 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d837      	bhi.n	800159a <DMA_CheckFifoParam+0xda>
 800152a:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <DMA_CheckFifoParam+0x70>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	08001541 	.word	0x08001541
 8001534:	08001547 	.word	0x08001547
 8001538:	08001541 	.word	0x08001541
 800153c:	08001559 	.word	0x08001559
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
      break;
 8001544:	e030      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d025      	beq.n	800159e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001556:	e022      	b.n	800159e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001560:	d11f      	bne.n	80015a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001566:	e01c      	b.n	80015a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d903      	bls.n	8001576 <DMA_CheckFifoParam+0xb6>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d003      	beq.n	800157c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001574:	e018      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
      break;
 800157a:	e015      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00e      	beq.n	80015a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
      break;
 800158c:	e00b      	b.n	80015a6 <DMA_CheckFifoParam+0xe6>
      break;
 800158e:	bf00      	nop
 8001590:	e00a      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001592:	bf00      	nop
 8001594:	e008      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001596:	bf00      	nop
 8001598:	e006      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      break;
 800159a:	bf00      	nop
 800159c:	e004      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      break;
 800159e:	bf00      	nop
 80015a0:	e002      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80015a2:	bf00      	nop
 80015a4:	e000      	b.n	80015a8 <DMA_CheckFifoParam+0xe8>
      break;
 80015a6:	bf00      	nop
    }
  } 
  
  return status; 
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e165      	b.n	80018a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8154 	bne.w	800189a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80ae 	beq.w	800189a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b5d      	ldr	r3, [pc, #372]	@ (80018b8 <HAL_GPIO_Init+0x300>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	4a5c      	ldr	r2, [pc, #368]	@ (80018b8 <HAL_GPIO_Init+0x300>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174c:	6453      	str	r3, [r2, #68]	@ 0x44
 800174e:	4b5a      	ldr	r3, [pc, #360]	@ (80018b8 <HAL_GPIO_Init+0x300>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a58      	ldr	r2, [pc, #352]	@ (80018bc <HAL_GPIO_Init+0x304>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4f      	ldr	r2, [pc, #316]	@ (80018c0 <HAL_GPIO_Init+0x308>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d025      	beq.n	80017d2 <HAL_GPIO_Init+0x21a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4e      	ldr	r2, [pc, #312]	@ (80018c4 <HAL_GPIO_Init+0x30c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d01f      	beq.n	80017ce <HAL_GPIO_Init+0x216>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4d      	ldr	r2, [pc, #308]	@ (80018c8 <HAL_GPIO_Init+0x310>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d019      	beq.n	80017ca <HAL_GPIO_Init+0x212>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4c      	ldr	r2, [pc, #304]	@ (80018cc <HAL_GPIO_Init+0x314>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4b      	ldr	r2, [pc, #300]	@ (80018d0 <HAL_GPIO_Init+0x318>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x20a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4a      	ldr	r2, [pc, #296]	@ (80018d4 <HAL_GPIO_Init+0x31c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x206>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a49      	ldr	r2, [pc, #292]	@ (80018d8 <HAL_GPIO_Init+0x320>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x202>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e00c      	b.n	80017d4 <HAL_GPIO_Init+0x21c>
 80017ba:	2307      	movs	r3, #7
 80017bc:	e00a      	b.n	80017d4 <HAL_GPIO_Init+0x21c>
 80017be:	2305      	movs	r3, #5
 80017c0:	e008      	b.n	80017d4 <HAL_GPIO_Init+0x21c>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x21c>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_Init+0x21c>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_Init+0x21c>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x21c>
 80017d2:	2300      	movs	r3, #0
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	f002 0203 	and.w	r2, r2, #3
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e4:	4935      	ldr	r1, [pc, #212]	@ (80018bc <HAL_GPIO_Init+0x304>)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f2:	4b3a      	ldr	r3, [pc, #232]	@ (80018dc <HAL_GPIO_Init+0x324>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001816:	4a31      	ldr	r2, [pc, #196]	@ (80018dc <HAL_GPIO_Init+0x324>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800181c:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <HAL_GPIO_Init+0x324>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001840:	4a26      	ldr	r2, [pc, #152]	@ (80018dc <HAL_GPIO_Init+0x324>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001846:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <HAL_GPIO_Init+0x324>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <HAL_GPIO_Init+0x324>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_GPIO_Init+0x324>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001894:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <HAL_GPIO_Init+0x324>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3301      	adds	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	f67f ae96 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3724      	adds	r7, #36	@ 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40013800 	.word	0x40013800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40021400 	.word	0x40021400
 80018d8:	40021800 	.word	0x40021800
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	041a      	lsls	r2, r3, #16
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43d9      	mvns	r1, r3
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	400b      	ands	r3, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0cc      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b68      	ldr	r3, [pc, #416]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d90c      	bls.n	8001984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b65      	ldr	r3, [pc, #404]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b63      	ldr	r3, [pc, #396]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b8      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800199c:	4b59      	ldr	r3, [pc, #356]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a58      	ldr	r2, [pc, #352]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b4:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a52      	ldr	r2, [pc, #328]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b50      	ldr	r3, [pc, #320]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	494d      	ldr	r1, [pc, #308]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d044      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e07f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e06f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e067      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b37      	ldr	r3, [pc, #220]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4934      	ldr	r1, [pc, #208]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a38:	f7ff f924 	bl	8000c84 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff f920 	bl	8000c84 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e04f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d20c      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e032      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4916      	ldr	r1, [pc, #88]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aba:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	490e      	ldr	r1, [pc, #56]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ace:	f000 f855 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	490a      	ldr	r1, [pc, #40]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	5ccb      	ldrb	r3, [r1, r3]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f884 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00
 8001b04:	40023800 	.word	0x40023800
 8001b08:	080044d4 	.word	0x080044d4
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	080044e4 	.word	0x080044e4

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b58:	f7ff ffdc 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0b5b      	lsrs	r3, r3, #13
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	@ (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	080044e4 	.word	0x080044e4

08001b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b80:	b0ae      	sub	sp, #184	@ 0xb8
 8001b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba2:	4bcb      	ldr	r3, [pc, #812]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	f200 8206 	bhi.w	8001fbc <HAL_RCC_GetSysClockFreq+0x440>
 8001bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bed 	.word	0x08001bed
 8001bbc:	08001fbd 	.word	0x08001fbd
 8001bc0:	08001fbd 	.word	0x08001fbd
 8001bc4:	08001fbd 	.word	0x08001fbd
 8001bc8:	08001bf5 	.word	0x08001bf5
 8001bcc:	08001fbd 	.word	0x08001fbd
 8001bd0:	08001fbd 	.word	0x08001fbd
 8001bd4:	08001fbd 	.word	0x08001fbd
 8001bd8:	08001bfd 	.word	0x08001bfd
 8001bdc:	08001fbd 	.word	0x08001fbd
 8001be0:	08001fbd 	.word	0x08001fbd
 8001be4:	08001fbd 	.word	0x08001fbd
 8001be8:	08001ded 	.word	0x08001ded
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4bb9      	ldr	r3, [pc, #740]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bf2:	e1e7      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bfa:	e1e3      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4bb4      	ldr	r3, [pc, #720]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c08:	4bb1      	ldr	r3, [pc, #708]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d071      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c14:	4bae      	ldr	r3, [pc, #696]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c20:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0159      	lsls	r1, r3, #5
 8001c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4c:	0150      	lsls	r0, r2, #5
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4621      	mov	r1, r4
 8001c54:	1a51      	subs	r1, r2, r1
 8001c56:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c58:	4629      	mov	r1, r5
 8001c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	018b      	lsls	r3, r1, #6
 8001c70:	4641      	mov	r1, r8
 8001c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c76:	4641      	mov	r1, r8
 8001c78:	018a      	lsls	r2, r1, #6
 8001c7a:	4641      	mov	r1, r8
 8001c7c:	1a51      	subs	r1, r2, r1
 8001c7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c80:	4649      	mov	r1, r9
 8001c82:	eb63 0301 	sbc.w	r3, r3, r1
 8001c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c94:	4649      	mov	r1, r9
 8001c96:	00cb      	lsls	r3, r1, #3
 8001c98:	4641      	mov	r1, r8
 8001c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c9e:	4641      	mov	r1, r8
 8001ca0:	00ca      	lsls	r2, r1, #3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4622      	mov	r2, r4
 8001caa:	189b      	adds	r3, r3, r2
 8001cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cae:	462b      	mov	r3, r5
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	eb42 0303 	adc.w	r3, r2, r3
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	024b      	lsls	r3, r1, #9
 8001cc8:	4621      	mov	r1, r4
 8001cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cce:	4621      	mov	r1, r4
 8001cd0:	024a      	lsls	r2, r1, #9
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ce0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ce4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ce8:	f7fe fae2 	bl	80002b0 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cf6:	e067      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf8:	4b75      	ldr	r3, [pc, #468]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d04:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d12:	2300      	movs	r3, #0
 8001d14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001d38:	4629      	mov	r1, r5
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	018b      	lsls	r3, r1, #6
 8001d50:	4641      	mov	r1, r8
 8001d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d56:	4641      	mov	r1, r8
 8001d58:	018a      	lsls	r2, r1, #6
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d60:	4649      	mov	r1, r9
 8001d62:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d7a:	4692      	mov	sl, r2
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	eb1a 0303 	adds.w	r3, sl, r3
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	462b      	mov	r3, r5
 8001d88:	eb4b 0303 	adc.w	r3, fp, r3
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	028b      	lsls	r3, r1, #10
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da4:	4621      	mov	r1, r4
 8001da6:	028a      	lsls	r2, r1, #10
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001db0:	2200      	movs	r2, #0
 8001db2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001db4:	677a      	str	r2, [r7, #116]	@ 0x74
 8001db6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001dba:	f7fe fa79 	bl	80002b0 <__aeabi_uldivmod>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dc8:	4b41      	ldr	r3, [pc, #260]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dea:	e0eb      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dec:	4b38      	ldr	r3, [pc, #224]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df8:	4b35      	ldr	r3, [pc, #212]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d06b      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e04:	4b32      	ldr	r3, [pc, #200]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e18:	2300      	movs	r3, #0
 8001e1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	0159      	lsls	r1, r3, #5
 8001e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e32:	0150      	lsls	r0, r2, #5
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4621      	mov	r1, r4
 8001e3a:	1a51      	subs	r1, r2, r1
 8001e3c:	61b9      	str	r1, [r7, #24]
 8001e3e:	4629      	mov	r1, r5
 8001e40:	eb63 0301 	sbc.w	r3, r3, r1
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e52:	4659      	mov	r1, fp
 8001e54:	018b      	lsls	r3, r1, #6
 8001e56:	4651      	mov	r1, sl
 8001e58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	018a      	lsls	r2, r1, #6
 8001e60:	4651      	mov	r1, sl
 8001e62:	ebb2 0801 	subs.w	r8, r2, r1
 8001e66:	4659      	mov	r1, fp
 8001e68:	eb63 0901 	sbc.w	r9, r3, r1
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e80:	4690      	mov	r8, r2
 8001e82:	4699      	mov	r9, r3
 8001e84:	4623      	mov	r3, r4
 8001e86:	eb18 0303 	adds.w	r3, r8, r3
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	eb49 0303 	adc.w	r3, r9, r3
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	024b      	lsls	r3, r1, #9
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eaa:	4621      	mov	r1, r4
 8001eac:	024a      	lsls	r2, r1, #9
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001eba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ebc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ec0:	f7fe f9f6 	bl	80002b0 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4613      	mov	r3, r2
 8001eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ece:	e065      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x420>
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001edc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eec:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eee:	2300      	movs	r3, #0
 8001ef0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ef2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ef6:	4642      	mov	r2, r8
 8001ef8:	464b      	mov	r3, r9
 8001efa:	f04f 0000 	mov.w	r0, #0
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	0159      	lsls	r1, r3, #5
 8001f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f08:	0150      	lsls	r0, r2, #5
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4641      	mov	r1, r8
 8001f10:	1a51      	subs	r1, r2, r1
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	4649      	mov	r1, r9
 8001f16:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f28:	4659      	mov	r1, fp
 8001f2a:	018b      	lsls	r3, r1, #6
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f32:	4651      	mov	r1, sl
 8001f34:	018a      	lsls	r2, r1, #6
 8001f36:	4651      	mov	r1, sl
 8001f38:	1a54      	subs	r4, r2, r1
 8001f3a:	4659      	mov	r1, fp
 8001f3c:	eb63 0501 	sbc.w	r5, r3, r1
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	00eb      	lsls	r3, r5, #3
 8001f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	18e3      	adds	r3, r4, r3
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	eb45 0303 	adc.w	r3, r5, r3
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	028b      	lsls	r3, r1, #10
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f78:	4621      	mov	r1, r4
 8001f7a:	028a      	lsls	r2, r1, #10
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f84:	2200      	movs	r2, #0
 8001f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f88:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f8e:	f7fe f98f 	bl	80002b0 <__aeabi_uldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4613      	mov	r3, r2
 8001f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0f1b      	lsrs	r3, r3, #28
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fba:	e003      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	37b8      	adds	r7, #184	@ 0xb8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	00f42400 	.word	0x00f42400

08001fdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e28d      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8083 	beq.w	8002102 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ffc:	4b94      	ldr	r3, [pc, #592]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b04      	cmp	r3, #4
 8002006:	d019      	beq.n	800203c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002008:	4b91      	ldr	r3, [pc, #580]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002010:	2b08      	cmp	r3, #8
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002014:	4b8e      	ldr	r3, [pc, #568]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002020:	d00c      	beq.n	800203c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002022:	4b8b      	ldr	r3, [pc, #556]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d112      	bne.n	8002054 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202e:	4b88      	ldr	r3, [pc, #544]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203a:	d10b      	bne.n	8002054 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	4b84      	ldr	r3, [pc, #528]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0x124>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d157      	bne.n	8002100 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e25a      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x90>
 800205e:	4b7c      	ldr	r3, [pc, #496]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7b      	ldr	r2, [pc, #492]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xcc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0xb4>
 8002076:	4b76      	ldr	r3, [pc, #472]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a75      	ldr	r2, [pc, #468]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b73      	ldr	r3, [pc, #460]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a72      	ldr	r2, [pc, #456]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xcc>
 8002090:	4b6f      	ldr	r3, [pc, #444]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b6c      	ldr	r3, [pc, #432]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fde8 	bl	8000c84 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe fde4 	bl	8000c84 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e21f      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b61      	ldr	r3, [pc, #388]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xdc>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fdd4 	bl	8000c84 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7fe fdd0 	bl	8000c84 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e20b      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x104>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d06f      	beq.n	80021ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d017      	beq.n	800214a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800211a:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002122:	2b08      	cmp	r3, #8
 8002124:	d105      	bne.n	8002132 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002126:	4b4a      	ldr	r3, [pc, #296]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b47      	ldr	r3, [pc, #284]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d11c      	bne.n	8002178 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x186>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1d3      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4937      	ldr	r1, [pc, #220]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e03a      	b.n	80021ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b34      	ldr	r3, [pc, #208]	@ (8002254 <HAL_RCC_OscConfig+0x278>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fd7d 	bl	8000c84 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7fe fd79 	bl	8000c84 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1b4      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4925      	ldr	r1, [pc, #148]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <HAL_RCC_OscConfig+0x278>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fd5c 	bl	8000c84 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d0:	f7fe fd58 	bl	8000c84 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e193      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d036      	beq.n	8002268 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7fe fd3c 	bl	8000c84 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7fe fd38 	bl	8000c84 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e173      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <HAL_RCC_OscConfig+0x274>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x234>
 800222e:	e01b      	b.n	8002268 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7fe fd25 	bl	8000c84 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	e00e      	b.n	800225c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223e:	f7fe fd21 	bl	8000c84 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d907      	bls.n	800225c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e15c      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
 8002250:	40023800 	.word	0x40023800
 8002254:	42470000 	.word	0x42470000
 8002258:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b8a      	ldr	r3, [pc, #552]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ea      	bne.n	800223e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8097 	beq.w	80023a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b83      	ldr	r3, [pc, #524]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b7f      	ldr	r3, [pc, #508]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	4a7e      	ldr	r2, [pc, #504]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	@ 0x40
 8002296:	4b7c      	ldr	r3, [pc, #496]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b79      	ldr	r3, [pc, #484]	@ (800248c <HAL_RCC_OscConfig+0x4b0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b76      	ldr	r3, [pc, #472]	@ (800248c <HAL_RCC_OscConfig+0x4b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a75      	ldr	r2, [pc, #468]	@ (800248c <HAL_RCC_OscConfig+0x4b0>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7fe fce1 	bl	8000c84 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7fe fcdd 	bl	8000c84 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e118      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b6c      	ldr	r3, [pc, #432]	@ (800248c <HAL_RCC_OscConfig+0x4b0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x31e>
 80022ec:	4b66      	ldr	r3, [pc, #408]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a65      	ldr	r2, [pc, #404]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x358>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x340>
 8002302:	4b61      	ldr	r3, [pc, #388]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	4a60      	ldr	r2, [pc, #384]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	@ 0x70
 800230e:	4b5e      	ldr	r3, [pc, #376]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	4a5d      	ldr	r2, [pc, #372]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	@ 0x70
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x358>
 800231c:	4b5a      	ldr	r3, [pc, #360]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	4a59      	ldr	r2, [pc, #356]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	@ 0x70
 8002328:	4b57      	ldr	r3, [pc, #348]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232c:	4a56      	ldr	r2, [pc, #344]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe fca2 	bl	8000c84 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fc9e 	bl	8000c84 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0d7      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	4b4b      	ldr	r3, [pc, #300]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0ee      	beq.n	8002344 <HAL_RCC_OscConfig+0x368>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe fc8c 	bl	8000c84 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe fc88 	bl	8000c84 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0c1      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	4b40      	ldr	r3, [pc, #256]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ee      	bne.n	8002370 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b3b      	ldr	r3, [pc, #236]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4a3a      	ldr	r2, [pc, #232]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80ad 	beq.w	8002508 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ae:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d060      	beq.n	800247c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d145      	bne.n	800244e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <HAL_RCC_OscConfig+0x4b4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fc5c 	bl	8000c84 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fc58 	bl	8000c84 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e093      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	3b01      	subs	r3, #1
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	071b      	lsls	r3, r3, #28
 800241a:	491b      	ldr	r1, [pc, #108]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_RCC_OscConfig+0x4b4>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fc2d 	bl	8000c84 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe fc29 	bl	8000c84 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e064      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x452>
 800244c:	e05c      	b.n	8002508 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_RCC_OscConfig+0x4b4>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fc16 	bl	8000c84 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fc12 	bl	8000c84 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e04d      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x480>
 800247a:	e045      	b.n	8002508 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e040      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000
 8002490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_RCC_OscConfig+0x538>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d030      	beq.n	8002504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d129      	bne.n	8002504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d122      	bne.n	8002504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d119      	bne.n	8002504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10f      	bne.n	8002504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e042      	b.n	80025b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe f9b0 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	@ 0x24
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800255a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fdff 	bl	8003160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d175      	bne.n	80026c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_UART_Transmit+0x2c>
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e06e      	b.n	80026c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2221      	movs	r2, #33	@ 0x21
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f6:	f7fe fb45 	bl	8000c84 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002610:	d108      	bne.n	8002624 <HAL_UART_Transmit+0x6c>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e003      	b.n	800262c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800262c:	e02e      	b.n	800268c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fb9b 	bl	8002d74 <UART_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e03a      	b.n	80026c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10b      	bne.n	800266e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	3302      	adds	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	e007      	b.n	800267e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1cb      	bne.n	800262e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	2140      	movs	r1, #64	@ 0x40
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fb67 	bl	8002d74 <UART_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e006      	b.n	80026c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b08a      	sub	sp, #40	@ 0x28
 80026d2:	af02      	add	r7, sp, #8
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	f040 8081 	bne.w	80027f2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_UART_Receive+0x2e>
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e079      	b.n	80027f4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2222      	movs	r2, #34	@ 0x22
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002714:	f7fe fab6 	bl	8000c84 <HAL_GetTick>
 8002718:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272e:	d108      	bne.n	8002742 <HAL_UART_Receive+0x74>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e003      	b.n	800274a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800274a:	e047      	b.n	80027dc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2200      	movs	r2, #0
 8002754:	2120      	movs	r1, #32
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fb0c 	bl	8002d74 <UART_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e042      	b.n	80027f4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10c      	bne.n	800278e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002780:	b29a      	uxth	r2, r3
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	3302      	adds	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e01f      	b.n	80027ce <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002796:	d007      	beq.n	80027a8 <HAL_UART_Receive+0xda>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_UART_Receive+0xe8>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d106      	bne.n	80027b6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e008      	b.n	80027c8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3301      	adds	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1b2      	bne.n	800274c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0ba      	sub	sp, #232	@ 0xe8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800283a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_UART_IRQHandler+0x66>
 800284e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fbc2 	bl	8002fe4 <UART_Receive_IT>
      return;
 8002860:	e25b      	b.n	8002d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80de 	beq.w	8002a28 <HAL_UART_IRQHandler+0x22c>
 800286c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800287c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80d1 	beq.w	8002a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_UART_IRQHandler+0xae>
 8002892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_UART_IRQHandler+0xd2>
 80028b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	f043 0202 	orr.w	r2, r3, #2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_UART_IRQHandler+0xf6>
 80028da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	f043 0204 	orr.w	r2, r3, #4
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d011      	beq.n	8002922 <HAL_UART_IRQHandler+0x126>
 80028fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800290a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	f043 0208 	orr.w	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 81f2 	beq.w	8002d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800292c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_UART_IRQHandler+0x14e>
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fb4d 	bl	8002fe4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b40      	cmp	r3, #64	@ 0x40
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <HAL_UART_IRQHandler+0x17a>
 800296e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d04f      	beq.n	8002a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa55 	bl	8002e26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b40      	cmp	r3, #64	@ 0x40
 8002988:	d141      	bne.n	8002a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3314      	adds	r3, #20
 8002990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3314      	adds	r3, #20
 80029b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029c6:	e841 2300 	strex	r3, r2, [r1]
 80029ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1d9      	bne.n	800298a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bdc <HAL_UART_IRQHandler+0x3e0>)
 80029e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fb86 	bl	80010fc <HAL_DMA_Abort_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a00:	4610      	mov	r0, r2
 8002a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e00e      	b.n	8002a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f99e 	bl	8002d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00a      	b.n	8002a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f99a 	bl	8002d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e006      	b.n	8002a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f996 	bl	8002d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a22:	e175      	b.n	8002d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	bf00      	nop
    return;
 8002a26:	e173      	b.n	8002d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 814f 	bne.w	8002cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8148 	beq.w	8002cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8141 	beq.w	8002cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	f040 80b6 	bne.w	8002be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8145 	beq.w	8002d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a92:	429a      	cmp	r2, r3
 8002a94:	f080 813e 	bcs.w	8002d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aaa:	f000 8088 	beq.w	8002bbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1d9      	bne.n	8002aae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1e1      	bne.n	8002afa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3314      	adds	r3, #20
 8002b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3314      	adds	r3, #20
 8002b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e3      	bne.n	8002b36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b8e:	f023 0310 	bic.w	r3, r3, #16
 8002b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ba0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ba2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e3      	bne.n	8002b7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe fa2f 	bl	800101c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8c1 	bl	8002d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bda:	e09b      	b.n	8002d14 <HAL_UART_IRQHandler+0x518>
 8002bdc:	08002eed 	.word	0x08002eed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 808e 	beq.w	8002d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8089 	beq.w	8002d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c10:	e853 3f00 	ldrex	r3, [r3]
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c32:	e841 2300 	strex	r3, r2, [r1]
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e3      	bne.n	8002c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3314      	adds	r3, #20
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	e853 3f00 	ldrex	r3, [r3]
 8002c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3314      	adds	r3, #20
 8002c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e3      	bne.n	8002c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0310 	bic.w	r3, r3, #16
 8002c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ca8:	61fa      	str	r2, [r7, #28]
 8002caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	e841 2300 	strex	r3, r2, [r1]
 8002cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e3      	bne.n	8002c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f847 	bl	8002d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cce:	e023      	b.n	8002d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d009      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x4f4>
 8002cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f913 	bl	8002f14 <UART_Transmit_IT>
    return;
 8002cee:	e014      	b.n	8002d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <HAL_UART_IRQHandler+0x51e>
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f953 	bl	8002fb4 <UART_EndTransmit_IT>
    return;
 8002d0e:	e004      	b.n	8002d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8002d10:	bf00      	nop
 8002d12:	e002      	b.n	8002d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8002d18:	bf00      	nop
  }
}
 8002d1a:	37e8      	adds	r7, #232	@ 0xe8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d84:	e03b      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d037      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7fd ff79 	bl	8000c84 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e03a      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d023      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b80      	cmp	r3, #128	@ 0x80
 8002dba:	d020      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	d01d      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d116      	bne.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f81d 	bl	8002e26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2208      	movs	r2, #8
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d0b4      	beq.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b095      	sub	sp, #84	@ 0x54
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e5      	bne.n	8002e2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3314      	adds	r3, #20
 8002e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3314      	adds	r3, #20
 8002e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d119      	bne.n	8002ed2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f023 0310 	bic.w	r3, r3, #16
 8002eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ebe:	61ba      	str	r2, [r7, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	6979      	ldr	r1, [r7, #20]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	613b      	str	r3, [r7, #16]
   return(result);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e5      	bne.n	8002e9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ee0:	bf00      	nop
 8002ee2:	3754      	adds	r7, #84	@ 0x54
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ff1e 	bl	8002d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b21      	cmp	r3, #33	@ 0x21
 8002f26:	d13e      	bne.n	8002fa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f30:	d114      	bne.n	8002f5c <UART_Transmit_IT+0x48>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d110      	bne.n	8002f5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	1c9a      	adds	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]
 8002f5a:	e008      	b.n	8002f6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	1c59      	adds	r1, r3, #1
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6211      	str	r1, [r2, #32]
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10f      	bne.n	8002fa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fea3 	bl	8002d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	@ 0x30
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b22      	cmp	r3, #34	@ 0x22
 8002ff6:	f040 80ae 	bne.w	8003156 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003002:	d117      	bne.n	8003034 <UART_Receive_IT+0x50>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d113      	bne.n	8003034 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	b29a      	uxth	r2, r3
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	1c9a      	adds	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	629a      	str	r2, [r3, #40]	@ 0x28
 8003032:	e026      	b.n	8003082 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003046:	d007      	beq.n	8003058 <UART_Receive_IT+0x74>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <UART_Receive_IT+0x82>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e008      	b.n	8003078 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003072:	b2da      	uxtb	r2, r3
 8003074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003076:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29b      	uxth	r3, r3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4619      	mov	r1, r3
 8003090:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003092:	2b00      	cmp	r3, #0
 8003094:	d15d      	bne.n	8003152 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0220 	bic.w	r2, r2, #32
 80030a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d135      	bne.n	8003148 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	613b      	str	r3, [r7, #16]
   return(result);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f023 0310 	bic.w	r3, r3, #16
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003102:	623a      	str	r2, [r7, #32]
 8003104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	69f9      	ldr	r1, [r7, #28]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e5      	bne.n	80030e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b10      	cmp	r3, #16
 8003122:	d10a      	bne.n	800313a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fe0b 	bl	8002d5c <HAL_UARTEx_RxEventCallback>
 8003146:	e002      	b.n	800314e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fdf3 	bl	8002d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e002      	b.n	8003158 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3730      	adds	r7, #48	@ 0x30
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b0c0      	sub	sp, #256	@ 0x100
 8003166:	af00      	add	r7, sp, #0
 8003168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	ea40 0301 	orr.w	r3, r0, r1
 8003188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	431a      	orrs	r2, r3
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031b8:	f021 010c 	bic.w	r1, r1, #12
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031c6:	430b      	orrs	r3, r1
 80031c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	6999      	ldr	r1, [r3, #24]
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	ea40 0301 	orr.w	r3, r0, r1
 80031e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <UART_SetConfig+0x2cc>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d005      	beq.n	8003200 <UART_SetConfig+0xa0>
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003430 <UART_SetConfig+0x2d0>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d104      	bne.n	800320a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7fe fca8 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 8003204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003208:	e003      	b.n	8003212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320a:	f7fe fc8f 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 800320e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	f040 810c 	bne.w	8003438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800322a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800322e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	1891      	adds	r1, r2, r2
 8003238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800323a:	415b      	adcs	r3, r3
 800323c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800323e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003242:	4621      	mov	r1, r4
 8003244:	eb12 0801 	adds.w	r8, r2, r1
 8003248:	4629      	mov	r1, r5
 800324a:	eb43 0901 	adc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003270:	462b      	mov	r3, r5
 8003272:	eb49 0303 	adc.w	r3, r9, r3
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800328a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800328e:	460b      	mov	r3, r1
 8003290:	18db      	adds	r3, r3, r3
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
 8003294:	4613      	mov	r3, r2
 8003296:	eb42 0303 	adc.w	r3, r2, r3
 800329a:	657b      	str	r3, [r7, #84]	@ 0x54
 800329c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032a4:	f7fd f804 	bl	80002b0 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b61      	ldr	r3, [pc, #388]	@ (8003434 <UART_SetConfig+0x2d4>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011c      	lsls	r4, r3, #4
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032d0:	415b      	adcs	r3, r3
 80032d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032d8:	4641      	mov	r1, r8
 80032da:	eb12 0a01 	adds.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb43 0b01 	adc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f8:	4692      	mov	sl, r2
 80032fa:	469b      	mov	fp, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003306:	464b      	mov	r3, r9
 8003308:	eb4b 0303 	adc.w	r3, fp, r3
 800330c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800331c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003324:	460b      	mov	r3, r1
 8003326:	18db      	adds	r3, r3, r3
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
 800332a:	4613      	mov	r3, r2
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	647b      	str	r3, [r7, #68]	@ 0x44
 8003332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800333a:	f7fc ffb9 	bl	80002b0 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4611      	mov	r1, r2
 8003344:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003346:	fba3 2301 	umull	r2, r3, r3, r1
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2264      	movs	r2, #100	@ 0x64
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <UART_SetConfig+0x2d4>)
 800335c:	fba3 2302 	umull	r2, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003368:	441c      	add	r4, r3
 800336a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	1891      	adds	r1, r2, r2
 8003382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003384:	415b      	adcs	r3, r3
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800338c:	4641      	mov	r1, r8
 800338e:	1851      	adds	r1, r2, r1
 8003390:	6339      	str	r1, [r7, #48]	@ 0x30
 8003392:	4649      	mov	r1, r9
 8003394:	414b      	adcs	r3, r1
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033a4:	4659      	mov	r1, fp
 80033a6:	00cb      	lsls	r3, r1, #3
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ae:	4651      	mov	r1, sl
 80033b0:	00ca      	lsls	r2, r1, #3
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	4642      	mov	r2, r8
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c0:	464b      	mov	r3, r9
 80033c2:	460a      	mov	r2, r1
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e0:	460b      	mov	r3, r1
 80033e2:	18db      	adds	r3, r3, r3
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033e6:	4613      	mov	r3, r2
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033f6:	f7fc ff5b 	bl	80002b0 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003400:	fba3 1302 	umull	r1, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2164      	movs	r1, #100	@ 0x64
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3332      	adds	r3, #50	@ 0x32
 8003412:	4a08      	ldr	r2, [pc, #32]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4422      	add	r2, r4
 8003426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003428:	e106      	b.n	8003638 <UART_SetConfig+0x4d8>
 800342a:	bf00      	nop
 800342c:	40011000 	.word	0x40011000
 8003430:	40011400 	.word	0x40011400
 8003434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800344a:	4642      	mov	r2, r8
 800344c:	464b      	mov	r3, r9
 800344e:	1891      	adds	r1, r2, r2
 8003450:	6239      	str	r1, [r7, #32]
 8003452:	415b      	adcs	r3, r3
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345a:	4641      	mov	r1, r8
 800345c:	1854      	adds	r4, r2, r1
 800345e:	4649      	mov	r1, r9
 8003460:	eb43 0501 	adc.w	r5, r3, r1
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	00eb      	lsls	r3, r5, #3
 800346e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003472:	00e2      	lsls	r2, r4, #3
 8003474:	4614      	mov	r4, r2
 8003476:	461d      	mov	r5, r3
 8003478:	4643      	mov	r3, r8
 800347a:	18e3      	adds	r3, r4, r3
 800347c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003480:	464b      	mov	r3, r9
 8003482:	eb45 0303 	adc.w	r3, r5, r3
 8003486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034a6:	4629      	mov	r1, r5
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b0:	4621      	mov	r1, r4
 80034b2:	008a      	lsls	r2, r1, #2
 80034b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034b8:	f7fc fefa 	bl	80002b0 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4b60      	ldr	r3, [pc, #384]	@ (8003644 <UART_SetConfig+0x4e4>)
 80034c2:	fba3 2302 	umull	r2, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	011c      	lsls	r4, r3, #4
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	61b9      	str	r1, [r7, #24]
 80034e4:	415b      	adcs	r3, r3
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	4641      	mov	r1, r8
 80034ee:	1851      	adds	r1, r2, r1
 80034f0:	6139      	str	r1, [r7, #16]
 80034f2:	4649      	mov	r1, r9
 80034f4:	414b      	adcs	r3, r1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003504:	4659      	mov	r1, fp
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4651      	mov	r1, sl
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4642      	mov	r2, r8
 800351a:	189b      	adds	r3, r3, r2
 800351c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003520:	464b      	mov	r3, r9
 8003522:	460a      	mov	r2, r1
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003544:	4649      	mov	r1, r9
 8003546:	008b      	lsls	r3, r1, #2
 8003548:	4641      	mov	r1, r8
 800354a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354e:	4641      	mov	r1, r8
 8003550:	008a      	lsls	r2, r1, #2
 8003552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003556:	f7fc feab 	bl	80002b0 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4611      	mov	r1, r2
 8003560:	4b38      	ldr	r3, [pc, #224]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003562:	fba3 2301 	umull	r2, r3, r3, r1
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2264      	movs	r2, #100	@ 0x64
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	1acb      	subs	r3, r1, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	@ 0x32
 8003574:	4a33      	ldr	r2, [pc, #204]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	441c      	add	r4, r3
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	673b      	str	r3, [r7, #112]	@ 0x70
 800358a:	677a      	str	r2, [r7, #116]	@ 0x74
 800358c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003590:	4642      	mov	r2, r8
 8003592:	464b      	mov	r3, r9
 8003594:	1891      	adds	r1, r2, r2
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	415b      	adcs	r3, r3
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a0:	4641      	mov	r1, r8
 80035a2:	1851      	adds	r1, r2, r1
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	4649      	mov	r1, r9
 80035a8:	414b      	adcs	r3, r1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035b8:	4659      	mov	r1, fp
 80035ba:	00cb      	lsls	r3, r1, #3
 80035bc:	4651      	mov	r1, sl
 80035be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c2:	4651      	mov	r1, sl
 80035c4:	00ca      	lsls	r2, r1, #3
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	4642      	mov	r2, r8
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d2:	464b      	mov	r3, r9
 80035d4:	460a      	mov	r2, r1
 80035d6:	eb42 0303 	adc.w	r3, r2, r3
 80035da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035f4:	4649      	mov	r1, r9
 80035f6:	008b      	lsls	r3, r1, #2
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fe:	4641      	mov	r1, r8
 8003600:	008a      	lsls	r2, r1, #2
 8003602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003606:	f7fc fe53 	bl	80002b0 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	@ 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800363e:	46bd      	mov	sp, r7
 8003640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003644:	51eb851f 	.word	0x51eb851f

08003648 <std>:
 8003648:	2300      	movs	r3, #0
 800364a:	b510      	push	{r4, lr}
 800364c:	4604      	mov	r4, r0
 800364e:	e9c0 3300 	strd	r3, r3, [r0]
 8003652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003656:	6083      	str	r3, [r0, #8]
 8003658:	8181      	strh	r1, [r0, #12]
 800365a:	6643      	str	r3, [r0, #100]	@ 0x64
 800365c:	81c2      	strh	r2, [r0, #14]
 800365e:	6183      	str	r3, [r0, #24]
 8003660:	4619      	mov	r1, r3
 8003662:	2208      	movs	r2, #8
 8003664:	305c      	adds	r0, #92	@ 0x5c
 8003666:	f000 f906 	bl	8003876 <memset>
 800366a:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <std+0x58>)
 800366c:	6263      	str	r3, [r4, #36]	@ 0x24
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <std+0x5c>)
 8003670:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003672:	4b0d      	ldr	r3, [pc, #52]	@ (80036a8 <std+0x60>)
 8003674:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003676:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <std+0x64>)
 8003678:	6323      	str	r3, [r4, #48]	@ 0x30
 800367a:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <std+0x68>)
 800367c:	6224      	str	r4, [r4, #32]
 800367e:	429c      	cmp	r4, r3
 8003680:	d006      	beq.n	8003690 <std+0x48>
 8003682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003686:	4294      	cmp	r4, r2
 8003688:	d002      	beq.n	8003690 <std+0x48>
 800368a:	33d0      	adds	r3, #208	@ 0xd0
 800368c:	429c      	cmp	r4, r3
 800368e:	d105      	bne.n	800369c <std+0x54>
 8003690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003698:	f000 b966 	b.w	8003968 <__retarget_lock_init_recursive>
 800369c:	bd10      	pop	{r4, pc}
 800369e:	bf00      	nop
 80036a0:	080037f1 	.word	0x080037f1
 80036a4:	08003813 	.word	0x08003813
 80036a8:	0800384b 	.word	0x0800384b
 80036ac:	0800386f 	.word	0x0800386f
 80036b0:	20000144 	.word	0x20000144

080036b4 <stdio_exit_handler>:
 80036b4:	4a02      	ldr	r2, [pc, #8]	@ (80036c0 <stdio_exit_handler+0xc>)
 80036b6:	4903      	ldr	r1, [pc, #12]	@ (80036c4 <stdio_exit_handler+0x10>)
 80036b8:	4803      	ldr	r0, [pc, #12]	@ (80036c8 <stdio_exit_handler+0x14>)
 80036ba:	f000 b869 	b.w	8003790 <_fwalk_sglue>
 80036be:	bf00      	nop
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	08004209 	.word	0x08004209
 80036c8:	2000001c 	.word	0x2000001c

080036cc <cleanup_stdio>:
 80036cc:	6841      	ldr	r1, [r0, #4]
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <cleanup_stdio+0x34>)
 80036d0:	4299      	cmp	r1, r3
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	d001      	beq.n	80036dc <cleanup_stdio+0x10>
 80036d8:	f000 fd96 	bl	8004208 <_fflush_r>
 80036dc:	68a1      	ldr	r1, [r4, #8]
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <cleanup_stdio+0x38>)
 80036e0:	4299      	cmp	r1, r3
 80036e2:	d002      	beq.n	80036ea <cleanup_stdio+0x1e>
 80036e4:	4620      	mov	r0, r4
 80036e6:	f000 fd8f 	bl	8004208 <_fflush_r>
 80036ea:	68e1      	ldr	r1, [r4, #12]
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <cleanup_stdio+0x3c>)
 80036ee:	4299      	cmp	r1, r3
 80036f0:	d004      	beq.n	80036fc <cleanup_stdio+0x30>
 80036f2:	4620      	mov	r0, r4
 80036f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f8:	f000 bd86 	b.w	8004208 <_fflush_r>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	20000144 	.word	0x20000144
 8003704:	200001ac 	.word	0x200001ac
 8003708:	20000214 	.word	0x20000214

0800370c <global_stdio_init.part.0>:
 800370c:	b510      	push	{r4, lr}
 800370e:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <global_stdio_init.part.0+0x30>)
 8003710:	4c0b      	ldr	r4, [pc, #44]	@ (8003740 <global_stdio_init.part.0+0x34>)
 8003712:	4a0c      	ldr	r2, [pc, #48]	@ (8003744 <global_stdio_init.part.0+0x38>)
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	4620      	mov	r0, r4
 8003718:	2200      	movs	r2, #0
 800371a:	2104      	movs	r1, #4
 800371c:	f7ff ff94 	bl	8003648 <std>
 8003720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003724:	2201      	movs	r2, #1
 8003726:	2109      	movs	r1, #9
 8003728:	f7ff ff8e 	bl	8003648 <std>
 800372c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003730:	2202      	movs	r2, #2
 8003732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003736:	2112      	movs	r1, #18
 8003738:	f7ff bf86 	b.w	8003648 <std>
 800373c:	2000027c 	.word	0x2000027c
 8003740:	20000144 	.word	0x20000144
 8003744:	080036b5 	.word	0x080036b5

08003748 <__sfp_lock_acquire>:
 8003748:	4801      	ldr	r0, [pc, #4]	@ (8003750 <__sfp_lock_acquire+0x8>)
 800374a:	f000 b90e 	b.w	800396a <__retarget_lock_acquire_recursive>
 800374e:	bf00      	nop
 8003750:	20000285 	.word	0x20000285

08003754 <__sfp_lock_release>:
 8003754:	4801      	ldr	r0, [pc, #4]	@ (800375c <__sfp_lock_release+0x8>)
 8003756:	f000 b909 	b.w	800396c <__retarget_lock_release_recursive>
 800375a:	bf00      	nop
 800375c:	20000285 	.word	0x20000285

08003760 <__sinit>:
 8003760:	b510      	push	{r4, lr}
 8003762:	4604      	mov	r4, r0
 8003764:	f7ff fff0 	bl	8003748 <__sfp_lock_acquire>
 8003768:	6a23      	ldr	r3, [r4, #32]
 800376a:	b11b      	cbz	r3, 8003774 <__sinit+0x14>
 800376c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003770:	f7ff bff0 	b.w	8003754 <__sfp_lock_release>
 8003774:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <__sinit+0x28>)
 8003776:	6223      	str	r3, [r4, #32]
 8003778:	4b04      	ldr	r3, [pc, #16]	@ (800378c <__sinit+0x2c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f5      	bne.n	800376c <__sinit+0xc>
 8003780:	f7ff ffc4 	bl	800370c <global_stdio_init.part.0>
 8003784:	e7f2      	b.n	800376c <__sinit+0xc>
 8003786:	bf00      	nop
 8003788:	080036cd 	.word	0x080036cd
 800378c:	2000027c 	.word	0x2000027c

08003790 <_fwalk_sglue>:
 8003790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003794:	4607      	mov	r7, r0
 8003796:	4688      	mov	r8, r1
 8003798:	4614      	mov	r4, r2
 800379a:	2600      	movs	r6, #0
 800379c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037a0:	f1b9 0901 	subs.w	r9, r9, #1
 80037a4:	d505      	bpl.n	80037b2 <_fwalk_sglue+0x22>
 80037a6:	6824      	ldr	r4, [r4, #0]
 80037a8:	2c00      	cmp	r4, #0
 80037aa:	d1f7      	bne.n	800379c <_fwalk_sglue+0xc>
 80037ac:	4630      	mov	r0, r6
 80037ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b2:	89ab      	ldrh	r3, [r5, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d907      	bls.n	80037c8 <_fwalk_sglue+0x38>
 80037b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037bc:	3301      	adds	r3, #1
 80037be:	d003      	beq.n	80037c8 <_fwalk_sglue+0x38>
 80037c0:	4629      	mov	r1, r5
 80037c2:	4638      	mov	r0, r7
 80037c4:	47c0      	blx	r8
 80037c6:	4306      	orrs	r6, r0
 80037c8:	3568      	adds	r5, #104	@ 0x68
 80037ca:	e7e9      	b.n	80037a0 <_fwalk_sglue+0x10>

080037cc <iprintf>:
 80037cc:	b40f      	push	{r0, r1, r2, r3}
 80037ce:	b507      	push	{r0, r1, r2, lr}
 80037d0:	4906      	ldr	r1, [pc, #24]	@ (80037ec <iprintf+0x20>)
 80037d2:	ab04      	add	r3, sp, #16
 80037d4:	6808      	ldr	r0, [r1, #0]
 80037d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80037da:	6881      	ldr	r1, [r0, #8]
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	f000 f9e9 	bl	8003bb4 <_vfiprintf_r>
 80037e2:	b003      	add	sp, #12
 80037e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e8:	b004      	add	sp, #16
 80037ea:	4770      	bx	lr
 80037ec:	20000018 	.word	0x20000018

080037f0 <__sread>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	460c      	mov	r4, r1
 80037f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f8:	f000 f868 	bl	80038cc <_read_r>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	bfab      	itete	ge
 8003800:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003802:	89a3      	ldrhlt	r3, [r4, #12]
 8003804:	181b      	addge	r3, r3, r0
 8003806:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800380a:	bfac      	ite	ge
 800380c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800380e:	81a3      	strhlt	r3, [r4, #12]
 8003810:	bd10      	pop	{r4, pc}

08003812 <__swrite>:
 8003812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003816:	461f      	mov	r7, r3
 8003818:	898b      	ldrh	r3, [r1, #12]
 800381a:	05db      	lsls	r3, r3, #23
 800381c:	4605      	mov	r5, r0
 800381e:	460c      	mov	r4, r1
 8003820:	4616      	mov	r6, r2
 8003822:	d505      	bpl.n	8003830 <__swrite+0x1e>
 8003824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003828:	2302      	movs	r3, #2
 800382a:	2200      	movs	r2, #0
 800382c:	f000 f83c 	bl	80038a8 <_lseek_r>
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003836:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800383a:	81a3      	strh	r3, [r4, #12]
 800383c:	4632      	mov	r2, r6
 800383e:	463b      	mov	r3, r7
 8003840:	4628      	mov	r0, r5
 8003842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003846:	f000 b853 	b.w	80038f0 <_write_r>

0800384a <__sseek>:
 800384a:	b510      	push	{r4, lr}
 800384c:	460c      	mov	r4, r1
 800384e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003852:	f000 f829 	bl	80038a8 <_lseek_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	bf15      	itete	ne
 800385c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800385e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003862:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003866:	81a3      	strheq	r3, [r4, #12]
 8003868:	bf18      	it	ne
 800386a:	81a3      	strhne	r3, [r4, #12]
 800386c:	bd10      	pop	{r4, pc}

0800386e <__sclose>:
 800386e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003872:	f000 b809 	b.w	8003888 <_close_r>

08003876 <memset>:
 8003876:	4402      	add	r2, r0
 8003878:	4603      	mov	r3, r0
 800387a:	4293      	cmp	r3, r2
 800387c:	d100      	bne.n	8003880 <memset+0xa>
 800387e:	4770      	bx	lr
 8003880:	f803 1b01 	strb.w	r1, [r3], #1
 8003884:	e7f9      	b.n	800387a <memset+0x4>
	...

08003888 <_close_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4d06      	ldr	r5, [pc, #24]	@ (80038a4 <_close_r+0x1c>)
 800388c:	2300      	movs	r3, #0
 800388e:	4604      	mov	r4, r0
 8003890:	4608      	mov	r0, r1
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	f7fd f8e9 	bl	8000a6a <_close>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_close_r+0x1a>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_close_r+0x1a>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	20000280 	.word	0x20000280

080038a8 <_lseek_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d07      	ldr	r5, [pc, #28]	@ (80038c8 <_lseek_r+0x20>)
 80038ac:	4604      	mov	r4, r0
 80038ae:	4608      	mov	r0, r1
 80038b0:	4611      	mov	r1, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	602a      	str	r2, [r5, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f7fd f8fe 	bl	8000ab8 <_lseek>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_lseek_r+0x1e>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_lseek_r+0x1e>
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	20000280 	.word	0x20000280

080038cc <_read_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d07      	ldr	r5, [pc, #28]	@ (80038ec <_read_r+0x20>)
 80038d0:	4604      	mov	r4, r0
 80038d2:	4608      	mov	r0, r1
 80038d4:	4611      	mov	r1, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	602a      	str	r2, [r5, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	f7fd f8a8 	bl	8000a30 <_read>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_read_r+0x1e>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_read_r+0x1e>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	20000280 	.word	0x20000280

080038f0 <_write_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4d07      	ldr	r5, [pc, #28]	@ (8003910 <_write_r+0x20>)
 80038f4:	4604      	mov	r4, r0
 80038f6:	4608      	mov	r0, r1
 80038f8:	4611      	mov	r1, r2
 80038fa:	2200      	movs	r2, #0
 80038fc:	602a      	str	r2, [r5, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	f7fc ff8c 	bl	800081c <_write>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d102      	bne.n	800390e <_write_r+0x1e>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	b103      	cbz	r3, 800390e <_write_r+0x1e>
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	20000280 	.word	0x20000280

08003914 <__errno>:
 8003914:	4b01      	ldr	r3, [pc, #4]	@ (800391c <__errno+0x8>)
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000018 	.word	0x20000018

08003920 <__libc_init_array>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	4d0d      	ldr	r5, [pc, #52]	@ (8003958 <__libc_init_array+0x38>)
 8003924:	4c0d      	ldr	r4, [pc, #52]	@ (800395c <__libc_init_array+0x3c>)
 8003926:	1b64      	subs	r4, r4, r5
 8003928:	10a4      	asrs	r4, r4, #2
 800392a:	2600      	movs	r6, #0
 800392c:	42a6      	cmp	r6, r4
 800392e:	d109      	bne.n	8003944 <__libc_init_array+0x24>
 8003930:	4d0b      	ldr	r5, [pc, #44]	@ (8003960 <__libc_init_array+0x40>)
 8003932:	4c0c      	ldr	r4, [pc, #48]	@ (8003964 <__libc_init_array+0x44>)
 8003934:	f000 fdb8 	bl	80044a8 <_init>
 8003938:	1b64      	subs	r4, r4, r5
 800393a:	10a4      	asrs	r4, r4, #2
 800393c:	2600      	movs	r6, #0
 800393e:	42a6      	cmp	r6, r4
 8003940:	d105      	bne.n	800394e <__libc_init_array+0x2e>
 8003942:	bd70      	pop	{r4, r5, r6, pc}
 8003944:	f855 3b04 	ldr.w	r3, [r5], #4
 8003948:	4798      	blx	r3
 800394a:	3601      	adds	r6, #1
 800394c:	e7ee      	b.n	800392c <__libc_init_array+0xc>
 800394e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003952:	4798      	blx	r3
 8003954:	3601      	adds	r6, #1
 8003956:	e7f2      	b.n	800393e <__libc_init_array+0x1e>
 8003958:	08004530 	.word	0x08004530
 800395c:	08004530 	.word	0x08004530
 8003960:	08004530 	.word	0x08004530
 8003964:	08004534 	.word	0x08004534

08003968 <__retarget_lock_init_recursive>:
 8003968:	4770      	bx	lr

0800396a <__retarget_lock_acquire_recursive>:
 800396a:	4770      	bx	lr

0800396c <__retarget_lock_release_recursive>:
 800396c:	4770      	bx	lr
	...

08003970 <_free_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4605      	mov	r5, r0
 8003974:	2900      	cmp	r1, #0
 8003976:	d041      	beq.n	80039fc <_free_r+0x8c>
 8003978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800397c:	1f0c      	subs	r4, r1, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfb8      	it	lt
 8003982:	18e4      	addlt	r4, r4, r3
 8003984:	f000 f8e0 	bl	8003b48 <__malloc_lock>
 8003988:	4a1d      	ldr	r2, [pc, #116]	@ (8003a00 <_free_r+0x90>)
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	b933      	cbnz	r3, 800399c <_free_r+0x2c>
 800398e:	6063      	str	r3, [r4, #4]
 8003990:	6014      	str	r4, [r2, #0]
 8003992:	4628      	mov	r0, r5
 8003994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003998:	f000 b8dc 	b.w	8003b54 <__malloc_unlock>
 800399c:	42a3      	cmp	r3, r4
 800399e:	d908      	bls.n	80039b2 <_free_r+0x42>
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	1821      	adds	r1, r4, r0
 80039a4:	428b      	cmp	r3, r1
 80039a6:	bf01      	itttt	eq
 80039a8:	6819      	ldreq	r1, [r3, #0]
 80039aa:	685b      	ldreq	r3, [r3, #4]
 80039ac:	1809      	addeq	r1, r1, r0
 80039ae:	6021      	streq	r1, [r4, #0]
 80039b0:	e7ed      	b.n	800398e <_free_r+0x1e>
 80039b2:	461a      	mov	r2, r3
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	b10b      	cbz	r3, 80039bc <_free_r+0x4c>
 80039b8:	42a3      	cmp	r3, r4
 80039ba:	d9fa      	bls.n	80039b2 <_free_r+0x42>
 80039bc:	6811      	ldr	r1, [r2, #0]
 80039be:	1850      	adds	r0, r2, r1
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d10b      	bne.n	80039dc <_free_r+0x6c>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	4401      	add	r1, r0
 80039c8:	1850      	adds	r0, r2, r1
 80039ca:	4283      	cmp	r3, r0
 80039cc:	6011      	str	r1, [r2, #0]
 80039ce:	d1e0      	bne.n	8003992 <_free_r+0x22>
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	6053      	str	r3, [r2, #4]
 80039d6:	4408      	add	r0, r1
 80039d8:	6010      	str	r0, [r2, #0]
 80039da:	e7da      	b.n	8003992 <_free_r+0x22>
 80039dc:	d902      	bls.n	80039e4 <_free_r+0x74>
 80039de:	230c      	movs	r3, #12
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	e7d6      	b.n	8003992 <_free_r+0x22>
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	1821      	adds	r1, r4, r0
 80039e8:	428b      	cmp	r3, r1
 80039ea:	bf04      	itt	eq
 80039ec:	6819      	ldreq	r1, [r3, #0]
 80039ee:	685b      	ldreq	r3, [r3, #4]
 80039f0:	6063      	str	r3, [r4, #4]
 80039f2:	bf04      	itt	eq
 80039f4:	1809      	addeq	r1, r1, r0
 80039f6:	6021      	streq	r1, [r4, #0]
 80039f8:	6054      	str	r4, [r2, #4]
 80039fa:	e7ca      	b.n	8003992 <_free_r+0x22>
 80039fc:	bd38      	pop	{r3, r4, r5, pc}
 80039fe:	bf00      	nop
 8003a00:	2000028c 	.word	0x2000028c

08003a04 <sbrk_aligned>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	4e0f      	ldr	r6, [pc, #60]	@ (8003a44 <sbrk_aligned+0x40>)
 8003a08:	460c      	mov	r4, r1
 8003a0a:	6831      	ldr	r1, [r6, #0]
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	b911      	cbnz	r1, 8003a16 <sbrk_aligned+0x12>
 8003a10:	f000 fcb6 	bl	8004380 <_sbrk_r>
 8003a14:	6030      	str	r0, [r6, #0]
 8003a16:	4621      	mov	r1, r4
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f000 fcb1 	bl	8004380 <_sbrk_r>
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	d103      	bne.n	8003a2a <sbrk_aligned+0x26>
 8003a22:	f04f 34ff 	mov.w	r4, #4294967295
 8003a26:	4620      	mov	r0, r4
 8003a28:	bd70      	pop	{r4, r5, r6, pc}
 8003a2a:	1cc4      	adds	r4, r0, #3
 8003a2c:	f024 0403 	bic.w	r4, r4, #3
 8003a30:	42a0      	cmp	r0, r4
 8003a32:	d0f8      	beq.n	8003a26 <sbrk_aligned+0x22>
 8003a34:	1a21      	subs	r1, r4, r0
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 fca2 	bl	8004380 <_sbrk_r>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d1f2      	bne.n	8003a26 <sbrk_aligned+0x22>
 8003a40:	e7ef      	b.n	8003a22 <sbrk_aligned+0x1e>
 8003a42:	bf00      	nop
 8003a44:	20000288 	.word	0x20000288

08003a48 <_malloc_r>:
 8003a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a4c:	1ccd      	adds	r5, r1, #3
 8003a4e:	f025 0503 	bic.w	r5, r5, #3
 8003a52:	3508      	adds	r5, #8
 8003a54:	2d0c      	cmp	r5, #12
 8003a56:	bf38      	it	cc
 8003a58:	250c      	movcc	r5, #12
 8003a5a:	2d00      	cmp	r5, #0
 8003a5c:	4606      	mov	r6, r0
 8003a5e:	db01      	blt.n	8003a64 <_malloc_r+0x1c>
 8003a60:	42a9      	cmp	r1, r5
 8003a62:	d904      	bls.n	8003a6e <_malloc_r+0x26>
 8003a64:	230c      	movs	r3, #12
 8003a66:	6033      	str	r3, [r6, #0]
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b44 <_malloc_r+0xfc>
 8003a72:	f000 f869 	bl	8003b48 <__malloc_lock>
 8003a76:	f8d8 3000 	ldr.w	r3, [r8]
 8003a7a:	461c      	mov	r4, r3
 8003a7c:	bb44      	cbnz	r4, 8003ad0 <_malloc_r+0x88>
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4630      	mov	r0, r6
 8003a82:	f7ff ffbf 	bl	8003a04 <sbrk_aligned>
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	4604      	mov	r4, r0
 8003a8a:	d158      	bne.n	8003b3e <_malloc_r+0xf6>
 8003a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a90:	4627      	mov	r7, r4
 8003a92:	2f00      	cmp	r7, #0
 8003a94:	d143      	bne.n	8003b1e <_malloc_r+0xd6>
 8003a96:	2c00      	cmp	r4, #0
 8003a98:	d04b      	beq.n	8003b32 <_malloc_r+0xea>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	4639      	mov	r1, r7
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	eb04 0903 	add.w	r9, r4, r3
 8003aa4:	f000 fc6c 	bl	8004380 <_sbrk_r>
 8003aa8:	4581      	cmp	r9, r0
 8003aaa:	d142      	bne.n	8003b32 <_malloc_r+0xea>
 8003aac:	6821      	ldr	r1, [r4, #0]
 8003aae:	1a6d      	subs	r5, r5, r1
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f7ff ffa6 	bl	8003a04 <sbrk_aligned>
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d03a      	beq.n	8003b32 <_malloc_r+0xea>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	442b      	add	r3, r5
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	bb62      	cbnz	r2, 8003b24 <_malloc_r+0xdc>
 8003aca:	f8c8 7000 	str.w	r7, [r8]
 8003ace:	e00f      	b.n	8003af0 <_malloc_r+0xa8>
 8003ad0:	6822      	ldr	r2, [r4, #0]
 8003ad2:	1b52      	subs	r2, r2, r5
 8003ad4:	d420      	bmi.n	8003b18 <_malloc_r+0xd0>
 8003ad6:	2a0b      	cmp	r2, #11
 8003ad8:	d917      	bls.n	8003b0a <_malloc_r+0xc2>
 8003ada:	1961      	adds	r1, r4, r5
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	6025      	str	r5, [r4, #0]
 8003ae0:	bf18      	it	ne
 8003ae2:	6059      	strne	r1, [r3, #4]
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	bf08      	it	eq
 8003ae8:	f8c8 1000 	streq.w	r1, [r8]
 8003aec:	5162      	str	r2, [r4, r5]
 8003aee:	604b      	str	r3, [r1, #4]
 8003af0:	4630      	mov	r0, r6
 8003af2:	f000 f82f 	bl	8003b54 <__malloc_unlock>
 8003af6:	f104 000b 	add.w	r0, r4, #11
 8003afa:	1d23      	adds	r3, r4, #4
 8003afc:	f020 0007 	bic.w	r0, r0, #7
 8003b00:	1ac2      	subs	r2, r0, r3
 8003b02:	bf1c      	itt	ne
 8003b04:	1a1b      	subne	r3, r3, r0
 8003b06:	50a3      	strne	r3, [r4, r2]
 8003b08:	e7af      	b.n	8003a6a <_malloc_r+0x22>
 8003b0a:	6862      	ldr	r2, [r4, #4]
 8003b0c:	42a3      	cmp	r3, r4
 8003b0e:	bf0c      	ite	eq
 8003b10:	f8c8 2000 	streq.w	r2, [r8]
 8003b14:	605a      	strne	r2, [r3, #4]
 8003b16:	e7eb      	b.n	8003af0 <_malloc_r+0xa8>
 8003b18:	4623      	mov	r3, r4
 8003b1a:	6864      	ldr	r4, [r4, #4]
 8003b1c:	e7ae      	b.n	8003a7c <_malloc_r+0x34>
 8003b1e:	463c      	mov	r4, r7
 8003b20:	687f      	ldr	r7, [r7, #4]
 8003b22:	e7b6      	b.n	8003a92 <_malloc_r+0x4a>
 8003b24:	461a      	mov	r2, r3
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	d1fb      	bne.n	8003b24 <_malloc_r+0xdc>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6053      	str	r3, [r2, #4]
 8003b30:	e7de      	b.n	8003af0 <_malloc_r+0xa8>
 8003b32:	230c      	movs	r3, #12
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 f80c 	bl	8003b54 <__malloc_unlock>
 8003b3c:	e794      	b.n	8003a68 <_malloc_r+0x20>
 8003b3e:	6005      	str	r5, [r0, #0]
 8003b40:	e7d6      	b.n	8003af0 <_malloc_r+0xa8>
 8003b42:	bf00      	nop
 8003b44:	2000028c 	.word	0x2000028c

08003b48 <__malloc_lock>:
 8003b48:	4801      	ldr	r0, [pc, #4]	@ (8003b50 <__malloc_lock+0x8>)
 8003b4a:	f7ff bf0e 	b.w	800396a <__retarget_lock_acquire_recursive>
 8003b4e:	bf00      	nop
 8003b50:	20000284 	.word	0x20000284

08003b54 <__malloc_unlock>:
 8003b54:	4801      	ldr	r0, [pc, #4]	@ (8003b5c <__malloc_unlock+0x8>)
 8003b56:	f7ff bf09 	b.w	800396c <__retarget_lock_release_recursive>
 8003b5a:	bf00      	nop
 8003b5c:	20000284 	.word	0x20000284

08003b60 <__sfputc_r>:
 8003b60:	6893      	ldr	r3, [r2, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	b410      	push	{r4}
 8003b68:	6093      	str	r3, [r2, #8]
 8003b6a:	da08      	bge.n	8003b7e <__sfputc_r+0x1e>
 8003b6c:	6994      	ldr	r4, [r2, #24]
 8003b6e:	42a3      	cmp	r3, r4
 8003b70:	db01      	blt.n	8003b76 <__sfputc_r+0x16>
 8003b72:	290a      	cmp	r1, #10
 8003b74:	d103      	bne.n	8003b7e <__sfputc_r+0x1e>
 8003b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b7a:	f000 bb6d 	b.w	8004258 <__swbuf_r>
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	1c58      	adds	r0, r3, #1
 8003b82:	6010      	str	r0, [r2, #0]
 8003b84:	7019      	strb	r1, [r3, #0]
 8003b86:	4608      	mov	r0, r1
 8003b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <__sfputs_r>:
 8003b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b90:	4606      	mov	r6, r0
 8003b92:	460f      	mov	r7, r1
 8003b94:	4614      	mov	r4, r2
 8003b96:	18d5      	adds	r5, r2, r3
 8003b98:	42ac      	cmp	r4, r5
 8003b9a:	d101      	bne.n	8003ba0 <__sfputs_r+0x12>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e007      	b.n	8003bb0 <__sfputs_r+0x22>
 8003ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba4:	463a      	mov	r2, r7
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f7ff ffda 	bl	8003b60 <__sfputc_r>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d1f3      	bne.n	8003b98 <__sfputs_r+0xa>
 8003bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bb4 <_vfiprintf_r>:
 8003bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb8:	460d      	mov	r5, r1
 8003bba:	b09d      	sub	sp, #116	@ 0x74
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	4698      	mov	r8, r3
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	b118      	cbz	r0, 8003bcc <_vfiprintf_r+0x18>
 8003bc4:	6a03      	ldr	r3, [r0, #32]
 8003bc6:	b90b      	cbnz	r3, 8003bcc <_vfiprintf_r+0x18>
 8003bc8:	f7ff fdca 	bl	8003760 <__sinit>
 8003bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bce:	07d9      	lsls	r1, r3, #31
 8003bd0:	d405      	bmi.n	8003bde <_vfiprintf_r+0x2a>
 8003bd2:	89ab      	ldrh	r3, [r5, #12]
 8003bd4:	059a      	lsls	r2, r3, #22
 8003bd6:	d402      	bmi.n	8003bde <_vfiprintf_r+0x2a>
 8003bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bda:	f7ff fec6 	bl	800396a <__retarget_lock_acquire_recursive>
 8003bde:	89ab      	ldrh	r3, [r5, #12]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	d501      	bpl.n	8003be8 <_vfiprintf_r+0x34>
 8003be4:	692b      	ldr	r3, [r5, #16]
 8003be6:	b99b      	cbnz	r3, 8003c10 <_vfiprintf_r+0x5c>
 8003be8:	4629      	mov	r1, r5
 8003bea:	4630      	mov	r0, r6
 8003bec:	f000 fb72 	bl	80042d4 <__swsetup_r>
 8003bf0:	b170      	cbz	r0, 8003c10 <_vfiprintf_r+0x5c>
 8003bf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bf4:	07dc      	lsls	r4, r3, #31
 8003bf6:	d504      	bpl.n	8003c02 <_vfiprintf_r+0x4e>
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	b01d      	add	sp, #116	@ 0x74
 8003bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c02:	89ab      	ldrh	r3, [r5, #12]
 8003c04:	0598      	lsls	r0, r3, #22
 8003c06:	d4f7      	bmi.n	8003bf8 <_vfiprintf_r+0x44>
 8003c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c0a:	f7ff feaf 	bl	800396c <__retarget_lock_release_recursive>
 8003c0e:	e7f3      	b.n	8003bf8 <_vfiprintf_r+0x44>
 8003c10:	2300      	movs	r3, #0
 8003c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c14:	2320      	movs	r3, #32
 8003c16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c1e:	2330      	movs	r3, #48	@ 0x30
 8003c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003dd0 <_vfiprintf_r+0x21c>
 8003c24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c28:	f04f 0901 	mov.w	r9, #1
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	469a      	mov	sl, r3
 8003c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c34:	b10a      	cbz	r2, 8003c3a <_vfiprintf_r+0x86>
 8003c36:	2a25      	cmp	r2, #37	@ 0x25
 8003c38:	d1f9      	bne.n	8003c2e <_vfiprintf_r+0x7a>
 8003c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c3e:	d00b      	beq.n	8003c58 <_vfiprintf_r+0xa4>
 8003c40:	465b      	mov	r3, fp
 8003c42:	4622      	mov	r2, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	4630      	mov	r0, r6
 8003c48:	f7ff ffa1 	bl	8003b8e <__sfputs_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f000 80a7 	beq.w	8003da0 <_vfiprintf_r+0x1ec>
 8003c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c54:	445a      	add	r2, fp
 8003c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c58:	f89a 3000 	ldrb.w	r3, [sl]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 809f 	beq.w	8003da0 <_vfiprintf_r+0x1ec>
 8003c62:	2300      	movs	r3, #0
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c6c:	f10a 0a01 	add.w	sl, sl, #1
 8003c70:	9304      	str	r3, [sp, #16]
 8003c72:	9307      	str	r3, [sp, #28]
 8003c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c7a:	4654      	mov	r4, sl
 8003c7c:	2205      	movs	r2, #5
 8003c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c82:	4853      	ldr	r0, [pc, #332]	@ (8003dd0 <_vfiprintf_r+0x21c>)
 8003c84:	f7fc fac4 	bl	8000210 <memchr>
 8003c88:	9a04      	ldr	r2, [sp, #16]
 8003c8a:	b9d8      	cbnz	r0, 8003cc4 <_vfiprintf_r+0x110>
 8003c8c:	06d1      	lsls	r1, r2, #27
 8003c8e:	bf44      	itt	mi
 8003c90:	2320      	movmi	r3, #32
 8003c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c96:	0713      	lsls	r3, r2, #28
 8003c98:	bf44      	itt	mi
 8003c9a:	232b      	movmi	r3, #43	@ 0x2b
 8003c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ca6:	d015      	beq.n	8003cd4 <_vfiprintf_r+0x120>
 8003ca8:	9a07      	ldr	r2, [sp, #28]
 8003caa:	4654      	mov	r4, sl
 8003cac:	2000      	movs	r0, #0
 8003cae:	f04f 0c0a 	mov.w	ip, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb8:	3b30      	subs	r3, #48	@ 0x30
 8003cba:	2b09      	cmp	r3, #9
 8003cbc:	d94b      	bls.n	8003d56 <_vfiprintf_r+0x1a2>
 8003cbe:	b1b0      	cbz	r0, 8003cee <_vfiprintf_r+0x13a>
 8003cc0:	9207      	str	r2, [sp, #28]
 8003cc2:	e014      	b.n	8003cee <_vfiprintf_r+0x13a>
 8003cc4:	eba0 0308 	sub.w	r3, r0, r8
 8003cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	9304      	str	r3, [sp, #16]
 8003cd0:	46a2      	mov	sl, r4
 8003cd2:	e7d2      	b.n	8003c7a <_vfiprintf_r+0xc6>
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	1d19      	adds	r1, r3, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	9103      	str	r1, [sp, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bfbb      	ittet	lt
 8003ce0:	425b      	neglt	r3, r3
 8003ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ce6:	9307      	strge	r3, [sp, #28]
 8003ce8:	9307      	strlt	r3, [sp, #28]
 8003cea:	bfb8      	it	lt
 8003cec:	9204      	strlt	r2, [sp, #16]
 8003cee:	7823      	ldrb	r3, [r4, #0]
 8003cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cf2:	d10a      	bne.n	8003d0a <_vfiprintf_r+0x156>
 8003cf4:	7863      	ldrb	r3, [r4, #1]
 8003cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cf8:	d132      	bne.n	8003d60 <_vfiprintf_r+0x1ac>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	1d1a      	adds	r2, r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	9203      	str	r2, [sp, #12]
 8003d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d06:	3402      	adds	r4, #2
 8003d08:	9305      	str	r3, [sp, #20]
 8003d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003de0 <_vfiprintf_r+0x22c>
 8003d0e:	7821      	ldrb	r1, [r4, #0]
 8003d10:	2203      	movs	r2, #3
 8003d12:	4650      	mov	r0, sl
 8003d14:	f7fc fa7c 	bl	8000210 <memchr>
 8003d18:	b138      	cbz	r0, 8003d2a <_vfiprintf_r+0x176>
 8003d1a:	9b04      	ldr	r3, [sp, #16]
 8003d1c:	eba0 000a 	sub.w	r0, r0, sl
 8003d20:	2240      	movs	r2, #64	@ 0x40
 8003d22:	4082      	lsls	r2, r0
 8003d24:	4313      	orrs	r3, r2
 8003d26:	3401      	adds	r4, #1
 8003d28:	9304      	str	r3, [sp, #16]
 8003d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d2e:	4829      	ldr	r0, [pc, #164]	@ (8003dd4 <_vfiprintf_r+0x220>)
 8003d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d34:	2206      	movs	r2, #6
 8003d36:	f7fc fa6b 	bl	8000210 <memchr>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d03f      	beq.n	8003dbe <_vfiprintf_r+0x20a>
 8003d3e:	4b26      	ldr	r3, [pc, #152]	@ (8003dd8 <_vfiprintf_r+0x224>)
 8003d40:	bb1b      	cbnz	r3, 8003d8a <_vfiprintf_r+0x1d6>
 8003d42:	9b03      	ldr	r3, [sp, #12]
 8003d44:	3307      	adds	r3, #7
 8003d46:	f023 0307 	bic.w	r3, r3, #7
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	9303      	str	r3, [sp, #12]
 8003d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d50:	443b      	add	r3, r7
 8003d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d54:	e76a      	b.n	8003c2c <_vfiprintf_r+0x78>
 8003d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	e7a8      	b.n	8003cb2 <_vfiprintf_r+0xfe>
 8003d60:	2300      	movs	r3, #0
 8003d62:	3401      	adds	r4, #1
 8003d64:	9305      	str	r3, [sp, #20]
 8003d66:	4619      	mov	r1, r3
 8003d68:	f04f 0c0a 	mov.w	ip, #10
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d72:	3a30      	subs	r2, #48	@ 0x30
 8003d74:	2a09      	cmp	r2, #9
 8003d76:	d903      	bls.n	8003d80 <_vfiprintf_r+0x1cc>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0c6      	beq.n	8003d0a <_vfiprintf_r+0x156>
 8003d7c:	9105      	str	r1, [sp, #20]
 8003d7e:	e7c4      	b.n	8003d0a <_vfiprintf_r+0x156>
 8003d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d84:	4604      	mov	r4, r0
 8003d86:	2301      	movs	r3, #1
 8003d88:	e7f0      	b.n	8003d6c <_vfiprintf_r+0x1b8>
 8003d8a:	ab03      	add	r3, sp, #12
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	462a      	mov	r2, r5
 8003d90:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <_vfiprintf_r+0x228>)
 8003d92:	a904      	add	r1, sp, #16
 8003d94:	4630      	mov	r0, r6
 8003d96:	f3af 8000 	nop.w
 8003d9a:	4607      	mov	r7, r0
 8003d9c:	1c78      	adds	r0, r7, #1
 8003d9e:	d1d6      	bne.n	8003d4e <_vfiprintf_r+0x19a>
 8003da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003da2:	07d9      	lsls	r1, r3, #31
 8003da4:	d405      	bmi.n	8003db2 <_vfiprintf_r+0x1fe>
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	059a      	lsls	r2, r3, #22
 8003daa:	d402      	bmi.n	8003db2 <_vfiprintf_r+0x1fe>
 8003dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dae:	f7ff fddd 	bl	800396c <__retarget_lock_release_recursive>
 8003db2:	89ab      	ldrh	r3, [r5, #12]
 8003db4:	065b      	lsls	r3, r3, #25
 8003db6:	f53f af1f 	bmi.w	8003bf8 <_vfiprintf_r+0x44>
 8003dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dbc:	e71e      	b.n	8003bfc <_vfiprintf_r+0x48>
 8003dbe:	ab03      	add	r3, sp, #12
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	462a      	mov	r2, r5
 8003dc4:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <_vfiprintf_r+0x228>)
 8003dc6:	a904      	add	r1, sp, #16
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f879 	bl	8003ec0 <_printf_i>
 8003dce:	e7e4      	b.n	8003d9a <_vfiprintf_r+0x1e6>
 8003dd0:	080044f4 	.word	0x080044f4
 8003dd4:	080044fe 	.word	0x080044fe
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	08003b8f 	.word	0x08003b8f
 8003de0:	080044fa 	.word	0x080044fa

08003de4 <_printf_common>:
 8003de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	4616      	mov	r6, r2
 8003dea:	4698      	mov	r8, r3
 8003dec:	688a      	ldr	r2, [r1, #8]
 8003dee:	690b      	ldr	r3, [r1, #16]
 8003df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003df4:	4293      	cmp	r3, r2
 8003df6:	bfb8      	it	lt
 8003df8:	4613      	movlt	r3, r2
 8003dfa:	6033      	str	r3, [r6, #0]
 8003dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e00:	4607      	mov	r7, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	b10a      	cbz	r2, 8003e0a <_printf_common+0x26>
 8003e06:	3301      	adds	r3, #1
 8003e08:	6033      	str	r3, [r6, #0]
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	0699      	lsls	r1, r3, #26
 8003e0e:	bf42      	ittt	mi
 8003e10:	6833      	ldrmi	r3, [r6, #0]
 8003e12:	3302      	addmi	r3, #2
 8003e14:	6033      	strmi	r3, [r6, #0]
 8003e16:	6825      	ldr	r5, [r4, #0]
 8003e18:	f015 0506 	ands.w	r5, r5, #6
 8003e1c:	d106      	bne.n	8003e2c <_printf_common+0x48>
 8003e1e:	f104 0a19 	add.w	sl, r4, #25
 8003e22:	68e3      	ldr	r3, [r4, #12]
 8003e24:	6832      	ldr	r2, [r6, #0]
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	42ab      	cmp	r3, r5
 8003e2a:	dc26      	bgt.n	8003e7a <_printf_common+0x96>
 8003e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	3b00      	subs	r3, #0
 8003e34:	bf18      	it	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	0692      	lsls	r2, r2, #26
 8003e3a:	d42b      	bmi.n	8003e94 <_printf_common+0xb0>
 8003e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e40:	4641      	mov	r1, r8
 8003e42:	4638      	mov	r0, r7
 8003e44:	47c8      	blx	r9
 8003e46:	3001      	adds	r0, #1
 8003e48:	d01e      	beq.n	8003e88 <_printf_common+0xa4>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	6922      	ldr	r2, [r4, #16]
 8003e4e:	f003 0306 	and.w	r3, r3, #6
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	bf02      	ittt	eq
 8003e56:	68e5      	ldreq	r5, [r4, #12]
 8003e58:	6833      	ldreq	r3, [r6, #0]
 8003e5a:	1aed      	subeq	r5, r5, r3
 8003e5c:	68a3      	ldr	r3, [r4, #8]
 8003e5e:	bf0c      	ite	eq
 8003e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e64:	2500      	movne	r5, #0
 8003e66:	4293      	cmp	r3, r2
 8003e68:	bfc4      	itt	gt
 8003e6a:	1a9b      	subgt	r3, r3, r2
 8003e6c:	18ed      	addgt	r5, r5, r3
 8003e6e:	2600      	movs	r6, #0
 8003e70:	341a      	adds	r4, #26
 8003e72:	42b5      	cmp	r5, r6
 8003e74:	d11a      	bne.n	8003eac <_printf_common+0xc8>
 8003e76:	2000      	movs	r0, #0
 8003e78:	e008      	b.n	8003e8c <_printf_common+0xa8>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4652      	mov	r2, sl
 8003e7e:	4641      	mov	r1, r8
 8003e80:	4638      	mov	r0, r7
 8003e82:	47c8      	blx	r9
 8003e84:	3001      	adds	r0, #1
 8003e86:	d103      	bne.n	8003e90 <_printf_common+0xac>
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e90:	3501      	adds	r5, #1
 8003e92:	e7c6      	b.n	8003e22 <_printf_common+0x3e>
 8003e94:	18e1      	adds	r1, r4, r3
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	2030      	movs	r0, #48	@ 0x30
 8003e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e9e:	4422      	add	r2, r4
 8003ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	e7c7      	b.n	8003e3c <_printf_common+0x58>
 8003eac:	2301      	movs	r3, #1
 8003eae:	4622      	mov	r2, r4
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	47c8      	blx	r9
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d0e6      	beq.n	8003e88 <_printf_common+0xa4>
 8003eba:	3601      	adds	r6, #1
 8003ebc:	e7d9      	b.n	8003e72 <_printf_common+0x8e>
	...

08003ec0 <_printf_i>:
 8003ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec4:	7e0f      	ldrb	r7, [r1, #24]
 8003ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ec8:	2f78      	cmp	r7, #120	@ 0x78
 8003eca:	4691      	mov	r9, r2
 8003ecc:	4680      	mov	r8, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	469a      	mov	sl, r3
 8003ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ed6:	d807      	bhi.n	8003ee8 <_printf_i+0x28>
 8003ed8:	2f62      	cmp	r7, #98	@ 0x62
 8003eda:	d80a      	bhi.n	8003ef2 <_printf_i+0x32>
 8003edc:	2f00      	cmp	r7, #0
 8003ede:	f000 80d2 	beq.w	8004086 <_printf_i+0x1c6>
 8003ee2:	2f58      	cmp	r7, #88	@ 0x58
 8003ee4:	f000 80b9 	beq.w	800405a <_printf_i+0x19a>
 8003ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ef0:	e03a      	b.n	8003f68 <_printf_i+0xa8>
 8003ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ef6:	2b15      	cmp	r3, #21
 8003ef8:	d8f6      	bhi.n	8003ee8 <_printf_i+0x28>
 8003efa:	a101      	add	r1, pc, #4	@ (adr r1, 8003f00 <_printf_i+0x40>)
 8003efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	08003f6d 	.word	0x08003f6d
 8003f08:	08003ee9 	.word	0x08003ee9
 8003f0c:	08003ee9 	.word	0x08003ee9
 8003f10:	08003ee9 	.word	0x08003ee9
 8003f14:	08003ee9 	.word	0x08003ee9
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003ee9 	.word	0x08003ee9
 8003f20:	08003ee9 	.word	0x08003ee9
 8003f24:	08003ee9 	.word	0x08003ee9
 8003f28:	08003ee9 	.word	0x08003ee9
 8003f2c:	0800406d 	.word	0x0800406d
 8003f30:	08003f97 	.word	0x08003f97
 8003f34:	08004027 	.word	0x08004027
 8003f38:	08003ee9 	.word	0x08003ee9
 8003f3c:	08003ee9 	.word	0x08003ee9
 8003f40:	0800408f 	.word	0x0800408f
 8003f44:	08003ee9 	.word	0x08003ee9
 8003f48:	08003f97 	.word	0x08003f97
 8003f4c:	08003ee9 	.word	0x08003ee9
 8003f50:	08003ee9 	.word	0x08003ee9
 8003f54:	0800402f 	.word	0x0800402f
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6032      	str	r2, [r6, #0]
 8003f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e09d      	b.n	80040a8 <_printf_i+0x1e8>
 8003f6c:	6833      	ldr	r3, [r6, #0]
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	1d19      	adds	r1, r3, #4
 8003f72:	6031      	str	r1, [r6, #0]
 8003f74:	0606      	lsls	r6, r0, #24
 8003f76:	d501      	bpl.n	8003f7c <_printf_i+0xbc>
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	e003      	b.n	8003f84 <_printf_i+0xc4>
 8003f7c:	0645      	lsls	r5, r0, #25
 8003f7e:	d5fb      	bpl.n	8003f78 <_printf_i+0xb8>
 8003f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	da03      	bge.n	8003f90 <_printf_i+0xd0>
 8003f88:	232d      	movs	r3, #45	@ 0x2d
 8003f8a:	426d      	negs	r5, r5
 8003f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f90:	4859      	ldr	r0, [pc, #356]	@ (80040f8 <_printf_i+0x238>)
 8003f92:	230a      	movs	r3, #10
 8003f94:	e011      	b.n	8003fba <_printf_i+0xfa>
 8003f96:	6821      	ldr	r1, [r4, #0]
 8003f98:	6833      	ldr	r3, [r6, #0]
 8003f9a:	0608      	lsls	r0, r1, #24
 8003f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fa0:	d402      	bmi.n	8003fa8 <_printf_i+0xe8>
 8003fa2:	0649      	lsls	r1, r1, #25
 8003fa4:	bf48      	it	mi
 8003fa6:	b2ad      	uxthmi	r5, r5
 8003fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003faa:	4853      	ldr	r0, [pc, #332]	@ (80040f8 <_printf_i+0x238>)
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	bf14      	ite	ne
 8003fb0:	230a      	movne	r3, #10
 8003fb2:	2308      	moveq	r3, #8
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fba:	6866      	ldr	r6, [r4, #4]
 8003fbc:	60a6      	str	r6, [r4, #8]
 8003fbe:	2e00      	cmp	r6, #0
 8003fc0:	bfa2      	ittt	ge
 8003fc2:	6821      	ldrge	r1, [r4, #0]
 8003fc4:	f021 0104 	bicge.w	r1, r1, #4
 8003fc8:	6021      	strge	r1, [r4, #0]
 8003fca:	b90d      	cbnz	r5, 8003fd0 <_printf_i+0x110>
 8003fcc:	2e00      	cmp	r6, #0
 8003fce:	d04b      	beq.n	8004068 <_printf_i+0x1a8>
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8003fda:	5dc7      	ldrb	r7, [r0, r7]
 8003fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fe0:	462f      	mov	r7, r5
 8003fe2:	42bb      	cmp	r3, r7
 8003fe4:	460d      	mov	r5, r1
 8003fe6:	d9f4      	bls.n	8003fd2 <_printf_i+0x112>
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d10b      	bne.n	8004004 <_printf_i+0x144>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	07df      	lsls	r7, r3, #31
 8003ff0:	d508      	bpl.n	8004004 <_printf_i+0x144>
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	6861      	ldr	r1, [r4, #4]
 8003ff6:	4299      	cmp	r1, r3
 8003ff8:	bfde      	ittt	le
 8003ffa:	2330      	movle	r3, #48	@ 0x30
 8003ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004000:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004004:	1b92      	subs	r2, r2, r6
 8004006:	6122      	str	r2, [r4, #16]
 8004008:	f8cd a000 	str.w	sl, [sp]
 800400c:	464b      	mov	r3, r9
 800400e:	aa03      	add	r2, sp, #12
 8004010:	4621      	mov	r1, r4
 8004012:	4640      	mov	r0, r8
 8004014:	f7ff fee6 	bl	8003de4 <_printf_common>
 8004018:	3001      	adds	r0, #1
 800401a:	d14a      	bne.n	80040b2 <_printf_i+0x1f2>
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	b004      	add	sp, #16
 8004022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	f043 0320 	orr.w	r3, r3, #32
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	4833      	ldr	r0, [pc, #204]	@ (80040fc <_printf_i+0x23c>)
 8004030:	2778      	movs	r7, #120	@ 0x78
 8004032:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	6831      	ldr	r1, [r6, #0]
 800403a:	061f      	lsls	r7, r3, #24
 800403c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004040:	d402      	bmi.n	8004048 <_printf_i+0x188>
 8004042:	065f      	lsls	r7, r3, #25
 8004044:	bf48      	it	mi
 8004046:	b2ad      	uxthmi	r5, r5
 8004048:	6031      	str	r1, [r6, #0]
 800404a:	07d9      	lsls	r1, r3, #31
 800404c:	bf44      	itt	mi
 800404e:	f043 0320 	orrmi.w	r3, r3, #32
 8004052:	6023      	strmi	r3, [r4, #0]
 8004054:	b11d      	cbz	r5, 800405e <_printf_i+0x19e>
 8004056:	2310      	movs	r3, #16
 8004058:	e7ac      	b.n	8003fb4 <_printf_i+0xf4>
 800405a:	4827      	ldr	r0, [pc, #156]	@ (80040f8 <_printf_i+0x238>)
 800405c:	e7e9      	b.n	8004032 <_printf_i+0x172>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	f023 0320 	bic.w	r3, r3, #32
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	e7f6      	b.n	8004056 <_printf_i+0x196>
 8004068:	4616      	mov	r6, r2
 800406a:	e7bd      	b.n	8003fe8 <_printf_i+0x128>
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	6961      	ldr	r1, [r4, #20]
 8004072:	1d18      	adds	r0, r3, #4
 8004074:	6030      	str	r0, [r6, #0]
 8004076:	062e      	lsls	r6, r5, #24
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	d501      	bpl.n	8004080 <_printf_i+0x1c0>
 800407c:	6019      	str	r1, [r3, #0]
 800407e:	e002      	b.n	8004086 <_printf_i+0x1c6>
 8004080:	0668      	lsls	r0, r5, #25
 8004082:	d5fb      	bpl.n	800407c <_printf_i+0x1bc>
 8004084:	8019      	strh	r1, [r3, #0]
 8004086:	2300      	movs	r3, #0
 8004088:	6123      	str	r3, [r4, #16]
 800408a:	4616      	mov	r6, r2
 800408c:	e7bc      	b.n	8004008 <_printf_i+0x148>
 800408e:	6833      	ldr	r3, [r6, #0]
 8004090:	1d1a      	adds	r2, r3, #4
 8004092:	6032      	str	r2, [r6, #0]
 8004094:	681e      	ldr	r6, [r3, #0]
 8004096:	6862      	ldr	r2, [r4, #4]
 8004098:	2100      	movs	r1, #0
 800409a:	4630      	mov	r0, r6
 800409c:	f7fc f8b8 	bl	8000210 <memchr>
 80040a0:	b108      	cbz	r0, 80040a6 <_printf_i+0x1e6>
 80040a2:	1b80      	subs	r0, r0, r6
 80040a4:	6060      	str	r0, [r4, #4]
 80040a6:	6863      	ldr	r3, [r4, #4]
 80040a8:	6123      	str	r3, [r4, #16]
 80040aa:	2300      	movs	r3, #0
 80040ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040b0:	e7aa      	b.n	8004008 <_printf_i+0x148>
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	4632      	mov	r2, r6
 80040b6:	4649      	mov	r1, r9
 80040b8:	4640      	mov	r0, r8
 80040ba:	47d0      	blx	sl
 80040bc:	3001      	adds	r0, #1
 80040be:	d0ad      	beq.n	800401c <_printf_i+0x15c>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	079b      	lsls	r3, r3, #30
 80040c4:	d413      	bmi.n	80040ee <_printf_i+0x22e>
 80040c6:	68e0      	ldr	r0, [r4, #12]
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	4298      	cmp	r0, r3
 80040cc:	bfb8      	it	lt
 80040ce:	4618      	movlt	r0, r3
 80040d0:	e7a6      	b.n	8004020 <_printf_i+0x160>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4632      	mov	r2, r6
 80040d6:	4649      	mov	r1, r9
 80040d8:	4640      	mov	r0, r8
 80040da:	47d0      	blx	sl
 80040dc:	3001      	adds	r0, #1
 80040de:	d09d      	beq.n	800401c <_printf_i+0x15c>
 80040e0:	3501      	adds	r5, #1
 80040e2:	68e3      	ldr	r3, [r4, #12]
 80040e4:	9903      	ldr	r1, [sp, #12]
 80040e6:	1a5b      	subs	r3, r3, r1
 80040e8:	42ab      	cmp	r3, r5
 80040ea:	dcf2      	bgt.n	80040d2 <_printf_i+0x212>
 80040ec:	e7eb      	b.n	80040c6 <_printf_i+0x206>
 80040ee:	2500      	movs	r5, #0
 80040f0:	f104 0619 	add.w	r6, r4, #25
 80040f4:	e7f5      	b.n	80040e2 <_printf_i+0x222>
 80040f6:	bf00      	nop
 80040f8:	08004505 	.word	0x08004505
 80040fc:	08004516 	.word	0x08004516

08004100 <__sflush_r>:
 8004100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004108:	0716      	lsls	r6, r2, #28
 800410a:	4605      	mov	r5, r0
 800410c:	460c      	mov	r4, r1
 800410e:	d454      	bmi.n	80041ba <__sflush_r+0xba>
 8004110:	684b      	ldr	r3, [r1, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	dc02      	bgt.n	800411c <__sflush_r+0x1c>
 8004116:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	dd48      	ble.n	80041ae <__sflush_r+0xae>
 800411c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800411e:	2e00      	cmp	r6, #0
 8004120:	d045      	beq.n	80041ae <__sflush_r+0xae>
 8004122:	2300      	movs	r3, #0
 8004124:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004128:	682f      	ldr	r7, [r5, #0]
 800412a:	6a21      	ldr	r1, [r4, #32]
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	d030      	beq.n	8004192 <__sflush_r+0x92>
 8004130:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	0759      	lsls	r1, r3, #29
 8004136:	d505      	bpl.n	8004144 <__sflush_r+0x44>
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800413e:	b10b      	cbz	r3, 8004144 <__sflush_r+0x44>
 8004140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	4628      	mov	r0, r5
 800414c:	47b0      	blx	r6
 800414e:	1c43      	adds	r3, r0, #1
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	d106      	bne.n	8004162 <__sflush_r+0x62>
 8004154:	6829      	ldr	r1, [r5, #0]
 8004156:	291d      	cmp	r1, #29
 8004158:	d82b      	bhi.n	80041b2 <__sflush_r+0xb2>
 800415a:	4a2a      	ldr	r2, [pc, #168]	@ (8004204 <__sflush_r+0x104>)
 800415c:	410a      	asrs	r2, r1
 800415e:	07d6      	lsls	r6, r2, #31
 8004160:	d427      	bmi.n	80041b2 <__sflush_r+0xb2>
 8004162:	2200      	movs	r2, #0
 8004164:	6062      	str	r2, [r4, #4]
 8004166:	04d9      	lsls	r1, r3, #19
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	6022      	str	r2, [r4, #0]
 800416c:	d504      	bpl.n	8004178 <__sflush_r+0x78>
 800416e:	1c42      	adds	r2, r0, #1
 8004170:	d101      	bne.n	8004176 <__sflush_r+0x76>
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	b903      	cbnz	r3, 8004178 <__sflush_r+0x78>
 8004176:	6560      	str	r0, [r4, #84]	@ 0x54
 8004178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800417a:	602f      	str	r7, [r5, #0]
 800417c:	b1b9      	cbz	r1, 80041ae <__sflush_r+0xae>
 800417e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004182:	4299      	cmp	r1, r3
 8004184:	d002      	beq.n	800418c <__sflush_r+0x8c>
 8004186:	4628      	mov	r0, r5
 8004188:	f7ff fbf2 	bl	8003970 <_free_r>
 800418c:	2300      	movs	r3, #0
 800418e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004190:	e00d      	b.n	80041ae <__sflush_r+0xae>
 8004192:	2301      	movs	r3, #1
 8004194:	4628      	mov	r0, r5
 8004196:	47b0      	blx	r6
 8004198:	4602      	mov	r2, r0
 800419a:	1c50      	adds	r0, r2, #1
 800419c:	d1c9      	bne.n	8004132 <__sflush_r+0x32>
 800419e:	682b      	ldr	r3, [r5, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0c6      	beq.n	8004132 <__sflush_r+0x32>
 80041a4:	2b1d      	cmp	r3, #29
 80041a6:	d001      	beq.n	80041ac <__sflush_r+0xac>
 80041a8:	2b16      	cmp	r3, #22
 80041aa:	d11e      	bne.n	80041ea <__sflush_r+0xea>
 80041ac:	602f      	str	r7, [r5, #0]
 80041ae:	2000      	movs	r0, #0
 80041b0:	e022      	b.n	80041f8 <__sflush_r+0xf8>
 80041b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	e01b      	b.n	80041f2 <__sflush_r+0xf2>
 80041ba:	690f      	ldr	r7, [r1, #16]
 80041bc:	2f00      	cmp	r7, #0
 80041be:	d0f6      	beq.n	80041ae <__sflush_r+0xae>
 80041c0:	0793      	lsls	r3, r2, #30
 80041c2:	680e      	ldr	r6, [r1, #0]
 80041c4:	bf08      	it	eq
 80041c6:	694b      	ldreq	r3, [r1, #20]
 80041c8:	600f      	str	r7, [r1, #0]
 80041ca:	bf18      	it	ne
 80041cc:	2300      	movne	r3, #0
 80041ce:	eba6 0807 	sub.w	r8, r6, r7
 80041d2:	608b      	str	r3, [r1, #8]
 80041d4:	f1b8 0f00 	cmp.w	r8, #0
 80041d8:	dde9      	ble.n	80041ae <__sflush_r+0xae>
 80041da:	6a21      	ldr	r1, [r4, #32]
 80041dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041de:	4643      	mov	r3, r8
 80041e0:	463a      	mov	r2, r7
 80041e2:	4628      	mov	r0, r5
 80041e4:	47b0      	blx	r6
 80041e6:	2800      	cmp	r0, #0
 80041e8:	dc08      	bgt.n	80041fc <__sflush_r+0xfc>
 80041ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041fc:	4407      	add	r7, r0
 80041fe:	eba8 0800 	sub.w	r8, r8, r0
 8004202:	e7e7      	b.n	80041d4 <__sflush_r+0xd4>
 8004204:	dfbffffe 	.word	0xdfbffffe

08004208 <_fflush_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	4605      	mov	r5, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b913      	cbnz	r3, 8004218 <_fflush_r+0x10>
 8004212:	2500      	movs	r5, #0
 8004214:	4628      	mov	r0, r5
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	b118      	cbz	r0, 8004222 <_fflush_r+0x1a>
 800421a:	6a03      	ldr	r3, [r0, #32]
 800421c:	b90b      	cbnz	r3, 8004222 <_fflush_r+0x1a>
 800421e:	f7ff fa9f 	bl	8003760 <__sinit>
 8004222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f3      	beq.n	8004212 <_fflush_r+0xa>
 800422a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800422c:	07d0      	lsls	r0, r2, #31
 800422e:	d404      	bmi.n	800423a <_fflush_r+0x32>
 8004230:	0599      	lsls	r1, r3, #22
 8004232:	d402      	bmi.n	800423a <_fflush_r+0x32>
 8004234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004236:	f7ff fb98 	bl	800396a <__retarget_lock_acquire_recursive>
 800423a:	4628      	mov	r0, r5
 800423c:	4621      	mov	r1, r4
 800423e:	f7ff ff5f 	bl	8004100 <__sflush_r>
 8004242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004244:	07da      	lsls	r2, r3, #31
 8004246:	4605      	mov	r5, r0
 8004248:	d4e4      	bmi.n	8004214 <_fflush_r+0xc>
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	059b      	lsls	r3, r3, #22
 800424e:	d4e1      	bmi.n	8004214 <_fflush_r+0xc>
 8004250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004252:	f7ff fb8b 	bl	800396c <__retarget_lock_release_recursive>
 8004256:	e7dd      	b.n	8004214 <_fflush_r+0xc>

08004258 <__swbuf_r>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	460e      	mov	r6, r1
 800425c:	4614      	mov	r4, r2
 800425e:	4605      	mov	r5, r0
 8004260:	b118      	cbz	r0, 800426a <__swbuf_r+0x12>
 8004262:	6a03      	ldr	r3, [r0, #32]
 8004264:	b90b      	cbnz	r3, 800426a <__swbuf_r+0x12>
 8004266:	f7ff fa7b 	bl	8003760 <__sinit>
 800426a:	69a3      	ldr	r3, [r4, #24]
 800426c:	60a3      	str	r3, [r4, #8]
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	071a      	lsls	r2, r3, #28
 8004272:	d501      	bpl.n	8004278 <__swbuf_r+0x20>
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	b943      	cbnz	r3, 800428a <__swbuf_r+0x32>
 8004278:	4621      	mov	r1, r4
 800427a:	4628      	mov	r0, r5
 800427c:	f000 f82a 	bl	80042d4 <__swsetup_r>
 8004280:	b118      	cbz	r0, 800428a <__swbuf_r+0x32>
 8004282:	f04f 37ff 	mov.w	r7, #4294967295
 8004286:	4638      	mov	r0, r7
 8004288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	6922      	ldr	r2, [r4, #16]
 800428e:	1a98      	subs	r0, r3, r2
 8004290:	6963      	ldr	r3, [r4, #20]
 8004292:	b2f6      	uxtb	r6, r6
 8004294:	4283      	cmp	r3, r0
 8004296:	4637      	mov	r7, r6
 8004298:	dc05      	bgt.n	80042a6 <__swbuf_r+0x4e>
 800429a:	4621      	mov	r1, r4
 800429c:	4628      	mov	r0, r5
 800429e:	f7ff ffb3 	bl	8004208 <_fflush_r>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d1ed      	bne.n	8004282 <__swbuf_r+0x2a>
 80042a6:	68a3      	ldr	r3, [r4, #8]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	6022      	str	r2, [r4, #0]
 80042b2:	701e      	strb	r6, [r3, #0]
 80042b4:	6962      	ldr	r2, [r4, #20]
 80042b6:	1c43      	adds	r3, r0, #1
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d004      	beq.n	80042c6 <__swbuf_r+0x6e>
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	07db      	lsls	r3, r3, #31
 80042c0:	d5e1      	bpl.n	8004286 <__swbuf_r+0x2e>
 80042c2:	2e0a      	cmp	r6, #10
 80042c4:	d1df      	bne.n	8004286 <__swbuf_r+0x2e>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4628      	mov	r0, r5
 80042ca:	f7ff ff9d 	bl	8004208 <_fflush_r>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d0d9      	beq.n	8004286 <__swbuf_r+0x2e>
 80042d2:	e7d6      	b.n	8004282 <__swbuf_r+0x2a>

080042d4 <__swsetup_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4b29      	ldr	r3, [pc, #164]	@ (800437c <__swsetup_r+0xa8>)
 80042d8:	4605      	mov	r5, r0
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	460c      	mov	r4, r1
 80042de:	b118      	cbz	r0, 80042e8 <__swsetup_r+0x14>
 80042e0:	6a03      	ldr	r3, [r0, #32]
 80042e2:	b90b      	cbnz	r3, 80042e8 <__swsetup_r+0x14>
 80042e4:	f7ff fa3c 	bl	8003760 <__sinit>
 80042e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ec:	0719      	lsls	r1, r3, #28
 80042ee:	d422      	bmi.n	8004336 <__swsetup_r+0x62>
 80042f0:	06da      	lsls	r2, r3, #27
 80042f2:	d407      	bmi.n	8004304 <__swsetup_r+0x30>
 80042f4:	2209      	movs	r2, #9
 80042f6:	602a      	str	r2, [r5, #0]
 80042f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004302:	e033      	b.n	800436c <__swsetup_r+0x98>
 8004304:	0758      	lsls	r0, r3, #29
 8004306:	d512      	bpl.n	800432e <__swsetup_r+0x5a>
 8004308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800430a:	b141      	cbz	r1, 800431e <__swsetup_r+0x4a>
 800430c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004310:	4299      	cmp	r1, r3
 8004312:	d002      	beq.n	800431a <__swsetup_r+0x46>
 8004314:	4628      	mov	r0, r5
 8004316:	f7ff fb2b 	bl	8003970 <_free_r>
 800431a:	2300      	movs	r3, #0
 800431c:	6363      	str	r3, [r4, #52]	@ 0x34
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004324:	81a3      	strh	r3, [r4, #12]
 8004326:	2300      	movs	r3, #0
 8004328:	6063      	str	r3, [r4, #4]
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	6923      	ldr	r3, [r4, #16]
 8004338:	b94b      	cbnz	r3, 800434e <__swsetup_r+0x7a>
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004344:	d003      	beq.n	800434e <__swsetup_r+0x7a>
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	f000 f84f 	bl	80043ec <__smakebuf_r>
 800434e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004352:	f013 0201 	ands.w	r2, r3, #1
 8004356:	d00a      	beq.n	800436e <__swsetup_r+0x9a>
 8004358:	2200      	movs	r2, #0
 800435a:	60a2      	str	r2, [r4, #8]
 800435c:	6962      	ldr	r2, [r4, #20]
 800435e:	4252      	negs	r2, r2
 8004360:	61a2      	str	r2, [r4, #24]
 8004362:	6922      	ldr	r2, [r4, #16]
 8004364:	b942      	cbnz	r2, 8004378 <__swsetup_r+0xa4>
 8004366:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800436a:	d1c5      	bne.n	80042f8 <__swsetup_r+0x24>
 800436c:	bd38      	pop	{r3, r4, r5, pc}
 800436e:	0799      	lsls	r1, r3, #30
 8004370:	bf58      	it	pl
 8004372:	6962      	ldrpl	r2, [r4, #20]
 8004374:	60a2      	str	r2, [r4, #8]
 8004376:	e7f4      	b.n	8004362 <__swsetup_r+0x8e>
 8004378:	2000      	movs	r0, #0
 800437a:	e7f7      	b.n	800436c <__swsetup_r+0x98>
 800437c:	20000018 	.word	0x20000018

08004380 <_sbrk_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d06      	ldr	r5, [pc, #24]	@ (800439c <_sbrk_r+0x1c>)
 8004384:	2300      	movs	r3, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	f7fc fba2 	bl	8000ad4 <_sbrk>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_sbrk_r+0x1a>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_sbrk_r+0x1a>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	20000280 	.word	0x20000280

080043a0 <__swhatbuf_r>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	460c      	mov	r4, r1
 80043a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a8:	2900      	cmp	r1, #0
 80043aa:	b096      	sub	sp, #88	@ 0x58
 80043ac:	4615      	mov	r5, r2
 80043ae:	461e      	mov	r6, r3
 80043b0:	da0d      	bge.n	80043ce <__swhatbuf_r+0x2e>
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80043b8:	f04f 0100 	mov.w	r1, #0
 80043bc:	bf14      	ite	ne
 80043be:	2340      	movne	r3, #64	@ 0x40
 80043c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80043c4:	2000      	movs	r0, #0
 80043c6:	6031      	str	r1, [r6, #0]
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	b016      	add	sp, #88	@ 0x58
 80043cc:	bd70      	pop	{r4, r5, r6, pc}
 80043ce:	466a      	mov	r2, sp
 80043d0:	f000 f848 	bl	8004464 <_fstat_r>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	dbec      	blt.n	80043b2 <__swhatbuf_r+0x12>
 80043d8:	9901      	ldr	r1, [sp, #4]
 80043da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80043de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80043e2:	4259      	negs	r1, r3
 80043e4:	4159      	adcs	r1, r3
 80043e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043ea:	e7eb      	b.n	80043c4 <__swhatbuf_r+0x24>

080043ec <__smakebuf_r>:
 80043ec:	898b      	ldrh	r3, [r1, #12]
 80043ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043f0:	079d      	lsls	r5, r3, #30
 80043f2:	4606      	mov	r6, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	d507      	bpl.n	8004408 <__smakebuf_r+0x1c>
 80043f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	6123      	str	r3, [r4, #16]
 8004400:	2301      	movs	r3, #1
 8004402:	6163      	str	r3, [r4, #20]
 8004404:	b003      	add	sp, #12
 8004406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004408:	ab01      	add	r3, sp, #4
 800440a:	466a      	mov	r2, sp
 800440c:	f7ff ffc8 	bl	80043a0 <__swhatbuf_r>
 8004410:	9f00      	ldr	r7, [sp, #0]
 8004412:	4605      	mov	r5, r0
 8004414:	4639      	mov	r1, r7
 8004416:	4630      	mov	r0, r6
 8004418:	f7ff fb16 	bl	8003a48 <_malloc_r>
 800441c:	b948      	cbnz	r0, 8004432 <__smakebuf_r+0x46>
 800441e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004422:	059a      	lsls	r2, r3, #22
 8004424:	d4ee      	bmi.n	8004404 <__smakebuf_r+0x18>
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	e7e2      	b.n	80043f8 <__smakebuf_r+0xc>
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	6020      	str	r0, [r4, #0]
 8004436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	9b01      	ldr	r3, [sp, #4]
 800443e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004442:	b15b      	cbz	r3, 800445c <__smakebuf_r+0x70>
 8004444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004448:	4630      	mov	r0, r6
 800444a:	f000 f81d 	bl	8004488 <_isatty_r>
 800444e:	b128      	cbz	r0, 800445c <__smakebuf_r+0x70>
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	f023 0303 	bic.w	r3, r3, #3
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	81a3      	strh	r3, [r4, #12]
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	431d      	orrs	r5, r3
 8004460:	81a5      	strh	r5, [r4, #12]
 8004462:	e7cf      	b.n	8004404 <__smakebuf_r+0x18>

08004464 <_fstat_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4d07      	ldr	r5, [pc, #28]	@ (8004484 <_fstat_r+0x20>)
 8004468:	2300      	movs	r3, #0
 800446a:	4604      	mov	r4, r0
 800446c:	4608      	mov	r0, r1
 800446e:	4611      	mov	r1, r2
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	f7fc fb06 	bl	8000a82 <_fstat>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d102      	bne.n	8004480 <_fstat_r+0x1c>
 800447a:	682b      	ldr	r3, [r5, #0]
 800447c:	b103      	cbz	r3, 8004480 <_fstat_r+0x1c>
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	bf00      	nop
 8004484:	20000280 	.word	0x20000280

08004488 <_isatty_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4d06      	ldr	r5, [pc, #24]	@ (80044a4 <_isatty_r+0x1c>)
 800448c:	2300      	movs	r3, #0
 800448e:	4604      	mov	r4, r0
 8004490:	4608      	mov	r0, r1
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	f7fc fb05 	bl	8000aa2 <_isatty>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_isatty_r+0x1a>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_isatty_r+0x1a>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	20000280 	.word	0x20000280

080044a8 <_init>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr

080044b4 <_fini>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr
