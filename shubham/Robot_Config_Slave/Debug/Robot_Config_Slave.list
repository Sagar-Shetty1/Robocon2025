
Robot_Config_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006394  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006564  08006564  00007564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c8  080065c8  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  080065c8  080065c8  000075c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065d0  080065d0  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d0  080065d0  000075d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065d4  080065d4  000075d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080065d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000074  0800664c  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800664c  0000852c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011847  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257a  00000000  00000000  000198eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d51  00000000  00000000  0001cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002327a  00000000  00000000  0001dc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c1e  00000000  00000000  00040f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d572d  00000000  00000000  00055b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f60  00000000  00000000  0012b29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001301fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800654c 	.word	0x0800654c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800654c 	.word	0x0800654c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 14);
 80005a8:	220e      	movs	r2, #14
 80005aa:	4904      	ldr	r1, [pc, #16]	@ (80005bc <HAL_UART_RxCpltCallback+0x1c>)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <HAL_UART_RxCpltCallback+0x20>)
 80005ae:	f003 ff90 	bl	80044d2 <HAL_UART_Receive_DMA>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000384 	.word	0x20000384
 80005c0:	20000294 	.word	0x20000294

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 f8c0 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f93a 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fc3e 	bl	8000e50 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 fc1c 	bl	8000e10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 fbf0 	bl	8000dbc <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005dc:	f000 fbc4 	bl	8000d68 <MX_UART4_Init>
  MX_TIM1_Init();
 80005e0:	f000 f9d0 	bl	8000984 <MX_TIM1_Init>
  MX_TIM8_Init();
 80005e4:	f000 fb22 	bl	8000c2c <MX_TIM8_Init>
  MX_I2C1_Init();
 80005e8:	f000 f99e 	bl	8000928 <MX_I2C1_Init>
  MX_TIM5_Init();
 80005ec:	f000 faca 	bl	8000b84 <MX_TIM5_Init>
  MX_TIM13_Init();
 80005f0:	f000 fb6c 	bl	8000ccc <MX_TIM13_Init>
  MX_TIM2_Init();
 80005f4:	f000 fa1e 	bl	8000a34 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f8:	f000 fa70 	bl	8000adc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 14);
 80005fc:	220e      	movs	r2, #14
 80005fe:	4976      	ldr	r1, [pc, #472]	@ (80007d8 <main+0x214>)
 8000600:	4876      	ldr	r0, [pc, #472]	@ (80007dc <main+0x218>)
 8000602:	f003 ff66 	bl	80044d2 <HAL_UART_Receive_DMA>
//		printf("%d %d %d %d %d %d %d %d %d %d %d %d %d\r\n", cro, squ, tri, cir, up, down, left, right, ll1, rr1, ll2, rr2, rL, rR);

		/* Stepper */
//		stepper_running  = 1;
//		stepper_running1 = 1;
		direction1 = 1;
 8000606:	4b76      	ldr	r3, [pc, #472]	@ (80007e0 <main+0x21c>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 800060c:	4b74      	ldr	r3, [pc, #464]	@ (80007e0 <main+0x21c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2108      	movs	r1, #8
 800061e:	4871      	ldr	r0, [pc, #452]	@ (80007e4 <main+0x220>)
 8000620:	f001 ffae 	bl	8002580 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,
 8000624:	4b6e      	ldr	r3, [pc, #440]	@ (80007e0 <main+0x21c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf0c      	ite	eq
 800062c:	2301      	moveq	r3, #1
 800062e:	2300      	movne	r3, #0
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	486b      	ldr	r0, [pc, #428]	@ (80007e4 <main+0x220>)
 8000638:	f001 ffa2 	bl	8002580 <HAL_GPIO_WritePin>
				!direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 800063c:	4b6a      	ldr	r3, [pc, #424]	@ (80007e8 <main+0x224>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10c      	bne.n	800065e <main+0x9a>
 8000644:	4b69      	ldr	r3, [pc, #420]	@ (80007ec <main+0x228>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d108      	bne.n	800065e <main+0x9a>
			direction1 = 1;  // Set to Anti-clockwise
 800064c:	4b64      	ldr	r3, [pc, #400]	@ (80007e0 <main+0x21c>)
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8000652:	4b67      	ldr	r3, [pc, #412]	@ (80007f0 <main+0x22c>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8000658:	4b66      	ldr	r3, [pc, #408]	@ (80007f4 <main+0x230>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 800065e:	4b66      	ldr	r3, [pc, #408]	@ (80007f8 <main+0x234>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d10c      	bne.n	8000680 <main+0xbc>
 8000666:	4b65      	ldr	r3, [pc, #404]	@ (80007fc <main+0x238>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d108      	bne.n	8000680 <main+0xbc>
			direction1 = 0;  // Set to Clockwise
 800066e:	4b5c      	ldr	r3, [pc, #368]	@ (80007e0 <main+0x21c>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8000674:	4b5e      	ldr	r3, [pc, #376]	@ (80007f0 <main+0x22c>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 800067a:	4b5e      	ldr	r3, [pc, #376]	@ (80007f4 <main+0x230>)
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
		}
		if (cir == 1 && !prev_cir) {
 8000680:	4b5f      	ldr	r3, [pc, #380]	@ (8000800 <main+0x23c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d109      	bne.n	800069c <main+0xd8>
 8000688:	4b5e      	ldr	r3, [pc, #376]	@ (8000804 <main+0x240>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d105      	bne.n	800069c <main+0xd8>
			stepper_running = 0;
 8000690:	4b57      	ldr	r3, [pc, #348]	@ (80007f0 <main+0x22c>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
			stepper_running1 = 0;
 8000696:	4b57      	ldr	r3, [pc, #348]	@ (80007f4 <main+0x230>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
		}
		prev_ll1 = ll1;
 800069c:	4b52      	ldr	r3, [pc, #328]	@ (80007e8 <main+0x224>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a52      	ldr	r2, [pc, #328]	@ (80007ec <main+0x228>)
 80006a2:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 80006a4:	4b54      	ldr	r3, [pc, #336]	@ (80007f8 <main+0x234>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a54      	ldr	r2, [pc, #336]	@ (80007fc <main+0x238>)
 80006aa:	6013      	str	r3, [r2, #0]
		prev_cir = cir;
 80006ac:	4b54      	ldr	r3, [pc, #336]	@ (8000800 <main+0x23c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a54      	ldr	r2, [pc, #336]	@ (8000804 <main+0x240>)
 80006b2:	6013      	str	r3, [r2, #0]
		if (stepper_running && (HAL_GetTick() - last_step_time) >= step_delay) {
 80006b4:	4b4e      	ldr	r3, [pc, #312]	@ (80007f0 <main+0x22c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d023      	beq.n	8000704 <main+0x140>
 80006bc:	f001 f8ac 	bl	8001818 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b51      	ldr	r3, [pc, #324]	@ (8000808 <main+0x244>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	4a50      	ldr	r2, [pc, #320]	@ (800080c <main+0x248>)
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d319      	bcc.n	8000704 <main+0x140>
			last_step_time = HAL_GetTick(); // Update last step time
 80006d0:	f001 f8a2 	bl	8001818 <HAL_GetTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a4c      	ldr	r2, [pc, #304]	@ (8000808 <main+0x244>)
 80006d8:	6013      	str	r3, [r2, #0]

			if (step_state == 0) {
 80006da:	4b4d      	ldr	r3, [pc, #308]	@ (8000810 <main+0x24c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d108      	bne.n	80006f4 <main+0x130>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	483f      	ldr	r0, [pc, #252]	@ (80007e4 <main+0x220>)
 80006e8:	f001 ff4a 	bl	8002580 <HAL_GPIO_WritePin>
				step_state = 1;
 80006ec:	4b48      	ldr	r3, [pc, #288]	@ (8000810 <main+0x24c>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	e007      	b.n	8000704 <main+0x140>
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 80006f4:	2200      	movs	r2, #0
 80006f6:	2120      	movs	r1, #32
 80006f8:	483a      	ldr	r0, [pc, #232]	@ (80007e4 <main+0x220>)
 80006fa:	f001 ff41 	bl	8002580 <HAL_GPIO_WritePin>
				step_state = 0;
 80006fe:	4b44      	ldr	r3, [pc, #272]	@ (8000810 <main+0x24c>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
			}
		}
		if (stepper_running1
 8000704:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <main+0x230>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d025      	beq.n	8000758 <main+0x194>
				&& (HAL_GetTick() - last_step_time1) >= step_delay1) {
 800070c:	f001 f884 	bl	8001818 <HAL_GetTick>
 8000710:	4602      	mov	r2, r0
 8000712:	4b40      	ldr	r3, [pc, #256]	@ (8000814 <main+0x250>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	4a3f      	ldr	r2, [pc, #252]	@ (8000818 <main+0x254>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	4293      	cmp	r3, r2
 800071e:	d31b      	bcc.n	8000758 <main+0x194>
			last_step_time1 = HAL_GetTick(); // Update last step time
 8000720:	f001 f87a 	bl	8001818 <HAL_GetTick>
 8000724:	4603      	mov	r3, r0
 8000726:	4a3b      	ldr	r2, [pc, #236]	@ (8000814 <main+0x250>)
 8000728:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 800072a:	4b3c      	ldr	r3, [pc, #240]	@ (800081c <main+0x258>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d109      	bne.n	8000746 <main+0x182>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Step HIGH
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000738:	4839      	ldr	r0, [pc, #228]	@ (8000820 <main+0x25c>)
 800073a:	f001 ff21 	bl	8002580 <HAL_GPIO_WritePin>
				step_state1 = 1;
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <main+0x258>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e008      	b.n	8000758 <main+0x194>
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800074c:	4834      	ldr	r0, [pc, #208]	@ (8000820 <main+0x25c>)
 800074e:	f001 ff17 	bl	8002580 <HAL_GPIO_WritePin>
				step_state1 = 0;
 8000752:	4b32      	ldr	r3, [pc, #200]	@ (800081c <main+0x258>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
			}
		}

		/* Dribbling */
		if (tri == 1 && !prev_tri) {
 8000758:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <main+0x260>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d106      	bne.n	800076e <main+0x1aa>
 8000760:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <main+0x264>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <main+0x1aa>
			ebike_running = 1;
 8000768:	4b30      	ldr	r3, [pc, #192]	@ (800082c <main+0x268>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
		}
		if (cro == 1 && !prev_cro) {  // cro button pressed
 800076e:	4b30      	ldr	r3, [pc, #192]	@ (8000830 <main+0x26c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10c      	bne.n	8000790 <main+0x1cc>
 8000776:	4b2f      	ldr	r3, [pc, #188]	@ (8000834 <main+0x270>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d108      	bne.n	8000790 <main+0x1cc>
			printf("cross pressed");
 800077e:	482e      	ldr	r0, [pc, #184]	@ (8000838 <main+0x274>)
 8000780:	f005 f876 	bl	8005870 <iprintf>
			direction1 = 0;  // Set to Clockwise
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <main+0x21c>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			ebike_running = 0;
 800078a:	4b28      	ldr	r3, [pc, #160]	@ (800082c <main+0x268>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
		}
		prev_tri = tri;
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <main+0x260>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a24      	ldr	r2, [pc, #144]	@ (8000828 <main+0x264>)
 8000796:	6013      	str	r3, [r2, #0]
		prev_cro = cro;
 8000798:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <main+0x26c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <main+0x270>)
 800079e:	6013      	str	r3, [r2, #0]
		if (ebike_running) {
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <main+0x268>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <main+0x202>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ae:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <main+0x220>)
 80007b0:	f001 fee6 	bl	8002580 <HAL_GPIO_WritePin>
			TIM13->CCR1 = (1350 * 999) / 3500;  //rpm 2000 test
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <main+0x278>)
 80007b6:	f240 1281 	movw	r2, #385	@ 0x181
 80007ba:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007bc:	2100      	movs	r1, #0
 80007be:	4820      	ldr	r0, [pc, #128]	@ (8000840 <main+0x27c>)
 80007c0:	f002 ff1c 	bl	80035fc <HAL_TIM_PWM_Start>
 80007c4:	e71f      	b.n	8000606 <main+0x42>
		} else {
			//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
			TIM13->CCR1 = (0 * 999) / 3500;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <main+0x278>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007cc:	2100      	movs	r1, #0
 80007ce:	481c      	ldr	r0, [pc, #112]	@ (8000840 <main+0x27c>)
 80007d0:	f002 ff14 	bl	80035fc <HAL_TIM_PWM_Start>
		direction1 = 1;
 80007d4:	e717      	b.n	8000606 <main+0x42>
 80007d6:	bf00      	nop
 80007d8:	20000384 	.word	0x20000384
 80007dc:	20000294 	.word	0x20000294
 80007e0:	20000000 	.word	0x20000000
 80007e4:	40020800 	.word	0x40020800
 80007e8:	200003a0 	.word	0x200003a0
 80007ec:	200003d0 	.word	0x200003d0
 80007f0:	200003b8 	.word	0x200003b8
 80007f4:	200003bc 	.word	0x200003bc
 80007f8:	200003a4 	.word	0x200003a4
 80007fc:	200003d4 	.word	0x200003d4
 8000800:	2000039c 	.word	0x2000039c
 8000804:	200003c4 	.word	0x200003c4
 8000808:	200003a8 	.word	0x200003a8
 800080c:	20000004 	.word	0x20000004
 8000810:	200003b0 	.word	0x200003b0
 8000814:	200003ac 	.word	0x200003ac
 8000818:	20000008 	.word	0x20000008
 800081c:	200003b4 	.word	0x200003b4
 8000820:	40020400 	.word	0x40020400
 8000824:	20000398 	.word	0x20000398
 8000828:	200003c8 	.word	0x200003c8
 800082c:	200003c0 	.word	0x200003c0
 8000830:	20000394 	.word	0x20000394
 8000834:	200003cc 	.word	0x200003cc
 8000838:	08006564 	.word	0x08006564
 800083c:	40001c00 	.word	0x40001c00
 8000840:	2000024c 	.word	0x2000024c

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	@ 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2234      	movs	r2, #52	@ 0x34
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f005 f861 	bl	800591a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <SystemClock_Config+0xdc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a2b      	ldr	r2, [pc, #172]	@ (8000920 <SystemClock_Config+0xdc>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <SystemClock_Config+0xdc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <SystemClock_Config+0xe0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a25      	ldr	r2, [pc, #148]	@ (8000924 <SystemClock_Config+0xe0>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <SystemClock_Config+0xe0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	2310      	movs	r3, #16
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2302      	movs	r3, #2
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b4:	2308      	movs	r3, #8
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008b8:	23b4      	movs	r3, #180	@ 0xb4
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fb4f 	bl	8002f70 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008d8:	f000 fb6c 	bl	8000fb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008dc:	f001 ffae 	bl	800283c <HAL_PWREx_EnableOverDrive>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008e6:	f000 fb65 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2105      	movs	r1, #5
 8000908:	4618      	mov	r0, r3
 800090a:	f001 ffe7 	bl	80028dc <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000914:	f000 fb4e 	bl	8000fb4 <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	@ 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x50>)
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <MX_I2C1_Init+0x54>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000934:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x58>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800094a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000966:	f001 fe25 	bl	80025b4 <HAL_I2C_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 fb20 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000090 	.word	0x20000090
 800097c:	40005400 	.word	0x40005400
 8000980:	00061a80 	.word	0x00061a80

08000984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	@ 0x30
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	2224      	movs	r2, #36	@ 0x24
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f004 ffc1 	bl	800591a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a0:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009a2:	4a23      	ldr	r2, [pc, #140]	@ (8000a30 <MX_TIM1_Init+0xac>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e4:	2301      	movs	r3, #1
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 80009f8:	f002 fec8 	bl	800378c <HAL_TIM_Encoder_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a02:	f000 fad7 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <MX_TIM1_Init+0xa8>)
 8000a14:	f003 fc06 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a1e:	f000 fac9 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	@ 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000e4 	.word	0x200000e4
 8000a30:	40010000 	.word	0x40010000

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2224      	movs	r2, #36	@ 0x24
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 ff69 	bl	800591a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a50:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000a52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000a66:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a80:	2301      	movs	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a90:	2301      	movs	r3, #1
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000aa4:	f002 fe72 	bl	800378c <HAL_TIM_Encoder_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000aae:	f000 fa81 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_TIM2_Init+0xa4>)
 8000ac0:	f003 fbb0 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000aca:	f000 fa73 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3730      	adds	r7, #48	@ 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000012c 	.word	0x2000012c

08000adc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2224      	movs	r2, #36	@ 0x24
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 ff15 	bl	800591a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af8:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000afa:	4a21      	ldr	r2, [pc, #132]	@ (8000b80 <MX_TIM3_Init+0xa4>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000b0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b36:	2301      	movs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000b4a:	f002 fe1f 	bl	800378c <HAL_TIM_Encoder_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f000 fa2e 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_TIM3_Init+0xa0>)
 8000b66:	f003 fb5d 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b70:	f000 fa20 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3730      	adds	r7, #48	@ 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000174 	.word	0x20000174
 8000b80:	40000400 	.word	0x40000400

08000b84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	@ 0x30
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2224      	movs	r2, #36	@ 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 fec1 	bl	800591a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000ba2:	4a21      	ldr	r2, [pc, #132]	@ (8000c28 <MX_TIM5_Init+0xa4>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bde:	2301      	movs	r3, #1
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000bf2:	f002 fdcb 	bl	800378c <HAL_TIM_Encoder_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000bfc:	f000 f9da 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_TIM5_Init+0xa0>)
 8000c0e:	f003 fb09 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000c18:	f000 f9cc 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3730      	adds	r7, #48	@ 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200001bc 	.word	0x200001bc
 8000c28:	40000c00 	.word	0x40000c00

08000c2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <MX_TIM8_Init+0x9c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c50:	22b3      	movs	r2, #179	@ 0xb3
 8000c52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c60:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c74:	4813      	ldr	r0, [pc, #76]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c76:	f002 fc19 	bl	80034ac <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000c80:	f000 f998 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000c92:	f002 fee3 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000c9c:	f000 f98a 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_TIM8_Init+0x98>)
 8000cae:	f003 fab9 	bl	8004224 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f000 f97c 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000204 	.word	0x20000204
 8000cc8:	40010400 	.word	0x40010400

08000ccc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <MX_TIM13_Init+0x98>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 179;
 8000cea:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000cec:	22b3      	movs	r2, #179	@ 0xb3
 8000cee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000cf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cfc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d0a:	4815      	ldr	r0, [pc, #84]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000d0c:	f002 fbce 	bl	80034ac <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000d16:	f000 f94d 	bl	8000fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000d1a:	4811      	ldr	r0, [pc, #68]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000d1c:	f002 fc15 	bl	800354a <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000d26:	f000 f945 	bl	8000fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2a:	2360      	movs	r3, #96	@ 0x60
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000d42:	f002 fdc9 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000d4c:	f000 f932 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <MX_TIM13_Init+0x94>)
 8000d52:	f000 faff 	bl	8001354 <HAL_TIM_MspPostInit>

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000024c 	.word	0x2000024c
 8000d64:	40001c00 	.word	0x40001c00

08000d68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <MX_UART4_Init+0x50>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_UART4_Init+0x4c>)
 8000da0:	f003 fabc 	bl	800431c <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000daa:	f000 f903 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000294 	.word	0x20000294
 8000db8:	40004c00 	.word	0x40004c00

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <MX_USART2_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f003 fa92 	bl	800431c <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 f8d9 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200002dc 	.word	0x200002dc
 8000e0c:	40004400 	.word	0x40004400

08000e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_DMA_Init+0x3c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <MX_DMA_Init+0x3c>)
 8000e20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_DMA_Init+0x3c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	200d      	movs	r0, #13
 8000e38:	f000 fdd5 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e3c:	200d      	movs	r0, #13
 8000e3e:	f000 fdee 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b43      	ldr	r3, [pc, #268]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a42      	ldr	r2, [pc, #264]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b3c      	ldr	r3, [pc, #240]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b39      	ldr	r3, [pc, #228]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b35      	ldr	r3, [pc, #212]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a34      	ldr	r2, [pc, #208]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b2b      	ldr	r3, [pc, #172]	@ (8000f78 <MX_GPIO_Init+0x128>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|stepper_direction_1_Pin|ENA_1_Pin|stepper_pulse_1_Pin
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f248 01f8 	movw	r1, #33016	@ 0x80f8
 8000edc:	4827      	ldr	r0, [pc, #156]	@ (8000f7c <MX_GPIO_Init+0x12c>)
 8000ede:	f001 fb4f 	bl	8002580 <HAL_GPIO_WritePin>
                          |stepper_direction_2_Pin|ENA_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|P1_Pin|P2_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000ee8:	4825      	ldr	r0, [pc, #148]	@ (8000f80 <MX_GPIO_Init+0x130>)
 8000eea:	f001 fb49 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|P3_Pin|stepper_pulse_2_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f249 4104 	movw	r1, #37892	@ 0x9404
 8000ef4:	4823      	ldr	r0, [pc, #140]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000ef6:	f001 fb43 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f00:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481a      	ldr	r0, [pc, #104]	@ (8000f7c <MX_GPIO_Init+0x12c>)
 8000f12:	f001 f9a1 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 stepper_direction_1_Pin ENA_1_Pin stepper_pulse_1_Pin
                           stepper_direction_2_Pin ENA_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|stepper_direction_1_Pin|ENA_1_Pin|stepper_pulse_1_Pin
 8000f16:	f248 03f8 	movw	r3, #33016	@ 0x80f8
 8000f1a:	617b      	str	r3, [r7, #20]
                          |stepper_direction_2_Pin|ENA_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4813      	ldr	r0, [pc, #76]	@ (8000f7c <MX_GPIO_Init+0x12c>)
 8000f30:	f001 f992 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin P1_Pin P2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|P1_Pin|P2_Pin;
 8000f34:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_GPIO_Init+0x130>)
 8000f4e:	f001 f983 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 P3_Pin stepper_pulse_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|P3_Pin|stepper_pulse_2_Pin;
 8000f52:	f249 4304 	movw	r3, #37892	@ 0x9404
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000f6c:	f001 f974 	bl	8002258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400

08000f88 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <_write+0x28>)
 8000fa0:	f003 fa0c 	bl	80043bc <HAL_UART_Transmit>
	return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200002dc 	.word	0x200002dc

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <Error_Handler+0x8>

08000fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a0f      	ldr	r2, [pc, #60]	@ (800100c <HAL_MspInit+0x4c>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ffe:	2007      	movs	r0, #7
 8001000:	f000 fce6 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800

08001010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <HAL_I2C_MspInit+0x84>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12b      	bne.n	800108a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_I2C_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_I2C_MspInit+0x88>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_I2C_MspInit+0x88>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104e:	23c0      	movs	r3, #192	@ 0xc0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001052:	2312      	movs	r3, #18
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105e:	2304      	movs	r3, #4
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <HAL_I2C_MspInit+0x8c>)
 800106a:	f001 f8f5 	bl	8002258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_I2C_MspInit+0x88>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_I2C_MspInit+0x88>)
 8001078:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_I2C_MspInit+0x88>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40005400 	.word	0x40005400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020400 	.word	0x40020400

080010a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	@ 0x48
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a83      	ldr	r2, [pc, #524]	@ (80012cc <HAL_TIM_Encoder_MspInit+0x22c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12d      	bne.n	800111e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80010c6:	4b82      	ldr	r3, [pc, #520]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a81      	ldr	r2, [pc, #516]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b7f      	ldr	r3, [pc, #508]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
 80010dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010e2:	4b7b      	ldr	r3, [pc, #492]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a7a      	ldr	r2, [pc, #488]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b78      	ldr	r3, [pc, #480]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800110c:	2301      	movs	r3, #1
 800110e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001114:	4619      	mov	r1, r3
 8001116:	486f      	ldr	r0, [pc, #444]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0x234>)
 8001118:	f001 f89e 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800111c:	e0d1      	b.n	80012c2 <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001126:	d14b      	bne.n	80011c0 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800112c:	4b68      	ldr	r3, [pc, #416]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	4a67      	ldr	r2, [pc, #412]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6413      	str	r3, [r2, #64]	@ 0x40
 8001138:	4b65      	ldr	r3, [pc, #404]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
 8001148:	4b61      	ldr	r3, [pc, #388]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a60      	ldr	r2, [pc, #384]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b5e      	ldr	r3, [pc, #376]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	4b5a      	ldr	r3, [pc, #360]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a59      	ldr	r2, [pc, #356]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001170:	4b57      	ldr	r3, [pc, #348]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800117c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800118e:	2301      	movs	r3, #1
 8001190:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001196:	4619      	mov	r1, r3
 8001198:	484e      	ldr	r0, [pc, #312]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0x234>)
 800119a:	f001 f85d 	bl	8002258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800119e:	2308      	movs	r3, #8
 80011a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ae:	2301      	movs	r3, #1
 80011b0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011b6:	4619      	mov	r1, r3
 80011b8:	4847      	ldr	r0, [pc, #284]	@ (80012d8 <HAL_TIM_Encoder_MspInit+0x238>)
 80011ba:	f001 f84d 	bl	8002258 <HAL_GPIO_Init>
}
 80011be:	e080      	b.n	80012c2 <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a45      	ldr	r2, [pc, #276]	@ (80012dc <HAL_TIM_Encoder_MspInit+0x23c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d14a      	bne.n	8001260 <HAL_TIM_Encoder_MspInit+0x1c0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	4b40      	ldr	r3, [pc, #256]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a3f      	ldr	r2, [pc, #252]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	4b39      	ldr	r3, [pc, #228]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a38      	ldr	r2, [pc, #224]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b36      	ldr	r3, [pc, #216]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a31      	ldr	r2, [pc, #196]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	2301      	movs	r3, #1
 8001228:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800122e:	2302      	movs	r3, #2
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001236:	4619      	mov	r1, r3
 8001238:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0x234>)
 800123a:	f001 f80d 	bl	8002258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123e:	2310      	movs	r3, #16
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001246:	2301      	movs	r3, #1
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800124e:	2302      	movs	r3, #2
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001256:	4619      	mov	r1, r3
 8001258:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <HAL_TIM_Encoder_MspInit+0x238>)
 800125a:	f000 fffd 	bl	8002258 <HAL_GPIO_Init>
}
 800125e:	e030      	b.n	80012c2 <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM5)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <HAL_TIM_Encoder_MspInit+0x240>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d12b      	bne.n	80012c2 <HAL_TIM_Encoder_MspInit+0x222>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a10      	ldr	r2, [pc, #64]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0x230>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a2:	2303      	movs	r3, #3
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012b2:	2302      	movs	r3, #2
 80012b4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0x234>)
 80012be:	f000 ffcb 	bl	8002258 <HAL_GPIO_Init>
}
 80012c2:	bf00      	nop
 80012c4:	3748      	adds	r7, #72	@ 0x48
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40000400 	.word	0x40000400
 80012e0:	40000c00 	.word	0x40000c00

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <HAL_TIM_Base_MspInit+0x64>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10e      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_TIM_Base_MspInit+0x68>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <HAL_TIM_Base_MspInit+0x68>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_TIM_Base_MspInit+0x68>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001312:	e012      	b.n	800133a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM13)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <HAL_TIM_Base_MspInit+0x6c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10d      	bne.n	800133a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_TIM_Base_MspInit+0x68>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a09      	ldr	r2, [pc, #36]	@ (800134c <HAL_TIM_Base_MspInit+0x68>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <HAL_TIM_Base_MspInit+0x68>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40010400 	.word	0x40010400
 800134c:	40023800 	.word	0x40023800
 8001350:	40001c00 	.word	0x40001c00

08001354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <HAL_TIM_MspPostInit+0x68>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d11d      	bne.n	80013b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_TIM_MspPostInit+0x6c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <HAL_TIM_MspPostInit+0x6c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_TIM_MspPostInit+0x6c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001392:	2340      	movs	r3, #64	@ 0x40
 8001394:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80013a2:	2309      	movs	r3, #9
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <HAL_TIM_MspPostInit+0x70>)
 80013ae:	f000 ff53 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40001c00 	.word	0x40001c00
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	@ 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001520 <HAL_UART_MspInit+0x158>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d164      	bne.n	80014b4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80013f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	4b46      	ldr	r3, [pc, #280]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a45      	ldr	r2, [pc, #276]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b43      	ldr	r3, [pc, #268]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001422:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001434:	2308      	movs	r3, #8
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	483a      	ldr	r0, [pc, #232]	@ (8001528 <HAL_UART_MspInit+0x160>)
 8001440:	f000 ff0a 	bl	8002258 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001444:	4b39      	ldr	r3, [pc, #228]	@ (800152c <HAL_UART_MspInit+0x164>)
 8001446:	4a3a      	ldr	r2, [pc, #232]	@ (8001530 <HAL_UART_MspInit+0x168>)
 8001448:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800144a:	4b38      	ldr	r3, [pc, #224]	@ (800152c <HAL_UART_MspInit+0x164>)
 800144c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001450:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001452:	4b36      	ldr	r3, [pc, #216]	@ (800152c <HAL_UART_MspInit+0x164>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001458:	4b34      	ldr	r3, [pc, #208]	@ (800152c <HAL_UART_MspInit+0x164>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800145e:	4b33      	ldr	r3, [pc, #204]	@ (800152c <HAL_UART_MspInit+0x164>)
 8001460:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001464:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001466:	4b31      	ldr	r3, [pc, #196]	@ (800152c <HAL_UART_MspInit+0x164>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146c:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <HAL_UART_MspInit+0x164>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001472:	4b2e      	ldr	r3, [pc, #184]	@ (800152c <HAL_UART_MspInit+0x164>)
 8001474:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001478:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800147a:	4b2c      	ldr	r3, [pc, #176]	@ (800152c <HAL_UART_MspInit+0x164>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <HAL_UART_MspInit+0x164>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001486:	4829      	ldr	r0, [pc, #164]	@ (800152c <HAL_UART_MspInit+0x164>)
 8001488:	f000 fae4 	bl	8001a54 <HAL_DMA_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001492:	f7ff fd8f 	bl	8000fb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a24      	ldr	r2, [pc, #144]	@ (800152c <HAL_UART_MspInit+0x164>)
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800149c:	4a23      	ldr	r2, [pc, #140]	@ (800152c <HAL_UART_MspInit+0x164>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2034      	movs	r0, #52	@ 0x34
 80014a8:	f000 fa9d 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014ac:	2034      	movs	r0, #52	@ 0x34
 80014ae:	f000 fab6 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014b2:	e030      	b.n	8001516 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <HAL_UART_MspInit+0x16c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d12b      	bne.n	8001516 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <HAL_UART_MspInit+0x15c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014f6:	230c      	movs	r3, #12
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001506:	2307      	movs	r3, #7
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_UART_MspInit+0x170>)
 8001512:	f000 fea1 	bl	8002258 <HAL_GPIO_Init>
}
 8001516:	bf00      	nop
 8001518:	3730      	adds	r7, #48	@ 0x30
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40004c00 	.word	0x40004c00
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	20000324 	.word	0x20000324
 8001530:	40026040 	.word	0x40026040
 8001534:	40004400 	.word	0x40004400
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <NMI_Handler+0x4>

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 f92d 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <DMA1_Stream2_IRQHandler+0x10>)
 80015a2:	f000 fbef 	bl	8001d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000324 	.word	0x20000324

080015b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <UART4_IRQHandler+0x10>)
 80015b6:	f002 ffb1 	bl	800451c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000294 	.word	0x20000294

080015c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e00a      	b.n	80015ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d6:	f3af 8000 	nop.w
 80015da:	4601      	mov	r1, r0
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	b2ca      	uxtb	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbf0      	blt.n	80015d6 <_read+0x12>
  }

  return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001626:	605a      	str	r2, [r3, #4]
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f004 f98e 	bl	80059b8 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20020000 	.word	0x20020000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	200003d8 	.word	0x200003d8
 80016d0:	20000530 	.word	0x20000530

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016fc:	f7ff ffea 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	@ (8001738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	@ (8001744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001726:	f004 f94d 	bl	80059c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7fe ff4b 	bl	80005c4 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800173c:	080065d8 	.word	0x080065d8
  ldr r2, =_sbss
 8001740:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001744:	2000052c 	.word	0x2000052c

08001748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 f92b 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fc1e 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f943 	bl	8001a3a <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f90b 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000000c 	.word	0x2000000c
 80017e8:	20000014 	.word	0x20000014
 80017ec:	20000010 	.word	0x20000010

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000014 	.word	0x20000014
 8001814:	200003dc 	.word	0x200003dc

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	200003dc 	.word	0x200003dc

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	@ (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	@ (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	@ 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff29 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff3e 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff31 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff feda 	bl	8001818 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e099      	b.n	8001ba4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a90:	e00f      	b.n	8001ab2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a92:	f7ff fec1 	bl	8001818 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d908      	bls.n	8001ab2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e078      	b.n	8001ba4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e8      	bne.n	8001a92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <HAL_DMA_Init+0x158>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d107      	bne.n	8001b1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	4313      	orrs	r3, r2
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f023 0307 	bic.w	r3, r3, #7
 8001b32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d117      	bne.n	8001b76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fb01 	bl	8002160 <DMA_CheckFifoParam>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2240      	movs	r2, #64	@ 0x40
 8001b68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b72:	2301      	movs	r3, #1
 8001b74:	e016      	b.n	8001ba4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fab8 	bl	80020f4 <DMA_CalcBaseAndBitshift>
 8001b84:	4603      	mov	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8c:	223f      	movs	r2, #63	@ 0x3f
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	f010803f 	.word	0xf010803f

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_DMA_Start_IT+0x26>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e040      	b.n	8001c58 <HAL_DMA_Start_IT+0xa8>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d12f      	bne.n	8001c4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2202      	movs	r2, #2
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fa4a 	bl	8002098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	223f      	movs	r2, #63	@ 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0216 	orr.w	r2, r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0208 	orr.w	r2, r2, #8
 8001c36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e005      	b.n	8001c56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c6e:	f7ff fdd3 	bl	8001818 <HAL_GetTick>
 8001c72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d008      	beq.n	8001c92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2280      	movs	r2, #128	@ 0x80
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e052      	b.n	8001d38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0216 	bic.w	r2, r2, #22
 8001ca0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_DMA_Abort+0x62>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0208 	bic.w	r2, r2, #8
 8001cd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce2:	e013      	b.n	8001d0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce4:	f7ff fd98 	bl	8001818 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d90c      	bls.n	8001d0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e015      	b.n	8001d38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1e4      	bne.n	8001ce4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	223f      	movs	r2, #63	@ 0x3f
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d004      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2280      	movs	r2, #128	@ 0x80
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00c      	b.n	8001d78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2205      	movs	r2, #5
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d90:	4b8e      	ldr	r3, [pc, #568]	@ (8001fcc <HAL_DMA_IRQHandler+0x248>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a8e      	ldr	r2, [pc, #568]	@ (8001fd0 <HAL_DMA_IRQHandler+0x24c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dae:	2208      	movs	r2, #8
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	2208      	movs	r2, #8
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	2204      	movs	r2, #4
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	2210      	movs	r2, #16
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d043      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03c      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7e:	2210      	movs	r2, #16
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d024      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
 8001eb2:	e01f      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	e016      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0208 	bic.w	r2, r2, #8
 8001ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef8:	2220      	movs	r2, #32
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 808f 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8087 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d136      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0216 	bic.w	r2, r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_DMA_IRQHandler+0x1da>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0208 	bic.w	r2, r2, #8
 8001f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	223f      	movs	r2, #63	@ 0x3f
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07e      	beq.n	8002090 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
        }
        return;
 8001f9a:	e079      	b.n	8002090 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d031      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
 8001fc8:	e02c      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
 8001fca:	bf00      	nop
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e01e      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10f      	bne.n	8002014 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0210 	bic.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d307      	bcc.n	800206c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <HAL_DMA_IRQHandler+0x2cc>
 800206a:	e000      	b.n	800206e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800206c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e000      	b.n	8002092 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002090:	bf00      	nop
    }
  }
}
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b40      	cmp	r3, #64	@ 0x40
 80020c4:	d108      	bne.n	80020d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d6:	e007      	b.n	80020e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b10      	subs	r3, #16
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <DMA_CalcBaseAndBitshift+0x64>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210e:	4a13      	ldr	r2, [pc, #76]	@ (800215c <DMA_CalcBaseAndBitshift+0x68>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d909      	bls.n	8002136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	659a      	str	r2, [r3, #88]	@ 0x58
 8002134:	e007      	b.n	8002146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	aaaaaaab 	.word	0xaaaaaaab
 800215c:	0800658c 	.word	0x0800658c

08002160 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11f      	bne.n	80021ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d856      	bhi.n	800222e <DMA_CheckFifoParam+0xce>
 8002180:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <DMA_CheckFifoParam+0x28>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	08002199 	.word	0x08002199
 800218c:	080021ab 	.word	0x080021ab
 8002190:	08002199 	.word	0x08002199
 8002194:	0800222f 	.word	0x0800222f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d046      	beq.n	8002232 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a8:	e043      	b.n	8002232 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021b2:	d140      	bne.n	8002236 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e03d      	b.n	8002236 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021c2:	d121      	bne.n	8002208 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d837      	bhi.n	800223a <DMA_CheckFifoParam+0xda>
 80021ca:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <DMA_CheckFifoParam+0x70>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021e7 	.word	0x080021e7
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	080021f9 	.word	0x080021f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e030      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d025      	beq.n	800223e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f6:	e022      	b.n	800223e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002200:	d11f      	bne.n	8002242 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002206:	e01c      	b.n	8002242 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d903      	bls.n	8002216 <DMA_CheckFifoParam+0xb6>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d003      	beq.n	800221c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002214:	e018      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
      break;
 800221a:	e015      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00e      	beq.n	8002246 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e00b      	b.n	8002246 <DMA_CheckFifoParam+0xe6>
      break;
 800222e:	bf00      	nop
 8002230:	e00a      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e008      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e006      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e004      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;   
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
    }
  } 
  
  return status; 
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	@ 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e165      	b.n	8002540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 8154 	bne.w	800253a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d005      	beq.n	80022aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d130      	bne.n	800230c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80ae 	beq.w	800253a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002558 <HAL_GPIO_Init+0x300>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002558 <HAL_GPIO_Init+0x300>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002558 <HAL_GPIO_Init+0x300>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a58      	ldr	r2, [pc, #352]	@ (800255c <HAL_GPIO_Init+0x304>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4f      	ldr	r2, [pc, #316]	@ (8002560 <HAL_GPIO_Init+0x308>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d025      	beq.n	8002472 <HAL_GPIO_Init+0x21a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4e      	ldr	r2, [pc, #312]	@ (8002564 <HAL_GPIO_Init+0x30c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01f      	beq.n	800246e <HAL_GPIO_Init+0x216>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4d      	ldr	r2, [pc, #308]	@ (8002568 <HAL_GPIO_Init+0x310>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d019      	beq.n	800246a <HAL_GPIO_Init+0x212>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4c      	ldr	r2, [pc, #304]	@ (800256c <HAL_GPIO_Init+0x314>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4b      	ldr	r2, [pc, #300]	@ (8002570 <HAL_GPIO_Init+0x318>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x20a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4a      	ldr	r2, [pc, #296]	@ (8002574 <HAL_GPIO_Init+0x31c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x206>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a49      	ldr	r2, [pc, #292]	@ (8002578 <HAL_GPIO_Init+0x320>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x202>
 8002456:	2306      	movs	r3, #6
 8002458:	e00c      	b.n	8002474 <HAL_GPIO_Init+0x21c>
 800245a:	2307      	movs	r3, #7
 800245c:	e00a      	b.n	8002474 <HAL_GPIO_Init+0x21c>
 800245e:	2305      	movs	r3, #5
 8002460:	e008      	b.n	8002474 <HAL_GPIO_Init+0x21c>
 8002462:	2304      	movs	r3, #4
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x21c>
 8002466:	2303      	movs	r3, #3
 8002468:	e004      	b.n	8002474 <HAL_GPIO_Init+0x21c>
 800246a:	2302      	movs	r3, #2
 800246c:	e002      	b.n	8002474 <HAL_GPIO_Init+0x21c>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x21c>
 8002472:	2300      	movs	r3, #0
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f002 0203 	and.w	r2, r2, #3
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	4093      	lsls	r3, r2
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002484:	4935      	ldr	r1, [pc, #212]	@ (800255c <HAL_GPIO_Init+0x304>)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_GPIO_Init+0x324>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b6:	4a31      	ldr	r2, [pc, #196]	@ (800257c <HAL_GPIO_Init+0x324>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024bc:	4b2f      	ldr	r3, [pc, #188]	@ (800257c <HAL_GPIO_Init+0x324>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <HAL_GPIO_Init+0x324>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e6:	4b25      	ldr	r3, [pc, #148]	@ (800257c <HAL_GPIO_Init+0x324>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250a:	4a1c      	ldr	r2, [pc, #112]	@ (800257c <HAL_GPIO_Init+0x324>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <HAL_GPIO_Init+0x324>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002534:	4a11      	ldr	r2, [pc, #68]	@ (800257c <HAL_GPIO_Init+0x324>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	f67f ae96 	bls.w	8002274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40013800 	.word	0x40013800
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400
 8002568:	40020800 	.word	0x40020800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40021000 	.word	0x40021000
 8002574:	40021400 	.word	0x40021400
 8002578:	40021800 	.word	0x40021800
 800257c:	40013c00 	.word	0x40013c00

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e12b      	b.n	800281e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fd18 	bl	8001010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	@ 0x24
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002618:	f000 fa52 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 800261c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a81      	ldr	r2, [pc, #516]	@ (8002828 <HAL_I2C_Init+0x274>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d807      	bhi.n	8002638 <HAL_I2C_Init+0x84>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a80      	ldr	r2, [pc, #512]	@ (800282c <HAL_I2C_Init+0x278>)
 800262c:	4293      	cmp	r3, r2
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e006      	b.n	8002646 <HAL_I2C_Init+0x92>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a7d      	ldr	r2, [pc, #500]	@ (8002830 <HAL_I2C_Init+0x27c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	bf94      	ite	ls
 8002640:	2301      	movls	r3, #1
 8002642:	2300      	movhi	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0e7      	b.n	800281e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a78      	ldr	r2, [pc, #480]	@ (8002834 <HAL_I2C_Init+0x280>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9b      	lsrs	r3, r3, #18
 8002658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a6a      	ldr	r2, [pc, #424]	@ (8002828 <HAL_I2C_Init+0x274>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d802      	bhi.n	8002688 <HAL_I2C_Init+0xd4>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3301      	adds	r3, #1
 8002686:	e009      	b.n	800269c <HAL_I2C_Init+0xe8>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	4a69      	ldr	r2, [pc, #420]	@ (8002838 <HAL_I2C_Init+0x284>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	3301      	adds	r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	495c      	ldr	r1, [pc, #368]	@ (8002828 <HAL_I2C_Init+0x274>)
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d819      	bhi.n	80026f0 <HAL_I2C_Init+0x13c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e59      	subs	r1, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026d0:	400b      	ands	r3, r1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_I2C_Init+0x138>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1e59      	subs	r1, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ea:	e051      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026ec:	2304      	movs	r3, #4
 80026ee:	e04f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d111      	bne.n	800271c <HAL_I2C_Init+0x168>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e012      	b.n	8002742 <HAL_I2C_Init+0x18e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x196>
 8002746:	2301      	movs	r3, #1
 8002748:	e022      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10e      	bne.n	8002770 <HAL_I2C_Init+0x1bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1e58      	subs	r0, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	440b      	add	r3, r1
 8002760:	fbb0 f3f3 	udiv	r3, r0, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6809      	ldr	r1, [r1, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6911      	ldr	r1, [r2, #16]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	000186a0 	.word	0x000186a0
 800282c:	001e847f 	.word	0x001e847f
 8002830:	003d08ff 	.word	0x003d08ff
 8002834:	431bde83 	.word	0x431bde83
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_PWREx_EnableOverDrive+0x90>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	4a1f      	ldr	r2, [pc, #124]	@ (80028cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	@ 0x40
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002862:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002868:	f7fe ffd6 	bl	8001818 <HAL_GetTick>
 800286c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800286e:	e009      	b.n	8002884 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002870:	f7fe ffd2 	bl	8001818 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800287e:	d901      	bls.n	8002884 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e01f      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002890:	d1ee      	bne.n	8002870 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002898:	f7fe ffbe 	bl	8001818 <HAL_GetTick>
 800289c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800289e:	e009      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a0:	f7fe ffba 	bl	8001818 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028ae:	d901      	bls.n	80028b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e007      	b.n	80028c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028c0:	d1ee      	bne.n	80028a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	420e0040 	.word	0x420e0040
 80028d4:	40007000 	.word	0x40007000
 80028d8:	420e0044 	.word	0x420e0044

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cc      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b68      	ldr	r3, [pc, #416]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d90c      	bls.n	8002918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b65      	ldr	r3, [pc, #404]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d044      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4934      	ldr	r1, [pc, #208]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe ff24 	bl	8001818 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe ff20 	bl	8001818 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d20c      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f855 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fe84 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	08006574 	.word	0x08006574
 8002aa0:	2000000c 	.word	0x2000000c
 8002aa4:	20000010 	.word	0x20000010

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	2000000c 	.word	0x2000000c

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	f7ff fff0 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	@ (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08006584 	.word	0x08006584

08002ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aec:	f7ff ffdc 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08006584 	.word	0x08006584

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b0ae      	sub	sp, #184	@ 0xb8
 8002b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b36:	4bcb      	ldr	r3, [pc, #812]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	f200 8206 	bhi.w	8002f50 <HAL_RCC_GetSysClockFreq+0x440>
 8002b44:	a201      	add	r2, pc, #4	@ (adr r2, 8002b4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002f51 	.word	0x08002f51
 8002b54:	08002f51 	.word	0x08002f51
 8002b58:	08002f51 	.word	0x08002f51
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002f51 	.word	0x08002f51
 8002b64:	08002f51 	.word	0x08002f51
 8002b68:	08002f51 	.word	0x08002f51
 8002b6c:	08002b91 	.word	0x08002b91
 8002b70:	08002f51 	.word	0x08002f51
 8002b74:	08002f51 	.word	0x08002f51
 8002b78:	08002f51 	.word	0x08002f51
 8002b7c:	08002d81 	.word	0x08002d81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4bb9      	ldr	r3, [pc, #740]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b86:	e1e7      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b88:	4bb8      	ldr	r3, [pc, #736]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b8e:	e1e3      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4bb4      	ldr	r3, [pc, #720]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9c:	4bb1      	ldr	r3, [pc, #708]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d071      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba8:	4bae      	ldr	r3, [pc, #696]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bce:	4622      	mov	r2, r4
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	0159      	lsls	r1, r3, #5
 8002bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be0:	0150      	lsls	r0, r2, #5
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4621      	mov	r1, r4
 8002be8:	1a51      	subs	r1, r2, r1
 8002bea:	6439      	str	r1, [r7, #64]	@ 0x40
 8002bec:	4629      	mov	r1, r5
 8002bee:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c00:	4649      	mov	r1, r9
 8002c02:	018b      	lsls	r3, r1, #6
 8002c04:	4641      	mov	r1, r8
 8002c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	018a      	lsls	r2, r1, #6
 8002c0e:	4641      	mov	r1, r8
 8002c10:	1a51      	subs	r1, r2, r1
 8002c12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c14:	4649      	mov	r1, r9
 8002c16:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c28:	4649      	mov	r1, r9
 8002c2a:	00cb      	lsls	r3, r1, #3
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c32:	4641      	mov	r1, r8
 8002c34:	00ca      	lsls	r2, r1, #3
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c42:	462b      	mov	r3, r5
 8002c44:	460a      	mov	r2, r1
 8002c46:	eb42 0303 	adc.w	r3, r2, r3
 8002c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c58:	4629      	mov	r1, r5
 8002c5a:	024b      	lsls	r3, r1, #9
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c62:	4621      	mov	r1, r4
 8002c64:	024a      	lsls	r2, r1, #9
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002c7c:	f7fd fb18 	bl	80002b0 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c8a:	e067      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8c:	4b75      	ldr	r3, [pc, #468]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002caa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	0159      	lsls	r1, r3, #5
 8002cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc0:	0150      	lsls	r0, r2, #5
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	1a51      	subs	r1, r2, r1
 8002cca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ccc:	4629      	mov	r1, r5
 8002cce:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cea:	4641      	mov	r1, r8
 8002cec:	018a      	lsls	r2, r1, #6
 8002cee:	4641      	mov	r1, r8
 8002cf0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d0e:	4692      	mov	sl, r2
 8002d10:	469b      	mov	fp, r3
 8002d12:	4623      	mov	r3, r4
 8002d14:	eb1a 0303 	adds.w	r3, sl, r3
 8002d18:	623b      	str	r3, [r7, #32]
 8002d1a:	462b      	mov	r3, r5
 8002d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d2e:	4629      	mov	r1, r5
 8002d30:	028b      	lsls	r3, r1, #10
 8002d32:	4621      	mov	r1, r4
 8002d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d38:	4621      	mov	r1, r4
 8002d3a:	028a      	lsls	r2, r1, #10
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d44:	2200      	movs	r2, #0
 8002d46:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d48:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d4e:	f7fd faaf 	bl	80002b0 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4613      	mov	r3, r2
 8002d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d5c:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d7e:	e0eb      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8c:	4b35      	ldr	r3, [pc, #212]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d06b      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d98:	4b32      	ldr	r3, [pc, #200]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	2200      	movs	r2, #0
 8002da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002da2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002da4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002daa:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dac:	2300      	movs	r3, #0
 8002dae:	667b      	str	r3, [r7, #100]	@ 0x64
 8002db0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002db4:	4622      	mov	r2, r4
 8002db6:	462b      	mov	r3, r5
 8002db8:	f04f 0000 	mov.w	r0, #0
 8002dbc:	f04f 0100 	mov.w	r1, #0
 8002dc0:	0159      	lsls	r1, r3, #5
 8002dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc6:	0150      	lsls	r0, r2, #5
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4621      	mov	r1, r4
 8002dce:	1a51      	subs	r1, r2, r1
 8002dd0:	61b9      	str	r1, [r7, #24]
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002de6:	4659      	mov	r1, fp
 8002de8:	018b      	lsls	r3, r1, #6
 8002dea:	4651      	mov	r1, sl
 8002dec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df0:	4651      	mov	r1, sl
 8002df2:	018a      	lsls	r2, r1, #6
 8002df4:	4651      	mov	r1, sl
 8002df6:	ebb2 0801 	subs.w	r8, r2, r1
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	eb63 0901 	sbc.w	r9, r3, r1
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e14:	4690      	mov	r8, r2
 8002e16:	4699      	mov	r9, r3
 8002e18:	4623      	mov	r3, r4
 8002e1a:	eb18 0303 	adds.w	r3, r8, r3
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	462b      	mov	r3, r5
 8002e22:	eb49 0303 	adc.w	r3, r9, r3
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e34:	4629      	mov	r1, r5
 8002e36:	024b      	lsls	r3, r1, #9
 8002e38:	4621      	mov	r1, r4
 8002e3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e3e:	4621      	mov	r1, r4
 8002e40:	024a      	lsls	r2, r1, #9
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e54:	f7fd fa2c 	bl	80002b0 <__aeabi_uldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e62:	e065      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x420>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e70:	4b3d      	ldr	r3, [pc, #244]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	2200      	movs	r2, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e80:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e82:	2300      	movs	r3, #0
 8002e84:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002e8a:	4642      	mov	r2, r8
 8002e8c:	464b      	mov	r3, r9
 8002e8e:	f04f 0000 	mov.w	r0, #0
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	0159      	lsls	r1, r3, #5
 8002e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e9c:	0150      	lsls	r0, r2, #5
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	1a51      	subs	r1, r2, r1
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	018b      	lsls	r3, r1, #6
 8002ec0:	4651      	mov	r1, sl
 8002ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	018a      	lsls	r2, r1, #6
 8002eca:	4651      	mov	r1, sl
 8002ecc:	1a54      	subs	r4, r2, r1
 8002ece:	4659      	mov	r1, fp
 8002ed0:	eb63 0501 	sbc.w	r5, r3, r1
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	00eb      	lsls	r3, r5, #3
 8002ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ee2:	00e2      	lsls	r2, r4, #3
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	461d      	mov	r5, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	18e3      	adds	r3, r4, r3
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	464b      	mov	r3, r9
 8002ef0:	eb45 0303 	adc.w	r3, r5, r3
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f02:	4629      	mov	r1, r5
 8002f04:	028b      	lsls	r3, r1, #10
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	028a      	lsls	r2, r1, #10
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f18:	2200      	movs	r2, #0
 8002f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f22:	f7fd f9c5 	bl	80002b0 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f30:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	0f1b      	lsrs	r3, r3, #28
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f4e:	e003      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	37b8      	adds	r7, #184	@ 0xb8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400

08002f70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e28d      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8083 	beq.w	8003096 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f90:	4b94      	ldr	r3, [pc, #592]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d019      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f9c:	4b91      	ldr	r3, [pc, #580]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fa8:	4b8e      	ldr	r3, [pc, #568]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b84      	ldr	r3, [pc, #528]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x124>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e25a      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x90>
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xcc>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0xb4>
 800300a:	4b76      	ldr	r3, [pc, #472]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a75      	ldr	r2, [pc, #468]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a72      	ldr	r2, [pc, #456]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xcc>
 8003024:	4b6f      	ldr	r3, [pc, #444]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6e      	ldr	r2, [pc, #440]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b6c      	ldr	r3, [pc, #432]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6b      	ldr	r2, [pc, #428]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fbe8 	bl	8001818 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fbe4 	bl	8001818 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	@ 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e21f      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b61      	ldr	r3, [pc, #388]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xdc>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fbd4 	bl	8001818 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe fbd0 	bl	8001818 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	@ 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e20b      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x104>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d06f      	beq.n	8003182 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030a2:	4b50      	ldr	r3, [pc, #320]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d017      	beq.n	80030de <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030ae:	4b4d      	ldr	r3, [pc, #308]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d105      	bne.n	80030c6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030ba:	4b4a      	ldr	r3, [pc, #296]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b44      	ldr	r3, [pc, #272]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b41      	ldr	r3, [pc, #260]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x186>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1d3      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4937      	ldr	r1, [pc, #220]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b34      	ldr	r3, [pc, #208]	@ (80031e8 <HAL_RCC_OscConfig+0x278>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fb7d 	bl	8001818 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe fb79 	bl	8001818 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1b4      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b28      	ldr	r3, [pc, #160]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4925      	ldr	r1, [pc, #148]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <HAL_RCC_OscConfig+0x278>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fb5c 	bl	8001818 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fb58 	bl	8001818 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e193      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d036      	beq.n	80031fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <HAL_RCC_OscConfig+0x27c>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe fb3c 	bl	8001818 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fb38 	bl	8001818 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e173      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <HAL_RCC_OscConfig+0x274>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x234>
 80031c2:	e01b      	b.n	80031fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <HAL_RCC_OscConfig+0x27c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fe fb25 	bl	8001818 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	e00e      	b.n	80031f0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe fb21 	bl	8001818 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d907      	bls.n	80031f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e15c      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
 80031e4:	40023800 	.word	0x40023800
 80031e8:	42470000 	.word	0x42470000
 80031ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	4b8a      	ldr	r3, [pc, #552]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ea      	bne.n	80031d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8097 	beq.w	8003338 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b83      	ldr	r3, [pc, #524]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b7f      	ldr	r3, [pc, #508]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	4a7e      	ldr	r2, [pc, #504]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	@ 0x40
 800322a:	4b7c      	ldr	r3, [pc, #496]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	4b79      	ldr	r3, [pc, #484]	@ (8003420 <HAL_RCC_OscConfig+0x4b0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d118      	bne.n	8003278 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003246:	4b76      	ldr	r3, [pc, #472]	@ (8003420 <HAL_RCC_OscConfig+0x4b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	@ (8003420 <HAL_RCC_OscConfig+0x4b0>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003252:	f7fe fae1 	bl	8001818 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325a:	f7fe fadd 	bl	8001818 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e118      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326c:	4b6c      	ldr	r3, [pc, #432]	@ (8003420 <HAL_RCC_OscConfig+0x4b0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d106      	bne.n	800328e <HAL_RCC_OscConfig+0x31e>
 8003280:	4b66      	ldr	r3, [pc, #408]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003284:	4a65      	ldr	r2, [pc, #404]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	@ 0x70
 800328c:	e01c      	b.n	80032c8 <HAL_RCC_OscConfig+0x358>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x340>
 8003296:	4b61      	ldr	r3, [pc, #388]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329a:	4a60      	ldr	r2, [pc, #384]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a2:	4b5e      	ldr	r3, [pc, #376]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a6:	4a5d      	ldr	r2, [pc, #372]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0x358>
 80032b0:	4b5a      	ldr	r3, [pc, #360]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	4a59      	ldr	r2, [pc, #356]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80032bc:	4b57      	ldr	r3, [pc, #348]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	4a56      	ldr	r2, [pc, #344]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032c2:	f023 0304 	bic.w	r3, r3, #4
 80032c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d015      	beq.n	80032fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe faa2 	bl	8001818 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe fa9e 	bl	8001818 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0d7      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ee      	beq.n	80032d8 <HAL_RCC_OscConfig+0x368>
 80032fa:	e014      	b.n	8003326 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fa8c 	bl	8001818 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003302:	e00a      	b.n	800331a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fe fa88 	bl	8001818 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0c1      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331a:	4b40      	ldr	r3, [pc, #256]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ee      	bne.n	8003304 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	4a3a      	ldr	r2, [pc, #232]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003336:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80ad 	beq.w	800349c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003342:	4b36      	ldr	r3, [pc, #216]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b08      	cmp	r3, #8
 800334c:	d060      	beq.n	8003410 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d145      	bne.n	80033e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	4b33      	ldr	r3, [pc, #204]	@ (8003424 <HAL_RCC_OscConfig+0x4b4>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fa5c 	bl	8001818 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fa58 	bl	8001818 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e093      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	4b29      	ldr	r3, [pc, #164]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	071b      	lsls	r3, r3, #28
 80033ae:	491b      	ldr	r1, [pc, #108]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003424 <HAL_RCC_OscConfig+0x4b4>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe fa2d 	bl	8001818 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe fa29 	bl	8001818 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e064      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x452>
 80033e0:	e05c      	b.n	800349c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <HAL_RCC_OscConfig+0x4b4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe fa16 	bl	8001818 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fa12 	bl	8001818 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04d      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_RCC_OscConfig+0x4ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x480>
 800340e:	e045      	b.n	800349c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e040      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003428:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <HAL_RCC_OscConfig+0x538>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d030      	beq.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d129      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d122      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800345e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d119      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d10f      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800

080034ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e041      	b.n	8003542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd ff06 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f000 fb7e 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e041      	b.n	80035e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f839 	bl	80035e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f000 fb2f 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_TIM_PWM_Start+0x24>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e022      	b.n	8003666 <HAL_TIM_PWM_Start+0x6a>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b04      	cmp	r3, #4
 8003624:	d109      	bne.n	800363a <HAL_TIM_PWM_Start+0x3e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e015      	b.n	8003666 <HAL_TIM_PWM_Start+0x6a>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d109      	bne.n	8003654 <HAL_TIM_PWM_Start+0x58>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e008      	b.n	8003666 <HAL_TIM_PWM_Start+0x6a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07c      	b.n	8003768 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <HAL_TIM_PWM_Start+0x82>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800367c:	e013      	b.n	80036a6 <HAL_TIM_PWM_Start+0xaa>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Start+0x92>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800368c:	e00b      	b.n	80036a6 <HAL_TIM_PWM_Start+0xaa>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d104      	bne.n	800369e <HAL_TIM_PWM_Start+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800369c:	e003      	b.n	80036a6 <HAL_TIM_PWM_Start+0xaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fd92 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003770 <HAL_TIM_PWM_Start+0x174>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIM_PWM_Start+0xcc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003774 <HAL_TIM_PWM_Start+0x178>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_TIM_PWM_Start+0xd0>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_TIM_PWM_Start+0xd2>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a22      	ldr	r2, [pc, #136]	@ (8003770 <HAL_TIM_PWM_Start+0x174>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_TIM_PWM_Start+0x136>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f4:	d01d      	beq.n	8003732 <HAL_TIM_PWM_Start+0x136>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003778 <HAL_TIM_PWM_Start+0x17c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_TIM_PWM_Start+0x136>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <HAL_TIM_PWM_Start+0x180>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_TIM_PWM_Start+0x136>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <HAL_TIM_PWM_Start+0x184>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIM_PWM_Start+0x136>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <HAL_TIM_PWM_Start+0x178>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_TIM_PWM_Start+0x136>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a18      	ldr	r2, [pc, #96]	@ (8003784 <HAL_TIM_PWM_Start+0x188>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIM_PWM_Start+0x136>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a16      	ldr	r2, [pc, #88]	@ (8003788 <HAL_TIM_PWM_Start+0x18c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d111      	bne.n	8003756 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d010      	beq.n	8003766 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003754:	e007      	b.n	8003766 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40014000 	.word	0x40014000
 8003788:	40001800 	.word	0x40001800

0800378c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e097      	b.n	80038d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7fd fc73 	bl	80010a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037d0:	f023 0307 	bic.w	r3, r3, #7
 80037d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4610      	mov	r0, r2
 80037e2:	f000 fa03 	bl	8003bec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	4313      	orrs	r3, r2
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800382c:	f023 030c 	bic.w	r3, r3, #12
 8003830:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003838:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800383c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	4313      	orrs	r3, r2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	011a      	lsls	r2, r3, #4
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	031b      	lsls	r3, r3, #12
 800385c:	4313      	orrs	r3, r2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4313      	orrs	r3, r2
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e0ae      	b.n	8003a54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	f200 809f 	bhi.w	8003a44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003906:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003941 	.word	0x08003941
 8003910:	08003a45 	.word	0x08003a45
 8003914:	08003a45 	.word	0x08003a45
 8003918:	08003a45 	.word	0x08003a45
 800391c:	08003981 	.word	0x08003981
 8003920:	08003a45 	.word	0x08003a45
 8003924:	08003a45 	.word	0x08003a45
 8003928:	08003a45 	.word	0x08003a45
 800392c:	080039c3 	.word	0x080039c3
 8003930:	08003a45 	.word	0x08003a45
 8003934:	08003a45 	.word	0x08003a45
 8003938:	08003a45 	.word	0x08003a45
 800393c:	08003a03 	.word	0x08003a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f9fc 	bl	8003d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0204 	bic.w	r2, r2, #4
 800396a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6999      	ldr	r1, [r3, #24]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	619a      	str	r2, [r3, #24]
      break;
 800397e:	e064      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fa4c 	bl	8003e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6999      	ldr	r1, [r3, #24]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	619a      	str	r2, [r3, #24]
      break;
 80039c0:	e043      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 faa1 	bl	8003f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0208 	orr.w	r2, r2, #8
 80039dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69da      	ldr	r2, [r3, #28]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0204 	bic.w	r2, r2, #4
 80039ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69d9      	ldr	r1, [r3, #28]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]
      break;
 8003a00:	e023      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 faf5 	bl	8003ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69d9      	ldr	r1, [r3, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	61da      	str	r2, [r3, #28]
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
      break;
 8003a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_TIM_ConfigClockSource+0x1c>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e0b4      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x186>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab0:	d03e      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0xd4>
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab6:	f200 8087 	bhi.w	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abe:	f000 8086 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x172>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac6:	d87f      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b70      	cmp	r3, #112	@ 0x70
 8003aca:	d01a      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0xa6>
 8003acc:	2b70      	cmp	r3, #112	@ 0x70
 8003ace:	d87b      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b60      	cmp	r3, #96	@ 0x60
 8003ad2:	d050      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x11a>
 8003ad4:	2b60      	cmp	r3, #96	@ 0x60
 8003ad6:	d877      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b50      	cmp	r3, #80	@ 0x50
 8003ada:	d03c      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0xfa>
 8003adc:	2b50      	cmp	r3, #80	@ 0x50
 8003ade:	d873      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b40      	cmp	r3, #64	@ 0x40
 8003ae2:	d058      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x13a>
 8003ae4:	2b40      	cmp	r3, #64	@ 0x40
 8003ae6:	d86f      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b30      	cmp	r3, #48	@ 0x30
 8003aea:	d064      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003aec:	2b30      	cmp	r3, #48	@ 0x30
 8003aee:	d86b      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d060      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b20      	cmp	r3, #32
 8003af6:	d867      	bhi.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d05c      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d05a      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	e062      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	f000 fb41 	bl	8004198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	609a      	str	r2, [r3, #8]
      break;
 8003b2e:	e04f      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b40:	f000 fb2a 	bl	8004198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b52:	609a      	str	r2, [r3, #8]
      break;
 8003b54:	e03c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 fa9e 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2150      	movs	r1, #80	@ 0x50
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 faf7 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e02c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b82:	461a      	mov	r2, r3
 8003b84:	f000 fabd 	bl	8004102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2160      	movs	r1, #96	@ 0x60
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fae7 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003b94:	e01c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 fa7e 	bl	80040a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2140      	movs	r1, #64	@ 0x40
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fad7 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e00c      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f000 face 	bl	8004162 <TIM_ITRx_SetConfig>
      break;
 8003bc6:	e003      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e000      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a46      	ldr	r2, [pc, #280]	@ (8003d18 <TIM_Base_SetConfig+0x12c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d013      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d00f      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a43      	ldr	r2, [pc, #268]	@ (8003d1c <TIM_Base_SetConfig+0x130>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a42      	ldr	r2, [pc, #264]	@ (8003d20 <TIM_Base_SetConfig+0x134>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a41      	ldr	r2, [pc, #260]	@ (8003d24 <TIM_Base_SetConfig+0x138>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_Base_SetConfig+0x40>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a40      	ldr	r2, [pc, #256]	@ (8003d28 <TIM_Base_SetConfig+0x13c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d108      	bne.n	8003c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a35      	ldr	r2, [pc, #212]	@ (8003d18 <TIM_Base_SetConfig+0x12c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d02b      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4c:	d027      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a32      	ldr	r2, [pc, #200]	@ (8003d1c <TIM_Base_SetConfig+0x130>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d023      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a31      	ldr	r2, [pc, #196]	@ (8003d20 <TIM_Base_SetConfig+0x134>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01f      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a30      	ldr	r2, [pc, #192]	@ (8003d24 <TIM_Base_SetConfig+0x138>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01b      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a2f      	ldr	r2, [pc, #188]	@ (8003d28 <TIM_Base_SetConfig+0x13c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d017      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a2e      	ldr	r2, [pc, #184]	@ (8003d2c <TIM_Base_SetConfig+0x140>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2d      	ldr	r2, [pc, #180]	@ (8003d30 <TIM_Base_SetConfig+0x144>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00f      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2c      	ldr	r2, [pc, #176]	@ (8003d34 <TIM_Base_SetConfig+0x148>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2b      	ldr	r2, [pc, #172]	@ (8003d38 <TIM_Base_SetConfig+0x14c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2a      	ldr	r2, [pc, #168]	@ (8003d3c <TIM_Base_SetConfig+0x150>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a29      	ldr	r2, [pc, #164]	@ (8003d40 <TIM_Base_SetConfig+0x154>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a10      	ldr	r2, [pc, #64]	@ (8003d18 <TIM_Base_SetConfig+0x12c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0xf8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a12      	ldr	r2, [pc, #72]	@ (8003d28 <TIM_Base_SetConfig+0x13c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d103      	bne.n	8003cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d105      	bne.n	8003d0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800
 8003d38:	40001800 	.word	0x40001800
 8003d3c:	40001c00 	.word	0x40001c00
 8003d40:	40002000 	.word	0x40002000

08003d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f023 0201 	bic.w	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f023 0302 	bic.w	r3, r3, #2
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a20      	ldr	r2, [pc, #128]	@ (8003e1c <TIM_OC1_SetConfig+0xd8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC1_SetConfig+0x64>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <TIM_OC1_SetConfig+0xdc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10c      	bne.n	8003dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0308 	bic.w	r3, r3, #8
 8003dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a15      	ldr	r2, [pc, #84]	@ (8003e1c <TIM_OC1_SetConfig+0xd8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC1_SetConfig+0x8e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <TIM_OC1_SetConfig+0xdc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d111      	bne.n	8003df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40010400 	.word	0x40010400

08003e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a22      	ldr	r2, [pc, #136]	@ (8003f08 <TIM_OC2_SetConfig+0xe4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC2_SetConfig+0x68>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a21      	ldr	r2, [pc, #132]	@ (8003f0c <TIM_OC2_SetConfig+0xe8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10d      	bne.n	8003ea8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <TIM_OC2_SetConfig+0xe4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_OC2_SetConfig+0x94>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	@ (8003f0c <TIM_OC2_SetConfig+0xe8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d113      	bne.n	8003ee0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010400 	.word	0x40010400

08003f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <TIM_OC3_SetConfig+0xe0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC3_SetConfig+0x66>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a20      	ldr	r2, [pc, #128]	@ (8003ff4 <TIM_OC3_SetConfig+0xe4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10d      	bne.n	8003f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a16      	ldr	r2, [pc, #88]	@ (8003ff0 <TIM_OC3_SetConfig+0xe0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC3_SetConfig+0x92>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <TIM_OC3_SetConfig+0xe4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	bf00      	nop
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a12      	ldr	r2, [pc, #72]	@ (800409c <TIM_OC4_SetConfig+0xa4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC4_SetConfig+0x68>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <TIM_OC4_SetConfig+0xa8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d109      	bne.n	8004074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 030a 	bic.w	r3, r3, #10
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800413e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 0307 	orr.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2201      	movs	r2, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1a      	ldr	r2, [r3, #32]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004238:	2302      	movs	r3, #2
 800423a:	e05a      	b.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a21      	ldr	r2, [pc, #132]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d01d      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1b      	ldr	r2, [pc, #108]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1a      	ldr	r2, [pc, #104]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a18      	ldr	r2, [pc, #96]	@ (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a17      	ldr	r2, [pc, #92]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a15      	ldr	r2, [pc, #84]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10c      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40001800 	.word	0x40001800

0800431c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e042      	b.n	80043b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd f840 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2224      	movs	r2, #36	@ 0x24
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800435e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 ff4f 	bl	8005204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	@ 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d175      	bne.n	80044c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_UART_Transmit+0x2c>
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e06e      	b.n	80044ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2221      	movs	r2, #33	@ 0x21
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fa:	f7fd fa0d 	bl	8001818 <HAL_GetTick>
 80043fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004414:	d108      	bne.n	8004428 <HAL_UART_Transmit+0x6c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e003      	b.n	8004430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004430:	e02e      	b.n	8004490 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2180      	movs	r1, #128	@ 0x80
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fc27 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e03a      	b.n	80044ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3302      	adds	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e007      	b.n	8004482 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1cb      	bne.n	8004432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2140      	movs	r1, #64	@ 0x40
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fbf3 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e006      	b.n	80044ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d112      	bne.n	8004512 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Receive_DMA+0x26>
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e00b      	b.n	8004514 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	461a      	mov	r2, r3
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fc1b 	bl	8004d44 <UART_Start_Receive_DMA>
 800450e:	4603      	mov	r3, r0
 8004510:	e000      	b.n	8004514 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0ba      	sub	sp, #232	@ 0xe8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800455a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_UART_IRQHandler+0x66>
 800456e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fd83 	bl	8005086 <UART_Receive_IT>
      return;
 8004580:	e25b      	b.n	8004a3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80de 	beq.w	8004748 <HAL_UART_IRQHandler+0x22c>
 800458c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80d1 	beq.w	8004748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_UART_IRQHandler+0xae>
 80045b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	f043 0201 	orr.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_UART_IRQHandler+0xd2>
 80045d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_UART_IRQHandler+0xf6>
 80045fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <HAL_UART_IRQHandler+0x126>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	f043 0208 	orr.w	r2, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 81f2 	beq.w	8004a30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_UART_IRQHandler+0x14e>
 8004658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fd0e 	bl	8005086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b40      	cmp	r3, #64	@ 0x40
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_UART_IRQHandler+0x17a>
 800468e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d04f      	beq.n	8004736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fc16 	bl	8004ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a6:	2b40      	cmp	r3, #64	@ 0x40
 80046a8:	d141      	bne.n	800472e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1d9      	bne.n	80046aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d013      	beq.n	8004726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004702:	4a7e      	ldr	r2, [pc, #504]	@ (80048fc <HAL_UART_IRQHandler+0x3e0>)
 8004704:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd fb18 	bl	8001d40 <HAL_DMA_Abort_IT>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004720:	4610      	mov	r0, r2
 8004722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004724:	e00e      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f99e 	bl	8004a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00a      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f99a 	bl	8004a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e006      	b.n	8004744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f996 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004742:	e175      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	bf00      	nop
    return;
 8004746:	e173      	b.n	8004a30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 814f 	bne.w	80049f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8148 	beq.w	80049f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8141 	beq.w	80049f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478e:	2b40      	cmp	r3, #64	@ 0x40
 8004790:	f040 80b6 	bne.w	8004900 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8145 	beq.w	8004a34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f080 813e 	bcs.w	8004a34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ca:	f000 8088 	beq.w	80048de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004806:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d9      	bne.n	80047ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800482a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800483e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004842:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004846:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e1      	bne.n	800481a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800486c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800487a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800487c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004880:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e3      	bne.n	8004856 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ae:	f023 0310 	bic.w	r3, r3, #16
 80048b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e3      	bne.n	800489c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fd f9c1 	bl	8001c60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8c1 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048fa:	e09b      	b.n	8004a34 <HAL_UART_IRQHandler+0x518>
 80048fc:	08004f8f 	.word	0x08004f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004908:	b29b      	uxth	r3, r3
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 808e 	beq.w	8004a38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800491c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8089 	beq.w	8004a38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800493c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800494a:	647a      	str	r2, [r7, #68]	@ 0x44
 800494c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e3      	bne.n	8004926 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	623b      	str	r3, [r7, #32]
   return(result);
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004982:	633a      	str	r2, [r7, #48]	@ 0x30
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e3      	bne.n	800495e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0310 	bic.w	r3, r3, #16
 80049ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049c8:	61fa      	str	r2, [r7, #28]
 80049ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	617b      	str	r3, [r7, #20]
   return(result);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e3      	bne.n	80049a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f847 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ee:	e023      	b.n	8004a38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_UART_IRQHandler+0x4f4>
 80049fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fad4 	bl	8004fb6 <UART_Transmit_IT>
    return;
 8004a0e:	e014      	b.n	8004a3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <HAL_UART_IRQHandler+0x51e>
 8004a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fb14 	bl	8005056 <UART_EndTransmit_IT>
    return;
 8004a2e:	e004      	b.n	8004a3a <HAL_UART_IRQHandler+0x51e>
    return;
 8004a30:	bf00      	nop
 8004a32:	e002      	b.n	8004a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004a34:	bf00      	nop
 8004a36:	e000      	b.n	8004a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004a38:	bf00      	nop
  }
}
 8004a3a:	37e8      	adds	r7, #232	@ 0xe8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b09c      	sub	sp, #112	@ 0x70
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d172      	bne.n	8004b96 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ad6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ad8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e5      	bne.n	8004ab6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d119      	bne.n	8004b96 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0310 	bic.w	r3, r3, #16
 8004b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b82:	61fa      	str	r2, [r7, #28]
 8004b84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	69b9      	ldr	r1, [r7, #24]
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e5      	bne.n	8004b62 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b98:	2200      	movs	r2, #0
 8004b9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d106      	bne.n	8004bb2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bac:	f7ff ff66 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bb0:	e002      	b.n	8004bb8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004bb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bb4:	f7fb fcf4 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 8004bb8:	bf00      	nop
 8004bba:	3770      	adds	r7, #112	@ 0x70
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d108      	bne.n	8004bee <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4619      	mov	r1, r3
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff ff48 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bec:	e002      	b.n	8004bf4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff ff30 	bl	8004a54 <HAL_UART_RxHalfCpltCallback>
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c18:	2b80      	cmp	r3, #128	@ 0x80
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b21      	cmp	r3, #33	@ 0x21
 8004c2e:	d108      	bne.n	8004c42 <UART_DMAError+0x46>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c3c:	68b8      	ldr	r0, [r7, #8]
 8004c3e:	f000 f91b 	bl	8004e78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b40      	cmp	r3, #64	@ 0x40
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b22      	cmp	r3, #34	@ 0x22
 8004c62:	d108      	bne.n	8004c76 <UART_DMAError+0x7a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f000 f929 	bl	8004ec8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7a:	f043 0210 	orr.w	r2, r3, #16
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c82:	68b8      	ldr	r0, [r7, #8]
 8004c84:	f7ff fef0 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	e03b      	b.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d037      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fc fdb5 	bl	8001818 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	6a3a      	ldr	r2, [r7, #32]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e03a      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d023      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b80      	cmp	r3, #128	@ 0x80
 8004cd6:	d020      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b40      	cmp	r3, #64	@ 0x40
 8004cdc:	d01d      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d116      	bne.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f8e0 	bl	8004ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e00f      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4013      	ands	r3, r2
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d0b4      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b098      	sub	sp, #96	@ 0x60
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2222      	movs	r2, #34	@ 0x22
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	4a3e      	ldr	r2, [pc, #248]	@ (8004e6c <UART_Start_Receive_DMA+0x128>)
 8004d72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d78:	4a3d      	ldr	r2, [pc, #244]	@ (8004e70 <UART_Start_Receive_DMA+0x12c>)
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d80:	4a3c      	ldr	r2, [pc, #240]	@ (8004e74 <UART_Start_Receive_DMA+0x130>)
 8004d82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d88:	2200      	movs	r2, #0
 8004d8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d8c:	f107 0308 	add.w	r3, r7, #8
 8004d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	f7fc ff04 	bl	8001bb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d019      	beq.n	8004dfa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004de6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e1a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6a39      	ldr	r1, [r7, #32]
 8004e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e5      	bne.n	8004e2e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3760      	adds	r7, #96	@ 0x60
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08004a95 	.word	0x08004a95
 8004e70:	08004bc1 	.word	0x08004bc1
 8004e74:	08004bfd 	.word	0x08004bfd

08004e78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	61ba      	str	r2, [r7, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	613b      	str	r3, [r7, #16]
   return(result);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004ebc:	bf00      	nop
 8004ebe:	3724      	adds	r7, #36	@ 0x24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b095      	sub	sp, #84	@ 0x54
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ef0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ef6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d119      	bne.n	8004f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f60:	61ba      	str	r2, [r7, #24]
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f82:	bf00      	nop
 8004f84:	3754      	adds	r7, #84	@ 0x54
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff fd5d 	bl	8004a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b21      	cmp	r3, #33	@ 0x21
 8004fc8:	d13e      	bne.n	8005048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fd2:	d114      	bne.n	8004ffe <UART_Transmit_IT+0x48>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d110      	bne.n	8004ffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	1c9a      	adds	r2, r3, #2
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	621a      	str	r2, [r3, #32]
 8004ffc:	e008      	b.n	8005010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	1c59      	adds	r1, r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6211      	str	r1, [r2, #32]
 8005008:	781a      	ldrb	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4619      	mov	r1, r3
 800501e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10f      	bne.n	8005044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800506c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fce2 	bl	8004a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b08c      	sub	sp, #48	@ 0x30
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b22      	cmp	r3, #34	@ 0x22
 8005098:	f040 80ae 	bne.w	80051f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a4:	d117      	bne.n	80050d6 <UART_Receive_IT+0x50>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d113      	bne.n	80050d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	1c9a      	adds	r2, r3, #2
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80050d4:	e026      	b.n	8005124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e8:	d007      	beq.n	80050fa <UART_Receive_IT+0x74>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <UART_Receive_IT+0x82>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e008      	b.n	800511a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005114:	b2da      	uxtb	r2, r3
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4619      	mov	r1, r3
 8005132:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005134:	2b00      	cmp	r3, #0
 8005136:	d15d      	bne.n	80051f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0220 	bic.w	r2, r2, #32
 8005146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	2b01      	cmp	r3, #1
 800517c:	d135      	bne.n	80051ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	613b      	str	r3, [r7, #16]
   return(result);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f023 0310 	bic.w	r3, r3, #16
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a4:	623a      	str	r2, [r7, #32]
 80051a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	69f9      	ldr	r1, [r7, #28]
 80051aa:	6a3a      	ldr	r2, [r7, #32]
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d10a      	bne.n	80051dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fc4a 	bl	8004a7c <HAL_UARTEx_RxEventCallback>
 80051e8:	e002      	b.n	80051f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fb f9d8 	bl	80005a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e002      	b.n	80051fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e000      	b.n	80051fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
  }
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3730      	adds	r7, #48	@ 0x30
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b0c0      	sub	sp, #256	@ 0x100
 800520a:	af00      	add	r7, sp, #0
 800520c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	68d9      	ldr	r1, [r3, #12]
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	ea40 0301 	orr.w	r3, r0, r1
 800522c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	431a      	orrs	r2, r3
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	431a      	orrs	r2, r3
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800525c:	f021 010c 	bic.w	r1, r1, #12
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800526a:	430b      	orrs	r3, r1
 800526c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527e:	6999      	ldr	r1, [r3, #24]
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	ea40 0301 	orr.w	r3, r0, r1
 800528a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4b8f      	ldr	r3, [pc, #572]	@ (80054d0 <UART_SetConfig+0x2cc>)
 8005294:	429a      	cmp	r2, r3
 8005296:	d005      	beq.n	80052a4 <UART_SetConfig+0xa0>
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b8d      	ldr	r3, [pc, #564]	@ (80054d4 <UART_SetConfig+0x2d0>)
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d104      	bne.n	80052ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052a4:	f7fd fc20 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 80052a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052ac:	e003      	b.n	80052b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ae:	f7fd fc07 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 80052b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c0:	f040 810c 	bne.w	80054dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052d6:	4622      	mov	r2, r4
 80052d8:	462b      	mov	r3, r5
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052de:	415b      	adcs	r3, r3
 80052e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052e6:	4621      	mov	r1, r4
 80052e8:	eb12 0801 	adds.w	r8, r2, r1
 80052ec:	4629      	mov	r1, r5
 80052ee:	eb43 0901 	adc.w	r9, r3, r1
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005306:	4690      	mov	r8, r2
 8005308:	4699      	mov	r9, r3
 800530a:	4623      	mov	r3, r4
 800530c:	eb18 0303 	adds.w	r3, r8, r3
 8005310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005314:	462b      	mov	r3, r5
 8005316:	eb49 0303 	adc.w	r3, r9, r3
 800531a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800532a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800532e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005332:	460b      	mov	r3, r1
 8005334:	18db      	adds	r3, r3, r3
 8005336:	653b      	str	r3, [r7, #80]	@ 0x50
 8005338:	4613      	mov	r3, r2
 800533a:	eb42 0303 	adc.w	r3, r2, r3
 800533e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005348:	f7fa ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4b61      	ldr	r3, [pc, #388]	@ (80054d8 <UART_SetConfig+0x2d4>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	011c      	lsls	r4, r3, #4
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005364:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005374:	415b      	adcs	r3, r3
 8005376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800537c:	4641      	mov	r1, r8
 800537e:	eb12 0a01 	adds.w	sl, r2, r1
 8005382:	4649      	mov	r1, r9
 8005384:	eb43 0b01 	adc.w	fp, r3, r1
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800539c:	4692      	mov	sl, r2
 800539e:	469b      	mov	fp, r3
 80053a0:	4643      	mov	r3, r8
 80053a2:	eb1a 0303 	adds.w	r3, sl, r3
 80053a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053aa:	464b      	mov	r3, r9
 80053ac:	eb4b 0303 	adc.w	r3, fp, r3
 80053b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053c8:	460b      	mov	r3, r1
 80053ca:	18db      	adds	r3, r3, r3
 80053cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ce:	4613      	mov	r3, r2
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053de:	f7fa ff67 	bl	80002b0 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <UART_SetConfig+0x2d4>)
 80053ea:	fba3 2301 	umull	r2, r3, r3, r1
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	2264      	movs	r2, #100	@ 0x64
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	1acb      	subs	r3, r1, r3
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <UART_SetConfig+0x2d4>)
 8005400:	fba3 2302 	umull	r2, r3, r3, r2
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800540c:	441c      	add	r4, r3
 800540e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005412:	2200      	movs	r2, #0
 8005414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005418:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800541c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	1891      	adds	r1, r2, r2
 8005426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005428:	415b      	adcs	r3, r3
 800542a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800542c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005430:	4641      	mov	r1, r8
 8005432:	1851      	adds	r1, r2, r1
 8005434:	6339      	str	r1, [r7, #48]	@ 0x30
 8005436:	4649      	mov	r1, r9
 8005438:	414b      	adcs	r3, r1
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005448:	4659      	mov	r1, fp
 800544a:	00cb      	lsls	r3, r1, #3
 800544c:	4651      	mov	r1, sl
 800544e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005452:	4651      	mov	r1, sl
 8005454:	00ca      	lsls	r2, r1, #3
 8005456:	4610      	mov	r0, r2
 8005458:	4619      	mov	r1, r3
 800545a:	4603      	mov	r3, r0
 800545c:	4642      	mov	r2, r8
 800545e:	189b      	adds	r3, r3, r2
 8005460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005464:	464b      	mov	r3, r9
 8005466:	460a      	mov	r2, r1
 8005468:	eb42 0303 	adc.w	r3, r2, r3
 800546c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800547c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005484:	460b      	mov	r3, r1
 8005486:	18db      	adds	r3, r3, r3
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800548a:	4613      	mov	r3, r2
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800549a:	f7fa ff09 	bl	80002b0 <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <UART_SetConfig+0x2d4>)
 80054a4:	fba3 1302 	umull	r1, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	2164      	movs	r1, #100	@ 0x64
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	3332      	adds	r3, #50	@ 0x32
 80054b6:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <UART_SetConfig+0x2d4>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	f003 0207 	and.w	r2, r3, #7
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4422      	add	r2, r4
 80054ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054cc:	e106      	b.n	80056dc <UART_SetConfig+0x4d8>
 80054ce:	bf00      	nop
 80054d0:	40011000 	.word	0x40011000
 80054d4:	40011400 	.word	0x40011400
 80054d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054ee:	4642      	mov	r2, r8
 80054f0:	464b      	mov	r3, r9
 80054f2:	1891      	adds	r1, r2, r2
 80054f4:	6239      	str	r1, [r7, #32]
 80054f6:	415b      	adcs	r3, r3
 80054f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054fe:	4641      	mov	r1, r8
 8005500:	1854      	adds	r4, r2, r1
 8005502:	4649      	mov	r1, r9
 8005504:	eb43 0501 	adc.w	r5, r3, r1
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	00eb      	lsls	r3, r5, #3
 8005512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005516:	00e2      	lsls	r2, r4, #3
 8005518:	4614      	mov	r4, r2
 800551a:	461d      	mov	r5, r3
 800551c:	4643      	mov	r3, r8
 800551e:	18e3      	adds	r3, r4, r3
 8005520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005524:	464b      	mov	r3, r9
 8005526:	eb45 0303 	adc.w	r3, r5, r3
 800552a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800553a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800554a:	4629      	mov	r1, r5
 800554c:	008b      	lsls	r3, r1, #2
 800554e:	4621      	mov	r1, r4
 8005550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005554:	4621      	mov	r1, r4
 8005556:	008a      	lsls	r2, r1, #2
 8005558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800555c:	f7fa fea8 	bl	80002b0 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4b60      	ldr	r3, [pc, #384]	@ (80056e8 <UART_SetConfig+0x4e4>)
 8005566:	fba3 2302 	umull	r2, r3, r3, r2
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	011c      	lsls	r4, r3, #4
 800556e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005572:	2200      	movs	r2, #0
 8005574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800557c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	1891      	adds	r1, r2, r2
 8005586:	61b9      	str	r1, [r7, #24]
 8005588:	415b      	adcs	r3, r3
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005590:	4641      	mov	r1, r8
 8005592:	1851      	adds	r1, r2, r1
 8005594:	6139      	str	r1, [r7, #16]
 8005596:	4649      	mov	r1, r9
 8005598:	414b      	adcs	r3, r1
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a8:	4659      	mov	r1, fp
 80055aa:	00cb      	lsls	r3, r1, #3
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b2:	4651      	mov	r1, sl
 80055b4:	00ca      	lsls	r2, r1, #3
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	4642      	mov	r2, r8
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055c4:	464b      	mov	r3, r9
 80055c6:	460a      	mov	r2, r1
 80055c8:	eb42 0303 	adc.w	r3, r2, r3
 80055cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055e8:	4649      	mov	r1, r9
 80055ea:	008b      	lsls	r3, r1, #2
 80055ec:	4641      	mov	r1, r8
 80055ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f2:	4641      	mov	r1, r8
 80055f4:	008a      	lsls	r2, r1, #2
 80055f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055fa:	f7fa fe59 	bl	80002b0 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4611      	mov	r1, r2
 8005604:	4b38      	ldr	r3, [pc, #224]	@ (80056e8 <UART_SetConfig+0x4e4>)
 8005606:	fba3 2301 	umull	r2, r3, r3, r1
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2264      	movs	r2, #100	@ 0x64
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	1acb      	subs	r3, r1, r3
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	3332      	adds	r3, #50	@ 0x32
 8005618:	4a33      	ldr	r2, [pc, #204]	@ (80056e8 <UART_SetConfig+0x4e4>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005624:	441c      	add	r4, r3
 8005626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800562a:	2200      	movs	r2, #0
 800562c:	673b      	str	r3, [r7, #112]	@ 0x70
 800562e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005630:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005634:	4642      	mov	r2, r8
 8005636:	464b      	mov	r3, r9
 8005638:	1891      	adds	r1, r2, r2
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	415b      	adcs	r3, r3
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005644:	4641      	mov	r1, r8
 8005646:	1851      	adds	r1, r2, r1
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	4649      	mov	r1, r9
 800564c:	414b      	adcs	r3, r1
 800564e:	607b      	str	r3, [r7, #4]
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800565c:	4659      	mov	r1, fp
 800565e:	00cb      	lsls	r3, r1, #3
 8005660:	4651      	mov	r1, sl
 8005662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005666:	4651      	mov	r1, sl
 8005668:	00ca      	lsls	r2, r1, #3
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	4603      	mov	r3, r0
 8005670:	4642      	mov	r2, r8
 8005672:	189b      	adds	r3, r3, r2
 8005674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005676:	464b      	mov	r3, r9
 8005678:	460a      	mov	r2, r1
 800567a:	eb42 0303 	adc.w	r3, r2, r3
 800567e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	663b      	str	r3, [r7, #96]	@ 0x60
 800568a:	667a      	str	r2, [r7, #100]	@ 0x64
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005698:	4649      	mov	r1, r9
 800569a:	008b      	lsls	r3, r1, #2
 800569c:	4641      	mov	r1, r8
 800569e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a2:	4641      	mov	r1, r8
 80056a4:	008a      	lsls	r2, r1, #2
 80056a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056aa:	f7fa fe01 	bl	80002b0 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <UART_SetConfig+0x4e4>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	@ 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	3332      	adds	r3, #50	@ 0x32
 80056c6:	4a08      	ldr	r2, [pc, #32]	@ (80056e8 <UART_SetConfig+0x4e4>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4422      	add	r2, r4
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056e2:	46bd      	mov	sp, r7
 80056e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e8:	51eb851f 	.word	0x51eb851f

080056ec <std>:
 80056ec:	2300      	movs	r3, #0
 80056ee:	b510      	push	{r4, lr}
 80056f0:	4604      	mov	r4, r0
 80056f2:	e9c0 3300 	strd	r3, r3, [r0]
 80056f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056fa:	6083      	str	r3, [r0, #8]
 80056fc:	8181      	strh	r1, [r0, #12]
 80056fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005700:	81c2      	strh	r2, [r0, #14]
 8005702:	6183      	str	r3, [r0, #24]
 8005704:	4619      	mov	r1, r3
 8005706:	2208      	movs	r2, #8
 8005708:	305c      	adds	r0, #92	@ 0x5c
 800570a:	f000 f906 	bl	800591a <memset>
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <std+0x58>)
 8005710:	6263      	str	r3, [r4, #36]	@ 0x24
 8005712:	4b0d      	ldr	r3, [pc, #52]	@ (8005748 <std+0x5c>)
 8005714:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005716:	4b0d      	ldr	r3, [pc, #52]	@ (800574c <std+0x60>)
 8005718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800571a:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <std+0x64>)
 800571c:	6323      	str	r3, [r4, #48]	@ 0x30
 800571e:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <std+0x68>)
 8005720:	6224      	str	r4, [r4, #32]
 8005722:	429c      	cmp	r4, r3
 8005724:	d006      	beq.n	8005734 <std+0x48>
 8005726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800572a:	4294      	cmp	r4, r2
 800572c:	d002      	beq.n	8005734 <std+0x48>
 800572e:	33d0      	adds	r3, #208	@ 0xd0
 8005730:	429c      	cmp	r4, r3
 8005732:	d105      	bne.n	8005740 <std+0x54>
 8005734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573c:	f000 b966 	b.w	8005a0c <__retarget_lock_init_recursive>
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	08005895 	.word	0x08005895
 8005748:	080058b7 	.word	0x080058b7
 800574c:	080058ef 	.word	0x080058ef
 8005750:	08005913 	.word	0x08005913
 8005754:	200003e0 	.word	0x200003e0

08005758 <stdio_exit_handler>:
 8005758:	4a02      	ldr	r2, [pc, #8]	@ (8005764 <stdio_exit_handler+0xc>)
 800575a:	4903      	ldr	r1, [pc, #12]	@ (8005768 <stdio_exit_handler+0x10>)
 800575c:	4803      	ldr	r0, [pc, #12]	@ (800576c <stdio_exit_handler+0x14>)
 800575e:	f000 b869 	b.w	8005834 <_fwalk_sglue>
 8005762:	bf00      	nop
 8005764:	20000018 	.word	0x20000018
 8005768:	080062ad 	.word	0x080062ad
 800576c:	20000028 	.word	0x20000028

08005770 <cleanup_stdio>:
 8005770:	6841      	ldr	r1, [r0, #4]
 8005772:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <cleanup_stdio+0x34>)
 8005774:	4299      	cmp	r1, r3
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
 800577a:	d001      	beq.n	8005780 <cleanup_stdio+0x10>
 800577c:	f000 fd96 	bl	80062ac <_fflush_r>
 8005780:	68a1      	ldr	r1, [r4, #8]
 8005782:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <cleanup_stdio+0x38>)
 8005784:	4299      	cmp	r1, r3
 8005786:	d002      	beq.n	800578e <cleanup_stdio+0x1e>
 8005788:	4620      	mov	r0, r4
 800578a:	f000 fd8f 	bl	80062ac <_fflush_r>
 800578e:	68e1      	ldr	r1, [r4, #12]
 8005790:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <cleanup_stdio+0x3c>)
 8005792:	4299      	cmp	r1, r3
 8005794:	d004      	beq.n	80057a0 <cleanup_stdio+0x30>
 8005796:	4620      	mov	r0, r4
 8005798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800579c:	f000 bd86 	b.w	80062ac <_fflush_r>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	bf00      	nop
 80057a4:	200003e0 	.word	0x200003e0
 80057a8:	20000448 	.word	0x20000448
 80057ac:	200004b0 	.word	0x200004b0

080057b0 <global_stdio_init.part.0>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <global_stdio_init.part.0+0x30>)
 80057b4:	4c0b      	ldr	r4, [pc, #44]	@ (80057e4 <global_stdio_init.part.0+0x34>)
 80057b6:	4a0c      	ldr	r2, [pc, #48]	@ (80057e8 <global_stdio_init.part.0+0x38>)
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	4620      	mov	r0, r4
 80057bc:	2200      	movs	r2, #0
 80057be:	2104      	movs	r1, #4
 80057c0:	f7ff ff94 	bl	80056ec <std>
 80057c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057c8:	2201      	movs	r2, #1
 80057ca:	2109      	movs	r1, #9
 80057cc:	f7ff ff8e 	bl	80056ec <std>
 80057d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057d4:	2202      	movs	r2, #2
 80057d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057da:	2112      	movs	r1, #18
 80057dc:	f7ff bf86 	b.w	80056ec <std>
 80057e0:	20000518 	.word	0x20000518
 80057e4:	200003e0 	.word	0x200003e0
 80057e8:	08005759 	.word	0x08005759

080057ec <__sfp_lock_acquire>:
 80057ec:	4801      	ldr	r0, [pc, #4]	@ (80057f4 <__sfp_lock_acquire+0x8>)
 80057ee:	f000 b90e 	b.w	8005a0e <__retarget_lock_acquire_recursive>
 80057f2:	bf00      	nop
 80057f4:	20000521 	.word	0x20000521

080057f8 <__sfp_lock_release>:
 80057f8:	4801      	ldr	r0, [pc, #4]	@ (8005800 <__sfp_lock_release+0x8>)
 80057fa:	f000 b909 	b.w	8005a10 <__retarget_lock_release_recursive>
 80057fe:	bf00      	nop
 8005800:	20000521 	.word	0x20000521

08005804 <__sinit>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4604      	mov	r4, r0
 8005808:	f7ff fff0 	bl	80057ec <__sfp_lock_acquire>
 800580c:	6a23      	ldr	r3, [r4, #32]
 800580e:	b11b      	cbz	r3, 8005818 <__sinit+0x14>
 8005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005814:	f7ff bff0 	b.w	80057f8 <__sfp_lock_release>
 8005818:	4b04      	ldr	r3, [pc, #16]	@ (800582c <__sinit+0x28>)
 800581a:	6223      	str	r3, [r4, #32]
 800581c:	4b04      	ldr	r3, [pc, #16]	@ (8005830 <__sinit+0x2c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f5      	bne.n	8005810 <__sinit+0xc>
 8005824:	f7ff ffc4 	bl	80057b0 <global_stdio_init.part.0>
 8005828:	e7f2      	b.n	8005810 <__sinit+0xc>
 800582a:	bf00      	nop
 800582c:	08005771 	.word	0x08005771
 8005830:	20000518 	.word	0x20000518

08005834 <_fwalk_sglue>:
 8005834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005838:	4607      	mov	r7, r0
 800583a:	4688      	mov	r8, r1
 800583c:	4614      	mov	r4, r2
 800583e:	2600      	movs	r6, #0
 8005840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005844:	f1b9 0901 	subs.w	r9, r9, #1
 8005848:	d505      	bpl.n	8005856 <_fwalk_sglue+0x22>
 800584a:	6824      	ldr	r4, [r4, #0]
 800584c:	2c00      	cmp	r4, #0
 800584e:	d1f7      	bne.n	8005840 <_fwalk_sglue+0xc>
 8005850:	4630      	mov	r0, r6
 8005852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d907      	bls.n	800586c <_fwalk_sglue+0x38>
 800585c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005860:	3301      	adds	r3, #1
 8005862:	d003      	beq.n	800586c <_fwalk_sglue+0x38>
 8005864:	4629      	mov	r1, r5
 8005866:	4638      	mov	r0, r7
 8005868:	47c0      	blx	r8
 800586a:	4306      	orrs	r6, r0
 800586c:	3568      	adds	r5, #104	@ 0x68
 800586e:	e7e9      	b.n	8005844 <_fwalk_sglue+0x10>

08005870 <iprintf>:
 8005870:	b40f      	push	{r0, r1, r2, r3}
 8005872:	b507      	push	{r0, r1, r2, lr}
 8005874:	4906      	ldr	r1, [pc, #24]	@ (8005890 <iprintf+0x20>)
 8005876:	ab04      	add	r3, sp, #16
 8005878:	6808      	ldr	r0, [r1, #0]
 800587a:	f853 2b04 	ldr.w	r2, [r3], #4
 800587e:	6881      	ldr	r1, [r0, #8]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f000 f9e9 	bl	8005c58 <_vfiprintf_r>
 8005886:	b003      	add	sp, #12
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
 800588c:	b004      	add	sp, #16
 800588e:	4770      	bx	lr
 8005890:	20000024 	.word	0x20000024

08005894 <__sread>:
 8005894:	b510      	push	{r4, lr}
 8005896:	460c      	mov	r4, r1
 8005898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589c:	f000 f868 	bl	8005970 <_read_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	bfab      	itete	ge
 80058a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058a6:	89a3      	ldrhlt	r3, [r4, #12]
 80058a8:	181b      	addge	r3, r3, r0
 80058aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058ae:	bfac      	ite	ge
 80058b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058b2:	81a3      	strhlt	r3, [r4, #12]
 80058b4:	bd10      	pop	{r4, pc}

080058b6 <__swrite>:
 80058b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ba:	461f      	mov	r7, r3
 80058bc:	898b      	ldrh	r3, [r1, #12]
 80058be:	05db      	lsls	r3, r3, #23
 80058c0:	4605      	mov	r5, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	4616      	mov	r6, r2
 80058c6:	d505      	bpl.n	80058d4 <__swrite+0x1e>
 80058c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058cc:	2302      	movs	r3, #2
 80058ce:	2200      	movs	r2, #0
 80058d0:	f000 f83c 	bl	800594c <_lseek_r>
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	4632      	mov	r2, r6
 80058e2:	463b      	mov	r3, r7
 80058e4:	4628      	mov	r0, r5
 80058e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	f000 b853 	b.w	8005994 <_write_r>

080058ee <__sseek>:
 80058ee:	b510      	push	{r4, lr}
 80058f0:	460c      	mov	r4, r1
 80058f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f6:	f000 f829 	bl	800594c <_lseek_r>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	bf15      	itete	ne
 8005900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800590a:	81a3      	strheq	r3, [r4, #12]
 800590c:	bf18      	it	ne
 800590e:	81a3      	strhne	r3, [r4, #12]
 8005910:	bd10      	pop	{r4, pc}

08005912 <__sclose>:
 8005912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005916:	f000 b809 	b.w	800592c <_close_r>

0800591a <memset>:
 800591a:	4402      	add	r2, r0
 800591c:	4603      	mov	r3, r0
 800591e:	4293      	cmp	r3, r2
 8005920:	d100      	bne.n	8005924 <memset+0xa>
 8005922:	4770      	bx	lr
 8005924:	f803 1b01 	strb.w	r1, [r3], #1
 8005928:	e7f9      	b.n	800591e <memset+0x4>
	...

0800592c <_close_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	@ (8005948 <_close_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb fe61 	bl	80015fe <_close>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_close_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_close_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	2000051c 	.word	0x2000051c

0800594c <_lseek_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	@ (800596c <_lseek_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb fe76 	bl	800164c <_lseek>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_lseek_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_lseek_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	2000051c 	.word	0x2000051c

08005970 <_read_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	@ (8005990 <_read_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb fe20 	bl	80015c4 <_read>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_read_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_read_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	2000051c 	.word	0x2000051c

08005994 <_write_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d07      	ldr	r5, [pc, #28]	@ (80059b4 <_write_r+0x20>)
 8005998:	4604      	mov	r4, r0
 800599a:	4608      	mov	r0, r1
 800599c:	4611      	mov	r1, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	602a      	str	r2, [r5, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f7fb faf0 	bl	8000f88 <_write>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_write_r+0x1e>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_write_r+0x1e>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	2000051c 	.word	0x2000051c

080059b8 <__errno>:
 80059b8:	4b01      	ldr	r3, [pc, #4]	@ (80059c0 <__errno+0x8>)
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000024 	.word	0x20000024

080059c4 <__libc_init_array>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4d0d      	ldr	r5, [pc, #52]	@ (80059fc <__libc_init_array+0x38>)
 80059c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005a00 <__libc_init_array+0x3c>)
 80059ca:	1b64      	subs	r4, r4, r5
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	2600      	movs	r6, #0
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	d109      	bne.n	80059e8 <__libc_init_array+0x24>
 80059d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005a04 <__libc_init_array+0x40>)
 80059d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005a08 <__libc_init_array+0x44>)
 80059d8:	f000 fdb8 	bl	800654c <_init>
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	2600      	movs	r6, #0
 80059e2:	42a6      	cmp	r6, r4
 80059e4:	d105      	bne.n	80059f2 <__libc_init_array+0x2e>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ec:	4798      	blx	r3
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7ee      	b.n	80059d0 <__libc_init_array+0xc>
 80059f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f6:	4798      	blx	r3
 80059f8:	3601      	adds	r6, #1
 80059fa:	e7f2      	b.n	80059e2 <__libc_init_array+0x1e>
 80059fc:	080065d0 	.word	0x080065d0
 8005a00:	080065d0 	.word	0x080065d0
 8005a04:	080065d0 	.word	0x080065d0
 8005a08:	080065d4 	.word	0x080065d4

08005a0c <__retarget_lock_init_recursive>:
 8005a0c:	4770      	bx	lr

08005a0e <__retarget_lock_acquire_recursive>:
 8005a0e:	4770      	bx	lr

08005a10 <__retarget_lock_release_recursive>:
 8005a10:	4770      	bx	lr
	...

08005a14 <_free_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4605      	mov	r5, r0
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	d041      	beq.n	8005aa0 <_free_r+0x8c>
 8005a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a20:	1f0c      	subs	r4, r1, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bfb8      	it	lt
 8005a26:	18e4      	addlt	r4, r4, r3
 8005a28:	f000 f8e0 	bl	8005bec <__malloc_lock>
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <_free_r+0x90>)
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	b933      	cbnz	r3, 8005a40 <_free_r+0x2c>
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	6014      	str	r4, [r2, #0]
 8005a36:	4628      	mov	r0, r5
 8005a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a3c:	f000 b8dc 	b.w	8005bf8 <__malloc_unlock>
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d908      	bls.n	8005a56 <_free_r+0x42>
 8005a44:	6820      	ldr	r0, [r4, #0]
 8005a46:	1821      	adds	r1, r4, r0
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	bf01      	itttt	eq
 8005a4c:	6819      	ldreq	r1, [r3, #0]
 8005a4e:	685b      	ldreq	r3, [r3, #4]
 8005a50:	1809      	addeq	r1, r1, r0
 8005a52:	6021      	streq	r1, [r4, #0]
 8005a54:	e7ed      	b.n	8005a32 <_free_r+0x1e>
 8005a56:	461a      	mov	r2, r3
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b10b      	cbz	r3, 8005a60 <_free_r+0x4c>
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d9fa      	bls.n	8005a56 <_free_r+0x42>
 8005a60:	6811      	ldr	r1, [r2, #0]
 8005a62:	1850      	adds	r0, r2, r1
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d10b      	bne.n	8005a80 <_free_r+0x6c>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	4401      	add	r1, r0
 8005a6c:	1850      	adds	r0, r2, r1
 8005a6e:	4283      	cmp	r3, r0
 8005a70:	6011      	str	r1, [r2, #0]
 8005a72:	d1e0      	bne.n	8005a36 <_free_r+0x22>
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	6053      	str	r3, [r2, #4]
 8005a7a:	4408      	add	r0, r1
 8005a7c:	6010      	str	r0, [r2, #0]
 8005a7e:	e7da      	b.n	8005a36 <_free_r+0x22>
 8005a80:	d902      	bls.n	8005a88 <_free_r+0x74>
 8005a82:	230c      	movs	r3, #12
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	e7d6      	b.n	8005a36 <_free_r+0x22>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	1821      	adds	r1, r4, r0
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	bf04      	itt	eq
 8005a90:	6819      	ldreq	r1, [r3, #0]
 8005a92:	685b      	ldreq	r3, [r3, #4]
 8005a94:	6063      	str	r3, [r4, #4]
 8005a96:	bf04      	itt	eq
 8005a98:	1809      	addeq	r1, r1, r0
 8005a9a:	6021      	streq	r1, [r4, #0]
 8005a9c:	6054      	str	r4, [r2, #4]
 8005a9e:	e7ca      	b.n	8005a36 <_free_r+0x22>
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000528 	.word	0x20000528

08005aa8 <sbrk_aligned>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8005ae8 <sbrk_aligned+0x40>)
 8005aac:	460c      	mov	r4, r1
 8005aae:	6831      	ldr	r1, [r6, #0]
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	b911      	cbnz	r1, 8005aba <sbrk_aligned+0x12>
 8005ab4:	f000 fcb6 	bl	8006424 <_sbrk_r>
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 fcb1 	bl	8006424 <_sbrk_r>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d103      	bne.n	8005ace <sbrk_aligned+0x26>
 8005ac6:	f04f 34ff 	mov.w	r4, #4294967295
 8005aca:	4620      	mov	r0, r4
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
 8005ace:	1cc4      	adds	r4, r0, #3
 8005ad0:	f024 0403 	bic.w	r4, r4, #3
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d0f8      	beq.n	8005aca <sbrk_aligned+0x22>
 8005ad8:	1a21      	subs	r1, r4, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fca2 	bl	8006424 <_sbrk_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d1f2      	bne.n	8005aca <sbrk_aligned+0x22>
 8005ae4:	e7ef      	b.n	8005ac6 <sbrk_aligned+0x1e>
 8005ae6:	bf00      	nop
 8005ae8:	20000524 	.word	0x20000524

08005aec <_malloc_r>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	1ccd      	adds	r5, r1, #3
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	4606      	mov	r6, r0
 8005b02:	db01      	blt.n	8005b08 <_malloc_r+0x1c>
 8005b04:	42a9      	cmp	r1, r5
 8005b06:	d904      	bls.n	8005b12 <_malloc_r+0x26>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005be8 <_malloc_r+0xfc>
 8005b16:	f000 f869 	bl	8005bec <__malloc_lock>
 8005b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1e:	461c      	mov	r4, r3
 8005b20:	bb44      	cbnz	r4, 8005b74 <_malloc_r+0x88>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff ffbf 	bl	8005aa8 <sbrk_aligned>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	d158      	bne.n	8005be2 <_malloc_r+0xf6>
 8005b30:	f8d8 4000 	ldr.w	r4, [r8]
 8005b34:	4627      	mov	r7, r4
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	d143      	bne.n	8005bc2 <_malloc_r+0xd6>
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d04b      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	4639      	mov	r1, r7
 8005b42:	4630      	mov	r0, r6
 8005b44:	eb04 0903 	add.w	r9, r4, r3
 8005b48:	f000 fc6c 	bl	8006424 <_sbrk_r>
 8005b4c:	4581      	cmp	r9, r0
 8005b4e:	d142      	bne.n	8005bd6 <_malloc_r+0xea>
 8005b50:	6821      	ldr	r1, [r4, #0]
 8005b52:	1a6d      	subs	r5, r5, r1
 8005b54:	4629      	mov	r1, r5
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7ff ffa6 	bl	8005aa8 <sbrk_aligned>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d03a      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	442b      	add	r3, r5
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	bb62      	cbnz	r2, 8005bc8 <_malloc_r+0xdc>
 8005b6e:	f8c8 7000 	str.w	r7, [r8]
 8005b72:	e00f      	b.n	8005b94 <_malloc_r+0xa8>
 8005b74:	6822      	ldr	r2, [r4, #0]
 8005b76:	1b52      	subs	r2, r2, r5
 8005b78:	d420      	bmi.n	8005bbc <_malloc_r+0xd0>
 8005b7a:	2a0b      	cmp	r2, #11
 8005b7c:	d917      	bls.n	8005bae <_malloc_r+0xc2>
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	6025      	str	r5, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	6059      	strne	r1, [r3, #4]
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	bf08      	it	eq
 8005b8c:	f8c8 1000 	streq.w	r1, [r8]
 8005b90:	5162      	str	r2, [r4, r5]
 8005b92:	604b      	str	r3, [r1, #4]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f82f 	bl	8005bf8 <__malloc_unlock>
 8005b9a:	f104 000b 	add.w	r0, r4, #11
 8005b9e:	1d23      	adds	r3, r4, #4
 8005ba0:	f020 0007 	bic.w	r0, r0, #7
 8005ba4:	1ac2      	subs	r2, r0, r3
 8005ba6:	bf1c      	itt	ne
 8005ba8:	1a1b      	subne	r3, r3, r0
 8005baa:	50a3      	strne	r3, [r4, r2]
 8005bac:	e7af      	b.n	8005b0e <_malloc_r+0x22>
 8005bae:	6862      	ldr	r2, [r4, #4]
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f8c8 2000 	streq.w	r2, [r8]
 8005bb8:	605a      	strne	r2, [r3, #4]
 8005bba:	e7eb      	b.n	8005b94 <_malloc_r+0xa8>
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	6864      	ldr	r4, [r4, #4]
 8005bc0:	e7ae      	b.n	8005b20 <_malloc_r+0x34>
 8005bc2:	463c      	mov	r4, r7
 8005bc4:	687f      	ldr	r7, [r7, #4]
 8005bc6:	e7b6      	b.n	8005b36 <_malloc_r+0x4a>
 8005bc8:	461a      	mov	r2, r3
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d1fb      	bne.n	8005bc8 <_malloc_r+0xdc>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6053      	str	r3, [r2, #4]
 8005bd4:	e7de      	b.n	8005b94 <_malloc_r+0xa8>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	6033      	str	r3, [r6, #0]
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f80c 	bl	8005bf8 <__malloc_unlock>
 8005be0:	e794      	b.n	8005b0c <_malloc_r+0x20>
 8005be2:	6005      	str	r5, [r0, #0]
 8005be4:	e7d6      	b.n	8005b94 <_malloc_r+0xa8>
 8005be6:	bf00      	nop
 8005be8:	20000528 	.word	0x20000528

08005bec <__malloc_lock>:
 8005bec:	4801      	ldr	r0, [pc, #4]	@ (8005bf4 <__malloc_lock+0x8>)
 8005bee:	f7ff bf0e 	b.w	8005a0e <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	20000520 	.word	0x20000520

08005bf8 <__malloc_unlock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	@ (8005c00 <__malloc_unlock+0x8>)
 8005bfa:	f7ff bf09 	b.w	8005a10 <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20000520 	.word	0x20000520

08005c04 <__sfputc_r>:
 8005c04:	6893      	ldr	r3, [r2, #8]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	b410      	push	{r4}
 8005c0c:	6093      	str	r3, [r2, #8]
 8005c0e:	da08      	bge.n	8005c22 <__sfputc_r+0x1e>
 8005c10:	6994      	ldr	r4, [r2, #24]
 8005c12:	42a3      	cmp	r3, r4
 8005c14:	db01      	blt.n	8005c1a <__sfputc_r+0x16>
 8005c16:	290a      	cmp	r1, #10
 8005c18:	d103      	bne.n	8005c22 <__sfputc_r+0x1e>
 8005c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c1e:	f000 bb6d 	b.w	80062fc <__swbuf_r>
 8005c22:	6813      	ldr	r3, [r2, #0]
 8005c24:	1c58      	adds	r0, r3, #1
 8005c26:	6010      	str	r0, [r2, #0]
 8005c28:	7019      	strb	r1, [r3, #0]
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <__sfputs_r>:
 8005c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c34:	4606      	mov	r6, r0
 8005c36:	460f      	mov	r7, r1
 8005c38:	4614      	mov	r4, r2
 8005c3a:	18d5      	adds	r5, r2, r3
 8005c3c:	42ac      	cmp	r4, r5
 8005c3e:	d101      	bne.n	8005c44 <__sfputs_r+0x12>
 8005c40:	2000      	movs	r0, #0
 8005c42:	e007      	b.n	8005c54 <__sfputs_r+0x22>
 8005c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c48:	463a      	mov	r2, r7
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ffda 	bl	8005c04 <__sfputc_r>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d1f3      	bne.n	8005c3c <__sfputs_r+0xa>
 8005c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c58 <_vfiprintf_r>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	460d      	mov	r5, r1
 8005c5e:	b09d      	sub	sp, #116	@ 0x74
 8005c60:	4614      	mov	r4, r2
 8005c62:	4698      	mov	r8, r3
 8005c64:	4606      	mov	r6, r0
 8005c66:	b118      	cbz	r0, 8005c70 <_vfiprintf_r+0x18>
 8005c68:	6a03      	ldr	r3, [r0, #32]
 8005c6a:	b90b      	cbnz	r3, 8005c70 <_vfiprintf_r+0x18>
 8005c6c:	f7ff fdca 	bl	8005804 <__sinit>
 8005c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	d405      	bmi.n	8005c82 <_vfiprintf_r+0x2a>
 8005c76:	89ab      	ldrh	r3, [r5, #12]
 8005c78:	059a      	lsls	r2, r3, #22
 8005c7a:	d402      	bmi.n	8005c82 <_vfiprintf_r+0x2a>
 8005c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c7e:	f7ff fec6 	bl	8005a0e <__retarget_lock_acquire_recursive>
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	071b      	lsls	r3, r3, #28
 8005c86:	d501      	bpl.n	8005c8c <_vfiprintf_r+0x34>
 8005c88:	692b      	ldr	r3, [r5, #16]
 8005c8a:	b99b      	cbnz	r3, 8005cb4 <_vfiprintf_r+0x5c>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 fb72 	bl	8006378 <__swsetup_r>
 8005c94:	b170      	cbz	r0, 8005cb4 <_vfiprintf_r+0x5c>
 8005c96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c98:	07dc      	lsls	r4, r3, #31
 8005c9a:	d504      	bpl.n	8005ca6 <_vfiprintf_r+0x4e>
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	b01d      	add	sp, #116	@ 0x74
 8005ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca6:	89ab      	ldrh	r3, [r5, #12]
 8005ca8:	0598      	lsls	r0, r3, #22
 8005caa:	d4f7      	bmi.n	8005c9c <_vfiprintf_r+0x44>
 8005cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cae:	f7ff feaf 	bl	8005a10 <__retarget_lock_release_recursive>
 8005cb2:	e7f3      	b.n	8005c9c <_vfiprintf_r+0x44>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cb8:	2320      	movs	r3, #32
 8005cba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cc2:	2330      	movs	r3, #48	@ 0x30
 8005cc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e74 <_vfiprintf_r+0x21c>
 8005cc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ccc:	f04f 0901 	mov.w	r9, #1
 8005cd0:	4623      	mov	r3, r4
 8005cd2:	469a      	mov	sl, r3
 8005cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cd8:	b10a      	cbz	r2, 8005cde <_vfiprintf_r+0x86>
 8005cda:	2a25      	cmp	r2, #37	@ 0x25
 8005cdc:	d1f9      	bne.n	8005cd2 <_vfiprintf_r+0x7a>
 8005cde:	ebba 0b04 	subs.w	fp, sl, r4
 8005ce2:	d00b      	beq.n	8005cfc <_vfiprintf_r+0xa4>
 8005ce4:	465b      	mov	r3, fp
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4630      	mov	r0, r6
 8005cec:	f7ff ffa1 	bl	8005c32 <__sfputs_r>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f000 80a7 	beq.w	8005e44 <_vfiprintf_r+0x1ec>
 8005cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cf8:	445a      	add	r2, fp
 8005cfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 809f 	beq.w	8005e44 <_vfiprintf_r+0x1ec>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d10:	f10a 0a01 	add.w	sl, sl, #1
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	9307      	str	r3, [sp, #28]
 8005d18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d1e:	4654      	mov	r4, sl
 8005d20:	2205      	movs	r2, #5
 8005d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d26:	4853      	ldr	r0, [pc, #332]	@ (8005e74 <_vfiprintf_r+0x21c>)
 8005d28:	f7fa fa72 	bl	8000210 <memchr>
 8005d2c:	9a04      	ldr	r2, [sp, #16]
 8005d2e:	b9d8      	cbnz	r0, 8005d68 <_vfiprintf_r+0x110>
 8005d30:	06d1      	lsls	r1, r2, #27
 8005d32:	bf44      	itt	mi
 8005d34:	2320      	movmi	r3, #32
 8005d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d3a:	0713      	lsls	r3, r2, #28
 8005d3c:	bf44      	itt	mi
 8005d3e:	232b      	movmi	r3, #43	@ 0x2b
 8005d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d44:	f89a 3000 	ldrb.w	r3, [sl]
 8005d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d4a:	d015      	beq.n	8005d78 <_vfiprintf_r+0x120>
 8005d4c:	9a07      	ldr	r2, [sp, #28]
 8005d4e:	4654      	mov	r4, sl
 8005d50:	2000      	movs	r0, #0
 8005d52:	f04f 0c0a 	mov.w	ip, #10
 8005d56:	4621      	mov	r1, r4
 8005d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d5c:	3b30      	subs	r3, #48	@ 0x30
 8005d5e:	2b09      	cmp	r3, #9
 8005d60:	d94b      	bls.n	8005dfa <_vfiprintf_r+0x1a2>
 8005d62:	b1b0      	cbz	r0, 8005d92 <_vfiprintf_r+0x13a>
 8005d64:	9207      	str	r2, [sp, #28]
 8005d66:	e014      	b.n	8005d92 <_vfiprintf_r+0x13a>
 8005d68:	eba0 0308 	sub.w	r3, r0, r8
 8005d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d70:	4313      	orrs	r3, r2
 8005d72:	9304      	str	r3, [sp, #16]
 8005d74:	46a2      	mov	sl, r4
 8005d76:	e7d2      	b.n	8005d1e <_vfiprintf_r+0xc6>
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	1d19      	adds	r1, r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	9103      	str	r1, [sp, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bfbb      	ittet	lt
 8005d84:	425b      	neglt	r3, r3
 8005d86:	f042 0202 	orrlt.w	r2, r2, #2
 8005d8a:	9307      	strge	r3, [sp, #28]
 8005d8c:	9307      	strlt	r3, [sp, #28]
 8005d8e:	bfb8      	it	lt
 8005d90:	9204      	strlt	r2, [sp, #16]
 8005d92:	7823      	ldrb	r3, [r4, #0]
 8005d94:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d96:	d10a      	bne.n	8005dae <_vfiprintf_r+0x156>
 8005d98:	7863      	ldrb	r3, [r4, #1]
 8005d9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d9c:	d132      	bne.n	8005e04 <_vfiprintf_r+0x1ac>
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	1d1a      	adds	r2, r3, #4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	9203      	str	r2, [sp, #12]
 8005da6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005daa:	3402      	adds	r4, #2
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e84 <_vfiprintf_r+0x22c>
 8005db2:	7821      	ldrb	r1, [r4, #0]
 8005db4:	2203      	movs	r2, #3
 8005db6:	4650      	mov	r0, sl
 8005db8:	f7fa fa2a 	bl	8000210 <memchr>
 8005dbc:	b138      	cbz	r0, 8005dce <_vfiprintf_r+0x176>
 8005dbe:	9b04      	ldr	r3, [sp, #16]
 8005dc0:	eba0 000a 	sub.w	r0, r0, sl
 8005dc4:	2240      	movs	r2, #64	@ 0x40
 8005dc6:	4082      	lsls	r2, r0
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	3401      	adds	r4, #1
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd2:	4829      	ldr	r0, [pc, #164]	@ (8005e78 <_vfiprintf_r+0x220>)
 8005dd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dd8:	2206      	movs	r2, #6
 8005dda:	f7fa fa19 	bl	8000210 <memchr>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d03f      	beq.n	8005e62 <_vfiprintf_r+0x20a>
 8005de2:	4b26      	ldr	r3, [pc, #152]	@ (8005e7c <_vfiprintf_r+0x224>)
 8005de4:	bb1b      	cbnz	r3, 8005e2e <_vfiprintf_r+0x1d6>
 8005de6:	9b03      	ldr	r3, [sp, #12]
 8005de8:	3307      	adds	r3, #7
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	3308      	adds	r3, #8
 8005df0:	9303      	str	r3, [sp, #12]
 8005df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df4:	443b      	add	r3, r7
 8005df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df8:	e76a      	b.n	8005cd0 <_vfiprintf_r+0x78>
 8005dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dfe:	460c      	mov	r4, r1
 8005e00:	2001      	movs	r0, #1
 8005e02:	e7a8      	b.n	8005d56 <_vfiprintf_r+0xfe>
 8005e04:	2300      	movs	r3, #0
 8005e06:	3401      	adds	r4, #1
 8005e08:	9305      	str	r3, [sp, #20]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f04f 0c0a 	mov.w	ip, #10
 8005e10:	4620      	mov	r0, r4
 8005e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e16:	3a30      	subs	r2, #48	@ 0x30
 8005e18:	2a09      	cmp	r2, #9
 8005e1a:	d903      	bls.n	8005e24 <_vfiprintf_r+0x1cc>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0c6      	beq.n	8005dae <_vfiprintf_r+0x156>
 8005e20:	9105      	str	r1, [sp, #20]
 8005e22:	e7c4      	b.n	8005dae <_vfiprintf_r+0x156>
 8005e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e28:	4604      	mov	r4, r0
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e7f0      	b.n	8005e10 <_vfiprintf_r+0x1b8>
 8005e2e:	ab03      	add	r3, sp, #12
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	462a      	mov	r2, r5
 8005e34:	4b12      	ldr	r3, [pc, #72]	@ (8005e80 <_vfiprintf_r+0x228>)
 8005e36:	a904      	add	r1, sp, #16
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f3af 8000 	nop.w
 8005e3e:	4607      	mov	r7, r0
 8005e40:	1c78      	adds	r0, r7, #1
 8005e42:	d1d6      	bne.n	8005df2 <_vfiprintf_r+0x19a>
 8005e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e46:	07d9      	lsls	r1, r3, #31
 8005e48:	d405      	bmi.n	8005e56 <_vfiprintf_r+0x1fe>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	059a      	lsls	r2, r3, #22
 8005e4e:	d402      	bmi.n	8005e56 <_vfiprintf_r+0x1fe>
 8005e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e52:	f7ff fddd 	bl	8005a10 <__retarget_lock_release_recursive>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	065b      	lsls	r3, r3, #25
 8005e5a:	f53f af1f 	bmi.w	8005c9c <_vfiprintf_r+0x44>
 8005e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e60:	e71e      	b.n	8005ca0 <_vfiprintf_r+0x48>
 8005e62:	ab03      	add	r3, sp, #12
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	462a      	mov	r2, r5
 8005e68:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <_vfiprintf_r+0x228>)
 8005e6a:	a904      	add	r1, sp, #16
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f000 f879 	bl	8005f64 <_printf_i>
 8005e72:	e7e4      	b.n	8005e3e <_vfiprintf_r+0x1e6>
 8005e74:	08006594 	.word	0x08006594
 8005e78:	0800659e 	.word	0x0800659e
 8005e7c:	00000000 	.word	0x00000000
 8005e80:	08005c33 	.word	0x08005c33
 8005e84:	0800659a 	.word	0x0800659a

08005e88 <_printf_common>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	4698      	mov	r8, r3
 8005e90:	688a      	ldr	r2, [r1, #8]
 8005e92:	690b      	ldr	r3, [r1, #16]
 8005e94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	bfb8      	it	lt
 8005e9c:	4613      	movlt	r3, r2
 8005e9e:	6033      	str	r3, [r6, #0]
 8005ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	b10a      	cbz	r2, 8005eae <_printf_common+0x26>
 8005eaa:	3301      	adds	r3, #1
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	0699      	lsls	r1, r3, #26
 8005eb2:	bf42      	ittt	mi
 8005eb4:	6833      	ldrmi	r3, [r6, #0]
 8005eb6:	3302      	addmi	r3, #2
 8005eb8:	6033      	strmi	r3, [r6, #0]
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	f015 0506 	ands.w	r5, r5, #6
 8005ec0:	d106      	bne.n	8005ed0 <_printf_common+0x48>
 8005ec2:	f104 0a19 	add.w	sl, r4, #25
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	6832      	ldr	r2, [r6, #0]
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dc26      	bgt.n	8005f1e <_printf_common+0x96>
 8005ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ed4:	6822      	ldr	r2, [r4, #0]
 8005ed6:	3b00      	subs	r3, #0
 8005ed8:	bf18      	it	ne
 8005eda:	2301      	movne	r3, #1
 8005edc:	0692      	lsls	r2, r2, #26
 8005ede:	d42b      	bmi.n	8005f38 <_printf_common+0xb0>
 8005ee0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c8      	blx	r9
 8005eea:	3001      	adds	r0, #1
 8005eec:	d01e      	beq.n	8005f2c <_printf_common+0xa4>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	f003 0306 	and.w	r3, r3, #6
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	bf02      	ittt	eq
 8005efa:	68e5      	ldreq	r5, [r4, #12]
 8005efc:	6833      	ldreq	r3, [r6, #0]
 8005efe:	1aed      	subeq	r5, r5, r3
 8005f00:	68a3      	ldr	r3, [r4, #8]
 8005f02:	bf0c      	ite	eq
 8005f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f08:	2500      	movne	r5, #0
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	bfc4      	itt	gt
 8005f0e:	1a9b      	subgt	r3, r3, r2
 8005f10:	18ed      	addgt	r5, r5, r3
 8005f12:	2600      	movs	r6, #0
 8005f14:	341a      	adds	r4, #26
 8005f16:	42b5      	cmp	r5, r6
 8005f18:	d11a      	bne.n	8005f50 <_printf_common+0xc8>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	e008      	b.n	8005f30 <_printf_common+0xa8>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4652      	mov	r2, sl
 8005f22:	4641      	mov	r1, r8
 8005f24:	4638      	mov	r0, r7
 8005f26:	47c8      	blx	r9
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d103      	bne.n	8005f34 <_printf_common+0xac>
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f34:	3501      	adds	r5, #1
 8005f36:	e7c6      	b.n	8005ec6 <_printf_common+0x3e>
 8005f38:	18e1      	adds	r1, r4, r3
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	2030      	movs	r0, #48	@ 0x30
 8005f3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f42:	4422      	add	r2, r4
 8005f44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	e7c7      	b.n	8005ee0 <_printf_common+0x58>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4622      	mov	r2, r4
 8005f54:	4641      	mov	r1, r8
 8005f56:	4638      	mov	r0, r7
 8005f58:	47c8      	blx	r9
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d0e6      	beq.n	8005f2c <_printf_common+0xa4>
 8005f5e:	3601      	adds	r6, #1
 8005f60:	e7d9      	b.n	8005f16 <_printf_common+0x8e>
	...

08005f64 <_printf_i>:
 8005f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f68:	7e0f      	ldrb	r7, [r1, #24]
 8005f6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f6c:	2f78      	cmp	r7, #120	@ 0x78
 8005f6e:	4691      	mov	r9, r2
 8005f70:	4680      	mov	r8, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	469a      	mov	sl, r3
 8005f76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f7a:	d807      	bhi.n	8005f8c <_printf_i+0x28>
 8005f7c:	2f62      	cmp	r7, #98	@ 0x62
 8005f7e:	d80a      	bhi.n	8005f96 <_printf_i+0x32>
 8005f80:	2f00      	cmp	r7, #0
 8005f82:	f000 80d2 	beq.w	800612a <_printf_i+0x1c6>
 8005f86:	2f58      	cmp	r7, #88	@ 0x58
 8005f88:	f000 80b9 	beq.w	80060fe <_printf_i+0x19a>
 8005f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f94:	e03a      	b.n	800600c <_printf_i+0xa8>
 8005f96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f9a:	2b15      	cmp	r3, #21
 8005f9c:	d8f6      	bhi.n	8005f8c <_printf_i+0x28>
 8005f9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005fa4 <_printf_i+0x40>)
 8005fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fa4:	08005ffd 	.word	0x08005ffd
 8005fa8:	08006011 	.word	0x08006011
 8005fac:	08005f8d 	.word	0x08005f8d
 8005fb0:	08005f8d 	.word	0x08005f8d
 8005fb4:	08005f8d 	.word	0x08005f8d
 8005fb8:	08005f8d 	.word	0x08005f8d
 8005fbc:	08006011 	.word	0x08006011
 8005fc0:	08005f8d 	.word	0x08005f8d
 8005fc4:	08005f8d 	.word	0x08005f8d
 8005fc8:	08005f8d 	.word	0x08005f8d
 8005fcc:	08005f8d 	.word	0x08005f8d
 8005fd0:	08006111 	.word	0x08006111
 8005fd4:	0800603b 	.word	0x0800603b
 8005fd8:	080060cb 	.word	0x080060cb
 8005fdc:	08005f8d 	.word	0x08005f8d
 8005fe0:	08005f8d 	.word	0x08005f8d
 8005fe4:	08006133 	.word	0x08006133
 8005fe8:	08005f8d 	.word	0x08005f8d
 8005fec:	0800603b 	.word	0x0800603b
 8005ff0:	08005f8d 	.word	0x08005f8d
 8005ff4:	08005f8d 	.word	0x08005f8d
 8005ff8:	080060d3 	.word	0x080060d3
 8005ffc:	6833      	ldr	r3, [r6, #0]
 8005ffe:	1d1a      	adds	r2, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6032      	str	r2, [r6, #0]
 8006004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006008:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800600c:	2301      	movs	r3, #1
 800600e:	e09d      	b.n	800614c <_printf_i+0x1e8>
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	6820      	ldr	r0, [r4, #0]
 8006014:	1d19      	adds	r1, r3, #4
 8006016:	6031      	str	r1, [r6, #0]
 8006018:	0606      	lsls	r6, r0, #24
 800601a:	d501      	bpl.n	8006020 <_printf_i+0xbc>
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	e003      	b.n	8006028 <_printf_i+0xc4>
 8006020:	0645      	lsls	r5, r0, #25
 8006022:	d5fb      	bpl.n	800601c <_printf_i+0xb8>
 8006024:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006028:	2d00      	cmp	r5, #0
 800602a:	da03      	bge.n	8006034 <_printf_i+0xd0>
 800602c:	232d      	movs	r3, #45	@ 0x2d
 800602e:	426d      	negs	r5, r5
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006034:	4859      	ldr	r0, [pc, #356]	@ (800619c <_printf_i+0x238>)
 8006036:	230a      	movs	r3, #10
 8006038:	e011      	b.n	800605e <_printf_i+0xfa>
 800603a:	6821      	ldr	r1, [r4, #0]
 800603c:	6833      	ldr	r3, [r6, #0]
 800603e:	0608      	lsls	r0, r1, #24
 8006040:	f853 5b04 	ldr.w	r5, [r3], #4
 8006044:	d402      	bmi.n	800604c <_printf_i+0xe8>
 8006046:	0649      	lsls	r1, r1, #25
 8006048:	bf48      	it	mi
 800604a:	b2ad      	uxthmi	r5, r5
 800604c:	2f6f      	cmp	r7, #111	@ 0x6f
 800604e:	4853      	ldr	r0, [pc, #332]	@ (800619c <_printf_i+0x238>)
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	bf14      	ite	ne
 8006054:	230a      	movne	r3, #10
 8006056:	2308      	moveq	r3, #8
 8006058:	2100      	movs	r1, #0
 800605a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800605e:	6866      	ldr	r6, [r4, #4]
 8006060:	60a6      	str	r6, [r4, #8]
 8006062:	2e00      	cmp	r6, #0
 8006064:	bfa2      	ittt	ge
 8006066:	6821      	ldrge	r1, [r4, #0]
 8006068:	f021 0104 	bicge.w	r1, r1, #4
 800606c:	6021      	strge	r1, [r4, #0]
 800606e:	b90d      	cbnz	r5, 8006074 <_printf_i+0x110>
 8006070:	2e00      	cmp	r6, #0
 8006072:	d04b      	beq.n	800610c <_printf_i+0x1a8>
 8006074:	4616      	mov	r6, r2
 8006076:	fbb5 f1f3 	udiv	r1, r5, r3
 800607a:	fb03 5711 	mls	r7, r3, r1, r5
 800607e:	5dc7      	ldrb	r7, [r0, r7]
 8006080:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006084:	462f      	mov	r7, r5
 8006086:	42bb      	cmp	r3, r7
 8006088:	460d      	mov	r5, r1
 800608a:	d9f4      	bls.n	8006076 <_printf_i+0x112>
 800608c:	2b08      	cmp	r3, #8
 800608e:	d10b      	bne.n	80060a8 <_printf_i+0x144>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	07df      	lsls	r7, r3, #31
 8006094:	d508      	bpl.n	80060a8 <_printf_i+0x144>
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	6861      	ldr	r1, [r4, #4]
 800609a:	4299      	cmp	r1, r3
 800609c:	bfde      	ittt	le
 800609e:	2330      	movle	r3, #48	@ 0x30
 80060a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060a8:	1b92      	subs	r2, r2, r6
 80060aa:	6122      	str	r2, [r4, #16]
 80060ac:	f8cd a000 	str.w	sl, [sp]
 80060b0:	464b      	mov	r3, r9
 80060b2:	aa03      	add	r2, sp, #12
 80060b4:	4621      	mov	r1, r4
 80060b6:	4640      	mov	r0, r8
 80060b8:	f7ff fee6 	bl	8005e88 <_printf_common>
 80060bc:	3001      	adds	r0, #1
 80060be:	d14a      	bne.n	8006156 <_printf_i+0x1f2>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	b004      	add	sp, #16
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f043 0320 	orr.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	4833      	ldr	r0, [pc, #204]	@ (80061a0 <_printf_i+0x23c>)
 80060d4:	2778      	movs	r7, #120	@ 0x78
 80060d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	6831      	ldr	r1, [r6, #0]
 80060de:	061f      	lsls	r7, r3, #24
 80060e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80060e4:	d402      	bmi.n	80060ec <_printf_i+0x188>
 80060e6:	065f      	lsls	r7, r3, #25
 80060e8:	bf48      	it	mi
 80060ea:	b2ad      	uxthmi	r5, r5
 80060ec:	6031      	str	r1, [r6, #0]
 80060ee:	07d9      	lsls	r1, r3, #31
 80060f0:	bf44      	itt	mi
 80060f2:	f043 0320 	orrmi.w	r3, r3, #32
 80060f6:	6023      	strmi	r3, [r4, #0]
 80060f8:	b11d      	cbz	r5, 8006102 <_printf_i+0x19e>
 80060fa:	2310      	movs	r3, #16
 80060fc:	e7ac      	b.n	8006058 <_printf_i+0xf4>
 80060fe:	4827      	ldr	r0, [pc, #156]	@ (800619c <_printf_i+0x238>)
 8006100:	e7e9      	b.n	80060d6 <_printf_i+0x172>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	f023 0320 	bic.w	r3, r3, #32
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	e7f6      	b.n	80060fa <_printf_i+0x196>
 800610c:	4616      	mov	r6, r2
 800610e:	e7bd      	b.n	800608c <_printf_i+0x128>
 8006110:	6833      	ldr	r3, [r6, #0]
 8006112:	6825      	ldr	r5, [r4, #0]
 8006114:	6961      	ldr	r1, [r4, #20]
 8006116:	1d18      	adds	r0, r3, #4
 8006118:	6030      	str	r0, [r6, #0]
 800611a:	062e      	lsls	r6, r5, #24
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	d501      	bpl.n	8006124 <_printf_i+0x1c0>
 8006120:	6019      	str	r1, [r3, #0]
 8006122:	e002      	b.n	800612a <_printf_i+0x1c6>
 8006124:	0668      	lsls	r0, r5, #25
 8006126:	d5fb      	bpl.n	8006120 <_printf_i+0x1bc>
 8006128:	8019      	strh	r1, [r3, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	6123      	str	r3, [r4, #16]
 800612e:	4616      	mov	r6, r2
 8006130:	e7bc      	b.n	80060ac <_printf_i+0x148>
 8006132:	6833      	ldr	r3, [r6, #0]
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	6032      	str	r2, [r6, #0]
 8006138:	681e      	ldr	r6, [r3, #0]
 800613a:	6862      	ldr	r2, [r4, #4]
 800613c:	2100      	movs	r1, #0
 800613e:	4630      	mov	r0, r6
 8006140:	f7fa f866 	bl	8000210 <memchr>
 8006144:	b108      	cbz	r0, 800614a <_printf_i+0x1e6>
 8006146:	1b80      	subs	r0, r0, r6
 8006148:	6060      	str	r0, [r4, #4]
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	6123      	str	r3, [r4, #16]
 800614e:	2300      	movs	r3, #0
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006154:	e7aa      	b.n	80060ac <_printf_i+0x148>
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	4632      	mov	r2, r6
 800615a:	4649      	mov	r1, r9
 800615c:	4640      	mov	r0, r8
 800615e:	47d0      	blx	sl
 8006160:	3001      	adds	r0, #1
 8006162:	d0ad      	beq.n	80060c0 <_printf_i+0x15c>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	079b      	lsls	r3, r3, #30
 8006168:	d413      	bmi.n	8006192 <_printf_i+0x22e>
 800616a:	68e0      	ldr	r0, [r4, #12]
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	4298      	cmp	r0, r3
 8006170:	bfb8      	it	lt
 8006172:	4618      	movlt	r0, r3
 8006174:	e7a6      	b.n	80060c4 <_printf_i+0x160>
 8006176:	2301      	movs	r3, #1
 8006178:	4632      	mov	r2, r6
 800617a:	4649      	mov	r1, r9
 800617c:	4640      	mov	r0, r8
 800617e:	47d0      	blx	sl
 8006180:	3001      	adds	r0, #1
 8006182:	d09d      	beq.n	80060c0 <_printf_i+0x15c>
 8006184:	3501      	adds	r5, #1
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	9903      	ldr	r1, [sp, #12]
 800618a:	1a5b      	subs	r3, r3, r1
 800618c:	42ab      	cmp	r3, r5
 800618e:	dcf2      	bgt.n	8006176 <_printf_i+0x212>
 8006190:	e7eb      	b.n	800616a <_printf_i+0x206>
 8006192:	2500      	movs	r5, #0
 8006194:	f104 0619 	add.w	r6, r4, #25
 8006198:	e7f5      	b.n	8006186 <_printf_i+0x222>
 800619a:	bf00      	nop
 800619c:	080065a5 	.word	0x080065a5
 80061a0:	080065b6 	.word	0x080065b6

080061a4 <__sflush_r>:
 80061a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	0716      	lsls	r6, r2, #28
 80061ae:	4605      	mov	r5, r0
 80061b0:	460c      	mov	r4, r1
 80061b2:	d454      	bmi.n	800625e <__sflush_r+0xba>
 80061b4:	684b      	ldr	r3, [r1, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dc02      	bgt.n	80061c0 <__sflush_r+0x1c>
 80061ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	dd48      	ble.n	8006252 <__sflush_r+0xae>
 80061c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061c2:	2e00      	cmp	r6, #0
 80061c4:	d045      	beq.n	8006252 <__sflush_r+0xae>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061cc:	682f      	ldr	r7, [r5, #0]
 80061ce:	6a21      	ldr	r1, [r4, #32]
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	d030      	beq.n	8006236 <__sflush_r+0x92>
 80061d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	0759      	lsls	r1, r3, #29
 80061da:	d505      	bpl.n	80061e8 <__sflush_r+0x44>
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	1ad2      	subs	r2, r2, r3
 80061e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061e2:	b10b      	cbz	r3, 80061e8 <__sflush_r+0x44>
 80061e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	2300      	movs	r3, #0
 80061ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061ec:	6a21      	ldr	r1, [r4, #32]
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b0      	blx	r6
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	d106      	bne.n	8006206 <__sflush_r+0x62>
 80061f8:	6829      	ldr	r1, [r5, #0]
 80061fa:	291d      	cmp	r1, #29
 80061fc:	d82b      	bhi.n	8006256 <__sflush_r+0xb2>
 80061fe:	4a2a      	ldr	r2, [pc, #168]	@ (80062a8 <__sflush_r+0x104>)
 8006200:	410a      	asrs	r2, r1
 8006202:	07d6      	lsls	r6, r2, #31
 8006204:	d427      	bmi.n	8006256 <__sflush_r+0xb2>
 8006206:	2200      	movs	r2, #0
 8006208:	6062      	str	r2, [r4, #4]
 800620a:	04d9      	lsls	r1, r3, #19
 800620c:	6922      	ldr	r2, [r4, #16]
 800620e:	6022      	str	r2, [r4, #0]
 8006210:	d504      	bpl.n	800621c <__sflush_r+0x78>
 8006212:	1c42      	adds	r2, r0, #1
 8006214:	d101      	bne.n	800621a <__sflush_r+0x76>
 8006216:	682b      	ldr	r3, [r5, #0]
 8006218:	b903      	cbnz	r3, 800621c <__sflush_r+0x78>
 800621a:	6560      	str	r0, [r4, #84]	@ 0x54
 800621c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800621e:	602f      	str	r7, [r5, #0]
 8006220:	b1b9      	cbz	r1, 8006252 <__sflush_r+0xae>
 8006222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006226:	4299      	cmp	r1, r3
 8006228:	d002      	beq.n	8006230 <__sflush_r+0x8c>
 800622a:	4628      	mov	r0, r5
 800622c:	f7ff fbf2 	bl	8005a14 <_free_r>
 8006230:	2300      	movs	r3, #0
 8006232:	6363      	str	r3, [r4, #52]	@ 0x34
 8006234:	e00d      	b.n	8006252 <__sflush_r+0xae>
 8006236:	2301      	movs	r3, #1
 8006238:	4628      	mov	r0, r5
 800623a:	47b0      	blx	r6
 800623c:	4602      	mov	r2, r0
 800623e:	1c50      	adds	r0, r2, #1
 8006240:	d1c9      	bne.n	80061d6 <__sflush_r+0x32>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0c6      	beq.n	80061d6 <__sflush_r+0x32>
 8006248:	2b1d      	cmp	r3, #29
 800624a:	d001      	beq.n	8006250 <__sflush_r+0xac>
 800624c:	2b16      	cmp	r3, #22
 800624e:	d11e      	bne.n	800628e <__sflush_r+0xea>
 8006250:	602f      	str	r7, [r5, #0]
 8006252:	2000      	movs	r0, #0
 8006254:	e022      	b.n	800629c <__sflush_r+0xf8>
 8006256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625a:	b21b      	sxth	r3, r3
 800625c:	e01b      	b.n	8006296 <__sflush_r+0xf2>
 800625e:	690f      	ldr	r7, [r1, #16]
 8006260:	2f00      	cmp	r7, #0
 8006262:	d0f6      	beq.n	8006252 <__sflush_r+0xae>
 8006264:	0793      	lsls	r3, r2, #30
 8006266:	680e      	ldr	r6, [r1, #0]
 8006268:	bf08      	it	eq
 800626a:	694b      	ldreq	r3, [r1, #20]
 800626c:	600f      	str	r7, [r1, #0]
 800626e:	bf18      	it	ne
 8006270:	2300      	movne	r3, #0
 8006272:	eba6 0807 	sub.w	r8, r6, r7
 8006276:	608b      	str	r3, [r1, #8]
 8006278:	f1b8 0f00 	cmp.w	r8, #0
 800627c:	dde9      	ble.n	8006252 <__sflush_r+0xae>
 800627e:	6a21      	ldr	r1, [r4, #32]
 8006280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006282:	4643      	mov	r3, r8
 8006284:	463a      	mov	r2, r7
 8006286:	4628      	mov	r0, r5
 8006288:	47b0      	blx	r6
 800628a:	2800      	cmp	r0, #0
 800628c:	dc08      	bgt.n	80062a0 <__sflush_r+0xfc>
 800628e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a0:	4407      	add	r7, r0
 80062a2:	eba8 0800 	sub.w	r8, r8, r0
 80062a6:	e7e7      	b.n	8006278 <__sflush_r+0xd4>
 80062a8:	dfbffffe 	.word	0xdfbffffe

080062ac <_fflush_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	690b      	ldr	r3, [r1, #16]
 80062b0:	4605      	mov	r5, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	b913      	cbnz	r3, 80062bc <_fflush_r+0x10>
 80062b6:	2500      	movs	r5, #0
 80062b8:	4628      	mov	r0, r5
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	b118      	cbz	r0, 80062c6 <_fflush_r+0x1a>
 80062be:	6a03      	ldr	r3, [r0, #32]
 80062c0:	b90b      	cbnz	r3, 80062c6 <_fflush_r+0x1a>
 80062c2:	f7ff fa9f 	bl	8005804 <__sinit>
 80062c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f3      	beq.n	80062b6 <_fflush_r+0xa>
 80062ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062d0:	07d0      	lsls	r0, r2, #31
 80062d2:	d404      	bmi.n	80062de <_fflush_r+0x32>
 80062d4:	0599      	lsls	r1, r3, #22
 80062d6:	d402      	bmi.n	80062de <_fflush_r+0x32>
 80062d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062da:	f7ff fb98 	bl	8005a0e <__retarget_lock_acquire_recursive>
 80062de:	4628      	mov	r0, r5
 80062e0:	4621      	mov	r1, r4
 80062e2:	f7ff ff5f 	bl	80061a4 <__sflush_r>
 80062e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062e8:	07da      	lsls	r2, r3, #31
 80062ea:	4605      	mov	r5, r0
 80062ec:	d4e4      	bmi.n	80062b8 <_fflush_r+0xc>
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	059b      	lsls	r3, r3, #22
 80062f2:	d4e1      	bmi.n	80062b8 <_fflush_r+0xc>
 80062f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062f6:	f7ff fb8b 	bl	8005a10 <__retarget_lock_release_recursive>
 80062fa:	e7dd      	b.n	80062b8 <_fflush_r+0xc>

080062fc <__swbuf_r>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	460e      	mov	r6, r1
 8006300:	4614      	mov	r4, r2
 8006302:	4605      	mov	r5, r0
 8006304:	b118      	cbz	r0, 800630e <__swbuf_r+0x12>
 8006306:	6a03      	ldr	r3, [r0, #32]
 8006308:	b90b      	cbnz	r3, 800630e <__swbuf_r+0x12>
 800630a:	f7ff fa7b 	bl	8005804 <__sinit>
 800630e:	69a3      	ldr	r3, [r4, #24]
 8006310:	60a3      	str	r3, [r4, #8]
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	071a      	lsls	r2, r3, #28
 8006316:	d501      	bpl.n	800631c <__swbuf_r+0x20>
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	b943      	cbnz	r3, 800632e <__swbuf_r+0x32>
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f82a 	bl	8006378 <__swsetup_r>
 8006324:	b118      	cbz	r0, 800632e <__swbuf_r+0x32>
 8006326:	f04f 37ff 	mov.w	r7, #4294967295
 800632a:	4638      	mov	r0, r7
 800632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	6922      	ldr	r2, [r4, #16]
 8006332:	1a98      	subs	r0, r3, r2
 8006334:	6963      	ldr	r3, [r4, #20]
 8006336:	b2f6      	uxtb	r6, r6
 8006338:	4283      	cmp	r3, r0
 800633a:	4637      	mov	r7, r6
 800633c:	dc05      	bgt.n	800634a <__swbuf_r+0x4e>
 800633e:	4621      	mov	r1, r4
 8006340:	4628      	mov	r0, r5
 8006342:	f7ff ffb3 	bl	80062ac <_fflush_r>
 8006346:	2800      	cmp	r0, #0
 8006348:	d1ed      	bne.n	8006326 <__swbuf_r+0x2a>
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	3b01      	subs	r3, #1
 800634e:	60a3      	str	r3, [r4, #8]
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	701e      	strb	r6, [r3, #0]
 8006358:	6962      	ldr	r2, [r4, #20]
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	429a      	cmp	r2, r3
 800635e:	d004      	beq.n	800636a <__swbuf_r+0x6e>
 8006360:	89a3      	ldrh	r3, [r4, #12]
 8006362:	07db      	lsls	r3, r3, #31
 8006364:	d5e1      	bpl.n	800632a <__swbuf_r+0x2e>
 8006366:	2e0a      	cmp	r6, #10
 8006368:	d1df      	bne.n	800632a <__swbuf_r+0x2e>
 800636a:	4621      	mov	r1, r4
 800636c:	4628      	mov	r0, r5
 800636e:	f7ff ff9d 	bl	80062ac <_fflush_r>
 8006372:	2800      	cmp	r0, #0
 8006374:	d0d9      	beq.n	800632a <__swbuf_r+0x2e>
 8006376:	e7d6      	b.n	8006326 <__swbuf_r+0x2a>

08006378 <__swsetup_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4b29      	ldr	r3, [pc, #164]	@ (8006420 <__swsetup_r+0xa8>)
 800637c:	4605      	mov	r5, r0
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	460c      	mov	r4, r1
 8006382:	b118      	cbz	r0, 800638c <__swsetup_r+0x14>
 8006384:	6a03      	ldr	r3, [r0, #32]
 8006386:	b90b      	cbnz	r3, 800638c <__swsetup_r+0x14>
 8006388:	f7ff fa3c 	bl	8005804 <__sinit>
 800638c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006390:	0719      	lsls	r1, r3, #28
 8006392:	d422      	bmi.n	80063da <__swsetup_r+0x62>
 8006394:	06da      	lsls	r2, r3, #27
 8006396:	d407      	bmi.n	80063a8 <__swsetup_r+0x30>
 8006398:	2209      	movs	r2, #9
 800639a:	602a      	str	r2, [r5, #0]
 800639c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	e033      	b.n	8006410 <__swsetup_r+0x98>
 80063a8:	0758      	lsls	r0, r3, #29
 80063aa:	d512      	bpl.n	80063d2 <__swsetup_r+0x5a>
 80063ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ae:	b141      	cbz	r1, 80063c2 <__swsetup_r+0x4a>
 80063b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063b4:	4299      	cmp	r1, r3
 80063b6:	d002      	beq.n	80063be <__swsetup_r+0x46>
 80063b8:	4628      	mov	r0, r5
 80063ba:	f7ff fb2b 	bl	8005a14 <_free_r>
 80063be:	2300      	movs	r3, #0
 80063c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	2300      	movs	r3, #0
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f043 0308 	orr.w	r3, r3, #8
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	b94b      	cbnz	r3, 80063f2 <__swsetup_r+0x7a>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d003      	beq.n	80063f2 <__swsetup_r+0x7a>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 f84f 	bl	8006490 <__smakebuf_r>
 80063f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f6:	f013 0201 	ands.w	r2, r3, #1
 80063fa:	d00a      	beq.n	8006412 <__swsetup_r+0x9a>
 80063fc:	2200      	movs	r2, #0
 80063fe:	60a2      	str	r2, [r4, #8]
 8006400:	6962      	ldr	r2, [r4, #20]
 8006402:	4252      	negs	r2, r2
 8006404:	61a2      	str	r2, [r4, #24]
 8006406:	6922      	ldr	r2, [r4, #16]
 8006408:	b942      	cbnz	r2, 800641c <__swsetup_r+0xa4>
 800640a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800640e:	d1c5      	bne.n	800639c <__swsetup_r+0x24>
 8006410:	bd38      	pop	{r3, r4, r5, pc}
 8006412:	0799      	lsls	r1, r3, #30
 8006414:	bf58      	it	pl
 8006416:	6962      	ldrpl	r2, [r4, #20]
 8006418:	60a2      	str	r2, [r4, #8]
 800641a:	e7f4      	b.n	8006406 <__swsetup_r+0x8e>
 800641c:	2000      	movs	r0, #0
 800641e:	e7f7      	b.n	8006410 <__swsetup_r+0x98>
 8006420:	20000024 	.word	0x20000024

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4d06      	ldr	r5, [pc, #24]	@ (8006440 <_sbrk_r+0x1c>)
 8006428:	2300      	movs	r3, #0
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fb f91a 	bl	8001668 <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	2000051c 	.word	0x2000051c

08006444 <__swhatbuf_r>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	460c      	mov	r4, r1
 8006448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800644c:	2900      	cmp	r1, #0
 800644e:	b096      	sub	sp, #88	@ 0x58
 8006450:	4615      	mov	r5, r2
 8006452:	461e      	mov	r6, r3
 8006454:	da0d      	bge.n	8006472 <__swhatbuf_r+0x2e>
 8006456:	89a3      	ldrh	r3, [r4, #12]
 8006458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	bf14      	ite	ne
 8006462:	2340      	movne	r3, #64	@ 0x40
 8006464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006468:	2000      	movs	r0, #0
 800646a:	6031      	str	r1, [r6, #0]
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	b016      	add	sp, #88	@ 0x58
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	466a      	mov	r2, sp
 8006474:	f000 f848 	bl	8006508 <_fstat_r>
 8006478:	2800      	cmp	r0, #0
 800647a:	dbec      	blt.n	8006456 <__swhatbuf_r+0x12>
 800647c:	9901      	ldr	r1, [sp, #4]
 800647e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006486:	4259      	negs	r1, r3
 8006488:	4159      	adcs	r1, r3
 800648a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800648e:	e7eb      	b.n	8006468 <__swhatbuf_r+0x24>

08006490 <__smakebuf_r>:
 8006490:	898b      	ldrh	r3, [r1, #12]
 8006492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006494:	079d      	lsls	r5, r3, #30
 8006496:	4606      	mov	r6, r0
 8006498:	460c      	mov	r4, r1
 800649a:	d507      	bpl.n	80064ac <__smakebuf_r+0x1c>
 800649c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	6123      	str	r3, [r4, #16]
 80064a4:	2301      	movs	r3, #1
 80064a6:	6163      	str	r3, [r4, #20]
 80064a8:	b003      	add	sp, #12
 80064aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ac:	ab01      	add	r3, sp, #4
 80064ae:	466a      	mov	r2, sp
 80064b0:	f7ff ffc8 	bl	8006444 <__swhatbuf_r>
 80064b4:	9f00      	ldr	r7, [sp, #0]
 80064b6:	4605      	mov	r5, r0
 80064b8:	4639      	mov	r1, r7
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff fb16 	bl	8005aec <_malloc_r>
 80064c0:	b948      	cbnz	r0, 80064d6 <__smakebuf_r+0x46>
 80064c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c6:	059a      	lsls	r2, r3, #22
 80064c8:	d4ee      	bmi.n	80064a8 <__smakebuf_r+0x18>
 80064ca:	f023 0303 	bic.w	r3, r3, #3
 80064ce:	f043 0302 	orr.w	r3, r3, #2
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	e7e2      	b.n	800649c <__smakebuf_r+0xc>
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	6020      	str	r0, [r4, #0]
 80064da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064e6:	b15b      	cbz	r3, 8006500 <__smakebuf_r+0x70>
 80064e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ec:	4630      	mov	r0, r6
 80064ee:	f000 f81d 	bl	800652c <_isatty_r>
 80064f2:	b128      	cbz	r0, 8006500 <__smakebuf_r+0x70>
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	431d      	orrs	r5, r3
 8006504:	81a5      	strh	r5, [r4, #12]
 8006506:	e7cf      	b.n	80064a8 <__smakebuf_r+0x18>

08006508 <_fstat_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4d07      	ldr	r5, [pc, #28]	@ (8006528 <_fstat_r+0x20>)
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	4608      	mov	r0, r1
 8006512:	4611      	mov	r1, r2
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	f7fb f87e 	bl	8001616 <_fstat>
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	d102      	bne.n	8006524 <_fstat_r+0x1c>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	b103      	cbz	r3, 8006524 <_fstat_r+0x1c>
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	bd38      	pop	{r3, r4, r5, pc}
 8006526:	bf00      	nop
 8006528:	2000051c 	.word	0x2000051c

0800652c <_isatty_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4d06      	ldr	r5, [pc, #24]	@ (8006548 <_isatty_r+0x1c>)
 8006530:	2300      	movs	r3, #0
 8006532:	4604      	mov	r4, r0
 8006534:	4608      	mov	r0, r1
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	f7fb f87d 	bl	8001636 <_isatty>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_isatty_r+0x1a>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_isatty_r+0x1a>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	2000051c 	.word	0x2000051c

0800654c <_init>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr

08006558 <_fini>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	bf00      	nop
 800655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655e:	bc08      	pop	{r3}
 8006560:	469e      	mov	lr, r3
 8006562:	4770      	bx	lr
