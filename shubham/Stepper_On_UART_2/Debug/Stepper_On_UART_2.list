
Stepper_On_UART_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005300  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005588  08005588  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005588  08005588  00006588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005590  08005590  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005598  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  08005608  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005608  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0f7  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020aa  00000000  00000000  00015197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00017248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00017fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002303f  00000000  00000000  00018a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010425  00000000  00000000  0003ba84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d2d  00000000  00000000  0004bea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fbd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004058  00000000  00000000  0011fc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00123c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054b8 	.word	0x080054b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080054b8 	.word	0x080054b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fe7c 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f8c2 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fa22 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f9f6 	bl	80009a0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005b4:	f000 f9ca 	bl	800094c <MX_UART4_Init>
  MX_TIM1_Init();
 80005b8:	f000 f928 	bl	800080c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive(&huart4, rxbuff, 64, 1000);
 80005bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c0:	2240      	movs	r2, #64	@ 0x40
 80005c2:	4949      	ldr	r1, [pc, #292]	@ (80006e8 <main+0x148>)
 80005c4:	4849      	ldr	r0, [pc, #292]	@ (80006ec <main+0x14c>)
 80005c6:	f002 ffd6 	bl	8003576 <HAL_UART_Receive>
	HAL_UART_Receive_IT(&huart4, rxbuff, 64);
 80005ca:	2240      	movs	r2, #64	@ 0x40
 80005cc:	4946      	ldr	r1, [pc, #280]	@ (80006e8 <main+0x148>)
 80005ce:	4847      	ldr	r0, [pc, #284]	@ (80006ec <main+0x14c>)
 80005d0:	f003 f868 	bl	80036a4 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2120      	movs	r1, #32
 80005d8:	4845      	ldr	r0, [pc, #276]	@ (80006f0 <main+0x150>)
 80005da:	f001 fa0b 	bl	80019f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_PORT1, DIR_PIN1,
 80005de:	4b45      	ldr	r3, [pc, #276]	@ (80006f4 <main+0x154>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	bf14      	ite	ne
 80005e6:	2301      	movne	r3, #1
 80005e8:	2300      	moveq	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	483f      	ldr	r0, [pc, #252]	@ (80006f0 <main+0x150>)
 80005f2:	f001 f9ff 	bl	80019f4 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 80005f6:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <main+0x158>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d109      	bne.n	8000612 <main+0x72>
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <main+0x15c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d105      	bne.n	8000612 <main+0x72>
			direction1 = 1;  // Set to Anti-clockwise
 8000606:	4b3b      	ldr	r3, [pc, #236]	@ (80006f4 <main+0x154>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 800060c:	4b3c      	ldr	r3, [pc, #240]	@ (8000700 <main+0x160>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8000612:	4b3c      	ldr	r3, [pc, #240]	@ (8000704 <main+0x164>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d109      	bne.n	800062e <main+0x8e>
 800061a:	4b3b      	ldr	r3, [pc, #236]	@ (8000708 <main+0x168>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <main+0x8e>
			direction1 = 0;  // Set to Clockwise
 8000622:	4b34      	ldr	r3, [pc, #208]	@ (80006f4 <main+0x154>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8000628:	4b35      	ldr	r3, [pc, #212]	@ (8000700 <main+0x160>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
		}
		if (squ == 1 && !prev_squ) {
 800062e:	4b37      	ldr	r3, [pc, #220]	@ (800070c <main+0x16c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d10f      	bne.n	8000656 <main+0xb6>
 8000636:	4b36      	ldr	r3, [pc, #216]	@ (8000710 <main+0x170>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10b      	bne.n	8000656 <main+0xb6>
			stepper_running1 = 0;
 800063e:	4b30      	ldr	r3, [pc, #192]	@ (8000700 <main+0x160>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
			printf("Enable pin high\r\n");
 8000644:	4833      	ldr	r0, [pc, #204]	@ (8000714 <main+0x174>)
 8000646:	f004 f8d3 	bl	80047f0 <puts>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	4828      	ldr	r0, [pc, #160]	@ (80006f0 <main+0x150>)
 8000650:	f001 f9d0 	bl	80019f4 <HAL_GPIO_WritePin>
 8000654:	e004      	b.n	8000660 <main+0xc0>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2140      	movs	r1, #64	@ 0x40
 800065a:	4825      	ldr	r0, [pc, #148]	@ (80006f0 <main+0x150>)
 800065c:	f001 f9ca 	bl	80019f4 <HAL_GPIO_WritePin>
//			printf("Enable pin high\r\n");
//		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Disable driver (HIGH)
//		}

		// Store previous states
		prev_ll1 = ll1;
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <main+0x158>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a25      	ldr	r2, [pc, #148]	@ (80006fc <main+0x15c>)
 8000666:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 8000668:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <main+0x164>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a26      	ldr	r2, [pc, #152]	@ (8000708 <main+0x168>)
 800066e:	6013      	str	r3, [r2, #0]
		prev_squ = squ;
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <main+0x16c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <main+0x170>)
 8000676:	6013      	str	r3, [r2, #0]

		if (stepper_running1
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <main+0x160>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d025      	beq.n	80006cc <main+0x12c>
				&& (HAL_GetTick() - last_step_time1) >= step_delay1) {
 8000680:	f000 fe74 	bl	800136c <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <main+0x178>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4a23      	ldr	r2, [pc, #140]	@ (800071c <main+0x17c>)
 800068e:	6812      	ldr	r2, [r2, #0]
 8000690:	4293      	cmp	r3, r2
 8000692:	d31b      	bcc.n	80006cc <main+0x12c>
			last_step_time1 = HAL_GetTick(); // Update last step time
 8000694:	f000 fe6a 	bl	800136c <HAL_GetTick>
 8000698:	4603      	mov	r3, r0
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <main+0x178>)
 800069c:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <main+0x180>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d109      	bne.n	80006ba <main+0x11a>
				HAL_GPIO_WritePin(STEP_PORT1, STEP_PIN1, GPIO_PIN_SET); // Step HIGH
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ac:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <main+0x150>)
 80006ae:	f001 f9a1 	bl	80019f4 <HAL_GPIO_WritePin>
				step_state1 = 1;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <main+0x180>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e008      	b.n	80006cc <main+0x12c>
			} else {
				HAL_GPIO_WritePin(STEP_PORT1, STEP_PIN1, GPIO_PIN_RESET); // Step LOW
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c0:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <main+0x150>)
 80006c2:	f001 f997 	bl	80019f4 <HAL_GPIO_WritePin>
				step_state1 = 0;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <main+0x180>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	4814      	ldr	r0, [pc, #80]	@ (8000724 <main+0x184>)
 80006d2:	f001 f98f 	bl	80019f4 <HAL_GPIO_WritePin>
		//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
		TIM1->CCR1 = 255;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <main+0x188>)
 80006d8:	22ff      	movs	r2, #255	@ 0xff
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	4813      	ldr	r0, [pc, #76]	@ (800072c <main+0x18c>)
 80006e0:	f002 f832 	bl	8002748 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80006e4:	e776      	b.n	80005d4 <main+0x34>
 80006e6:	bf00      	nop
 80006e8:	20000164 	.word	0x20000164
 80006ec:	200000d4 	.word	0x200000d4
 80006f0:	40020000 	.word	0x40020000
 80006f4:	20000000 	.word	0x20000000
 80006f8:	200001a4 	.word	0x200001a4
 80006fc:	200001c4 	.word	0x200001c4
 8000700:	200001bc 	.word	0x200001bc
 8000704:	200001a8 	.word	0x200001a8
 8000708:	200001c8 	.word	0x200001c8
 800070c:	20000188 	.word	0x20000188
 8000710:	200001c0 	.word	0x200001c0
 8000714:	080054d0 	.word	0x080054d0
 8000718:	200001b4 	.word	0x200001b4
 800071c:	20000004 	.word	0x20000004
 8000720:	200001b8 	.word	0x200001b8
 8000724:	40020400 	.word	0x40020400
 8000728:	40010000 	.word	0x40010000
 800072c:	2000008c 	.word	0x2000008c

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	@ 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 f936 	bl	80049b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a29      	ldr	r2, [pc, #164]	@ (8000804 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800077c:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <SystemClock_Config+0xd8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fc7c 	bl	80020bc <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 fb5d 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 f91c 	bl	8001a28 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f6:	f000 fb47 	bl	8000e88 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b096      	sub	sp, #88	@ 0x58
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2220      	movs	r2, #32
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f004 f8b3 	bl	80049b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084a:	4b3e      	ldr	r3, [pc, #248]	@ (8000944 <MX_TIM1_Init+0x138>)
 800084c:	4a3e      	ldr	r2, [pc, #248]	@ (8000948 <MX_TIM1_Init+0x13c>)
 800084e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 8000850:	4b3c      	ldr	r3, [pc, #240]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000852:	2220      	movs	r2, #32
 8000854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b3b      	ldr	r3, [pc, #236]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800085c:	4b39      	ldr	r3, [pc, #228]	@ (8000944 <MX_TIM1_Init+0x138>)
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b38      	ldr	r3, [pc, #224]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000868:	4b36      	ldr	r3, [pc, #216]	@ (8000944 <MX_TIM1_Init+0x138>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b35      	ldr	r3, [pc, #212]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000874:	4833      	ldr	r0, [pc, #204]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000876:	f001 febf 	bl	80025f8 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000880:	f000 fb02 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800088e:	4619      	mov	r1, r3
 8000890:	482c      	ldr	r0, [pc, #176]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000892:	f002 f8e3 	bl	8002a5c <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800089c:	f000 faf4 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a0:	4828      	ldr	r0, [pc, #160]	@ (8000944 <MX_TIM1_Init+0x138>)
 80008a2:	f001 fef8 	bl	8002696 <HAL_TIM_PWM_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008ac:	f000 faec 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008bc:	4619      	mov	r1, r3
 80008be:	4821      	ldr	r0, [pc, #132]	@ (8000944 <MX_TIM1_Init+0x138>)
 80008c0:	f002 fcb0 	bl	8003224 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80008ca:	f000 fadd 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ce:	2360      	movs	r3, #96	@ 0x60
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	4814      	ldr	r0, [pc, #80]	@ (8000944 <MX_TIM1_Init+0x138>)
 80008f4:	f001 fff0 	bl	80028d8 <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80008fe:	f000 fac3 	bl	8000e88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000916:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000926:	f002 fcf9 	bl	800331c <HAL_TIMEx_ConfigBreakDeadTime>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000930:	f000 faaa 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <MX_TIM1_Init+0x138>)
 8000936:	f000 faf7 	bl	8000f28 <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3758      	adds	r7, #88	@ 0x58
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c
 8000948:	40010000 	.word	0x40010000

0800094c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_UART4_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_UART4_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_UART4_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_UART4_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_UART4_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_UART4_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_UART4_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_UART4_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_UART4_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_UART4_Init+0x4c>)
 8000984:	f002 fd1c 	bl	80033c0 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 fa7b 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000d4 	.word	0x200000d4
 800099c:	40004c00 	.word	0x40004c00

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <MX_USART2_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d8:	f002 fcf2 	bl	80033c0 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 fa51 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000011c 	.word	0x2000011c
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a37      	ldr	r2, [pc, #220]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b35      	ldr	r3, [pc, #212]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a30      	ldr	r2, [pc, #192]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a29      	ldr	r2, [pc, #164]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a22      	ldr	r2, [pc, #136]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8000a80:	481c      	ldr	r0, [pc, #112]	@ (8000af4 <MX_GPIO_Init+0x100>)
 8000a82:	f000 ffb7 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2110      	movs	r1, #16
 8000a8a:	481b      	ldr	r0, [pc, #108]	@ (8000af8 <MX_GPIO_Init+0x104>)
 8000a8c:	f000 ffb2 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4815      	ldr	r0, [pc, #84]	@ (8000afc <MX_GPIO_Init+0x108>)
 8000aa8:	f000 fe10 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000aac:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <MX_GPIO_Init+0x100>)
 8000ac6:	f000 fe01 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aca:	2310      	movs	r3, #16
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_GPIO_Init+0x104>)
 8000ae2:	f000 fdf3 	bl	80016cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	@ 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40020800 	.word	0x40020800

08000b00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	b099      	sub	sp, #100	@ 0x64
 8000b04:	af0e      	add	r7, sp, #56	@ 0x38
 8000b06:	6278      	str	r0, [r7, #36]	@ 0x24
	if (huart->Instance == UART4) {  // Check if it's the correct UART
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a6f      	ldr	r2, [pc, #444]	@ (8000ccc <HAL_UART_RxCpltCallback+0x1cc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	f040 814a 	bne.w	8000da8 <HAL_UART_RxCpltCallback+0x2a8>
		lx = (rxbuff[0] & 0x80) ?
 8000b14:	4b6e      	ldr	r3, [pc, #440]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da04      	bge.n	8000b28 <HAL_UART_RxCpltCallback+0x28>
 8000b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b26:	e001      	b.n	8000b2c <HAL_UART_RxCpltCallback+0x2c>
 8000b28:	4b69      	ldr	r3, [pc, #420]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 8000b2c:	4a69      	ldr	r2, [pc, #420]	@ (8000cd4 <HAL_UART_RxCpltCallback+0x1d4>)
 8000b2e:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 8000b30:	4b67      	ldr	r3, [pc, #412]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da04      	bge.n	8000b44 <HAL_UART_RxCpltCallback+0x44>
 8000b3a:	4b65      	ldr	r3, [pc, #404]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b42:	e001      	b.n	8000b48 <HAL_UART_RxCpltCallback+0x48>
 8000b44:	4b62      	ldr	r3, [pc, #392]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 8000b48:	4a63      	ldr	r2, [pc, #396]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x1d8>)
 8000b4a:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 8000b4c:	4b60      	ldr	r3, [pc, #384]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	da04      	bge.n	8000b60 <HAL_UART_RxCpltCallback+0x60>
 8000b56:	4b5e      	ldr	r3, [pc, #376]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b58:	789b      	ldrb	r3, [r3, #2]
 8000b5a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b5e:	e001      	b.n	8000b64 <HAL_UART_RxCpltCallback+0x64>
 8000b60:	4b5b      	ldr	r3, [pc, #364]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b62:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 8000b64:	4a5d      	ldr	r2, [pc, #372]	@ (8000cdc <HAL_UART_RxCpltCallback+0x1dc>)
 8000b66:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 8000b68:	4b59      	ldr	r3, [pc, #356]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b6a:	78db      	ldrb	r3, [r3, #3]
 8000b6c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da04      	bge.n	8000b7c <HAL_UART_RxCpltCallback+0x7c>
 8000b72:	4b57      	ldr	r3, [pc, #348]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b74:	78db      	ldrb	r3, [r3, #3]
 8000b76:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b7a:	e001      	b.n	8000b80 <HAL_UART_RxCpltCallback+0x80>
 8000b7c:	4b54      	ldr	r3, [pc, #336]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b7e:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 8000b80:	4a57      	ldr	r2, [pc, #348]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000b82:	6013      	str	r3, [r2, #0]

		up = (rxbuff[8] & 0x80) ?
 8000b84:	4b52      	ldr	r3, [pc, #328]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b86:	7a1b      	ldrb	r3, [r3, #8]
 8000b88:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da04      	bge.n	8000b98 <HAL_UART_RxCpltCallback+0x98>
 8000b8e:	4b50      	ldr	r3, [pc, #320]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b90:	7a1b      	ldrb	r3, [r3, #8]
 8000b92:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b96:	e001      	b.n	8000b9c <HAL_UART_RxCpltCallback+0x9c>
 8000b98:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 8000b9c:	4a51      	ldr	r2, [pc, #324]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b9e:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 8000ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000ba2:	7a5b      	ldrb	r3, [r3, #9]
 8000ba4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	da04      	bge.n	8000bb4 <HAL_UART_RxCpltCallback+0xb4>
 8000baa:	4b49      	ldr	r3, [pc, #292]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bac:	7a5b      	ldrb	r3, [r3, #9]
 8000bae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bb2:	e001      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0xb8>
 8000bb4:	4b46      	ldr	r3, [pc, #280]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bb6:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 8000bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8000ce8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000bba:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 8000bbc:	4b44      	ldr	r3, [pc, #272]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bbe:	7a9b      	ldrb	r3, [r3, #10]
 8000bc0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da04      	bge.n	8000bd0 <HAL_UART_RxCpltCallback+0xd0>
 8000bc6:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bc8:	7a9b      	ldrb	r3, [r3, #10]
 8000bca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bce:	e001      	b.n	8000bd4 <HAL_UART_RxCpltCallback+0xd4>
 8000bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bd2:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 8000bd4:	4a45      	ldr	r2, [pc, #276]	@ (8000cec <HAL_UART_RxCpltCallback+0x1ec>)
 8000bd6:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 8000bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bda:	7adb      	ldrb	r3, [r3, #11]
 8000bdc:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	da04      	bge.n	8000bec <HAL_UART_RxCpltCallback+0xec>
 8000be2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000be4:	7adb      	ldrb	r3, [r3, #11]
 8000be6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bea:	e001      	b.n	8000bf0 <HAL_UART_RxCpltCallback+0xf0>
 8000bec:	4b38      	ldr	r3, [pc, #224]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bee:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 8000bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000bf2:	6013      	str	r3, [r2, #0]

		tri = (rxbuff[6] & 0x80) ?
 8000bf4:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da04      	bge.n	8000c08 <HAL_UART_RxCpltCallback+0x108>
 8000bfe:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c00:	799b      	ldrb	r3, [r3, #6]
 8000c02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c06:	e001      	b.n	8000c0c <HAL_UART_RxCpltCallback+0x10c>
 8000c08:	4b31      	ldr	r3, [pc, #196]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c0a:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 8000c0c:	4a39      	ldr	r2, [pc, #228]	@ (8000cf4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000c0e:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c12:	795b      	ldrb	r3, [r3, #5]
 8000c14:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da04      	bge.n	8000c24 <HAL_UART_RxCpltCallback+0x124>
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c1c:	795b      	ldrb	r3, [r3, #5]
 8000c1e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c22:	e001      	b.n	8000c28 <HAL_UART_RxCpltCallback+0x128>
 8000c24:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c26:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 8000c28:	4a33      	ldr	r2, [pc, #204]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000c2a:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 8000c2c:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c2e:	79db      	ldrb	r3, [r3, #7]
 8000c30:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da04      	bge.n	8000c40 <HAL_UART_RxCpltCallback+0x140>
 8000c36:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c38:	79db      	ldrb	r3, [r3, #7]
 8000c3a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c3e:	e001      	b.n	8000c44 <HAL_UART_RxCpltCallback+0x144>
 8000c40:	4b23      	ldr	r3, [pc, #140]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c42:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 8000c44:	4a2d      	ldr	r2, [pc, #180]	@ (8000cfc <HAL_UART_RxCpltCallback+0x1fc>)
 8000c46:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da04      	bge.n	8000c5c <HAL_UART_RxCpltCallback+0x15c>
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c5a:	e001      	b.n	8000c60 <HAL_UART_RxCpltCallback+0x160>
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c5e:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 8000c60:	4a27      	ldr	r2, [pc, #156]	@ (8000d00 <HAL_UART_RxCpltCallback+0x200>)
 8000c62:	6013      	str	r3, [r2, #0]

		ll1 = (rxbuff[12] & 0x80) ?
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c66:	7b1b      	ldrb	r3, [r3, #12]
 8000c68:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da04      	bge.n	8000c78 <HAL_UART_RxCpltCallback+0x178>
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c70:	7b1b      	ldrb	r3, [r3, #12]
 8000c72:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c76:	e001      	b.n	8000c7c <HAL_UART_RxCpltCallback+0x17c>
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c7a:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 8000c7c:	4a21      	ldr	r2, [pc, #132]	@ (8000d04 <HAL_UART_RxCpltCallback+0x204>)
 8000c7e:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c82:	7b5b      	ldrb	r3, [r3, #13]
 8000c84:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	da04      	bge.n	8000c94 <HAL_UART_RxCpltCallback+0x194>
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c8c:	7b5b      	ldrb	r3, [r3, #13]
 8000c8e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c92:	e001      	b.n	8000c98 <HAL_UART_RxCpltCallback+0x198>
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c96:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 8000c98:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_UART_RxCpltCallback+0x208>)
 8000c9a:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da04      	bge.n	8000cb0 <HAL_UART_RxCpltCallback+0x1b0>
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000ca8:	7b9b      	ldrb	r3, [r3, #14]
 8000caa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cae:	e001      	b.n	8000cb4 <HAL_UART_RxCpltCallback+0x1b4>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000cb2:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8000cb4:	4a15      	ldr	r2, [pc, #84]	@ (8000d0c <HAL_UART_RxCpltCallback+0x20c>)
 8000cb6:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000cba:	7bdb      	ldrb	r3, [r3, #15]
 8000cbc:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da26      	bge.n	8000d10 <HAL_UART_RxCpltCallback+0x210>
 8000cc2:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_UART_RxCpltCallback+0x1d0>)
 8000cc4:	7bdb      	ldrb	r3, [r3, #15]
 8000cc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cca:	e023      	b.n	8000d14 <HAL_UART_RxCpltCallback+0x214>
 8000ccc:	40004c00 	.word	0x40004c00
 8000cd0:	20000164 	.word	0x20000164
 8000cd4:	20000174 	.word	0x20000174
 8000cd8:	20000178 	.word	0x20000178
 8000cdc:	2000017c 	.word	0x2000017c
 8000ce0:	20000180 	.word	0x20000180
 8000ce4:	20000194 	.word	0x20000194
 8000ce8:	20000198 	.word	0x20000198
 8000cec:	2000019c 	.word	0x2000019c
 8000cf0:	200001a0 	.word	0x200001a0
 8000cf4:	2000018c 	.word	0x2000018c
 8000cf8:	20000188 	.word	0x20000188
 8000cfc:	20000190 	.word	0x20000190
 8000d00:	20000184 	.word	0x20000184
 8000d04:	200001a4 	.word	0x200001a4
 8000d08:	200001ac 	.word	0x200001ac
 8000d0c:	200001a8 	.word	0x200001a8
 8000d10:	4b3f      	ldr	r3, [pc, #252]	@ (8000e10 <HAL_UART_RxCpltCallback+0x310>)
 8000d12:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 8000d14:	4a3f      	ldr	r2, [pc, #252]	@ (8000e14 <HAL_UART_RxCpltCallback+0x314>)
 8000d16:	6013      	str	r3, [r2, #0]

		printf(
 8000d18:	4b3f      	ldr	r3, [pc, #252]	@ (8000e18 <HAL_UART_RxCpltCallback+0x318>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e1c <HAL_UART_RxCpltCallback+0x31c>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	61fa      	str	r2, [r7, #28]
 8000d24:	4b3e      	ldr	r3, [pc, #248]	@ (8000e20 <HAL_UART_RxCpltCallback+0x320>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	61b8      	str	r0, [r7, #24]
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <HAL_UART_RxCpltCallback+0x324>)
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e28 <HAL_UART_RxCpltCallback+0x328>)
 8000d30:	681c      	ldr	r4, [r3, #0]
 8000d32:	4b3e      	ldr	r3, [pc, #248]	@ (8000e2c <HAL_UART_RxCpltCallback+0x32c>)
 8000d34:	681d      	ldr	r5, [r3, #0]
 8000d36:	4b3e      	ldr	r3, [pc, #248]	@ (8000e30 <HAL_UART_RxCpltCallback+0x330>)
 8000d38:	681e      	ldr	r6, [r3, #0]
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <HAL_UART_RxCpltCallback+0x334>)
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	6179      	str	r1, [r7, #20]
 8000d40:	4b3d      	ldr	r3, [pc, #244]	@ (8000e38 <HAL_UART_RxCpltCallback+0x338>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b3d      	ldr	r3, [pc, #244]	@ (8000e3c <HAL_UART_RxCpltCallback+0x33c>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e40 <HAL_UART_RxCpltCallback+0x340>)
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4b3c      	ldr	r3, [pc, #240]	@ (8000e44 <HAL_UART_RxCpltCallback+0x344>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	4b3b      	ldr	r3, [pc, #236]	@ (8000e48 <HAL_UART_RxCpltCallback+0x348>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	603a      	str	r2, [r7, #0]
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e4c <HAL_UART_RxCpltCallback+0x34c>)
 8000d60:	6819      	ldr	r1, [r3, #0]
 8000d62:	4b3b      	ldr	r3, [pc, #236]	@ (8000e50 <HAL_UART_RxCpltCallback+0x350>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <HAL_UART_RxCpltCallback+0x314>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8000d6c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000d6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	9308      	str	r3, [sp, #32]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	9107      	str	r1, [sp, #28]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	9206      	str	r2, [sp, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	9305      	str	r3, [sp, #20]
 8000d84:	6979      	ldr	r1, [r7, #20]
 8000d86:	9104      	str	r1, [sp, #16]
 8000d88:	9603      	str	r6, [sp, #12]
 8000d8a:	9502      	str	r5, [sp, #8]
 8000d8c:	9401      	str	r4, [sp, #4]
 8000d8e:	9000      	str	r0, [sp, #0]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	6a39      	ldr	r1, [r7, #32]
 8000d96:	482f      	ldr	r0, [pc, #188]	@ (8000e54 <HAL_UART_RxCpltCallback+0x354>)
 8000d98:	f003 fcc2 	bl	8004720 <iprintf>
				"Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\r\n",
				lx, ly, rx, ry, cro, squ, tri, cir, up, down, left, right, ll1,
				ll2, rr1, rr2);

		// Restart UART reception for next data
		HAL_UART_Receive_IT(&huart4, rxbuff, 64);
 8000d9c:	2240      	movs	r2, #64	@ 0x40
 8000d9e:	491c      	ldr	r1, [pc, #112]	@ (8000e10 <HAL_UART_RxCpltCallback+0x310>)
 8000da0:	482d      	ldr	r0, [pc, #180]	@ (8000e58 <HAL_UART_RxCpltCallback+0x358>)
 8000da2:	f002 fc7f 	bl	80036a4 <HAL_UART_Receive_IT>
		rr1 = 0;

		rr2 = 0;

	}
}
 8000da6:	e02f      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x308>
		ry = 0;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <HAL_UART_RxCpltCallback+0x324>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
		rx = 0;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <HAL_UART_RxCpltCallback+0x320>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
		lx = 0;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_UART_RxCpltCallback+0x318>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
		ly = 0;
 8000dba:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <HAL_UART_RxCpltCallback+0x31c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
		cro = 0;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <HAL_UART_RxCpltCallback+0x328>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
		squ = 0;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <HAL_UART_RxCpltCallback+0x32c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
		tri = 0;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_UART_RxCpltCallback+0x330>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
		cir = 0;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_UART_RxCpltCallback+0x334>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
		up = 0;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HAL_UART_RxCpltCallback+0x338>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
		down = 0;
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <HAL_UART_RxCpltCallback+0x33c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
		left = 0;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <HAL_UART_RxCpltCallback+0x340>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
		right = 0;
 8000dea:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <HAL_UART_RxCpltCallback+0x344>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
		ll1 = 0;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_RxCpltCallback+0x348>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
		ll2 = 0;
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_UART_RxCpltCallback+0x34c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
		rr1 = 0;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <HAL_UART_RxCpltCallback+0x350>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
		rr2 = 0;
 8000e02:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <HAL_UART_RxCpltCallback+0x314>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	372c      	adds	r7, #44	@ 0x2c
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e10:	20000164 	.word	0x20000164
 8000e14:	200001b0 	.word	0x200001b0
 8000e18:	20000174 	.word	0x20000174
 8000e1c:	20000178 	.word	0x20000178
 8000e20:	2000017c 	.word	0x2000017c
 8000e24:	20000180 	.word	0x20000180
 8000e28:	20000184 	.word	0x20000184
 8000e2c:	20000188 	.word	0x20000188
 8000e30:	2000018c 	.word	0x2000018c
 8000e34:	20000190 	.word	0x20000190
 8000e38:	20000194 	.word	0x20000194
 8000e3c:	20000198 	.word	0x20000198
 8000e40:	2000019c 	.word	0x2000019c
 8000e44:	200001a0 	.word	0x200001a0
 8000e48:	200001a4 	.word	0x200001a4
 8000e4c:	200001ac 	.word	0x200001ac
 8000e50:	200001a8 	.word	0x200001a8
 8000e54:	080054e4 	.word	0x080054e4
 8000e58:	200000d4 	.word	0x200000d4

08000e5c <_write>:

int _write(int file, char *ptr, int len) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <_write+0x28>)
 8000e74:	f002 faf4 	bl	8003460 <HAL_UART_Transmit>
	return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000011c 	.word	0x2000011c

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ed2:	2007      	movs	r0, #7
 8000ed4:	f000 fb26 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <HAL_TIM_Base_MspInit+0x3c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10d      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_TIM_Base_MspInit+0x40>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <HAL_TIM_Base_MspInit+0x40>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <HAL_TIM_Base_MspInit+0x40>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40010000 	.word	0x40010000
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <HAL_TIM_MspPostInit+0x68>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d11e      	bne.n	8000f88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <HAL_TIM_MspPostInit+0x6c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_TIM_MspPostInit+0x6c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <HAL_TIM_MspPostInit+0x70>)
 8000f84:	f000 fba2 	bl	80016cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40010000 	.word	0x40010000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	@ 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a36      	ldr	r2, [pc, #216]	@ (8001094 <HAL_UART_MspInit+0xf8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d134      	bne.n	8001028 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	4b35      	ldr	r3, [pc, #212]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a34      	ldr	r2, [pc, #208]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8000fc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b32      	ldr	r3, [pc, #200]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	4b2e      	ldr	r3, [pc, #184]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001006:	2308      	movs	r3, #8
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4822      	ldr	r0, [pc, #136]	@ (800109c <HAL_UART_MspInit+0x100>)
 8001012:	f000 fb5b 	bl	80016cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2034      	movs	r0, #52	@ 0x34
 800101c:	f000 fa8d 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001020:	2034      	movs	r0, #52	@ 0x34
 8001022:	f000 faa6 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001026:	e030      	b.n	800108a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <HAL_UART_MspInit+0x104>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12b      	bne.n	800108a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_UART_MspInit+0xfc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800106a:	230c      	movs	r3, #12
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107a:	2307      	movs	r3, #7
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_UART_MspInit+0x100>)
 8001086:	f000 fb21 	bl	80016cc <HAL_GPIO_Init>
}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40004c00 	.word	0x40004c00
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40004400 	.word	0x40004400

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <NMI_Handler+0x4>

080010ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <MemManage_Handler+0x4>

080010bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <UsageFault_Handler+0x4>

080010cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fa:	f000 f923 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <UART4_IRQHandler+0x10>)
 800110a:	f002 faf1 	bl	80036f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000d4 	.word	0x200000d4

08001118 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e00a      	b.n	8001140 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112a:	f3af 8000 	nop.w
 800112e:	4601      	mov	r1, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf0      	blt.n	800112a <_read+0x12>
  }

  return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800117a:	605a      	str	r2, [r3, #4]
  return 0;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_isatty>:

int _isatty(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f003 fc2e 	bl	8004a4c <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20020000 	.word	0x20020000
 800121c:	00000400 	.word	0x00000400
 8001220:	200001cc 	.word	0x200001cc
 8001224:	20000320 	.word	0x20000320

08001228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001284 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001250:	f7ff ffea 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800127a:	f003 fbed 	bl	8004a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff f98f 	bl	80005a0 <main>
  bx  lr    
 8001282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001290:	08005598 	.word	0x08005598
  ldr r2, =_sbss
 8001294:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001298:	20000320 	.word	0x20000320

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <HAL_Init+0x40>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_Init+0x40>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <HAL_Init+0x40>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 f92b 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fdde 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f943 	bl	800158e <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f90b 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000008 	.word	0x20000008
 800133c:	20000010 	.word	0x20000010
 8001340:	2000000c 	.word	0x2000000c

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000010 	.word	0x20000010
 8001368:	200001d0 	.word	0x200001d0

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200001d0 	.word	0x200001d0

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	@ (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff3e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff31 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff feda 	bl	800136c <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d008      	beq.n	80015d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2280      	movs	r2, #128	@ 0x80
 80015ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e052      	b.n	800167e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0216 	bic.w	r2, r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <HAL_DMA_Abort+0x62>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0208 	bic.w	r2, r2, #8
 8001616:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	e013      	b.n	8001652 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff fe9f 	bl	800136c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d90c      	bls.n	8001652 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e015      	b.n	800167e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e4      	bne.n	800162a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001664:	223f      	movs	r2, #63	@ 0x3f
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d004      	beq.n	80016a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2280      	movs	r2, #128	@ 0x80
 800169e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e00c      	b.n	80016be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2205      	movs	r2, #5
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e165      	b.n	80019b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8154 	bne.w	80019ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80ae 	beq.w	80019ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b5d      	ldr	r3, [pc, #372]	@ (80019cc <HAL_GPIO_Init+0x300>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a5c      	ldr	r2, [pc, #368]	@ (80019cc <HAL_GPIO_Init+0x300>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b5a      	ldr	r3, [pc, #360]	@ (80019cc <HAL_GPIO_Init+0x300>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186e:	4a58      	ldr	r2, [pc, #352]	@ (80019d0 <HAL_GPIO_Init+0x304>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4f      	ldr	r2, [pc, #316]	@ (80019d4 <HAL_GPIO_Init+0x308>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d025      	beq.n	80018e6 <HAL_GPIO_Init+0x21a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4e      	ldr	r2, [pc, #312]	@ (80019d8 <HAL_GPIO_Init+0x30c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01f      	beq.n	80018e2 <HAL_GPIO_Init+0x216>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	@ (80019dc <HAL_GPIO_Init+0x310>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x212>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	@ (80019e0 <HAL_GPIO_Init+0x314>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x20e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4b      	ldr	r2, [pc, #300]	@ (80019e4 <HAL_GPIO_Init+0x318>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x20a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4a      	ldr	r2, [pc, #296]	@ (80019e8 <HAL_GPIO_Init+0x31c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x206>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a49      	ldr	r2, [pc, #292]	@ (80019ec <HAL_GPIO_Init+0x320>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x202>
 80018ca:	2306      	movs	r3, #6
 80018cc:	e00c      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018ce:	2307      	movs	r3, #7
 80018d0:	e00a      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018e6:	2300      	movs	r3, #0
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f002 0203 	and.w	r2, r2, #3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	@ (80019d0 <HAL_GPIO_Init+0x304>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001906:	4b3a      	ldr	r3, [pc, #232]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192a:	4a31      	ldr	r2, [pc, #196]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001930:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001954:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197e:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a8:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <HAL_GPIO_Init+0x324>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	f67f ae96 	bls.w	80016e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40021400 	.word	0x40021400
 80019ec:	40021800 	.word	0x40021800
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cc      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b68      	ldr	r3, [pc, #416]	@ (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b65      	ldr	r3, [pc, #404]	@ (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a58      	ldr	r2, [pc, #352]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a52      	ldr	r2, [pc, #328]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d044      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3b      	ldr	r3, [pc, #236]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e067      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4934      	ldr	r1, [pc, #208]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff fc28 	bl	800136c <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fc24 	bl	800136c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20c      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f855 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	@ (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	@ (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fb88 	bl	80012e4 <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	0800553c 	.word	0x0800553c
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a9b      	lsrs	r3, r3, #10
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	@ (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	0800554c 	.word	0x0800554c

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffdc 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0b5b      	lsrs	r3, r3, #13
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	@ (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	0800554c 	.word	0x0800554c

08001c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c60:	b0ae      	sub	sp, #184	@ 0xb8
 8001c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c82:	4bcb      	ldr	r3, [pc, #812]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	f200 8206 	bhi.w	800209c <HAL_RCC_GetSysClockFreq+0x440>
 8001c90:	a201      	add	r2, pc, #4	@ (adr r2, 8001c98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ccd 	.word	0x08001ccd
 8001c9c:	0800209d 	.word	0x0800209d
 8001ca0:	0800209d 	.word	0x0800209d
 8001ca4:	0800209d 	.word	0x0800209d
 8001ca8:	08001cd5 	.word	0x08001cd5
 8001cac:	0800209d 	.word	0x0800209d
 8001cb0:	0800209d 	.word	0x0800209d
 8001cb4:	0800209d 	.word	0x0800209d
 8001cb8:	08001cdd 	.word	0x08001cdd
 8001cbc:	0800209d 	.word	0x0800209d
 8001cc0:	0800209d 	.word	0x0800209d
 8001cc4:	0800209d 	.word	0x0800209d
 8001cc8:	08001ecd 	.word	0x08001ecd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ccc:	4bb9      	ldr	r3, [pc, #740]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cd2:	e1e7      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd4:	4bb8      	ldr	r3, [pc, #736]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cda:	e1e3      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	4bb4      	ldr	r3, [pc, #720]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce8:	4bb1      	ldr	r3, [pc, #708]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d071      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf4:	4bae      	ldr	r3, [pc, #696]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d00:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d38:	4629      	mov	r1, r5
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	018b      	lsls	r3, r1, #6
 8001d50:	4641      	mov	r1, r8
 8001d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d56:	4641      	mov	r1, r8
 8001d58:	018a      	lsls	r2, r1, #6
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	1a51      	subs	r1, r2, r1
 8001d5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d60:	4649      	mov	r1, r9
 8001d62:	eb63 0301 	sbc.w	r3, r3, r1
 8001d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001d74:	4649      	mov	r1, r9
 8001d76:	00cb      	lsls	r3, r1, #3
 8001d78:	4641      	mov	r1, r8
 8001d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d7e:	4641      	mov	r1, r8
 8001d80:	00ca      	lsls	r2, r1, #3
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	4622      	mov	r2, r4
 8001d8a:	189b      	adds	r3, r3, r2
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d8e:	462b      	mov	r3, r5
 8001d90:	460a      	mov	r2, r1
 8001d92:	eb42 0303 	adc.w	r3, r2, r3
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001da4:	4629      	mov	r1, r5
 8001da6:	024b      	lsls	r3, r1, #9
 8001da8:	4621      	mov	r1, r4
 8001daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dae:	4621      	mov	r1, r4
 8001db0:	024a      	lsls	r2, r1, #9
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001dc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001dc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001dc8:	f7fe fa72 	bl	80002b0 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dd6:	e067      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd8:	4b75      	ldr	r3, [pc, #468]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	2200      	movs	r2, #0
 8001de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001de4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001df2:	2300      	movs	r3, #0
 8001df4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001df6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001dfa:	4622      	mov	r2, r4
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	0159      	lsls	r1, r3, #5
 8001e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0c:	0150      	lsls	r0, r2, #5
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4621      	mov	r1, r4
 8001e14:	1a51      	subs	r1, r2, r1
 8001e16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e18:	4629      	mov	r1, r5
 8001e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	018b      	lsls	r3, r1, #6
 8001e30:	4641      	mov	r1, r8
 8001e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e36:	4641      	mov	r1, r8
 8001e38:	018a      	lsls	r2, r1, #6
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e40:	4649      	mov	r1, r9
 8001e42:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e5a:	4692      	mov	sl, r2
 8001e5c:	469b      	mov	fp, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	eb1a 0303 	adds.w	r3, sl, r3
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	462b      	mov	r3, r5
 8001e68:	eb4b 0303 	adc.w	r3, fp, r3
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	028b      	lsls	r3, r1, #10
 8001e7e:	4621      	mov	r1, r4
 8001e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e84:	4621      	mov	r1, r4
 8001e86:	028a      	lsls	r2, r1, #10
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e90:	2200      	movs	r2, #0
 8001e92:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e94:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e9a:	f7fe fa09 	bl	80002b0 <__aeabi_uldivmod>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ea8:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eca:	e0eb      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ecc:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed8:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d06b      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee4:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	2200      	movs	r2, #0
 8001eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001eee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ef8:	2300      	movs	r3, #0
 8001efa:	667b      	str	r3, [r7, #100]	@ 0x64
 8001efc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f00:	4622      	mov	r2, r4
 8001f02:	462b      	mov	r3, r5
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f12:	0150      	lsls	r0, r2, #5
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4621      	mov	r1, r4
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	61b9      	str	r1, [r7, #24]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	eb63 0301 	sbc.w	r3, r3, r1
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f32:	4659      	mov	r1, fp
 8001f34:	018b      	lsls	r3, r1, #6
 8001f36:	4651      	mov	r1, sl
 8001f38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	018a      	lsls	r2, r1, #6
 8001f40:	4651      	mov	r1, sl
 8001f42:	ebb2 0801 	subs.w	r8, r2, r1
 8001f46:	4659      	mov	r1, fp
 8001f48:	eb63 0901 	sbc.w	r9, r3, r1
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f60:	4690      	mov	r8, r2
 8001f62:	4699      	mov	r9, r3
 8001f64:	4623      	mov	r3, r4
 8001f66:	eb18 0303 	adds.w	r3, r8, r3
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	462b      	mov	r3, r5
 8001f6e:	eb49 0303 	adc.w	r3, r9, r3
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f80:	4629      	mov	r1, r5
 8001f82:	024b      	lsls	r3, r1, #9
 8001f84:	4621      	mov	r1, r4
 8001f86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	024a      	lsls	r2, r1, #9
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f96:	2200      	movs	r2, #0
 8001f98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fa0:	f7fe f986 	bl	80002b0 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fae:	e065      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x420>
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fce:	2300      	movs	r3, #0
 8001fd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001fd6:	4642      	mov	r2, r8
 8001fd8:	464b      	mov	r3, r9
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	0159      	lsls	r1, r3, #5
 8001fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe8:	0150      	lsls	r0, r2, #5
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4641      	mov	r1, r8
 8001ff0:	1a51      	subs	r1, r2, r1
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002008:	4659      	mov	r1, fp
 800200a:	018b      	lsls	r3, r1, #6
 800200c:	4651      	mov	r1, sl
 800200e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002012:	4651      	mov	r1, sl
 8002014:	018a      	lsls	r2, r1, #6
 8002016:	4651      	mov	r1, sl
 8002018:	1a54      	subs	r4, r2, r1
 800201a:	4659      	mov	r1, fp
 800201c:	eb63 0501 	sbc.w	r5, r3, r1
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	00eb      	lsls	r3, r5, #3
 800202a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800202e:	00e2      	lsls	r2, r4, #3
 8002030:	4614      	mov	r4, r2
 8002032:	461d      	mov	r5, r3
 8002034:	4643      	mov	r3, r8
 8002036:	18e3      	adds	r3, r4, r3
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	464b      	mov	r3, r9
 800203c:	eb45 0303 	adc.w	r3, r5, r3
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800204e:	4629      	mov	r1, r5
 8002050:	028b      	lsls	r3, r1, #10
 8002052:	4621      	mov	r1, r4
 8002054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002058:	4621      	mov	r1, r4
 800205a:	028a      	lsls	r2, r1, #10
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002064:	2200      	movs	r2, #0
 8002066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002068:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800206a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800206e:	f7fe f91f 	bl	80002b0 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4613      	mov	r3, r2
 8002078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800207c:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0f1b      	lsrs	r3, r3, #28
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800208a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800208e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800209a:	e003      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800209e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	37b8      	adds	r7, #184	@ 0xb8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	00f42400 	.word	0x00f42400

080020bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e28d      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8083 	beq.w	80021e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020dc:	4b94      	ldr	r3, [pc, #592]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d019      	beq.n	800211c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020e8:	4b91      	ldr	r3, [pc, #580]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80020f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002100:	d00c      	beq.n	800211c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4b8b      	ldr	r3, [pc, #556]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d112      	bne.n	8002134 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210e:	4b88      	ldr	r3, [pc, #544]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800211a:	d10b      	bne.n	8002134 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4b84      	ldr	r3, [pc, #528]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x124>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d157      	bne.n	80021e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e25a      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x90>
 800213e:	4b7c      	ldr	r3, [pc, #496]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xcc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0xb4>
 8002156:	4b76      	ldr	r3, [pc, #472]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a75      	ldr	r2, [pc, #468]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b73      	ldr	r3, [pc, #460]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a72      	ldr	r2, [pc, #456]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xcc>
 8002170:	4b6f      	ldr	r3, [pc, #444]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6e      	ldr	r2, [pc, #440]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b6c      	ldr	r3, [pc, #432]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6b      	ldr	r2, [pc, #428]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff f8ec 	bl	800136c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff f8e8 	bl	800136c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	@ 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e21f      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b61      	ldr	r3, [pc, #388]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xdc>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f8d8 	bl	800136c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f8d4 	bl	800136c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e20b      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b57      	ldr	r3, [pc, #348]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x104>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06f      	beq.n	80022ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021ee:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d017      	beq.n	800222a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80021fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002202:	2b08      	cmp	r3, #8
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002206:	4b4a      	ldr	r3, [pc, #296]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002212:	4b47      	ldr	r3, [pc, #284]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221e:	4b44      	ldr	r3, [pc, #272]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x186>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1d3      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b3b      	ldr	r3, [pc, #236]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4937      	ldr	r1, [pc, #220]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <HAL_RCC_OscConfig+0x278>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7ff f881 	bl	800136c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff f87d 	bl	800136c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e1b4      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b2b      	ldr	r3, [pc, #172]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b28      	ldr	r3, [pc, #160]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4925      	ldr	r1, [pc, #148]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_RCC_OscConfig+0x278>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff f860 	bl	800136c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7ff f85c 	bl	800136c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e193      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d036      	beq.n	8002348 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff f840 	bl	800136c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff f83c 	bl	800136c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e173      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_OscConfig+0x274>)
 8002304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x234>
 800230e:	e01b      	b.n	8002348 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <HAL_RCC_OscConfig+0x27c>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7ff f829 	bl	800136c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	e00e      	b.n	800233c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231e:	f7ff f825 	bl	800136c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d907      	bls.n	800233c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e15c      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
 8002330:	40023800 	.word	0x40023800
 8002334:	42470000 	.word	0x42470000
 8002338:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4b8a      	ldr	r3, [pc, #552]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800233e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ea      	bne.n	800231e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8097 	beq.w	8002484 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b83      	ldr	r3, [pc, #524]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10f      	bne.n	8002386 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b7f      	ldr	r3, [pc, #508]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	4a7e      	ldr	r2, [pc, #504]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	@ 0x40
 8002376:	4b7c      	ldr	r3, [pc, #496]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b79      	ldr	r3, [pc, #484]	@ (800256c <HAL_RCC_OscConfig+0x4b0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b76      	ldr	r3, [pc, #472]	@ (800256c <HAL_RCC_OscConfig+0x4b0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a75      	ldr	r2, [pc, #468]	@ (800256c <HAL_RCC_OscConfig+0x4b0>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe ffe5 	bl	800136c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe ffe1 	bl	800136c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e118      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	4b6c      	ldr	r3, [pc, #432]	@ (800256c <HAL_RCC_OscConfig+0x4b0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x31e>
 80023cc:	4b66      	ldr	r3, [pc, #408]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d0:	4a65      	ldr	r2, [pc, #404]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0x358>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x340>
 80023e2:	4b61      	ldr	r3, [pc, #388]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e6:	4a60      	ldr	r2, [pc, #384]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0x358>
 80023fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002400:	4a59      	ldr	r2, [pc, #356]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	@ 0x70
 8002408:	4b57      	ldr	r3, [pc, #348]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240c:	4a56      	ldr	r2, [pc, #344]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	f023 0304 	bic.w	r3, r3, #4
 8002412:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe ffa6 	bl	800136c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe ffa2 	bl	800136c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0d7      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	4b4b      	ldr	r3, [pc, #300]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0ee      	beq.n	8002424 <HAL_RCC_OscConfig+0x368>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7fe ff90 	bl	800136c <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7fe ff8c 	bl	800136c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e0c1      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002466:	4b40      	ldr	r3, [pc, #256]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ee      	bne.n	8002450 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002478:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	4a3a      	ldr	r2, [pc, #232]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002482:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ad 	beq.w	80025e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800248e:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b08      	cmp	r3, #8
 8002498:	d060      	beq.n	800255c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d145      	bne.n	800252e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <HAL_RCC_OscConfig+0x4b4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe ff60 	bl	800136c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe ff5c 	bl	800136c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e093      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	3b01      	subs	r3, #1
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	061b      	lsls	r3, r3, #24
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f8:	071b      	lsls	r3, r3, #28
 80024fa:	491b      	ldr	r1, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x4b4>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe ff31 	bl	800136c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe ff2d 	bl	800136c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e064      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x452>
 800252c:	e05c      	b.n	80025e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCC_OscConfig+0x4b4>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe ff1a 	bl	800136c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe ff16 	bl	800136c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e04d      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x480>
 800255a:	e045      	b.n	80025e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e040      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000
 8002570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_RCC_OscConfig+0x538>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d030      	beq.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d129      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d122      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d119      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d10f      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e041      	b.n	800268e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fc60 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f000 fad8 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e041      	b.n	800272c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f839 	bl	8002734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 fa89 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_TIM_PWM_Start+0x24>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e022      	b.n	80027b2 <HAL_TIM_PWM_Start+0x6a>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d109      	bne.n	8002786 <HAL_TIM_PWM_Start+0x3e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e015      	b.n	80027b2 <HAL_TIM_PWM_Start+0x6a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d109      	bne.n	80027a0 <HAL_TIM_PWM_Start+0x58>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e008      	b.n	80027b2 <HAL_TIM_PWM_Start+0x6a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07c      	b.n	80028b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d104      	bne.n	80027ca <HAL_TIM_PWM_Start+0x82>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c8:	e013      	b.n	80027f2 <HAL_TIM_PWM_Start+0xaa>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d104      	bne.n	80027da <HAL_TIM_PWM_Start+0x92>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d8:	e00b      	b.n	80027f2 <HAL_TIM_PWM_Start+0xaa>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d104      	bne.n	80027ea <HAL_TIM_PWM_Start+0xa2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e8:	e003      	b.n	80027f2 <HAL_TIM_PWM_Start+0xaa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fcec 	bl	80031d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2d      	ldr	r2, [pc, #180]	@ (80028bc <HAL_TIM_PWM_Start+0x174>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_PWM_Start+0xcc>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2c      	ldr	r2, [pc, #176]	@ (80028c0 <HAL_TIM_PWM_Start+0x178>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_TIM_PWM_Start+0xd0>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_TIM_PWM_Start+0xd2>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a22      	ldr	r2, [pc, #136]	@ (80028bc <HAL_TIM_PWM_Start+0x174>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d022      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002840:	d01d      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <HAL_TIM_PWM_Start+0x17c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d018      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1d      	ldr	r2, [pc, #116]	@ (80028c8 <HAL_TIM_PWM_Start+0x180>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1c      	ldr	r2, [pc, #112]	@ (80028cc <HAL_TIM_PWM_Start+0x184>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00e      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a16      	ldr	r2, [pc, #88]	@ (80028c0 <HAL_TIM_PWM_Start+0x178>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a18      	ldr	r2, [pc, #96]	@ (80028d0 <HAL_TIM_PWM_Start+0x188>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d004      	beq.n	800287e <HAL_TIM_PWM_Start+0x136>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a16      	ldr	r2, [pc, #88]	@ (80028d4 <HAL_TIM_PWM_Start+0x18c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d111      	bne.n	80028a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d010      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	e007      	b.n	80028b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010400 	.word	0x40010400
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40014000 	.word	0x40014000
 80028d4:	40001800 	.word	0x40001800

080028d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0ae      	b.n	8002a54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	f200 809f 	bhi.w	8002a44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002906:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	08002941 	.word	0x08002941
 8002910:	08002a45 	.word	0x08002a45
 8002914:	08002a45 	.word	0x08002a45
 8002918:	08002a45 	.word	0x08002a45
 800291c:	08002981 	.word	0x08002981
 8002920:	08002a45 	.word	0x08002a45
 8002924:	08002a45 	.word	0x08002a45
 8002928:	08002a45 	.word	0x08002a45
 800292c:	080029c3 	.word	0x080029c3
 8002930:	08002a45 	.word	0x08002a45
 8002934:	08002a45 	.word	0x08002a45
 8002938:	08002a45 	.word	0x08002a45
 800293c:	08002a03 	.word	0x08002a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f9fc 	bl	8002d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0204 	bic.w	r2, r2, #4
 800296a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6999      	ldr	r1, [r3, #24]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	619a      	str	r2, [r3, #24]
      break;
 800297e:	e064      	b.n	8002a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fa4c 	bl	8002e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6999      	ldr	r1, [r3, #24]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	619a      	str	r2, [r3, #24]
      break;
 80029c0:	e043      	b.n	8002a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 faa1 	bl	8002f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0208 	orr.w	r2, r2, #8
 80029dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0204 	bic.w	r2, r2, #4
 80029ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69d9      	ldr	r1, [r3, #28]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	61da      	str	r2, [r3, #28]
      break;
 8002a00:	e023      	b.n	8002a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 faf5 	bl	8002ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69d9      	ldr	r1, [r3, #28]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	021a      	lsls	r2, r3, #8
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	61da      	str	r2, [r3, #28]
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	75fb      	strb	r3, [r7, #23]
      break;
 8002a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_TIM_ConfigClockSource+0x1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0b4      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x186>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ab0:	d03e      	beq.n	8002b30 <HAL_TIM_ConfigClockSource+0xd4>
 8002ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ab6:	f200 8087 	bhi.w	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002abe:	f000 8086 	beq.w	8002bce <HAL_TIM_ConfigClockSource+0x172>
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac6:	d87f      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b70      	cmp	r3, #112	@ 0x70
 8002aca:	d01a      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0xa6>
 8002acc:	2b70      	cmp	r3, #112	@ 0x70
 8002ace:	d87b      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b60      	cmp	r3, #96	@ 0x60
 8002ad2:	d050      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x11a>
 8002ad4:	2b60      	cmp	r3, #96	@ 0x60
 8002ad6:	d877      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b50      	cmp	r3, #80	@ 0x50
 8002ada:	d03c      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0xfa>
 8002adc:	2b50      	cmp	r3, #80	@ 0x50
 8002ade:	d873      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b40      	cmp	r3, #64	@ 0x40
 8002ae2:	d058      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x13a>
 8002ae4:	2b40      	cmp	r3, #64	@ 0x40
 8002ae6:	d86f      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b30      	cmp	r3, #48	@ 0x30
 8002aea:	d064      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002aec:	2b30      	cmp	r3, #48	@ 0x30
 8002aee:	d86b      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d060      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d867      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05c      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d05a      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b00:	e062      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b12:	f000 fb41 	bl	8003198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	609a      	str	r2, [r3, #8]
      break;
 8002b2e:	e04f      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b40:	f000 fb2a 	bl	8003198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b52:	609a      	str	r2, [r3, #8]
      break;
 8002b54:	e03c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 fa9e 	bl	80030a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2150      	movs	r1, #80	@ 0x50
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 faf7 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002b74:	e02c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b82:	461a      	mov	r2, r3
 8002b84:	f000 fabd 	bl	8003102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2160      	movs	r1, #96	@ 0x60
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fae7 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002b94:	e01c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f000 fa7e 	bl	80030a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2140      	movs	r1, #64	@ 0x40
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fad7 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002bb4:	e00c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f000 face 	bl	8003162 <TIM_ITRx_SetConfig>
      break;
 8002bc6:	e003      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	e000      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a46      	ldr	r2, [pc, #280]	@ (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0a:	d00f      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a43      	ldr	r2, [pc, #268]	@ (8002d1c <TIM_Base_SetConfig+0x130>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a42      	ldr	r2, [pc, #264]	@ (8002d20 <TIM_Base_SetConfig+0x134>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a41      	ldr	r2, [pc, #260]	@ (8002d24 <TIM_Base_SetConfig+0x138>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a40      	ldr	r2, [pc, #256]	@ (8002d28 <TIM_Base_SetConfig+0x13c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a35      	ldr	r2, [pc, #212]	@ (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4c:	d027      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <TIM_Base_SetConfig+0x130>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d023      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a31      	ldr	r2, [pc, #196]	@ (8002d20 <TIM_Base_SetConfig+0x134>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a30      	ldr	r2, [pc, #192]	@ (8002d24 <TIM_Base_SetConfig+0x138>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2f      	ldr	r2, [pc, #188]	@ (8002d28 <TIM_Base_SetConfig+0x13c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d017      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2e      	ldr	r2, [pc, #184]	@ (8002d2c <TIM_Base_SetConfig+0x140>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2d      	ldr	r2, [pc, #180]	@ (8002d30 <TIM_Base_SetConfig+0x144>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <TIM_Base_SetConfig+0x148>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2b      	ldr	r2, [pc, #172]	@ (8002d38 <TIM_Base_SetConfig+0x14c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a2a      	ldr	r2, [pc, #168]	@ (8002d3c <TIM_Base_SetConfig+0x150>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d003      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a29      	ldr	r2, [pc, #164]	@ (8002d40 <TIM_Base_SetConfig+0x154>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a10      	ldr	r2, [pc, #64]	@ (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0xf8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <TIM_Base_SetConfig+0x13c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f023 0201 	bic.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	611a      	str	r2, [r3, #16]
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800
 8002d24:	40000c00 	.word	0x40000c00
 8002d28:	40010400 	.word	0x40010400
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	40014400 	.word	0x40014400
 8002d34:	40014800 	.word	0x40014800
 8002d38:	40001800 	.word	0x40001800
 8002d3c:	40001c00 	.word	0x40001c00
 8002d40:	40002000 	.word	0x40002000

08002d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f023 0201 	bic.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 0302 	bic.w	r3, r3, #2
 8002d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a20      	ldr	r2, [pc, #128]	@ (8002e1c <TIM_OC1_SetConfig+0xd8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_OC1_SetConfig+0x64>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <TIM_OC1_SetConfig+0xdc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d10c      	bne.n	8002dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0308 	bic.w	r3, r3, #8
 8002dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a15      	ldr	r2, [pc, #84]	@ (8002e1c <TIM_OC1_SetConfig+0xd8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d003      	beq.n	8002dd2 <TIM_OC1_SetConfig+0x8e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a14      	ldr	r2, [pc, #80]	@ (8002e20 <TIM_OC1_SetConfig+0xdc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d111      	bne.n	8002df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	621a      	str	r2, [r3, #32]
}
 8002e10:	bf00      	nop
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40010400 	.word	0x40010400

08002e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f023 0210 	bic.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0320 	bic.w	r3, r3, #32
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a22      	ldr	r2, [pc, #136]	@ (8002f08 <TIM_OC2_SetConfig+0xe4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_OC2_SetConfig+0x68>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a21      	ldr	r2, [pc, #132]	@ (8002f0c <TIM_OC2_SetConfig+0xe8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10d      	bne.n	8002ea8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <TIM_OC2_SetConfig+0xe4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_OC2_SetConfig+0x94>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a16      	ldr	r2, [pc, #88]	@ (8002f0c <TIM_OC2_SetConfig+0xe8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d113      	bne.n	8002ee0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40010400 	.word	0x40010400

08002f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a21      	ldr	r2, [pc, #132]	@ (8002ff0 <TIM_OC3_SetConfig+0xe0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_OC3_SetConfig+0x66>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a20      	ldr	r2, [pc, #128]	@ (8002ff4 <TIM_OC3_SetConfig+0xe4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10d      	bne.n	8002f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <TIM_OC3_SetConfig+0xe0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <TIM_OC3_SetConfig+0x92>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <TIM_OC3_SetConfig+0xe4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d113      	bne.n	8002fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	621a      	str	r2, [r3, #32]
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40010400 	.word	0x40010400

08002ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800302e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	031b      	lsls	r3, r3, #12
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a12      	ldr	r2, [pc, #72]	@ (800309c <TIM_OC4_SetConfig+0xa4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d003      	beq.n	8003060 <TIM_OC4_SetConfig+0x68>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a11      	ldr	r2, [pc, #68]	@ (80030a0 <TIM_OC4_SetConfig+0xa8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d109      	bne.n	8003074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40010400 	.word	0x40010400

080030a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0201 	bic.w	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 030a 	bic.w	r3, r3, #10
 80030e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003102:	b480      	push	{r7}
 8003104:	b087      	sub	sp, #28
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f023 0210 	bic.w	r2, r3, #16
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800312c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	031b      	lsls	r3, r3, #12
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800313e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	f043 0307 	orr.w	r3, r3, #7
 8003184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	021a      	lsls	r2, r3, #8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4313      	orrs	r3, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2201      	movs	r2, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1a      	ldr	r2, [r3, #32]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	401a      	ands	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003238:	2302      	movs	r3, #2
 800323a:	e05a      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d01d      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	@ (800330c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	@ (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800

0800331c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003334:	2302      	movs	r3, #2
 8003336:	e03d      	b.n	80033b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e042      	b.n	8003458 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fdd8 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	@ 0x24
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fe55 	bl	80040b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b20      	cmp	r3, #32
 800347e:	d175      	bne.n	800356c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Transmit+0x2c>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e06e      	b.n	800356e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2221      	movs	r2, #33	@ 0x21
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349e:	f7fd ff65 	bl	800136c <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b8:	d108      	bne.n	80034cc <HAL_UART_Transmit+0x6c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e003      	b.n	80034d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034d4:	e02e      	b.n	8003534 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	@ 0x80
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fbb7 	bl	8003c54 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e03a      	b.n	800356e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800350c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3302      	adds	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e007      	b.n	8003526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	3301      	adds	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1cb      	bne.n	80034d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	2140      	movs	r1, #64	@ 0x40
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fb83 	bl	8003c54 <UART_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e006      	b.n	800356e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b08a      	sub	sp, #40	@ 0x28
 800357a:	af02      	add	r7, sp, #8
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 8081 	bne.w	800369a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Receive+0x2e>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e079      	b.n	800369c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2222      	movs	r2, #34	@ 0x22
 80035b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035bc:	f7fd fed6 	bl	800136c <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d6:	d108      	bne.n	80035ea <HAL_UART_Receive+0x74>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e003      	b.n	80035f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035f2:	e047      	b.n	8003684 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	2120      	movs	r1, #32
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fb28 	bl	8003c54 <UART_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e042      	b.n	800369c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10c      	bne.n	8003636 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	b29b      	uxth	r3, r3
 8003624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003628:	b29a      	uxth	r2, r3
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3302      	adds	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e01f      	b.n	8003676 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363e:	d007      	beq.n	8003650 <HAL_UART_Receive+0xda>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_UART_Receive+0xe8>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e008      	b.n	8003670 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800366a:	b2da      	uxtb	r2, r3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1b2      	bne.n	80035f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d112      	bne.n	80036e4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_Receive_IT+0x26>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00b      	b.n	80036e6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fb13 	bl	8003d06 <UART_Start_Receive_IT>
 80036e0:	4603      	mov	r3, r0
 80036e2:	e000      	b.n	80036e6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0ba      	sub	sp, #232	@ 0xe8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800372e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_UART_IRQHandler+0x66>
 8003742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fbf2 	bl	8003f38 <UART_Receive_IT>
      return;
 8003754:	e25b      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80de 	beq.w	800391c <HAL_UART_IRQHandler+0x22c>
 8003760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003770:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80d1 	beq.w	800391c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_UART_IRQHandler+0xae>
 8003786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_UART_IRQHandler+0xd2>
 80037aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_UART_IRQHandler+0xf6>
 80037ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d011      	beq.n	8003816 <HAL_UART_IRQHandler+0x126>
 80037f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d105      	bne.n	800380a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f043 0208 	orr.w	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 81f2 	beq.w	8003c04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_UART_IRQHandler+0x14e>
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fb7d 	bl	8003f38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b40      	cmp	r3, #64	@ 0x40
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_UART_IRQHandler+0x17a>
 8003862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d04f      	beq.n	800390a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa85 	bl	8003d7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d141      	bne.n	8003902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3314      	adds	r3, #20
 8003884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800389c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1d9      	bne.n	800387e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d013      	beq.n	80038fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ad0 <HAL_UART_IRQHandler+0x3e0>)
 80038d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd fed1 	bl	8001686 <HAL_DMA_Abort_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038f4:	4610      	mov	r0, r2
 80038f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e00e      	b.n	8003918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f994 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	e00a      	b.n	8003918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f990 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	e006      	b.n	8003918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f98c 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003916:	e175      	b.n	8003c04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	bf00      	nop
    return;
 800391a:	e173      	b.n	8003c04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	2b01      	cmp	r3, #1
 8003922:	f040 814f 	bne.w	8003bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8148 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8141 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003962:	2b40      	cmp	r3, #64	@ 0x40
 8003964:	f040 80b6 	bne.w	8003ad4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8145 	beq.w	8003c08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003986:	429a      	cmp	r2, r3
 8003988:	f080 813e 	bcs.w	8003c08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003992:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800399e:	f000 8088 	beq.w	8003ab2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1d9      	bne.n	80039a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3314      	adds	r3, #20
 80039f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3314      	adds	r3, #20
 8003a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e1      	bne.n	80039ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a82:	f023 0310 	bic.w	r3, r3, #16
 8003a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e3      	bne.n	8003a70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd fd7a 	bl	80015a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8b7 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ace:	e09b      	b.n	8003c08 <HAL_UART_IRQHandler+0x518>
 8003ad0:	08003e41 	.word	0x08003e41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 808e 	beq.w	8003c0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8089 	beq.w	8003c0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	623b      	str	r3, [r7, #32]
   return(result);
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b56:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e3      	bne.n	8003b32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0310 	bic.w	r3, r3, #16
 8003b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b9c:	61fa      	str	r2, [r7, #28]
 8003b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e3      	bne.n	8003b78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f83d 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc2:	e023      	b.n	8003c0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_UART_IRQHandler+0x4f4>
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f943 	bl	8003e68 <UART_Transmit_IT>
    return;
 8003be2:	e014      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_UART_IRQHandler+0x51e>
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f983 	bl	8003f08 <UART_EndTransmit_IT>
    return;
 8003c02:	e004      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
    return;
 8003c04:	bf00      	nop
 8003c06:	e002      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_IRQHandler+0x51e>
      return;
 8003c0c:	bf00      	nop
  }
}
 8003c0e:	37e8      	adds	r7, #232	@ 0xe8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c64:	e03b      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d037      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fd fb7d 	bl	800136c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e03a      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b80      	cmp	r3, #128	@ 0x80
 8003c9a:	d020      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	d01d      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d116      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f857 	bl	8003d7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2208      	movs	r2, #8
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00f      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d0b4      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2222      	movs	r2, #34	@ 0x22
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d4a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0220 	orr.w	r2, r2, #32
 8003d6a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b095      	sub	sp, #84	@ 0x54
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003da2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003da8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d119      	bne.n	8003e26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f023 0310 	bic.w	r3, r3, #16
 8003e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e12:	61ba      	str	r2, [r7, #24]
 8003e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e5      	bne.n	8003df2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e34:	bf00      	nop
 8003e36:	3754      	adds	r7, #84	@ 0x54
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff fee4 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b21      	cmp	r3, #33	@ 0x21
 8003e7a:	d13e      	bne.n	8003efa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e84:	d114      	bne.n	8003eb0 <UART_Transmit_IT+0x48>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d110      	bne.n	8003eb0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]
 8003eae:	e008      	b.n	8003ec2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	1c59      	adds	r1, r3, #1
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6211      	str	r1, [r2, #32]
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ee4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ef4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fe73 	bl	8003c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	@ 0x30
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b22      	cmp	r3, #34	@ 0x22
 8003f4a:	f040 80ae 	bne.w	80040aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f56:	d117      	bne.n	8003f88 <UART_Receive_IT+0x50>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d113      	bne.n	8003f88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	1c9a      	adds	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f86:	e026      	b.n	8003fd6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9a:	d007      	beq.n	8003fac <UART_Receive_IT+0x74>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <UART_Receive_IT+0x82>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d106      	bne.n	8003fba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e008      	b.n	8003fcc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d15d      	bne.n	80040a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0220 	bic.w	r2, r2, #32
 8003ff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	2b01      	cmp	r3, #1
 800402e:	d135      	bne.n	800409c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	613b      	str	r3, [r7, #16]
   return(result);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f023 0310 	bic.w	r3, r3, #16
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004056:	623a      	str	r2, [r7, #32]
 8004058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	69f9      	ldr	r1, [r7, #28]
 800405c:	6a3a      	ldr	r2, [r7, #32]
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	61bb      	str	r3, [r7, #24]
   return(result);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d10a      	bne.n	800408e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fdd1 	bl	8003c3c <HAL_UARTEx_RxEventCallback>
 800409a:	e002      	b.n	80040a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fc fd2f 	bl	8000b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e002      	b.n	80040ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3730      	adds	r7, #48	@ 0x30
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b8:	b0c0      	sub	sp, #256	@ 0x100
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	68d9      	ldr	r1, [r3, #12]
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	ea40 0301 	orr.w	r3, r0, r1
 80040dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800410c:	f021 010c 	bic.w	r1, r1, #12
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800411a:	430b      	orrs	r3, r1
 800411c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412e:	6999      	ldr	r1, [r3, #24]
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	ea40 0301 	orr.w	r3, r0, r1
 800413a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b8f      	ldr	r3, [pc, #572]	@ (8004380 <UART_SetConfig+0x2cc>)
 8004144:	429a      	cmp	r2, r3
 8004146:	d005      	beq.n	8004154 <UART_SetConfig+0xa0>
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b8d      	ldr	r3, [pc, #564]	@ (8004384 <UART_SetConfig+0x2d0>)
 8004150:	429a      	cmp	r2, r3
 8004152:	d104      	bne.n	800415e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7fd fd6e 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8004158:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800415c:	e003      	b.n	8004166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800415e:	f7fd fd55 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8004162:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004170:	f040 810c 	bne.w	800438c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800417e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004186:	4622      	mov	r2, r4
 8004188:	462b      	mov	r3, r5
 800418a:	1891      	adds	r1, r2, r2
 800418c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800418e:	415b      	adcs	r3, r3
 8004190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004196:	4621      	mov	r1, r4
 8004198:	eb12 0801 	adds.w	r8, r2, r1
 800419c:	4629      	mov	r1, r5
 800419e:	eb43 0901 	adc.w	r9, r3, r1
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b6:	4690      	mov	r8, r2
 80041b8:	4699      	mov	r9, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	eb18 0303 	adds.w	r3, r8, r3
 80041c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c4:	462b      	mov	r3, r5
 80041c6:	eb49 0303 	adc.w	r3, r9, r3
 80041ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041e2:	460b      	mov	r3, r1
 80041e4:	18db      	adds	r3, r3, r3
 80041e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e8:	4613      	mov	r3, r2
 80041ea:	eb42 0303 	adc.w	r3, r2, r3
 80041ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80041f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041f8:	f7fc f85a 	bl	80002b0 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4b61      	ldr	r3, [pc, #388]	@ (8004388 <UART_SetConfig+0x2d4>)
 8004202:	fba3 2302 	umull	r2, r3, r3, r2
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	011c      	lsls	r4, r3, #4
 800420a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420e:	2200      	movs	r2, #0
 8004210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004214:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	1891      	adds	r1, r2, r2
 8004222:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004224:	415b      	adcs	r3, r3
 8004226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800422c:	4641      	mov	r1, r8
 800422e:	eb12 0a01 	adds.w	sl, r2, r1
 8004232:	4649      	mov	r1, r9
 8004234:	eb43 0b01 	adc.w	fp, r3, r1
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800424c:	4692      	mov	sl, r2
 800424e:	469b      	mov	fp, r3
 8004250:	4643      	mov	r3, r8
 8004252:	eb1a 0303 	adds.w	r3, sl, r3
 8004256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800425a:	464b      	mov	r3, r9
 800425c:	eb4b 0303 	adc.w	r3, fp, r3
 8004260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004270:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004278:	460b      	mov	r3, r1
 800427a:	18db      	adds	r3, r3, r3
 800427c:	643b      	str	r3, [r7, #64]	@ 0x40
 800427e:	4613      	mov	r3, r2
 8004280:	eb42 0303 	adc.w	r3, r2, r3
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
 8004286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800428a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800428e:	f7fc f80f 	bl	80002b0 <__aeabi_uldivmod>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4611      	mov	r1, r2
 8004298:	4b3b      	ldr	r3, [pc, #236]	@ (8004388 <UART_SetConfig+0x2d4>)
 800429a:	fba3 2301 	umull	r2, r3, r3, r1
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2264      	movs	r2, #100	@ 0x64
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	1acb      	subs	r3, r1, r3
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042ae:	4b36      	ldr	r3, [pc, #216]	@ (8004388 <UART_SetConfig+0x2d4>)
 80042b0:	fba3 2302 	umull	r2, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042bc:	441c      	add	r4, r3
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042d8:	415b      	adcs	r3, r3
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042e0:	4641      	mov	r1, r8
 80042e2:	1851      	adds	r1, r2, r1
 80042e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042e6:	4649      	mov	r1, r9
 80042e8:	414b      	adcs	r3, r1
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042f8:	4659      	mov	r1, fp
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004302:	4651      	mov	r1, sl
 8004304:	00ca      	lsls	r2, r1, #3
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4603      	mov	r3, r0
 800430c:	4642      	mov	r2, r8
 800430e:	189b      	adds	r3, r3, r2
 8004310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800432c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004334:	460b      	mov	r3, r1
 8004336:	18db      	adds	r3, r3, r3
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433a:	4613      	mov	r3, r2
 800433c:	eb42 0303 	adc.w	r3, r2, r3
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800434a:	f7fb ffb1 	bl	80002b0 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <UART_SetConfig+0x2d4>)
 8004354:	fba3 1302 	umull	r1, r3, r3, r2
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2164      	movs	r1, #100	@ 0x64
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	3332      	adds	r3, #50	@ 0x32
 8004366:	4a08      	ldr	r2, [pc, #32]	@ (8004388 <UART_SetConfig+0x2d4>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f003 0207 	and.w	r2, r3, #7
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4422      	add	r2, r4
 800437a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800437c:	e106      	b.n	800458c <UART_SetConfig+0x4d8>
 800437e:	bf00      	nop
 8004380:	40011000 	.word	0x40011000
 8004384:	40011400 	.word	0x40011400
 8004388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004390:	2200      	movs	r2, #0
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004396:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800439a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800439e:	4642      	mov	r2, r8
 80043a0:	464b      	mov	r3, r9
 80043a2:	1891      	adds	r1, r2, r2
 80043a4:	6239      	str	r1, [r7, #32]
 80043a6:	415b      	adcs	r3, r3
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ae:	4641      	mov	r1, r8
 80043b0:	1854      	adds	r4, r2, r1
 80043b2:	4649      	mov	r1, r9
 80043b4:	eb43 0501 	adc.w	r5, r3, r1
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	00eb      	lsls	r3, r5, #3
 80043c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c6:	00e2      	lsls	r2, r4, #3
 80043c8:	4614      	mov	r4, r2
 80043ca:	461d      	mov	r5, r3
 80043cc:	4643      	mov	r3, r8
 80043ce:	18e3      	adds	r3, r4, r3
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043d4:	464b      	mov	r3, r9
 80043d6:	eb45 0303 	adc.w	r3, r5, r3
 80043da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043fa:	4629      	mov	r1, r5
 80043fc:	008b      	lsls	r3, r1, #2
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004404:	4621      	mov	r1, r4
 8004406:	008a      	lsls	r2, r1, #2
 8004408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800440c:	f7fb ff50 	bl	80002b0 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4b60      	ldr	r3, [pc, #384]	@ (8004598 <UART_SetConfig+0x4e4>)
 8004416:	fba3 2302 	umull	r2, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	011c      	lsls	r4, r3, #4
 800441e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800442c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004430:	4642      	mov	r2, r8
 8004432:	464b      	mov	r3, r9
 8004434:	1891      	adds	r1, r2, r2
 8004436:	61b9      	str	r1, [r7, #24]
 8004438:	415b      	adcs	r3, r3
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004440:	4641      	mov	r1, r8
 8004442:	1851      	adds	r1, r2, r1
 8004444:	6139      	str	r1, [r7, #16]
 8004446:	4649      	mov	r1, r9
 8004448:	414b      	adcs	r3, r1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004458:	4659      	mov	r1, fp
 800445a:	00cb      	lsls	r3, r1, #3
 800445c:	4651      	mov	r1, sl
 800445e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004462:	4651      	mov	r1, sl
 8004464:	00ca      	lsls	r2, r1, #3
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	4603      	mov	r3, r0
 800446c:	4642      	mov	r2, r8
 800446e:	189b      	adds	r3, r3, r2
 8004470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004474:	464b      	mov	r3, r9
 8004476:	460a      	mov	r2, r1
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800448a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004498:	4649      	mov	r1, r9
 800449a:	008b      	lsls	r3, r1, #2
 800449c:	4641      	mov	r1, r8
 800449e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a2:	4641      	mov	r1, r8
 80044a4:	008a      	lsls	r2, r1, #2
 80044a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044aa:	f7fb ff01 	bl	80002b0 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	4b38      	ldr	r3, [pc, #224]	@ (8004598 <UART_SetConfig+0x4e4>)
 80044b6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2264      	movs	r2, #100	@ 0x64
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	1acb      	subs	r3, r1, r3
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	3332      	adds	r3, #50	@ 0x32
 80044c8:	4a33      	ldr	r2, [pc, #204]	@ (8004598 <UART_SetConfig+0x4e4>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d4:	441c      	add	r4, r3
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80044de:	677a      	str	r2, [r7, #116]	@ 0x74
 80044e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	415b      	adcs	r3, r3
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f4:	4641      	mov	r1, r8
 80044f6:	1851      	adds	r1, r2, r1
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	4649      	mov	r1, r9
 80044fc:	414b      	adcs	r3, r1
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800450c:	4659      	mov	r1, fp
 800450e:	00cb      	lsls	r3, r1, #3
 8004510:	4651      	mov	r1, sl
 8004512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004516:	4651      	mov	r1, sl
 8004518:	00ca      	lsls	r2, r1, #3
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	4603      	mov	r3, r0
 8004520:	4642      	mov	r2, r8
 8004522:	189b      	adds	r3, r3, r2
 8004524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004526:	464b      	mov	r3, r9
 8004528:	460a      	mov	r2, r1
 800452a:	eb42 0303 	adc.w	r3, r2, r3
 800452e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	663b      	str	r3, [r7, #96]	@ 0x60
 800453a:	667a      	str	r2, [r7, #100]	@ 0x64
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004548:	4649      	mov	r1, r9
 800454a:	008b      	lsls	r3, r1, #2
 800454c:	4641      	mov	r1, r8
 800454e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004552:	4641      	mov	r1, r8
 8004554:	008a      	lsls	r2, r1, #2
 8004556:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800455a:	f7fb fea9 	bl	80002b0 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <UART_SetConfig+0x4e4>)
 8004564:	fba3 1302 	umull	r1, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	2164      	movs	r1, #100	@ 0x64
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	3332      	adds	r3, #50	@ 0x32
 8004576:	4a08      	ldr	r2, [pc, #32]	@ (8004598 <UART_SetConfig+0x4e4>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	f003 020f 	and.w	r2, r3, #15
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4422      	add	r2, r4
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	bf00      	nop
 800458e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004598:	51eb851f 	.word	0x51eb851f

0800459c <std>:
 800459c:	2300      	movs	r3, #0
 800459e:	b510      	push	{r4, lr}
 80045a0:	4604      	mov	r4, r0
 80045a2:	e9c0 3300 	strd	r3, r3, [r0]
 80045a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045aa:	6083      	str	r3, [r0, #8]
 80045ac:	8181      	strh	r1, [r0, #12]
 80045ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80045b0:	81c2      	strh	r2, [r0, #14]
 80045b2:	6183      	str	r3, [r0, #24]
 80045b4:	4619      	mov	r1, r3
 80045b6:	2208      	movs	r2, #8
 80045b8:	305c      	adds	r0, #92	@ 0x5c
 80045ba:	f000 f9f9 	bl	80049b0 <memset>
 80045be:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <std+0x58>)
 80045c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <std+0x5c>)
 80045c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045c6:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <std+0x60>)
 80045c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <std+0x64>)
 80045cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <std+0x68>)
 80045d0:	6224      	str	r4, [r4, #32]
 80045d2:	429c      	cmp	r4, r3
 80045d4:	d006      	beq.n	80045e4 <std+0x48>
 80045d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045da:	4294      	cmp	r4, r2
 80045dc:	d002      	beq.n	80045e4 <std+0x48>
 80045de:	33d0      	adds	r3, #208	@ 0xd0
 80045e0:	429c      	cmp	r4, r3
 80045e2:	d105      	bne.n	80045f0 <std+0x54>
 80045e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ec:	f000 ba58 	b.w	8004aa0 <__retarget_lock_init_recursive>
 80045f0:	bd10      	pop	{r4, pc}
 80045f2:	bf00      	nop
 80045f4:	08004801 	.word	0x08004801
 80045f8:	08004823 	.word	0x08004823
 80045fc:	0800485b 	.word	0x0800485b
 8004600:	0800487f 	.word	0x0800487f
 8004604:	200001d4 	.word	0x200001d4

08004608 <stdio_exit_handler>:
 8004608:	4a02      	ldr	r2, [pc, #8]	@ (8004614 <stdio_exit_handler+0xc>)
 800460a:	4903      	ldr	r1, [pc, #12]	@ (8004618 <stdio_exit_handler+0x10>)
 800460c:	4803      	ldr	r0, [pc, #12]	@ (800461c <stdio_exit_handler+0x14>)
 800460e:	f000 b869 	b.w	80046e4 <_fwalk_sglue>
 8004612:	bf00      	nop
 8004614:	20000014 	.word	0x20000014
 8004618:	08005341 	.word	0x08005341
 800461c:	20000024 	.word	0x20000024

08004620 <cleanup_stdio>:
 8004620:	6841      	ldr	r1, [r0, #4]
 8004622:	4b0c      	ldr	r3, [pc, #48]	@ (8004654 <cleanup_stdio+0x34>)
 8004624:	4299      	cmp	r1, r3
 8004626:	b510      	push	{r4, lr}
 8004628:	4604      	mov	r4, r0
 800462a:	d001      	beq.n	8004630 <cleanup_stdio+0x10>
 800462c:	f000 fe88 	bl	8005340 <_fflush_r>
 8004630:	68a1      	ldr	r1, [r4, #8]
 8004632:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <cleanup_stdio+0x38>)
 8004634:	4299      	cmp	r1, r3
 8004636:	d002      	beq.n	800463e <cleanup_stdio+0x1e>
 8004638:	4620      	mov	r0, r4
 800463a:	f000 fe81 	bl	8005340 <_fflush_r>
 800463e:	68e1      	ldr	r1, [r4, #12]
 8004640:	4b06      	ldr	r3, [pc, #24]	@ (800465c <cleanup_stdio+0x3c>)
 8004642:	4299      	cmp	r1, r3
 8004644:	d004      	beq.n	8004650 <cleanup_stdio+0x30>
 8004646:	4620      	mov	r0, r4
 8004648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800464c:	f000 be78 	b.w	8005340 <_fflush_r>
 8004650:	bd10      	pop	{r4, pc}
 8004652:	bf00      	nop
 8004654:	200001d4 	.word	0x200001d4
 8004658:	2000023c 	.word	0x2000023c
 800465c:	200002a4 	.word	0x200002a4

08004660 <global_stdio_init.part.0>:
 8004660:	b510      	push	{r4, lr}
 8004662:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <global_stdio_init.part.0+0x30>)
 8004664:	4c0b      	ldr	r4, [pc, #44]	@ (8004694 <global_stdio_init.part.0+0x34>)
 8004666:	4a0c      	ldr	r2, [pc, #48]	@ (8004698 <global_stdio_init.part.0+0x38>)
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	4620      	mov	r0, r4
 800466c:	2200      	movs	r2, #0
 800466e:	2104      	movs	r1, #4
 8004670:	f7ff ff94 	bl	800459c <std>
 8004674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004678:	2201      	movs	r2, #1
 800467a:	2109      	movs	r1, #9
 800467c:	f7ff ff8e 	bl	800459c <std>
 8004680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004684:	2202      	movs	r2, #2
 8004686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468a:	2112      	movs	r1, #18
 800468c:	f7ff bf86 	b.w	800459c <std>
 8004690:	2000030c 	.word	0x2000030c
 8004694:	200001d4 	.word	0x200001d4
 8004698:	08004609 	.word	0x08004609

0800469c <__sfp_lock_acquire>:
 800469c:	4801      	ldr	r0, [pc, #4]	@ (80046a4 <__sfp_lock_acquire+0x8>)
 800469e:	f000 ba00 	b.w	8004aa2 <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000315 	.word	0x20000315

080046a8 <__sfp_lock_release>:
 80046a8:	4801      	ldr	r0, [pc, #4]	@ (80046b0 <__sfp_lock_release+0x8>)
 80046aa:	f000 b9fb 	b.w	8004aa4 <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	20000315 	.word	0x20000315

080046b4 <__sinit>:
 80046b4:	b510      	push	{r4, lr}
 80046b6:	4604      	mov	r4, r0
 80046b8:	f7ff fff0 	bl	800469c <__sfp_lock_acquire>
 80046bc:	6a23      	ldr	r3, [r4, #32]
 80046be:	b11b      	cbz	r3, 80046c8 <__sinit+0x14>
 80046c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c4:	f7ff bff0 	b.w	80046a8 <__sfp_lock_release>
 80046c8:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <__sinit+0x28>)
 80046ca:	6223      	str	r3, [r4, #32]
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <__sinit+0x2c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f5      	bne.n	80046c0 <__sinit+0xc>
 80046d4:	f7ff ffc4 	bl	8004660 <global_stdio_init.part.0>
 80046d8:	e7f2      	b.n	80046c0 <__sinit+0xc>
 80046da:	bf00      	nop
 80046dc:	08004621 	.word	0x08004621
 80046e0:	2000030c 	.word	0x2000030c

080046e4 <_fwalk_sglue>:
 80046e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046e8:	4607      	mov	r7, r0
 80046ea:	4688      	mov	r8, r1
 80046ec:	4614      	mov	r4, r2
 80046ee:	2600      	movs	r6, #0
 80046f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046f4:	f1b9 0901 	subs.w	r9, r9, #1
 80046f8:	d505      	bpl.n	8004706 <_fwalk_sglue+0x22>
 80046fa:	6824      	ldr	r4, [r4, #0]
 80046fc:	2c00      	cmp	r4, #0
 80046fe:	d1f7      	bne.n	80046f0 <_fwalk_sglue+0xc>
 8004700:	4630      	mov	r0, r6
 8004702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d907      	bls.n	800471c <_fwalk_sglue+0x38>
 800470c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004710:	3301      	adds	r3, #1
 8004712:	d003      	beq.n	800471c <_fwalk_sglue+0x38>
 8004714:	4629      	mov	r1, r5
 8004716:	4638      	mov	r0, r7
 8004718:	47c0      	blx	r8
 800471a:	4306      	orrs	r6, r0
 800471c:	3568      	adds	r5, #104	@ 0x68
 800471e:	e7e9      	b.n	80046f4 <_fwalk_sglue+0x10>

08004720 <iprintf>:
 8004720:	b40f      	push	{r0, r1, r2, r3}
 8004722:	b507      	push	{r0, r1, r2, lr}
 8004724:	4906      	ldr	r1, [pc, #24]	@ (8004740 <iprintf+0x20>)
 8004726:	ab04      	add	r3, sp, #16
 8004728:	6808      	ldr	r0, [r1, #0]
 800472a:	f853 2b04 	ldr.w	r2, [r3], #4
 800472e:	6881      	ldr	r1, [r0, #8]
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	f000 fadb 	bl	8004cec <_vfiprintf_r>
 8004736:	b003      	add	sp, #12
 8004738:	f85d eb04 	ldr.w	lr, [sp], #4
 800473c:	b004      	add	sp, #16
 800473e:	4770      	bx	lr
 8004740:	20000020 	.word	0x20000020

08004744 <_puts_r>:
 8004744:	6a03      	ldr	r3, [r0, #32]
 8004746:	b570      	push	{r4, r5, r6, lr}
 8004748:	6884      	ldr	r4, [r0, #8]
 800474a:	4605      	mov	r5, r0
 800474c:	460e      	mov	r6, r1
 800474e:	b90b      	cbnz	r3, 8004754 <_puts_r+0x10>
 8004750:	f7ff ffb0 	bl	80046b4 <__sinit>
 8004754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004756:	07db      	lsls	r3, r3, #31
 8004758:	d405      	bmi.n	8004766 <_puts_r+0x22>
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	0598      	lsls	r0, r3, #22
 800475e:	d402      	bmi.n	8004766 <_puts_r+0x22>
 8004760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004762:	f000 f99e 	bl	8004aa2 <__retarget_lock_acquire_recursive>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	0719      	lsls	r1, r3, #28
 800476a:	d502      	bpl.n	8004772 <_puts_r+0x2e>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d135      	bne.n	80047de <_puts_r+0x9a>
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f8c5 	bl	8004904 <__swsetup_r>
 800477a:	b380      	cbz	r0, 80047de <_puts_r+0x9a>
 800477c:	f04f 35ff 	mov.w	r5, #4294967295
 8004780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004782:	07da      	lsls	r2, r3, #31
 8004784:	d405      	bmi.n	8004792 <_puts_r+0x4e>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	059b      	lsls	r3, r3, #22
 800478a:	d402      	bmi.n	8004792 <_puts_r+0x4e>
 800478c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800478e:	f000 f989 	bl	8004aa4 <__retarget_lock_release_recursive>
 8004792:	4628      	mov	r0, r5
 8004794:	bd70      	pop	{r4, r5, r6, pc}
 8004796:	2b00      	cmp	r3, #0
 8004798:	da04      	bge.n	80047a4 <_puts_r+0x60>
 800479a:	69a2      	ldr	r2, [r4, #24]
 800479c:	429a      	cmp	r2, r3
 800479e:	dc17      	bgt.n	80047d0 <_puts_r+0x8c>
 80047a0:	290a      	cmp	r1, #10
 80047a2:	d015      	beq.n	80047d0 <_puts_r+0x8c>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	7019      	strb	r1, [r3, #0]
 80047ac:	68a3      	ldr	r3, [r4, #8]
 80047ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047b2:	3b01      	subs	r3, #1
 80047b4:	60a3      	str	r3, [r4, #8]
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d1ed      	bne.n	8004796 <_puts_r+0x52>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da11      	bge.n	80047e2 <_puts_r+0x9e>
 80047be:	4622      	mov	r2, r4
 80047c0:	210a      	movs	r1, #10
 80047c2:	4628      	mov	r0, r5
 80047c4:	f000 f85f 	bl	8004886 <__swbuf_r>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d0d7      	beq.n	800477c <_puts_r+0x38>
 80047cc:	250a      	movs	r5, #10
 80047ce:	e7d7      	b.n	8004780 <_puts_r+0x3c>
 80047d0:	4622      	mov	r2, r4
 80047d2:	4628      	mov	r0, r5
 80047d4:	f000 f857 	bl	8004886 <__swbuf_r>
 80047d8:	3001      	adds	r0, #1
 80047da:	d1e7      	bne.n	80047ac <_puts_r+0x68>
 80047dc:	e7ce      	b.n	800477c <_puts_r+0x38>
 80047de:	3e01      	subs	r6, #1
 80047e0:	e7e4      	b.n	80047ac <_puts_r+0x68>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	6022      	str	r2, [r4, #0]
 80047e8:	220a      	movs	r2, #10
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e7ee      	b.n	80047cc <_puts_r+0x88>
	...

080047f0 <puts>:
 80047f0:	4b02      	ldr	r3, [pc, #8]	@ (80047fc <puts+0xc>)
 80047f2:	4601      	mov	r1, r0
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	f7ff bfa5 	b.w	8004744 <_puts_r>
 80047fa:	bf00      	nop
 80047fc:	20000020 	.word	0x20000020

08004800 <__sread>:
 8004800:	b510      	push	{r4, lr}
 8004802:	460c      	mov	r4, r1
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	f000 f8fc 	bl	8004a04 <_read_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	bfab      	itete	ge
 8004810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004812:	89a3      	ldrhlt	r3, [r4, #12]
 8004814:	181b      	addge	r3, r3, r0
 8004816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800481a:	bfac      	ite	ge
 800481c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800481e:	81a3      	strhlt	r3, [r4, #12]
 8004820:	bd10      	pop	{r4, pc}

08004822 <__swrite>:
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	461f      	mov	r7, r3
 8004828:	898b      	ldrh	r3, [r1, #12]
 800482a:	05db      	lsls	r3, r3, #23
 800482c:	4605      	mov	r5, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4616      	mov	r6, r2
 8004832:	d505      	bpl.n	8004840 <__swrite+0x1e>
 8004834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004838:	2302      	movs	r3, #2
 800483a:	2200      	movs	r2, #0
 800483c:	f000 f8d0 	bl	80049e0 <_lseek_r>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800484a:	81a3      	strh	r3, [r4, #12]
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	4628      	mov	r0, r5
 8004852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	f000 b8e7 	b.w	8004a28 <_write_r>

0800485a <__sseek>:
 800485a:	b510      	push	{r4, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 f8bd 	bl	80049e0 <_lseek_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	bf15      	itete	ne
 800486c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800486e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004876:	81a3      	strheq	r3, [r4, #12]
 8004878:	bf18      	it	ne
 800487a:	81a3      	strhne	r3, [r4, #12]
 800487c:	bd10      	pop	{r4, pc}

0800487e <__sclose>:
 800487e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004882:	f000 b89d 	b.w	80049c0 <_close_r>

08004886 <__swbuf_r>:
 8004886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004888:	460e      	mov	r6, r1
 800488a:	4614      	mov	r4, r2
 800488c:	4605      	mov	r5, r0
 800488e:	b118      	cbz	r0, 8004898 <__swbuf_r+0x12>
 8004890:	6a03      	ldr	r3, [r0, #32]
 8004892:	b90b      	cbnz	r3, 8004898 <__swbuf_r+0x12>
 8004894:	f7ff ff0e 	bl	80046b4 <__sinit>
 8004898:	69a3      	ldr	r3, [r4, #24]
 800489a:	60a3      	str	r3, [r4, #8]
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	071a      	lsls	r2, r3, #28
 80048a0:	d501      	bpl.n	80048a6 <__swbuf_r+0x20>
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	b943      	cbnz	r3, 80048b8 <__swbuf_r+0x32>
 80048a6:	4621      	mov	r1, r4
 80048a8:	4628      	mov	r0, r5
 80048aa:	f000 f82b 	bl	8004904 <__swsetup_r>
 80048ae:	b118      	cbz	r0, 80048b8 <__swbuf_r+0x32>
 80048b0:	f04f 37ff 	mov.w	r7, #4294967295
 80048b4:	4638      	mov	r0, r7
 80048b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	6922      	ldr	r2, [r4, #16]
 80048bc:	1a98      	subs	r0, r3, r2
 80048be:	6963      	ldr	r3, [r4, #20]
 80048c0:	b2f6      	uxtb	r6, r6
 80048c2:	4283      	cmp	r3, r0
 80048c4:	4637      	mov	r7, r6
 80048c6:	dc05      	bgt.n	80048d4 <__swbuf_r+0x4e>
 80048c8:	4621      	mov	r1, r4
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 fd38 	bl	8005340 <_fflush_r>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d1ed      	bne.n	80048b0 <__swbuf_r+0x2a>
 80048d4:	68a3      	ldr	r3, [r4, #8]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	60a3      	str	r3, [r4, #8]
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	6022      	str	r2, [r4, #0]
 80048e0:	701e      	strb	r6, [r3, #0]
 80048e2:	6962      	ldr	r2, [r4, #20]
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d004      	beq.n	80048f4 <__swbuf_r+0x6e>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	07db      	lsls	r3, r3, #31
 80048ee:	d5e1      	bpl.n	80048b4 <__swbuf_r+0x2e>
 80048f0:	2e0a      	cmp	r6, #10
 80048f2:	d1df      	bne.n	80048b4 <__swbuf_r+0x2e>
 80048f4:	4621      	mov	r1, r4
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 fd22 	bl	8005340 <_fflush_r>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d0d9      	beq.n	80048b4 <__swbuf_r+0x2e>
 8004900:	e7d6      	b.n	80048b0 <__swbuf_r+0x2a>
	...

08004904 <__swsetup_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4b29      	ldr	r3, [pc, #164]	@ (80049ac <__swsetup_r+0xa8>)
 8004908:	4605      	mov	r5, r0
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	460c      	mov	r4, r1
 800490e:	b118      	cbz	r0, 8004918 <__swsetup_r+0x14>
 8004910:	6a03      	ldr	r3, [r0, #32]
 8004912:	b90b      	cbnz	r3, 8004918 <__swsetup_r+0x14>
 8004914:	f7ff fece 	bl	80046b4 <__sinit>
 8004918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800491c:	0719      	lsls	r1, r3, #28
 800491e:	d422      	bmi.n	8004966 <__swsetup_r+0x62>
 8004920:	06da      	lsls	r2, r3, #27
 8004922:	d407      	bmi.n	8004934 <__swsetup_r+0x30>
 8004924:	2209      	movs	r2, #9
 8004926:	602a      	str	r2, [r5, #0]
 8004928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	f04f 30ff 	mov.w	r0, #4294967295
 8004932:	e033      	b.n	800499c <__swsetup_r+0x98>
 8004934:	0758      	lsls	r0, r3, #29
 8004936:	d512      	bpl.n	800495e <__swsetup_r+0x5a>
 8004938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800493a:	b141      	cbz	r1, 800494e <__swsetup_r+0x4a>
 800493c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004940:	4299      	cmp	r1, r3
 8004942:	d002      	beq.n	800494a <__swsetup_r+0x46>
 8004944:	4628      	mov	r0, r5
 8004946:	f000 f8af 	bl	8004aa8 <_free_r>
 800494a:	2300      	movs	r3, #0
 800494c:	6363      	str	r3, [r4, #52]	@ 0x34
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	2300      	movs	r3, #0
 8004958:	6063      	str	r3, [r4, #4]
 800495a:	6923      	ldr	r3, [r4, #16]
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	89a3      	ldrh	r3, [r4, #12]
 8004960:	f043 0308 	orr.w	r3, r3, #8
 8004964:	81a3      	strh	r3, [r4, #12]
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	b94b      	cbnz	r3, 800497e <__swsetup_r+0x7a>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004974:	d003      	beq.n	800497e <__swsetup_r+0x7a>
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 fd2f 	bl	80053dc <__smakebuf_r>
 800497e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004982:	f013 0201 	ands.w	r2, r3, #1
 8004986:	d00a      	beq.n	800499e <__swsetup_r+0x9a>
 8004988:	2200      	movs	r2, #0
 800498a:	60a2      	str	r2, [r4, #8]
 800498c:	6962      	ldr	r2, [r4, #20]
 800498e:	4252      	negs	r2, r2
 8004990:	61a2      	str	r2, [r4, #24]
 8004992:	6922      	ldr	r2, [r4, #16]
 8004994:	b942      	cbnz	r2, 80049a8 <__swsetup_r+0xa4>
 8004996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800499a:	d1c5      	bne.n	8004928 <__swsetup_r+0x24>
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	0799      	lsls	r1, r3, #30
 80049a0:	bf58      	it	pl
 80049a2:	6962      	ldrpl	r2, [r4, #20]
 80049a4:	60a2      	str	r2, [r4, #8]
 80049a6:	e7f4      	b.n	8004992 <__swsetup_r+0x8e>
 80049a8:	2000      	movs	r0, #0
 80049aa:	e7f7      	b.n	800499c <__swsetup_r+0x98>
 80049ac:	20000020 	.word	0x20000020

080049b0 <memset>:
 80049b0:	4402      	add	r2, r0
 80049b2:	4603      	mov	r3, r0
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d100      	bne.n	80049ba <memset+0xa>
 80049b8:	4770      	bx	lr
 80049ba:	f803 1b01 	strb.w	r1, [r3], #1
 80049be:	e7f9      	b.n	80049b4 <memset+0x4>

080049c0 <_close_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d06      	ldr	r5, [pc, #24]	@ (80049dc <_close_r+0x1c>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fc fbc1 	bl	8001152 <_close>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_close_r+0x1a>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_close_r+0x1a>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	20000310 	.word	0x20000310

080049e0 <_lseek_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	@ (8004a00 <_lseek_r+0x20>)
 80049e4:	4604      	mov	r4, r0
 80049e6:	4608      	mov	r0, r1
 80049e8:	4611      	mov	r1, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f7fc fbd6 	bl	80011a0 <_lseek>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_lseek_r+0x1e>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_lseek_r+0x1e>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20000310 	.word	0x20000310

08004a04 <_read_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d07      	ldr	r5, [pc, #28]	@ (8004a24 <_read_r+0x20>)
 8004a08:	4604      	mov	r4, r0
 8004a0a:	4608      	mov	r0, r1
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	602a      	str	r2, [r5, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f7fc fb80 	bl	8001118 <_read>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_read_r+0x1e>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_read_r+0x1e>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	20000310 	.word	0x20000310

08004a28 <_write_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4d07      	ldr	r5, [pc, #28]	@ (8004a48 <_write_r+0x20>)
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	4608      	mov	r0, r1
 8004a30:	4611      	mov	r1, r2
 8004a32:	2200      	movs	r2, #0
 8004a34:	602a      	str	r2, [r5, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f7fc fa10 	bl	8000e5c <_write>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_write_r+0x1e>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_write_r+0x1e>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20000310 	.word	0x20000310

08004a4c <__errno>:
 8004a4c:	4b01      	ldr	r3, [pc, #4]	@ (8004a54 <__errno+0x8>)
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000020 	.word	0x20000020

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a90 <__libc_init_array+0x38>)
 8004a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a94 <__libc_init_array+0x3c>)
 8004a5e:	1b64      	subs	r4, r4, r5
 8004a60:	10a4      	asrs	r4, r4, #2
 8004a62:	2600      	movs	r6, #0
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	4d0b      	ldr	r5, [pc, #44]	@ (8004a98 <__libc_init_array+0x40>)
 8004a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a9c <__libc_init_array+0x44>)
 8004a6c:	f000 fd24 	bl	80054b8 <_init>
 8004a70:	1b64      	subs	r4, r4, r5
 8004a72:	10a4      	asrs	r4, r4, #2
 8004a74:	2600      	movs	r6, #0
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08005590 	.word	0x08005590
 8004a94:	08005590 	.word	0x08005590
 8004a98:	08005590 	.word	0x08005590
 8004a9c:	08005594 	.word	0x08005594

08004aa0 <__retarget_lock_init_recursive>:
 8004aa0:	4770      	bx	lr

08004aa2 <__retarget_lock_acquire_recursive>:
 8004aa2:	4770      	bx	lr

08004aa4 <__retarget_lock_release_recursive>:
 8004aa4:	4770      	bx	lr
	...

08004aa8 <_free_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4605      	mov	r5, r0
 8004aac:	2900      	cmp	r1, #0
 8004aae:	d041      	beq.n	8004b34 <_free_r+0x8c>
 8004ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab4:	1f0c      	subs	r4, r1, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bfb8      	it	lt
 8004aba:	18e4      	addlt	r4, r4, r3
 8004abc:	f000 f8e0 	bl	8004c80 <__malloc_lock>
 8004ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b38 <_free_r+0x90>)
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	b933      	cbnz	r3, 8004ad4 <_free_r+0x2c>
 8004ac6:	6063      	str	r3, [r4, #4]
 8004ac8:	6014      	str	r4, [r2, #0]
 8004aca:	4628      	mov	r0, r5
 8004acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad0:	f000 b8dc 	b.w	8004c8c <__malloc_unlock>
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d908      	bls.n	8004aea <_free_r+0x42>
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	1821      	adds	r1, r4, r0
 8004adc:	428b      	cmp	r3, r1
 8004ade:	bf01      	itttt	eq
 8004ae0:	6819      	ldreq	r1, [r3, #0]
 8004ae2:	685b      	ldreq	r3, [r3, #4]
 8004ae4:	1809      	addeq	r1, r1, r0
 8004ae6:	6021      	streq	r1, [r4, #0]
 8004ae8:	e7ed      	b.n	8004ac6 <_free_r+0x1e>
 8004aea:	461a      	mov	r2, r3
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	b10b      	cbz	r3, 8004af4 <_free_r+0x4c>
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d9fa      	bls.n	8004aea <_free_r+0x42>
 8004af4:	6811      	ldr	r1, [r2, #0]
 8004af6:	1850      	adds	r0, r2, r1
 8004af8:	42a0      	cmp	r0, r4
 8004afa:	d10b      	bne.n	8004b14 <_free_r+0x6c>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	4401      	add	r1, r0
 8004b00:	1850      	adds	r0, r2, r1
 8004b02:	4283      	cmp	r3, r0
 8004b04:	6011      	str	r1, [r2, #0]
 8004b06:	d1e0      	bne.n	8004aca <_free_r+0x22>
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	6053      	str	r3, [r2, #4]
 8004b0e:	4408      	add	r0, r1
 8004b10:	6010      	str	r0, [r2, #0]
 8004b12:	e7da      	b.n	8004aca <_free_r+0x22>
 8004b14:	d902      	bls.n	8004b1c <_free_r+0x74>
 8004b16:	230c      	movs	r3, #12
 8004b18:	602b      	str	r3, [r5, #0]
 8004b1a:	e7d6      	b.n	8004aca <_free_r+0x22>
 8004b1c:	6820      	ldr	r0, [r4, #0]
 8004b1e:	1821      	adds	r1, r4, r0
 8004b20:	428b      	cmp	r3, r1
 8004b22:	bf04      	itt	eq
 8004b24:	6819      	ldreq	r1, [r3, #0]
 8004b26:	685b      	ldreq	r3, [r3, #4]
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	bf04      	itt	eq
 8004b2c:	1809      	addeq	r1, r1, r0
 8004b2e:	6021      	streq	r1, [r4, #0]
 8004b30:	6054      	str	r4, [r2, #4]
 8004b32:	e7ca      	b.n	8004aca <_free_r+0x22>
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
 8004b36:	bf00      	nop
 8004b38:	2000031c 	.word	0x2000031c

08004b3c <sbrk_aligned>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8004b7c <sbrk_aligned+0x40>)
 8004b40:	460c      	mov	r4, r1
 8004b42:	6831      	ldr	r1, [r6, #0]
 8004b44:	4605      	mov	r5, r0
 8004b46:	b911      	cbnz	r1, 8004b4e <sbrk_aligned+0x12>
 8004b48:	f000 fca6 	bl	8005498 <_sbrk_r>
 8004b4c:	6030      	str	r0, [r6, #0]
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 fca1 	bl	8005498 <_sbrk_r>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	d103      	bne.n	8004b62 <sbrk_aligned+0x26>
 8004b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b5e:	4620      	mov	r0, r4
 8004b60:	bd70      	pop	{r4, r5, r6, pc}
 8004b62:	1cc4      	adds	r4, r0, #3
 8004b64:	f024 0403 	bic.w	r4, r4, #3
 8004b68:	42a0      	cmp	r0, r4
 8004b6a:	d0f8      	beq.n	8004b5e <sbrk_aligned+0x22>
 8004b6c:	1a21      	subs	r1, r4, r0
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 fc92 	bl	8005498 <_sbrk_r>
 8004b74:	3001      	adds	r0, #1
 8004b76:	d1f2      	bne.n	8004b5e <sbrk_aligned+0x22>
 8004b78:	e7ef      	b.n	8004b5a <sbrk_aligned+0x1e>
 8004b7a:	bf00      	nop
 8004b7c:	20000318 	.word	0x20000318

08004b80 <_malloc_r>:
 8004b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b84:	1ccd      	adds	r5, r1, #3
 8004b86:	f025 0503 	bic.w	r5, r5, #3
 8004b8a:	3508      	adds	r5, #8
 8004b8c:	2d0c      	cmp	r5, #12
 8004b8e:	bf38      	it	cc
 8004b90:	250c      	movcc	r5, #12
 8004b92:	2d00      	cmp	r5, #0
 8004b94:	4606      	mov	r6, r0
 8004b96:	db01      	blt.n	8004b9c <_malloc_r+0x1c>
 8004b98:	42a9      	cmp	r1, r5
 8004b9a:	d904      	bls.n	8004ba6 <_malloc_r+0x26>
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	6033      	str	r3, [r6, #0]
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c7c <_malloc_r+0xfc>
 8004baa:	f000 f869 	bl	8004c80 <__malloc_lock>
 8004bae:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	bb44      	cbnz	r4, 8004c08 <_malloc_r+0x88>
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f7ff ffbf 	bl	8004b3c <sbrk_aligned>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	d158      	bne.n	8004c76 <_malloc_r+0xf6>
 8004bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8004bc8:	4627      	mov	r7, r4
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	d143      	bne.n	8004c56 <_malloc_r+0xd6>
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	d04b      	beq.n	8004c6a <_malloc_r+0xea>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	eb04 0903 	add.w	r9, r4, r3
 8004bdc:	f000 fc5c 	bl	8005498 <_sbrk_r>
 8004be0:	4581      	cmp	r9, r0
 8004be2:	d142      	bne.n	8004c6a <_malloc_r+0xea>
 8004be4:	6821      	ldr	r1, [r4, #0]
 8004be6:	1a6d      	subs	r5, r5, r1
 8004be8:	4629      	mov	r1, r5
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff ffa6 	bl	8004b3c <sbrk_aligned>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d03a      	beq.n	8004c6a <_malloc_r+0xea>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	442b      	add	r3, r5
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	bb62      	cbnz	r2, 8004c5c <_malloc_r+0xdc>
 8004c02:	f8c8 7000 	str.w	r7, [r8]
 8004c06:	e00f      	b.n	8004c28 <_malloc_r+0xa8>
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	1b52      	subs	r2, r2, r5
 8004c0c:	d420      	bmi.n	8004c50 <_malloc_r+0xd0>
 8004c0e:	2a0b      	cmp	r2, #11
 8004c10:	d917      	bls.n	8004c42 <_malloc_r+0xc2>
 8004c12:	1961      	adds	r1, r4, r5
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	6025      	str	r5, [r4, #0]
 8004c18:	bf18      	it	ne
 8004c1a:	6059      	strne	r1, [r3, #4]
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	bf08      	it	eq
 8004c20:	f8c8 1000 	streq.w	r1, [r8]
 8004c24:	5162      	str	r2, [r4, r5]
 8004c26:	604b      	str	r3, [r1, #4]
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f000 f82f 	bl	8004c8c <__malloc_unlock>
 8004c2e:	f104 000b 	add.w	r0, r4, #11
 8004c32:	1d23      	adds	r3, r4, #4
 8004c34:	f020 0007 	bic.w	r0, r0, #7
 8004c38:	1ac2      	subs	r2, r0, r3
 8004c3a:	bf1c      	itt	ne
 8004c3c:	1a1b      	subne	r3, r3, r0
 8004c3e:	50a3      	strne	r3, [r4, r2]
 8004c40:	e7af      	b.n	8004ba2 <_malloc_r+0x22>
 8004c42:	6862      	ldr	r2, [r4, #4]
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	bf0c      	ite	eq
 8004c48:	f8c8 2000 	streq.w	r2, [r8]
 8004c4c:	605a      	strne	r2, [r3, #4]
 8004c4e:	e7eb      	b.n	8004c28 <_malloc_r+0xa8>
 8004c50:	4623      	mov	r3, r4
 8004c52:	6864      	ldr	r4, [r4, #4]
 8004c54:	e7ae      	b.n	8004bb4 <_malloc_r+0x34>
 8004c56:	463c      	mov	r4, r7
 8004c58:	687f      	ldr	r7, [r7, #4]
 8004c5a:	e7b6      	b.n	8004bca <_malloc_r+0x4a>
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	d1fb      	bne.n	8004c5c <_malloc_r+0xdc>
 8004c64:	2300      	movs	r3, #0
 8004c66:	6053      	str	r3, [r2, #4]
 8004c68:	e7de      	b.n	8004c28 <_malloc_r+0xa8>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	6033      	str	r3, [r6, #0]
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f000 f80c 	bl	8004c8c <__malloc_unlock>
 8004c74:	e794      	b.n	8004ba0 <_malloc_r+0x20>
 8004c76:	6005      	str	r5, [r0, #0]
 8004c78:	e7d6      	b.n	8004c28 <_malloc_r+0xa8>
 8004c7a:	bf00      	nop
 8004c7c:	2000031c 	.word	0x2000031c

08004c80 <__malloc_lock>:
 8004c80:	4801      	ldr	r0, [pc, #4]	@ (8004c88 <__malloc_lock+0x8>)
 8004c82:	f7ff bf0e 	b.w	8004aa2 <__retarget_lock_acquire_recursive>
 8004c86:	bf00      	nop
 8004c88:	20000314 	.word	0x20000314

08004c8c <__malloc_unlock>:
 8004c8c:	4801      	ldr	r0, [pc, #4]	@ (8004c94 <__malloc_unlock+0x8>)
 8004c8e:	f7ff bf09 	b.w	8004aa4 <__retarget_lock_release_recursive>
 8004c92:	bf00      	nop
 8004c94:	20000314 	.word	0x20000314

08004c98 <__sfputc_r>:
 8004c98:	6893      	ldr	r3, [r2, #8]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	b410      	push	{r4}
 8004ca0:	6093      	str	r3, [r2, #8]
 8004ca2:	da08      	bge.n	8004cb6 <__sfputc_r+0x1e>
 8004ca4:	6994      	ldr	r4, [r2, #24]
 8004ca6:	42a3      	cmp	r3, r4
 8004ca8:	db01      	blt.n	8004cae <__sfputc_r+0x16>
 8004caa:	290a      	cmp	r1, #10
 8004cac:	d103      	bne.n	8004cb6 <__sfputc_r+0x1e>
 8004cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cb2:	f7ff bde8 	b.w	8004886 <__swbuf_r>
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	1c58      	adds	r0, r3, #1
 8004cba:	6010      	str	r0, [r2, #0]
 8004cbc:	7019      	strb	r1, [r3, #0]
 8004cbe:	4608      	mov	r0, r1
 8004cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <__sfputs_r>:
 8004cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc8:	4606      	mov	r6, r0
 8004cca:	460f      	mov	r7, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	18d5      	adds	r5, r2, r3
 8004cd0:	42ac      	cmp	r4, r5
 8004cd2:	d101      	bne.n	8004cd8 <__sfputs_r+0x12>
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e007      	b.n	8004ce8 <__sfputs_r+0x22>
 8004cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cdc:	463a      	mov	r2, r7
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff ffda 	bl	8004c98 <__sfputc_r>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d1f3      	bne.n	8004cd0 <__sfputs_r+0xa>
 8004ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cec <_vfiprintf_r>:
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	460d      	mov	r5, r1
 8004cf2:	b09d      	sub	sp, #116	@ 0x74
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	4698      	mov	r8, r3
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	b118      	cbz	r0, 8004d04 <_vfiprintf_r+0x18>
 8004cfc:	6a03      	ldr	r3, [r0, #32]
 8004cfe:	b90b      	cbnz	r3, 8004d04 <_vfiprintf_r+0x18>
 8004d00:	f7ff fcd8 	bl	80046b4 <__sinit>
 8004d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d06:	07d9      	lsls	r1, r3, #31
 8004d08:	d405      	bmi.n	8004d16 <_vfiprintf_r+0x2a>
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	059a      	lsls	r2, r3, #22
 8004d0e:	d402      	bmi.n	8004d16 <_vfiprintf_r+0x2a>
 8004d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d12:	f7ff fec6 	bl	8004aa2 <__retarget_lock_acquire_recursive>
 8004d16:	89ab      	ldrh	r3, [r5, #12]
 8004d18:	071b      	lsls	r3, r3, #28
 8004d1a:	d501      	bpl.n	8004d20 <_vfiprintf_r+0x34>
 8004d1c:	692b      	ldr	r3, [r5, #16]
 8004d1e:	b99b      	cbnz	r3, 8004d48 <_vfiprintf_r+0x5c>
 8004d20:	4629      	mov	r1, r5
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff fdee 	bl	8004904 <__swsetup_r>
 8004d28:	b170      	cbz	r0, 8004d48 <_vfiprintf_r+0x5c>
 8004d2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d2c:	07dc      	lsls	r4, r3, #31
 8004d2e:	d504      	bpl.n	8004d3a <_vfiprintf_r+0x4e>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	b01d      	add	sp, #116	@ 0x74
 8004d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3a:	89ab      	ldrh	r3, [r5, #12]
 8004d3c:	0598      	lsls	r0, r3, #22
 8004d3e:	d4f7      	bmi.n	8004d30 <_vfiprintf_r+0x44>
 8004d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d42:	f7ff feaf 	bl	8004aa4 <__retarget_lock_release_recursive>
 8004d46:	e7f3      	b.n	8004d30 <_vfiprintf_r+0x44>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d56:	2330      	movs	r3, #48	@ 0x30
 8004d58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f08 <_vfiprintf_r+0x21c>
 8004d5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d60:	f04f 0901 	mov.w	r9, #1
 8004d64:	4623      	mov	r3, r4
 8004d66:	469a      	mov	sl, r3
 8004d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d6c:	b10a      	cbz	r2, 8004d72 <_vfiprintf_r+0x86>
 8004d6e:	2a25      	cmp	r2, #37	@ 0x25
 8004d70:	d1f9      	bne.n	8004d66 <_vfiprintf_r+0x7a>
 8004d72:	ebba 0b04 	subs.w	fp, sl, r4
 8004d76:	d00b      	beq.n	8004d90 <_vfiprintf_r+0xa4>
 8004d78:	465b      	mov	r3, fp
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7ff ffa1 	bl	8004cc6 <__sfputs_r>
 8004d84:	3001      	adds	r0, #1
 8004d86:	f000 80a7 	beq.w	8004ed8 <_vfiprintf_r+0x1ec>
 8004d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d8c:	445a      	add	r2, fp
 8004d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d90:	f89a 3000 	ldrb.w	r3, [sl]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 809f 	beq.w	8004ed8 <_vfiprintf_r+0x1ec>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da4:	f10a 0a01 	add.w	sl, sl, #1
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	9307      	str	r3, [sp, #28]
 8004dac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004db0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004db2:	4654      	mov	r4, sl
 8004db4:	2205      	movs	r2, #5
 8004db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dba:	4853      	ldr	r0, [pc, #332]	@ (8004f08 <_vfiprintf_r+0x21c>)
 8004dbc:	f7fb fa28 	bl	8000210 <memchr>
 8004dc0:	9a04      	ldr	r2, [sp, #16]
 8004dc2:	b9d8      	cbnz	r0, 8004dfc <_vfiprintf_r+0x110>
 8004dc4:	06d1      	lsls	r1, r2, #27
 8004dc6:	bf44      	itt	mi
 8004dc8:	2320      	movmi	r3, #32
 8004dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dce:	0713      	lsls	r3, r2, #28
 8004dd0:	bf44      	itt	mi
 8004dd2:	232b      	movmi	r3, #43	@ 0x2b
 8004dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dde:	d015      	beq.n	8004e0c <_vfiprintf_r+0x120>
 8004de0:	9a07      	ldr	r2, [sp, #28]
 8004de2:	4654      	mov	r4, sl
 8004de4:	2000      	movs	r0, #0
 8004de6:	f04f 0c0a 	mov.w	ip, #10
 8004dea:	4621      	mov	r1, r4
 8004dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004df0:	3b30      	subs	r3, #48	@ 0x30
 8004df2:	2b09      	cmp	r3, #9
 8004df4:	d94b      	bls.n	8004e8e <_vfiprintf_r+0x1a2>
 8004df6:	b1b0      	cbz	r0, 8004e26 <_vfiprintf_r+0x13a>
 8004df8:	9207      	str	r2, [sp, #28]
 8004dfa:	e014      	b.n	8004e26 <_vfiprintf_r+0x13a>
 8004dfc:	eba0 0308 	sub.w	r3, r0, r8
 8004e00:	fa09 f303 	lsl.w	r3, r9, r3
 8004e04:	4313      	orrs	r3, r2
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	46a2      	mov	sl, r4
 8004e0a:	e7d2      	b.n	8004db2 <_vfiprintf_r+0xc6>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	1d19      	adds	r1, r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	9103      	str	r1, [sp, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bfbb      	ittet	lt
 8004e18:	425b      	neglt	r3, r3
 8004e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e1e:	9307      	strge	r3, [sp, #28]
 8004e20:	9307      	strlt	r3, [sp, #28]
 8004e22:	bfb8      	it	lt
 8004e24:	9204      	strlt	r2, [sp, #16]
 8004e26:	7823      	ldrb	r3, [r4, #0]
 8004e28:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e2a:	d10a      	bne.n	8004e42 <_vfiprintf_r+0x156>
 8004e2c:	7863      	ldrb	r3, [r4, #1]
 8004e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e30:	d132      	bne.n	8004e98 <_vfiprintf_r+0x1ac>
 8004e32:	9b03      	ldr	r3, [sp, #12]
 8004e34:	1d1a      	adds	r2, r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	9203      	str	r2, [sp, #12]
 8004e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e3e:	3402      	adds	r4, #2
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f18 <_vfiprintf_r+0x22c>
 8004e46:	7821      	ldrb	r1, [r4, #0]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	f7fb f9e0 	bl	8000210 <memchr>
 8004e50:	b138      	cbz	r0, 8004e62 <_vfiprintf_r+0x176>
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	eba0 000a 	sub.w	r0, r0, sl
 8004e58:	2240      	movs	r2, #64	@ 0x40
 8004e5a:	4082      	lsls	r2, r0
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	3401      	adds	r4, #1
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e66:	4829      	ldr	r0, [pc, #164]	@ (8004f0c <_vfiprintf_r+0x220>)
 8004e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e6c:	2206      	movs	r2, #6
 8004e6e:	f7fb f9cf 	bl	8000210 <memchr>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d03f      	beq.n	8004ef6 <_vfiprintf_r+0x20a>
 8004e76:	4b26      	ldr	r3, [pc, #152]	@ (8004f10 <_vfiprintf_r+0x224>)
 8004e78:	bb1b      	cbnz	r3, 8004ec2 <_vfiprintf_r+0x1d6>
 8004e7a:	9b03      	ldr	r3, [sp, #12]
 8004e7c:	3307      	adds	r3, #7
 8004e7e:	f023 0307 	bic.w	r3, r3, #7
 8004e82:	3308      	adds	r3, #8
 8004e84:	9303      	str	r3, [sp, #12]
 8004e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e88:	443b      	add	r3, r7
 8004e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8c:	e76a      	b.n	8004d64 <_vfiprintf_r+0x78>
 8004e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e92:	460c      	mov	r4, r1
 8004e94:	2001      	movs	r0, #1
 8004e96:	e7a8      	b.n	8004dea <_vfiprintf_r+0xfe>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	3401      	adds	r4, #1
 8004e9c:	9305      	str	r3, [sp, #20]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f04f 0c0a 	mov.w	ip, #10
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eaa:	3a30      	subs	r2, #48	@ 0x30
 8004eac:	2a09      	cmp	r2, #9
 8004eae:	d903      	bls.n	8004eb8 <_vfiprintf_r+0x1cc>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0c6      	beq.n	8004e42 <_vfiprintf_r+0x156>
 8004eb4:	9105      	str	r1, [sp, #20]
 8004eb6:	e7c4      	b.n	8004e42 <_vfiprintf_r+0x156>
 8004eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e7f0      	b.n	8004ea4 <_vfiprintf_r+0x1b8>
 8004ec2:	ab03      	add	r3, sp, #12
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	462a      	mov	r2, r5
 8004ec8:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <_vfiprintf_r+0x228>)
 8004eca:	a904      	add	r1, sp, #16
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f3af 8000 	nop.w
 8004ed2:	4607      	mov	r7, r0
 8004ed4:	1c78      	adds	r0, r7, #1
 8004ed6:	d1d6      	bne.n	8004e86 <_vfiprintf_r+0x19a>
 8004ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eda:	07d9      	lsls	r1, r3, #31
 8004edc:	d405      	bmi.n	8004eea <_vfiprintf_r+0x1fe>
 8004ede:	89ab      	ldrh	r3, [r5, #12]
 8004ee0:	059a      	lsls	r2, r3, #22
 8004ee2:	d402      	bmi.n	8004eea <_vfiprintf_r+0x1fe>
 8004ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ee6:	f7ff fddd 	bl	8004aa4 <__retarget_lock_release_recursive>
 8004eea:	89ab      	ldrh	r3, [r5, #12]
 8004eec:	065b      	lsls	r3, r3, #25
 8004eee:	f53f af1f 	bmi.w	8004d30 <_vfiprintf_r+0x44>
 8004ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ef4:	e71e      	b.n	8004d34 <_vfiprintf_r+0x48>
 8004ef6:	ab03      	add	r3, sp, #12
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	462a      	mov	r2, r5
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <_vfiprintf_r+0x228>)
 8004efe:	a904      	add	r1, sp, #16
 8004f00:	4630      	mov	r0, r6
 8004f02:	f000 f879 	bl	8004ff8 <_printf_i>
 8004f06:	e7e4      	b.n	8004ed2 <_vfiprintf_r+0x1e6>
 8004f08:	08005554 	.word	0x08005554
 8004f0c:	0800555e 	.word	0x0800555e
 8004f10:	00000000 	.word	0x00000000
 8004f14:	08004cc7 	.word	0x08004cc7
 8004f18:	0800555a 	.word	0x0800555a

08004f1c <_printf_common>:
 8004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	4616      	mov	r6, r2
 8004f22:	4698      	mov	r8, r3
 8004f24:	688a      	ldr	r2, [r1, #8]
 8004f26:	690b      	ldr	r3, [r1, #16]
 8004f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bfb8      	it	lt
 8004f30:	4613      	movlt	r3, r2
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f38:	4607      	mov	r7, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	b10a      	cbz	r2, 8004f42 <_printf_common+0x26>
 8004f3e:	3301      	adds	r3, #1
 8004f40:	6033      	str	r3, [r6, #0]
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	0699      	lsls	r1, r3, #26
 8004f46:	bf42      	ittt	mi
 8004f48:	6833      	ldrmi	r3, [r6, #0]
 8004f4a:	3302      	addmi	r3, #2
 8004f4c:	6033      	strmi	r3, [r6, #0]
 8004f4e:	6825      	ldr	r5, [r4, #0]
 8004f50:	f015 0506 	ands.w	r5, r5, #6
 8004f54:	d106      	bne.n	8004f64 <_printf_common+0x48>
 8004f56:	f104 0a19 	add.w	sl, r4, #25
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	6832      	ldr	r2, [r6, #0]
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dc26      	bgt.n	8004fb2 <_printf_common+0x96>
 8004f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	3b00      	subs	r3, #0
 8004f6c:	bf18      	it	ne
 8004f6e:	2301      	movne	r3, #1
 8004f70:	0692      	lsls	r2, r2, #26
 8004f72:	d42b      	bmi.n	8004fcc <_printf_common+0xb0>
 8004f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f78:	4641      	mov	r1, r8
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	47c8      	blx	r9
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d01e      	beq.n	8004fc0 <_printf_common+0xa4>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	6922      	ldr	r2, [r4, #16]
 8004f86:	f003 0306 	and.w	r3, r3, #6
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	bf02      	ittt	eq
 8004f8e:	68e5      	ldreq	r5, [r4, #12]
 8004f90:	6833      	ldreq	r3, [r6, #0]
 8004f92:	1aed      	subeq	r5, r5, r3
 8004f94:	68a3      	ldr	r3, [r4, #8]
 8004f96:	bf0c      	ite	eq
 8004f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f9c:	2500      	movne	r5, #0
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bfc4      	itt	gt
 8004fa2:	1a9b      	subgt	r3, r3, r2
 8004fa4:	18ed      	addgt	r5, r5, r3
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	341a      	adds	r4, #26
 8004faa:	42b5      	cmp	r5, r6
 8004fac:	d11a      	bne.n	8004fe4 <_printf_common+0xc8>
 8004fae:	2000      	movs	r0, #0
 8004fb0:	e008      	b.n	8004fc4 <_printf_common+0xa8>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4652      	mov	r2, sl
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	4638      	mov	r0, r7
 8004fba:	47c8      	blx	r9
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d103      	bne.n	8004fc8 <_printf_common+0xac>
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc8:	3501      	adds	r5, #1
 8004fca:	e7c6      	b.n	8004f5a <_printf_common+0x3e>
 8004fcc:	18e1      	adds	r1, r4, r3
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	2030      	movs	r0, #48	@ 0x30
 8004fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fd6:	4422      	add	r2, r4
 8004fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	e7c7      	b.n	8004f74 <_printf_common+0x58>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	4641      	mov	r1, r8
 8004fea:	4638      	mov	r0, r7
 8004fec:	47c8      	blx	r9
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d0e6      	beq.n	8004fc0 <_printf_common+0xa4>
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7d9      	b.n	8004faa <_printf_common+0x8e>
	...

08004ff8 <_printf_i>:
 8004ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	7e0f      	ldrb	r7, [r1, #24]
 8004ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005000:	2f78      	cmp	r7, #120	@ 0x78
 8005002:	4691      	mov	r9, r2
 8005004:	4680      	mov	r8, r0
 8005006:	460c      	mov	r4, r1
 8005008:	469a      	mov	sl, r3
 800500a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800500e:	d807      	bhi.n	8005020 <_printf_i+0x28>
 8005010:	2f62      	cmp	r7, #98	@ 0x62
 8005012:	d80a      	bhi.n	800502a <_printf_i+0x32>
 8005014:	2f00      	cmp	r7, #0
 8005016:	f000 80d2 	beq.w	80051be <_printf_i+0x1c6>
 800501a:	2f58      	cmp	r7, #88	@ 0x58
 800501c:	f000 80b9 	beq.w	8005192 <_printf_i+0x19a>
 8005020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005028:	e03a      	b.n	80050a0 <_printf_i+0xa8>
 800502a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800502e:	2b15      	cmp	r3, #21
 8005030:	d8f6      	bhi.n	8005020 <_printf_i+0x28>
 8005032:	a101      	add	r1, pc, #4	@ (adr r1, 8005038 <_printf_i+0x40>)
 8005034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005038:	08005091 	.word	0x08005091
 800503c:	080050a5 	.word	0x080050a5
 8005040:	08005021 	.word	0x08005021
 8005044:	08005021 	.word	0x08005021
 8005048:	08005021 	.word	0x08005021
 800504c:	08005021 	.word	0x08005021
 8005050:	080050a5 	.word	0x080050a5
 8005054:	08005021 	.word	0x08005021
 8005058:	08005021 	.word	0x08005021
 800505c:	08005021 	.word	0x08005021
 8005060:	08005021 	.word	0x08005021
 8005064:	080051a5 	.word	0x080051a5
 8005068:	080050cf 	.word	0x080050cf
 800506c:	0800515f 	.word	0x0800515f
 8005070:	08005021 	.word	0x08005021
 8005074:	08005021 	.word	0x08005021
 8005078:	080051c7 	.word	0x080051c7
 800507c:	08005021 	.word	0x08005021
 8005080:	080050cf 	.word	0x080050cf
 8005084:	08005021 	.word	0x08005021
 8005088:	08005021 	.word	0x08005021
 800508c:	08005167 	.word	0x08005167
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	1d1a      	adds	r2, r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6032      	str	r2, [r6, #0]
 8005098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800509c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050a0:	2301      	movs	r3, #1
 80050a2:	e09d      	b.n	80051e0 <_printf_i+0x1e8>
 80050a4:	6833      	ldr	r3, [r6, #0]
 80050a6:	6820      	ldr	r0, [r4, #0]
 80050a8:	1d19      	adds	r1, r3, #4
 80050aa:	6031      	str	r1, [r6, #0]
 80050ac:	0606      	lsls	r6, r0, #24
 80050ae:	d501      	bpl.n	80050b4 <_printf_i+0xbc>
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	e003      	b.n	80050bc <_printf_i+0xc4>
 80050b4:	0645      	lsls	r5, r0, #25
 80050b6:	d5fb      	bpl.n	80050b0 <_printf_i+0xb8>
 80050b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050bc:	2d00      	cmp	r5, #0
 80050be:	da03      	bge.n	80050c8 <_printf_i+0xd0>
 80050c0:	232d      	movs	r3, #45	@ 0x2d
 80050c2:	426d      	negs	r5, r5
 80050c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c8:	4859      	ldr	r0, [pc, #356]	@ (8005230 <_printf_i+0x238>)
 80050ca:	230a      	movs	r3, #10
 80050cc:	e011      	b.n	80050f2 <_printf_i+0xfa>
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	0608      	lsls	r0, r1, #24
 80050d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80050d8:	d402      	bmi.n	80050e0 <_printf_i+0xe8>
 80050da:	0649      	lsls	r1, r1, #25
 80050dc:	bf48      	it	mi
 80050de:	b2ad      	uxthmi	r5, r5
 80050e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80050e2:	4853      	ldr	r0, [pc, #332]	@ (8005230 <_printf_i+0x238>)
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	bf14      	ite	ne
 80050e8:	230a      	movne	r3, #10
 80050ea:	2308      	moveq	r3, #8
 80050ec:	2100      	movs	r1, #0
 80050ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050f2:	6866      	ldr	r6, [r4, #4]
 80050f4:	60a6      	str	r6, [r4, #8]
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	bfa2      	ittt	ge
 80050fa:	6821      	ldrge	r1, [r4, #0]
 80050fc:	f021 0104 	bicge.w	r1, r1, #4
 8005100:	6021      	strge	r1, [r4, #0]
 8005102:	b90d      	cbnz	r5, 8005108 <_printf_i+0x110>
 8005104:	2e00      	cmp	r6, #0
 8005106:	d04b      	beq.n	80051a0 <_printf_i+0x1a8>
 8005108:	4616      	mov	r6, r2
 800510a:	fbb5 f1f3 	udiv	r1, r5, r3
 800510e:	fb03 5711 	mls	r7, r3, r1, r5
 8005112:	5dc7      	ldrb	r7, [r0, r7]
 8005114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005118:	462f      	mov	r7, r5
 800511a:	42bb      	cmp	r3, r7
 800511c:	460d      	mov	r5, r1
 800511e:	d9f4      	bls.n	800510a <_printf_i+0x112>
 8005120:	2b08      	cmp	r3, #8
 8005122:	d10b      	bne.n	800513c <_printf_i+0x144>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	07df      	lsls	r7, r3, #31
 8005128:	d508      	bpl.n	800513c <_printf_i+0x144>
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	6861      	ldr	r1, [r4, #4]
 800512e:	4299      	cmp	r1, r3
 8005130:	bfde      	ittt	le
 8005132:	2330      	movle	r3, #48	@ 0x30
 8005134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800513c:	1b92      	subs	r2, r2, r6
 800513e:	6122      	str	r2, [r4, #16]
 8005140:	f8cd a000 	str.w	sl, [sp]
 8005144:	464b      	mov	r3, r9
 8005146:	aa03      	add	r2, sp, #12
 8005148:	4621      	mov	r1, r4
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff fee6 	bl	8004f1c <_printf_common>
 8005150:	3001      	adds	r0, #1
 8005152:	d14a      	bne.n	80051ea <_printf_i+0x1f2>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	b004      	add	sp, #16
 800515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f043 0320 	orr.w	r3, r3, #32
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	4833      	ldr	r0, [pc, #204]	@ (8005234 <_printf_i+0x23c>)
 8005168:	2778      	movs	r7, #120	@ 0x78
 800516a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	6831      	ldr	r1, [r6, #0]
 8005172:	061f      	lsls	r7, r3, #24
 8005174:	f851 5b04 	ldr.w	r5, [r1], #4
 8005178:	d402      	bmi.n	8005180 <_printf_i+0x188>
 800517a:	065f      	lsls	r7, r3, #25
 800517c:	bf48      	it	mi
 800517e:	b2ad      	uxthmi	r5, r5
 8005180:	6031      	str	r1, [r6, #0]
 8005182:	07d9      	lsls	r1, r3, #31
 8005184:	bf44      	itt	mi
 8005186:	f043 0320 	orrmi.w	r3, r3, #32
 800518a:	6023      	strmi	r3, [r4, #0]
 800518c:	b11d      	cbz	r5, 8005196 <_printf_i+0x19e>
 800518e:	2310      	movs	r3, #16
 8005190:	e7ac      	b.n	80050ec <_printf_i+0xf4>
 8005192:	4827      	ldr	r0, [pc, #156]	@ (8005230 <_printf_i+0x238>)
 8005194:	e7e9      	b.n	800516a <_printf_i+0x172>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	f023 0320 	bic.w	r3, r3, #32
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	e7f6      	b.n	800518e <_printf_i+0x196>
 80051a0:	4616      	mov	r6, r2
 80051a2:	e7bd      	b.n	8005120 <_printf_i+0x128>
 80051a4:	6833      	ldr	r3, [r6, #0]
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	6961      	ldr	r1, [r4, #20]
 80051aa:	1d18      	adds	r0, r3, #4
 80051ac:	6030      	str	r0, [r6, #0]
 80051ae:	062e      	lsls	r6, r5, #24
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	d501      	bpl.n	80051b8 <_printf_i+0x1c0>
 80051b4:	6019      	str	r1, [r3, #0]
 80051b6:	e002      	b.n	80051be <_printf_i+0x1c6>
 80051b8:	0668      	lsls	r0, r5, #25
 80051ba:	d5fb      	bpl.n	80051b4 <_printf_i+0x1bc>
 80051bc:	8019      	strh	r1, [r3, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	4616      	mov	r6, r2
 80051c4:	e7bc      	b.n	8005140 <_printf_i+0x148>
 80051c6:	6833      	ldr	r3, [r6, #0]
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	6032      	str	r2, [r6, #0]
 80051cc:	681e      	ldr	r6, [r3, #0]
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	2100      	movs	r1, #0
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7fb f81c 	bl	8000210 <memchr>
 80051d8:	b108      	cbz	r0, 80051de <_printf_i+0x1e6>
 80051da:	1b80      	subs	r0, r0, r6
 80051dc:	6060      	str	r0, [r4, #4]
 80051de:	6863      	ldr	r3, [r4, #4]
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	2300      	movs	r3, #0
 80051e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e8:	e7aa      	b.n	8005140 <_printf_i+0x148>
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	4632      	mov	r2, r6
 80051ee:	4649      	mov	r1, r9
 80051f0:	4640      	mov	r0, r8
 80051f2:	47d0      	blx	sl
 80051f4:	3001      	adds	r0, #1
 80051f6:	d0ad      	beq.n	8005154 <_printf_i+0x15c>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	079b      	lsls	r3, r3, #30
 80051fc:	d413      	bmi.n	8005226 <_printf_i+0x22e>
 80051fe:	68e0      	ldr	r0, [r4, #12]
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	4298      	cmp	r0, r3
 8005204:	bfb8      	it	lt
 8005206:	4618      	movlt	r0, r3
 8005208:	e7a6      	b.n	8005158 <_printf_i+0x160>
 800520a:	2301      	movs	r3, #1
 800520c:	4632      	mov	r2, r6
 800520e:	4649      	mov	r1, r9
 8005210:	4640      	mov	r0, r8
 8005212:	47d0      	blx	sl
 8005214:	3001      	adds	r0, #1
 8005216:	d09d      	beq.n	8005154 <_printf_i+0x15c>
 8005218:	3501      	adds	r5, #1
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	9903      	ldr	r1, [sp, #12]
 800521e:	1a5b      	subs	r3, r3, r1
 8005220:	42ab      	cmp	r3, r5
 8005222:	dcf2      	bgt.n	800520a <_printf_i+0x212>
 8005224:	e7eb      	b.n	80051fe <_printf_i+0x206>
 8005226:	2500      	movs	r5, #0
 8005228:	f104 0619 	add.w	r6, r4, #25
 800522c:	e7f5      	b.n	800521a <_printf_i+0x222>
 800522e:	bf00      	nop
 8005230:	08005565 	.word	0x08005565
 8005234:	08005576 	.word	0x08005576

08005238 <__sflush_r>:
 8005238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	0716      	lsls	r6, r2, #28
 8005242:	4605      	mov	r5, r0
 8005244:	460c      	mov	r4, r1
 8005246:	d454      	bmi.n	80052f2 <__sflush_r+0xba>
 8005248:	684b      	ldr	r3, [r1, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dc02      	bgt.n	8005254 <__sflush_r+0x1c>
 800524e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	dd48      	ble.n	80052e6 <__sflush_r+0xae>
 8005254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005256:	2e00      	cmp	r6, #0
 8005258:	d045      	beq.n	80052e6 <__sflush_r+0xae>
 800525a:	2300      	movs	r3, #0
 800525c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005260:	682f      	ldr	r7, [r5, #0]
 8005262:	6a21      	ldr	r1, [r4, #32]
 8005264:	602b      	str	r3, [r5, #0]
 8005266:	d030      	beq.n	80052ca <__sflush_r+0x92>
 8005268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	0759      	lsls	r1, r3, #29
 800526e:	d505      	bpl.n	800527c <__sflush_r+0x44>
 8005270:	6863      	ldr	r3, [r4, #4]
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005276:	b10b      	cbz	r3, 800527c <__sflush_r+0x44>
 8005278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005280:	6a21      	ldr	r1, [r4, #32]
 8005282:	4628      	mov	r0, r5
 8005284:	47b0      	blx	r6
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	d106      	bne.n	800529a <__sflush_r+0x62>
 800528c:	6829      	ldr	r1, [r5, #0]
 800528e:	291d      	cmp	r1, #29
 8005290:	d82b      	bhi.n	80052ea <__sflush_r+0xb2>
 8005292:	4a2a      	ldr	r2, [pc, #168]	@ (800533c <__sflush_r+0x104>)
 8005294:	410a      	asrs	r2, r1
 8005296:	07d6      	lsls	r6, r2, #31
 8005298:	d427      	bmi.n	80052ea <__sflush_r+0xb2>
 800529a:	2200      	movs	r2, #0
 800529c:	6062      	str	r2, [r4, #4]
 800529e:	04d9      	lsls	r1, r3, #19
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	d504      	bpl.n	80052b0 <__sflush_r+0x78>
 80052a6:	1c42      	adds	r2, r0, #1
 80052a8:	d101      	bne.n	80052ae <__sflush_r+0x76>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	b903      	cbnz	r3, 80052b0 <__sflush_r+0x78>
 80052ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80052b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052b2:	602f      	str	r7, [r5, #0]
 80052b4:	b1b9      	cbz	r1, 80052e6 <__sflush_r+0xae>
 80052b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052ba:	4299      	cmp	r1, r3
 80052bc:	d002      	beq.n	80052c4 <__sflush_r+0x8c>
 80052be:	4628      	mov	r0, r5
 80052c0:	f7ff fbf2 	bl	8004aa8 <_free_r>
 80052c4:	2300      	movs	r3, #0
 80052c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80052c8:	e00d      	b.n	80052e6 <__sflush_r+0xae>
 80052ca:	2301      	movs	r3, #1
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b0      	blx	r6
 80052d0:	4602      	mov	r2, r0
 80052d2:	1c50      	adds	r0, r2, #1
 80052d4:	d1c9      	bne.n	800526a <__sflush_r+0x32>
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0c6      	beq.n	800526a <__sflush_r+0x32>
 80052dc:	2b1d      	cmp	r3, #29
 80052de:	d001      	beq.n	80052e4 <__sflush_r+0xac>
 80052e0:	2b16      	cmp	r3, #22
 80052e2:	d11e      	bne.n	8005322 <__sflush_r+0xea>
 80052e4:	602f      	str	r7, [r5, #0]
 80052e6:	2000      	movs	r0, #0
 80052e8:	e022      	b.n	8005330 <__sflush_r+0xf8>
 80052ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ee:	b21b      	sxth	r3, r3
 80052f0:	e01b      	b.n	800532a <__sflush_r+0xf2>
 80052f2:	690f      	ldr	r7, [r1, #16]
 80052f4:	2f00      	cmp	r7, #0
 80052f6:	d0f6      	beq.n	80052e6 <__sflush_r+0xae>
 80052f8:	0793      	lsls	r3, r2, #30
 80052fa:	680e      	ldr	r6, [r1, #0]
 80052fc:	bf08      	it	eq
 80052fe:	694b      	ldreq	r3, [r1, #20]
 8005300:	600f      	str	r7, [r1, #0]
 8005302:	bf18      	it	ne
 8005304:	2300      	movne	r3, #0
 8005306:	eba6 0807 	sub.w	r8, r6, r7
 800530a:	608b      	str	r3, [r1, #8]
 800530c:	f1b8 0f00 	cmp.w	r8, #0
 8005310:	dde9      	ble.n	80052e6 <__sflush_r+0xae>
 8005312:	6a21      	ldr	r1, [r4, #32]
 8005314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005316:	4643      	mov	r3, r8
 8005318:	463a      	mov	r2, r7
 800531a:	4628      	mov	r0, r5
 800531c:	47b0      	blx	r6
 800531e:	2800      	cmp	r0, #0
 8005320:	dc08      	bgt.n	8005334 <__sflush_r+0xfc>
 8005322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005334:	4407      	add	r7, r0
 8005336:	eba8 0800 	sub.w	r8, r8, r0
 800533a:	e7e7      	b.n	800530c <__sflush_r+0xd4>
 800533c:	dfbffffe 	.word	0xdfbffffe

08005340 <_fflush_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	690b      	ldr	r3, [r1, #16]
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
 8005348:	b913      	cbnz	r3, 8005350 <_fflush_r+0x10>
 800534a:	2500      	movs	r5, #0
 800534c:	4628      	mov	r0, r5
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	b118      	cbz	r0, 800535a <_fflush_r+0x1a>
 8005352:	6a03      	ldr	r3, [r0, #32]
 8005354:	b90b      	cbnz	r3, 800535a <_fflush_r+0x1a>
 8005356:	f7ff f9ad 	bl	80046b4 <__sinit>
 800535a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f3      	beq.n	800534a <_fflush_r+0xa>
 8005362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005364:	07d0      	lsls	r0, r2, #31
 8005366:	d404      	bmi.n	8005372 <_fflush_r+0x32>
 8005368:	0599      	lsls	r1, r3, #22
 800536a:	d402      	bmi.n	8005372 <_fflush_r+0x32>
 800536c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800536e:	f7ff fb98 	bl	8004aa2 <__retarget_lock_acquire_recursive>
 8005372:	4628      	mov	r0, r5
 8005374:	4621      	mov	r1, r4
 8005376:	f7ff ff5f 	bl	8005238 <__sflush_r>
 800537a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800537c:	07da      	lsls	r2, r3, #31
 800537e:	4605      	mov	r5, r0
 8005380:	d4e4      	bmi.n	800534c <_fflush_r+0xc>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	059b      	lsls	r3, r3, #22
 8005386:	d4e1      	bmi.n	800534c <_fflush_r+0xc>
 8005388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800538a:	f7ff fb8b 	bl	8004aa4 <__retarget_lock_release_recursive>
 800538e:	e7dd      	b.n	800534c <_fflush_r+0xc>

08005390 <__swhatbuf_r>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005398:	2900      	cmp	r1, #0
 800539a:	b096      	sub	sp, #88	@ 0x58
 800539c:	4615      	mov	r5, r2
 800539e:	461e      	mov	r6, r3
 80053a0:	da0d      	bge.n	80053be <__swhatbuf_r+0x2e>
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	bf14      	ite	ne
 80053ae:	2340      	movne	r3, #64	@ 0x40
 80053b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053b4:	2000      	movs	r0, #0
 80053b6:	6031      	str	r1, [r6, #0]
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	b016      	add	sp, #88	@ 0x58
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	466a      	mov	r2, sp
 80053c0:	f000 f848 	bl	8005454 <_fstat_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	dbec      	blt.n	80053a2 <__swhatbuf_r+0x12>
 80053c8:	9901      	ldr	r1, [sp, #4]
 80053ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053d2:	4259      	negs	r1, r3
 80053d4:	4159      	adcs	r1, r3
 80053d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053da:	e7eb      	b.n	80053b4 <__swhatbuf_r+0x24>

080053dc <__smakebuf_r>:
 80053dc:	898b      	ldrh	r3, [r1, #12]
 80053de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e0:	079d      	lsls	r5, r3, #30
 80053e2:	4606      	mov	r6, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	d507      	bpl.n	80053f8 <__smakebuf_r+0x1c>
 80053e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	2301      	movs	r3, #1
 80053f2:	6163      	str	r3, [r4, #20]
 80053f4:	b003      	add	sp, #12
 80053f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f8:	ab01      	add	r3, sp, #4
 80053fa:	466a      	mov	r2, sp
 80053fc:	f7ff ffc8 	bl	8005390 <__swhatbuf_r>
 8005400:	9f00      	ldr	r7, [sp, #0]
 8005402:	4605      	mov	r5, r0
 8005404:	4639      	mov	r1, r7
 8005406:	4630      	mov	r0, r6
 8005408:	f7ff fbba 	bl	8004b80 <_malloc_r>
 800540c:	b948      	cbnz	r0, 8005422 <__smakebuf_r+0x46>
 800540e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005412:	059a      	lsls	r2, r3, #22
 8005414:	d4ee      	bmi.n	80053f4 <__smakebuf_r+0x18>
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	e7e2      	b.n	80053e8 <__smakebuf_r+0xc>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	6020      	str	r0, [r4, #0]
 8005426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005432:	b15b      	cbz	r3, 800544c <__smakebuf_r+0x70>
 8005434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005438:	4630      	mov	r0, r6
 800543a:	f000 f81d 	bl	8005478 <_isatty_r>
 800543e:	b128      	cbz	r0, 800544c <__smakebuf_r+0x70>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f023 0303 	bic.w	r3, r3, #3
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	431d      	orrs	r5, r3
 8005450:	81a5      	strh	r5, [r4, #12]
 8005452:	e7cf      	b.n	80053f4 <__smakebuf_r+0x18>

08005454 <_fstat_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	@ (8005474 <_fstat_r+0x20>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	f7fb fe82 	bl	800116a <_fstat>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d102      	bne.n	8005470 <_fstat_r+0x1c>
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	b103      	cbz	r3, 8005470 <_fstat_r+0x1c>
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	20000310 	.word	0x20000310

08005478 <_isatty_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	@ (8005494 <_isatty_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fb fe81 	bl	800118a <_isatty>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_isatty_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_isatty_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	20000310 	.word	0x20000310

08005498 <_sbrk_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4d06      	ldr	r5, [pc, #24]	@ (80054b4 <_sbrk_r+0x1c>)
 800549c:	2300      	movs	r3, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	f7fb fe8a 	bl	80011bc <_sbrk>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_sbrk_r+0x1a>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_sbrk_r+0x1a>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	20000310 	.word	0x20000310

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr
