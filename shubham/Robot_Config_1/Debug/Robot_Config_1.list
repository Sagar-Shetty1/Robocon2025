
Robot_Config_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  0800d798  0800d798  0000e798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df00  0800df00  0000f200  2**0
                  CONTENTS
  4 .ARM          00000008  0800df00  0800df00  0000ef00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df08  0800df08  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df08  0800df08  0000ef08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df0c  0800df0c  0000ef0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800df10  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000200  0800e110  0000f200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800e110  0000f824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c5d  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287c  00000000  00000000  00021e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00024710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6d  00000000  00000000  00025950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024120  00000000  00000000  000267bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001615f  00000000  00000000  0004a8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d887c  00000000  00000000  00060a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001392b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a0  00000000  00000000  001392fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013f79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d780 	.word	0x0800d780

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800d780 	.word	0x0800d780

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4619      	mov	r1, r3
 8001032:	2007      	movs	r0, #7
 8001034:	f000 fa44 	bl	80014c0 <bno055_writeData>
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4619      	mov	r1, r3
 800104e:	203d      	movs	r0, #61	@ 0x3d
 8001050:	f000 fa36 	bl	80014c0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d103      	bne.n	8001062 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800105a:	2013      	movs	r0, #19
 800105c:	f000 fa24 	bl	80014a8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001060:	e002      	b.n	8001068 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001062:	2007      	movs	r0, #7
 8001064:	f000 fa20 	bl	80014a8 <bno055_delay>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ffe3 	bl	8001040 <bno055_setOperationMode>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001082:	200c      	movs	r0, #12
 8001084:	f7ff ffdc 	bl	8001040 <bno055_setOperationMode>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001090:	2120      	movs	r1, #32
 8001092:	203f      	movs	r0, #63	@ 0x3f
 8001094:	f000 fa14 	bl	80014c0 <bno055_writeData>
  bno055_delay(700);
 8001098:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800109c:	f000 fa04 	bl	80014a8 <bno055_delay>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  bno055_reset();
 80010aa:	f7ff ffef 	bl	800108c <bno055_reset>

  uint8_t id = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 faed 	bl	8001698 <bno055_readData>
  if (id != BNO055_ID) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80010c2:	d004      	beq.n	80010ce <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <bno055_setup+0x4c>)
 80010ca:	f008 fc43 	bl	8009954 <iprintf>
  }
  bno055_setPage(0);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ffa8 	bl	8001024 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	203f      	movs	r0, #63	@ 0x3f
 80010d8:	f000 f9f2 	bl	80014c0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80010dc:	f7ff ffc8 	bl	8001070 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 f9e1 	bl	80014a8 <bno055_delay>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800d798 	.word	0x0800d798

080010f4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80010f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010f8:	b09e      	sub	sp, #120	@ 0x78
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ff8e 	bl	8001024 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800110c:	2b20      	cmp	r3, #32
 800110e:	d108      	bne.n	8001122 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001110:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001118:	2208      	movs	r2, #8
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fabc 	bl	8001698 <bno055_readData>
 8001120:	e007      	b.n	8001132 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001122:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800112a:	2206      	movs	r2, #6
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fab3 	bl	8001698 <bno055_readData>

  double scale = 1;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b8b      	ldr	r3, [pc, #556]	@ (8001364 <bno055_getVector+0x270>)
 8001138:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800113c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001140:	2b0e      	cmp	r3, #14
 8001142:	d109      	bne.n	8001158 <bno055_getVector+0x64>
    scale = magScale;
 8001144:	4b88      	ldr	r3, [pc, #544]	@ (8001368 <bno055_getVector+0x274>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9fb 	bl	8000544 <__aeabi_ui2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001156:	e03e      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800115c:	2b08      	cmp	r3, #8
 800115e:	d007      	beq.n	8001170 <bno055_getVector+0x7c>
 8001160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001164:	2b28      	cmp	r3, #40	@ 0x28
 8001166:	d003      	beq.n	8001170 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116c:	2b2e      	cmp	r3, #46	@ 0x2e
 800116e:	d109      	bne.n	8001184 <bno055_getVector+0x90>
    scale = accelScale;
 8001170:	4b7e      	ldr	r3, [pc, #504]	@ (800136c <bno055_getVector+0x278>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9e5 	bl	8000544 <__aeabi_ui2d>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001182:	e028      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001188:	2b14      	cmp	r3, #20
 800118a:	d109      	bne.n	80011a0 <bno055_getVector+0xac>
    scale = angularRateScale;
 800118c:	4b78      	ldr	r3, [pc, #480]	@ (8001370 <bno055_getVector+0x27c>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9d7 	bl	8000544 <__aeabi_ui2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800119e:	e01a      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011a4:	2b1a      	cmp	r3, #26
 80011a6:	d109      	bne.n	80011bc <bno055_getVector+0xc8>
    scale = eulerScale;
 80011a8:	4b72      	ldr	r3, [pc, #456]	@ (8001374 <bno055_getVector+0x280>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9c9 	bl	8000544 <__aeabi_ui2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011ba:	e00c      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80011bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	d108      	bne.n	80011d6 <bno055_getVector+0xe2>
    scale = quaScale;
 80011c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001378 <bno055_getVector+0x284>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9bb 	bl	8000544 <__aeabi_ui2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011da:	2220      	movs	r2, #32
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f008 fd20 	bl	8009c24 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80011e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011e8:	2b20      	cmp	r3, #32
 80011ea:	d150      	bne.n	800128e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ec:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9b0 	bl	8000564 <__aeabi_i2d>
 8001204:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001208:	f7ff fb40 	bl	800088c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001214:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21b      	sxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f99c 	bl	8000564 <__aeabi_i2d>
 800122c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001230:	f7ff fb2c 	bl	800088c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800123c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f988 	bl	8000564 <__aeabi_i2d>
 8001254:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001258:	f7ff fb18 	bl	800088c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001264:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f974 	bl	8000564 <__aeabi_i2d>
 800127c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001280:	f7ff fb04 	bl	800088c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800128c:	e03b      	b.n	8001306 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800128e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95f 	bl	8000564 <__aeabi_i2d>
 80012a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012aa:	f7ff faef 	bl	800088c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80012b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f94b 	bl	8000564 <__aeabi_i2d>
 80012ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012d2:	f7ff fadb 	bl	800088c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80012de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f937 	bl	8000564 <__aeabi_i2d>
 80012f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012fa:	f7ff fac7 	bl	800088c <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001306:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800130a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800131a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800131e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001322:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001326:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800132a:	ec49 8b14 	vmov	d4, r8, r9
 800132e:	ec45 4b15 	vmov	d5, r4, r5
 8001332:	ec41 0b16 	vmov	d6, r0, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
}
 800133a:	eeb0 0a44 	vmov.f32	s0, s8
 800133e:	eef0 0a64 	vmov.f32	s1, s9
 8001342:	eeb0 1a45 	vmov.f32	s2, s10
 8001346:	eef0 1a65 	vmov.f32	s3, s11
 800134a:	eeb0 2a46 	vmov.f32	s4, s12
 800134e:	eef0 2a66 	vmov.f32	s5, s13
 8001352:	eeb0 3a47 	vmov.f32	s6, s14
 8001356:	eef0 3a67 	vmov.f32	s7, s15
 800135a:	3778      	adds	r7, #120	@ 0x78
 800135c:	46bd      	mov	sp, r7
 800135e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001362:	bf00      	nop
 8001364:	3ff00000 	.word	0x3ff00000
 8001368:	20000006 	.word	0x20000006
 800136c:	20000000 	.word	0x20000000
 8001370:	20000002 	.word	0x20000002
 8001374:	20000004 	.word	0x20000004
 8001378:	20000008 	.word	0x20000008

0800137c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 800137c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001380:	b090      	sub	sp, #64	@ 0x40
 8001382:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001384:	201a      	movs	r0, #26
 8001386:	f7ff feb5 	bl	80010f4 <bno055_getVector>
 800138a:	eeb0 4a40 	vmov.f32	s8, s0
 800138e:	eef0 4a60 	vmov.f32	s9, s1
 8001392:	eeb0 5a41 	vmov.f32	s10, s2
 8001396:	eef0 5a61 	vmov.f32	s11, s3
 800139a:	eeb0 6a42 	vmov.f32	s12, s4
 800139e:	eef0 6a62 	vmov.f32	s13, s5
 80013a2:	eeb0 7a43 	vmov.f32	s14, s6
 80013a6:	eef0 7a63 	vmov.f32	s15, s7
 80013aa:	ed87 4b08 	vstr	d4, [r7, #32]
 80013ae:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80013b2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80013b6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80013ba:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013be:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80013c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013ca:	ec49 8b14 	vmov	d4, r8, r9
 80013ce:	ec45 4b15 	vmov	d5, r4, r5
 80013d2:	ec41 0b16 	vmov	d6, r0, r1
 80013d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80013da:	eeb0 0a44 	vmov.f32	s0, s8
 80013de:	eef0 0a64 	vmov.f32	s1, s9
 80013e2:	eeb0 1a45 	vmov.f32	s2, s10
 80013e6:	eef0 1a65 	vmov.f32	s3, s11
 80013ea:	eeb0 2a46 	vmov.f32	s4, s12
 80013ee:	eef0 2a66 	vmov.f32	s5, s13
 80013f2:	eeb0 3a47 	vmov.f32	s6, s14
 80013f6:	eef0 3a67 	vmov.f32	s7, s15
 80013fa:	3740      	adds	r7, #64	@ 0x40
 80013fc:	46bd      	mov	sp, r7
 80013fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001402 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001402:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001406:	b090      	sub	sp, #64	@ 0x40
 8001408:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800140a:	2020      	movs	r0, #32
 800140c:	f7ff fe72 	bl	80010f4 <bno055_getVector>
 8001410:	eeb0 4a40 	vmov.f32	s8, s0
 8001414:	eef0 4a60 	vmov.f32	s9, s1
 8001418:	eeb0 5a41 	vmov.f32	s10, s2
 800141c:	eef0 5a61 	vmov.f32	s11, s3
 8001420:	eeb0 6a42 	vmov.f32	s12, s4
 8001424:	eef0 6a62 	vmov.f32	s13, s5
 8001428:	eeb0 7a43 	vmov.f32	s14, s6
 800142c:	eef0 7a63 	vmov.f32	s15, s7
 8001430:	ed87 4b08 	vstr	d4, [r7, #32]
 8001434:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001438:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800143c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001444:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001448:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800144c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001450:	ec49 8b14 	vmov	d4, r8, r9
 8001454:	ec45 4b15 	vmov	d5, r4, r5
 8001458:	ec41 0b16 	vmov	d6, r0, r1
 800145c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001460:	eeb0 0a44 	vmov.f32	s0, s8
 8001464:	eef0 0a64 	vmov.f32	s1, s9
 8001468:	eeb0 1a45 	vmov.f32	s2, s10
 800146c:	eef0 1a65 	vmov.f32	s3, s11
 8001470:	eeb0 2a46 	vmov.f32	s4, s12
 8001474:	eef0 2a66 	vmov.f32	s5, s13
 8001478:	eeb0 3a47 	vmov.f32	s6, s14
 800147c:	eef0 3a67 	vmov.f32	s7, s15
 8001480:	3740      	adds	r7, #64	@ 0x40
 8001482:	46bd      	mov	sp, r7
 8001484:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001488 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <bno055_assignI2C+0x1c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000021c 	.word	0x2000021c

080014a8 <bno055_delay>:

void bno055_delay(int time) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fba8 	bl	8003c08 <HAL_Delay>
#endif
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	733b      	strb	r3, [r7, #12]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80014d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001644 <bno055_writeData+0x184>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f107 020c 	add.w	r2, r7, #12
 80014e0:	230a      	movs	r3, #10
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2302      	movs	r3, #2
 80014e6:	2150      	movs	r1, #80	@ 0x50
 80014e8:	f003 fbb8 	bl	8004c5c <HAL_I2C_Master_Transmit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80a0 	beq.w	8001638 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d103      	bne.n	8001506 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80014fe:	4852      	ldr	r0, [pc, #328]	@ (8001648 <bno055_writeData+0x188>)
 8001500:	f008 fa90 	bl	8009a24 <puts>
 8001504:	e012      	b.n	800152c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d103      	bne.n	8001514 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800150c:	484f      	ldr	r0, [pc, #316]	@ (800164c <bno055_writeData+0x18c>)
 800150e:	f008 fa89 	bl	8009a24 <puts>
 8001512:	e00b      	b.n	800152c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d103      	bne.n	8001522 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800151a:	484d      	ldr	r0, [pc, #308]	@ (8001650 <bno055_writeData+0x190>)
 800151c:	f008 fa82 	bl	8009a24 <puts>
 8001520:	e004      	b.n	800152c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	4619      	mov	r1, r3
 8001526:	484b      	ldr	r0, [pc, #300]	@ (8001654 <bno055_writeData+0x194>)
 8001528:	f008 fa14 	bl	8009954 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800152c:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <bno055_writeData+0x184>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fed1 	bl	80052d8 <HAL_I2C_GetError>
 8001536:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d07e      	beq.n	800163c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d103      	bne.n	800154c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001544:	4844      	ldr	r0, [pc, #272]	@ (8001658 <bno055_writeData+0x198>)
 8001546:	f008 fa6d 	bl	8009a24 <puts>
 800154a:	e021      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d103      	bne.n	800155a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001552:	4842      	ldr	r0, [pc, #264]	@ (800165c <bno055_writeData+0x19c>)
 8001554:	f008 fa66 	bl	8009a24 <puts>
 8001558:	e01a      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d103      	bne.n	8001568 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001560:	483f      	ldr	r0, [pc, #252]	@ (8001660 <bno055_writeData+0x1a0>)
 8001562:	f008 fa5f 	bl	8009a24 <puts>
 8001566:	e013      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d103      	bne.n	8001576 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800156e:	483d      	ldr	r0, [pc, #244]	@ (8001664 <bno055_writeData+0x1a4>)
 8001570:	f008 fa58 	bl	8009a24 <puts>
 8001574:	e00c      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b10      	cmp	r3, #16
 800157a:	d103      	bne.n	8001584 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800157c:	483a      	ldr	r0, [pc, #232]	@ (8001668 <bno055_writeData+0x1a8>)
 800157e:	f008 fa51 	bl	8009a24 <puts>
 8001582:	e005      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b20      	cmp	r3, #32
 8001588:	d102      	bne.n	8001590 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800158a:	4838      	ldr	r0, [pc, #224]	@ (800166c <bno055_writeData+0x1ac>)
 800158c:	f008 fa4a 	bl	8009a24 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <bno055_writeData+0x184>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fe91 	bl	80052bc <HAL_I2C_GetState>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80015a4:	4832      	ldr	r0, [pc, #200]	@ (8001670 <bno055_writeData+0x1b0>)
 80015a6:	f008 fa3d 	bl	8009a24 <puts>
 80015aa:	e048      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d103      	bne.n	80015ba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80015b2:	482f      	ldr	r0, [pc, #188]	@ (8001670 <bno055_writeData+0x1b0>)
 80015b4:	f008 fa36 	bl	8009a24 <puts>
 80015b8:	e041      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b24      	cmp	r3, #36	@ 0x24
 80015be:	d103      	bne.n	80015c8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80015c0:	482c      	ldr	r0, [pc, #176]	@ (8001674 <bno055_writeData+0x1b4>)
 80015c2:	f008 fa2f 	bl	8009a24 <puts>
 80015c6:	e03a      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b21      	cmp	r3, #33	@ 0x21
 80015cc:	d103      	bne.n	80015d6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80015ce:	482a      	ldr	r0, [pc, #168]	@ (8001678 <bno055_writeData+0x1b8>)
 80015d0:	f008 fa28 	bl	8009a24 <puts>
 80015d4:	e033      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b22      	cmp	r3, #34	@ 0x22
 80015da:	d103      	bne.n	80015e4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80015dc:	4827      	ldr	r0, [pc, #156]	@ (800167c <bno055_writeData+0x1bc>)
 80015de:	f008 fa21 	bl	8009a24 <puts>
 80015e2:	e02c      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b28      	cmp	r3, #40	@ 0x28
 80015e8:	d103      	bne.n	80015f2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80015ea:	4825      	ldr	r0, [pc, #148]	@ (8001680 <bno055_writeData+0x1c0>)
 80015ec:	f008 fa1a 	bl	8009a24 <puts>
 80015f0:	e025      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b29      	cmp	r3, #41	@ 0x29
 80015f6:	d103      	bne.n	8001600 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80015f8:	4822      	ldr	r0, [pc, #136]	@ (8001684 <bno055_writeData+0x1c4>)
 80015fa:	f008 fa13 	bl	8009a24 <puts>
 80015fe:	e01e      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b2a      	cmp	r3, #42	@ 0x2a
 8001604:	d103      	bne.n	800160e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001606:	4820      	ldr	r0, [pc, #128]	@ (8001688 <bno055_writeData+0x1c8>)
 8001608:	f008 fa0c 	bl	8009a24 <puts>
 800160c:	e017      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b60      	cmp	r3, #96	@ 0x60
 8001612:	d103      	bne.n	800161c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001614:	481d      	ldr	r0, [pc, #116]	@ (800168c <bno055_writeData+0x1cc>)
 8001616:	f008 fa05 	bl	8009a24 <puts>
 800161a:	e010      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001620:	d103      	bne.n	800162a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001622:	481b      	ldr	r0, [pc, #108]	@ (8001690 <bno055_writeData+0x1d0>)
 8001624:	f008 f9fe 	bl	8009a24 <puts>
 8001628:	e009      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2be0      	cmp	r3, #224	@ 0xe0
 800162e:	d106      	bne.n	800163e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001630:	4818      	ldr	r0, [pc, #96]	@ (8001694 <bno055_writeData+0x1d4>)
 8001632:	f008 f9f7 	bl	8009a24 <puts>
 8001636:	e002      	b.n	800163e <bno055_writeData+0x17e>
    return;
 8001638:	bf00      	nop
 800163a:	e000      	b.n	800163e <bno055_writeData+0x17e>
    return;
 800163c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000021c 	.word	0x2000021c
 8001648:	0800d7d4 	.word	0x0800d7d4
 800164c:	0800d7f8 	.word	0x0800d7f8
 8001650:	0800d820 	.word	0x0800d820
 8001654:	0800d844 	.word	0x0800d844
 8001658:	0800d85c 	.word	0x0800d85c
 800165c:	0800d870 	.word	0x0800d870
 8001660:	0800d884 	.word	0x0800d884
 8001664:	0800d898 	.word	0x0800d898
 8001668:	0800d8ac 	.word	0x0800d8ac
 800166c:	0800d8c0 	.word	0x0800d8c0
 8001670:	0800d8d8 	.word	0x0800d8d8
 8001674:	0800d8f0 	.word	0x0800d8f0
 8001678:	0800d904 	.word	0x0800d904
 800167c:	0800d91c 	.word	0x0800d91c
 8001680:	0800d934 	.word	0x0800d934
 8001684:	0800d94c 	.word	0x0800d94c
 8001688:	0800d96c 	.word	0x0800d96c
 800168c:	0800d98c 	.word	0x0800d98c
 8001690:	0800d9a4 	.word	0x0800d9a4
 8001694:	0800d9bc 	.word	0x0800d9bc

08001698 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af02      	add	r7, sp, #8
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <bno055_readData+0x40>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	1dfa      	adds	r2, r7, #7
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2150      	movs	r1, #80	@ 0x50
 80016b6:	f003 fad1 	bl	8004c5c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <bno055_readData+0x40>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2264      	movs	r2, #100	@ 0x64
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	2150      	movs	r1, #80	@ 0x50
 80016ca:	f003 fbc5 	bl	8004e58 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000021c 	.word	0x2000021c

080016dc <calculateWheelVelocity>:
volatile bool encoder2Direction = true;
volatile bool encoder3Direction = true;

// Function to calculate wheel velocity in mm/s
float calculateWheelVelocity(long currentTicks, long lastTicks,
		float timeChange) {
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float deltaTicks = currentTicks - lastTicks;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	edc7 7a05 	vstr	s15, [r7, #20]
	return (deltaTicks * MM_PER_TICK) / timeChange;
 80016fc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001724 <calculateWheelVelocity+0x48>
 8001700:	edd7 7a05 	vldr	s15, [r7, #20]
 8001704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001708:	edd7 7a01 	vldr	s15, [r7, #4]
 800170c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001710:	eef0 7a66 	vmov.f32	s15, s13
}
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	4016cbe4 	.word	0x4016cbe4

08001728 <computeRobotMotion>:

void computeRobotMotion() {
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
	unsigned long currentTime = HAL_GetTick();
 800172e:	f002 fa5f 	bl	8003bf0 <HAL_GetTick>
 8001732:	6178      	str	r0, [r7, #20]
	float timeChange = (currentTime - lastTime) / 1000.0;  // Convert to seconds
 8001734:	4b78      	ldr	r3, [pc, #480]	@ (8001918 <computeRobotMotion+0x1f0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff01 	bl	8000544 <__aeabi_ui2d>
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	4b75      	ldr	r3, [pc, #468]	@ (800191c <computeRobotMotion+0x1f4>)
 8001748:	f7ff f8a0 	bl	800088c <__aeabi_ddiv>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff fa68 	bl	8000c28 <__aeabi_d2f>
 8001758:	4603      	mov	r3, r0
 800175a:	613b      	str	r3, [r7, #16]

	// Only update if enough time has passed (avoid division by very small numbers)
	if (timeChange >= 0.01) {  // 10ms minimum interval
 800175c:	6938      	ldr	r0, [r7, #16]
 800175e:	f7fe ff13 	bl	8000588 <__aeabi_f2d>
 8001762:	a369      	add	r3, pc, #420	@ (adr r3, 8001908 <computeRobotMotion+0x1e0>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9ec 	bl	8000b44 <__aeabi_dcmpge>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <computeRobotMotion+0x4c>

		// Print results

//        printf("Wheel Velocities (mm/s) - A: %.2f B: %.2f C: %.2f\r", Va, Vb, Vc);
	}
}
 8001772:	e0c2      	b.n	80018fa <computeRobotMotion+0x1d2>
		float Va = calculateWheelVelocity(signed_counter1, lastTickF,
 8001774:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <computeRobotMotion+0x1f8>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	461a      	mov	r2, r3
 800177c:	4b69      	ldr	r3, [pc, #420]	@ (8001924 <computeRobotMotion+0x1fc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	ed97 0a04 	vldr	s0, [r7, #16]
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f7ff ffa8 	bl	80016dc <calculateWheelVelocity>
 800178c:	ed87 0a03 	vstr	s0, [r7, #12]
		float Vb = calculateWheelVelocity(signed_counter2, lastTickR,
 8001790:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <computeRobotMotion+0x200>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a65      	ldr	r2, [pc, #404]	@ (800192c <computeRobotMotion+0x204>)
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	ed97 0a04 	vldr	s0, [r7, #16]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff9c 	bl	80016dc <calculateWheelVelocity>
 80017a4:	ed87 0a02 	vstr	s0, [r7, #8]
		float Vc = calculateWheelVelocity(signed_counter3, lastTickL,
 80017a8:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <computeRobotMotion+0x208>)
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b60      	ldr	r3, [pc, #384]	@ (8001934 <computeRobotMotion+0x20c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	ed97 0a04 	vldr	s0, [r7, #16]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4610      	mov	r0, r2
 80017bc:	f7ff ff8e 	bl	80016dc <calculateWheelVelocity>
 80017c0:	ed87 0a01 	vstr	s0, [r7, #4]
		vx = Va - 0.5 * Vb - 0.5 * Vc;  // mm/s
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7fe fedf 	bl	8000588 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	68b8      	ldr	r0, [r7, #8]
 80017d0:	f7fe feda 	bl	8000588 <__aeabi_f2d>
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b57      	ldr	r3, [pc, #348]	@ (8001938 <computeRobotMotion+0x210>)
 80017da:	f7fe ff2d 	bl	8000638 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fd6f 	bl	80002c8 <__aeabi_dsub>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4614      	mov	r4, r2
 80017f0:	461d      	mov	r5, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fec8 	bl	8000588 <__aeabi_f2d>
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <computeRobotMotion+0x210>)
 80017fe:	f7fe ff1b 	bl	8000638 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fd5d 	bl	80002c8 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	494a      	ldr	r1, [pc, #296]	@ (800193c <computeRobotMotion+0x214>)
 8001814:	e9c1 2300 	strd	r2, r3, [r1]
		vy = 0.0 * Va - 0.866 * Vb + 0.866 * Vc;  // mm/s
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7fe feb5 	bl	8000588 <__aeabi_f2d>
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f7fe ff07 	bl	8000638 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f7fe fea8 	bl	8000588 <__aeabi_f2d>
 8001838:	a335      	add	r3, pc, #212	@ (adr r3, 8001910 <computeRobotMotion+0x1e8>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fefb 	bl	8000638 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe fd3d 	bl	80002c8 <__aeabi_dsub>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4614      	mov	r4, r2
 8001854:	461d      	mov	r5, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe fe96 	bl	8000588 <__aeabi_f2d>
 800185c:	a32c      	add	r3, pc, #176	@ (adr r3, 8001910 <computeRobotMotion+0x1e8>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fee9 	bl	8000638 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fd2d 	bl	80002cc <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4932      	ldr	r1, [pc, #200]	@ (8001940 <computeRobotMotion+0x218>)
 8001878:	e9c1 2300 	strd	r2, r3, [r1]
		dx += vx * timeChange;  // mm
 800187c:	6938      	ldr	r0, [r7, #16]
 800187e:	f7fe fe83 	bl	8000588 <__aeabi_f2d>
 8001882:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <computeRobotMotion+0x214>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fed6 	bl	8000638 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <computeRobotMotion+0x21c>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fd17 	bl	80002cc <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4928      	ldr	r1, [pc, #160]	@ (8001944 <computeRobotMotion+0x21c>)
 80018a4:	e9c1 2300 	strd	r2, r3, [r1]
		dy += vy * timeChange;  // mm
 80018a8:	6938      	ldr	r0, [r7, #16]
 80018aa:	f7fe fe6d 	bl	8000588 <__aeabi_f2d>
 80018ae:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <computeRobotMotion+0x218>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fec0 	bl	8000638 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <computeRobotMotion+0x220>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe fd01 	bl	80002cc <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	491e      	ldr	r1, [pc, #120]	@ (8001948 <computeRobotMotion+0x220>)
 80018d0:	e9c1 2300 	strd	r2, r3, [r1]
		lastTickF = signed_counter1;
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <computeRobotMotion+0x1f8>)
 80018d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <computeRobotMotion+0x1fc>)
 80018de:	601a      	str	r2, [r3, #0]
		lastTickR = signed_counter2;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <computeRobotMotion+0x200>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a11      	ldr	r2, [pc, #68]	@ (800192c <computeRobotMotion+0x204>)
 80018e6:	6013      	str	r3, [r2, #0]
		lastTickL = signed_counter3;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <computeRobotMotion+0x208>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <computeRobotMotion+0x20c>)
 80018f2:	601a      	str	r2, [r3, #0]
		lastTime = currentTime;
 80018f4:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <computeRobotMotion+0x1f0>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bdb0      	pop	{r4, r5, r7, pc}
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	47ae147b 	.word	0x47ae147b
 800190c:	3f847ae1 	.word	0x3f847ae1
 8001910:	a1cac083 	.word	0xa1cac083
 8001914:	3febb645 	.word	0x3febb645
 8001918:	200006c0 	.word	0x200006c0
 800191c:	408f4000 	.word	0x408f4000
 8001920:	20000620 	.word	0x20000620
 8001924:	200006c4 	.word	0x200006c4
 8001928:	20000624 	.word	0x20000624
 800192c:	200006c8 	.word	0x200006c8
 8001930:	20000628 	.word	0x20000628
 8001934:	200006cc 	.word	0x200006cc
 8001938:	3fe00000 	.word	0x3fe00000
 800193c:	200006b0 	.word	0x200006b0
 8001940:	200006b8 	.word	0x200006b8
 8001944:	200006a0 	.word	0x200006a0
 8001948:	200006a8 	.word	0x200006a8

0800194c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8001954:	2210      	movs	r2, #16
 8001956:	4904      	ldr	r1, [pc, #16]	@ (8001968 <HAL_UART_RxCpltCallback+0x1c>)
 8001958:	4804      	ldr	r0, [pc, #16]	@ (800196c <HAL_UART_RxCpltCallback+0x20>)
 800195a:	f005 ffc0 	bl	80078de <HAL_UART_Receive_DMA>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000630 	.word	0x20000630
 800196c:	200004fc 	.word	0x200004fc

08001970 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	69b9      	ldr	r1, [r7, #24]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	1a8a      	subs	r2, r1, r2
 800198a:	fb03 f202 	mul.w	r2, r3, r2
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1acb      	subs	r3, r1, r3
 8001994:	fb92 f2f3 	sdiv	r2, r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4413      	add	r3, r2

}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <update_odometry>:

void update_odometry(int16_t encoder1, int32_t encoder2, int16_t encoder3) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	80fb      	strh	r3, [r7, #6]
 80019b4:	4613      	mov	r3, r2
 80019b6:	80bb      	strh	r3, [r7, #4]
	// Calculate the change in encoder values
	int16_t delta1 = encoder1 - last_encoder1;
 80019b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c4:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf8 <update_odometry+0x250>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	83fb      	strh	r3, [r7, #30]
	int32_t delta2 = encoder2 - last_encoder2;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e2:	4b86      	ldr	r3, [pc, #536]	@ (8001bfc <update_odometry+0x254>)
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f0:	ee17 3a90 	vmov	r3, s15
 80019f4:	61bb      	str	r3, [r7, #24]
	int16_t delta3 = encoder3 - last_encoder3;
 80019f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a02:	4b7f      	ldr	r3, [pc, #508]	@ (8001c00 <update_odometry+0x258>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a10:	ee17 3a90 	vmov	r3, s15
 8001a14:	82fb      	strh	r3, [r7, #22]

	// Calculate distance per encoder count
	float wheel_circumference = 2 * M_PI * WHEEL_RADIUS;
 8001a16:	4b7b      	ldr	r3, [pc, #492]	@ (8001c04 <update_odometry+0x25c>)
 8001a18:	613b      	str	r3, [r7, #16]
	float distance_per_count = (1.0 / ENCODER_COUNTS_PER_REV)
			* (wheel_circumference / 1000);
 8001a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a1e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001c08 <update_odometry+0x260>
 8001a22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a26:	ee16 0a90 	vmov	r0, s13
 8001a2a:	f7fe fdad 	bl	8000588 <__aeabi_f2d>
 8001a2e:	a370      	add	r3, pc, #448	@ (adr r3, 8001bf0 <update_odometry+0x248>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fe00 	bl	8000638 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
	float distance_per_count = (1.0 / ENCODER_COUNTS_PER_REV)
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8f2 	bl	8000c28 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

	// Compute average delta for forward/backward encoders (without abs)
	float avgDelta12 = (delta1 + delta2) / 2.0;
 8001a48:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd87 	bl	8000564 <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a5e:	f7fe ff15 	bl	800088c <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8dd 	bl	8000c28 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60bb      	str	r3, [r7, #8]

	// Check movement direction based on joystick
	if (ly >= Buff1 && (lx <= BuffP && lx >= BuffN)) {
 8001a72:	4b66      	ldr	r3, [pc, #408]	@ (8001c0c <update_odometry+0x264>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <update_odometry+0x268>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	db1a      	blt.n	8001ab4 <update_odometry+0x10c>
 8001a7e:	4b65      	ldr	r3, [pc, #404]	@ (8001c14 <update_odometry+0x26c>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b65      	ldr	r3, [pc, #404]	@ (8001c18 <update_odometry+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dc14      	bgt.n	8001ab4 <update_odometry+0x10c>
 8001a8a:	4b62      	ldr	r3, [pc, #392]	@ (8001c14 <update_odometry+0x26c>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <update_odometry+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	db0e      	blt.n	8001ab4 <update_odometry+0x10c>
		// Forward motion - use the actual delta (with sign) to track position
		x += distance_per_count * avgDelta12;
 8001a96:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c20 <update_odometry+0x278>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aac:	4b5c      	ldr	r3, [pc, #368]	@ (8001c20 <update_odometry+0x278>)
 8001aae:	edc3 7a00 	vstr	s15, [r3]
 8001ab2:	e01f      	b.n	8001af4 <update_odometry+0x14c>
	} else if (ly <= Buff2 && (lx <= BuffP && lx >= BuffN)) {
 8001ab4:	4b55      	ldr	r3, [pc, #340]	@ (8001c0c <update_odometry+0x264>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c24 <update_odometry+0x27c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dc19      	bgt.n	8001af4 <update_odometry+0x14c>
 8001ac0:	4b54      	ldr	r3, [pc, #336]	@ (8001c14 <update_odometry+0x26c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b54      	ldr	r3, [pc, #336]	@ (8001c18 <update_odometry+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dc13      	bgt.n	8001af4 <update_odometry+0x14c>
 8001acc:	4b51      	ldr	r3, [pc, #324]	@ (8001c14 <update_odometry+0x26c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b52      	ldr	r3, [pc, #328]	@ (8001c1c <update_odometry+0x274>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	db0d      	blt.n	8001af4 <update_odometry+0x14c>
		// Backward motion - use the actual delta (with sign) to track position
		x += distance_per_count * avgDelta12; // Will be negative when going backward
 8001ad8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8001c20 <update_odometry+0x278>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aee:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <update_odometry+0x278>)
 8001af0:	edc3 7a00 	vstr	s15, [r3]
	}

	// Handle y-axis movement similarly...
	// Note: Keep your original code for y movement if it's working correctly
	if (lx >= Buff1 && (ly <= BuffP && ly >= BuffN)) {
 8001af4:	4b47      	ldr	r3, [pc, #284]	@ (8001c14 <update_odometry+0x26c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b45      	ldr	r3, [pc, #276]	@ (8001c10 <update_odometry+0x268>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	db28      	blt.n	8001b52 <update_odometry+0x1aa>
 8001b00:	4b42      	ldr	r3, [pc, #264]	@ (8001c0c <update_odometry+0x264>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b44      	ldr	r3, [pc, #272]	@ (8001c18 <update_odometry+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dc22      	bgt.n	8001b52 <update_odometry+0x1aa>
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c0c <update_odometry+0x264>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <update_odometry+0x274>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	db1c      	blt.n	8001b52 <update_odometry+0x1aa>
		dist3 = distance_per_count * abs(delta3);  // Using delta3 for y-axis
 8001b18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bfb8      	it	lt
 8001b20:	425b      	neglt	r3, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <update_odometry+0x280>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]
		y += dist3;
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c2c <update_odometry+0x284>)
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <update_odometry+0x280>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <update_odometry+0x284>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
 8001b50:	e02d      	b.n	8001bae <update_odometry+0x206>
	} else if (lx <= Buff2 && (ly <= BuffP && ly >= BuffN)) {
 8001b52:	4b30      	ldr	r3, [pc, #192]	@ (8001c14 <update_odometry+0x26c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b33      	ldr	r3, [pc, #204]	@ (8001c24 <update_odometry+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dc27      	bgt.n	8001bae <update_odometry+0x206>
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <update_odometry+0x264>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <update_odometry+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dc21      	bgt.n	8001bae <update_odometry+0x206>
 8001b6a:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <update_odometry+0x264>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c1c <update_odometry+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	db1b      	blt.n	8001bae <update_odometry+0x206>
		dist4 = distance_per_count * abs(delta3);
 8001b76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bfb8      	it	lt
 8001b7e:	425b      	neglt	r3, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	ee07 3a90 	vmov	s15, r3
 8001b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b92:	4b27      	ldr	r3, [pc, #156]	@ (8001c30 <update_odometry+0x288>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
		y -= dist4;
 8001b98:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <update_odometry+0x284>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <update_odometry+0x288>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <update_odometry+0x284>)
 8001baa:	edc3 7a00 	vstr	s15, [r3]
	}

	// Update last encoder values for the next iteration
	last_encoder1 = encoder1;
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bba:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <update_odometry+0x250>)
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
	last_encoder2 = encoder2;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <update_odometry+0x254>)
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
	last_encoder3 = encoder3;
 8001bd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <update_odometry+0x258>)
 8001bde:	edc3 7a00 	vstr	s15, [r3]
}
 8001be2:	bf00      	nop
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	f3af 8000 	nop.w
 8001bf0:	1afb8a9d 	.word	0x1afb8a9d
 8001bf4:	3f676821 	.word	0x3f676821
 8001bf8:	20000688 	.word	0x20000688
 8001bfc:	2000068c 	.word	0x2000068c
 8001c00:	20000690 	.word	0x20000690
 8001c04:	43c77dbb 	.word	0x43c77dbb
 8001c08:	447a0000 	.word	0x447a0000
 8001c0c:	20000644 	.word	0x20000644
 8001c10:	20000018 	.word	0x20000018
 8001c14:	20000640 	.word	0x20000640
 8001c18:	20000020 	.word	0x20000020
 8001c1c:	20000024 	.word	0x20000024
 8001c20:	20000694 	.word	0x20000694
 8001c24:	2000001c 	.word	0x2000001c
 8001c28:	20000680 	.word	0x20000680
 8001c2c:	20000698 	.word	0x20000698
 8001c30:	20000684 	.word	0x20000684

08001c34 <resetEncoders>:

void resetEncoders() {
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <resetEncoders+0x28>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <resetEncoders+0x2c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <resetEncoders+0x30>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000274 	.word	0x20000274
 8001c60:	200002bc 	.word	0x200002bc
 8001c64:	20000304 	.word	0x20000304

08001c68 <stopEncoders>:

void stopEncoders() {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001c6c:	213c      	movs	r1, #60	@ 0x3c
 8001c6e:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <stopEncoders+0x20>)
 8001c70:	f004 ffa0 	bl	8006bb4 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8001c74:	213c      	movs	r1, #60	@ 0x3c
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <stopEncoders+0x24>)
 8001c78:	f004 ff9c 	bl	8006bb4 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001c7c:	213c      	movs	r1, #60	@ 0x3c
 8001c7e:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <stopEncoders+0x28>)
 8001c80:	f004 ff98 	bl	8006bb4 <HAL_TIM_Encoder_Stop>
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000274 	.word	0x20000274
 8001c8c:	200002bc 	.word	0x200002bc
 8001c90:	20000304 	.word	0x20000304

08001c94 <startEncoders>:

void startEncoders() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c98:	213c      	movs	r1, #60	@ 0x3c
 8001c9a:	4806      	ldr	r0, [pc, #24]	@ (8001cb4 <startEncoders+0x20>)
 8001c9c:	f004 fefc 	bl	8006a98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001ca0:	213c      	movs	r1, #60	@ 0x3c
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <startEncoders+0x24>)
 8001ca4:	f004 fef8 	bl	8006a98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ca8:	213c      	movs	r1, #60	@ 0x3c
 8001caa:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <startEncoders+0x28>)
 8001cac:	f004 fef4 	bl	8006a98 <HAL_TIM_Encoder_Start>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000274 	.word	0x20000274
 8001cb8:	200002bc 	.word	0x200002bc
 8001cbc:	20000304 	.word	0x20000304

08001cc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	ed2d 8b02 	vpush	{d8}
 8001cc8:	b095      	sub	sp, #84	@ 0x54
 8001cca:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ccc:	f001 ff2a 	bl	8003b24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001cd0:	f000 fdea 	bl	80028a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001cd4:	f001 f9ec 	bl	80030b0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001cd8:	f001 f9ca 	bl	8003070 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001cdc:	f001 f99e 	bl	800301c <MX_USART2_UART_Init>
	MX_UART4_Init();
 8001ce0:	f001 f972 	bl	8002fc8 <MX_UART4_Init>
	MX_TIM1_Init();
 8001ce4:	f000 fe80 	bl	80029e8 <MX_TIM1_Init>
	MX_TIM8_Init();
 8001ce8:	f000 ffd2 	bl	8002c90 <MX_TIM8_Init>
	MX_I2C1_Init();
 8001cec:	f000 fe4e 	bl	800298c <MX_I2C1_Init>
	MX_TIM5_Init();
 8001cf0:	f000 ff7a 	bl	8002be8 <MX_TIM5_Init>
	MX_TIM10_Init();
 8001cf4:	f001 f81c 	bl	8002d30 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001cf8:	f001 f868 	bl	8002dcc <MX_TIM11_Init>
	MX_TIM13_Init();
 8001cfc:	f001 f916 	bl	8002f2c <MX_TIM13_Init>
	MX_TIM2_Init();
 8001d00:	f000 feca 	bl	8002a98 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001d04:	f000 ff1c 	bl	8002b40 <MX_TIM3_Init>
	MX_TIM12_Init();
 8001d08:	f001 f8ae 	bl	8002e68 <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	497a      	ldr	r1, [pc, #488]	@ (8001ef8 <main+0x238>)
 8001d10:	487a      	ldr	r0, [pc, #488]	@ (8001efc <main+0x23c>)
 8001d12:	f005 fde4 	bl	80078de <HAL_UART_Receive_DMA>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d16:	213c      	movs	r1, #60	@ 0x3c
 8001d18:	4879      	ldr	r0, [pc, #484]	@ (8001f00 <main+0x240>)
 8001d1a:	f004 febd 	bl	8006a98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001d1e:	213c      	movs	r1, #60	@ 0x3c
 8001d20:	4878      	ldr	r0, [pc, #480]	@ (8001f04 <main+0x244>)
 8001d22:	f004 feb9 	bl	8006a98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d26:	213c      	movs	r1, #60	@ 0x3c
 8001d28:	4877      	ldr	r0, [pc, #476]	@ (8001f08 <main+0x248>)
 8001d2a:	f004 feb5 	bl	8006a98 <HAL_TIM_Encoder_Start>
	bno055_assignI2C(&hi2c1);
 8001d2e:	4877      	ldr	r0, [pc, #476]	@ (8001f0c <main+0x24c>)
 8001d30:	f7ff fbaa 	bl	8001488 <bno055_assignI2C>
	bno055_setup();
 8001d34:	f7ff f9b6 	bl	80010a4 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001d38:	f7ff f9a1 	bl	800107e <bno055_setOperationModeNDOF>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		computeRobotMotion();
 8001d3c:	f7ff fcf4 	bl	8001728 <computeRobotMotion>
		/* ps5 controller */
		lx = (rxbuff[0] & 0x80) ?
 8001d40:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef8 <main+0x238>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da04      	bge.n	8001d54 <main+0x94>
 8001d4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef8 <main+0x238>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d52:	e001      	b.n	8001d58 <main+0x98>
 8001d54:	4b68      	ldr	r3, [pc, #416]	@ (8001ef8 <main+0x238>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 8001d58:	4a6d      	ldr	r2, [pc, #436]	@ (8001f10 <main+0x250>)
 8001d5a:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 8001d5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ef8 <main+0x238>)
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da04      	bge.n	8001d70 <main+0xb0>
 8001d66:	4b64      	ldr	r3, [pc, #400]	@ (8001ef8 <main+0x238>)
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d6e:	e001      	b.n	8001d74 <main+0xb4>
 8001d70:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <main+0x238>)
 8001d72:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 8001d74:	4a67      	ldr	r2, [pc, #412]	@ (8001f14 <main+0x254>)
 8001d76:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 8001d78:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef8 <main+0x238>)
 8001d7a:	789b      	ldrb	r3, [r3, #2]
 8001d7c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	da04      	bge.n	8001d8c <main+0xcc>
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <main+0x238>)
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d8a:	e001      	b.n	8001d90 <main+0xd0>
 8001d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <main+0x238>)
 8001d8e:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 8001d90:	4a61      	ldr	r2, [pc, #388]	@ (8001f18 <main+0x258>)
 8001d92:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 8001d94:	4b58      	ldr	r3, [pc, #352]	@ (8001ef8 <main+0x238>)
 8001d96:	78db      	ldrb	r3, [r3, #3]
 8001d98:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da04      	bge.n	8001da8 <main+0xe8>
 8001d9e:	4b56      	ldr	r3, [pc, #344]	@ (8001ef8 <main+0x238>)
 8001da0:	78db      	ldrb	r3, [r3, #3]
 8001da2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001da6:	e001      	b.n	8001dac <main+0xec>
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <main+0x238>)
 8001daa:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 8001dac:	4a5b      	ldr	r2, [pc, #364]	@ (8001f1c <main+0x25c>)
 8001dae:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8001db0:	4b51      	ldr	r3, [pc, #324]	@ (8001ef8 <main+0x238>)
 8001db2:	791b      	ldrb	r3, [r3, #4]
 8001db4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da04      	bge.n	8001dc4 <main+0x104>
 8001dba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <main+0x238>)
 8001dbc:	791b      	ldrb	r3, [r3, #4]
 8001dbe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dc2:	e001      	b.n	8001dc8 <main+0x108>
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef8 <main+0x238>)
 8001dc6:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 8001dc8:	4a55      	ldr	r2, [pc, #340]	@ (8001f20 <main+0x260>)
 8001dca:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef8 <main+0x238>)
 8001dce:	795b      	ldrb	r3, [r3, #5]
 8001dd0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da04      	bge.n	8001de0 <main+0x120>
 8001dd6:	4b48      	ldr	r3, [pc, #288]	@ (8001ef8 <main+0x238>)
 8001dd8:	795b      	ldrb	r3, [r3, #5]
 8001dda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dde:	e001      	b.n	8001de4 <main+0x124>
 8001de0:	4b45      	ldr	r3, [pc, #276]	@ (8001ef8 <main+0x238>)
 8001de2:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 8001de4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f24 <main+0x264>)
 8001de6:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 8001de8:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <main+0x238>)
 8001dea:	799b      	ldrb	r3, [r3, #6]
 8001dec:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da04      	bge.n	8001dfc <main+0x13c>
 8001df2:	4b41      	ldr	r3, [pc, #260]	@ (8001ef8 <main+0x238>)
 8001df4:	799b      	ldrb	r3, [r3, #6]
 8001df6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dfa:	e001      	b.n	8001e00 <main+0x140>
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef8 <main+0x238>)
 8001dfe:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 8001e00:	4a49      	ldr	r2, [pc, #292]	@ (8001f28 <main+0x268>)
 8001e02:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 8001e04:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef8 <main+0x238>)
 8001e06:	79db      	ldrb	r3, [r3, #7]
 8001e08:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da04      	bge.n	8001e18 <main+0x158>
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <main+0x238>)
 8001e10:	79db      	ldrb	r3, [r3, #7]
 8001e12:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e16:	e001      	b.n	8001e1c <main+0x15c>
 8001e18:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <main+0x238>)
 8001e1a:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 8001e1c:	4a43      	ldr	r2, [pc, #268]	@ (8001f2c <main+0x26c>)
 8001e1e:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 8001e20:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <main+0x238>)
 8001e22:	7a1b      	ldrb	r3, [r3, #8]
 8001e24:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da04      	bge.n	8001e34 <main+0x174>
 8001e2a:	4b33      	ldr	r3, [pc, #204]	@ (8001ef8 <main+0x238>)
 8001e2c:	7a1b      	ldrb	r3, [r3, #8]
 8001e2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e32:	e001      	b.n	8001e38 <main+0x178>
 8001e34:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <main+0x238>)
 8001e36:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 8001e38:	4a3d      	ldr	r2, [pc, #244]	@ (8001f30 <main+0x270>)
 8001e3a:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <main+0x238>)
 8001e3e:	7a5b      	ldrb	r3, [r3, #9]
 8001e40:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da04      	bge.n	8001e50 <main+0x190>
 8001e46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef8 <main+0x238>)
 8001e48:	7a5b      	ldrb	r3, [r3, #9]
 8001e4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e4e:	e001      	b.n	8001e54 <main+0x194>
 8001e50:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <main+0x238>)
 8001e52:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 8001e54:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <main+0x274>)
 8001e56:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 8001e58:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <main+0x238>)
 8001e5a:	7a9b      	ldrb	r3, [r3, #10]
 8001e5c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da04      	bge.n	8001e6c <main+0x1ac>
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <main+0x238>)
 8001e64:	7a9b      	ldrb	r3, [r3, #10]
 8001e66:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e6a:	e001      	b.n	8001e70 <main+0x1b0>
 8001e6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <main+0x238>)
 8001e6e:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 8001e70:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <main+0x278>)
 8001e72:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 8001e74:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <main+0x238>)
 8001e76:	7adb      	ldrb	r3, [r3, #11]
 8001e78:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da04      	bge.n	8001e88 <main+0x1c8>
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <main+0x238>)
 8001e80:	7adb      	ldrb	r3, [r3, #11]
 8001e82:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e86:	e001      	b.n	8001e8c <main+0x1cc>
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <main+0x238>)
 8001e8a:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 8001e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f3c <main+0x27c>)
 8001e8e:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <main+0x238>)
 8001e92:	7b1b      	ldrb	r3, [r3, #12]
 8001e94:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da04      	bge.n	8001ea4 <main+0x1e4>
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <main+0x238>)
 8001e9c:	7b1b      	ldrb	r3, [r3, #12]
 8001e9e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ea2:	e001      	b.n	8001ea8 <main+0x1e8>
 8001ea4:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <main+0x238>)
 8001ea6:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 8001ea8:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <main+0x280>)
 8001eaa:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <main+0x238>)
 8001eae:	7b5b      	ldrb	r3, [r3, #13]
 8001eb0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da04      	bge.n	8001ec0 <main+0x200>
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <main+0x238>)
 8001eb8:	7b5b      	ldrb	r3, [r3, #13]
 8001eba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ebe:	e001      	b.n	8001ec4 <main+0x204>
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <main+0x238>)
 8001ec2:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f44 <main+0x284>)
 8001ec6:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <main+0x238>)
 8001eca:	7b9b      	ldrb	r3, [r3, #14]
 8001ecc:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da04      	bge.n	8001edc <main+0x21c>
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <main+0x238>)
 8001ed4:	7b9b      	ldrb	r3, [r3, #14]
 8001ed6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eda:	e001      	b.n	8001ee0 <main+0x220>
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <main+0x238>)
 8001ede:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8001ee0:	4a19      	ldr	r2, [pc, #100]	@ (8001f48 <main+0x288>)
 8001ee2:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <main+0x238>)
 8001ee6:	7bdb      	ldrb	r3, [r3, #15]
 8001ee8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da2e      	bge.n	8001f4c <main+0x28c>
 8001eee:	4b02      	ldr	r3, [pc, #8]	@ (8001ef8 <main+0x238>)
 8001ef0:	7bdb      	ldrb	r3, [r3, #15]
 8001ef2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ef6:	e02b      	b.n	8001f50 <main+0x290>
 8001ef8:	20000630 	.word	0x20000630
 8001efc:	200004fc 	.word	0x200004fc
 8001f00:	20000274 	.word	0x20000274
 8001f04:	200002bc 	.word	0x200002bc
 8001f08:	20000304 	.word	0x20000304
 8001f0c:	20000220 	.word	0x20000220
 8001f10:	20000640 	.word	0x20000640
 8001f14:	20000644 	.word	0x20000644
 8001f18:	20000648 	.word	0x20000648
 8001f1c:	2000064c 	.word	0x2000064c
 8001f20:	20000650 	.word	0x20000650
 8001f24:	20000654 	.word	0x20000654
 8001f28:	20000658 	.word	0x20000658
 8001f2c:	2000065c 	.word	0x2000065c
 8001f30:	20000660 	.word	0x20000660
 8001f34:	20000664 	.word	0x20000664
 8001f38:	20000668 	.word	0x20000668
 8001f3c:	2000066c 	.word	0x2000066c
 8001f40:	20000670 	.word	0x20000670
 8001f44:	20000678 	.word	0x20000678
 8001f48:	20000674 	.word	0x20000674
 8001f4c:	4bac      	ldr	r3, [pc, #688]	@ (8002200 <main+0x540>)
 8001f4e:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 8001f50:	4aac      	ldr	r2, [pc, #688]	@ (8002204 <main+0x544>)
 8001f52:	6013      	str	r3, [r2, #0]
		//				lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1);
//		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly,
//				rx, ry, cro, squ, tri, cir);

		/* 3 encoders */
		uint16_t raw_counter1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001f54:	4bac      	ldr	r3, [pc, #688]	@ (8002208 <main+0x548>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint32_t raw_counter2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001f5c:	4bab      	ldr	r3, [pc, #684]	@ (800220c <main+0x54c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
		uint16_t raw_counter3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001f64:	4baa      	ldr	r3, [pc, #680]	@ (8002210 <main+0x550>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	84fb      	strh	r3, [r7, #38]	@ 0x26

		// Convert to signed values
		signed_counter1 =
				(raw_counter1 < 32768) ?
						(int16_t) raw_counter1 :
 8001f6c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
		signed_counter1 =
 8001f70:	4ba8      	ldr	r3, [pc, #672]	@ (8002214 <main+0x554>)
 8001f72:	801a      	strh	r2, [r3, #0]
						(int16_t) (raw_counter1 - 65536);
		signed_counter2 =
				(raw_counter2 < 2147483648) ?
						(int32_t) raw_counter2 :
 8001f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
		signed_counter2 =
 8001f76:	4aa8      	ldr	r2, [pc, #672]	@ (8002218 <main+0x558>)
 8001f78:	6013      	str	r3, [r2, #0]
						(int32_t) (raw_counter2 - 4294967296);
		signed_counter3 =
				(raw_counter3 < 32768) ?
						(int16_t) raw_counter3 :
 8001f7a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
		signed_counter3 =
 8001f7e:	4ba7      	ldr	r3, [pc, #668]	@ (800221c <main+0x55c>)
 8001f80:	801a      	strh	r2, [r3, #0]
						(int16_t) (raw_counter3 - 65536);

		/* IMU */
		bno055_vector_t v = bno055_getVectorEuler();
 8001f82:	f7ff f9fb 	bl	800137c <bno055_getVectorEuler>
 8001f86:	eeb0 4a40 	vmov.f32	s8, s0
 8001f8a:	eef0 4a60 	vmov.f32	s9, s1
 8001f8e:	eeb0 5a41 	vmov.f32	s10, s2
 8001f92:	eef0 5a61 	vmov.f32	s11, s3
 8001f96:	eeb0 6a42 	vmov.f32	s12, s4
 8001f9a:	eef0 6a62 	vmov.f32	s13, s5
 8001f9e:	eeb0 7a43 	vmov.f32	s14, s6
 8001fa2:	eef0 7a63 	vmov.f32	s15, s7
 8001fa6:	ed87 4b00 	vstr	d4, [r7]
 8001faa:	ed87 5b02 	vstr	d5, [r7, #8]
 8001fae:	ed87 6b04 	vstr	d6, [r7, #16]
 8001fb2:	ed87 7b06 	vstr	d7, [r7, #24]
		//		printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
		v = bno055_getVectorQuaternion();
 8001fb6:	f7ff fa24 	bl	8001402 <bno055_getVectorQuaternion>
 8001fba:	eeb0 4a40 	vmov.f32	s8, s0
 8001fbe:	eef0 4a60 	vmov.f32	s9, s1
 8001fc2:	eeb0 5a41 	vmov.f32	s10, s2
 8001fc6:	eef0 5a61 	vmov.f32	s11, s3
 8001fca:	eeb0 6a42 	vmov.f32	s12, s4
 8001fce:	eef0 6a62 	vmov.f32	s13, s5
 8001fd2:	eeb0 7a43 	vmov.f32	s14, s6
 8001fd6:	eef0 7a63 	vmov.f32	s15, s7
 8001fda:	ed87 4b00 	vstr	d4, [r7]
 8001fde:	ed87 5b02 	vstr	d5, [r7, #8]
 8001fe2:	ed87 6b04 	vstr	d6, [r7, #16]
 8001fe6:	ed87 7b06 	vstr	d7, [r7, #24]
		//		printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
		yaw = -(atan2(2.0 * (v.w * v.z + v.x * v.y),
 8001fea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff2:	f7fe fb21 	bl	8000638 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4614      	mov	r4, r2
 8001ffc:	461d      	mov	r5, r3
 8001ffe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002002:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002006:	f7fe fb17 	bl	8000638 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f95b 	bl	80002cc <__adddf3>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	f7fe f953 	bl	80002cc <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	ec43 2b18 	vmov	d8, r2, r3
				1.0 - 2.0 * (v.y * v.y + v.z * v.z))) * (180.0 / pi);
 800202e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002032:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002036:	f7fe faff 	bl	8000638 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4614      	mov	r4, r2
 8002040:	461d      	mov	r5, r3
 8002042:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204a:	f7fe faf5 	bl	8000638 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe f939 	bl	80002cc <__adddf3>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	f7fe f931 	bl	80002cc <__adddf3>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
		yaw = -(atan2(2.0 * (v.w * v.z + v.x * v.y),
 800206e:	f04f 0000 	mov.w	r0, #0
 8002072:	496b      	ldr	r1, [pc, #428]	@ (8002220 <main+0x560>)
 8002074:	f7fe f928 	bl	80002c8 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	ec43 2b17 	vmov	d7, r2, r3
 8002080:	eeb0 1a47 	vmov.f32	s2, s14
 8002084:	eef0 1a67 	vmov.f32	s3, s15
 8002088:	eeb0 0a48 	vmov.f32	s0, s16
 800208c:	eef0 0a68 	vmov.f32	s1, s17
 8002090:	f00b f90c 	bl	800d2ac <atan2>
 8002094:	ec53 2b10 	vmov	r2, r3, d0
 8002098:	4692      	mov	sl, r2
 800209a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
				1.0 - 2.0 * (v.y * v.y + v.z * v.z))) * (180.0 / pi);
 800209e:	a356      	add	r3, pc, #344	@ (adr r3, 80021f8 <main+0x538>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	4650      	mov	r0, sl
 80020a6:	4659      	mov	r1, fp
 80020a8:	f7fe fac6 	bl	8000638 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fdb8 	bl	8000c28 <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
		yaw = -(atan2(2.0 * (v.w * v.z + v.x * v.y),
 80020ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002224 <main+0x564>)
 80020bc:	6013      	str	r3, [r2, #0]
//				printf("Yaw: %.2f\r\n", yaw);
//		printf("Encoder position: %d %d %d X: %.2f Y: %.2f\r\n",
//				signed_counter1, signed_counter2, signed_counter3, x, y);

		printf(
 80020be:	4b55      	ldr	r3, [pc, #340]	@ (8002214 <main+0x554>)
 80020c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c4:	469c      	mov	ip, r3
 80020c6:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <main+0x558>)
 80020c8:	681e      	ldr	r6, [r3, #0]
 80020ca:	4b54      	ldr	r3, [pc, #336]	@ (800221c <main+0x55c>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	469e      	mov	lr, r3
 80020d2:	4b55      	ldr	r3, [pc, #340]	@ (8002228 <main+0x568>)
 80020d4:	ed93 7b00 	vldr	d7, [r3]
 80020d8:	4954      	ldr	r1, [pc, #336]	@ (800222c <main+0x56c>)
 80020da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020de:	4c54      	ldr	r4, [pc, #336]	@ (8002230 <main+0x570>)
 80020e0:	e9d4 4500 	ldrd	r4, r5, [r4]
 80020e4:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <main+0x574>)
 80020e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80020ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80020f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020f6:	ed8d 7b00 	vstr	d7, [sp]
 80020fa:	4673      	mov	r3, lr
 80020fc:	4632      	mov	r2, r6
 80020fe:	4661      	mov	r1, ip
 8002100:	484d      	ldr	r0, [pc, #308]	@ (8002238 <main+0x578>)
 8002102:	f007 fc27 	bl	8009954 <iprintf>
				vy);

		/* 3 wheel */
		uint16_t dutycycle;

		dutycycle = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	84bb      	strh	r3, [r7, #36]	@ 0x24
		MovementState current_state;
		MovementState last_state;
		/* chassis */
		//motors stop
		if (ly >= Buff2 && ly <= Buff1 && lx >= Buff2 && lx <= Buff1
 800210a:	4b4c      	ldr	r3, [pc, #304]	@ (800223c <main+0x57c>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b4c      	ldr	r3, [pc, #304]	@ (8002240 <main+0x580>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	db35      	blt.n	8002182 <main+0x4c2>
 8002116:	4b49      	ldr	r3, [pc, #292]	@ (800223c <main+0x57c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <main+0x584>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	dc2f      	bgt.n	8002182 <main+0x4c2>
 8002122:	4b49      	ldr	r3, [pc, #292]	@ (8002248 <main+0x588>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b46      	ldr	r3, [pc, #280]	@ (8002240 <main+0x580>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	db29      	blt.n	8002182 <main+0x4c2>
 800212e:	4b46      	ldr	r3, [pc, #280]	@ (8002248 <main+0x588>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <main+0x584>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	dc23      	bgt.n	8002182 <main+0x4c2>
				&& rx >= Buff2 && rx <= Buff1) {
 800213a:	4b44      	ldr	r3, [pc, #272]	@ (800224c <main+0x58c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b40      	ldr	r3, [pc, #256]	@ (8002240 <main+0x580>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	db1d      	blt.n	8002182 <main+0x4c2>
 8002146:	4b41      	ldr	r3, [pc, #260]	@ (800224c <main+0x58c>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <main+0x584>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	dc17      	bgt.n	8002182 <main+0x4c2>

			dutycycle = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 8002156:	4a3e      	ldr	r2, [pc, #248]	@ (8002250 <main+0x590>)
 8002158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800215a:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 800215c:	4a3d      	ldr	r2, [pc, #244]	@ (8002254 <main+0x594>)
 800215e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002160:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8002162:	4a3d      	ldr	r2, [pc, #244]	@ (8002258 <main+0x598>)
 8002164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002166:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002168:	2100      	movs	r1, #0
 800216a:	483c      	ldr	r0, [pc, #240]	@ (800225c <main+0x59c>)
 800216c:	f004 fb26 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002170:	2100      	movs	r1, #0
 8002172:	483b      	ldr	r0, [pc, #236]	@ (8002260 <main+0x5a0>)
 8002174:	f004 fb22 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002178:	2100      	movs	r1, #0
 800217a:	483a      	ldr	r0, [pc, #232]	@ (8002264 <main+0x5a4>)
 800217c:	f004 fb1e 	bl	80067bc <HAL_TIM_PWM_Start>
 8002180:	e228      	b.n	80025d4 <main+0x914>

		}

		//	  	//forward

		else if (ly >= Buff1 && (lx <= BuffP && lx >= BuffN))
 8002182:	4b2e      	ldr	r3, [pc, #184]	@ (800223c <main+0x57c>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <main+0x584>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	db74      	blt.n	8002278 <main+0x5b8>
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <main+0x588>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b35      	ldr	r3, [pc, #212]	@ (8002268 <main+0x5a8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	dc6e      	bgt.n	8002278 <main+0x5b8>
 800219a:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <main+0x588>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b33      	ldr	r3, [pc, #204]	@ (800226c <main+0x5ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	db68      	blt.n	8002278 <main+0x5b8>

		{

			dutycycle = map(ly, Buff1, 127, 0, fast);
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <main+0x57c>)
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <main+0x584>)
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	4b30      	ldr	r3, [pc, #192]	@ (8002270 <main+0x5b0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2300      	movs	r3, #0
 80021b6:	227f      	movs	r2, #127	@ 0x7f
 80021b8:	f7ff fbda 	bl	8001970 <map>
 80021bc:	4603      	mov	r3, r0
 80021be:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM10->CCR1 = dutycycle;
 80021c0:	4a24      	ldr	r2, [pc, #144]	@ (8002254 <main+0x594>)
 80021c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021c4:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 80021c6:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <main+0x598>)
 80021c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021ca:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80021cc:	2100      	movs	r1, #0
 80021ce:	4824      	ldr	r0, [pc, #144]	@ (8002260 <main+0x5a0>)
 80021d0:	f004 faf4 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80021d4:	2100      	movs	r1, #0
 80021d6:	4823      	ldr	r0, [pc, #140]	@ (8002264 <main+0x5a4>)
 80021d8:	f004 faf0 	bl	80067bc <HAL_TIM_PWM_Start>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80021dc:	2201      	movs	r2, #1
 80021de:	2102      	movs	r1, #2
 80021e0:	4824      	ldr	r0, [pc, #144]	@ (8002274 <main+0x5b4>)
 80021e2:	f002 fbdd 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2104      	movs	r1, #4
 80021ea:	4822      	ldr	r0, [pc, #136]	@ (8002274 <main+0x5b4>)
 80021ec:	f002 fbd8 	bl	80049a0 <HAL_GPIO_WritePin>
			current_state = FORWARD;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80021f6:	e1ed      	b.n	80025d4 <main+0x914>
 80021f8:	1a674644 	.word	0x1a674644
 80021fc:	404ca5dc 	.word	0x404ca5dc
 8002200:	20000630 	.word	0x20000630
 8002204:	2000067c 	.word	0x2000067c
 8002208:	20000274 	.word	0x20000274
 800220c:	200002bc 	.word	0x200002bc
 8002210:	20000304 	.word	0x20000304
 8002214:	20000620 	.word	0x20000620
 8002218:	20000624 	.word	0x20000624
 800221c:	20000628 	.word	0x20000628
 8002220:	3ff00000 	.word	0x3ff00000
 8002224:	2000062c 	.word	0x2000062c
 8002228:	200006a0 	.word	0x200006a0
 800222c:	200006a8 	.word	0x200006a8
 8002230:	200006b0 	.word	0x200006b0
 8002234:	200006b8 	.word	0x200006b8
 8002238:	0800d9d4 	.word	0x0800d9d4
 800223c:	20000644 	.word	0x20000644
 8002240:	2000001c 	.word	0x2000001c
 8002244:	20000018 	.word	0x20000018
 8002248:	20000640 	.word	0x20000640
 800224c:	20000648 	.word	0x20000648
 8002250:	40001800 	.word	0x40001800
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800
 800225c:	2000046c 	.word	0x2000046c
 8002260:	200003dc 	.word	0x200003dc
 8002264:	20000424 	.word	0x20000424
 8002268:	20000020 	.word	0x20000020
 800226c:	20000024 	.word	0x20000024
 8002270:	20000014 	.word	0x20000014
 8002274:	40020800 	.word	0x40020800

		}

		// backward

		else if (ly <= Buff2 && (lx <= BuffP && lx >= BuffN))
 8002278:	4ba2      	ldr	r3, [pc, #648]	@ (8002504 <main+0x844>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4ba2      	ldr	r3, [pc, #648]	@ (8002508 <main+0x848>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	dc35      	bgt.n	80022f0 <main+0x630>
 8002284:	4ba1      	ldr	r3, [pc, #644]	@ (800250c <main+0x84c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4ba1      	ldr	r3, [pc, #644]	@ (8002510 <main+0x850>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	dc2f      	bgt.n	80022f0 <main+0x630>
 8002290:	4b9e      	ldr	r3, [pc, #632]	@ (800250c <main+0x84c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b9f      	ldr	r3, [pc, #636]	@ (8002514 <main+0x854>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	db29      	blt.n	80022f0 <main+0x630>

		{

			dutycycle = map(ly, -128, Buff2, fast, 0);
 800229c:	4b99      	ldr	r3, [pc, #612]	@ (8002504 <main+0x844>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	4b99      	ldr	r3, [pc, #612]	@ (8002508 <main+0x848>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002518 <main+0x858>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2100      	movs	r1, #0
 80022aa:	9100      	str	r1, [sp, #0]
 80022ac:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80022b0:	f7ff fb5e 	bl	8001970 <map>
 80022b4:	4603      	mov	r3, r0
 80022b6:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM10->CCR1 = dutycycle;
 80022b8:	4a98      	ldr	r2, [pc, #608]	@ (800251c <main+0x85c>)
 80022ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022bc:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 80022be:	4a98      	ldr	r2, [pc, #608]	@ (8002520 <main+0x860>)
 80022c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022c2:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80022c4:	2100      	movs	r1, #0
 80022c6:	4897      	ldr	r0, [pc, #604]	@ (8002524 <main+0x864>)
 80022c8:	f004 fa78 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80022cc:	2100      	movs	r1, #0
 80022ce:	4896      	ldr	r0, [pc, #600]	@ (8002528 <main+0x868>)
 80022d0:	f004 fa74 	bl	80067bc <HAL_TIM_PWM_Start>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2102      	movs	r1, #2
 80022d8:	4894      	ldr	r0, [pc, #592]	@ (800252c <main+0x86c>)
 80022da:	f002 fb61 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80022de:	2201      	movs	r2, #1
 80022e0:	2104      	movs	r1, #4
 80022e2:	4892      	ldr	r0, [pc, #584]	@ (800252c <main+0x86c>)
 80022e4:	f002 fb5c 	bl	80049a0 <HAL_GPIO_WritePin>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
			current_state = BACKWARD;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80022ee:	e171      	b.n	80025d4 <main+0x914>

		}

		//	right

		else if (lx >= Buff1 && (ly <= BuffP && ly >= BuffN))
 80022f0:	4b86      	ldr	r3, [pc, #536]	@ (800250c <main+0x84c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002530 <main+0x870>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	db5a      	blt.n	80023b2 <main+0x6f2>
 80022fc:	4b81      	ldr	r3, [pc, #516]	@ (8002504 <main+0x844>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b83      	ldr	r3, [pc, #524]	@ (8002510 <main+0x850>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	dc54      	bgt.n	80023b2 <main+0x6f2>
 8002308:	4b7e      	ldr	r3, [pc, #504]	@ (8002504 <main+0x844>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b81      	ldr	r3, [pc, #516]	@ (8002514 <main+0x854>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	db4e      	blt.n	80023b2 <main+0x6f2>

		{

			dutycycle = map(lx, Buff1, 127, 0, fast);
 8002314:	4b7d      	ldr	r3, [pc, #500]	@ (800250c <main+0x84c>)
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	4b85      	ldr	r3, [pc, #532]	@ (8002530 <main+0x870>)
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	4b7e      	ldr	r3, [pc, #504]	@ (8002518 <main+0x858>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	227f      	movs	r2, #127	@ 0x7f
 8002326:	f7ff fb23 	bl	8001970 <map>
 800232a:	4603      	mov	r3, r0
 800232c:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 800232e:	4a81      	ldr	r2, [pc, #516]	@ (8002534 <main+0x874>)
 8002330:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002332:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = cos30 * dutycycle;
 8002334:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	4b7e      	ldr	r3, [pc, #504]	@ (8002538 <main+0x878>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	4b74      	ldr	r3, [pc, #464]	@ (800251c <main+0x85c>)
 800234a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234e:	ee17 2a90 	vmov	r2, s15
 8002352:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM11->CCR1 = cos30 * dutycycle;
 8002354:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <main+0x878>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002368:	4b6d      	ldr	r3, [pc, #436]	@ (8002520 <main+0x860>)
 800236a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236e:	ee17 2a90 	vmov	r2, s15
 8002372:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002374:	2100      	movs	r1, #0
 8002376:	4871      	ldr	r0, [pc, #452]	@ (800253c <main+0x87c>)
 8002378:	f004 fa20 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800237c:	2100      	movs	r1, #0
 800237e:	4869      	ldr	r0, [pc, #420]	@ (8002524 <main+0x864>)
 8002380:	f004 fa1c 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002384:	2100      	movs	r1, #0
 8002386:	4868      	ldr	r0, [pc, #416]	@ (8002528 <main+0x868>)
 8002388:	f004 fa18 	bl	80067bc <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	2101      	movs	r1, #1
 8002390:	4866      	ldr	r0, [pc, #408]	@ (800252c <main+0x86c>)
 8002392:	f002 fb05 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2102      	movs	r1, #2
 800239a:	4864      	ldr	r0, [pc, #400]	@ (800252c <main+0x86c>)
 800239c:	f002 fb00 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2104      	movs	r1, #4
 80023a4:	4861      	ldr	r0, [pc, #388]	@ (800252c <main+0x86c>)
 80023a6:	f002 fafb 	bl	80049a0 <HAL_GPIO_WritePin>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
			current_state = RIGHT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80023b0:	e110      	b.n	80025d4 <main+0x914>

		}

		// left

		else if (lx <= Buff2 && (ly <= BuffP && ly >= BuffN))
 80023b2:	4b56      	ldr	r3, [pc, #344]	@ (800250c <main+0x84c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b54      	ldr	r3, [pc, #336]	@ (8002508 <main+0x848>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dc5b      	bgt.n	8002476 <main+0x7b6>
 80023be:	4b51      	ldr	r3, [pc, #324]	@ (8002504 <main+0x844>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <main+0x850>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dc55      	bgt.n	8002476 <main+0x7b6>
 80023ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002504 <main+0x844>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b51      	ldr	r3, [pc, #324]	@ (8002514 <main+0x854>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	db4f      	blt.n	8002476 <main+0x7b6>

		{

			dutycycle = map(lx, -128, Buff2, fast, 0);
 80023d6:	4b4d      	ldr	r3, [pc, #308]	@ (800250c <main+0x84c>)
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	4b4b      	ldr	r3, [pc, #300]	@ (8002508 <main+0x848>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b4e      	ldr	r3, [pc, #312]	@ (8002518 <main+0x858>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2100      	movs	r1, #0
 80023e4:	9100      	str	r1, [sp, #0]
 80023e6:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80023ea:	f7ff fac1 	bl	8001970 <map>
 80023ee:	4603      	mov	r3, r0
 80023f0:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 80023f2:	4a50      	ldr	r2, [pc, #320]	@ (8002534 <main+0x874>)
 80023f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023f6:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = cos30 * dutycycle;
 80023f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002402:	4b4d      	ldr	r3, [pc, #308]	@ (8002538 <main+0x878>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	4b43      	ldr	r3, [pc, #268]	@ (800251c <main+0x85c>)
 800240e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002412:	ee17 2a90 	vmov	r2, s15
 8002416:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM11->CCR1 = cos30 * dutycycle;
 8002418:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002422:	4b45      	ldr	r3, [pc, #276]	@ (8002538 <main+0x878>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	4b3c      	ldr	r3, [pc, #240]	@ (8002520 <main+0x860>)
 800242e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002432:	ee17 2a90 	vmov	r2, s15
 8002436:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002438:	2100      	movs	r1, #0
 800243a:	4840      	ldr	r0, [pc, #256]	@ (800253c <main+0x87c>)
 800243c:	f004 f9be 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002440:	2100      	movs	r1, #0
 8002442:	4838      	ldr	r0, [pc, #224]	@ (8002524 <main+0x864>)
 8002444:	f004 f9ba 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002448:	2100      	movs	r1, #0
 800244a:	4837      	ldr	r0, [pc, #220]	@ (8002528 <main+0x868>)
 800244c:	f004 f9b6 	bl	80067bc <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	2101      	movs	r1, #1
 8002454:	4835      	ldr	r0, [pc, #212]	@ (800252c <main+0x86c>)
 8002456:	f002 faa3 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800245a:	2201      	movs	r2, #1
 800245c:	2102      	movs	r1, #2
 800245e:	4833      	ldr	r0, [pc, #204]	@ (800252c <main+0x86c>)
 8002460:	f002 fa9e 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	2104      	movs	r1, #4
 8002468:	4830      	ldr	r0, [pc, #192]	@ (800252c <main+0x86c>)
 800246a:	f002 fa99 	bl	80049a0 <HAL_GPIO_WritePin>
			current_state = LEFT;
 800246e:	2304      	movs	r3, #4
 8002470:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002474:	e0ae      	b.n	80025d4 <main+0x914>

		}

		//clockwise

		else if (rx >= Buff1 && (ry <= BuffP && ry >= BuffN)) {
 8002476:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <main+0x880>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <main+0x870>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	db62      	blt.n	8002548 <main+0x888>
 8002482:	4b30      	ldr	r3, [pc, #192]	@ (8002544 <main+0x884>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <main+0x850>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	dc5c      	bgt.n	8002548 <main+0x888>
 800248e:	4b2d      	ldr	r3, [pc, #180]	@ (8002544 <main+0x884>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <main+0x854>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	db56      	blt.n	8002548 <main+0x888>

			dutycycle = map(rx, Buff1, 127, 0, 100);
 800249a:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <main+0x880>)
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <main+0x870>)
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	2364      	movs	r3, #100	@ 0x64
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2300      	movs	r3, #0
 80024a8:	227f      	movs	r2, #127	@ 0x7f
 80024aa:	f7ff fa61 	bl	8001970 <map>
 80024ae:	4603      	mov	r3, r0
 80024b0:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 80024b2:	4a20      	ldr	r2, [pc, #128]	@ (8002534 <main+0x874>)
 80024b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024b6:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 80024b8:	4a18      	ldr	r2, [pc, #96]	@ (800251c <main+0x85c>)
 80024ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024bc:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 80024be:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <main+0x860>)
 80024c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024c2:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80024c4:	2100      	movs	r1, #0
 80024c6:	481d      	ldr	r0, [pc, #116]	@ (800253c <main+0x87c>)
 80024c8:	f004 f978 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80024cc:	2100      	movs	r1, #0
 80024ce:	4815      	ldr	r0, [pc, #84]	@ (8002524 <main+0x864>)
 80024d0:	f004 f974 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80024d4:	2100      	movs	r1, #0
 80024d6:	4814      	ldr	r0, [pc, #80]	@ (8002528 <main+0x868>)
 80024d8:	f004 f970 	bl	80067bc <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80024dc:	2201      	movs	r2, #1
 80024de:	2101      	movs	r1, #1
 80024e0:	4812      	ldr	r0, [pc, #72]	@ (800252c <main+0x86c>)
 80024e2:	f002 fa5d 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2102      	movs	r1, #2
 80024ea:	4810      	ldr	r0, [pc, #64]	@ (800252c <main+0x86c>)
 80024ec:	f002 fa58 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2104      	movs	r1, #4
 80024f4:	480d      	ldr	r0, [pc, #52]	@ (800252c <main+0x86c>)
 80024f6:	f002 fa53 	bl	80049a0 <HAL_GPIO_WritePin>
			current_state = CLOCKWISE;
 80024fa:	2305      	movs	r3, #5
 80024fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002500:	e068      	b.n	80025d4 <main+0x914>
 8002502:	bf00      	nop
 8002504:	20000644 	.word	0x20000644
 8002508:	2000001c 	.word	0x2000001c
 800250c:	20000640 	.word	0x20000640
 8002510:	20000020 	.word	0x20000020
 8002514:	20000024 	.word	0x20000024
 8002518:	20000014 	.word	0x20000014
 800251c:	40014400 	.word	0x40014400
 8002520:	40014800 	.word	0x40014800
 8002524:	200003dc 	.word	0x200003dc
 8002528:	20000424 	.word	0x20000424
 800252c:	40020800 	.word	0x40020800
 8002530:	20000018 	.word	0x20000018
 8002534:	40001800 	.word	0x40001800
 8002538:	20000028 	.word	0x20000028
 800253c:	2000046c 	.word	0x2000046c
 8002540:	20000648 	.word	0x20000648
 8002544:	2000064c 	.word	0x2000064c

		}

		// anticlockwise

		else if (rx <= Buff2 && (ry <= BuffP && ry >= BuffN)) {
 8002548:	4b81      	ldr	r3, [pc, #516]	@ (8002750 <main+0xa90>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b81      	ldr	r3, [pc, #516]	@ (8002754 <main+0xa94>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	dc3f      	bgt.n	80025d4 <main+0x914>
 8002554:	4b80      	ldr	r3, [pc, #512]	@ (8002758 <main+0xa98>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b80      	ldr	r3, [pc, #512]	@ (800275c <main+0xa9c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	dc39      	bgt.n	80025d4 <main+0x914>
 8002560:	4b7d      	ldr	r3, [pc, #500]	@ (8002758 <main+0xa98>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b7e      	ldr	r3, [pc, #504]	@ (8002760 <main+0xaa0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	db33      	blt.n	80025d4 <main+0x914>

			dutycycle = map(rx, -128, Buff2, 100, 0);
 800256c:	4b78      	ldr	r3, [pc, #480]	@ (8002750 <main+0xa90>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <main+0xa94>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2364      	movs	r3, #100	@ 0x64
 800257a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800257e:	f7ff f9f7 	bl	8001970 <map>
 8002582:	4603      	mov	r3, r0
 8002584:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 8002586:	4a77      	ldr	r2, [pc, #476]	@ (8002764 <main+0xaa4>)
 8002588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800258a:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 800258c:	4a76      	ldr	r2, [pc, #472]	@ (8002768 <main+0xaa8>)
 800258e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002590:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8002592:	4a76      	ldr	r2, [pc, #472]	@ (800276c <main+0xaac>)
 8002594:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002596:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002598:	2100      	movs	r1, #0
 800259a:	4875      	ldr	r0, [pc, #468]	@ (8002770 <main+0xab0>)
 800259c:	f004 f90e 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80025a0:	2100      	movs	r1, #0
 80025a2:	4874      	ldr	r0, [pc, #464]	@ (8002774 <main+0xab4>)
 80025a4:	f004 f90a 	bl	80067bc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80025a8:	2100      	movs	r1, #0
 80025aa:	4873      	ldr	r0, [pc, #460]	@ (8002778 <main+0xab8>)
 80025ac:	f004 f906 	bl	80067bc <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2101      	movs	r1, #1
 80025b4:	4871      	ldr	r0, [pc, #452]	@ (800277c <main+0xabc>)
 80025b6:	f002 f9f3 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	2102      	movs	r1, #2
 80025be:	486f      	ldr	r0, [pc, #444]	@ (800277c <main+0xabc>)
 80025c0:	f002 f9ee 	bl	80049a0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80025c4:	2201      	movs	r2, #1
 80025c6:	2104      	movs	r1, #4
 80025c8:	486c      	ldr	r0, [pc, #432]	@ (800277c <main+0xabc>)
 80025ca:	f002 f9e9 	bl	80049a0 <HAL_GPIO_WritePin>
			current_state = ANTICLOCKWISE;
 80025ce:	2306      	movs	r3, #6
 80025d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);

		}

		if (current_state == CLOCKWISE || current_state == ANTICLOCKWISE) {
 80025d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d003      	beq.n	80025e4 <main+0x924>
 80025dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d102      	bne.n	80025ea <main+0x92a>
			stopEncoders();
 80025e4:	f7ff fb40 	bl	8001c68 <stopEncoders>
 80025e8:	e001      	b.n	80025ee <main+0x92e>
		} else {
			startEncoders();
 80025ea:	f7ff fb53 	bl	8001c94 <startEncoders>
//			//motor 3
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
//
//		}
		update_odometry(signed_counter1, signed_counter2, signed_counter3);
 80025ee:	4b64      	ldr	r3, [pc, #400]	@ (8002780 <main+0xac0>)
 80025f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f4:	4a63      	ldr	r2, [pc, #396]	@ (8002784 <main+0xac4>)
 80025f6:	6811      	ldr	r1, [r2, #0]
 80025f8:	4a63      	ldr	r2, [pc, #396]	@ (8002788 <main+0xac8>)
 80025fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f9d2 	bl	80019a8 <update_odometry>
		/* Stepper */

		/* Test */
		direction1 = 1;
 8002604:	4b61      	ldr	r3, [pc, #388]	@ (800278c <main+0xacc>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]
		stepper_running = 1;
 800260a:	4b61      	ldr	r3, [pc, #388]	@ (8002790 <main+0xad0>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]
		stepper_running1 = 1;
 8002610:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <main+0xad4>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
		/* Test */
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 8002616:	4b5d      	ldr	r3, [pc, #372]	@ (800278c <main+0xacc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	2108      	movs	r1, #8
 8002628:	4854      	ldr	r0, [pc, #336]	@ (800277c <main+0xabc>)
 800262a:	f002 f9b9 	bl	80049a0 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,
 800262e:	4b57      	ldr	r3, [pc, #348]	@ (800278c <main+0xacc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	2140      	movs	r1, #64	@ 0x40
 8002640:	484e      	ldr	r0, [pc, #312]	@ (800277c <main+0xabc>)
 8002642:	f002 f9ad 	bl	80049a0 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 8002646:	4b54      	ldr	r3, [pc, #336]	@ (8002798 <main+0xad8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d10c      	bne.n	8002668 <main+0x9a8>
 800264e:	4b53      	ldr	r3, [pc, #332]	@ (800279c <main+0xadc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <main+0x9a8>
			direction1 = 1;  // Set to Anti-clockwise
 8002656:	4b4d      	ldr	r3, [pc, #308]	@ (800278c <main+0xacc>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 800265c:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <main+0xad0>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8002662:	4b4c      	ldr	r3, [pc, #304]	@ (8002794 <main+0xad4>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8002668:	4b4d      	ldr	r3, [pc, #308]	@ (80027a0 <main+0xae0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10c      	bne.n	800268a <main+0x9ca>
 8002670:	4b4c      	ldr	r3, [pc, #304]	@ (80027a4 <main+0xae4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <main+0x9ca>
			direction1 = 0;  // Set to Clockwise
 8002678:	4b44      	ldr	r3, [pc, #272]	@ (800278c <main+0xacc>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 800267e:	4b44      	ldr	r3, [pc, #272]	@ (8002790 <main+0xad0>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8002684:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <main+0xad4>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]
		}
		if (cir == 1 && !prev_cir) {
 800268a:	4b47      	ldr	r3, [pc, #284]	@ (80027a8 <main+0xae8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d109      	bne.n	80026a6 <main+0x9e6>
 8002692:	4b46      	ldr	r3, [pc, #280]	@ (80027ac <main+0xaec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <main+0x9e6>
			stepper_running = 0;
 800269a:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <main+0xad0>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
			stepper_running1 = 0;
 80026a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <main+0xad4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
		}
		prev_ll1 = ll1;
 80026a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002798 <main+0xad8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a3c      	ldr	r2, [pc, #240]	@ (800279c <main+0xadc>)
 80026ac:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 80026ae:	4b3c      	ldr	r3, [pc, #240]	@ (80027a0 <main+0xae0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a3c      	ldr	r2, [pc, #240]	@ (80027a4 <main+0xae4>)
 80026b4:	6013      	str	r3, [r2, #0]
		prev_cir = cir;
 80026b6:	4b3c      	ldr	r3, [pc, #240]	@ (80027a8 <main+0xae8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3c      	ldr	r2, [pc, #240]	@ (80027ac <main+0xaec>)
 80026bc:	6013      	str	r3, [r2, #0]

		if (stepper_running && (HAL_GetTick() - last_step_time) >= step_delay) {
 80026be:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <main+0xad0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d023      	beq.n	800270e <main+0xa4e>
 80026c6:	f001 fa93 	bl	8003bf0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b38      	ldr	r3, [pc, #224]	@ (80027b0 <main+0xaf0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	4a38      	ldr	r2, [pc, #224]	@ (80027b4 <main+0xaf4>)
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d319      	bcc.n	800270e <main+0xa4e>
			last_step_time = HAL_GetTick();
 80026da:	f001 fa89 	bl	8003bf0 <HAL_GetTick>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a33      	ldr	r2, [pc, #204]	@ (80027b0 <main+0xaf0>)
 80026e2:	6013      	str	r3, [r2, #0]

			if (step_state == 0) {
 80026e4:	4b34      	ldr	r3, [pc, #208]	@ (80027b8 <main+0xaf8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d108      	bne.n	80026fe <main+0xa3e>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 80026ec:	2201      	movs	r2, #1
 80026ee:	2120      	movs	r1, #32
 80026f0:	4822      	ldr	r0, [pc, #136]	@ (800277c <main+0xabc>)
 80026f2:	f002 f955 	bl	80049a0 <HAL_GPIO_WritePin>
				step_state = 1;
 80026f6:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <main+0xaf8>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e007      	b.n	800270e <main+0xa4e>
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 80026fe:	2200      	movs	r2, #0
 8002700:	2120      	movs	r1, #32
 8002702:	481e      	ldr	r0, [pc, #120]	@ (800277c <main+0xabc>)
 8002704:	f002 f94c 	bl	80049a0 <HAL_GPIO_WritePin>
				step_state = 0;
 8002708:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <main+0xaf8>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
			}
		}

		if (stepper_running1
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <main+0xad4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d063      	beq.n	80027de <main+0xb1e>
				&& (HAL_GetTick() - last_step_time1) >= step_delay1) {
 8002716:	f001 fa6b 	bl	8003bf0 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <main+0xafc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	4a27      	ldr	r2, [pc, #156]	@ (80027c0 <main+0xb00>)
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4293      	cmp	r3, r2
 8002728:	d359      	bcc.n	80027de <main+0xb1e>
			last_step_time1 = HAL_GetTick(); // Update last step time
 800272a:	f001 fa61 	bl	8003bf0 <HAL_GetTick>
 800272e:	4603      	mov	r3, r0
 8002730:	4a22      	ldr	r2, [pc, #136]	@ (80027bc <main+0xafc>)
 8002732:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 8002734:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <main+0xb04>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d147      	bne.n	80027cc <main+0xb0c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Step HIGH
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002742:	4821      	ldr	r0, [pc, #132]	@ (80027c8 <main+0xb08>)
 8002744:	f002 f92c 	bl	80049a0 <HAL_GPIO_WritePin>
				step_state1 = 1;
 8002748:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <main+0xb04>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e046      	b.n	80027de <main+0xb1e>
 8002750:	20000648 	.word	0x20000648
 8002754:	2000001c 	.word	0x2000001c
 8002758:	2000064c 	.word	0x2000064c
 800275c:	20000020 	.word	0x20000020
 8002760:	20000024 	.word	0x20000024
 8002764:	40001800 	.word	0x40001800
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800
 8002770:	2000046c 	.word	0x2000046c
 8002774:	200003dc 	.word	0x200003dc
 8002778:	20000424 	.word	0x20000424
 800277c:	40020800 	.word	0x40020800
 8002780:	20000620 	.word	0x20000620
 8002784:	20000624 	.word	0x20000624
 8002788:	20000628 	.word	0x20000628
 800278c:	2000000c 	.word	0x2000000c
 8002790:	20000600 	.word	0x20000600
 8002794:	20000604 	.word	0x20000604
 8002798:	20000670 	.word	0x20000670
 800279c:	20000618 	.word	0x20000618
 80027a0:	20000674 	.word	0x20000674
 80027a4:	2000061c 	.word	0x2000061c
 80027a8:	2000065c 	.word	0x2000065c
 80027ac:	2000060c 	.word	0x2000060c
 80027b0:	200005ec 	.word	0x200005ec
 80027b4:	20000010 	.word	0x20000010
 80027b8:	200005f4 	.word	0x200005f4
 80027bc:	200005f0 	.word	0x200005f0
 80027c0:	200005fc 	.word	0x200005fc
 80027c4:	200005f8 	.word	0x200005f8
 80027c8:	40020400 	.word	0x40020400
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
 80027cc:	2200      	movs	r2, #0
 80027ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027d2:	4829      	ldr	r0, [pc, #164]	@ (8002878 <main+0xbb8>)
 80027d4:	f002 f8e4 	bl	80049a0 <HAL_GPIO_WritePin>
				step_state1 = 0;
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <main+0xbbc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
		}

		/* IMU */

		/* Dribbling */
		if (tri == 1 && !prev_tri) {
 80027de:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <main+0xbc0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d106      	bne.n	80027f4 <main+0xb34>
 80027e6:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <main+0xbc4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <main+0xb34>
			ebike_running = 1;
 80027ee:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <main+0xbc8>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
		}
		if (cro == 1 && !prev_cro) {  // cro button pressed
 80027f4:	4b25      	ldr	r3, [pc, #148]	@ (800288c <main+0xbcc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10c      	bne.n	8002816 <main+0xb56>
 80027fc:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <main+0xbd0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <main+0xb56>
			printf("cross pressed");
 8002804:	4823      	ldr	r0, [pc, #140]	@ (8002894 <main+0xbd4>)
 8002806:	f007 f8a5 	bl	8009954 <iprintf>
			direction1 = 0;  // Set to Clockwise
 800280a:	4b23      	ldr	r3, [pc, #140]	@ (8002898 <main+0xbd8>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
			ebike_running = 0;
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <main+0xbc8>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
		}
		prev_tri = tri;
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <main+0xbc0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <main+0xbc4>)
 800281c:	6013      	str	r3, [r2, #0]
		prev_cro = cro;
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <main+0xbcc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <main+0xbd0>)
 8002824:	6013      	str	r3, [r2, #0]
		if (ebike_running) {
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <main+0xbc8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <main+0xb8c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 800282e:	2201      	movs	r2, #1
 8002830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002834:	4819      	ldr	r0, [pc, #100]	@ (800289c <main+0xbdc>)
 8002836:	f002 f8b3 	bl	80049a0 <HAL_GPIO_WritePin>
			TIM13->CCR1 = (1350 * 999) / 3500;  //rpm 2000 test
 800283a:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <main+0xbe0>)
 800283c:	f240 1281 	movw	r2, #385	@ 0x181
 8002840:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002842:	2100      	movs	r1, #0
 8002844:	4817      	ldr	r0, [pc, #92]	@ (80028a4 <main+0xbe4>)
 8002846:	f003 ffb9 	bl	80067bc <HAL_TIM_PWM_Start>
 800284a:	e006      	b.n	800285a <main+0xb9a>
		} else {
			//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
			TIM13->CCR1 = (0 * 999) / 3500;
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <main+0xbe0>)
 800284e:	2200      	movs	r2, #0
 8002850:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002852:	2100      	movs	r1, #0
 8002854:	4813      	ldr	r0, [pc, #76]	@ (80028a4 <main+0xbe4>)
 8002856:	f003 ffb1 	bl	80067bc <HAL_TIM_PWM_Start>
		}
		if (current_state != last_state) {
 800285a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800285e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002862:	429a      	cmp	r2, r3
 8002864:	f43f aa6a 	beq.w	8001d3c <main+0x7c>
			resetEncoders();
 8002868:	f7ff f9e4 	bl	8001c34 <resetEncoders>
			last_state = current_state;
 800286c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002870:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	while (1) {
 8002874:	f7ff ba62 	b.w	8001d3c <main+0x7c>
 8002878:	40020400 	.word	0x40020400
 800287c:	200005f8 	.word	0x200005f8
 8002880:	20000658 	.word	0x20000658
 8002884:	20000610 	.word	0x20000610
 8002888:	20000608 	.word	0x20000608
 800288c:	20000650 	.word	0x20000650
 8002890:	20000614 	.word	0x20000614
 8002894:	0800da34 	.word	0x0800da34
 8002898:	2000000c 	.word	0x2000000c
 800289c:	40020800 	.word	0x40020800
 80028a0:	40001c00 	.word	0x40001c00
 80028a4:	200004b4 	.word	0x200004b4

080028a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b094      	sub	sp, #80	@ 0x50
 80028ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	2234      	movs	r2, #52	@ 0x34
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f007 f9b4 	bl	8009c24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80028bc:	f107 0308 	add.w	r3, r7, #8
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <SystemClock_Config+0xdc>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002984 <SystemClock_Config+0xdc>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028da:	6413      	str	r3, [r2, #64]	@ 0x40
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <SystemClock_Config+0xdc>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e8:	2300      	movs	r3, #0
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <SystemClock_Config+0xe0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a25      	ldr	r2, [pc, #148]	@ (8002988 <SystemClock_Config+0xe0>)
 80028f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b23      	ldr	r3, [pc, #140]	@ (8002988 <SystemClock_Config+0xe0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002904:	2302      	movs	r3, #2
 8002906:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002908:	2301      	movs	r3, #1
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800290c:	2310      	movs	r3, #16
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002910:	2302      	movs	r3, #2
 8002912:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002914:	2300      	movs	r3, #0
 8002916:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002918:	2308      	movs	r3, #8
 800291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800291c:	23b4      	movs	r3, #180	@ 0xb4
 800291e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002920:	2302      	movs	r3, #2
 8002922:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002924:	2302      	movs	r3, #2
 8002926:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002928:	2302      	movs	r3, #2
 800292a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fbfd 	bl	8006130 <HAL_RCC_OscConfig>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <SystemClock_Config+0x98>
		Error_Handler();
 800293c:	f000 fc6a 	bl	8003214 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002940:	f003 f85c 	bl	80059fc <HAL_PWREx_EnableOverDrive>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <SystemClock_Config+0xa6>
		Error_Handler();
 800294a:	f000 fc63 	bl	8003214 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800294e:	230f      	movs	r3, #15
 8002950:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002952:	2302      	movs	r3, #2
 8002954:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800295a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800295e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002964:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	2105      	movs	r1, #5
 800296c:	4618      	mov	r0, r3
 800296e:	f003 f895 	bl	8005a9c <HAL_RCC_ClockConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <SystemClock_Config+0xd4>
		Error_Handler();
 8002978:	f000 fc4c 	bl	8003214 <Error_Handler>
	}
}
 800297c:	bf00      	nop
 800297e:	3750      	adds	r7, #80	@ 0x50
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	40007000 	.word	0x40007000

0800298c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <MX_I2C1_Init+0x50>)
 8002992:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <MX_I2C1_Init+0x54>)
 8002994:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <MX_I2C1_Init+0x50>)
 8002998:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <MX_I2C1_Init+0x58>)
 800299a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <MX_I2C1_Init+0x50>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <MX_I2C1_Init+0x50>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <MX_I2C1_Init+0x50>)
 80029aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <MX_I2C1_Init+0x50>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <MX_I2C1_Init+0x50>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029bc:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <MX_I2C1_Init+0x50>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <MX_I2C1_Init+0x50>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80029c8:	4804      	ldr	r0, [pc, #16]	@ (80029dc <MX_I2C1_Init+0x50>)
 80029ca:	f002 f803 	bl	80049d4 <HAL_I2C_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80029d4:	f000 fc1e 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000220 	.word	0x20000220
 80029e0:	40005400 	.word	0x40005400
 80029e4:	00061a80 	.word	0x00061a80

080029e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	@ 0x30
 80029ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80029ee:	f107 030c 	add.w	r3, r7, #12
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f007 f914 	bl	8009c24 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002a04:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a06:	4a23      	ldr	r2, [pc, #140]	@ (8002a94 <MX_TIM1_Init+0xac>)
 8002a08:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002a0a:	4b21      	ldr	r3, [pc, #132]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b1f      	ldr	r3, [pc, #124]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002a16:	4b1e      	ldr	r3, [pc, #120]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a1c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002a24:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2a:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480d      	ldr	r0, [pc, #52]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a5c:	f003 ff76 	bl	800694c <HAL_TIM_Encoder_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM1_Init+0x82>
		Error_Handler();
 8002a66:	f000 fbd5 	bl	8003214 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	@ (8002a90 <MX_TIM1_Init+0xa8>)
 8002a78:	f004 fdda 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002a82:	f000 fbc7 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	3730      	adds	r7, #48	@ 0x30
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000274 	.word	0x20000274
 8002a94:	40010000 	.word	0x40010000

08002a98 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	@ 0x30
 8002a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	2224      	movs	r2, #36	@ 0x24
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f007 f8bc 	bl	8009c24 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002ab4:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002ab6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002aba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002aca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ace:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002adc:	2301      	movs	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002af4:	2301      	movs	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4619      	mov	r1, r3
 8002b06:	480d      	ldr	r0, [pc, #52]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002b08:	f003 ff20 	bl	800694c <HAL_TIM_Encoder_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002b12:	f000 fb7f 	bl	8003214 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4806      	ldr	r0, [pc, #24]	@ (8002b3c <MX_TIM2_Init+0xa4>)
 8002b24:	f004 fd84 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002b2e:	f000 fb71 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002b32:	bf00      	nop
 8002b34:	3730      	adds	r7, #48	@ 0x30
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200002bc 	.word	0x200002bc

08002b40 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	@ 0x30
 8002b44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	2224      	movs	r2, #36	@ 0x24
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f007 f868 	bl	8009c24 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002b5c:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002b5e:	4a21      	ldr	r2, [pc, #132]	@ (8002be4 <MX_TIM3_Init+0xa4>)
 8002b60:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b74:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	480c      	ldr	r0, [pc, #48]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002bae:	f003 fecd 	bl	800694c <HAL_TIM_Encoder_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM3_Init+0x7c>
		Error_Handler();
 8002bb8:	f000 fb2c 	bl	8003214 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	@ (8002be0 <MX_TIM3_Init+0xa0>)
 8002bca:	f004 fd31 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002bd4:	f000 fb1e 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	3730      	adds	r7, #48	@ 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000304 	.word	0x20000304
 8002be4:	40000400 	.word	0x40000400

08002be8 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08c      	sub	sp, #48	@ 0x30
 8002bec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	2224      	movs	r2, #36	@ 0x24
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f007 f814 	bl	8009c24 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002c04:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c06:	4a21      	ldr	r2, [pc, #132]	@ (8002c8c <MX_TIM5_Init+0xa4>)
 8002c08:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8002c16:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c24:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c32:	2301      	movs	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c42:	2301      	movs	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4619      	mov	r1, r3
 8002c54:	480c      	ldr	r0, [pc, #48]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c56:	f003 fe79 	bl	800694c <HAL_TIM_Encoder_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM5_Init+0x7c>
		Error_Handler();
 8002c60:	f000 fad8 	bl	8003214 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c64:	2300      	movs	r3, #0
 8002c66:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <MX_TIM5_Init+0xa0>)
 8002c72:	f004 fcdd 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002c7c:	f000 faca 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002c80:	bf00      	nop
 8002c82:	3730      	adds	r7, #48	@ 0x30
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000034c 	.word	0x2000034c
 8002c8c:	40000c00 	.word	0x40000c00

08002c90 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cae:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <MX_TIM8_Init+0x9c>)
 8002cb0:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 180 - 1;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cb4:	22b3      	movs	r2, #179	@ 0xb3
 8002cb6:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1000 - 1;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cc0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cc4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8002cd8:	4813      	ldr	r0, [pc, #76]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cda:	f003 fcc7 	bl	800666c <HAL_TIM_Base_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM8_Init+0x58>
		Error_Handler();
 8002ce4:	f000 fa96 	bl	8003214 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cec:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480c      	ldr	r0, [pc, #48]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002cf6:	f004 f8b7 	bl	8006e68 <HAL_TIM_ConfigClockSource>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM8_Init+0x74>
		Error_Handler();
 8002d00:	f000 fa88 	bl	8003214 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <MX_TIM8_Init+0x98>)
 8002d12:	f004 fc8d 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM8_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002d1c:	f000 fa7a 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000394 	.word	0x20000394
 8002d2c:	40010400 	.word	0x40010400

08002d30 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
 8002d44:	615a      	str	r2, [r3, #20]
 8002d46:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc8 <MX_TIM10_Init+0x98>)
 8002d4c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 179;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d50:	22b3      	movs	r2, #179	@ 0xb3
 8002d52:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 999;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d60:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d68:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8002d6e:	4815      	ldr	r0, [pc, #84]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d70:	f003 fc7c 	bl	800666c <HAL_TIM_Base_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM10_Init+0x4e>
		Error_Handler();
 8002d7a:	f000 fa4b 	bl	8003214 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 8002d7e:	4811      	ldr	r0, [pc, #68]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002d80:	f003 fcc3 	bl	800670a <HAL_TIM_PWM_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM10_Init+0x5e>
		Error_Handler();
 8002d8a:	f000 fa43 	bl	8003214 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8e:	2360      	movs	r3, #96	@ 0x60
 8002d90:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4807      	ldr	r0, [pc, #28]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002da6:	f003 ff9d 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002db0:	f000 fa30 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <MX_TIM10_Init+0x94>)
 8002db6:	f000 fc21 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8002dba:	bf00      	nop
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200003dc 	.word	0x200003dc
 8002dc8:	40014400 	.word	0x40014400

08002dcc <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
 8002de0:	615a      	str	r2, [r3, #20]
 8002de2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002de6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e64 <MX_TIM11_Init+0x98>)
 8002de8:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 179;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002dec:	22b3      	movs	r2, #179	@ 0xb3
 8002dee:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 999;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002df8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002dfc:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e04:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002e0a:	4815      	ldr	r0, [pc, #84]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002e0c:	f003 fc2e 	bl	800666c <HAL_TIM_Base_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM11_Init+0x4e>
		Error_Handler();
 8002e16:	f000 f9fd 	bl	8003214 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 8002e1a:	4811      	ldr	r0, [pc, #68]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002e1c:	f003 fc75 	bl	800670a <HAL_TIM_PWM_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM11_Init+0x5e>
		Error_Handler();
 8002e26:	f000 f9f5 	bl	8003214 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2a:	2360      	movs	r3, #96	@ 0x60
 8002e2c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4807      	ldr	r0, [pc, #28]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002e42:	f003 ff4f 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM11_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002e4c:	f000 f9e2 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8002e50:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <MX_TIM11_Init+0x94>)
 8002e52:	f000 fbd3 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8002e56:	bf00      	nop
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000424 	.word	0x20000424
 8002e64:	40014800 	.word	0x40014800

08002e68 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	@ 0x30
 8002e6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002e6e:	f107 0320 	add.w	r3, r7, #32
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	615a      	str	r2, [r3, #20]
 8002e8c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8002e8e:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002e90:	4a25      	ldr	r2, [pc, #148]	@ (8002f28 <MX_TIM12_Init+0xc0>)
 8002e92:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 179;
 8002e94:	4b23      	ldr	r3, [pc, #140]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002e96:	22b3      	movs	r2, #179	@ 0xb3
 8002e98:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 999;
 8002ea0:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002ea2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ea6:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8002eb4:	481b      	ldr	r0, [pc, #108]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002eb6:	f003 fbd9 	bl	800666c <HAL_TIM_Base_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM12_Init+0x5c>
		Error_Handler();
 8002ec0:	f000 f9a8 	bl	8003214 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ec8:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 8002eca:	f107 0320 	add.w	r3, r7, #32
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4814      	ldr	r0, [pc, #80]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002ed2:	f003 ffc9 	bl	8006e68 <HAL_TIM_ConfigClockSource>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_TIM12_Init+0x78>
		Error_Handler();
 8002edc:	f000 f99a 	bl	8003214 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8002ee0:	4810      	ldr	r0, [pc, #64]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002ee2:	f003 fc12 	bl	800670a <HAL_TIM_PWM_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM12_Init+0x88>
		Error_Handler();
 8002eec:	f000 f992 	bl	8003214 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ef0:	2360      	movs	r3, #96	@ 0x60
 8002ef2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	4619      	mov	r1, r3
 8002f06:	4807      	ldr	r0, [pc, #28]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002f08:	f003 feec 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM12_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8002f12:	f000 f97f 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002f16:	4803      	ldr	r0, [pc, #12]	@ (8002f24 <MX_TIM12_Init+0xbc>)
 8002f18:	f000 fb70 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8002f1c:	bf00      	nop
 8002f1e:	3730      	adds	r7, #48	@ 0x30
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	2000046c 	.word	0x2000046c
 8002f28:	40001800 	.word	0x40001800

08002f2c <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM13_Init 0 */

	/* USER CODE END TIM13_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	615a      	str	r2, [r3, #20]
 8002f42:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8002f44:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f46:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc4 <MX_TIM13_Init+0x98>)
 8002f48:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 179;
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f4c:	22b3      	movs	r2, #179	@ 0xb3
 8002f4e:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f5c:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f5e:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f64:	4b16      	ldr	r3, [pc, #88]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002f6a:	4815      	ldr	r0, [pc, #84]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f6c:	f003 fb7e 	bl	800666c <HAL_TIM_Base_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM13_Init+0x4e>
		Error_Handler();
 8002f76:	f000 f94d 	bl	8003214 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim13) != HAL_OK) {
 8002f7a:	4811      	ldr	r0, [pc, #68]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002f7c:	f003 fbc5 	bl	800670a <HAL_TIM_PWM_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM13_Init+0x5e>
		Error_Handler();
 8002f86:	f000 f945 	bl	8003214 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f8a:	2360      	movs	r3, #96	@ 0x60
 8002f8c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1)
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4807      	ldr	r0, [pc, #28]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002fa2:	f003 fe9f 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM13_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002fac:	f000 f932 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */
	HAL_TIM_MspPostInit(&htim13);
 8002fb0:	4803      	ldr	r0, [pc, #12]	@ (8002fc0 <MX_TIM13_Init+0x94>)
 8002fb2:	f000 fb23 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8002fb6:	bf00      	nop
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200004b4 	.word	0x200004b4
 8002fc4:	40001c00 	.word	0x40001c00

08002fc8 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	@ (8003018 <MX_UART4_Init+0x50>)
 8002fd0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fd8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <MX_UART4_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002ffe:	4805      	ldr	r0, [pc, #20]	@ (8003014 <MX_UART4_Init+0x4c>)
 8003000:	f004 fb92 	bl	8007728 <HAL_UART_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_UART4_Init+0x46>
		Error_Handler();
 800300a:	f000 f903 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200004fc 	.word	0x200004fc
 8003018:	40004c00 	.word	0x40004c00

0800301c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 8003022:	4a12      	ldr	r2, [pc, #72]	@ (800306c <MX_USART2_UART_Init+0x50>)
 8003024:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003026:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 8003028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800302c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800302e:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800303a:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 8003042:	220c      	movs	r2, #12
 8003044:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003052:	4805      	ldr	r0, [pc, #20]	@ (8003068 <MX_USART2_UART_Init+0x4c>)
 8003054:	f004 fb68 	bl	8007728 <HAL_UART_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800305e:	f000 f8d9 	bl	8003214 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000544 	.word	0x20000544
 800306c:	40004400 	.word	0x40004400

08003070 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <MX_DMA_Init+0x3c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4a0b      	ldr	r2, [pc, #44]	@ (80030ac <MX_DMA_Init+0x3c>)
 8003080:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003084:	6313      	str	r3, [r2, #48]	@ 0x30
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <MX_DMA_Init+0x3c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	200d      	movs	r0, #13
 8003098:	f000 feb5 	bl	8003e06 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800309c:	200d      	movs	r0, #13
 800309e:	f000 fece 	bl	8003e3e <HAL_NVIC_EnableIRQ>

}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800

080030b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	4b43      	ldr	r3, [pc, #268]	@ (80031d8 <MX_GPIO_Init+0x128>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	4a42      	ldr	r2, [pc, #264]	@ (80031d8 <MX_GPIO_Init+0x128>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d6:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <MX_GPIO_Init+0x128>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	4b3c      	ldr	r3, [pc, #240]	@ (80031d8 <MX_GPIO_Init+0x128>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	4a3b      	ldr	r2, [pc, #236]	@ (80031d8 <MX_GPIO_Init+0x128>)
 80030ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f2:	4b39      	ldr	r3, [pc, #228]	@ (80031d8 <MX_GPIO_Init+0x128>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b35      	ldr	r3, [pc, #212]	@ (80031d8 <MX_GPIO_Init+0x128>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a34      	ldr	r2, [pc, #208]	@ (80031d8 <MX_GPIO_Init+0x128>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b32      	ldr	r3, [pc, #200]	@ (80031d8 <MX_GPIO_Init+0x128>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b2e      	ldr	r3, [pc, #184]	@ (80031d8 <MX_GPIO_Init+0x128>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a2d      	ldr	r2, [pc, #180]	@ (80031d8 <MX_GPIO_Init+0x128>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <MX_GPIO_Init+0x128>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8003136:	2200      	movs	r2, #0
 8003138:	f248 31ff 	movw	r1, #33791	@ 0x83ff
 800313c:	4827      	ldr	r0, [pc, #156]	@ (80031dc <MX_GPIO_Init+0x12c>)
 800313e:	f001 fc2f 	bl	80049a0 <HAL_GPIO_WritePin>
			GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
					| GPIO_PIN_4 | GPIO_PIN_5 | stepper_direction_Pin
					| motor1_Pin | motor2_Pin | motor3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_11 | GPIO_PIN_12,
 8003142:	2200      	movs	r2, #0
 8003144:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8003148:	4825      	ldr	r0, [pc, #148]	@ (80031e0 <MX_GPIO_Init+0x130>)
 800314a:	f001 fc29 	bl	80049a0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800314e:	2200      	movs	r2, #0
 8003150:	f249 4104 	movw	r1, #37892	@ 0x9404
 8003154:	4823      	ldr	r0, [pc, #140]	@ (80031e4 <MX_GPIO_Init+0x134>)
 8003156:	f001 fc23 	bl	80049a0 <HAL_GPIO_WritePin>
	GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_12 | stepper_speed_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800315a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800315e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003160:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003164:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	4619      	mov	r1, r3
 8003170:	481a      	ldr	r0, [pc, #104]	@ (80031dc <MX_GPIO_Init+0x12c>)
 8003172:	f001 fa81 	bl	8004678 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC15 PC0 PC1 PC2
	 PC3 PC4 PC5 stepper_direction_Pin
	 motor1_Pin motor2_Pin motor3_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2
 8003176:	f248 33ff 	movw	r3, #33791	@ 0x83ff
 800317a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | stepper_direction_Pin
			| motor1_Pin | motor2_Pin | motor3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317c:	2301      	movs	r3, #1
 800317e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	4813      	ldr	r0, [pc, #76]	@ (80031dc <MX_GPIO_Init+0x12c>)
 8003190:	f001 fa72 	bl	8004678 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA11 PA12 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_11 | GPIO_PIN_12;
 8003194:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8003198:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319a:	2301      	movs	r3, #1
 800319c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <MX_GPIO_Init+0x130>)
 80031ae:	f001 fa63 	bl	8004678 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB10 PB12 stepper_speed_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_12
 80031b2:	f249 4304 	movw	r3, #37892	@ 0x9404
 80031b6:	617b      	str	r3, [r7, #20]
			| stepper_speed_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b8:	2301      	movs	r3, #1
 80031ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2300      	movs	r3, #0
 80031c2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4619      	mov	r1, r3
 80031ca:	4806      	ldr	r0, [pc, #24]	@ (80031e4 <MX_GPIO_Init+0x134>)
 80031cc:	f001 fa54 	bl	8004678 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80031d0:	bf00      	nop
 80031d2:	3728      	adds	r7, #40	@ 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020800 	.word	0x40020800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40020400 	.word	0x40020400

080031e8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	4804      	ldr	r0, [pc, #16]	@ (8003210 <_write+0x28>)
 8003200:	f004 fae2 	bl	80077c8 <HAL_UART_Transmit>
	return len;
 8003204:	687b      	ldr	r3, [r7, #4]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000544 	.word	0x20000544

08003214 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003218:	b672      	cpsid	i
}
 800321a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <Error_Handler+0x8>

08003220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	4b10      	ldr	r3, [pc, #64]	@ (800326c <HAL_MspInit+0x4c>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	4a0f      	ldr	r2, [pc, #60]	@ (800326c <HAL_MspInit+0x4c>)
 8003230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003234:	6453      	str	r3, [r2, #68]	@ 0x44
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <HAL_MspInit+0x4c>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_MspInit+0x4c>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	4a08      	ldr	r2, [pc, #32]	@ (800326c <HAL_MspInit+0x4c>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	@ 0x40
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_MspInit+0x4c>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800325e:	2007      	movs	r0, #7
 8003260:	f000 fdc6 	bl	8003df0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800

08003270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a19      	ldr	r2, [pc, #100]	@ (80032f4 <HAL_I2C_MspInit+0x84>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d12b      	bne.n	80032ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	4b18      	ldr	r3, [pc, #96]	@ (80032f8 <HAL_I2C_MspInit+0x88>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <HAL_I2C_MspInit+0x88>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a2:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_I2C_MspInit+0x88>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032ae:	23c0      	movs	r3, #192	@ 0xc0
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032b2:	2312      	movs	r3, #18
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032be:	2304      	movs	r3, #4
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	480c      	ldr	r0, [pc, #48]	@ (80032fc <HAL_I2C_MspInit+0x8c>)
 80032ca:	f001 f9d5 	bl	8004678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <HAL_I2C_MspInit+0x88>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	4a08      	ldr	r2, [pc, #32]	@ (80032f8 <HAL_I2C_MspInit+0x88>)
 80032d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_I2C_MspInit+0x88>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80032ea:	bf00      	nop
 80032ec:	3728      	adds	r7, #40	@ 0x28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40005400 	.word	0x40005400
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020400 	.word	0x40020400

08003300 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b090      	sub	sp, #64	@ 0x40
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a74      	ldr	r2, [pc, #464]	@ (80034f0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12d      	bne.n	800337e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003326:	4b73      	ldr	r3, [pc, #460]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	4a72      	ldr	r2, [pc, #456]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6453      	str	r3, [r2, #68]	@ 0x44
 8003332:	4b70      	ldr	r3, [pc, #448]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
 8003342:	4b6c      	ldr	r3, [pc, #432]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	4a6b      	ldr	r2, [pc, #428]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6313      	str	r3, [r2, #48]	@ 0x30
 800334e:	4b69      	ldr	r3, [pc, #420]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800335a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003364:	2301      	movs	r3, #1
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003368:	2300      	movs	r3, #0
 800336a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800336c:	2301      	movs	r3, #1
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003374:	4619      	mov	r1, r3
 8003376:	4860      	ldr	r0, [pc, #384]	@ (80034f8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8003378:	f001 f97e 	bl	8004678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800337c:	e0b3      	b.n	80034e6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003386:	d14b      	bne.n	8003420 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003388:	2300      	movs	r3, #0
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	4b59      	ldr	r3, [pc, #356]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	4a58      	ldr	r2, [pc, #352]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6413      	str	r3, [r2, #64]	@ 0x40
 8003398:	4b56      	ldr	r3, [pc, #344]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	4b52      	ldr	r3, [pc, #328]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	4a51      	ldr	r2, [pc, #324]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b4:	4b4f      	ldr	r3, [pc, #316]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	4b4b      	ldr	r3, [pc, #300]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	4a4a      	ldr	r2, [pc, #296]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d0:	4b48      	ldr	r3, [pc, #288]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e6:	2301      	movs	r3, #1
 80033e8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ee:	2301      	movs	r3, #1
 80033f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033f6:	4619      	mov	r1, r3
 80033f8:	483f      	ldr	r0, [pc, #252]	@ (80034f8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80033fa:	f001 f93d 	bl	8004678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033fe:	2308      	movs	r3, #8
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003406:	2301      	movs	r3, #1
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800340e:	2301      	movs	r3, #1
 8003410:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003412:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003416:	4619      	mov	r1, r3
 8003418:	4838      	ldr	r0, [pc, #224]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x1fc>)
 800341a:	f001 f92d 	bl	8004678 <HAL_GPIO_Init>
}
 800341e:	e062      	b.n	80034e6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM3)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a36      	ldr	r2, [pc, #216]	@ (8003500 <HAL_TIM_Encoder_MspInit+0x200>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12c      	bne.n	8003484 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	4a30      	ldr	r2, [pc, #192]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6413      	str	r3, [r2, #64]	@ 0x40
 800343a:	4b2e      	ldr	r3, [pc, #184]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	4a29      	ldr	r2, [pc, #164]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6313      	str	r3, [r2, #48]	@ 0x30
 8003456:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003462:	2330      	movs	r3, #48	@ 0x30
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346a:	2301      	movs	r3, #1
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346e:	2300      	movs	r3, #0
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003472:	2302      	movs	r3, #2
 8003474:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800347a:	4619      	mov	r1, r3
 800347c:	481f      	ldr	r0, [pc, #124]	@ (80034fc <HAL_TIM_Encoder_MspInit+0x1fc>)
 800347e:	f001 f8fb 	bl	8004678 <HAL_GPIO_Init>
}
 8003482:	e030      	b.n	80034e6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM5)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_TIM_Encoder_MspInit+0x204>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12b      	bne.n	80034e6 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003498:	f043 0308 	orr.w	r3, r3, #8
 800349c:	6413      	str	r3, [r2, #64]	@ 0x40
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034c6:	2303      	movs	r3, #3
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ce:	2301      	movs	r3, #1
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d2:	2300      	movs	r3, #0
 80034d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034d6:	2302      	movs	r3, #2
 80034d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034de:	4619      	mov	r1, r3
 80034e0:	4805      	ldr	r0, [pc, #20]	@ (80034f8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80034e2:	f001 f8c9 	bl	8004678 <HAL_GPIO_Init>
}
 80034e6:	bf00      	nop
 80034e8:	3740      	adds	r7, #64	@ 0x40
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40010000 	.word	0x40010000
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40000400 	.word	0x40000400
 8003504:	40000c00 	.word	0x40000c00

08003508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a33      	ldr	r2, [pc, #204]	@ (80035e4 <HAL_TIM_Base_MspInit+0xdc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	4b32      	ldr	r3, [pc, #200]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	4a31      	ldr	r2, [pc, #196]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6453      	str	r3, [r2, #68]	@ 0x44
 800352a:	4b2f      	ldr	r3, [pc, #188]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003536:	e04e      	b.n	80035d6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2b      	ldr	r2, [pc, #172]	@ (80035ec <HAL_TIM_Base_MspInit+0xe4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	4b28      	ldr	r3, [pc, #160]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 800354c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003550:	6453      	str	r3, [r2, #68]	@ 0x44
 8003552:	4b25      	ldr	r3, [pc, #148]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	69bb      	ldr	r3, [r7, #24]
}
 800355e:	e03a      	b.n	80035d6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM11)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a22      	ldr	r2, [pc, #136]	@ (80035f0 <HAL_TIM_Base_MspInit+0xe8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	4b1e      	ldr	r3, [pc, #120]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	4a1d      	ldr	r2, [pc, #116]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003578:	6453      	str	r3, [r2, #68]	@ 0x44
 800357a:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
}
 8003586:	e026      	b.n	80035d6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <HAL_TIM_Base_MspInit+0xec>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	4a13      	ldr	r2, [pc, #76]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 800359c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a2:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
}
 80035ae:	e012      	b.n	80035d6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM13)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a10      	ldr	r2, [pc, #64]	@ (80035f8 <HAL_TIM_Base_MspInit+0xf0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10d      	bne.n	80035d6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	4a09      	ldr	r2, [pc, #36]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 80035c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ca:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <HAL_TIM_Base_MspInit+0xe0>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
}
 80035d6:	bf00      	nop
 80035d8:	3724      	adds	r7, #36	@ 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800
 80035f4:	40001800 	.word	0x40001800
 80035f8:	40001c00 	.word	0x40001c00

080035fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	@ 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a49      	ldr	r2, [pc, #292]	@ (8003740 <HAL_TIM_MspPostInit+0x144>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d11f      	bne.n	800365e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	4b48      	ldr	r3, [pc, #288]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	4a47      	ldr	r2, [pc, #284]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	6313      	str	r3, [r2, #48]	@ 0x30
 800362e:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800363a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800363e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800364c:	2303      	movs	r3, #3
 800364e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	4619      	mov	r1, r3
 8003656:	483c      	ldr	r0, [pc, #240]	@ (8003748 <HAL_TIM_MspPostInit+0x14c>)
 8003658:	f001 f80e 	bl	8004678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800365c:	e06c      	b.n	8003738 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3a      	ldr	r2, [pc, #232]	@ (800374c <HAL_TIM_MspPostInit+0x150>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d11f      	bne.n	80036a8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003670:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	6313      	str	r3, [r2, #48]	@ 0x30
 8003678:	4b32      	ldr	r3, [pc, #200]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003696:	2303      	movs	r3, #3
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4619      	mov	r1, r3
 80036a0:	4829      	ldr	r0, [pc, #164]	@ (8003748 <HAL_TIM_MspPostInit+0x14c>)
 80036a2:	f000 ffe9 	bl	8004678 <HAL_GPIO_Init>
}
 80036a6:	e047      	b.n	8003738 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <HAL_TIM_MspPostInit+0x154>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d11f      	bne.n	80036f2 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80036e0:	2309      	movs	r3, #9
 80036e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	4619      	mov	r1, r3
 80036ea:	4817      	ldr	r0, [pc, #92]	@ (8003748 <HAL_TIM_MspPostInit+0x14c>)
 80036ec:	f000 ffc4 	bl	8004678 <HAL_GPIO_Init>
}
 80036f0:	e022      	b.n	8003738 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM13)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_TIM_MspPostInit+0x158>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d11d      	bne.n	8003738 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	4a0f      	ldr	r2, [pc, #60]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6313      	str	r3, [r2, #48]	@ 0x30
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <HAL_TIM_MspPostInit+0x148>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003718:	2340      	movs	r3, #64	@ 0x40
 800371a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003728:	2309      	movs	r3, #9
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372c:	f107 031c 	add.w	r3, r7, #28
 8003730:	4619      	mov	r1, r3
 8003732:	4809      	ldr	r0, [pc, #36]	@ (8003758 <HAL_TIM_MspPostInit+0x15c>)
 8003734:	f000 ffa0 	bl	8004678 <HAL_GPIO_Init>
}
 8003738:	bf00      	nop
 800373a:	3730      	adds	r7, #48	@ 0x30
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40014400 	.word	0x40014400
 8003744:	40023800 	.word	0x40023800
 8003748:	40020400 	.word	0x40020400
 800374c:	40014800 	.word	0x40014800
 8003750:	40001800 	.word	0x40001800
 8003754:	40001c00 	.word	0x40001c00
 8003758:	40020000 	.word	0x40020000

0800375c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 031c 	add.w	r3, r7, #28
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a4e      	ldr	r2, [pc, #312]	@ (80038b4 <HAL_UART_MspInit+0x158>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d164      	bne.n	8003848 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	4b4d      	ldr	r3, [pc, #308]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	4a4c      	ldr	r2, [pc, #304]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800378c:	6413      	str	r3, [r2, #64]	@ 0x40
 800378e:	4b4a      	ldr	r3, [pc, #296]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	4b46      	ldr	r3, [pc, #280]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	4a45      	ldr	r2, [pc, #276]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037aa:	4b43      	ldr	r3, [pc, #268]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80037ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037c8:	2308      	movs	r3, #8
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037cc:	f107 031c 	add.w	r3, r7, #28
 80037d0:	4619      	mov	r1, r3
 80037d2:	483a      	ldr	r0, [pc, #232]	@ (80038bc <HAL_UART_MspInit+0x160>)
 80037d4:	f000 ff50 	bl	8004678 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80037d8:	4b39      	ldr	r3, [pc, #228]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 80037da:	4a3a      	ldr	r2, [pc, #232]	@ (80038c4 <HAL_UART_MspInit+0x168>)
 80037dc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80037de:	4b38      	ldr	r3, [pc, #224]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 80037e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80037e4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037e6:	4b36      	ldr	r3, [pc, #216]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ec:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037f2:	4b33      	ldr	r3, [pc, #204]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 80037f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037fa:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003800:	4b2f      	ldr	r3, [pc, #188]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003806:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 8003808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800380c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800380e:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 8003810:	2200      	movs	r2, #0
 8003812:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003814:	4b2a      	ldr	r3, [pc, #168]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 8003816:	2200      	movs	r2, #0
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800381a:	4829      	ldr	r0, [pc, #164]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 800381c:	f000 fb2a 	bl	8003e74 <HAL_DMA_Init>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003826:	f7ff fcf5 	bl	8003214 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a24      	ldr	r2, [pc, #144]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 800382e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003830:	4a23      	ldr	r2, [pc, #140]	@ (80038c0 <HAL_UART_MspInit+0x164>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003836:	2200      	movs	r2, #0
 8003838:	2100      	movs	r1, #0
 800383a:	2034      	movs	r0, #52	@ 0x34
 800383c:	f000 fae3 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003840:	2034      	movs	r0, #52	@ 0x34
 8003842:	f000 fafc 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003846:	e030      	b.n	80038aa <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1e      	ldr	r2, [pc, #120]	@ (80038c8 <HAL_UART_MspInit+0x16c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d12b      	bne.n	80038aa <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	4b18      	ldr	r3, [pc, #96]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 800385c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003860:	6413      	str	r3, [r2, #64]	@ 0x40
 8003862:	4b15      	ldr	r3, [pc, #84]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	4a10      	ldr	r2, [pc, #64]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6313      	str	r3, [r2, #48]	@ 0x30
 800387e:	4b0e      	ldr	r3, [pc, #56]	@ (80038b8 <HAL_UART_MspInit+0x15c>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800388a:	230c      	movs	r3, #12
 800388c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800389a:	2307      	movs	r3, #7
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389e:	f107 031c 	add.w	r3, r7, #28
 80038a2:	4619      	mov	r1, r3
 80038a4:	4809      	ldr	r0, [pc, #36]	@ (80038cc <HAL_UART_MspInit+0x170>)
 80038a6:	f000 fee7 	bl	8004678 <HAL_GPIO_Init>
}
 80038aa:	bf00      	nop
 80038ac:	3730      	adds	r7, #48	@ 0x30
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020800 	.word	0x40020800
 80038c0:	2000058c 	.word	0x2000058c
 80038c4:	40026040 	.word	0x40026040
 80038c8:	40004400 	.word	0x40004400
 80038cc:	40020000 	.word	0x40020000

080038d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038d4:	bf00      	nop
 80038d6:	e7fd      	b.n	80038d4 <NMI_Handler+0x4>

080038d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <HardFault_Handler+0x4>

080038e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <MemManage_Handler+0x4>

080038e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <BusFault_Handler+0x4>

080038f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <UsageFault_Handler+0x4>

080038f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003926:	f000 f94f 	bl	8003bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003934:	4802      	ldr	r0, [pc, #8]	@ (8003940 <DMA1_Stream2_IRQHandler+0x10>)
 8003936:	f000 fc35 	bl	80041a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000058c 	.word	0x2000058c

08003944 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003948:	4802      	ldr	r0, [pc, #8]	@ (8003954 <UART4_IRQHandler+0x10>)
 800394a:	f003 ffed 	bl	8007928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200004fc 	.word	0x200004fc

08003958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return 1;
 800395c:	2301      	movs	r3, #1
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_kill>:

int _kill(int pid, int sig)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003972:	f006 f9a9 	bl	8009cc8 <__errno>
 8003976:	4603      	mov	r3, r0
 8003978:	2216      	movs	r2, #22
 800397a:	601a      	str	r2, [r3, #0]
  return -1;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_exit>:

void _exit (int status)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ffe7 	bl	8003968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <_exit+0x12>

0800399e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e00a      	b.n	80039c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039b0:	f3af 8000 	nop.w
 80039b4:	4601      	mov	r1, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	60ba      	str	r2, [r7, #8]
 80039bc:	b2ca      	uxtb	r2, r1
 80039be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3301      	adds	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	dbf0      	blt.n	80039b0 <_read+0x12>
  }

  return len;
 80039ce:	687b      	ldr	r3, [r7, #4]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a00:	605a      	str	r2, [r3, #4]
  return 0;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <_isatty>:

int _isatty(int file)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a18:	2301      	movs	r3, #1
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a48:	4a14      	ldr	r2, [pc, #80]	@ (8003a9c <_sbrk+0x5c>)
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <_sbrk+0x60>)
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a54:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <_sbrk+0x64>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	@ (8003aa8 <_sbrk+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a70:	f006 f92a 	bl	8009cc8 <__errno>
 8003a74:	4603      	mov	r3, r0
 8003a76:	220c      	movs	r2, #12
 8003a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e009      	b.n	8003a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a80:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <_sbrk+0x64>)
 8003a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20020000 	.word	0x20020000
 8003aa0:	00000400 	.word	0x00000400
 8003aa4:	200006d0 	.word	0x200006d0
 8003aa8:	20000828 	.word	0x20000828

08003aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <SystemInit+0x20>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab6:	4a05      	ldr	r2, [pc, #20]	@ (8003acc <SystemInit+0x20>)
 8003ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ad4:	f7ff ffea 	bl	8003aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ad8:	480c      	ldr	r0, [pc, #48]	@ (8003b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ada:	490d      	ldr	r1, [pc, #52]	@ (8003b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003adc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae0:	e002      	b.n	8003ae8 <LoopCopyDataInit>

08003ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae6:	3304      	adds	r3, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aec:	d3f9      	bcc.n	8003ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aee:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003af0:	4c0a      	ldr	r4, [pc, #40]	@ (8003b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af4:	e001      	b.n	8003afa <LoopFillZerobss>

08003af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af8:	3204      	adds	r2, #4

08003afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003afc:	d3fb      	bcc.n	8003af6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003afe:	f006 f8e9 	bl	8009cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b02:	f7fe f8dd 	bl	8001cc0 <main>
  bx  lr    
 8003b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003b14:	0800df10 	.word	0x0800df10
  ldr r2, =_sbss
 8003b18:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003b1c:	20000824 	.word	0x20000824

08003b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC_IRQHandler>
	...

08003b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b28:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <HAL_Init+0x40>)
 8003b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <HAL_Init+0x40>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b40:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a07      	ldr	r2, [pc, #28]	@ (8003b64 <HAL_Init+0x40>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	f000 f94f 	bl	8003df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f000 f808 	bl	8003b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b58:	f7ff fb62 	bl	8003220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023c00 	.word	0x40023c00

08003b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b70:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_InitTick+0x54>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <HAL_InitTick+0x58>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f967 	bl	8003e5a <HAL_SYSTICK_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00e      	b.n	8003bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d80a      	bhi.n	8003bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f000 f92f 	bl	8003e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba8:	4a06      	ldr	r2, [pc, #24]	@ (8003bc4 <HAL_InitTick+0x5c>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000002c 	.word	0x2000002c
 8003bc0:	20000034 	.word	0x20000034
 8003bc4:	20000030 	.word	0x20000030

08003bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <HAL_IncTick+0x20>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <HAL_IncTick+0x24>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a04      	ldr	r2, [pc, #16]	@ (8003bec <HAL_IncTick+0x24>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000034 	.word	0x20000034
 8003bec:	200006d4 	.word	0x200006d4

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	200006d4 	.word	0x200006d4

08003c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff ffee 	bl	8003bf0 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d005      	beq.n	8003c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <HAL_Delay+0x44>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c2e:	bf00      	nop
 8003c30:	f7ff ffde 	bl	8003bf0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d8f7      	bhi.n	8003c30 <HAL_Delay+0x28>
  {
  }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000034 	.word	0x20000034

08003c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c82:	4a04      	ldr	r2, [pc, #16]	@ (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c9c:	4b04      	ldr	r3, [pc, #16]	@ (8003cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 0307 	and.w	r3, r3, #7
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	db0b      	blt.n	8003cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	4907      	ldr	r1, [pc, #28]	@ (8003cec <__NVIC_EnableIRQ+0x38>)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	e000e100 	.word	0xe000e100

08003cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db0a      	blt.n	8003d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	490c      	ldr	r1, [pc, #48]	@ (8003d3c <__NVIC_SetPriority+0x4c>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	440b      	add	r3, r1
 8003d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d18:	e00a      	b.n	8003d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4908      	ldr	r1, [pc, #32]	@ (8003d40 <__NVIC_SetPriority+0x50>)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3b04      	subs	r3, #4
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	761a      	strb	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	@ 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f1c3 0307 	rsb	r3, r3, #7
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf28      	it	cs
 8003d62:	2304      	movcs	r3, #4
 8003d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d902      	bls.n	8003d74 <NVIC_EncodePriority+0x30>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3b03      	subs	r3, #3
 8003d72:	e000      	b.n	8003d76 <NVIC_EncodePriority+0x32>
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	401a      	ands	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	4313      	orrs	r3, r2
         );
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	@ 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dbc:	d301      	bcc.n	8003dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00f      	b.n	8003de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dec <SysTick_Config+0x40>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dca:	210f      	movs	r1, #15
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f7ff ff8e 	bl	8003cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <SysTick_Config+0x40>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dda:	4b04      	ldr	r3, [pc, #16]	@ (8003dec <SysTick_Config+0x40>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010

08003df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff29 	bl	8003c50 <__NVIC_SetPriorityGrouping>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e18:	f7ff ff3e 	bl	8003c98 <__NVIC_GetPriorityGrouping>
 8003e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff ff8e 	bl	8003d44 <NVIC_EncodePriority>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff5d 	bl	8003cf0 <__NVIC_SetPriority>
}
 8003e36:	bf00      	nop
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff31 	bl	8003cb4 <__NVIC_EnableIRQ>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffa2 	bl	8003dac <SysTick_Config>
 8003e68:	4603      	mov	r3, r0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e80:	f7ff feb6 	bl	8003bf0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e099      	b.n	8003fc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb0:	e00f      	b.n	8003ed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eb2:	f7ff fe9d 	bl	8003bf0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d908      	bls.n	8003ed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e078      	b.n	8003fc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e8      	bne.n	8003eb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4b38      	ldr	r3, [pc, #224]	@ (8003fcc <HAL_DMA_Init+0x158>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d107      	bne.n	8003f3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4313      	orrs	r3, r2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0307 	bic.w	r3, r3, #7
 8003f52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d117      	bne.n	8003f96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00e      	beq.n	8003f96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fb01 	bl	8004580 <DMA_CheckFifoParam>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2240      	movs	r2, #64	@ 0x40
 8003f88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f92:	2301      	movs	r3, #1
 8003f94:	e016      	b.n	8003fc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fab8 	bl	8004514 <DMA_CalcBaseAndBitshift>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	223f      	movs	r2, #63	@ 0x3f
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	f010803f 	.word	0xf010803f

08003fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_DMA_Start_IT+0x26>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e040      	b.n	8004078 <HAL_DMA_Start_IT+0xa8>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d12f      	bne.n	800406a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa4a 	bl	80044b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	223f      	movs	r2, #63	@ 0x3f
 800402a:	409a      	lsls	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0216 	orr.w	r2, r2, #22
 800403e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0208 	orr.w	r2, r2, #8
 8004056:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e005      	b.n	8004076 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004076:	7dfb      	ldrb	r3, [r7, #23]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800408e:	f7ff fdaf 	bl	8003bf0 <HAL_GetTick>
 8004092:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d008      	beq.n	80040b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2280      	movs	r2, #128	@ 0x80
 80040a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e052      	b.n	8004158 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0216 	bic.w	r2, r2, #22
 80040c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <HAL_DMA_Abort+0x62>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0208 	bic.w	r2, r2, #8
 80040f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004102:	e013      	b.n	800412c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004104:	f7ff fd74 	bl	8003bf0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b05      	cmp	r3, #5
 8004110:	d90c      	bls.n	800412c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2203      	movs	r2, #3
 800411c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e015      	b.n	8004158 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e4      	bne.n	8004104 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413e:	223f      	movs	r2, #63	@ 0x3f
 8004140:	409a      	lsls	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d004      	beq.n	800417e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2280      	movs	r2, #128	@ 0x80
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e00c      	b.n	8004198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2205      	movs	r2, #5
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041b0:	4b8e      	ldr	r3, [pc, #568]	@ (80043ec <HAL_DMA_IRQHandler+0x248>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a8e      	ldr	r2, [pc, #568]	@ (80043f0 <HAL_DMA_IRQHandler+0x24c>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	0a9b      	lsrs	r3, r3, #10
 80041bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ce:	2208      	movs	r2, #8
 80041d0:	409a      	lsls	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01a      	beq.n	8004210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d013      	beq.n	8004210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0204 	bic.w	r2, r2, #4
 80041f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fc:	2208      	movs	r2, #8
 80041fe:	409a      	lsls	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004208:	f043 0201 	orr.w	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004214:	2201      	movs	r2, #1
 8004216:	409a      	lsls	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004232:	2201      	movs	r2, #1
 8004234:	409a      	lsls	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	f043 0202 	orr.w	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424a:	2204      	movs	r2, #4
 800424c:	409a      	lsls	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	2204      	movs	r2, #4
 800426a:	409a      	lsls	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	f043 0204 	orr.w	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	2210      	movs	r2, #16
 8004282:	409a      	lsls	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d043      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d03c      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429e:	2210      	movs	r2, #16
 80042a0:	409a      	lsls	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d018      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d108      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d024      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
 80042d2:	e01f      	b.n	8004314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
 80042e4:	e016      	b.n	8004314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0208 	bic.w	r2, r2, #8
 8004302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004318:	2220      	movs	r2, #32
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 808f 	beq.w	8004444 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8087 	beq.w	8004444 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	2220      	movs	r2, #32
 800433c:	409a      	lsls	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b05      	cmp	r3, #5
 800434c:	d136      	bne.n	80043bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0216 	bic.w	r2, r2, #22
 800435c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800436c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_DMA_IRQHandler+0x1da>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0208 	bic.w	r2, r2, #8
 800438c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	223f      	movs	r2, #63	@ 0x3f
 8004394:	409a      	lsls	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d07e      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	4798      	blx	r3
        }
        return;
 80043ba:	e079      	b.n	80044b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01d      	beq.n	8004406 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10d      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d031      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
 80043e8:	e02c      	b.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
 80043ea:	bf00      	nop
 80043ec:	2000002c 	.word	0x2000002c
 80043f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d023      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
 8004404:	e01e      	b.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10f      	bne.n	8004434 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0210 	bic.w	r2, r2, #16
 8004422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	d032      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d022      	beq.n	800449e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2205      	movs	r2, #5
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3301      	adds	r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d307      	bcc.n	800448c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f2      	bne.n	8004470 <HAL_DMA_IRQHandler+0x2cc>
 800448a:	e000      	b.n	800448e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800448c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
 80044ae:	e000      	b.n	80044b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044b0:	bf00      	nop
    }
  }
}
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b40      	cmp	r3, #64	@ 0x40
 80044e4:	d108      	bne.n	80044f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044f6:	e007      	b.n	8004508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3b10      	subs	r3, #16
 8004524:	4a14      	ldr	r2, [pc, #80]	@ (8004578 <DMA_CalcBaseAndBitshift+0x64>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800452e:	4a13      	ldr	r2, [pc, #76]	@ (800457c <DMA_CalcBaseAndBitshift+0x68>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d909      	bls.n	8004556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	659a      	str	r2, [r3, #88]	@ 0x58
 8004554:	e007      	b.n	8004566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	aaaaaaab 	.word	0xaaaaaaab
 800457c:	0800da5c 	.word	0x0800da5c

08004580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11f      	bne.n	80045da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d856      	bhi.n	800464e <DMA_CheckFifoParam+0xce>
 80045a0:	a201      	add	r2, pc, #4	@ (adr r2, 80045a8 <DMA_CheckFifoParam+0x28>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045cb 	.word	0x080045cb
 80045b0:	080045b9 	.word	0x080045b9
 80045b4:	0800464f 	.word	0x0800464f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d046      	beq.n	8004652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c8:	e043      	b.n	8004652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045d2:	d140      	bne.n	8004656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e03d      	b.n	8004656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e2:	d121      	bne.n	8004628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d837      	bhi.n	800465a <DMA_CheckFifoParam+0xda>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <DMA_CheckFifoParam+0x70>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004601 	.word	0x08004601
 80045f4:	08004607 	.word	0x08004607
 80045f8:	08004601 	.word	0x08004601
 80045fc:	08004619 	.word	0x08004619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e030      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d025      	beq.n	800465e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004616:	e022      	b.n	800465e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004620:	d11f      	bne.n	8004662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004626:	e01c      	b.n	8004662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d903      	bls.n	8004636 <DMA_CheckFifoParam+0xb6>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d003      	beq.n	800463c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004634:	e018      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      break;
 800463a:	e015      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e00b      	b.n	8004666 <DMA_CheckFifoParam+0xe6>
      break;
 800464e:	bf00      	nop
 8004650:	e00a      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e008      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e006      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;   
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
    }
  } 
  
  return status; 
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004678:	b480      	push	{r7}
 800467a:	b089      	sub	sp, #36	@ 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e165      	b.n	8004960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004694:	2201      	movs	r2, #1
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	f040 8154 	bne.w	800495a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d005      	beq.n	80046ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d130      	bne.n	800472c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	2203      	movs	r2, #3
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004700:	2201      	movs	r2, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 0201 	and.w	r2, r3, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d017      	beq.n	8004768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	2203      	movs	r2, #3
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d123      	bne.n	80047bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	08da      	lsrs	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3208      	adds	r2, #8
 800477c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	220f      	movs	r2, #15
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	08da      	lsrs	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3208      	adds	r2, #8
 80047b6:	69b9      	ldr	r1, [r7, #24]
 80047b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4013      	ands	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0203 	and.w	r2, r3, #3
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80ae 	beq.w	800495a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	4b5d      	ldr	r3, [pc, #372]	@ (8004978 <HAL_GPIO_Init+0x300>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	4a5c      	ldr	r2, [pc, #368]	@ (8004978 <HAL_GPIO_Init+0x300>)
 8004808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800480c:	6453      	str	r3, [r2, #68]	@ 0x44
 800480e:	4b5a      	ldr	r3, [pc, #360]	@ (8004978 <HAL_GPIO_Init+0x300>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800481a:	4a58      	ldr	r2, [pc, #352]	@ (800497c <HAL_GPIO_Init+0x304>)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	3302      	adds	r3, #2
 8004822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	220f      	movs	r2, #15
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4f      	ldr	r2, [pc, #316]	@ (8004980 <HAL_GPIO_Init+0x308>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d025      	beq.n	8004892 <HAL_GPIO_Init+0x21a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4e      	ldr	r2, [pc, #312]	@ (8004984 <HAL_GPIO_Init+0x30c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01f      	beq.n	800488e <HAL_GPIO_Init+0x216>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4d      	ldr	r2, [pc, #308]	@ (8004988 <HAL_GPIO_Init+0x310>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d019      	beq.n	800488a <HAL_GPIO_Init+0x212>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4c      	ldr	r2, [pc, #304]	@ (800498c <HAL_GPIO_Init+0x314>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_GPIO_Init+0x20e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4b      	ldr	r2, [pc, #300]	@ (8004990 <HAL_GPIO_Init+0x318>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00d      	beq.n	8004882 <HAL_GPIO_Init+0x20a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a4a      	ldr	r2, [pc, #296]	@ (8004994 <HAL_GPIO_Init+0x31c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <HAL_GPIO_Init+0x206>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a49      	ldr	r2, [pc, #292]	@ (8004998 <HAL_GPIO_Init+0x320>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <HAL_GPIO_Init+0x202>
 8004876:	2306      	movs	r3, #6
 8004878:	e00c      	b.n	8004894 <HAL_GPIO_Init+0x21c>
 800487a:	2307      	movs	r3, #7
 800487c:	e00a      	b.n	8004894 <HAL_GPIO_Init+0x21c>
 800487e:	2305      	movs	r3, #5
 8004880:	e008      	b.n	8004894 <HAL_GPIO_Init+0x21c>
 8004882:	2304      	movs	r3, #4
 8004884:	e006      	b.n	8004894 <HAL_GPIO_Init+0x21c>
 8004886:	2303      	movs	r3, #3
 8004888:	e004      	b.n	8004894 <HAL_GPIO_Init+0x21c>
 800488a:	2302      	movs	r3, #2
 800488c:	e002      	b.n	8004894 <HAL_GPIO_Init+0x21c>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_GPIO_Init+0x21c>
 8004892:	2300      	movs	r3, #0
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	f002 0203 	and.w	r2, r2, #3
 800489a:	0092      	lsls	r2, r2, #2
 800489c:	4093      	lsls	r3, r2
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048a4:	4935      	ldr	r1, [pc, #212]	@ (800497c <HAL_GPIO_Init+0x304>)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	3302      	adds	r3, #2
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048b2:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_GPIO_Init+0x324>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048d6:	4a31      	ldr	r2, [pc, #196]	@ (800499c <HAL_GPIO_Init+0x324>)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048dc:	4b2f      	ldr	r3, [pc, #188]	@ (800499c <HAL_GPIO_Init+0x324>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004900:	4a26      	ldr	r2, [pc, #152]	@ (800499c <HAL_GPIO_Init+0x324>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004906:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_GPIO_Init+0x324>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800492a:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <HAL_GPIO_Init+0x324>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004930:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <HAL_GPIO_Init+0x324>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004954:	4a11      	ldr	r2, [pc, #68]	@ (800499c <HAL_GPIO_Init+0x324>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3301      	adds	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	f67f ae96 	bls.w	8004694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3724      	adds	r7, #36	@ 0x24
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	40013800 	.word	0x40013800
 8004980:	40020000 	.word	0x40020000
 8004984:	40020400 	.word	0x40020400
 8004988:	40020800 	.word	0x40020800
 800498c:	40020c00 	.word	0x40020c00
 8004990:	40021000 	.word	0x40021000
 8004994:	40021400 	.word	0x40021400
 8004998:	40021800 	.word	0x40021800
 800499c:	40013c00 	.word	0x40013c00

080049a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
 80049ac:	4613      	mov	r3, r2
 80049ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049bc:	e003      	b.n	80049c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	041a      	lsls	r2, r3, #16
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	619a      	str	r2, [r3, #24]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e12b      	b.n	8004c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fe fc38 	bl	8003270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	@ 0x24
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a38:	f001 f922 	bl	8005c80 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4a81      	ldr	r2, [pc, #516]	@ (8004c48 <HAL_I2C_Init+0x274>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d807      	bhi.n	8004a58 <HAL_I2C_Init+0x84>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a80      	ldr	r2, [pc, #512]	@ (8004c4c <HAL_I2C_Init+0x278>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e006      	b.n	8004a66 <HAL_I2C_Init+0x92>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c50 <HAL_I2C_Init+0x27c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bf94      	ite	ls
 8004a60:	2301      	movls	r3, #1
 8004a62:	2300      	movhi	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0e7      	b.n	8004c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a78      	ldr	r2, [pc, #480]	@ (8004c54 <HAL_I2C_Init+0x280>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0c9b      	lsrs	r3, r3, #18
 8004a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c48 <HAL_I2C_Init+0x274>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d802      	bhi.n	8004aa8 <HAL_I2C_Init+0xd4>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	e009      	b.n	8004abc <HAL_I2C_Init+0xe8>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	4a69      	ldr	r2, [pc, #420]	@ (8004c58 <HAL_I2C_Init+0x284>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	099b      	lsrs	r3, r3, #6
 8004aba:	3301      	adds	r3, #1
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004ace:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	495c      	ldr	r1, [pc, #368]	@ (8004c48 <HAL_I2C_Init+0x274>)
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	d819      	bhi.n	8004b10 <HAL_I2C_Init+0x13c>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1e59      	subs	r1, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004af0:	400b      	ands	r3, r1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_I2C_Init+0x138>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1e59      	subs	r1, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b04:	3301      	adds	r3, #1
 8004b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0a:	e051      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	e04f      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <HAL_I2C_Init+0x168>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e58      	subs	r0, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e012      	b.n	8004b62 <HAL_I2C_Init+0x18e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e58      	subs	r0, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	0099      	lsls	r1, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b52:	3301      	adds	r3, #1
 8004b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Init+0x196>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e022      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10e      	bne.n	8004b90 <HAL_I2C_Init+0x1bc>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1e58      	subs	r0, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	440b      	add	r3, r1
 8004b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b8e:	e00f      	b.n	8004bb0 <HAL_I2C_Init+0x1dc>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1e58      	subs	r0, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	0099      	lsls	r1, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	6809      	ldr	r1, [r1, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6911      	ldr	r1, [r2, #16]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68d2      	ldr	r2, [r2, #12]
 8004bea:	4311      	orrs	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	000186a0 	.word	0x000186a0
 8004c4c:	001e847f 	.word	0x001e847f
 8004c50:	003d08ff 	.word	0x003d08ff
 8004c54:	431bde83 	.word	0x431bde83
 8004c58:	10624dd3 	.word	0x10624dd3

08004c5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	460b      	mov	r3, r1
 8004c6a:	817b      	strh	r3, [r7, #10]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c70:	f7fe ffbe 	bl	8003bf0 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	f040 80e0 	bne.w	8004e44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	2319      	movs	r3, #25
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4970      	ldr	r1, [pc, #448]	@ (8004e50 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fc7e 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0d3      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_I2C_Master_Transmit+0x50>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e0cc      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d007      	beq.n	8004cd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2221      	movs	r2, #33	@ 0x21
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2210      	movs	r2, #16
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	893a      	ldrh	r2, [r7, #8]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a50      	ldr	r2, [pc, #320]	@ (8004e54 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d14:	8979      	ldrh	r1, [r7, #10]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fae8 	bl	80052f0 <I2C_MasterRequestWrite>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e08d      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d40:	e066      	b.n	8004e10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fd3c 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d107      	bne.n	8004d6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e06b      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	781a      	ldrb	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d11b      	bne.n	8004de4 <HAL_I2C_Master_Transmit+0x188>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d017      	beq.n	8004de4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6a39      	ldr	r1, [r7, #32]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fd33 	bl	8005854 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d107      	bne.n	8004e0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01a      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d194      	bne.n	8004d42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	00100002 	.word	0x00100002
 8004e54:	ffff0000 	.word	0xffff0000

08004e58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	@ 0x30
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	461a      	mov	r2, r3
 8004e64:	460b      	mov	r3, r1
 8004e66:	817b      	strh	r3, [r7, #10]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e6c:	f7fe fec0 	bl	8003bf0 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	f040 8217 	bne.w	80052ae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2319      	movs	r3, #25
 8004e86:	2201      	movs	r2, #1
 8004e88:	497c      	ldr	r1, [pc, #496]	@ (800507c <HAL_I2C_Master_Receive+0x224>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fb80 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e96:	2302      	movs	r3, #2
 8004e98:	e20a      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_I2C_Master_Receive+0x50>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e203      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d007      	beq.n	8004ece <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2222      	movs	r2, #34	@ 0x22
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	893a      	ldrh	r2, [r7, #8]
 8004efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a5c      	ldr	r2, [pc, #368]	@ (8005080 <HAL_I2C_Master_Receive+0x228>)
 8004f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f10:	8979      	ldrh	r1, [r7, #10]
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fa6c 	bl	80053f4 <I2C_MasterRequestRead>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e1c4      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d113      	bne.n	8004f56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	623b      	str	r3, [r7, #32]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e198      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d11b      	bne.n	8004f96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e178      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d11b      	bne.n	8004fd6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	61bb      	str	r3, [r7, #24]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	e158      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ffc:	e144      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005002:	2b03      	cmp	r3, #3
 8005004:	f200 80f1 	bhi.w	80051ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500c:	2b01      	cmp	r3, #1
 800500e:	d123      	bne.n	8005058 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005012:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fc65 	bl	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e145      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005056:	e117      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505c:	2b02      	cmp	r3, #2
 800505e:	d14e      	bne.n	80050fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	2200      	movs	r2, #0
 8005068:	4906      	ldr	r1, [pc, #24]	@ (8005084 <HAL_I2C_Master_Receive+0x22c>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fa90 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e11a      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
 800507a:	bf00      	nop
 800507c:	00100002 	.word	0x00100002
 8005080:	ffff0000 	.word	0xffff0000
 8005084:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050fc:	e0c4      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	2200      	movs	r2, #0
 8005106:	496c      	ldr	r1, [pc, #432]	@ (80052b8 <HAL_I2C_Master_Receive+0x460>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fa41 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0cb      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	2200      	movs	r2, #0
 8005162:	4955      	ldr	r1, [pc, #340]	@ (80052b8 <HAL_I2C_Master_Receive+0x460>)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fa13 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e09d      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051e8:	e04e      	b.n	8005288 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fb78 	bl	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e058      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d124      	bne.n	8005288 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005242:	2b03      	cmp	r3, #3
 8005244:	d107      	bne.n	8005256 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005254:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f aeb6 	bne.w	8004ffe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	@ 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	00010004 	.word	0x00010004

080052bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ca:	b2db      	uxtb	r3, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d006      	beq.n	800531a <I2C_MasterRequestWrite+0x2a>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d003      	beq.n	800531a <I2C_MasterRequestWrite+0x2a>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005318:	d108      	bne.n	800532c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e00b      	b.n	8005344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	2b12      	cmp	r3, #18
 8005332:	d107      	bne.n	8005344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f91d 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800536a:	d103      	bne.n	8005374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e035      	b.n	80053e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005380:	d108      	bne.n	8005394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005382:	897b      	ldrh	r3, [r7, #10]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005390:	611a      	str	r2, [r3, #16]
 8005392:	e01b      	b.n	80053cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	11db      	asrs	r3, r3, #7
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 0306 	and.w	r3, r3, #6
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f063 030f 	orn	r3, r3, #15
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	490e      	ldr	r1, [pc, #56]	@ (80053ec <I2C_MasterRequestWrite+0xfc>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f966 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e010      	b.n	80053e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053c2:	897b      	ldrh	r3, [r7, #10]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4907      	ldr	r1, [pc, #28]	@ (80053f0 <I2C_MasterRequestWrite+0x100>)
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f956 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	00010008 	.word	0x00010008
 80053f0:	00010002 	.word	0x00010002

080053f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	460b      	mov	r3, r1
 8005402:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005418:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d006      	beq.n	800542e <I2C_MasterRequestRead+0x3a>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d003      	beq.n	800542e <I2C_MasterRequestRead+0x3a>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800542c:	d108      	bne.n	8005440 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e00b      	b.n	8005458 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005444:	2b11      	cmp	r3, #17
 8005446:	d107      	bne.n	8005458 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f893 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800547e:	d103      	bne.n	8005488 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005486:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e079      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005494:	d108      	bne.n	80054a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005496:	897b      	ldrh	r3, [r7, #10]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	e05f      	b.n	8005568 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054a8:	897b      	ldrh	r3, [r7, #10]
 80054aa:	11db      	asrs	r3, r3, #7
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0306 	and.w	r3, r3, #6
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f063 030f 	orn	r3, r3, #15
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4930      	ldr	r1, [pc, #192]	@ (8005588 <I2C_MasterRequestRead+0x194>)
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f8dc 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e054      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054d6:	897b      	ldrh	r3, [r7, #10]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4929      	ldr	r1, [pc, #164]	@ (800558c <I2C_MasterRequestRead+0x198>)
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f8cc 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e044      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800551a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f831 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005542:	d103      	bne.n	800554c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e017      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005550:	897b      	ldrh	r3, [r7, #10]
 8005552:	11db      	asrs	r3, r3, #7
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0306 	and.w	r3, r3, #6
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f063 030e 	orn	r3, r3, #14
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4907      	ldr	r1, [pc, #28]	@ (800558c <I2C_MasterRequestRead+0x198>)
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f888 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	00010008 	.word	0x00010008
 800558c:	00010002 	.word	0x00010002

08005590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a0:	e048      	b.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d044      	beq.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fe fb21 	bl	8003bf0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d139      	bne.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d10d      	bne.n	80055e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	e00c      	b.n	8005600 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	43da      	mvns	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	429a      	cmp	r2, r3
 8005604:	d116      	bne.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e023      	b.n	800567c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10d      	bne.n	800565a <I2C_WaitOnFlagUntilTimeout+0xca>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	43da      	mvns	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4013      	ands	r3, r2
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	e00c      	b.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	43da      	mvns	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	429a      	cmp	r2, r3
 8005678:	d093      	beq.n	80055a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005692:	e071      	b.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a2:	d123      	bne.n	80056ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e067      	b.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d041      	beq.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f4:	f7fe fa7c 	bl	8003bf0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d136      	bne.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10c      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e00b      	b.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d016      	beq.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e021      	b.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10c      	bne.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	43da      	mvns	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e00b      	b.n	80057b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	43da      	mvns	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4013      	ands	r3, r2
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bf14      	ite	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	2300      	moveq	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47f af6d 	bne.w	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d0:	e034      	b.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f8e3 	bl	800599e <I2C_IsAcknowledgeFailed>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e034      	b.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d028      	beq.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fe fa01 	bl	8003bf0 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11d      	bne.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b80      	cmp	r3, #128	@ 0x80
 800580c:	d016      	beq.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005828:	f043 0220 	orr.w	r2, r3, #32
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e007      	b.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005846:	2b80      	cmp	r3, #128	@ 0x80
 8005848:	d1c3      	bne.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005860:	e034      	b.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f89b 	bl	800599e <I2C_IsAcknowledgeFailed>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e034      	b.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d028      	beq.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fe f9b9 	bl	8003bf0 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11d      	bne.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d016      	beq.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e007      	b.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d1c3      	bne.n	8005862 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058f0:	e049      	b.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d119      	bne.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0210 	mvn.w	r2, #16
 8005908:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e030      	b.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005934:	f7fe f95c 	bl	8003bf0 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11d      	bne.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005954:	2b40      	cmp	r3, #64	@ 0x40
 8005956:	d016      	beq.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e007      	b.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d1ae      	bne.n	80058f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b4:	d11b      	bne.n	80059ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	f043 0204 	orr.w	r2, r3, #4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	603b      	str	r3, [r7, #0]
 8005a0a:	4b20      	ldr	r3, [pc, #128]	@ (8005a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a16:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <HAL_PWREx_EnableOverDrive+0x90>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a22:	4b1b      	ldr	r3, [pc, #108]	@ (8005a90 <HAL_PWREx_EnableOverDrive+0x94>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a28:	f7fe f8e2 	bl	8003bf0 <HAL_GetTick>
 8005a2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a2e:	e009      	b.n	8005a44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a30:	f7fe f8de 	bl	8003bf0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a3e:	d901      	bls.n	8005a44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e01f      	b.n	8005a84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a44:	4b13      	ldr	r3, [pc, #76]	@ (8005a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a50:	d1ee      	bne.n	8005a30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a52:	4b11      	ldr	r3, [pc, #68]	@ (8005a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a58:	f7fe f8ca 	bl	8003bf0 <HAL_GetTick>
 8005a5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a5e:	e009      	b.n	8005a74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a60:	f7fe f8c6 	bl	8003bf0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a6e:	d901      	bls.n	8005a74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e007      	b.n	8005a84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a74:	4b07      	ldr	r3, [pc, #28]	@ (8005a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a80:	d1ee      	bne.n	8005a60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	420e0040 	.word	0x420e0040
 8005a94:	40007000 	.word	0x40007000
 8005a98:	420e0044 	.word	0x420e0044

08005a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0cc      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab0:	4b68      	ldr	r3, [pc, #416]	@ (8005c54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d90c      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005abe:	4b65      	ldr	r3, [pc, #404]	@ (8005c54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b63      	ldr	r3, [pc, #396]	@ (8005c54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0b8      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d020      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af0:	4b59      	ldr	r3, [pc, #356]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	4a58      	ldr	r2, [pc, #352]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b08:	4b53      	ldr	r3, [pc, #332]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4a52      	ldr	r2, [pc, #328]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b14:	4b50      	ldr	r3, [pc, #320]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	494d      	ldr	r1, [pc, #308]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d044      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d107      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	4b47      	ldr	r3, [pc, #284]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d119      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e07f      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d003      	beq.n	8005b5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d107      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e06f      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e067      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b7a:	4b37      	ldr	r3, [pc, #220]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f023 0203 	bic.w	r2, r3, #3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4934      	ldr	r1, [pc, #208]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b8c:	f7fe f830 	bl	8003bf0 <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b94:	f7fe f82c 	bl	8003bf0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e04f      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005baa:	4b2b      	ldr	r3, [pc, #172]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 020c 	and.w	r2, r3, #12
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d1eb      	bne.n	8005b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <HAL_RCC_ClockConfig+0x1b8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d20c      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b22      	ldr	r3, [pc, #136]	@ (8005c54 <HAL_RCC_ClockConfig+0x1b8>)
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b20      	ldr	r3, [pc, #128]	@ (8005c54 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e032      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf0:	4b19      	ldr	r3, [pc, #100]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4916      	ldr	r1, [pc, #88]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c0e:	4b12      	ldr	r3, [pc, #72]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	490e      	ldr	r1, [pc, #56]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c22:	f000 f855 	bl	8005cd0 <HAL_RCC_GetSysClockFreq>
 8005c26:	4602      	mov	r2, r0
 8005c28:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	490a      	ldr	r1, [pc, #40]	@ (8005c5c <HAL_RCC_ClockConfig+0x1c0>)
 8005c34:	5ccb      	ldrb	r3, [r1, r3]
 8005c36:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3a:	4a09      	ldr	r2, [pc, #36]	@ (8005c60 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c3e:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <HAL_RCC_ClockConfig+0x1c8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd ff90 	bl	8003b68 <HAL_InitTick>

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40023c00 	.word	0x40023c00
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	0800da44 	.word	0x0800da44
 8005c60:	2000002c 	.word	0x2000002c
 8005c64:	20000030 	.word	0x20000030

08005c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	@ (8005c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	2000002c 	.word	0x2000002c

08005c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c84:	f7ff fff0 	bl	8005c68 <HAL_RCC_GetHCLKFreq>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	0a9b      	lsrs	r3, r3, #10
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	4903      	ldr	r1, [pc, #12]	@ (8005ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c96:	5ccb      	ldrb	r3, [r1, r3]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	0800da54 	.word	0x0800da54

08005ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cac:	f7ff ffdc 	bl	8005c68 <HAL_RCC_GetHCLKFreq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b05      	ldr	r3, [pc, #20]	@ (8005cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	0b5b      	lsrs	r3, r3, #13
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	4903      	ldr	r1, [pc, #12]	@ (8005ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cbe:	5ccb      	ldrb	r3, [r1, r3]
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	0800da54 	.word	0x0800da54

08005cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b0ae      	sub	sp, #184	@ 0xb8
 8005cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf6:	4bcb      	ldr	r3, [pc, #812]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b0c      	cmp	r3, #12
 8005d00:	f200 8206 	bhi.w	8006110 <HAL_RCC_GetSysClockFreq+0x440>
 8005d04:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08006111 	.word	0x08006111
 8005d14:	08006111 	.word	0x08006111
 8005d18:	08006111 	.word	0x08006111
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08006111 	.word	0x08006111
 8005d24:	08006111 	.word	0x08006111
 8005d28:	08006111 	.word	0x08006111
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08006111 	.word	0x08006111
 8005d34:	08006111 	.word	0x08006111
 8005d38:	08006111 	.word	0x08006111
 8005d3c:	08005f41 	.word	0x08005f41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d40:	4bb9      	ldr	r3, [pc, #740]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x358>)
 8005d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d46:	e1e7      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d48:	4bb8      	ldr	r3, [pc, #736]	@ (800602c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d4e:	e1e3      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d50:	4bb4      	ldr	r3, [pc, #720]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d5c:	4bb1      	ldr	r3, [pc, #708]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d071      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d68:	4bae      	ldr	r3, [pc, #696]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	099b      	lsrs	r3, r3, #6
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d74:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d84:	2300      	movs	r3, #0
 8005d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f04f 0100 	mov.w	r1, #0
 8005d9a:	0159      	lsls	r1, r3, #5
 8005d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da0:	0150      	lsls	r0, r2, #5
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4621      	mov	r1, r4
 8005da8:	1a51      	subs	r1, r2, r1
 8005daa:	6439      	str	r1, [r7, #64]	@ 0x40
 8005dac:	4629      	mov	r1, r5
 8005dae:	eb63 0301 	sbc.w	r3, r3, r1
 8005db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	018b      	lsls	r3, r1, #6
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dca:	4641      	mov	r1, r8
 8005dcc:	018a      	lsls	r2, r1, #6
 8005dce:	4641      	mov	r1, r8
 8005dd0:	1a51      	subs	r1, r2, r1
 8005dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005de8:	4649      	mov	r1, r9
 8005dea:	00cb      	lsls	r3, r1, #3
 8005dec:	4641      	mov	r1, r8
 8005dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df2:	4641      	mov	r1, r8
 8005df4:	00ca      	lsls	r2, r1, #3
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	189b      	adds	r3, r3, r2
 8005e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e02:	462b      	mov	r3, r5
 8005e04:	460a      	mov	r2, r1
 8005e06:	eb42 0303 	adc.w	r3, r2, r3
 8005e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e18:	4629      	mov	r1, r5
 8005e1a:	024b      	lsls	r3, r1, #9
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e22:	4621      	mov	r1, r4
 8005e24:	024a      	lsls	r2, r1, #9
 8005e26:	4610      	mov	r0, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005e3c:	f7fa ff44 	bl	8000cc8 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4613      	mov	r3, r2
 8005e46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e4a:	e067      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4c:	4b75      	ldr	r3, [pc, #468]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	099b      	lsrs	r3, r3, #6
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e66:	2300      	movs	r3, #0
 8005e68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f04f 0100 	mov.w	r1, #0
 8005e7a:	0159      	lsls	r1, r3, #5
 8005e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e80:	0150      	lsls	r0, r2, #5
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4621      	mov	r1, r4
 8005e88:	1a51      	subs	r1, r2, r1
 8005e8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	018b      	lsls	r3, r1, #6
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eaa:	4641      	mov	r1, r8
 8005eac:	018a      	lsls	r2, r1, #6
 8005eae:	4641      	mov	r1, r8
 8005eb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ece:	4692      	mov	sl, r2
 8005ed0:	469b      	mov	fp, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	eb1a 0303 	adds.w	r3, sl, r3
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	462b      	mov	r3, r5
 8005edc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005eee:	4629      	mov	r1, r5
 8005ef0:	028b      	lsls	r3, r1, #10
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef8:	4621      	mov	r1, r4
 8005efa:	028a      	lsls	r2, r1, #10
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f04:	2200      	movs	r2, #0
 8005f06:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f08:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005f0e:	f7fa fedb 	bl	8000cc8 <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4613      	mov	r3, r2
 8005f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f1c:	4b41      	ldr	r3, [pc, #260]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	3301      	adds	r3, #1
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f3e:	e0eb      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f40:	4b38      	ldr	r3, [pc, #224]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f4c:	4b35      	ldr	r3, [pc, #212]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d06b      	beq.n	8006030 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f58:	4b32      	ldr	r3, [pc, #200]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	099b      	lsrs	r3, r3, #6
 8005f5e:	2200      	movs	r2, #0
 8005f60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005f74:	4622      	mov	r2, r4
 8005f76:	462b      	mov	r3, r5
 8005f78:	f04f 0000 	mov.w	r0, #0
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f86:	0150      	lsls	r0, r2, #5
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	1a51      	subs	r1, r2, r1
 8005f90:	61b9      	str	r1, [r7, #24]
 8005f92:	4629      	mov	r1, r5
 8005f94:	eb63 0301 	sbc.w	r3, r3, r1
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	018b      	lsls	r3, r1, #6
 8005faa:	4651      	mov	r1, sl
 8005fac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fb0:	4651      	mov	r1, sl
 8005fb2:	018a      	lsls	r2, r1, #6
 8005fb4:	4651      	mov	r1, sl
 8005fb6:	ebb2 0801 	subs.w	r8, r2, r1
 8005fba:	4659      	mov	r1, fp
 8005fbc:	eb63 0901 	sbc.w	r9, r3, r1
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fd4:	4690      	mov	r8, r2
 8005fd6:	4699      	mov	r9, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	eb18 0303 	adds.w	r3, r8, r3
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	eb49 0303 	adc.w	r3, r9, r3
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	024b      	lsls	r3, r1, #9
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ffe:	4621      	mov	r1, r4
 8006000:	024a      	lsls	r2, r1, #9
 8006002:	4610      	mov	r0, r2
 8006004:	4619      	mov	r1, r3
 8006006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800600a:	2200      	movs	r2, #0
 800600c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800600e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006010:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006014:	f7fa fe58 	bl	8000cc8 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4613      	mov	r3, r2
 800601e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006022:	e065      	b.n	80060f0 <HAL_RCC_GetSysClockFreq+0x420>
 8006024:	40023800 	.word	0x40023800
 8006028:	00f42400 	.word	0x00f42400
 800602c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006030:	4b3d      	ldr	r3, [pc, #244]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x458>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	099b      	lsrs	r3, r3, #6
 8006036:	2200      	movs	r2, #0
 8006038:	4618      	mov	r0, r3
 800603a:	4611      	mov	r1, r2
 800603c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006040:	653b      	str	r3, [r7, #80]	@ 0x50
 8006042:	2300      	movs	r3, #0
 8006044:	657b      	str	r3, [r7, #84]	@ 0x54
 8006046:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800604a:	4642      	mov	r2, r8
 800604c:	464b      	mov	r3, r9
 800604e:	f04f 0000 	mov.w	r0, #0
 8006052:	f04f 0100 	mov.w	r1, #0
 8006056:	0159      	lsls	r1, r3, #5
 8006058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800605c:	0150      	lsls	r0, r2, #5
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4641      	mov	r1, r8
 8006064:	1a51      	subs	r1, r2, r1
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	4649      	mov	r1, r9
 800606a:	eb63 0301 	sbc.w	r3, r3, r1
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800607c:	4659      	mov	r1, fp
 800607e:	018b      	lsls	r3, r1, #6
 8006080:	4651      	mov	r1, sl
 8006082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006086:	4651      	mov	r1, sl
 8006088:	018a      	lsls	r2, r1, #6
 800608a:	4651      	mov	r1, sl
 800608c:	1a54      	subs	r4, r2, r1
 800608e:	4659      	mov	r1, fp
 8006090:	eb63 0501 	sbc.w	r5, r3, r1
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	00eb      	lsls	r3, r5, #3
 800609e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060a2:	00e2      	lsls	r2, r4, #3
 80060a4:	4614      	mov	r4, r2
 80060a6:	461d      	mov	r5, r3
 80060a8:	4643      	mov	r3, r8
 80060aa:	18e3      	adds	r3, r4, r3
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	464b      	mov	r3, r9
 80060b0:	eb45 0303 	adc.w	r3, r5, r3
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060c2:	4629      	mov	r1, r5
 80060c4:	028b      	lsls	r3, r1, #10
 80060c6:	4621      	mov	r1, r4
 80060c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060cc:	4621      	mov	r1, r4
 80060ce:	028a      	lsls	r2, r1, #10
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060d8:	2200      	movs	r2, #0
 80060da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80060de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060e2:	f7fa fdf1 	bl	8000cc8 <__aeabi_uldivmod>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4613      	mov	r3, r2
 80060ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80060f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x458>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	0f1b      	lsrs	r3, r3, #28
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80060fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800610e:	e003      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006116:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800611c:	4618      	mov	r0, r3
 800611e:	37b8      	adds	r7, #184	@ 0xb8
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800
 800612c:	00f42400 	.word	0x00f42400

08006130 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e28d      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 8083 	beq.w	8006256 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006150:	4b94      	ldr	r3, [pc, #592]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 030c 	and.w	r3, r3, #12
 8006158:	2b04      	cmp	r3, #4
 800615a:	d019      	beq.n	8006190 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800615c:	4b91      	ldr	r3, [pc, #580]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 030c 	and.w	r3, r3, #12
        || \
 8006164:	2b08      	cmp	r3, #8
 8006166:	d106      	bne.n	8006176 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006168:	4b8e      	ldr	r3, [pc, #568]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006170:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006174:	d00c      	beq.n	8006190 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006176:	4b8b      	ldr	r3, [pc, #556]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800617e:	2b0c      	cmp	r3, #12
 8006180:	d112      	bne.n	80061a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006182:	4b88      	ldr	r3, [pc, #544]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800618a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800618e:	d10b      	bne.n	80061a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006190:	4b84      	ldr	r3, [pc, #528]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05b      	beq.n	8006254 <HAL_RCC_OscConfig+0x124>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d157      	bne.n	8006254 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e25a      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b0:	d106      	bne.n	80061c0 <HAL_RCC_OscConfig+0x90>
 80061b2:	4b7c      	ldr	r3, [pc, #496]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a7b      	ldr	r2, [pc, #492]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	e01d      	b.n	80061fc <HAL_RCC_OscConfig+0xcc>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061c8:	d10c      	bne.n	80061e4 <HAL_RCC_OscConfig+0xb4>
 80061ca:	4b76      	ldr	r3, [pc, #472]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a75      	ldr	r2, [pc, #468]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4b73      	ldr	r3, [pc, #460]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a72      	ldr	r2, [pc, #456]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	e00b      	b.n	80061fc <HAL_RCC_OscConfig+0xcc>
 80061e4:	4b6f      	ldr	r3, [pc, #444]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a6e      	ldr	r2, [pc, #440]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	4b6c      	ldr	r3, [pc, #432]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6b      	ldr	r2, [pc, #428]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80061f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d013      	beq.n	800622c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fd fcf4 	bl	8003bf0 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800620c:	f7fd fcf0 	bl	8003bf0 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b64      	cmp	r3, #100	@ 0x64
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e21f      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621e:	4b61      	ldr	r3, [pc, #388]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0xdc>
 800622a:	e014      	b.n	8006256 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622c:	f7fd fce0 	bl	8003bf0 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006234:	f7fd fcdc 	bl	8003bf0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	@ 0x64
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e20b      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006246:	4b57      	ldr	r3, [pc, #348]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x104>
 8006252:	e000      	b.n	8006256 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d06f      	beq.n	8006342 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006262:	4b50      	ldr	r3, [pc, #320]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 030c 	and.w	r3, r3, #12
 800626a:	2b00      	cmp	r3, #0
 800626c:	d017      	beq.n	800629e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800626e:	4b4d      	ldr	r3, [pc, #308]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 030c 	and.w	r3, r3, #12
        || \
 8006276:	2b08      	cmp	r3, #8
 8006278:	d105      	bne.n	8006286 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800627a:	4b4a      	ldr	r3, [pc, #296]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006286:	4b47      	ldr	r3, [pc, #284]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d11c      	bne.n	80062cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006292:	4b44      	ldr	r3, [pc, #272]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d116      	bne.n	80062cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629e:	4b41      	ldr	r3, [pc, #260]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_RCC_OscConfig+0x186>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d001      	beq.n	80062b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e1d3      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b6:	4b3b      	ldr	r3, [pc, #236]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4937      	ldr	r1, [pc, #220]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	e03a      	b.n	8006342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d4:	4b34      	ldr	r3, [pc, #208]	@ (80063a8 <HAL_RCC_OscConfig+0x278>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062da:	f7fd fc89 	bl	8003bf0 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e2:	f7fd fc85 	bl	8003bf0 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e1b4      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f4:	4b2b      	ldr	r3, [pc, #172]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006300:	4b28      	ldr	r3, [pc, #160]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4925      	ldr	r1, [pc, #148]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006310:	4313      	orrs	r3, r2
 8006312:	600b      	str	r3, [r1, #0]
 8006314:	e015      	b.n	8006342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006316:	4b24      	ldr	r3, [pc, #144]	@ (80063a8 <HAL_RCC_OscConfig+0x278>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fd fc68 	bl	8003bf0 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006324:	f7fd fc64 	bl	8003bf0 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e193      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006336:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d036      	beq.n	80063bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <HAL_RCC_OscConfig+0x27c>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fd fc48 	bl	8003bf0 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006364:	f7fd fc44 	bl	8003bf0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e173      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006376:	4b0b      	ldr	r3, [pc, #44]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0x234>
 8006382:	e01b      	b.n	80063bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006384:	4b09      	ldr	r3, [pc, #36]	@ (80063ac <HAL_RCC_OscConfig+0x27c>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638a:	f7fd fc31 	bl	8003bf0 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006390:	e00e      	b.n	80063b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006392:	f7fd fc2d 	bl	8003bf0 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d907      	bls.n	80063b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e15c      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
 80063a4:	40023800 	.word	0x40023800
 80063a8:	42470000 	.word	0x42470000
 80063ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b0:	4b8a      	ldr	r3, [pc, #552]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80063b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ea      	bne.n	8006392 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8097 	beq.w	80064f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ce:	4b83      	ldr	r3, [pc, #524]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10f      	bne.n	80063fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	4b7f      	ldr	r3, [pc, #508]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	4a7e      	ldr	r2, [pc, #504]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80063e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80063ea:	4b7c      	ldr	r3, [pc, #496]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f6:	2301      	movs	r3, #1
 80063f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fa:	4b79      	ldr	r3, [pc, #484]	@ (80065e0 <HAL_RCC_OscConfig+0x4b0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d118      	bne.n	8006438 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006406:	4b76      	ldr	r3, [pc, #472]	@ (80065e0 <HAL_RCC_OscConfig+0x4b0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a75      	ldr	r2, [pc, #468]	@ (80065e0 <HAL_RCC_OscConfig+0x4b0>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006412:	f7fd fbed 	bl	8003bf0 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641a:	f7fd fbe9 	bl	8003bf0 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e118      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800642c:	4b6c      	ldr	r3, [pc, #432]	@ (80065e0 <HAL_RCC_OscConfig+0x4b0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f0      	beq.n	800641a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d106      	bne.n	800644e <HAL_RCC_OscConfig+0x31e>
 8006440:	4b66      	ldr	r3, [pc, #408]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006444:	4a65      	ldr	r2, [pc, #404]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6713      	str	r3, [r2, #112]	@ 0x70
 800644c:	e01c      	b.n	8006488 <HAL_RCC_OscConfig+0x358>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x340>
 8006456:	4b61      	ldr	r3, [pc, #388]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645a:	4a60      	ldr	r2, [pc, #384]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 800645c:	f043 0304 	orr.w	r3, r3, #4
 8006460:	6713      	str	r3, [r2, #112]	@ 0x70
 8006462:	4b5e      	ldr	r3, [pc, #376]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006466:	4a5d      	ldr	r2, [pc, #372]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	6713      	str	r3, [r2, #112]	@ 0x70
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0x358>
 8006470:	4b5a      	ldr	r3, [pc, #360]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006474:	4a59      	ldr	r2, [pc, #356]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	6713      	str	r3, [r2, #112]	@ 0x70
 800647c:	4b57      	ldr	r3, [pc, #348]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006480:	4a56      	ldr	r2, [pc, #344]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006482:	f023 0304 	bic.w	r3, r3, #4
 8006486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d015      	beq.n	80064bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006490:	f7fd fbae 	bl	8003bf0 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006496:	e00a      	b.n	80064ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006498:	f7fd fbaa 	bl	8003bf0 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e0d7      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ae:	4b4b      	ldr	r3, [pc, #300]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0ee      	beq.n	8006498 <HAL_RCC_OscConfig+0x368>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064bc:	f7fd fb98 	bl	8003bf0 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c2:	e00a      	b.n	80064da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c4:	f7fd fb94 	bl	8003bf0 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0c1      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064da:	4b40      	ldr	r3, [pc, #256]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ee      	bne.n	80064c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d105      	bne.n	80064f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ec:	4b3b      	ldr	r3, [pc, #236]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	4a3a      	ldr	r2, [pc, #232]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80064f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80ad 	beq.w	800665c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006502:	4b36      	ldr	r3, [pc, #216]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	2b08      	cmp	r3, #8
 800650c:	d060      	beq.n	80065d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d145      	bne.n	80065a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006516:	4b33      	ldr	r3, [pc, #204]	@ (80065e4 <HAL_RCC_OscConfig+0x4b4>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651c:	f7fd fb68 	bl	8003bf0 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006524:	f7fd fb64 	bl	8003bf0 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e093      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006536:	4b29      	ldr	r3, [pc, #164]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	3b01      	subs	r3, #1
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	061b      	lsls	r3, r3, #24
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656c:	071b      	lsls	r3, r3, #28
 800656e:	491b      	ldr	r1, [pc, #108]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006570:	4313      	orrs	r3, r2
 8006572:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006574:	4b1b      	ldr	r3, [pc, #108]	@ (80065e4 <HAL_RCC_OscConfig+0x4b4>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657a:	f7fd fb39 	bl	8003bf0 <HAL_GetTick>
 800657e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006580:	e008      	b.n	8006594 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006582:	f7fd fb35 	bl	8003bf0 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e064      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006594:	4b11      	ldr	r3, [pc, #68]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <HAL_RCC_OscConfig+0x452>
 80065a0:	e05c      	b.n	800665c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a2:	4b10      	ldr	r3, [pc, #64]	@ (80065e4 <HAL_RCC_OscConfig+0x4b4>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fd fb22 	bl	8003bf0 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b0:	f7fd fb1e 	bl	8003bf0 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e04d      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	4b06      	ldr	r3, [pc, #24]	@ (80065dc <HAL_RCC_OscConfig+0x4ac>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f0      	bne.n	80065b0 <HAL_RCC_OscConfig+0x480>
 80065ce:	e045      	b.n	800665c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d107      	bne.n	80065e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e040      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
 80065dc:	40023800 	.word	0x40023800
 80065e0:	40007000 	.word	0x40007000
 80065e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006668 <HAL_RCC_OscConfig+0x538>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d030      	beq.n	8006658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006600:	429a      	cmp	r2, r3
 8006602:	d129      	bne.n	8006658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660e:	429a      	cmp	r2, r3
 8006610:	d122      	bne.n	8006658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006618:	4013      	ands	r3, r2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800661e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006620:	4293      	cmp	r3, r2
 8006622:	d119      	bne.n	8006658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	3b01      	subs	r3, #1
 8006632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d10f      	bne.n	8006658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d107      	bne.n	8006658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d001      	beq.n	800665c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40023800 	.word	0x40023800

0800666c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e041      	b.n	8006702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fc ff38 	bl	8003508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f000 fca4 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e041      	b.n	80067a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f839 	bl	80067a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f000 fc55 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <HAL_TIM_PWM_Start+0x24>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e022      	b.n	8006826 <HAL_TIM_PWM_Start+0x6a>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d109      	bne.n	80067fa <HAL_TIM_PWM_Start+0x3e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	bf14      	ite	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	2300      	moveq	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	e015      	b.n	8006826 <HAL_TIM_PWM_Start+0x6a>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d109      	bne.n	8006814 <HAL_TIM_PWM_Start+0x58>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b01      	cmp	r3, #1
 800680a:	bf14      	ite	ne
 800680c:	2301      	movne	r3, #1
 800680e:	2300      	moveq	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	e008      	b.n	8006826 <HAL_TIM_PWM_Start+0x6a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e07c      	b.n	8006928 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Start+0x82>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800683c:	e013      	b.n	8006866 <HAL_TIM_PWM_Start+0xaa>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d104      	bne.n	800684e <HAL_TIM_PWM_Start+0x92>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800684c:	e00b      	b.n	8006866 <HAL_TIM_PWM_Start+0xaa>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Start+0xa2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800685c:	e003      	b.n	8006866 <HAL_TIM_PWM_Start+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2201      	movs	r2, #1
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 feb8 	bl	80075e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a2d      	ldr	r2, [pc, #180]	@ (8006930 <HAL_TIM_PWM_Start+0x174>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIM_PWM_Start+0xcc>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a2c      	ldr	r2, [pc, #176]	@ (8006934 <HAL_TIM_PWM_Start+0x178>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d101      	bne.n	800688c <HAL_TIM_PWM_Start+0xd0>
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <HAL_TIM_PWM_Start+0xd2>
 800688c:	2300      	movs	r3, #0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a22      	ldr	r2, [pc, #136]	@ (8006930 <HAL_TIM_PWM_Start+0x174>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d022      	beq.n	80068f2 <HAL_TIM_PWM_Start+0x136>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b4:	d01d      	beq.n	80068f2 <HAL_TIM_PWM_Start+0x136>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006938 <HAL_TIM_PWM_Start+0x17c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d018      	beq.n	80068f2 <HAL_TIM_PWM_Start+0x136>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	@ (800693c <HAL_TIM_PWM_Start+0x180>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_TIM_PWM_Start+0x136>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006940 <HAL_TIM_PWM_Start+0x184>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_TIM_PWM_Start+0x136>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a16      	ldr	r2, [pc, #88]	@ (8006934 <HAL_TIM_PWM_Start+0x178>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_TIM_PWM_Start+0x136>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a18      	ldr	r2, [pc, #96]	@ (8006944 <HAL_TIM_PWM_Start+0x188>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_TIM_PWM_Start+0x136>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a16      	ldr	r2, [pc, #88]	@ (8006948 <HAL_TIM_PWM_Start+0x18c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d111      	bne.n	8006916 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b06      	cmp	r3, #6
 8006902:	d010      	beq.n	8006926 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006914:	e007      	b.n	8006926 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0201 	orr.w	r2, r2, #1
 8006924:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40010000 	.word	0x40010000
 8006934:	40010400 	.word	0x40010400
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40014000 	.word	0x40014000
 8006948:	40001800 	.word	0x40001800

0800694c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e097      	b.n	8006a90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fc fcc3 	bl	8003300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006990:	f023 0307 	bic.w	r3, r3, #7
 8006994:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f000 fb29 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	4313      	orrs	r3, r2
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069ec:	f023 030c 	bic.w	r3, r3, #12
 80069f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	011a      	lsls	r2, r3, #4
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	031b      	lsls	r3, r3, #12
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006aa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ab0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ab8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ac0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d110      	bne.n	8006aea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d102      	bne.n	8006ad4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ace:	7b7b      	ldrb	r3, [r7, #13]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d001      	beq.n	8006ad8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e069      	b.n	8006bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ae8:	e031      	b.n	8006b4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d110      	bne.n	8006b12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d102      	bne.n	8006afc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006af6:	7b3b      	ldrb	r3, [r7, #12]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d001      	beq.n	8006b00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e055      	b.n	8006bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b10:	e01d      	b.n	8006b4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d108      	bne.n	8006b2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d105      	bne.n	8006b2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b1e:	7b7b      	ldrb	r3, [r7, #13]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d102      	bne.n	8006b2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b24:	7b3b      	ldrb	r3, [r7, #12]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d001      	beq.n	8006b2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e03e      	b.n	8006bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_TIM_Encoder_Start+0xc4>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d008      	beq.n	8006b6c <HAL_TIM_Encoder_Start+0xd4>
 8006b5a:	e00f      	b.n	8006b7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2201      	movs	r2, #1
 8006b62:	2100      	movs	r1, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fd3d 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006b6a:	e016      	b.n	8006b9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2201      	movs	r2, #1
 8006b72:	2104      	movs	r1, #4
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fd35 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006b7a:	e00e      	b.n	8006b9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2201      	movs	r2, #1
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fd2d 	bl	80075e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2104      	movs	r1, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fd26 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006b98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_TIM_Encoder_Stop+0x18>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d008      	beq.n	8006bdc <HAL_TIM_Encoder_Stop+0x28>
 8006bca:	e00f      	b.n	8006bec <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fd05 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006bda:	e016      	b.n	8006c0a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2200      	movs	r2, #0
 8006be2:	2104      	movs	r1, #4
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fcfd 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006bea:	e00e      	b.n	8006c0a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fcf5 	bl	80075e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2104      	movs	r1, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fcee 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006c08:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <HAL_TIM_Encoder_Stop+0x86>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d107      	bne.n	8006c3a <HAL_TIM_Encoder_Stop+0x86>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_TIM_Encoder_Stop+0x92>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d138      	bne.n	8006cb8 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_Encoder_Stop+0xa2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c54:	e013      	b.n	8006c7e <HAL_TIM_Encoder_Stop+0xca>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_Encoder_Stop+0xb2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c64:	e00b      	b.n	8006c7e <HAL_TIM_Encoder_Stop+0xca>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_Encoder_Stop+0xc2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c74:	e003      	b.n	8006c7e <HAL_TIM_Encoder_Stop+0xca>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_Encoder_Stop+0xda>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c8c:	e024      	b.n	8006cd8 <HAL_TIM_Encoder_Stop+0x124>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_Encoder_Stop+0xea>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c9c:	e01c      	b.n	8006cd8 <HAL_TIM_Encoder_Stop+0x124>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_Encoder_Stop+0xfa>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cac:	e014      	b.n	8006cd8 <HAL_TIM_Encoder_Stop+0x124>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cb6:	e00f      	b.n	8006cd8 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e0ae      	b.n	8006e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b0c      	cmp	r3, #12
 8006d0e:	f200 809f 	bhi.w	8006e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d12:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006e51 	.word	0x08006e51
 8006d20:	08006e51 	.word	0x08006e51
 8006d24:	08006e51 	.word	0x08006e51
 8006d28:	08006d8d 	.word	0x08006d8d
 8006d2c:	08006e51 	.word	0x08006e51
 8006d30:	08006e51 	.word	0x08006e51
 8006d34:	08006e51 	.word	0x08006e51
 8006d38:	08006dcf 	.word	0x08006dcf
 8006d3c:	08006e51 	.word	0x08006e51
 8006d40:	08006e51 	.word	0x08006e51
 8006d44:	08006e51 	.word	0x08006e51
 8006d48:	08006e0f 	.word	0x08006e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 f9fc 	bl	8007150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0208 	orr.w	r2, r2, #8
 8006d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0204 	bic.w	r2, r2, #4
 8006d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6999      	ldr	r1, [r3, #24]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	619a      	str	r2, [r3, #24]
      break;
 8006d8a:	e064      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fa4c 	bl	8007230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699a      	ldr	r2, [r3, #24]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6999      	ldr	r1, [r3, #24]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	619a      	str	r2, [r3, #24]
      break;
 8006dcc:	e043      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 faa1 	bl	800731c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0208 	orr.w	r2, r2, #8
 8006de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0204 	bic.w	r2, r2, #4
 8006df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69d9      	ldr	r1, [r3, #28]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	61da      	str	r2, [r3, #28]
      break;
 8006e0c:	e023      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 faf5 	bl	8007404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69d9      	ldr	r1, [r3, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	021a      	lsls	r2, r3, #8
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	61da      	str	r2, [r3, #28]
      break;
 8006e4e:	e002      	b.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
      break;
 8006e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIM_ConfigClockSource+0x1c>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e0b4      	b.n	8006fee <HAL_TIM_ConfigClockSource+0x186>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ebc:	d03e      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0xd4>
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec2:	f200 8087 	bhi.w	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eca:	f000 8086 	beq.w	8006fda <HAL_TIM_ConfigClockSource+0x172>
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed2:	d87f      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b70      	cmp	r3, #112	@ 0x70
 8006ed6:	d01a      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0xa6>
 8006ed8:	2b70      	cmp	r3, #112	@ 0x70
 8006eda:	d87b      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b60      	cmp	r3, #96	@ 0x60
 8006ede:	d050      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x11a>
 8006ee0:	2b60      	cmp	r3, #96	@ 0x60
 8006ee2:	d877      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b50      	cmp	r3, #80	@ 0x50
 8006ee6:	d03c      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0xfa>
 8006ee8:	2b50      	cmp	r3, #80	@ 0x50
 8006eea:	d873      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b40      	cmp	r3, #64	@ 0x40
 8006eee:	d058      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	d86f      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef4:	2b30      	cmp	r3, #48	@ 0x30
 8006ef6:	d064      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ef8:	2b30      	cmp	r3, #48	@ 0x30
 8006efa:	d86b      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d060      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d867      	bhi.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d05c      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d05a      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f0c:	e062      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f1e:	f000 fb41 	bl	80075a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	609a      	str	r2, [r3, #8]
      break;
 8006f3a:	e04f      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f4c:	f000 fb2a 	bl	80075a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f5e:	609a      	str	r2, [r3, #8]
      break;
 8006f60:	e03c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f000 fa9e 	bl	80074b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2150      	movs	r1, #80	@ 0x50
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 faf7 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006f80:	e02c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f000 fabd 	bl	800750e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2160      	movs	r1, #96	@ 0x60
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fae7 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006fa0:	e01c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f000 fa7e 	bl	80074b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2140      	movs	r1, #64	@ 0x40
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fad7 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006fc0:	e00c      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f000 face 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006fd2:	e003      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd8:	e000      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a46      	ldr	r2, [pc, #280]	@ (8007124 <TIM_Base_SetConfig+0x12c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007016:	d00f      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a43      	ldr	r2, [pc, #268]	@ (8007128 <TIM_Base_SetConfig+0x130>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00b      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a42      	ldr	r2, [pc, #264]	@ (800712c <TIM_Base_SetConfig+0x134>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d007      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a41      	ldr	r2, [pc, #260]	@ (8007130 <TIM_Base_SetConfig+0x138>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a40      	ldr	r2, [pc, #256]	@ (8007134 <TIM_Base_SetConfig+0x13c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d108      	bne.n	800704a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800703e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a35      	ldr	r2, [pc, #212]	@ (8007124 <TIM_Base_SetConfig+0x12c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d02b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007058:	d027      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a32      	ldr	r2, [pc, #200]	@ (8007128 <TIM_Base_SetConfig+0x130>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d023      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a31      	ldr	r2, [pc, #196]	@ (800712c <TIM_Base_SetConfig+0x134>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01f      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a30      	ldr	r2, [pc, #192]	@ (8007130 <TIM_Base_SetConfig+0x138>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a2f      	ldr	r2, [pc, #188]	@ (8007134 <TIM_Base_SetConfig+0x13c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d017      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a2e      	ldr	r2, [pc, #184]	@ (8007138 <TIM_Base_SetConfig+0x140>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a2d      	ldr	r2, [pc, #180]	@ (800713c <TIM_Base_SetConfig+0x144>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00f      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2c      	ldr	r2, [pc, #176]	@ (8007140 <TIM_Base_SetConfig+0x148>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2b      	ldr	r2, [pc, #172]	@ (8007144 <TIM_Base_SetConfig+0x14c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2a      	ldr	r2, [pc, #168]	@ (8007148 <TIM_Base_SetConfig+0x150>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a29      	ldr	r2, [pc, #164]	@ (800714c <TIM_Base_SetConfig+0x154>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d108      	bne.n	80070bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a10      	ldr	r2, [pc, #64]	@ (8007124 <TIM_Base_SetConfig+0x12c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_Base_SetConfig+0xf8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a12      	ldr	r2, [pc, #72]	@ (8007134 <TIM_Base_SetConfig+0x13c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d103      	bne.n	80070f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b01      	cmp	r3, #1
 8007108:	d105      	bne.n	8007116 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f023 0201 	bic.w	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	611a      	str	r2, [r3, #16]
  }
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40010000 	.word	0x40010000
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40010400 	.word	0x40010400
 8007138:	40014000 	.word	0x40014000
 800713c:	40014400 	.word	0x40014400
 8007140:	40014800 	.word	0x40014800
 8007144:	40001800 	.word	0x40001800
 8007148:	40001c00 	.word	0x40001c00
 800714c:	40002000 	.word	0x40002000

08007150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f023 0201 	bic.w	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f023 0302 	bic.w	r3, r3, #2
 8007198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a20      	ldr	r2, [pc, #128]	@ (8007228 <TIM_OC1_SetConfig+0xd8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC1_SetConfig+0x64>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1f      	ldr	r2, [pc, #124]	@ (800722c <TIM_OC1_SetConfig+0xdc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10c      	bne.n	80071ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f023 0308 	bic.w	r3, r3, #8
 80071ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f023 0304 	bic.w	r3, r3, #4
 80071cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a15      	ldr	r2, [pc, #84]	@ (8007228 <TIM_OC1_SetConfig+0xd8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d003      	beq.n	80071de <TIM_OC1_SetConfig+0x8e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a14      	ldr	r2, [pc, #80]	@ (800722c <TIM_OC1_SetConfig+0xdc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d111      	bne.n	8007202 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	621a      	str	r2, [r3, #32]
}
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	40010000 	.word	0x40010000
 800722c:	40010400 	.word	0x40010400

08007230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	f023 0210 	bic.w	r2, r3, #16
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0320 	bic.w	r3, r3, #32
 800727a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a22      	ldr	r2, [pc, #136]	@ (8007314 <TIM_OC2_SetConfig+0xe4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d003      	beq.n	8007298 <TIM_OC2_SetConfig+0x68>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a21      	ldr	r2, [pc, #132]	@ (8007318 <TIM_OC2_SetConfig+0xe8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d10d      	bne.n	80072b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800729e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a17      	ldr	r2, [pc, #92]	@ (8007314 <TIM_OC2_SetConfig+0xe4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_OC2_SetConfig+0x94>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a16      	ldr	r2, [pc, #88]	@ (8007318 <TIM_OC2_SetConfig+0xe8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d113      	bne.n	80072ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	621a      	str	r2, [r3, #32]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000
 8007318:	40010400 	.word	0x40010400

0800731c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a21      	ldr	r2, [pc, #132]	@ (80073fc <TIM_OC3_SetConfig+0xe0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC3_SetConfig+0x66>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a20      	ldr	r2, [pc, #128]	@ (8007400 <TIM_OC3_SetConfig+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d10d      	bne.n	800739e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800739c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <TIM_OC3_SetConfig+0xe0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d003      	beq.n	80073ae <TIM_OC3_SetConfig+0x92>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <TIM_OC3_SetConfig+0xe4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d113      	bne.n	80073d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	621a      	str	r2, [r3, #32]
}
 80073f0:	bf00      	nop
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	40010000 	.word	0x40010000
 8007400:	40010400 	.word	0x40010400

08007404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800743a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800744e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	031b      	lsls	r3, r3, #12
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a12      	ldr	r2, [pc, #72]	@ (80074a8 <TIM_OC4_SetConfig+0xa4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_OC4_SetConfig+0x68>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a11      	ldr	r2, [pc, #68]	@ (80074ac <TIM_OC4_SetConfig+0xa8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d109      	bne.n	8007480 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	019b      	lsls	r3, r3, #6
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40010400 	.word	0x40010400

080074b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f023 0201 	bic.w	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f023 030a 	bic.w	r3, r3, #10
 80074ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	621a      	str	r2, [r3, #32]
}
 8007502:	bf00      	nop
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f023 0210 	bic.w	r2, r3, #16
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	031b      	lsls	r3, r3, #12
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800754a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	621a      	str	r2, [r3, #32]
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	f043 0307 	orr.w	r3, r3, #7
 8007590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	609a      	str	r2, [r3, #8]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	021a      	lsls	r2, r3, #8
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	609a      	str	r2, [r3, #8]
}
 80075d8:	bf00      	nop
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2201      	movs	r2, #1
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1a      	ldr	r2, [r3, #32]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	43db      	mvns	r3, r3
 8007606:	401a      	ands	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
	...

08007630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007644:	2302      	movs	r3, #2
 8007646:	e05a      	b.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a21      	ldr	r2, [pc, #132]	@ (800770c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d022      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007694:	d01d      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1d      	ldr	r2, [pc, #116]	@ (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a18      	ldr	r2, [pc, #96]	@ (800771c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a15      	ldr	r2, [pc, #84]	@ (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d10c      	bne.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	40010000 	.word	0x40010000
 8007710:	40000400 	.word	0x40000400
 8007714:	40000800 	.word	0x40000800
 8007718:	40000c00 	.word	0x40000c00
 800771c:	40010400 	.word	0x40010400
 8007720:	40014000 	.word	0x40014000
 8007724:	40001800 	.word	0x40001800

08007728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e042      	b.n	80077c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fc f804 	bl	800375c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2224      	movs	r2, #36	@ 0x24
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800776a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 ff4f 	bl	8008610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	691a      	ldr	r2, [r3, #16]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695a      	ldr	r2, [r3, #20]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	@ 0x28
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	4613      	mov	r3, r2
 80077d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b20      	cmp	r3, #32
 80077e6:	d175      	bne.n	80078d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <HAL_UART_Transmit+0x2c>
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e06e      	b.n	80078d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2221      	movs	r2, #33	@ 0x21
 8007802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007806:	f7fc f9f3 	bl	8003bf0 <HAL_GetTick>
 800780a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007820:	d108      	bne.n	8007834 <HAL_UART_Transmit+0x6c>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	e003      	b.n	800783c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800783c:	e02e      	b.n	800789c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2200      	movs	r2, #0
 8007846:	2180      	movs	r1, #128	@ 0x80
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 fc27 	bl	800809c <UART_WaitOnFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e03a      	b.n	80078d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	3302      	adds	r3, #2
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	e007      	b.n	800788e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	781a      	ldrb	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	3301      	adds	r3, #1
 800788c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1cb      	bne.n	800783e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2200      	movs	r2, #0
 80078ae:	2140      	movs	r1, #64	@ 0x40
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fbf3 	bl	800809c <UART_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e006      	b.n	80078d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e000      	b.n	80078d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078d4:	2302      	movs	r3, #2
  }
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	4613      	mov	r3, r2
 80078ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d112      	bne.n	800791e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_UART_Receive_DMA+0x26>
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e00b      	b.n	8007920 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	461a      	mov	r2, r3
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fc1b 	bl	8008150 <UART_Start_Receive_DMA>
 800791a:	4603      	mov	r3, r0
 800791c:	e000      	b.n	8007920 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800791e:	2302      	movs	r3, #2
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b0ba      	sub	sp, #232	@ 0xe8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800794e:	2300      	movs	r3, #0
 8007950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007954:	2300      	movs	r3, #0
 8007956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10f      	bne.n	800798e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800796e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <HAL_UART_IRQHandler+0x66>
 800797a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fd83 	bl	8008492 <UART_Receive_IT>
      return;
 800798c:	e25b      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800798e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80de 	beq.w	8007b54 <HAL_UART_IRQHandler+0x22c>
 8007998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80d1 	beq.w	8007b54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <HAL_UART_IRQHandler+0xae>
 80079be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ce:	f043 0201 	orr.w	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <HAL_UART_IRQHandler+0xd2>
 80079e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f2:	f043 0202 	orr.w	r2, r3, #2
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <HAL_UART_IRQHandler+0xf6>
 8007a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a16:	f043 0204 	orr.w	r2, r3, #4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d011      	beq.n	8007a4e <HAL_UART_IRQHandler+0x126>
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d105      	bne.n	8007a42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a46:	f043 0208 	orr.w	r2, r3, #8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 81f2 	beq.w	8007e3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d008      	beq.n	8007a76 <HAL_UART_IRQHandler+0x14e>
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fd0e 	bl	8008492 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a80:	2b40      	cmp	r3, #64	@ 0x40
 8007a82:	bf0c      	ite	eq
 8007a84:	2301      	moveq	r3, #1
 8007a86:	2300      	movne	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x17a>
 8007a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d04f      	beq.n	8007b42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc16 	bl	80082d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab2:	2b40      	cmp	r3, #64	@ 0x40
 8007ab4:	d141      	bne.n	8007b3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3314      	adds	r3, #20
 8007abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3314      	adds	r3, #20
 8007ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1d9      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d013      	beq.n	8007b32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8007d08 <HAL_UART_IRQHandler+0x3e0>)
 8007b10:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fc fb22 	bl	8004160 <HAL_DMA_Abort_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d016      	beq.n	8007b50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e00e      	b.n	8007b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f99e 	bl	8007e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	e00a      	b.n	8007b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f99a 	bl	8007e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b40:	e006      	b.n	8007b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f996 	bl	8007e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007b4e:	e175      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	bf00      	nop
    return;
 8007b52:	e173      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	f040 814f 	bne.w	8007dfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8148 	beq.w	8007dfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8141 	beq.w	8007dfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9a:	2b40      	cmp	r3, #64	@ 0x40
 8007b9c:	f040 80b6 	bne.w	8007d0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8145 	beq.w	8007e40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	f080 813e 	bcs.w	8007e40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bd6:	f000 8088 	beq.w	8007cea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1d9      	bne.n	8007bda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c38:	f023 0301 	bic.w	r3, r3, #1
 8007c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3314      	adds	r3, #20
 8007c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e1      	bne.n	8007c26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3314      	adds	r3, #20
 8007c68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3314      	adds	r3, #20
 8007c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e3      	bne.n	8007c62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cba:	f023 0310 	bic.w	r3, r3, #16
 8007cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	330c      	adds	r3, #12
 8007cc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ccc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e3      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fc f9cb 	bl	8004080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8c1 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d06:	e09b      	b.n	8007e40 <HAL_UART_IRQHandler+0x518>
 8007d08:	0800839b 	.word	0x0800839b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 808e 	beq.w	8007e44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8089 	beq.w	8007e44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	330c      	adds	r3, #12
 8007d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007d56:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e3      	bne.n	8007d32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3314      	adds	r3, #20
 8007d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e3      	bne.n	8007d6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007dd4:	61fa      	str	r2, [r7, #28]
 8007dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	69b9      	ldr	r1, [r7, #24]
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	617b      	str	r3, [r7, #20]
   return(result);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e3      	bne.n	8007db0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f847 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dfa:	e023      	b.n	8007e44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <HAL_UART_IRQHandler+0x4f4>
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fad4 	bl	80083c2 <UART_Transmit_IT>
    return;
 8007e1a:	e014      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <HAL_UART_IRQHandler+0x51e>
 8007e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d008      	beq.n	8007e46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fb14 	bl	8008462 <UART_EndTransmit_IT>
    return;
 8007e3a:	e004      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
    return;
 8007e3c:	bf00      	nop
 8007e3e:	e002      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007e44:	bf00      	nop
  }
}
 8007e46:	37e8      	adds	r7, #232	@ 0xe8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b09c      	sub	sp, #112	@ 0x70
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eac:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d172      	bne.n	8007fa2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	330c      	adds	r3, #12
 8007ee0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ee2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ee4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ee8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3314      	adds	r3, #20
 8007f14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f16:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3314      	adds	r3, #20
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	623b      	str	r3, [r7, #32]
   return(result);
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3314      	adds	r3, #20
 8007f48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e5      	bne.n	8007f2a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f60:	2220      	movs	r2, #32
 8007f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d119      	bne.n	8007fa2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	330c      	adds	r3, #12
 8007f74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f023 0310 	bic.w	r3, r3, #16
 8007f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	330c      	adds	r3, #12
 8007f8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f8e:	61fa      	str	r2, [r7, #28]
 8007f90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	69b9      	ldr	r1, [r7, #24]
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d106      	bne.n	8007fbe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007fb8:	f7ff ff66 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fbc:	e002      	b.n	8007fc4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007fbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007fc0:	f7f9 fcc4 	bl	800194c <HAL_UART_RxCpltCallback>
}
 8007fc4:	bf00      	nop
 8007fc6:	3770      	adds	r7, #112	@ 0x70
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d108      	bne.n	8007ffa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fec:	085b      	lsrs	r3, r3, #1
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff ff48 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ff8:	e002      	b.n	8008000 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7ff ff30 	bl	8007e60 <HAL_UART_RxHalfCpltCallback>
}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008018:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008024:	2b80      	cmp	r3, #128	@ 0x80
 8008026:	bf0c      	ite	eq
 8008028:	2301      	moveq	r3, #1
 800802a:	2300      	movne	r3, #0
 800802c:	b2db      	uxtb	r3, r3
 800802e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b21      	cmp	r3, #33	@ 0x21
 800803a:	d108      	bne.n	800804e <UART_DMAError+0x46>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2200      	movs	r2, #0
 8008046:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008048:	68b8      	ldr	r0, [r7, #8]
 800804a:	f000 f91b 	bl	8008284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008058:	2b40      	cmp	r3, #64	@ 0x40
 800805a:	bf0c      	ite	eq
 800805c:	2301      	moveq	r3, #1
 800805e:	2300      	movne	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b22      	cmp	r3, #34	@ 0x22
 800806e:	d108      	bne.n	8008082 <UART_DMAError+0x7a>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2200      	movs	r2, #0
 800807a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800807c:	68b8      	ldr	r0, [r7, #8]
 800807e:	f000 f929 	bl	80082d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008086:	f043 0210 	orr.w	r2, r3, #16
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800808e:	68b8      	ldr	r0, [r7, #8]
 8008090:	f7ff fef0 	bl	8007e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	4613      	mov	r3, r2
 80080aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ac:	e03b      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d037      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b6:	f7fb fd9b 	bl	8003bf0 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	6a3a      	ldr	r2, [r7, #32]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d302      	bcc.n	80080cc <UART_WaitOnFlagUntilTimeout+0x30>
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e03a      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d023      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b80      	cmp	r3, #128	@ 0x80
 80080e2:	d020      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b40      	cmp	r3, #64	@ 0x40
 80080e8:	d01d      	beq.n	8008126 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d116      	bne.n	8008126 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 f8e0 	bl	80082d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2208      	movs	r2, #8
 8008118:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e00f      	b.n	8008146 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4013      	ands	r3, r2
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	429a      	cmp	r2, r3
 8008134:	bf0c      	ite	eq
 8008136:	2301      	moveq	r3, #1
 8008138:	2300      	movne	r3, #0
 800813a:	b2db      	uxtb	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	429a      	cmp	r2, r3
 8008142:	d0b4      	beq.n	80080ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b098      	sub	sp, #96	@ 0x60
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	88fa      	ldrh	r2, [r7, #6]
 8008168:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2222      	movs	r2, #34	@ 0x22
 8008174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817c:	4a3e      	ldr	r2, [pc, #248]	@ (8008278 <UART_Start_Receive_DMA+0x128>)
 800817e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008184:	4a3d      	ldr	r2, [pc, #244]	@ (800827c <UART_Start_Receive_DMA+0x12c>)
 8008186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818c:	4a3c      	ldr	r2, [pc, #240]	@ (8008280 <UART_Start_Receive_DMA+0x130>)
 800818e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008194:	2200      	movs	r2, #0
 8008196:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008198:	f107 0308 	add.w	r3, r7, #8
 800819c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	88fb      	ldrh	r3, [r7, #6]
 80081b0:	f7fb ff0e 	bl	8003fd0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	613b      	str	r3, [r7, #16]
 80081c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d019      	beq.n	8008206 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	330c      	adds	r3, #12
 80081d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	330c      	adds	r3, #12
 80081f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80081f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80081f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e5      	bne.n	80081d2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3314      	adds	r3, #20
 800820c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	f043 0301 	orr.w	r3, r3, #1
 800821c:	657b      	str	r3, [r7, #84]	@ 0x54
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3314      	adds	r3, #20
 8008224:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008226:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800822c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e5      	bne.n	8008206 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3314      	adds	r3, #20
 8008240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	617b      	str	r3, [r7, #20]
   return(result);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008250:	653b      	str	r3, [r7, #80]	@ 0x50
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3314      	adds	r3, #20
 8008258:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800825a:	627a      	str	r2, [r7, #36]	@ 0x24
 800825c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6a39      	ldr	r1, [r7, #32]
 8008260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	61fb      	str	r3, [r7, #28]
   return(result);
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3760      	adds	r7, #96	@ 0x60
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	08007ea1 	.word	0x08007ea1
 800827c:	08007fcd 	.word	0x08007fcd
 8008280:	08008009 	.word	0x08008009

08008284 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b089      	sub	sp, #36	@ 0x24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	330c      	adds	r3, #12
 8008292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	60bb      	str	r3, [r7, #8]
   return(result);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80082a2:	61fb      	str	r3, [r7, #28]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	61ba      	str	r2, [r7, #24]
 80082ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6979      	ldr	r1, [r7, #20]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	613b      	str	r3, [r7, #16]
   return(result);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80082c8:	bf00      	nop
 80082ca:	3724      	adds	r7, #36	@ 0x24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b095      	sub	sp, #84	@ 0x54
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	330c      	adds	r3, #12
 80082e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e5      	bne.n	80082dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3314      	adds	r3, #20
 8008316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f023 0301 	bic.w	r3, r3, #1
 8008326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3314      	adds	r3, #20
 800832e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e5      	bne.n	8008310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008348:	2b01      	cmp	r3, #1
 800834a:	d119      	bne.n	8008380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	330c      	adds	r3, #12
 8008352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	60bb      	str	r3, [r7, #8]
   return(result);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f023 0310 	bic.w	r3, r3, #16
 8008362:	647b      	str	r3, [r7, #68]	@ 0x44
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	330c      	adds	r3, #12
 800836a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800836c:	61ba      	str	r2, [r7, #24]
 800836e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6979      	ldr	r1, [r7, #20]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	613b      	str	r3, [r7, #16]
   return(result);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e5      	bne.n	800834c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800838e:	bf00      	nop
 8008390:	3754      	adds	r7, #84	@ 0x54
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fd5d 	bl	8007e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ba:	bf00      	nop
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b21      	cmp	r3, #33	@ 0x21
 80083d4:	d13e      	bne.n	8008454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083de:	d114      	bne.n	800840a <UART_Transmit_IT+0x48>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d110      	bne.n	800840a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	1c9a      	adds	r2, r3, #2
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	621a      	str	r2, [r3, #32]
 8008408:	e008      	b.n	800841c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	1c59      	adds	r1, r3, #1
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6211      	str	r1, [r2, #32]
 8008414:	781a      	ldrb	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29b      	uxth	r3, r3
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4619      	mov	r1, r3
 800842a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10f      	bne.n	8008450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800843e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800844e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e000      	b.n	8008456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008478:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fce2 	bl	8007e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b08c      	sub	sp, #48	@ 0x30
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b22      	cmp	r3, #34	@ 0x22
 80084a4:	f040 80ae 	bne.w	8008604 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b0:	d117      	bne.n	80084e2 <UART_Receive_IT+0x50>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d113      	bne.n	80084e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084da:	1c9a      	adds	r2, r3, #2
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	629a      	str	r2, [r3, #40]	@ 0x28
 80084e0:	e026      	b.n	8008530 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f4:	d007      	beq.n	8008506 <UART_Receive_IT+0x74>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <UART_Receive_IT+0x82>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e008      	b.n	8008526 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008520:	b2da      	uxtb	r2, r3
 8008522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008524:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29b      	uxth	r3, r3
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	4619      	mov	r1, r3
 800853e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008540:	2b00      	cmp	r3, #0
 8008542:	d15d      	bne.n	8008600 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0220 	bic.w	r2, r2, #32
 8008552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008586:	2b01      	cmp	r3, #1
 8008588:	d135      	bne.n	80085f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	613b      	str	r3, [r7, #16]
   return(result);
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f023 0310 	bic.w	r3, r3, #16
 80085a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085b0:	623a      	str	r2, [r7, #32]
 80085b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	69f9      	ldr	r1, [r7, #28]
 80085b6:	6a3a      	ldr	r2, [r7, #32]
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e5      	bne.n	8008590 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0310 	and.w	r3, r3, #16
 80085ce:	2b10      	cmp	r3, #16
 80085d0:	d10a      	bne.n	80085e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff fc4a 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
 80085f4:	e002      	b.n	80085fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7f9 f9a8 	bl	800194c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	e002      	b.n	8008606 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	e000      	b.n	8008606 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008604:	2302      	movs	r3, #2
  }
}
 8008606:	4618      	mov	r0, r3
 8008608:	3730      	adds	r7, #48	@ 0x30
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008614:	b0c0      	sub	sp, #256	@ 0x100
 8008616:	af00      	add	r7, sp, #0
 8008618:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800861c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800862c:	68d9      	ldr	r1, [r3, #12]
 800862e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	ea40 0301 	orr.w	r3, r0, r1
 8008638:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800863a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	431a      	orrs	r2, r3
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	431a      	orrs	r2, r3
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800865c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008668:	f021 010c 	bic.w	r1, r1, #12
 800866c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008676:	430b      	orrs	r3, r1
 8008678:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800867a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800868a:	6999      	ldr	r1, [r3, #24]
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	ea40 0301 	orr.w	r3, r0, r1
 8008696:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b8f      	ldr	r3, [pc, #572]	@ (80088dc <UART_SetConfig+0x2cc>)
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d005      	beq.n	80086b0 <UART_SetConfig+0xa0>
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b8d      	ldr	r3, [pc, #564]	@ (80088e0 <UART_SetConfig+0x2d0>)
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d104      	bne.n	80086ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086b0:	f7fd fafa 	bl	8005ca8 <HAL_RCC_GetPCLK2Freq>
 80086b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80086b8:	e003      	b.n	80086c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086ba:	f7fd fae1 	bl	8005c80 <HAL_RCC_GetPCLK1Freq>
 80086be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086cc:	f040 810c 	bne.w	80088e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80086da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80086de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80086e2:	4622      	mov	r2, r4
 80086e4:	462b      	mov	r3, r5
 80086e6:	1891      	adds	r1, r2, r2
 80086e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80086ea:	415b      	adcs	r3, r3
 80086ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80086f2:	4621      	mov	r1, r4
 80086f4:	eb12 0801 	adds.w	r8, r2, r1
 80086f8:	4629      	mov	r1, r5
 80086fa:	eb43 0901 	adc.w	r9, r3, r1
 80086fe:	f04f 0200 	mov.w	r2, #0
 8008702:	f04f 0300 	mov.w	r3, #0
 8008706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800870a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800870e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008712:	4690      	mov	r8, r2
 8008714:	4699      	mov	r9, r3
 8008716:	4623      	mov	r3, r4
 8008718:	eb18 0303 	adds.w	r3, r8, r3
 800871c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008720:	462b      	mov	r3, r5
 8008722:	eb49 0303 	adc.w	r3, r9, r3
 8008726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800872a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008736:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800873a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800873e:	460b      	mov	r3, r1
 8008740:	18db      	adds	r3, r3, r3
 8008742:	653b      	str	r3, [r7, #80]	@ 0x50
 8008744:	4613      	mov	r3, r2
 8008746:	eb42 0303 	adc.w	r3, r2, r3
 800874a:	657b      	str	r3, [r7, #84]	@ 0x54
 800874c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008750:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008754:	f7f8 fab8 	bl	8000cc8 <__aeabi_uldivmod>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4b61      	ldr	r3, [pc, #388]	@ (80088e4 <UART_SetConfig+0x2d4>)
 800875e:	fba3 2302 	umull	r2, r3, r3, r2
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	011c      	lsls	r4, r3, #4
 8008766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800876a:	2200      	movs	r2, #0
 800876c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008770:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008774:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	1891      	adds	r1, r2, r2
 800877e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008780:	415b      	adcs	r3, r3
 8008782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008784:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008788:	4641      	mov	r1, r8
 800878a:	eb12 0a01 	adds.w	sl, r2, r1
 800878e:	4649      	mov	r1, r9
 8008790:	eb43 0b01 	adc.w	fp, r3, r1
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087a8:	4692      	mov	sl, r2
 80087aa:	469b      	mov	fp, r3
 80087ac:	4643      	mov	r3, r8
 80087ae:	eb1a 0303 	adds.w	r3, sl, r3
 80087b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087b6:	464b      	mov	r3, r9
 80087b8:	eb4b 0303 	adc.w	r3, fp, r3
 80087bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80087d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087d4:	460b      	mov	r3, r1
 80087d6:	18db      	adds	r3, r3, r3
 80087d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80087da:	4613      	mov	r3, r2
 80087dc:	eb42 0303 	adc.w	r3, r2, r3
 80087e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80087e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80087e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80087ea:	f7f8 fa6d 	bl	8000cc8 <__aeabi_uldivmod>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4611      	mov	r1, r2
 80087f4:	4b3b      	ldr	r3, [pc, #236]	@ (80088e4 <UART_SetConfig+0x2d4>)
 80087f6:	fba3 2301 	umull	r2, r3, r3, r1
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	2264      	movs	r2, #100	@ 0x64
 80087fe:	fb02 f303 	mul.w	r3, r2, r3
 8008802:	1acb      	subs	r3, r1, r3
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800880a:	4b36      	ldr	r3, [pc, #216]	@ (80088e4 <UART_SetConfig+0x2d4>)
 800880c:	fba3 2302 	umull	r2, r3, r3, r2
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008818:	441c      	add	r4, r3
 800881a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800881e:	2200      	movs	r2, #0
 8008820:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008824:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008828:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800882c:	4642      	mov	r2, r8
 800882e:	464b      	mov	r3, r9
 8008830:	1891      	adds	r1, r2, r2
 8008832:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008834:	415b      	adcs	r3, r3
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800883c:	4641      	mov	r1, r8
 800883e:	1851      	adds	r1, r2, r1
 8008840:	6339      	str	r1, [r7, #48]	@ 0x30
 8008842:	4649      	mov	r1, r9
 8008844:	414b      	adcs	r3, r1
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
 8008848:	f04f 0200 	mov.w	r2, #0
 800884c:	f04f 0300 	mov.w	r3, #0
 8008850:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008854:	4659      	mov	r1, fp
 8008856:	00cb      	lsls	r3, r1, #3
 8008858:	4651      	mov	r1, sl
 800885a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800885e:	4651      	mov	r1, sl
 8008860:	00ca      	lsls	r2, r1, #3
 8008862:	4610      	mov	r0, r2
 8008864:	4619      	mov	r1, r3
 8008866:	4603      	mov	r3, r0
 8008868:	4642      	mov	r2, r8
 800886a:	189b      	adds	r3, r3, r2
 800886c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008870:	464b      	mov	r3, r9
 8008872:	460a      	mov	r2, r1
 8008874:	eb42 0303 	adc.w	r3, r2, r3
 8008878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800887c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008888:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800888c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008890:	460b      	mov	r3, r1
 8008892:	18db      	adds	r3, r3, r3
 8008894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008896:	4613      	mov	r3, r2
 8008898:	eb42 0303 	adc.w	r3, r2, r3
 800889c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800889e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80088a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80088a6:	f7f8 fa0f 	bl	8000cc8 <__aeabi_uldivmod>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4b0d      	ldr	r3, [pc, #52]	@ (80088e4 <UART_SetConfig+0x2d4>)
 80088b0:	fba3 1302 	umull	r1, r3, r3, r2
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	2164      	movs	r1, #100	@ 0x64
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	3332      	adds	r3, #50	@ 0x32
 80088c2:	4a08      	ldr	r2, [pc, #32]	@ (80088e4 <UART_SetConfig+0x2d4>)
 80088c4:	fba2 2303 	umull	r2, r3, r2, r3
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	f003 0207 	and.w	r2, r3, #7
 80088ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4422      	add	r2, r4
 80088d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088d8:	e106      	b.n	8008ae8 <UART_SetConfig+0x4d8>
 80088da:	bf00      	nop
 80088dc:	40011000 	.word	0x40011000
 80088e0:	40011400 	.word	0x40011400
 80088e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80088f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80088f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80088fa:	4642      	mov	r2, r8
 80088fc:	464b      	mov	r3, r9
 80088fe:	1891      	adds	r1, r2, r2
 8008900:	6239      	str	r1, [r7, #32]
 8008902:	415b      	adcs	r3, r3
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
 8008906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800890a:	4641      	mov	r1, r8
 800890c:	1854      	adds	r4, r2, r1
 800890e:	4649      	mov	r1, r9
 8008910:	eb43 0501 	adc.w	r5, r3, r1
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	00eb      	lsls	r3, r5, #3
 800891e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008922:	00e2      	lsls	r2, r4, #3
 8008924:	4614      	mov	r4, r2
 8008926:	461d      	mov	r5, r3
 8008928:	4643      	mov	r3, r8
 800892a:	18e3      	adds	r3, r4, r3
 800892c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008930:	464b      	mov	r3, r9
 8008932:	eb45 0303 	adc.w	r3, r5, r3
 8008936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800893a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008946:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	f04f 0300 	mov.w	r3, #0
 8008952:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008956:	4629      	mov	r1, r5
 8008958:	008b      	lsls	r3, r1, #2
 800895a:	4621      	mov	r1, r4
 800895c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008960:	4621      	mov	r1, r4
 8008962:	008a      	lsls	r2, r1, #2
 8008964:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008968:	f7f8 f9ae 	bl	8000cc8 <__aeabi_uldivmod>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4b60      	ldr	r3, [pc, #384]	@ (8008af4 <UART_SetConfig+0x4e4>)
 8008972:	fba3 2302 	umull	r2, r3, r3, r2
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	011c      	lsls	r4, r3, #4
 800897a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800897e:	2200      	movs	r2, #0
 8008980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008984:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008988:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800898c:	4642      	mov	r2, r8
 800898e:	464b      	mov	r3, r9
 8008990:	1891      	adds	r1, r2, r2
 8008992:	61b9      	str	r1, [r7, #24]
 8008994:	415b      	adcs	r3, r3
 8008996:	61fb      	str	r3, [r7, #28]
 8008998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800899c:	4641      	mov	r1, r8
 800899e:	1851      	adds	r1, r2, r1
 80089a0:	6139      	str	r1, [r7, #16]
 80089a2:	4649      	mov	r1, r9
 80089a4:	414b      	adcs	r3, r1
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	f04f 0300 	mov.w	r3, #0
 80089b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089b4:	4659      	mov	r1, fp
 80089b6:	00cb      	lsls	r3, r1, #3
 80089b8:	4651      	mov	r1, sl
 80089ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089be:	4651      	mov	r1, sl
 80089c0:	00ca      	lsls	r2, r1, #3
 80089c2:	4610      	mov	r0, r2
 80089c4:	4619      	mov	r1, r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	4642      	mov	r2, r8
 80089ca:	189b      	adds	r3, r3, r2
 80089cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089d0:	464b      	mov	r3, r9
 80089d2:	460a      	mov	r2, r1
 80089d4:	eb42 0303 	adc.w	r3, r2, r3
 80089d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80089f4:	4649      	mov	r1, r9
 80089f6:	008b      	lsls	r3, r1, #2
 80089f8:	4641      	mov	r1, r8
 80089fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089fe:	4641      	mov	r1, r8
 8008a00:	008a      	lsls	r2, r1, #2
 8008a02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008a06:	f7f8 f95f 	bl	8000cc8 <__aeabi_uldivmod>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4b38      	ldr	r3, [pc, #224]	@ (8008af4 <UART_SetConfig+0x4e4>)
 8008a12:	fba3 2301 	umull	r2, r3, r3, r1
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	2264      	movs	r2, #100	@ 0x64
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
 8008a1e:	1acb      	subs	r3, r1, r3
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	3332      	adds	r3, #50	@ 0x32
 8008a24:	4a33      	ldr	r2, [pc, #204]	@ (8008af4 <UART_SetConfig+0x4e4>)
 8008a26:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a30:	441c      	add	r4, r3
 8008a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a36:	2200      	movs	r2, #0
 8008a38:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008a3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008a40:	4642      	mov	r2, r8
 8008a42:	464b      	mov	r3, r9
 8008a44:	1891      	adds	r1, r2, r2
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	415b      	adcs	r3, r3
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a50:	4641      	mov	r1, r8
 8008a52:	1851      	adds	r1, r2, r1
 8008a54:	6039      	str	r1, [r7, #0]
 8008a56:	4649      	mov	r1, r9
 8008a58:	414b      	adcs	r3, r1
 8008a5a:	607b      	str	r3, [r7, #4]
 8008a5c:	f04f 0200 	mov.w	r2, #0
 8008a60:	f04f 0300 	mov.w	r3, #0
 8008a64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a68:	4659      	mov	r1, fp
 8008a6a:	00cb      	lsls	r3, r1, #3
 8008a6c:	4651      	mov	r1, sl
 8008a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a72:	4651      	mov	r1, sl
 8008a74:	00ca      	lsls	r2, r1, #3
 8008a76:	4610      	mov	r0, r2
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4642      	mov	r2, r8
 8008a7e:	189b      	adds	r3, r3, r2
 8008a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a82:	464b      	mov	r3, r9
 8008a84:	460a      	mov	r2, r1
 8008a86:	eb42 0303 	adc.w	r3, r2, r3
 8008a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a96:	667a      	str	r2, [r7, #100]	@ 0x64
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	f04f 0300 	mov.w	r3, #0
 8008aa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	008b      	lsls	r3, r1, #2
 8008aa8:	4641      	mov	r1, r8
 8008aaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aae:	4641      	mov	r1, r8
 8008ab0:	008a      	lsls	r2, r1, #2
 8008ab2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008ab6:	f7f8 f907 	bl	8000cc8 <__aeabi_uldivmod>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4b0d      	ldr	r3, [pc, #52]	@ (8008af4 <UART_SetConfig+0x4e4>)
 8008ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ac4:	095b      	lsrs	r3, r3, #5
 8008ac6:	2164      	movs	r1, #100	@ 0x64
 8008ac8:	fb01 f303 	mul.w	r3, r1, r3
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	3332      	adds	r3, #50	@ 0x32
 8008ad2:	4a08      	ldr	r2, [pc, #32]	@ (8008af4 <UART_SetConfig+0x4e4>)
 8008ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad8:	095b      	lsrs	r3, r3, #5
 8008ada:	f003 020f 	and.w	r2, r3, #15
 8008ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4422      	add	r2, r4
 8008ae6:	609a      	str	r2, [r3, #8]
}
 8008ae8:	bf00      	nop
 8008aea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008aee:	46bd      	mov	sp, r7
 8008af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008af4:	51eb851f 	.word	0x51eb851f

08008af8 <__cvt>:
 8008af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	ec57 6b10 	vmov	r6, r7, d0
 8008b00:	2f00      	cmp	r7, #0
 8008b02:	460c      	mov	r4, r1
 8008b04:	4619      	mov	r1, r3
 8008b06:	463b      	mov	r3, r7
 8008b08:	bfbb      	ittet	lt
 8008b0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008b0e:	461f      	movlt	r7, r3
 8008b10:	2300      	movge	r3, #0
 8008b12:	232d      	movlt	r3, #45	@ 0x2d
 8008b14:	700b      	strb	r3, [r1, #0]
 8008b16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b1c:	4691      	mov	r9, r2
 8008b1e:	f023 0820 	bic.w	r8, r3, #32
 8008b22:	bfbc      	itt	lt
 8008b24:	4632      	movlt	r2, r6
 8008b26:	4616      	movlt	r6, r2
 8008b28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b2c:	d005      	beq.n	8008b3a <__cvt+0x42>
 8008b2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b32:	d100      	bne.n	8008b36 <__cvt+0x3e>
 8008b34:	3401      	adds	r4, #1
 8008b36:	2102      	movs	r1, #2
 8008b38:	e000      	b.n	8008b3c <__cvt+0x44>
 8008b3a:	2103      	movs	r1, #3
 8008b3c:	ab03      	add	r3, sp, #12
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	ab02      	add	r3, sp, #8
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	ec47 6b10 	vmov	d0, r6, r7
 8008b48:	4653      	mov	r3, sl
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	f001 f988 	bl	8009e60 <_dtoa_r>
 8008b50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b54:	4605      	mov	r5, r0
 8008b56:	d119      	bne.n	8008b8c <__cvt+0x94>
 8008b58:	f019 0f01 	tst.w	r9, #1
 8008b5c:	d00e      	beq.n	8008b7c <__cvt+0x84>
 8008b5e:	eb00 0904 	add.w	r9, r0, r4
 8008b62:	2200      	movs	r2, #0
 8008b64:	2300      	movs	r3, #0
 8008b66:	4630      	mov	r0, r6
 8008b68:	4639      	mov	r1, r7
 8008b6a:	f7f7 ffcd 	bl	8000b08 <__aeabi_dcmpeq>
 8008b6e:	b108      	cbz	r0, 8008b74 <__cvt+0x7c>
 8008b70:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b74:	2230      	movs	r2, #48	@ 0x30
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	454b      	cmp	r3, r9
 8008b7a:	d31e      	bcc.n	8008bba <__cvt+0xc2>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b80:	1b5b      	subs	r3, r3, r5
 8008b82:	4628      	mov	r0, r5
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	b004      	add	sp, #16
 8008b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b90:	eb00 0904 	add.w	r9, r0, r4
 8008b94:	d1e5      	bne.n	8008b62 <__cvt+0x6a>
 8008b96:	7803      	ldrb	r3, [r0, #0]
 8008b98:	2b30      	cmp	r3, #48	@ 0x30
 8008b9a:	d10a      	bne.n	8008bb2 <__cvt+0xba>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 8008ba8:	b918      	cbnz	r0, 8008bb2 <__cvt+0xba>
 8008baa:	f1c4 0401 	rsb	r4, r4, #1
 8008bae:	f8ca 4000 	str.w	r4, [sl]
 8008bb2:	f8da 3000 	ldr.w	r3, [sl]
 8008bb6:	4499      	add	r9, r3
 8008bb8:	e7d3      	b.n	8008b62 <__cvt+0x6a>
 8008bba:	1c59      	adds	r1, r3, #1
 8008bbc:	9103      	str	r1, [sp, #12]
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	e7d9      	b.n	8008b76 <__cvt+0x7e>

08008bc2 <__exponent>:
 8008bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	bfba      	itte	lt
 8008bc8:	4249      	neglt	r1, r1
 8008bca:	232d      	movlt	r3, #45	@ 0x2d
 8008bcc:	232b      	movge	r3, #43	@ 0x2b
 8008bce:	2909      	cmp	r1, #9
 8008bd0:	7002      	strb	r2, [r0, #0]
 8008bd2:	7043      	strb	r3, [r0, #1]
 8008bd4:	dd29      	ble.n	8008c2a <__exponent+0x68>
 8008bd6:	f10d 0307 	add.w	r3, sp, #7
 8008bda:	461d      	mov	r5, r3
 8008bdc:	270a      	movs	r7, #10
 8008bde:	461a      	mov	r2, r3
 8008be0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008be4:	fb07 1416 	mls	r4, r7, r6, r1
 8008be8:	3430      	adds	r4, #48	@ 0x30
 8008bea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bee:	460c      	mov	r4, r1
 8008bf0:	2c63      	cmp	r4, #99	@ 0x63
 8008bf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	dcf1      	bgt.n	8008bde <__exponent+0x1c>
 8008bfa:	3130      	adds	r1, #48	@ 0x30
 8008bfc:	1e94      	subs	r4, r2, #2
 8008bfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c02:	1c41      	adds	r1, r0, #1
 8008c04:	4623      	mov	r3, r4
 8008c06:	42ab      	cmp	r3, r5
 8008c08:	d30a      	bcc.n	8008c20 <__exponent+0x5e>
 8008c0a:	f10d 0309 	add.w	r3, sp, #9
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	42ac      	cmp	r4, r5
 8008c12:	bf88      	it	hi
 8008c14:	2300      	movhi	r3, #0
 8008c16:	3302      	adds	r3, #2
 8008c18:	4403      	add	r3, r0
 8008c1a:	1a18      	subs	r0, r3, r0
 8008c1c:	b003      	add	sp, #12
 8008c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c28:	e7ed      	b.n	8008c06 <__exponent+0x44>
 8008c2a:	2330      	movs	r3, #48	@ 0x30
 8008c2c:	3130      	adds	r1, #48	@ 0x30
 8008c2e:	7083      	strb	r3, [r0, #2]
 8008c30:	70c1      	strb	r1, [r0, #3]
 8008c32:	1d03      	adds	r3, r0, #4
 8008c34:	e7f1      	b.n	8008c1a <__exponent+0x58>
	...

08008c38 <_printf_float>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	b08d      	sub	sp, #52	@ 0x34
 8008c3e:	460c      	mov	r4, r1
 8008c40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c44:	4616      	mov	r6, r2
 8008c46:	461f      	mov	r7, r3
 8008c48:	4605      	mov	r5, r0
 8008c4a:	f000 fff3 	bl	8009c34 <_localeconv_r>
 8008c4e:	6803      	ldr	r3, [r0, #0]
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7f7 fb2c 	bl	80002b0 <strlen>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c60:	9005      	str	r0, [sp, #20]
 8008c62:	3307      	adds	r3, #7
 8008c64:	f023 0307 	bic.w	r3, r3, #7
 8008c68:	f103 0208 	add.w	r2, r3, #8
 8008c6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c70:	f8d4 b000 	ldr.w	fp, [r4]
 8008c74:	f8c8 2000 	str.w	r2, [r8]
 8008c78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8008f00 <_printf_float+0x2c8>)
 8008c90:	f04f 32ff 	mov.w	r2, #4294967295
 8008c94:	f7f7 ff6a 	bl	8000b6c <__aeabi_dcmpun>
 8008c98:	bb70      	cbnz	r0, 8008cf8 <_printf_float+0xc0>
 8008c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c9e:	4b98      	ldr	r3, [pc, #608]	@ (8008f00 <_printf_float+0x2c8>)
 8008ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca4:	f7f7 ff44 	bl	8000b30 <__aeabi_dcmple>
 8008ca8:	bb30      	cbnz	r0, 8008cf8 <_printf_float+0xc0>
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	f7f7 ff33 	bl	8000b1c <__aeabi_dcmplt>
 8008cb6:	b110      	cbz	r0, 8008cbe <_printf_float+0x86>
 8008cb8:	232d      	movs	r3, #45	@ 0x2d
 8008cba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cbe:	4a91      	ldr	r2, [pc, #580]	@ (8008f04 <_printf_float+0x2cc>)
 8008cc0:	4b91      	ldr	r3, [pc, #580]	@ (8008f08 <_printf_float+0x2d0>)
 8008cc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cc6:	bf94      	ite	ls
 8008cc8:	4690      	movls	r8, r2
 8008cca:	4698      	movhi	r8, r3
 8008ccc:	2303      	movs	r3, #3
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	f02b 0304 	bic.w	r3, fp, #4
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	f04f 0900 	mov.w	r9, #0
 8008cda:	9700      	str	r7, [sp, #0]
 8008cdc:	4633      	mov	r3, r6
 8008cde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f9d2 	bl	800908c <_printf_common>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f040 808d 	bne.w	8008e08 <_printf_float+0x1d0>
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf2:	b00d      	add	sp, #52	@ 0x34
 8008cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	4649      	mov	r1, r9
 8008d00:	f7f7 ff34 	bl	8000b6c <__aeabi_dcmpun>
 8008d04:	b140      	cbz	r0, 8008d18 <_printf_float+0xe0>
 8008d06:	464b      	mov	r3, r9
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	bfbc      	itt	lt
 8008d0c:	232d      	movlt	r3, #45	@ 0x2d
 8008d0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d12:	4a7e      	ldr	r2, [pc, #504]	@ (8008f0c <_printf_float+0x2d4>)
 8008d14:	4b7e      	ldr	r3, [pc, #504]	@ (8008f10 <_printf_float+0x2d8>)
 8008d16:	e7d4      	b.n	8008cc2 <_printf_float+0x8a>
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d1e:	9206      	str	r2, [sp, #24]
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	d13b      	bne.n	8008d9c <_printf_float+0x164>
 8008d24:	2306      	movs	r3, #6
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	6022      	str	r2, [r4, #0]
 8008d30:	9303      	str	r3, [sp, #12]
 8008d32:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d38:	ab09      	add	r3, sp, #36	@ 0x24
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	6861      	ldr	r1, [r4, #4]
 8008d3e:	ec49 8b10 	vmov	d0, r8, r9
 8008d42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7ff fed6 	bl	8008af8 <__cvt>
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d50:	2b47      	cmp	r3, #71	@ 0x47
 8008d52:	4680      	mov	r8, r0
 8008d54:	d129      	bne.n	8008daa <_printf_float+0x172>
 8008d56:	1cc8      	adds	r0, r1, #3
 8008d58:	db02      	blt.n	8008d60 <_printf_float+0x128>
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	4299      	cmp	r1, r3
 8008d5e:	dd41      	ble.n	8008de4 <_printf_float+0x1ac>
 8008d60:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d64:	fa5f fa8a 	uxtb.w	sl, sl
 8008d68:	3901      	subs	r1, #1
 8008d6a:	4652      	mov	r2, sl
 8008d6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d70:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d72:	f7ff ff26 	bl	8008bc2 <__exponent>
 8008d76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d78:	1813      	adds	r3, r2, r0
 8008d7a:	2a01      	cmp	r2, #1
 8008d7c:	4681      	mov	r9, r0
 8008d7e:	6123      	str	r3, [r4, #16]
 8008d80:	dc02      	bgt.n	8008d88 <_printf_float+0x150>
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	07d2      	lsls	r2, r2, #31
 8008d86:	d501      	bpl.n	8008d8c <_printf_float+0x154>
 8008d88:	3301      	adds	r3, #1
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0a2      	beq.n	8008cda <_printf_float+0xa2>
 8008d94:	232d      	movs	r3, #45	@ 0x2d
 8008d96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d9a:	e79e      	b.n	8008cda <_printf_float+0xa2>
 8008d9c:	9a06      	ldr	r2, [sp, #24]
 8008d9e:	2a47      	cmp	r2, #71	@ 0x47
 8008da0:	d1c2      	bne.n	8008d28 <_printf_float+0xf0>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1c0      	bne.n	8008d28 <_printf_float+0xf0>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e7bd      	b.n	8008d26 <_printf_float+0xee>
 8008daa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dae:	d9db      	bls.n	8008d68 <_printf_float+0x130>
 8008db0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008db4:	d118      	bne.n	8008de8 <_printf_float+0x1b0>
 8008db6:	2900      	cmp	r1, #0
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	dd0b      	ble.n	8008dd4 <_printf_float+0x19c>
 8008dbc:	6121      	str	r1, [r4, #16]
 8008dbe:	b913      	cbnz	r3, 8008dc6 <_printf_float+0x18e>
 8008dc0:	6822      	ldr	r2, [r4, #0]
 8008dc2:	07d0      	lsls	r0, r2, #31
 8008dc4:	d502      	bpl.n	8008dcc <_printf_float+0x194>
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	440b      	add	r3, r1
 8008dca:	6123      	str	r3, [r4, #16]
 8008dcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008dce:	f04f 0900 	mov.w	r9, #0
 8008dd2:	e7db      	b.n	8008d8c <_printf_float+0x154>
 8008dd4:	b913      	cbnz	r3, 8008ddc <_printf_float+0x1a4>
 8008dd6:	6822      	ldr	r2, [r4, #0]
 8008dd8:	07d2      	lsls	r2, r2, #31
 8008dda:	d501      	bpl.n	8008de0 <_printf_float+0x1a8>
 8008ddc:	3302      	adds	r3, #2
 8008dde:	e7f4      	b.n	8008dca <_printf_float+0x192>
 8008de0:	2301      	movs	r3, #1
 8008de2:	e7f2      	b.n	8008dca <_printf_float+0x192>
 8008de4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dea:	4299      	cmp	r1, r3
 8008dec:	db05      	blt.n	8008dfa <_printf_float+0x1c2>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	6121      	str	r1, [r4, #16]
 8008df2:	07d8      	lsls	r0, r3, #31
 8008df4:	d5ea      	bpl.n	8008dcc <_printf_float+0x194>
 8008df6:	1c4b      	adds	r3, r1, #1
 8008df8:	e7e7      	b.n	8008dca <_printf_float+0x192>
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	bfd4      	ite	le
 8008dfe:	f1c1 0202 	rsble	r2, r1, #2
 8008e02:	2201      	movgt	r2, #1
 8008e04:	4413      	add	r3, r2
 8008e06:	e7e0      	b.n	8008dca <_printf_float+0x192>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	055a      	lsls	r2, r3, #21
 8008e0c:	d407      	bmi.n	8008e1e <_printf_float+0x1e6>
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	4642      	mov	r2, r8
 8008e12:	4631      	mov	r1, r6
 8008e14:	4628      	mov	r0, r5
 8008e16:	47b8      	blx	r7
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d12b      	bne.n	8008e74 <_printf_float+0x23c>
 8008e1c:	e767      	b.n	8008cee <_printf_float+0xb6>
 8008e1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e22:	f240 80dd 	bls.w	8008fe0 <_printf_float+0x3a8>
 8008e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f7f7 fe6b 	bl	8000b08 <__aeabi_dcmpeq>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d033      	beq.n	8008e9e <_printf_float+0x266>
 8008e36:	4a37      	ldr	r2, [pc, #220]	@ (8008f14 <_printf_float+0x2dc>)
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b8      	blx	r7
 8008e40:	3001      	adds	r0, #1
 8008e42:	f43f af54 	beq.w	8008cee <_printf_float+0xb6>
 8008e46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e4a:	4543      	cmp	r3, r8
 8008e4c:	db02      	blt.n	8008e54 <_printf_float+0x21c>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	07d8      	lsls	r0, r3, #31
 8008e52:	d50f      	bpl.n	8008e74 <_printf_float+0x23c>
 8008e54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	47b8      	blx	r7
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f43f af45 	beq.w	8008cee <_printf_float+0xb6>
 8008e64:	f04f 0900 	mov.w	r9, #0
 8008e68:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e6c:	f104 0a1a 	add.w	sl, r4, #26
 8008e70:	45c8      	cmp	r8, r9
 8008e72:	dc09      	bgt.n	8008e88 <_printf_float+0x250>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	079b      	lsls	r3, r3, #30
 8008e78:	f100 8103 	bmi.w	8009082 <_printf_float+0x44a>
 8008e7c:	68e0      	ldr	r0, [r4, #12]
 8008e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e80:	4298      	cmp	r0, r3
 8008e82:	bfb8      	it	lt
 8008e84:	4618      	movlt	r0, r3
 8008e86:	e734      	b.n	8008cf2 <_printf_float+0xba>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4628      	mov	r0, r5
 8008e90:	47b8      	blx	r7
 8008e92:	3001      	adds	r0, #1
 8008e94:	f43f af2b 	beq.w	8008cee <_printf_float+0xb6>
 8008e98:	f109 0901 	add.w	r9, r9, #1
 8008e9c:	e7e8      	b.n	8008e70 <_printf_float+0x238>
 8008e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dc39      	bgt.n	8008f18 <_printf_float+0x2e0>
 8008ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8008f14 <_printf_float+0x2dc>)
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f af1d 	beq.w	8008cee <_printf_float+0xb6>
 8008eb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008eb8:	ea59 0303 	orrs.w	r3, r9, r3
 8008ebc:	d102      	bne.n	8008ec4 <_printf_float+0x28c>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	07d9      	lsls	r1, r3, #31
 8008ec2:	d5d7      	bpl.n	8008e74 <_printf_float+0x23c>
 8008ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f43f af0d 	beq.w	8008cee <_printf_float+0xb6>
 8008ed4:	f04f 0a00 	mov.w	sl, #0
 8008ed8:	f104 0b1a 	add.w	fp, r4, #26
 8008edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ede:	425b      	negs	r3, r3
 8008ee0:	4553      	cmp	r3, sl
 8008ee2:	dc01      	bgt.n	8008ee8 <_printf_float+0x2b0>
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	e793      	b.n	8008e10 <_printf_float+0x1d8>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	465a      	mov	r2, fp
 8008eec:	4631      	mov	r1, r6
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47b8      	blx	r7
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	f43f aefb 	beq.w	8008cee <_printf_float+0xb6>
 8008ef8:	f10a 0a01 	add.w	sl, sl, #1
 8008efc:	e7ee      	b.n	8008edc <_printf_float+0x2a4>
 8008efe:	bf00      	nop
 8008f00:	7fefffff 	.word	0x7fefffff
 8008f04:	0800da64 	.word	0x0800da64
 8008f08:	0800da68 	.word	0x0800da68
 8008f0c:	0800da6c 	.word	0x0800da6c
 8008f10:	0800da70 	.word	0x0800da70
 8008f14:	0800da74 	.word	0x0800da74
 8008f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f1e:	4553      	cmp	r3, sl
 8008f20:	bfa8      	it	ge
 8008f22:	4653      	movge	r3, sl
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	4699      	mov	r9, r3
 8008f28:	dc36      	bgt.n	8008f98 <_printf_float+0x360>
 8008f2a:	f04f 0b00 	mov.w	fp, #0
 8008f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f32:	f104 021a 	add.w	r2, r4, #26
 8008f36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f38:	9306      	str	r3, [sp, #24]
 8008f3a:	eba3 0309 	sub.w	r3, r3, r9
 8008f3e:	455b      	cmp	r3, fp
 8008f40:	dc31      	bgt.n	8008fa6 <_printf_float+0x36e>
 8008f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f44:	459a      	cmp	sl, r3
 8008f46:	dc3a      	bgt.n	8008fbe <_printf_float+0x386>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	07da      	lsls	r2, r3, #31
 8008f4c:	d437      	bmi.n	8008fbe <_printf_float+0x386>
 8008f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f50:	ebaa 0903 	sub.w	r9, sl, r3
 8008f54:	9b06      	ldr	r3, [sp, #24]
 8008f56:	ebaa 0303 	sub.w	r3, sl, r3
 8008f5a:	4599      	cmp	r9, r3
 8008f5c:	bfa8      	it	ge
 8008f5e:	4699      	movge	r9, r3
 8008f60:	f1b9 0f00 	cmp.w	r9, #0
 8008f64:	dc33      	bgt.n	8008fce <_printf_float+0x396>
 8008f66:	f04f 0800 	mov.w	r8, #0
 8008f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f6e:	f104 0b1a 	add.w	fp, r4, #26
 8008f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f74:	ebaa 0303 	sub.w	r3, sl, r3
 8008f78:	eba3 0309 	sub.w	r3, r3, r9
 8008f7c:	4543      	cmp	r3, r8
 8008f7e:	f77f af79 	ble.w	8008e74 <_printf_float+0x23c>
 8008f82:	2301      	movs	r3, #1
 8008f84:	465a      	mov	r2, fp
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f aeae 	beq.w	8008cee <_printf_float+0xb6>
 8008f92:	f108 0801 	add.w	r8, r8, #1
 8008f96:	e7ec      	b.n	8008f72 <_printf_float+0x33a>
 8008f98:	4642      	mov	r2, r8
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1c2      	bne.n	8008f2a <_printf_float+0x2f2>
 8008fa4:	e6a3      	b.n	8008cee <_printf_float+0xb6>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	9206      	str	r2, [sp, #24]
 8008fae:	47b8      	blx	r7
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	f43f ae9c 	beq.w	8008cee <_printf_float+0xb6>
 8008fb6:	9a06      	ldr	r2, [sp, #24]
 8008fb8:	f10b 0b01 	add.w	fp, fp, #1
 8008fbc:	e7bb      	b.n	8008f36 <_printf_float+0x2fe>
 8008fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d1c0      	bne.n	8008f4e <_printf_float+0x316>
 8008fcc:	e68f      	b.n	8008cee <_printf_float+0xb6>
 8008fce:	9a06      	ldr	r2, [sp, #24]
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	4442      	add	r2, r8
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d1c3      	bne.n	8008f66 <_printf_float+0x32e>
 8008fde:	e686      	b.n	8008cee <_printf_float+0xb6>
 8008fe0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fe4:	f1ba 0f01 	cmp.w	sl, #1
 8008fe8:	dc01      	bgt.n	8008fee <_printf_float+0x3b6>
 8008fea:	07db      	lsls	r3, r3, #31
 8008fec:	d536      	bpl.n	800905c <_printf_float+0x424>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b8      	blx	r7
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	f43f ae78 	beq.w	8008cee <_printf_float+0xb6>
 8008ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	f43f ae70 	beq.w	8008cee <_printf_float+0xb6>
 800900e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009012:	2200      	movs	r2, #0
 8009014:	2300      	movs	r3, #0
 8009016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800901a:	f7f7 fd75 	bl	8000b08 <__aeabi_dcmpeq>
 800901e:	b9c0      	cbnz	r0, 8009052 <_printf_float+0x41a>
 8009020:	4653      	mov	r3, sl
 8009022:	f108 0201 	add.w	r2, r8, #1
 8009026:	4631      	mov	r1, r6
 8009028:	4628      	mov	r0, r5
 800902a:	47b8      	blx	r7
 800902c:	3001      	adds	r0, #1
 800902e:	d10c      	bne.n	800904a <_printf_float+0x412>
 8009030:	e65d      	b.n	8008cee <_printf_float+0xb6>
 8009032:	2301      	movs	r3, #1
 8009034:	465a      	mov	r2, fp
 8009036:	4631      	mov	r1, r6
 8009038:	4628      	mov	r0, r5
 800903a:	47b8      	blx	r7
 800903c:	3001      	adds	r0, #1
 800903e:	f43f ae56 	beq.w	8008cee <_printf_float+0xb6>
 8009042:	f108 0801 	add.w	r8, r8, #1
 8009046:	45d0      	cmp	r8, sl
 8009048:	dbf3      	blt.n	8009032 <_printf_float+0x3fa>
 800904a:	464b      	mov	r3, r9
 800904c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009050:	e6df      	b.n	8008e12 <_printf_float+0x1da>
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	f104 0b1a 	add.w	fp, r4, #26
 800905a:	e7f4      	b.n	8009046 <_printf_float+0x40e>
 800905c:	2301      	movs	r3, #1
 800905e:	4642      	mov	r2, r8
 8009060:	e7e1      	b.n	8009026 <_printf_float+0x3ee>
 8009062:	2301      	movs	r3, #1
 8009064:	464a      	mov	r2, r9
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	f43f ae3e 	beq.w	8008cee <_printf_float+0xb6>
 8009072:	f108 0801 	add.w	r8, r8, #1
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	4543      	cmp	r3, r8
 800907e:	dcf0      	bgt.n	8009062 <_printf_float+0x42a>
 8009080:	e6fc      	b.n	8008e7c <_printf_float+0x244>
 8009082:	f04f 0800 	mov.w	r8, #0
 8009086:	f104 0919 	add.w	r9, r4, #25
 800908a:	e7f4      	b.n	8009076 <_printf_float+0x43e>

0800908c <_printf_common>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	4616      	mov	r6, r2
 8009092:	4698      	mov	r8, r3
 8009094:	688a      	ldr	r2, [r1, #8]
 8009096:	690b      	ldr	r3, [r1, #16]
 8009098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800909c:	4293      	cmp	r3, r2
 800909e:	bfb8      	it	lt
 80090a0:	4613      	movlt	r3, r2
 80090a2:	6033      	str	r3, [r6, #0]
 80090a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090a8:	4607      	mov	r7, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	b10a      	cbz	r2, 80090b2 <_printf_common+0x26>
 80090ae:	3301      	adds	r3, #1
 80090b0:	6033      	str	r3, [r6, #0]
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	0699      	lsls	r1, r3, #26
 80090b6:	bf42      	ittt	mi
 80090b8:	6833      	ldrmi	r3, [r6, #0]
 80090ba:	3302      	addmi	r3, #2
 80090bc:	6033      	strmi	r3, [r6, #0]
 80090be:	6825      	ldr	r5, [r4, #0]
 80090c0:	f015 0506 	ands.w	r5, r5, #6
 80090c4:	d106      	bne.n	80090d4 <_printf_common+0x48>
 80090c6:	f104 0a19 	add.w	sl, r4, #25
 80090ca:	68e3      	ldr	r3, [r4, #12]
 80090cc:	6832      	ldr	r2, [r6, #0]
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	dc26      	bgt.n	8009122 <_printf_common+0x96>
 80090d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	3b00      	subs	r3, #0
 80090dc:	bf18      	it	ne
 80090de:	2301      	movne	r3, #1
 80090e0:	0692      	lsls	r2, r2, #26
 80090e2:	d42b      	bmi.n	800913c <_printf_common+0xb0>
 80090e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090e8:	4641      	mov	r1, r8
 80090ea:	4638      	mov	r0, r7
 80090ec:	47c8      	blx	r9
 80090ee:	3001      	adds	r0, #1
 80090f0:	d01e      	beq.n	8009130 <_printf_common+0xa4>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	6922      	ldr	r2, [r4, #16]
 80090f6:	f003 0306 	and.w	r3, r3, #6
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	bf02      	ittt	eq
 80090fe:	68e5      	ldreq	r5, [r4, #12]
 8009100:	6833      	ldreq	r3, [r6, #0]
 8009102:	1aed      	subeq	r5, r5, r3
 8009104:	68a3      	ldr	r3, [r4, #8]
 8009106:	bf0c      	ite	eq
 8009108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800910c:	2500      	movne	r5, #0
 800910e:	4293      	cmp	r3, r2
 8009110:	bfc4      	itt	gt
 8009112:	1a9b      	subgt	r3, r3, r2
 8009114:	18ed      	addgt	r5, r5, r3
 8009116:	2600      	movs	r6, #0
 8009118:	341a      	adds	r4, #26
 800911a:	42b5      	cmp	r5, r6
 800911c:	d11a      	bne.n	8009154 <_printf_common+0xc8>
 800911e:	2000      	movs	r0, #0
 8009120:	e008      	b.n	8009134 <_printf_common+0xa8>
 8009122:	2301      	movs	r3, #1
 8009124:	4652      	mov	r2, sl
 8009126:	4641      	mov	r1, r8
 8009128:	4638      	mov	r0, r7
 800912a:	47c8      	blx	r9
 800912c:	3001      	adds	r0, #1
 800912e:	d103      	bne.n	8009138 <_printf_common+0xac>
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	3501      	adds	r5, #1
 800913a:	e7c6      	b.n	80090ca <_printf_common+0x3e>
 800913c:	18e1      	adds	r1, r4, r3
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	2030      	movs	r0, #48	@ 0x30
 8009142:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009146:	4422      	add	r2, r4
 8009148:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800914c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009150:	3302      	adds	r3, #2
 8009152:	e7c7      	b.n	80090e4 <_printf_common+0x58>
 8009154:	2301      	movs	r3, #1
 8009156:	4622      	mov	r2, r4
 8009158:	4641      	mov	r1, r8
 800915a:	4638      	mov	r0, r7
 800915c:	47c8      	blx	r9
 800915e:	3001      	adds	r0, #1
 8009160:	d0e6      	beq.n	8009130 <_printf_common+0xa4>
 8009162:	3601      	adds	r6, #1
 8009164:	e7d9      	b.n	800911a <_printf_common+0x8e>
	...

08009168 <_printf_i>:
 8009168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	7e0f      	ldrb	r7, [r1, #24]
 800916e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009170:	2f78      	cmp	r7, #120	@ 0x78
 8009172:	4691      	mov	r9, r2
 8009174:	4680      	mov	r8, r0
 8009176:	460c      	mov	r4, r1
 8009178:	469a      	mov	sl, r3
 800917a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800917e:	d807      	bhi.n	8009190 <_printf_i+0x28>
 8009180:	2f62      	cmp	r7, #98	@ 0x62
 8009182:	d80a      	bhi.n	800919a <_printf_i+0x32>
 8009184:	2f00      	cmp	r7, #0
 8009186:	f000 80d2 	beq.w	800932e <_printf_i+0x1c6>
 800918a:	2f58      	cmp	r7, #88	@ 0x58
 800918c:	f000 80b9 	beq.w	8009302 <_printf_i+0x19a>
 8009190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009194:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009198:	e03a      	b.n	8009210 <_printf_i+0xa8>
 800919a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800919e:	2b15      	cmp	r3, #21
 80091a0:	d8f6      	bhi.n	8009190 <_printf_i+0x28>
 80091a2:	a101      	add	r1, pc, #4	@ (adr r1, 80091a8 <_printf_i+0x40>)
 80091a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091a8:	08009201 	.word	0x08009201
 80091ac:	08009215 	.word	0x08009215
 80091b0:	08009191 	.word	0x08009191
 80091b4:	08009191 	.word	0x08009191
 80091b8:	08009191 	.word	0x08009191
 80091bc:	08009191 	.word	0x08009191
 80091c0:	08009215 	.word	0x08009215
 80091c4:	08009191 	.word	0x08009191
 80091c8:	08009191 	.word	0x08009191
 80091cc:	08009191 	.word	0x08009191
 80091d0:	08009191 	.word	0x08009191
 80091d4:	08009315 	.word	0x08009315
 80091d8:	0800923f 	.word	0x0800923f
 80091dc:	080092cf 	.word	0x080092cf
 80091e0:	08009191 	.word	0x08009191
 80091e4:	08009191 	.word	0x08009191
 80091e8:	08009337 	.word	0x08009337
 80091ec:	08009191 	.word	0x08009191
 80091f0:	0800923f 	.word	0x0800923f
 80091f4:	08009191 	.word	0x08009191
 80091f8:	08009191 	.word	0x08009191
 80091fc:	080092d7 	.word	0x080092d7
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	1d1a      	adds	r2, r3, #4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6032      	str	r2, [r6, #0]
 8009208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800920c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009210:	2301      	movs	r3, #1
 8009212:	e09d      	b.n	8009350 <_printf_i+0x1e8>
 8009214:	6833      	ldr	r3, [r6, #0]
 8009216:	6820      	ldr	r0, [r4, #0]
 8009218:	1d19      	adds	r1, r3, #4
 800921a:	6031      	str	r1, [r6, #0]
 800921c:	0606      	lsls	r6, r0, #24
 800921e:	d501      	bpl.n	8009224 <_printf_i+0xbc>
 8009220:	681d      	ldr	r5, [r3, #0]
 8009222:	e003      	b.n	800922c <_printf_i+0xc4>
 8009224:	0645      	lsls	r5, r0, #25
 8009226:	d5fb      	bpl.n	8009220 <_printf_i+0xb8>
 8009228:	f9b3 5000 	ldrsh.w	r5, [r3]
 800922c:	2d00      	cmp	r5, #0
 800922e:	da03      	bge.n	8009238 <_printf_i+0xd0>
 8009230:	232d      	movs	r3, #45	@ 0x2d
 8009232:	426d      	negs	r5, r5
 8009234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009238:	4859      	ldr	r0, [pc, #356]	@ (80093a0 <_printf_i+0x238>)
 800923a:	230a      	movs	r3, #10
 800923c:	e011      	b.n	8009262 <_printf_i+0xfa>
 800923e:	6821      	ldr	r1, [r4, #0]
 8009240:	6833      	ldr	r3, [r6, #0]
 8009242:	0608      	lsls	r0, r1, #24
 8009244:	f853 5b04 	ldr.w	r5, [r3], #4
 8009248:	d402      	bmi.n	8009250 <_printf_i+0xe8>
 800924a:	0649      	lsls	r1, r1, #25
 800924c:	bf48      	it	mi
 800924e:	b2ad      	uxthmi	r5, r5
 8009250:	2f6f      	cmp	r7, #111	@ 0x6f
 8009252:	4853      	ldr	r0, [pc, #332]	@ (80093a0 <_printf_i+0x238>)
 8009254:	6033      	str	r3, [r6, #0]
 8009256:	bf14      	ite	ne
 8009258:	230a      	movne	r3, #10
 800925a:	2308      	moveq	r3, #8
 800925c:	2100      	movs	r1, #0
 800925e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009262:	6866      	ldr	r6, [r4, #4]
 8009264:	60a6      	str	r6, [r4, #8]
 8009266:	2e00      	cmp	r6, #0
 8009268:	bfa2      	ittt	ge
 800926a:	6821      	ldrge	r1, [r4, #0]
 800926c:	f021 0104 	bicge.w	r1, r1, #4
 8009270:	6021      	strge	r1, [r4, #0]
 8009272:	b90d      	cbnz	r5, 8009278 <_printf_i+0x110>
 8009274:	2e00      	cmp	r6, #0
 8009276:	d04b      	beq.n	8009310 <_printf_i+0x1a8>
 8009278:	4616      	mov	r6, r2
 800927a:	fbb5 f1f3 	udiv	r1, r5, r3
 800927e:	fb03 5711 	mls	r7, r3, r1, r5
 8009282:	5dc7      	ldrb	r7, [r0, r7]
 8009284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009288:	462f      	mov	r7, r5
 800928a:	42bb      	cmp	r3, r7
 800928c:	460d      	mov	r5, r1
 800928e:	d9f4      	bls.n	800927a <_printf_i+0x112>
 8009290:	2b08      	cmp	r3, #8
 8009292:	d10b      	bne.n	80092ac <_printf_i+0x144>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	07df      	lsls	r7, r3, #31
 8009298:	d508      	bpl.n	80092ac <_printf_i+0x144>
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	6861      	ldr	r1, [r4, #4]
 800929e:	4299      	cmp	r1, r3
 80092a0:	bfde      	ittt	le
 80092a2:	2330      	movle	r3, #48	@ 0x30
 80092a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092ac:	1b92      	subs	r2, r2, r6
 80092ae:	6122      	str	r2, [r4, #16]
 80092b0:	f8cd a000 	str.w	sl, [sp]
 80092b4:	464b      	mov	r3, r9
 80092b6:	aa03      	add	r2, sp, #12
 80092b8:	4621      	mov	r1, r4
 80092ba:	4640      	mov	r0, r8
 80092bc:	f7ff fee6 	bl	800908c <_printf_common>
 80092c0:	3001      	adds	r0, #1
 80092c2:	d14a      	bne.n	800935a <_printf_i+0x1f2>
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	b004      	add	sp, #16
 80092ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	f043 0320 	orr.w	r3, r3, #32
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	4833      	ldr	r0, [pc, #204]	@ (80093a4 <_printf_i+0x23c>)
 80092d8:	2778      	movs	r7, #120	@ 0x78
 80092da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	6831      	ldr	r1, [r6, #0]
 80092e2:	061f      	lsls	r7, r3, #24
 80092e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80092e8:	d402      	bmi.n	80092f0 <_printf_i+0x188>
 80092ea:	065f      	lsls	r7, r3, #25
 80092ec:	bf48      	it	mi
 80092ee:	b2ad      	uxthmi	r5, r5
 80092f0:	6031      	str	r1, [r6, #0]
 80092f2:	07d9      	lsls	r1, r3, #31
 80092f4:	bf44      	itt	mi
 80092f6:	f043 0320 	orrmi.w	r3, r3, #32
 80092fa:	6023      	strmi	r3, [r4, #0]
 80092fc:	b11d      	cbz	r5, 8009306 <_printf_i+0x19e>
 80092fe:	2310      	movs	r3, #16
 8009300:	e7ac      	b.n	800925c <_printf_i+0xf4>
 8009302:	4827      	ldr	r0, [pc, #156]	@ (80093a0 <_printf_i+0x238>)
 8009304:	e7e9      	b.n	80092da <_printf_i+0x172>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	f023 0320 	bic.w	r3, r3, #32
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	e7f6      	b.n	80092fe <_printf_i+0x196>
 8009310:	4616      	mov	r6, r2
 8009312:	e7bd      	b.n	8009290 <_printf_i+0x128>
 8009314:	6833      	ldr	r3, [r6, #0]
 8009316:	6825      	ldr	r5, [r4, #0]
 8009318:	6961      	ldr	r1, [r4, #20]
 800931a:	1d18      	adds	r0, r3, #4
 800931c:	6030      	str	r0, [r6, #0]
 800931e:	062e      	lsls	r6, r5, #24
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	d501      	bpl.n	8009328 <_printf_i+0x1c0>
 8009324:	6019      	str	r1, [r3, #0]
 8009326:	e002      	b.n	800932e <_printf_i+0x1c6>
 8009328:	0668      	lsls	r0, r5, #25
 800932a:	d5fb      	bpl.n	8009324 <_printf_i+0x1bc>
 800932c:	8019      	strh	r1, [r3, #0]
 800932e:	2300      	movs	r3, #0
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	4616      	mov	r6, r2
 8009334:	e7bc      	b.n	80092b0 <_printf_i+0x148>
 8009336:	6833      	ldr	r3, [r6, #0]
 8009338:	1d1a      	adds	r2, r3, #4
 800933a:	6032      	str	r2, [r6, #0]
 800933c:	681e      	ldr	r6, [r3, #0]
 800933e:	6862      	ldr	r2, [r4, #4]
 8009340:	2100      	movs	r1, #0
 8009342:	4630      	mov	r0, r6
 8009344:	f7f6 ff64 	bl	8000210 <memchr>
 8009348:	b108      	cbz	r0, 800934e <_printf_i+0x1e6>
 800934a:	1b80      	subs	r0, r0, r6
 800934c:	6060      	str	r0, [r4, #4]
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	6123      	str	r3, [r4, #16]
 8009352:	2300      	movs	r3, #0
 8009354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009358:	e7aa      	b.n	80092b0 <_printf_i+0x148>
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	4632      	mov	r2, r6
 800935e:	4649      	mov	r1, r9
 8009360:	4640      	mov	r0, r8
 8009362:	47d0      	blx	sl
 8009364:	3001      	adds	r0, #1
 8009366:	d0ad      	beq.n	80092c4 <_printf_i+0x15c>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	079b      	lsls	r3, r3, #30
 800936c:	d413      	bmi.n	8009396 <_printf_i+0x22e>
 800936e:	68e0      	ldr	r0, [r4, #12]
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	4298      	cmp	r0, r3
 8009374:	bfb8      	it	lt
 8009376:	4618      	movlt	r0, r3
 8009378:	e7a6      	b.n	80092c8 <_printf_i+0x160>
 800937a:	2301      	movs	r3, #1
 800937c:	4632      	mov	r2, r6
 800937e:	4649      	mov	r1, r9
 8009380:	4640      	mov	r0, r8
 8009382:	47d0      	blx	sl
 8009384:	3001      	adds	r0, #1
 8009386:	d09d      	beq.n	80092c4 <_printf_i+0x15c>
 8009388:	3501      	adds	r5, #1
 800938a:	68e3      	ldr	r3, [r4, #12]
 800938c:	9903      	ldr	r1, [sp, #12]
 800938e:	1a5b      	subs	r3, r3, r1
 8009390:	42ab      	cmp	r3, r5
 8009392:	dcf2      	bgt.n	800937a <_printf_i+0x212>
 8009394:	e7eb      	b.n	800936e <_printf_i+0x206>
 8009396:	2500      	movs	r5, #0
 8009398:	f104 0619 	add.w	r6, r4, #25
 800939c:	e7f5      	b.n	800938a <_printf_i+0x222>
 800939e:	bf00      	nop
 80093a0:	0800da76 	.word	0x0800da76
 80093a4:	0800da87 	.word	0x0800da87

080093a8 <_scanf_float>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	b087      	sub	sp, #28
 80093ae:	4617      	mov	r7, r2
 80093b0:	9303      	str	r3, [sp, #12]
 80093b2:	688b      	ldr	r3, [r1, #8]
 80093b4:	1e5a      	subs	r2, r3, #1
 80093b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80093ba:	bf81      	itttt	hi
 80093bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80093c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80093c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80093c8:	608b      	strhi	r3, [r1, #8]
 80093ca:	680b      	ldr	r3, [r1, #0]
 80093cc:	460a      	mov	r2, r1
 80093ce:	f04f 0500 	mov.w	r5, #0
 80093d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80093d6:	f842 3b1c 	str.w	r3, [r2], #28
 80093da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80093de:	4680      	mov	r8, r0
 80093e0:	460c      	mov	r4, r1
 80093e2:	bf98      	it	ls
 80093e4:	f04f 0b00 	movls.w	fp, #0
 80093e8:	9201      	str	r2, [sp, #4]
 80093ea:	4616      	mov	r6, r2
 80093ec:	46aa      	mov	sl, r5
 80093ee:	46a9      	mov	r9, r5
 80093f0:	9502      	str	r5, [sp, #8]
 80093f2:	68a2      	ldr	r2, [r4, #8]
 80093f4:	b152      	cbz	r2, 800940c <_scanf_float+0x64>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80093fc:	d864      	bhi.n	80094c8 <_scanf_float+0x120>
 80093fe:	2b40      	cmp	r3, #64	@ 0x40
 8009400:	d83c      	bhi.n	800947c <_scanf_float+0xd4>
 8009402:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009406:	b2c8      	uxtb	r0, r1
 8009408:	280e      	cmp	r0, #14
 800940a:	d93a      	bls.n	8009482 <_scanf_float+0xda>
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	d003      	beq.n	800941a <_scanf_float+0x72>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800941e:	f1ba 0f01 	cmp.w	sl, #1
 8009422:	f200 8117 	bhi.w	8009654 <_scanf_float+0x2ac>
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	429e      	cmp	r6, r3
 800942a:	f200 8108 	bhi.w	800963e <_scanf_float+0x296>
 800942e:	2001      	movs	r0, #1
 8009430:	b007      	add	sp, #28
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009436:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800943a:	2a0d      	cmp	r2, #13
 800943c:	d8e6      	bhi.n	800940c <_scanf_float+0x64>
 800943e:	a101      	add	r1, pc, #4	@ (adr r1, 8009444 <_scanf_float+0x9c>)
 8009440:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009444:	0800958b 	.word	0x0800958b
 8009448:	0800940d 	.word	0x0800940d
 800944c:	0800940d 	.word	0x0800940d
 8009450:	0800940d 	.word	0x0800940d
 8009454:	080095eb 	.word	0x080095eb
 8009458:	080095c3 	.word	0x080095c3
 800945c:	0800940d 	.word	0x0800940d
 8009460:	0800940d 	.word	0x0800940d
 8009464:	08009599 	.word	0x08009599
 8009468:	0800940d 	.word	0x0800940d
 800946c:	0800940d 	.word	0x0800940d
 8009470:	0800940d 	.word	0x0800940d
 8009474:	0800940d 	.word	0x0800940d
 8009478:	08009551 	.word	0x08009551
 800947c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009480:	e7db      	b.n	800943a <_scanf_float+0x92>
 8009482:	290e      	cmp	r1, #14
 8009484:	d8c2      	bhi.n	800940c <_scanf_float+0x64>
 8009486:	a001      	add	r0, pc, #4	@ (adr r0, 800948c <_scanf_float+0xe4>)
 8009488:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800948c:	08009541 	.word	0x08009541
 8009490:	0800940d 	.word	0x0800940d
 8009494:	08009541 	.word	0x08009541
 8009498:	080095d7 	.word	0x080095d7
 800949c:	0800940d 	.word	0x0800940d
 80094a0:	080094e9 	.word	0x080094e9
 80094a4:	08009527 	.word	0x08009527
 80094a8:	08009527 	.word	0x08009527
 80094ac:	08009527 	.word	0x08009527
 80094b0:	08009527 	.word	0x08009527
 80094b4:	08009527 	.word	0x08009527
 80094b8:	08009527 	.word	0x08009527
 80094bc:	08009527 	.word	0x08009527
 80094c0:	08009527 	.word	0x08009527
 80094c4:	08009527 	.word	0x08009527
 80094c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80094ca:	d809      	bhi.n	80094e0 <_scanf_float+0x138>
 80094cc:	2b60      	cmp	r3, #96	@ 0x60
 80094ce:	d8b2      	bhi.n	8009436 <_scanf_float+0x8e>
 80094d0:	2b54      	cmp	r3, #84	@ 0x54
 80094d2:	d07b      	beq.n	80095cc <_scanf_float+0x224>
 80094d4:	2b59      	cmp	r3, #89	@ 0x59
 80094d6:	d199      	bne.n	800940c <_scanf_float+0x64>
 80094d8:	2d07      	cmp	r5, #7
 80094da:	d197      	bne.n	800940c <_scanf_float+0x64>
 80094dc:	2508      	movs	r5, #8
 80094de:	e02c      	b.n	800953a <_scanf_float+0x192>
 80094e0:	2b74      	cmp	r3, #116	@ 0x74
 80094e2:	d073      	beq.n	80095cc <_scanf_float+0x224>
 80094e4:	2b79      	cmp	r3, #121	@ 0x79
 80094e6:	e7f6      	b.n	80094d6 <_scanf_float+0x12e>
 80094e8:	6821      	ldr	r1, [r4, #0]
 80094ea:	05c8      	lsls	r0, r1, #23
 80094ec:	d51b      	bpl.n	8009526 <_scanf_float+0x17e>
 80094ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80094f2:	6021      	str	r1, [r4, #0]
 80094f4:	f109 0901 	add.w	r9, r9, #1
 80094f8:	f1bb 0f00 	cmp.w	fp, #0
 80094fc:	d003      	beq.n	8009506 <_scanf_float+0x15e>
 80094fe:	3201      	adds	r2, #1
 8009500:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009504:	60a2      	str	r2, [r4, #8]
 8009506:	68a3      	ldr	r3, [r4, #8]
 8009508:	3b01      	subs	r3, #1
 800950a:	60a3      	str	r3, [r4, #8]
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	3301      	adds	r3, #1
 8009510:	6123      	str	r3, [r4, #16]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3b01      	subs	r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	f340 8087 	ble.w	800962c <_scanf_float+0x284>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	3301      	adds	r3, #1
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	e765      	b.n	80093f2 <_scanf_float+0x4a>
 8009526:	eb1a 0105 	adds.w	r1, sl, r5
 800952a:	f47f af6f 	bne.w	800940c <_scanf_float+0x64>
 800952e:	6822      	ldr	r2, [r4, #0]
 8009530:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009534:	6022      	str	r2, [r4, #0]
 8009536:	460d      	mov	r5, r1
 8009538:	468a      	mov	sl, r1
 800953a:	f806 3b01 	strb.w	r3, [r6], #1
 800953e:	e7e2      	b.n	8009506 <_scanf_float+0x15e>
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	0610      	lsls	r0, r2, #24
 8009544:	f57f af62 	bpl.w	800940c <_scanf_float+0x64>
 8009548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800954c:	6022      	str	r2, [r4, #0]
 800954e:	e7f4      	b.n	800953a <_scanf_float+0x192>
 8009550:	f1ba 0f00 	cmp.w	sl, #0
 8009554:	d10e      	bne.n	8009574 <_scanf_float+0x1cc>
 8009556:	f1b9 0f00 	cmp.w	r9, #0
 800955a:	d10e      	bne.n	800957a <_scanf_float+0x1d2>
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009562:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009566:	d108      	bne.n	800957a <_scanf_float+0x1d2>
 8009568:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	f04f 0a01 	mov.w	sl, #1
 8009572:	e7e2      	b.n	800953a <_scanf_float+0x192>
 8009574:	f1ba 0f02 	cmp.w	sl, #2
 8009578:	d055      	beq.n	8009626 <_scanf_float+0x27e>
 800957a:	2d01      	cmp	r5, #1
 800957c:	d002      	beq.n	8009584 <_scanf_float+0x1dc>
 800957e:	2d04      	cmp	r5, #4
 8009580:	f47f af44 	bne.w	800940c <_scanf_float+0x64>
 8009584:	3501      	adds	r5, #1
 8009586:	b2ed      	uxtb	r5, r5
 8009588:	e7d7      	b.n	800953a <_scanf_float+0x192>
 800958a:	f1ba 0f01 	cmp.w	sl, #1
 800958e:	f47f af3d 	bne.w	800940c <_scanf_float+0x64>
 8009592:	f04f 0a02 	mov.w	sl, #2
 8009596:	e7d0      	b.n	800953a <_scanf_float+0x192>
 8009598:	b97d      	cbnz	r5, 80095ba <_scanf_float+0x212>
 800959a:	f1b9 0f00 	cmp.w	r9, #0
 800959e:	f47f af38 	bne.w	8009412 <_scanf_float+0x6a>
 80095a2:	6822      	ldr	r2, [r4, #0]
 80095a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80095a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80095ac:	f040 8108 	bne.w	80097c0 <_scanf_float+0x418>
 80095b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095b4:	6022      	str	r2, [r4, #0]
 80095b6:	2501      	movs	r5, #1
 80095b8:	e7bf      	b.n	800953a <_scanf_float+0x192>
 80095ba:	2d03      	cmp	r5, #3
 80095bc:	d0e2      	beq.n	8009584 <_scanf_float+0x1dc>
 80095be:	2d05      	cmp	r5, #5
 80095c0:	e7de      	b.n	8009580 <_scanf_float+0x1d8>
 80095c2:	2d02      	cmp	r5, #2
 80095c4:	f47f af22 	bne.w	800940c <_scanf_float+0x64>
 80095c8:	2503      	movs	r5, #3
 80095ca:	e7b6      	b.n	800953a <_scanf_float+0x192>
 80095cc:	2d06      	cmp	r5, #6
 80095ce:	f47f af1d 	bne.w	800940c <_scanf_float+0x64>
 80095d2:	2507      	movs	r5, #7
 80095d4:	e7b1      	b.n	800953a <_scanf_float+0x192>
 80095d6:	6822      	ldr	r2, [r4, #0]
 80095d8:	0591      	lsls	r1, r2, #22
 80095da:	f57f af17 	bpl.w	800940c <_scanf_float+0x64>
 80095de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80095e2:	6022      	str	r2, [r4, #0]
 80095e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80095e8:	e7a7      	b.n	800953a <_scanf_float+0x192>
 80095ea:	6822      	ldr	r2, [r4, #0]
 80095ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80095f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80095f4:	d006      	beq.n	8009604 <_scanf_float+0x25c>
 80095f6:	0550      	lsls	r0, r2, #21
 80095f8:	f57f af08 	bpl.w	800940c <_scanf_float+0x64>
 80095fc:	f1b9 0f00 	cmp.w	r9, #0
 8009600:	f000 80de 	beq.w	80097c0 <_scanf_float+0x418>
 8009604:	0591      	lsls	r1, r2, #22
 8009606:	bf58      	it	pl
 8009608:	9902      	ldrpl	r1, [sp, #8]
 800960a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800960e:	bf58      	it	pl
 8009610:	eba9 0101 	subpl.w	r1, r9, r1
 8009614:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009618:	bf58      	it	pl
 800961a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	f04f 0900 	mov.w	r9, #0
 8009624:	e789      	b.n	800953a <_scanf_float+0x192>
 8009626:	f04f 0a03 	mov.w	sl, #3
 800962a:	e786      	b.n	800953a <_scanf_float+0x192>
 800962c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009630:	4639      	mov	r1, r7
 8009632:	4640      	mov	r0, r8
 8009634:	4798      	blx	r3
 8009636:	2800      	cmp	r0, #0
 8009638:	f43f aedb 	beq.w	80093f2 <_scanf_float+0x4a>
 800963c:	e6e6      	b.n	800940c <_scanf_float+0x64>
 800963e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009646:	463a      	mov	r2, r7
 8009648:	4640      	mov	r0, r8
 800964a:	4798      	blx	r3
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	3b01      	subs	r3, #1
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	e6e8      	b.n	8009426 <_scanf_float+0x7e>
 8009654:	1e6b      	subs	r3, r5, #1
 8009656:	2b06      	cmp	r3, #6
 8009658:	d824      	bhi.n	80096a4 <_scanf_float+0x2fc>
 800965a:	2d02      	cmp	r5, #2
 800965c:	d836      	bhi.n	80096cc <_scanf_float+0x324>
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	429e      	cmp	r6, r3
 8009662:	f67f aee4 	bls.w	800942e <_scanf_float+0x86>
 8009666:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800966a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800966e:	463a      	mov	r2, r7
 8009670:	4640      	mov	r0, r8
 8009672:	4798      	blx	r3
 8009674:	6923      	ldr	r3, [r4, #16]
 8009676:	3b01      	subs	r3, #1
 8009678:	6123      	str	r3, [r4, #16]
 800967a:	e7f0      	b.n	800965e <_scanf_float+0x2b6>
 800967c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009680:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009684:	463a      	mov	r2, r7
 8009686:	4640      	mov	r0, r8
 8009688:	4798      	blx	r3
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	3b01      	subs	r3, #1
 800968e:	6123      	str	r3, [r4, #16]
 8009690:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009694:	fa5f fa8a 	uxtb.w	sl, sl
 8009698:	f1ba 0f02 	cmp.w	sl, #2
 800969c:	d1ee      	bne.n	800967c <_scanf_float+0x2d4>
 800969e:	3d03      	subs	r5, #3
 80096a0:	b2ed      	uxtb	r5, r5
 80096a2:	1b76      	subs	r6, r6, r5
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	05da      	lsls	r2, r3, #23
 80096a8:	d530      	bpl.n	800970c <_scanf_float+0x364>
 80096aa:	055b      	lsls	r3, r3, #21
 80096ac:	d511      	bpl.n	80096d2 <_scanf_float+0x32a>
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	429e      	cmp	r6, r3
 80096b2:	f67f aebc 	bls.w	800942e <_scanf_float+0x86>
 80096b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096be:	463a      	mov	r2, r7
 80096c0:	4640      	mov	r0, r8
 80096c2:	4798      	blx	r3
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	e7f0      	b.n	80096ae <_scanf_float+0x306>
 80096cc:	46aa      	mov	sl, r5
 80096ce:	46b3      	mov	fp, r6
 80096d0:	e7de      	b.n	8009690 <_scanf_float+0x2e8>
 80096d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	2965      	cmp	r1, #101	@ 0x65
 80096da:	f103 33ff 	add.w	r3, r3, #4294967295
 80096de:	f106 35ff 	add.w	r5, r6, #4294967295
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	d00c      	beq.n	8009700 <_scanf_float+0x358>
 80096e6:	2945      	cmp	r1, #69	@ 0x45
 80096e8:	d00a      	beq.n	8009700 <_scanf_float+0x358>
 80096ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096ee:	463a      	mov	r2, r7
 80096f0:	4640      	mov	r0, r8
 80096f2:	4798      	blx	r3
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	1eb5      	subs	r5, r6, #2
 80096fe:	6123      	str	r3, [r4, #16]
 8009700:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009704:	463a      	mov	r2, r7
 8009706:	4640      	mov	r0, r8
 8009708:	4798      	blx	r3
 800970a:	462e      	mov	r6, r5
 800970c:	6822      	ldr	r2, [r4, #0]
 800970e:	f012 0210 	ands.w	r2, r2, #16
 8009712:	d001      	beq.n	8009718 <_scanf_float+0x370>
 8009714:	2000      	movs	r0, #0
 8009716:	e68b      	b.n	8009430 <_scanf_float+0x88>
 8009718:	7032      	strb	r2, [r6, #0]
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009720:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009724:	d11c      	bne.n	8009760 <_scanf_float+0x3b8>
 8009726:	9b02      	ldr	r3, [sp, #8]
 8009728:	454b      	cmp	r3, r9
 800972a:	eba3 0209 	sub.w	r2, r3, r9
 800972e:	d123      	bne.n	8009778 <_scanf_float+0x3d0>
 8009730:	9901      	ldr	r1, [sp, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	4640      	mov	r0, r8
 8009736:	f002 fd0b 	bl	800c150 <_strtod_r>
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	6821      	ldr	r1, [r4, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f011 0f02 	tst.w	r1, #2
 8009744:	ec57 6b10 	vmov	r6, r7, d0
 8009748:	f103 0204 	add.w	r2, r3, #4
 800974c:	d01f      	beq.n	800978e <_scanf_float+0x3e6>
 800974e:	9903      	ldr	r1, [sp, #12]
 8009750:	600a      	str	r2, [r1, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	e9c3 6700 	strd	r6, r7, [r3]
 8009758:	68e3      	ldr	r3, [r4, #12]
 800975a:	3301      	adds	r3, #1
 800975c:	60e3      	str	r3, [r4, #12]
 800975e:	e7d9      	b.n	8009714 <_scanf_float+0x36c>
 8009760:	9b04      	ldr	r3, [sp, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0e4      	beq.n	8009730 <_scanf_float+0x388>
 8009766:	9905      	ldr	r1, [sp, #20]
 8009768:	230a      	movs	r3, #10
 800976a:	3101      	adds	r1, #1
 800976c:	4640      	mov	r0, r8
 800976e:	f002 fd6f 	bl	800c250 <_strtol_r>
 8009772:	9b04      	ldr	r3, [sp, #16]
 8009774:	9e05      	ldr	r6, [sp, #20]
 8009776:	1ac2      	subs	r2, r0, r3
 8009778:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800977c:	429e      	cmp	r6, r3
 800977e:	bf28      	it	cs
 8009780:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009784:	4910      	ldr	r1, [pc, #64]	@ (80097c8 <_scanf_float+0x420>)
 8009786:	4630      	mov	r0, r6
 8009788:	f000 f954 	bl	8009a34 <siprintf>
 800978c:	e7d0      	b.n	8009730 <_scanf_float+0x388>
 800978e:	f011 0f04 	tst.w	r1, #4
 8009792:	9903      	ldr	r1, [sp, #12]
 8009794:	600a      	str	r2, [r1, #0]
 8009796:	d1dc      	bne.n	8009752 <_scanf_float+0x3aa>
 8009798:	681d      	ldr	r5, [r3, #0]
 800979a:	4632      	mov	r2, r6
 800979c:	463b      	mov	r3, r7
 800979e:	4630      	mov	r0, r6
 80097a0:	4639      	mov	r1, r7
 80097a2:	f7f7 f9e3 	bl	8000b6c <__aeabi_dcmpun>
 80097a6:	b128      	cbz	r0, 80097b4 <_scanf_float+0x40c>
 80097a8:	4808      	ldr	r0, [pc, #32]	@ (80097cc <_scanf_float+0x424>)
 80097aa:	f000 fac9 	bl	8009d40 <nanf>
 80097ae:	ed85 0a00 	vstr	s0, [r5]
 80097b2:	e7d1      	b.n	8009758 <_scanf_float+0x3b0>
 80097b4:	4630      	mov	r0, r6
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f7 fa36 	bl	8000c28 <__aeabi_d2f>
 80097bc:	6028      	str	r0, [r5, #0]
 80097be:	e7cb      	b.n	8009758 <_scanf_float+0x3b0>
 80097c0:	f04f 0900 	mov.w	r9, #0
 80097c4:	e629      	b.n	800941a <_scanf_float+0x72>
 80097c6:	bf00      	nop
 80097c8:	0800da98 	.word	0x0800da98
 80097cc:	0800de2d 	.word	0x0800de2d

080097d0 <std>:
 80097d0:	2300      	movs	r3, #0
 80097d2:	b510      	push	{r4, lr}
 80097d4:	4604      	mov	r4, r0
 80097d6:	e9c0 3300 	strd	r3, r3, [r0]
 80097da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097de:	6083      	str	r3, [r0, #8]
 80097e0:	8181      	strh	r1, [r0, #12]
 80097e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80097e4:	81c2      	strh	r2, [r0, #14]
 80097e6:	6183      	str	r3, [r0, #24]
 80097e8:	4619      	mov	r1, r3
 80097ea:	2208      	movs	r2, #8
 80097ec:	305c      	adds	r0, #92	@ 0x5c
 80097ee:	f000 fa19 	bl	8009c24 <memset>
 80097f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009828 <std+0x58>)
 80097f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80097f6:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <std+0x5c>)
 80097f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009830 <std+0x60>)
 80097fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009834 <std+0x64>)
 8009800:	6323      	str	r3, [r4, #48]	@ 0x30
 8009802:	4b0d      	ldr	r3, [pc, #52]	@ (8009838 <std+0x68>)
 8009804:	6224      	str	r4, [r4, #32]
 8009806:	429c      	cmp	r4, r3
 8009808:	d006      	beq.n	8009818 <std+0x48>
 800980a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800980e:	4294      	cmp	r4, r2
 8009810:	d002      	beq.n	8009818 <std+0x48>
 8009812:	33d0      	adds	r3, #208	@ 0xd0
 8009814:	429c      	cmp	r4, r3
 8009816:	d105      	bne.n	8009824 <std+0x54>
 8009818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009820:	f000 ba7c 	b.w	8009d1c <__retarget_lock_init_recursive>
 8009824:	bd10      	pop	{r4, pc}
 8009826:	bf00      	nop
 8009828:	08009a75 	.word	0x08009a75
 800982c:	08009a97 	.word	0x08009a97
 8009830:	08009acf 	.word	0x08009acf
 8009834:	08009af3 	.word	0x08009af3
 8009838:	200006d8 	.word	0x200006d8

0800983c <stdio_exit_handler>:
 800983c:	4a02      	ldr	r2, [pc, #8]	@ (8009848 <stdio_exit_handler+0xc>)
 800983e:	4903      	ldr	r1, [pc, #12]	@ (800984c <stdio_exit_handler+0x10>)
 8009840:	4803      	ldr	r0, [pc, #12]	@ (8009850 <stdio_exit_handler+0x14>)
 8009842:	f000 b869 	b.w	8009918 <_fwalk_sglue>
 8009846:	bf00      	nop
 8009848:	20000038 	.word	0x20000038
 800984c:	0800c891 	.word	0x0800c891
 8009850:	20000048 	.word	0x20000048

08009854 <cleanup_stdio>:
 8009854:	6841      	ldr	r1, [r0, #4]
 8009856:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <cleanup_stdio+0x34>)
 8009858:	4299      	cmp	r1, r3
 800985a:	b510      	push	{r4, lr}
 800985c:	4604      	mov	r4, r0
 800985e:	d001      	beq.n	8009864 <cleanup_stdio+0x10>
 8009860:	f003 f816 	bl	800c890 <_fflush_r>
 8009864:	68a1      	ldr	r1, [r4, #8]
 8009866:	4b09      	ldr	r3, [pc, #36]	@ (800988c <cleanup_stdio+0x38>)
 8009868:	4299      	cmp	r1, r3
 800986a:	d002      	beq.n	8009872 <cleanup_stdio+0x1e>
 800986c:	4620      	mov	r0, r4
 800986e:	f003 f80f 	bl	800c890 <_fflush_r>
 8009872:	68e1      	ldr	r1, [r4, #12]
 8009874:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <cleanup_stdio+0x3c>)
 8009876:	4299      	cmp	r1, r3
 8009878:	d004      	beq.n	8009884 <cleanup_stdio+0x30>
 800987a:	4620      	mov	r0, r4
 800987c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009880:	f003 b806 	b.w	800c890 <_fflush_r>
 8009884:	bd10      	pop	{r4, pc}
 8009886:	bf00      	nop
 8009888:	200006d8 	.word	0x200006d8
 800988c:	20000740 	.word	0x20000740
 8009890:	200007a8 	.word	0x200007a8

08009894 <global_stdio_init.part.0>:
 8009894:	b510      	push	{r4, lr}
 8009896:	4b0b      	ldr	r3, [pc, #44]	@ (80098c4 <global_stdio_init.part.0+0x30>)
 8009898:	4c0b      	ldr	r4, [pc, #44]	@ (80098c8 <global_stdio_init.part.0+0x34>)
 800989a:	4a0c      	ldr	r2, [pc, #48]	@ (80098cc <global_stdio_init.part.0+0x38>)
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	4620      	mov	r0, r4
 80098a0:	2200      	movs	r2, #0
 80098a2:	2104      	movs	r1, #4
 80098a4:	f7ff ff94 	bl	80097d0 <std>
 80098a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098ac:	2201      	movs	r2, #1
 80098ae:	2109      	movs	r1, #9
 80098b0:	f7ff ff8e 	bl	80097d0 <std>
 80098b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098b8:	2202      	movs	r2, #2
 80098ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098be:	2112      	movs	r1, #18
 80098c0:	f7ff bf86 	b.w	80097d0 <std>
 80098c4:	20000810 	.word	0x20000810
 80098c8:	200006d8 	.word	0x200006d8
 80098cc:	0800983d 	.word	0x0800983d

080098d0 <__sfp_lock_acquire>:
 80098d0:	4801      	ldr	r0, [pc, #4]	@ (80098d8 <__sfp_lock_acquire+0x8>)
 80098d2:	f000 ba24 	b.w	8009d1e <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	20000819 	.word	0x20000819

080098dc <__sfp_lock_release>:
 80098dc:	4801      	ldr	r0, [pc, #4]	@ (80098e4 <__sfp_lock_release+0x8>)
 80098de:	f000 ba1f 	b.w	8009d20 <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	20000819 	.word	0x20000819

080098e8 <__sinit>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4604      	mov	r4, r0
 80098ec:	f7ff fff0 	bl	80098d0 <__sfp_lock_acquire>
 80098f0:	6a23      	ldr	r3, [r4, #32]
 80098f2:	b11b      	cbz	r3, 80098fc <__sinit+0x14>
 80098f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f8:	f7ff bff0 	b.w	80098dc <__sfp_lock_release>
 80098fc:	4b04      	ldr	r3, [pc, #16]	@ (8009910 <__sinit+0x28>)
 80098fe:	6223      	str	r3, [r4, #32]
 8009900:	4b04      	ldr	r3, [pc, #16]	@ (8009914 <__sinit+0x2c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f5      	bne.n	80098f4 <__sinit+0xc>
 8009908:	f7ff ffc4 	bl	8009894 <global_stdio_init.part.0>
 800990c:	e7f2      	b.n	80098f4 <__sinit+0xc>
 800990e:	bf00      	nop
 8009910:	08009855 	.word	0x08009855
 8009914:	20000810 	.word	0x20000810

08009918 <_fwalk_sglue>:
 8009918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800991c:	4607      	mov	r7, r0
 800991e:	4688      	mov	r8, r1
 8009920:	4614      	mov	r4, r2
 8009922:	2600      	movs	r6, #0
 8009924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009928:	f1b9 0901 	subs.w	r9, r9, #1
 800992c:	d505      	bpl.n	800993a <_fwalk_sglue+0x22>
 800992e:	6824      	ldr	r4, [r4, #0]
 8009930:	2c00      	cmp	r4, #0
 8009932:	d1f7      	bne.n	8009924 <_fwalk_sglue+0xc>
 8009934:	4630      	mov	r0, r6
 8009936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d907      	bls.n	8009950 <_fwalk_sglue+0x38>
 8009940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009944:	3301      	adds	r3, #1
 8009946:	d003      	beq.n	8009950 <_fwalk_sglue+0x38>
 8009948:	4629      	mov	r1, r5
 800994a:	4638      	mov	r0, r7
 800994c:	47c0      	blx	r8
 800994e:	4306      	orrs	r6, r0
 8009950:	3568      	adds	r5, #104	@ 0x68
 8009952:	e7e9      	b.n	8009928 <_fwalk_sglue+0x10>

08009954 <iprintf>:
 8009954:	b40f      	push	{r0, r1, r2, r3}
 8009956:	b507      	push	{r0, r1, r2, lr}
 8009958:	4906      	ldr	r1, [pc, #24]	@ (8009974 <iprintf+0x20>)
 800995a:	ab04      	add	r3, sp, #16
 800995c:	6808      	ldr	r0, [r1, #0]
 800995e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009962:	6881      	ldr	r1, [r0, #8]
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	f002 fdf7 	bl	800c558 <_vfiprintf_r>
 800996a:	b003      	add	sp, #12
 800996c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009970:	b004      	add	sp, #16
 8009972:	4770      	bx	lr
 8009974:	20000044 	.word	0x20000044

08009978 <_puts_r>:
 8009978:	6a03      	ldr	r3, [r0, #32]
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	6884      	ldr	r4, [r0, #8]
 800997e:	4605      	mov	r5, r0
 8009980:	460e      	mov	r6, r1
 8009982:	b90b      	cbnz	r3, 8009988 <_puts_r+0x10>
 8009984:	f7ff ffb0 	bl	80098e8 <__sinit>
 8009988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800998a:	07db      	lsls	r3, r3, #31
 800998c:	d405      	bmi.n	800999a <_puts_r+0x22>
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	0598      	lsls	r0, r3, #22
 8009992:	d402      	bmi.n	800999a <_puts_r+0x22>
 8009994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009996:	f000 f9c2 	bl	8009d1e <__retarget_lock_acquire_recursive>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	0719      	lsls	r1, r3, #28
 800999e:	d502      	bpl.n	80099a6 <_puts_r+0x2e>
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d135      	bne.n	8009a12 <_puts_r+0x9a>
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f000 f8e5 	bl	8009b78 <__swsetup_r>
 80099ae:	b380      	cbz	r0, 8009a12 <_puts_r+0x9a>
 80099b0:	f04f 35ff 	mov.w	r5, #4294967295
 80099b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099b6:	07da      	lsls	r2, r3, #31
 80099b8:	d405      	bmi.n	80099c6 <_puts_r+0x4e>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	059b      	lsls	r3, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_puts_r+0x4e>
 80099c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099c2:	f000 f9ad 	bl	8009d20 <__retarget_lock_release_recursive>
 80099c6:	4628      	mov	r0, r5
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	da04      	bge.n	80099d8 <_puts_r+0x60>
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	dc17      	bgt.n	8009a04 <_puts_r+0x8c>
 80099d4:	290a      	cmp	r1, #10
 80099d6:	d015      	beq.n	8009a04 <_puts_r+0x8c>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	7019      	strb	r1, [r3, #0]
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099e6:	3b01      	subs	r3, #1
 80099e8:	60a3      	str	r3, [r4, #8]
 80099ea:	2900      	cmp	r1, #0
 80099ec:	d1ed      	bne.n	80099ca <_puts_r+0x52>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da11      	bge.n	8009a16 <_puts_r+0x9e>
 80099f2:	4622      	mov	r2, r4
 80099f4:	210a      	movs	r1, #10
 80099f6:	4628      	mov	r0, r5
 80099f8:	f000 f87f 	bl	8009afa <__swbuf_r>
 80099fc:	3001      	adds	r0, #1
 80099fe:	d0d7      	beq.n	80099b0 <_puts_r+0x38>
 8009a00:	250a      	movs	r5, #10
 8009a02:	e7d7      	b.n	80099b4 <_puts_r+0x3c>
 8009a04:	4622      	mov	r2, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f877 	bl	8009afa <__swbuf_r>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d1e7      	bne.n	80099e0 <_puts_r+0x68>
 8009a10:	e7ce      	b.n	80099b0 <_puts_r+0x38>
 8009a12:	3e01      	subs	r6, #1
 8009a14:	e7e4      	b.n	80099e0 <_puts_r+0x68>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	220a      	movs	r2, #10
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	e7ee      	b.n	8009a00 <_puts_r+0x88>
	...

08009a24 <puts>:
 8009a24:	4b02      	ldr	r3, [pc, #8]	@ (8009a30 <puts+0xc>)
 8009a26:	4601      	mov	r1, r0
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	f7ff bfa5 	b.w	8009978 <_puts_r>
 8009a2e:	bf00      	nop
 8009a30:	20000044 	.word	0x20000044

08009a34 <siprintf>:
 8009a34:	b40e      	push	{r1, r2, r3}
 8009a36:	b500      	push	{lr}
 8009a38:	b09c      	sub	sp, #112	@ 0x70
 8009a3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a3c:	9002      	str	r0, [sp, #8]
 8009a3e:	9006      	str	r0, [sp, #24]
 8009a40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a44:	4809      	ldr	r0, [pc, #36]	@ (8009a6c <siprintf+0x38>)
 8009a46:	9107      	str	r1, [sp, #28]
 8009a48:	9104      	str	r1, [sp, #16]
 8009a4a:	4909      	ldr	r1, [pc, #36]	@ (8009a70 <siprintf+0x3c>)
 8009a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a50:	9105      	str	r1, [sp, #20]
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	a902      	add	r1, sp, #8
 8009a58:	f002 fc58 	bl	800c30c <_svfiprintf_r>
 8009a5c:	9b02      	ldr	r3, [sp, #8]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	b01c      	add	sp, #112	@ 0x70
 8009a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a68:	b003      	add	sp, #12
 8009a6a:	4770      	bx	lr
 8009a6c:	20000044 	.word	0x20000044
 8009a70:	ffff0208 	.word	0xffff0208

08009a74 <__sread>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	460c      	mov	r4, r1
 8009a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7c:	f000 f900 	bl	8009c80 <_read_r>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	bfab      	itete	ge
 8009a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a86:	89a3      	ldrhlt	r3, [r4, #12]
 8009a88:	181b      	addge	r3, r3, r0
 8009a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a8e:	bfac      	ite	ge
 8009a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a92:	81a3      	strhlt	r3, [r4, #12]
 8009a94:	bd10      	pop	{r4, pc}

08009a96 <__swrite>:
 8009a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	898b      	ldrh	r3, [r1, #12]
 8009a9e:	05db      	lsls	r3, r3, #23
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	4616      	mov	r6, r2
 8009aa6:	d505      	bpl.n	8009ab4 <__swrite+0x1e>
 8009aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aac:	2302      	movs	r3, #2
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f000 f8d4 	bl	8009c5c <_lseek_r>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aca:	f000 b8eb 	b.w	8009ca4 <_write_r>

08009ace <__sseek>:
 8009ace:	b510      	push	{r4, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad6:	f000 f8c1 	bl	8009c5c <_lseek_r>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	bf15      	itete	ne
 8009ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009aea:	81a3      	strheq	r3, [r4, #12]
 8009aec:	bf18      	it	ne
 8009aee:	81a3      	strhne	r3, [r4, #12]
 8009af0:	bd10      	pop	{r4, pc}

08009af2 <__sclose>:
 8009af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af6:	f000 b8a1 	b.w	8009c3c <_close_r>

08009afa <__swbuf_r>:
 8009afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afc:	460e      	mov	r6, r1
 8009afe:	4614      	mov	r4, r2
 8009b00:	4605      	mov	r5, r0
 8009b02:	b118      	cbz	r0, 8009b0c <__swbuf_r+0x12>
 8009b04:	6a03      	ldr	r3, [r0, #32]
 8009b06:	b90b      	cbnz	r3, 8009b0c <__swbuf_r+0x12>
 8009b08:	f7ff feee 	bl	80098e8 <__sinit>
 8009b0c:	69a3      	ldr	r3, [r4, #24]
 8009b0e:	60a3      	str	r3, [r4, #8]
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	071a      	lsls	r2, r3, #28
 8009b14:	d501      	bpl.n	8009b1a <__swbuf_r+0x20>
 8009b16:	6923      	ldr	r3, [r4, #16]
 8009b18:	b943      	cbnz	r3, 8009b2c <__swbuf_r+0x32>
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	f000 f82b 	bl	8009b78 <__swsetup_r>
 8009b22:	b118      	cbz	r0, 8009b2c <__swbuf_r+0x32>
 8009b24:	f04f 37ff 	mov.w	r7, #4294967295
 8009b28:	4638      	mov	r0, r7
 8009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	6922      	ldr	r2, [r4, #16]
 8009b30:	1a98      	subs	r0, r3, r2
 8009b32:	6963      	ldr	r3, [r4, #20]
 8009b34:	b2f6      	uxtb	r6, r6
 8009b36:	4283      	cmp	r3, r0
 8009b38:	4637      	mov	r7, r6
 8009b3a:	dc05      	bgt.n	8009b48 <__swbuf_r+0x4e>
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4628      	mov	r0, r5
 8009b40:	f002 fea6 	bl	800c890 <_fflush_r>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d1ed      	bne.n	8009b24 <__swbuf_r+0x2a>
 8009b48:	68a3      	ldr	r3, [r4, #8]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	60a3      	str	r3, [r4, #8]
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	6022      	str	r2, [r4, #0]
 8009b54:	701e      	strb	r6, [r3, #0]
 8009b56:	6962      	ldr	r2, [r4, #20]
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d004      	beq.n	8009b68 <__swbuf_r+0x6e>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	07db      	lsls	r3, r3, #31
 8009b62:	d5e1      	bpl.n	8009b28 <__swbuf_r+0x2e>
 8009b64:	2e0a      	cmp	r6, #10
 8009b66:	d1df      	bne.n	8009b28 <__swbuf_r+0x2e>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f002 fe90 	bl	800c890 <_fflush_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0d9      	beq.n	8009b28 <__swbuf_r+0x2e>
 8009b74:	e7d6      	b.n	8009b24 <__swbuf_r+0x2a>
	...

08009b78 <__swsetup_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4b29      	ldr	r3, [pc, #164]	@ (8009c20 <__swsetup_r+0xa8>)
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	460c      	mov	r4, r1
 8009b82:	b118      	cbz	r0, 8009b8c <__swsetup_r+0x14>
 8009b84:	6a03      	ldr	r3, [r0, #32]
 8009b86:	b90b      	cbnz	r3, 8009b8c <__swsetup_r+0x14>
 8009b88:	f7ff feae 	bl	80098e8 <__sinit>
 8009b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b90:	0719      	lsls	r1, r3, #28
 8009b92:	d422      	bmi.n	8009bda <__swsetup_r+0x62>
 8009b94:	06da      	lsls	r2, r3, #27
 8009b96:	d407      	bmi.n	8009ba8 <__swsetup_r+0x30>
 8009b98:	2209      	movs	r2, #9
 8009b9a:	602a      	str	r2, [r5, #0]
 8009b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ba0:	81a3      	strh	r3, [r4, #12]
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba6:	e033      	b.n	8009c10 <__swsetup_r+0x98>
 8009ba8:	0758      	lsls	r0, r3, #29
 8009baa:	d512      	bpl.n	8009bd2 <__swsetup_r+0x5a>
 8009bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bae:	b141      	cbz	r1, 8009bc2 <__swsetup_r+0x4a>
 8009bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bb4:	4299      	cmp	r1, r3
 8009bb6:	d002      	beq.n	8009bbe <__swsetup_r+0x46>
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 ff15 	bl	800a9e8 <_free_r>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6063      	str	r3, [r4, #4]
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f043 0308 	orr.w	r3, r3, #8
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	b94b      	cbnz	r3, 8009bf2 <__swsetup_r+0x7a>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009be8:	d003      	beq.n	8009bf2 <__swsetup_r+0x7a>
 8009bea:	4621      	mov	r1, r4
 8009bec:	4628      	mov	r0, r5
 8009bee:	f002 fe9d 	bl	800c92c <__smakebuf_r>
 8009bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf6:	f013 0201 	ands.w	r2, r3, #1
 8009bfa:	d00a      	beq.n	8009c12 <__swsetup_r+0x9a>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	60a2      	str	r2, [r4, #8]
 8009c00:	6962      	ldr	r2, [r4, #20]
 8009c02:	4252      	negs	r2, r2
 8009c04:	61a2      	str	r2, [r4, #24]
 8009c06:	6922      	ldr	r2, [r4, #16]
 8009c08:	b942      	cbnz	r2, 8009c1c <__swsetup_r+0xa4>
 8009c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c0e:	d1c5      	bne.n	8009b9c <__swsetup_r+0x24>
 8009c10:	bd38      	pop	{r3, r4, r5, pc}
 8009c12:	0799      	lsls	r1, r3, #30
 8009c14:	bf58      	it	pl
 8009c16:	6962      	ldrpl	r2, [r4, #20]
 8009c18:	60a2      	str	r2, [r4, #8]
 8009c1a:	e7f4      	b.n	8009c06 <__swsetup_r+0x8e>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7f7      	b.n	8009c10 <__swsetup_r+0x98>
 8009c20:	20000044 	.word	0x20000044

08009c24 <memset>:
 8009c24:	4402      	add	r2, r0
 8009c26:	4603      	mov	r3, r0
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d100      	bne.n	8009c2e <memset+0xa>
 8009c2c:	4770      	bx	lr
 8009c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c32:	e7f9      	b.n	8009c28 <memset+0x4>

08009c34 <_localeconv_r>:
 8009c34:	4800      	ldr	r0, [pc, #0]	@ (8009c38 <_localeconv_r+0x4>)
 8009c36:	4770      	bx	lr
 8009c38:	20000184 	.word	0x20000184

08009c3c <_close_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d06      	ldr	r5, [pc, #24]	@ (8009c58 <_close_r+0x1c>)
 8009c40:	2300      	movs	r3, #0
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	602b      	str	r3, [r5, #0]
 8009c48:	f7f9 fec6 	bl	80039d8 <_close>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_close_r+0x1a>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_close_r+0x1a>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	20000814 	.word	0x20000814

08009c5c <_lseek_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d07      	ldr	r5, [pc, #28]	@ (8009c7c <_lseek_r+0x20>)
 8009c60:	4604      	mov	r4, r0
 8009c62:	4608      	mov	r0, r1
 8009c64:	4611      	mov	r1, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	602a      	str	r2, [r5, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f7f9 fedb 	bl	8003a26 <_lseek>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_lseek_r+0x1e>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_lseek_r+0x1e>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20000814 	.word	0x20000814

08009c80 <_read_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	@ (8009ca0 <_read_r+0x20>)
 8009c84:	4604      	mov	r4, r0
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f7f9 fe85 	bl	800399e <_read>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_read_r+0x1e>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_read_r+0x1e>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20000814 	.word	0x20000814

08009ca4 <_write_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d07      	ldr	r5, [pc, #28]	@ (8009cc4 <_write_r+0x20>)
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4608      	mov	r0, r1
 8009cac:	4611      	mov	r1, r2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f7f9 fa98 	bl	80031e8 <_write>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_write_r+0x1e>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_write_r+0x1e>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20000814 	.word	0x20000814

08009cc8 <__errno>:
 8009cc8:	4b01      	ldr	r3, [pc, #4]	@ (8009cd0 <__errno+0x8>)
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	20000044 	.word	0x20000044

08009cd4 <__libc_init_array>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8009d0c <__libc_init_array+0x38>)
 8009cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8009d10 <__libc_init_array+0x3c>)
 8009cda:	1b64      	subs	r4, r4, r5
 8009cdc:	10a4      	asrs	r4, r4, #2
 8009cde:	2600      	movs	r6, #0
 8009ce0:	42a6      	cmp	r6, r4
 8009ce2:	d109      	bne.n	8009cf8 <__libc_init_array+0x24>
 8009ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8009d14 <__libc_init_array+0x40>)
 8009ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8009d18 <__libc_init_array+0x44>)
 8009ce8:	f003 fd4a 	bl	800d780 <_init>
 8009cec:	1b64      	subs	r4, r4, r5
 8009cee:	10a4      	asrs	r4, r4, #2
 8009cf0:	2600      	movs	r6, #0
 8009cf2:	42a6      	cmp	r6, r4
 8009cf4:	d105      	bne.n	8009d02 <__libc_init_array+0x2e>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfc:	4798      	blx	r3
 8009cfe:	3601      	adds	r6, #1
 8009d00:	e7ee      	b.n	8009ce0 <__libc_init_array+0xc>
 8009d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d06:	4798      	blx	r3
 8009d08:	3601      	adds	r6, #1
 8009d0a:	e7f2      	b.n	8009cf2 <__libc_init_array+0x1e>
 8009d0c:	0800df08 	.word	0x0800df08
 8009d10:	0800df08 	.word	0x0800df08
 8009d14:	0800df08 	.word	0x0800df08
 8009d18:	0800df0c 	.word	0x0800df0c

08009d1c <__retarget_lock_init_recursive>:
 8009d1c:	4770      	bx	lr

08009d1e <__retarget_lock_acquire_recursive>:
 8009d1e:	4770      	bx	lr

08009d20 <__retarget_lock_release_recursive>:
 8009d20:	4770      	bx	lr

08009d22 <memcpy>:
 8009d22:	440a      	add	r2, r1
 8009d24:	4291      	cmp	r1, r2
 8009d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d2a:	d100      	bne.n	8009d2e <memcpy+0xc>
 8009d2c:	4770      	bx	lr
 8009d2e:	b510      	push	{r4, lr}
 8009d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d38:	4291      	cmp	r1, r2
 8009d3a:	d1f9      	bne.n	8009d30 <memcpy+0xe>
 8009d3c:	bd10      	pop	{r4, pc}
	...

08009d40 <nanf>:
 8009d40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009d48 <nanf+0x8>
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	7fc00000 	.word	0x7fc00000

08009d4c <quorem>:
 8009d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	6903      	ldr	r3, [r0, #16]
 8009d52:	690c      	ldr	r4, [r1, #16]
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	4607      	mov	r7, r0
 8009d58:	db7e      	blt.n	8009e58 <quorem+0x10c>
 8009d5a:	3c01      	subs	r4, #1
 8009d5c:	f101 0814 	add.w	r8, r1, #20
 8009d60:	00a3      	lsls	r3, r4, #2
 8009d62:	f100 0514 	add.w	r5, r0, #20
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d76:	3301      	adds	r3, #1
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d82:	d32e      	bcc.n	8009de2 <quorem+0x96>
 8009d84:	f04f 0a00 	mov.w	sl, #0
 8009d88:	46c4      	mov	ip, r8
 8009d8a:	46ae      	mov	lr, r5
 8009d8c:	46d3      	mov	fp, sl
 8009d8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d92:	b298      	uxth	r0, r3
 8009d94:	fb06 a000 	mla	r0, r6, r0, sl
 8009d98:	0c02      	lsrs	r2, r0, #16
 8009d9a:	0c1b      	lsrs	r3, r3, #16
 8009d9c:	fb06 2303 	mla	r3, r6, r3, r2
 8009da0:	f8de 2000 	ldr.w	r2, [lr]
 8009da4:	b280      	uxth	r0, r0
 8009da6:	b292      	uxth	r2, r2
 8009da8:	1a12      	subs	r2, r2, r0
 8009daa:	445a      	add	r2, fp
 8009dac:	f8de 0000 	ldr.w	r0, [lr]
 8009db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009dba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009dbe:	b292      	uxth	r2, r2
 8009dc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009dc4:	45e1      	cmp	r9, ip
 8009dc6:	f84e 2b04 	str.w	r2, [lr], #4
 8009dca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009dce:	d2de      	bcs.n	8009d8e <quorem+0x42>
 8009dd0:	9b00      	ldr	r3, [sp, #0]
 8009dd2:	58eb      	ldr	r3, [r5, r3]
 8009dd4:	b92b      	cbnz	r3, 8009de2 <quorem+0x96>
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	3b04      	subs	r3, #4
 8009dda:	429d      	cmp	r5, r3
 8009ddc:	461a      	mov	r2, r3
 8009dde:	d32f      	bcc.n	8009e40 <quorem+0xf4>
 8009de0:	613c      	str	r4, [r7, #16]
 8009de2:	4638      	mov	r0, r7
 8009de4:	f001 f9c4 	bl	800b170 <__mcmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	db25      	blt.n	8009e38 <quorem+0xec>
 8009dec:	4629      	mov	r1, r5
 8009dee:	2000      	movs	r0, #0
 8009df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009df4:	f8d1 c000 	ldr.w	ip, [r1]
 8009df8:	fa1f fe82 	uxth.w	lr, r2
 8009dfc:	fa1f f38c 	uxth.w	r3, ip
 8009e00:	eba3 030e 	sub.w	r3, r3, lr
 8009e04:	4403      	add	r3, r0
 8009e06:	0c12      	lsrs	r2, r2, #16
 8009e08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e16:	45c1      	cmp	r9, r8
 8009e18:	f841 3b04 	str.w	r3, [r1], #4
 8009e1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e20:	d2e6      	bcs.n	8009df0 <quorem+0xa4>
 8009e22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e2a:	b922      	cbnz	r2, 8009e36 <quorem+0xea>
 8009e2c:	3b04      	subs	r3, #4
 8009e2e:	429d      	cmp	r5, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	d30b      	bcc.n	8009e4c <quorem+0x100>
 8009e34:	613c      	str	r4, [r7, #16]
 8009e36:	3601      	adds	r6, #1
 8009e38:	4630      	mov	r0, r6
 8009e3a:	b003      	add	sp, #12
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e40:	6812      	ldr	r2, [r2, #0]
 8009e42:	3b04      	subs	r3, #4
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d1cb      	bne.n	8009de0 <quorem+0x94>
 8009e48:	3c01      	subs	r4, #1
 8009e4a:	e7c6      	b.n	8009dda <quorem+0x8e>
 8009e4c:	6812      	ldr	r2, [r2, #0]
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	2a00      	cmp	r2, #0
 8009e52:	d1ef      	bne.n	8009e34 <quorem+0xe8>
 8009e54:	3c01      	subs	r4, #1
 8009e56:	e7ea      	b.n	8009e2e <quorem+0xe2>
 8009e58:	2000      	movs	r0, #0
 8009e5a:	e7ee      	b.n	8009e3a <quorem+0xee>
 8009e5c:	0000      	movs	r0, r0
	...

08009e60 <_dtoa_r>:
 8009e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	69c7      	ldr	r7, [r0, #28]
 8009e66:	b099      	sub	sp, #100	@ 0x64
 8009e68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e6c:	ec55 4b10 	vmov	r4, r5, d0
 8009e70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e72:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e74:	4683      	mov	fp, r0
 8009e76:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e7a:	b97f      	cbnz	r7, 8009e9c <_dtoa_r+0x3c>
 8009e7c:	2010      	movs	r0, #16
 8009e7e:	f000 fdfd 	bl	800aa7c <malloc>
 8009e82:	4602      	mov	r2, r0
 8009e84:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e88:	b920      	cbnz	r0, 8009e94 <_dtoa_r+0x34>
 8009e8a:	4ba7      	ldr	r3, [pc, #668]	@ (800a128 <_dtoa_r+0x2c8>)
 8009e8c:	21ef      	movs	r1, #239	@ 0xef
 8009e8e:	48a7      	ldr	r0, [pc, #668]	@ (800a12c <_dtoa_r+0x2cc>)
 8009e90:	f002 fdee 	bl	800ca70 <__assert_func>
 8009e94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e98:	6007      	str	r7, [r0, #0]
 8009e9a:	60c7      	str	r7, [r0, #12]
 8009e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ea0:	6819      	ldr	r1, [r3, #0]
 8009ea2:	b159      	cbz	r1, 8009ebc <_dtoa_r+0x5c>
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	604a      	str	r2, [r1, #4]
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	4093      	lsls	r3, r2
 8009eac:	608b      	str	r3, [r1, #8]
 8009eae:	4658      	mov	r0, fp
 8009eb0:	f000 feda 	bl	800ac68 <_Bfree>
 8009eb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	1e2b      	subs	r3, r5, #0
 8009ebe:	bfb9      	ittee	lt
 8009ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ec4:	9303      	strlt	r3, [sp, #12]
 8009ec6:	2300      	movge	r3, #0
 8009ec8:	6033      	strge	r3, [r6, #0]
 8009eca:	9f03      	ldr	r7, [sp, #12]
 8009ecc:	4b98      	ldr	r3, [pc, #608]	@ (800a130 <_dtoa_r+0x2d0>)
 8009ece:	bfbc      	itt	lt
 8009ed0:	2201      	movlt	r2, #1
 8009ed2:	6032      	strlt	r2, [r6, #0]
 8009ed4:	43bb      	bics	r3, r7
 8009ed6:	d112      	bne.n	8009efe <_dtoa_r+0x9e>
 8009ed8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009eda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ee4:	4323      	orrs	r3, r4
 8009ee6:	f000 854d 	beq.w	800a984 <_dtoa_r+0xb24>
 8009eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a144 <_dtoa_r+0x2e4>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 854f 	beq.w	800a994 <_dtoa_r+0xb34>
 8009ef6:	f10a 0303 	add.w	r3, sl, #3
 8009efa:	f000 bd49 	b.w	800a990 <_dtoa_r+0xb30>
 8009efe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f02:	2200      	movs	r2, #0
 8009f04:	ec51 0b17 	vmov	r0, r1, d7
 8009f08:	2300      	movs	r3, #0
 8009f0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f0e:	f7f6 fdfb 	bl	8000b08 <__aeabi_dcmpeq>
 8009f12:	4680      	mov	r8, r0
 8009f14:	b158      	cbz	r0, 8009f2e <_dtoa_r+0xce>
 8009f16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f18:	2301      	movs	r3, #1
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f1e:	b113      	cbz	r3, 8009f26 <_dtoa_r+0xc6>
 8009f20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f22:	4b84      	ldr	r3, [pc, #528]	@ (800a134 <_dtoa_r+0x2d4>)
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a148 <_dtoa_r+0x2e8>
 8009f2a:	f000 bd33 	b.w	800a994 <_dtoa_r+0xb34>
 8009f2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f32:	aa16      	add	r2, sp, #88	@ 0x58
 8009f34:	a917      	add	r1, sp, #92	@ 0x5c
 8009f36:	4658      	mov	r0, fp
 8009f38:	f001 fa3a 	bl	800b3b0 <__d2b>
 8009f3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f40:	4681      	mov	r9, r0
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d077      	beq.n	800a036 <_dtoa_r+0x1d6>
 8009f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f60:	4619      	mov	r1, r3
 8009f62:	2200      	movs	r2, #0
 8009f64:	4b74      	ldr	r3, [pc, #464]	@ (800a138 <_dtoa_r+0x2d8>)
 8009f66:	f7f6 f9af 	bl	80002c8 <__aeabi_dsub>
 8009f6a:	a369      	add	r3, pc, #420	@ (adr r3, 800a110 <_dtoa_r+0x2b0>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 fb62 	bl	8000638 <__aeabi_dmul>
 8009f74:	a368      	add	r3, pc, #416	@ (adr r3, 800a118 <_dtoa_r+0x2b8>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f9a7 	bl	80002cc <__adddf3>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4630      	mov	r0, r6
 8009f82:	460d      	mov	r5, r1
 8009f84:	f7f6 faee 	bl	8000564 <__aeabi_i2d>
 8009f88:	a365      	add	r3, pc, #404	@ (adr r3, 800a120 <_dtoa_r+0x2c0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 fb53 	bl	8000638 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 f997 	bl	80002cc <__adddf3>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	f7f6 fdf9 	bl	8000b98 <__aeabi_d2iz>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4607      	mov	r7, r0
 8009faa:	2300      	movs	r3, #0
 8009fac:	4620      	mov	r0, r4
 8009fae:	4629      	mov	r1, r5
 8009fb0:	f7f6 fdb4 	bl	8000b1c <__aeabi_dcmplt>
 8009fb4:	b140      	cbz	r0, 8009fc8 <_dtoa_r+0x168>
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7f6 fad4 	bl	8000564 <__aeabi_i2d>
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	f7f6 fda2 	bl	8000b08 <__aeabi_dcmpeq>
 8009fc4:	b900      	cbnz	r0, 8009fc8 <_dtoa_r+0x168>
 8009fc6:	3f01      	subs	r7, #1
 8009fc8:	2f16      	cmp	r7, #22
 8009fca:	d851      	bhi.n	800a070 <_dtoa_r+0x210>
 8009fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800a13c <_dtoa_r+0x2dc>)
 8009fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fda:	f7f6 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d048      	beq.n	800a074 <_dtoa_r+0x214>
 8009fe2:	3f01      	subs	r7, #1
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009fe8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009fea:	1b9b      	subs	r3, r3, r6
 8009fec:	1e5a      	subs	r2, r3, #1
 8009fee:	bf44      	itt	mi
 8009ff0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ff4:	2300      	movmi	r3, #0
 8009ff6:	9208      	str	r2, [sp, #32]
 8009ff8:	bf54      	ite	pl
 8009ffa:	f04f 0800 	movpl.w	r8, #0
 8009ffe:	9308      	strmi	r3, [sp, #32]
 800a000:	2f00      	cmp	r7, #0
 800a002:	db39      	blt.n	800a078 <_dtoa_r+0x218>
 800a004:	9b08      	ldr	r3, [sp, #32]
 800a006:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a008:	443b      	add	r3, r7
 800a00a:	9308      	str	r3, [sp, #32]
 800a00c:	2300      	movs	r3, #0
 800a00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a012:	2b09      	cmp	r3, #9
 800a014:	d864      	bhi.n	800a0e0 <_dtoa_r+0x280>
 800a016:	2b05      	cmp	r3, #5
 800a018:	bfc4      	itt	gt
 800a01a:	3b04      	subgt	r3, #4
 800a01c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a020:	f1a3 0302 	sub.w	r3, r3, #2
 800a024:	bfcc      	ite	gt
 800a026:	2400      	movgt	r4, #0
 800a028:	2401      	movle	r4, #1
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d863      	bhi.n	800a0f6 <_dtoa_r+0x296>
 800a02e:	e8df f003 	tbb	[pc, r3]
 800a032:	372a      	.short	0x372a
 800a034:	5535      	.short	0x5535
 800a036:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a03a:	441e      	add	r6, r3
 800a03c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a040:	2b20      	cmp	r3, #32
 800a042:	bfc1      	itttt	gt
 800a044:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a048:	409f      	lslgt	r7, r3
 800a04a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a04e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a052:	bfd6      	itet	le
 800a054:	f1c3 0320 	rsble	r3, r3, #32
 800a058:	ea47 0003 	orrgt.w	r0, r7, r3
 800a05c:	fa04 f003 	lslle.w	r0, r4, r3
 800a060:	f7f6 fa70 	bl	8000544 <__aeabi_ui2d>
 800a064:	2201      	movs	r2, #1
 800a066:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a06a:	3e01      	subs	r6, #1
 800a06c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a06e:	e777      	b.n	8009f60 <_dtoa_r+0x100>
 800a070:	2301      	movs	r3, #1
 800a072:	e7b8      	b.n	8009fe6 <_dtoa_r+0x186>
 800a074:	9012      	str	r0, [sp, #72]	@ 0x48
 800a076:	e7b7      	b.n	8009fe8 <_dtoa_r+0x188>
 800a078:	427b      	negs	r3, r7
 800a07a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a07c:	2300      	movs	r3, #0
 800a07e:	eba8 0807 	sub.w	r8, r8, r7
 800a082:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a084:	e7c4      	b.n	800a010 <_dtoa_r+0x1b0>
 800a086:	2300      	movs	r3, #0
 800a088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a08a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dc35      	bgt.n	800a0fc <_dtoa_r+0x29c>
 800a090:	2301      	movs	r3, #1
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	9307      	str	r3, [sp, #28]
 800a096:	461a      	mov	r2, r3
 800a098:	920e      	str	r2, [sp, #56]	@ 0x38
 800a09a:	e00b      	b.n	800a0b4 <_dtoa_r+0x254>
 800a09c:	2301      	movs	r3, #1
 800a09e:	e7f3      	b.n	800a088 <_dtoa_r+0x228>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a6:	18fb      	adds	r3, r7, r3
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	9307      	str	r3, [sp, #28]
 800a0b0:	bfb8      	it	lt
 800a0b2:	2301      	movlt	r3, #1
 800a0b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	2204      	movs	r2, #4
 800a0bc:	f102 0514 	add.w	r5, r2, #20
 800a0c0:	429d      	cmp	r5, r3
 800a0c2:	d91f      	bls.n	800a104 <_dtoa_r+0x2a4>
 800a0c4:	6041      	str	r1, [r0, #4]
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f000 fd8e 	bl	800abe8 <_Balloc>
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d13c      	bne.n	800a14c <_dtoa_r+0x2ec>
 800a0d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a140 <_dtoa_r+0x2e0>)
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0da:	e6d8      	b.n	8009e8e <_dtoa_r+0x2e>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e7e0      	b.n	800a0a2 <_dtoa_r+0x242>
 800a0e0:	2401      	movs	r4, #1
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	9307      	str	r3, [sp, #28]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2312      	movs	r3, #18
 800a0f4:	e7d0      	b.n	800a098 <_dtoa_r+0x238>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0fa:	e7f5      	b.n	800a0e8 <_dtoa_r+0x288>
 800a0fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	9307      	str	r3, [sp, #28]
 800a102:	e7d7      	b.n	800a0b4 <_dtoa_r+0x254>
 800a104:	3101      	adds	r1, #1
 800a106:	0052      	lsls	r2, r2, #1
 800a108:	e7d8      	b.n	800a0bc <_dtoa_r+0x25c>
 800a10a:	bf00      	nop
 800a10c:	f3af 8000 	nop.w
 800a110:	636f4361 	.word	0x636f4361
 800a114:	3fd287a7 	.word	0x3fd287a7
 800a118:	8b60c8b3 	.word	0x8b60c8b3
 800a11c:	3fc68a28 	.word	0x3fc68a28
 800a120:	509f79fb 	.word	0x509f79fb
 800a124:	3fd34413 	.word	0x3fd34413
 800a128:	0800daaa 	.word	0x0800daaa
 800a12c:	0800dac1 	.word	0x0800dac1
 800a130:	7ff00000 	.word	0x7ff00000
 800a134:	0800da75 	.word	0x0800da75
 800a138:	3ff80000 	.word	0x3ff80000
 800a13c:	0800dbb8 	.word	0x0800dbb8
 800a140:	0800db19 	.word	0x0800db19
 800a144:	0800daa6 	.word	0x0800daa6
 800a148:	0800da74 	.word	0x0800da74
 800a14c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a150:	6018      	str	r0, [r3, #0]
 800a152:	9b07      	ldr	r3, [sp, #28]
 800a154:	2b0e      	cmp	r3, #14
 800a156:	f200 80a4 	bhi.w	800a2a2 <_dtoa_r+0x442>
 800a15a:	2c00      	cmp	r4, #0
 800a15c:	f000 80a1 	beq.w	800a2a2 <_dtoa_r+0x442>
 800a160:	2f00      	cmp	r7, #0
 800a162:	dd33      	ble.n	800a1cc <_dtoa_r+0x36c>
 800a164:	4bad      	ldr	r3, [pc, #692]	@ (800a41c <_dtoa_r+0x5bc>)
 800a166:	f007 020f 	and.w	r2, r7, #15
 800a16a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a16e:	ed93 7b00 	vldr	d7, [r3]
 800a172:	05f8      	lsls	r0, r7, #23
 800a174:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a178:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a17c:	d516      	bpl.n	800a1ac <_dtoa_r+0x34c>
 800a17e:	4ba8      	ldr	r3, [pc, #672]	@ (800a420 <_dtoa_r+0x5c0>)
 800a180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a184:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a188:	f7f6 fb80 	bl	800088c <__aeabi_ddiv>
 800a18c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a190:	f004 040f 	and.w	r4, r4, #15
 800a194:	2603      	movs	r6, #3
 800a196:	4da2      	ldr	r5, [pc, #648]	@ (800a420 <_dtoa_r+0x5c0>)
 800a198:	b954      	cbnz	r4, 800a1b0 <_dtoa_r+0x350>
 800a19a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a2:	f7f6 fb73 	bl	800088c <__aeabi_ddiv>
 800a1a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1aa:	e028      	b.n	800a1fe <_dtoa_r+0x39e>
 800a1ac:	2602      	movs	r6, #2
 800a1ae:	e7f2      	b.n	800a196 <_dtoa_r+0x336>
 800a1b0:	07e1      	lsls	r1, r4, #31
 800a1b2:	d508      	bpl.n	800a1c6 <_dtoa_r+0x366>
 800a1b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1bc:	f7f6 fa3c 	bl	8000638 <__aeabi_dmul>
 800a1c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1c4:	3601      	adds	r6, #1
 800a1c6:	1064      	asrs	r4, r4, #1
 800a1c8:	3508      	adds	r5, #8
 800a1ca:	e7e5      	b.n	800a198 <_dtoa_r+0x338>
 800a1cc:	f000 80d2 	beq.w	800a374 <_dtoa_r+0x514>
 800a1d0:	427c      	negs	r4, r7
 800a1d2:	4b92      	ldr	r3, [pc, #584]	@ (800a41c <_dtoa_r+0x5bc>)
 800a1d4:	4d92      	ldr	r5, [pc, #584]	@ (800a420 <_dtoa_r+0x5c0>)
 800a1d6:	f004 020f 	and.w	r2, r4, #15
 800a1da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1e6:	f7f6 fa27 	bl	8000638 <__aeabi_dmul>
 800a1ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ee:	1124      	asrs	r4, r4, #4
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2602      	movs	r6, #2
 800a1f4:	2c00      	cmp	r4, #0
 800a1f6:	f040 80b2 	bne.w	800a35e <_dtoa_r+0x4fe>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1d3      	bne.n	800a1a6 <_dtoa_r+0x346>
 800a1fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a200:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 80b7 	beq.w	800a378 <_dtoa_r+0x518>
 800a20a:	4b86      	ldr	r3, [pc, #536]	@ (800a424 <_dtoa_r+0x5c4>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	4620      	mov	r0, r4
 800a210:	4629      	mov	r1, r5
 800a212:	f7f6 fc83 	bl	8000b1c <__aeabi_dcmplt>
 800a216:	2800      	cmp	r0, #0
 800a218:	f000 80ae 	beq.w	800a378 <_dtoa_r+0x518>
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 80aa 	beq.w	800a378 <_dtoa_r+0x518>
 800a224:	9b00      	ldr	r3, [sp, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	dd37      	ble.n	800a29a <_dtoa_r+0x43a>
 800a22a:	1e7b      	subs	r3, r7, #1
 800a22c:	9304      	str	r3, [sp, #16]
 800a22e:	4620      	mov	r0, r4
 800a230:	4b7d      	ldr	r3, [pc, #500]	@ (800a428 <_dtoa_r+0x5c8>)
 800a232:	2200      	movs	r2, #0
 800a234:	4629      	mov	r1, r5
 800a236:	f7f6 f9ff 	bl	8000638 <__aeabi_dmul>
 800a23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a23e:	9c00      	ldr	r4, [sp, #0]
 800a240:	3601      	adds	r6, #1
 800a242:	4630      	mov	r0, r6
 800a244:	f7f6 f98e 	bl	8000564 <__aeabi_i2d>
 800a248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a24c:	f7f6 f9f4 	bl	8000638 <__aeabi_dmul>
 800a250:	4b76      	ldr	r3, [pc, #472]	@ (800a42c <_dtoa_r+0x5cc>)
 800a252:	2200      	movs	r2, #0
 800a254:	f7f6 f83a 	bl	80002cc <__adddf3>
 800a258:	4605      	mov	r5, r0
 800a25a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a25e:	2c00      	cmp	r4, #0
 800a260:	f040 808d 	bne.w	800a37e <_dtoa_r+0x51e>
 800a264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a268:	4b71      	ldr	r3, [pc, #452]	@ (800a430 <_dtoa_r+0x5d0>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	f7f6 f82c 	bl	80002c8 <__aeabi_dsub>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a278:	462a      	mov	r2, r5
 800a27a:	4633      	mov	r3, r6
 800a27c:	f7f6 fc6c 	bl	8000b58 <__aeabi_dcmpgt>
 800a280:	2800      	cmp	r0, #0
 800a282:	f040 828b 	bne.w	800a79c <_dtoa_r+0x93c>
 800a286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a28a:	462a      	mov	r2, r5
 800a28c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a290:	f7f6 fc44 	bl	8000b1c <__aeabi_dcmplt>
 800a294:	2800      	cmp	r0, #0
 800a296:	f040 8128 	bne.w	800a4ea <_dtoa_r+0x68a>
 800a29a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a29e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f2c0 815a 	blt.w	800a55e <_dtoa_r+0x6fe>
 800a2aa:	2f0e      	cmp	r7, #14
 800a2ac:	f300 8157 	bgt.w	800a55e <_dtoa_r+0x6fe>
 800a2b0:	4b5a      	ldr	r3, [pc, #360]	@ (800a41c <_dtoa_r+0x5bc>)
 800a2b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2b6:	ed93 7b00 	vldr	d7, [r3]
 800a2ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	ed8d 7b00 	vstr	d7, [sp]
 800a2c2:	da03      	bge.n	800a2cc <_dtoa_r+0x46c>
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f340 8101 	ble.w	800a4ce <_dtoa_r+0x66e>
 800a2cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2d0:	4656      	mov	r6, sl
 800a2d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f6 fad7 	bl	800088c <__aeabi_ddiv>
 800a2de:	f7f6 fc5b 	bl	8000b98 <__aeabi_d2iz>
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	f7f6 f93e 	bl	8000564 <__aeabi_i2d>
 800a2e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ec:	f7f6 f9a4 	bl	8000638 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2fc:	f7f5 ffe4 	bl	80002c8 <__aeabi_dsub>
 800a300:	f806 4b01 	strb.w	r4, [r6], #1
 800a304:	9d07      	ldr	r5, [sp, #28]
 800a306:	eba6 040a 	sub.w	r4, r6, sl
 800a30a:	42a5      	cmp	r5, r4
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	f040 8117 	bne.w	800a542 <_dtoa_r+0x6e2>
 800a314:	f7f5 ffda 	bl	80002cc <__adddf3>
 800a318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a31c:	4604      	mov	r4, r0
 800a31e:	460d      	mov	r5, r1
 800a320:	f7f6 fc1a 	bl	8000b58 <__aeabi_dcmpgt>
 800a324:	2800      	cmp	r0, #0
 800a326:	f040 80f9 	bne.w	800a51c <_dtoa_r+0x6bc>
 800a32a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	f7f6 fbe9 	bl	8000b08 <__aeabi_dcmpeq>
 800a336:	b118      	cbz	r0, 800a340 <_dtoa_r+0x4e0>
 800a338:	f018 0f01 	tst.w	r8, #1
 800a33c:	f040 80ee 	bne.w	800a51c <_dtoa_r+0x6bc>
 800a340:	4649      	mov	r1, r9
 800a342:	4658      	mov	r0, fp
 800a344:	f000 fc90 	bl	800ac68 <_Bfree>
 800a348:	2300      	movs	r3, #0
 800a34a:	7033      	strb	r3, [r6, #0]
 800a34c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a34e:	3701      	adds	r7, #1
 800a350:	601f      	str	r7, [r3, #0]
 800a352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 831d 	beq.w	800a994 <_dtoa_r+0xb34>
 800a35a:	601e      	str	r6, [r3, #0]
 800a35c:	e31a      	b.n	800a994 <_dtoa_r+0xb34>
 800a35e:	07e2      	lsls	r2, r4, #31
 800a360:	d505      	bpl.n	800a36e <_dtoa_r+0x50e>
 800a362:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a366:	f7f6 f967 	bl	8000638 <__aeabi_dmul>
 800a36a:	3601      	adds	r6, #1
 800a36c:	2301      	movs	r3, #1
 800a36e:	1064      	asrs	r4, r4, #1
 800a370:	3508      	adds	r5, #8
 800a372:	e73f      	b.n	800a1f4 <_dtoa_r+0x394>
 800a374:	2602      	movs	r6, #2
 800a376:	e742      	b.n	800a1fe <_dtoa_r+0x39e>
 800a378:	9c07      	ldr	r4, [sp, #28]
 800a37a:	9704      	str	r7, [sp, #16]
 800a37c:	e761      	b.n	800a242 <_dtoa_r+0x3e2>
 800a37e:	4b27      	ldr	r3, [pc, #156]	@ (800a41c <_dtoa_r+0x5bc>)
 800a380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a382:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a386:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a38a:	4454      	add	r4, sl
 800a38c:	2900      	cmp	r1, #0
 800a38e:	d053      	beq.n	800a438 <_dtoa_r+0x5d8>
 800a390:	4928      	ldr	r1, [pc, #160]	@ (800a434 <_dtoa_r+0x5d4>)
 800a392:	2000      	movs	r0, #0
 800a394:	f7f6 fa7a 	bl	800088c <__aeabi_ddiv>
 800a398:	4633      	mov	r3, r6
 800a39a:	462a      	mov	r2, r5
 800a39c:	f7f5 ff94 	bl	80002c8 <__aeabi_dsub>
 800a3a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3a4:	4656      	mov	r6, sl
 800a3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3aa:	f7f6 fbf5 	bl	8000b98 <__aeabi_d2iz>
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	f7f6 f8d8 	bl	8000564 <__aeabi_i2d>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3bc:	f7f5 ff84 	bl	80002c8 <__aeabi_dsub>
 800a3c0:	3530      	adds	r5, #48	@ 0x30
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ca:	f806 5b01 	strb.w	r5, [r6], #1
 800a3ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3d2:	f7f6 fba3 	bl	8000b1c <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d171      	bne.n	800a4be <_dtoa_r+0x65e>
 800a3da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3de:	4911      	ldr	r1, [pc, #68]	@ (800a424 <_dtoa_r+0x5c4>)
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f7f5 ff71 	bl	80002c8 <__aeabi_dsub>
 800a3e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3ea:	f7f6 fb97 	bl	8000b1c <__aeabi_dcmplt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f040 8095 	bne.w	800a51e <_dtoa_r+0x6be>
 800a3f4:	42a6      	cmp	r6, r4
 800a3f6:	f43f af50 	beq.w	800a29a <_dtoa_r+0x43a>
 800a3fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a428 <_dtoa_r+0x5c8>)
 800a400:	2200      	movs	r2, #0
 800a402:	f7f6 f919 	bl	8000638 <__aeabi_dmul>
 800a406:	4b08      	ldr	r3, [pc, #32]	@ (800a428 <_dtoa_r+0x5c8>)
 800a408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a40c:	2200      	movs	r2, #0
 800a40e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a412:	f7f6 f911 	bl	8000638 <__aeabi_dmul>
 800a416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a41a:	e7c4      	b.n	800a3a6 <_dtoa_r+0x546>
 800a41c:	0800dbb8 	.word	0x0800dbb8
 800a420:	0800db90 	.word	0x0800db90
 800a424:	3ff00000 	.word	0x3ff00000
 800a428:	40240000 	.word	0x40240000
 800a42c:	401c0000 	.word	0x401c0000
 800a430:	40140000 	.word	0x40140000
 800a434:	3fe00000 	.word	0x3fe00000
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	f7f6 f8fc 	bl	8000638 <__aeabi_dmul>
 800a440:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a444:	9415      	str	r4, [sp, #84]	@ 0x54
 800a446:	4656      	mov	r6, sl
 800a448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44c:	f7f6 fba4 	bl	8000b98 <__aeabi_d2iz>
 800a450:	4605      	mov	r5, r0
 800a452:	f7f6 f887 	bl	8000564 <__aeabi_i2d>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45e:	f7f5 ff33 	bl	80002c8 <__aeabi_dsub>
 800a462:	3530      	adds	r5, #48	@ 0x30
 800a464:	f806 5b01 	strb.w	r5, [r6], #1
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	42a6      	cmp	r6, r4
 800a46e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a472:	f04f 0200 	mov.w	r2, #0
 800a476:	d124      	bne.n	800a4c2 <_dtoa_r+0x662>
 800a478:	4bac      	ldr	r3, [pc, #688]	@ (800a72c <_dtoa_r+0x8cc>)
 800a47a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a47e:	f7f5 ff25 	bl	80002cc <__adddf3>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a48a:	f7f6 fb65 	bl	8000b58 <__aeabi_dcmpgt>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d145      	bne.n	800a51e <_dtoa_r+0x6be>
 800a492:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a496:	49a5      	ldr	r1, [pc, #660]	@ (800a72c <_dtoa_r+0x8cc>)
 800a498:	2000      	movs	r0, #0
 800a49a:	f7f5 ff15 	bl	80002c8 <__aeabi_dsub>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4a6:	f7f6 fb39 	bl	8000b1c <__aeabi_dcmplt>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f43f aef5 	beq.w	800a29a <_dtoa_r+0x43a>
 800a4b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a4b2:	1e73      	subs	r3, r6, #1
 800a4b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4ba:	2b30      	cmp	r3, #48	@ 0x30
 800a4bc:	d0f8      	beq.n	800a4b0 <_dtoa_r+0x650>
 800a4be:	9f04      	ldr	r7, [sp, #16]
 800a4c0:	e73e      	b.n	800a340 <_dtoa_r+0x4e0>
 800a4c2:	4b9b      	ldr	r3, [pc, #620]	@ (800a730 <_dtoa_r+0x8d0>)
 800a4c4:	f7f6 f8b8 	bl	8000638 <__aeabi_dmul>
 800a4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4cc:	e7bc      	b.n	800a448 <_dtoa_r+0x5e8>
 800a4ce:	d10c      	bne.n	800a4ea <_dtoa_r+0x68a>
 800a4d0:	4b98      	ldr	r3, [pc, #608]	@ (800a734 <_dtoa_r+0x8d4>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4d8:	f7f6 f8ae 	bl	8000638 <__aeabi_dmul>
 800a4dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4e0:	f7f6 fb30 	bl	8000b44 <__aeabi_dcmpge>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f000 8157 	beq.w	800a798 <_dtoa_r+0x938>
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	4625      	mov	r5, r4
 800a4ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f0:	43db      	mvns	r3, r3
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	4656      	mov	r6, sl
 800a4f6:	2700      	movs	r7, #0
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4658      	mov	r0, fp
 800a4fc:	f000 fbb4 	bl	800ac68 <_Bfree>
 800a500:	2d00      	cmp	r5, #0
 800a502:	d0dc      	beq.n	800a4be <_dtoa_r+0x65e>
 800a504:	b12f      	cbz	r7, 800a512 <_dtoa_r+0x6b2>
 800a506:	42af      	cmp	r7, r5
 800a508:	d003      	beq.n	800a512 <_dtoa_r+0x6b2>
 800a50a:	4639      	mov	r1, r7
 800a50c:	4658      	mov	r0, fp
 800a50e:	f000 fbab 	bl	800ac68 <_Bfree>
 800a512:	4629      	mov	r1, r5
 800a514:	4658      	mov	r0, fp
 800a516:	f000 fba7 	bl	800ac68 <_Bfree>
 800a51a:	e7d0      	b.n	800a4be <_dtoa_r+0x65e>
 800a51c:	9704      	str	r7, [sp, #16]
 800a51e:	4633      	mov	r3, r6
 800a520:	461e      	mov	r6, r3
 800a522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a526:	2a39      	cmp	r2, #57	@ 0x39
 800a528:	d107      	bne.n	800a53a <_dtoa_r+0x6da>
 800a52a:	459a      	cmp	sl, r3
 800a52c:	d1f8      	bne.n	800a520 <_dtoa_r+0x6c0>
 800a52e:	9a04      	ldr	r2, [sp, #16]
 800a530:	3201      	adds	r2, #1
 800a532:	9204      	str	r2, [sp, #16]
 800a534:	2230      	movs	r2, #48	@ 0x30
 800a536:	f88a 2000 	strb.w	r2, [sl]
 800a53a:	781a      	ldrb	r2, [r3, #0]
 800a53c:	3201      	adds	r2, #1
 800a53e:	701a      	strb	r2, [r3, #0]
 800a540:	e7bd      	b.n	800a4be <_dtoa_r+0x65e>
 800a542:	4b7b      	ldr	r3, [pc, #492]	@ (800a730 <_dtoa_r+0x8d0>)
 800a544:	2200      	movs	r2, #0
 800a546:	f7f6 f877 	bl	8000638 <__aeabi_dmul>
 800a54a:	2200      	movs	r2, #0
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	460d      	mov	r5, r1
 800a552:	f7f6 fad9 	bl	8000b08 <__aeabi_dcmpeq>
 800a556:	2800      	cmp	r0, #0
 800a558:	f43f aebb 	beq.w	800a2d2 <_dtoa_r+0x472>
 800a55c:	e6f0      	b.n	800a340 <_dtoa_r+0x4e0>
 800a55e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a560:	2a00      	cmp	r2, #0
 800a562:	f000 80db 	beq.w	800a71c <_dtoa_r+0x8bc>
 800a566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a568:	2a01      	cmp	r2, #1
 800a56a:	f300 80bf 	bgt.w	800a6ec <_dtoa_r+0x88c>
 800a56e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a570:	2a00      	cmp	r2, #0
 800a572:	f000 80b7 	beq.w	800a6e4 <_dtoa_r+0x884>
 800a576:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a57a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a57c:	4646      	mov	r6, r8
 800a57e:	9a08      	ldr	r2, [sp, #32]
 800a580:	2101      	movs	r1, #1
 800a582:	441a      	add	r2, r3
 800a584:	4658      	mov	r0, fp
 800a586:	4498      	add	r8, r3
 800a588:	9208      	str	r2, [sp, #32]
 800a58a:	f000 fc6b 	bl	800ae64 <__i2b>
 800a58e:	4605      	mov	r5, r0
 800a590:	b15e      	cbz	r6, 800a5aa <_dtoa_r+0x74a>
 800a592:	9b08      	ldr	r3, [sp, #32]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd08      	ble.n	800a5aa <_dtoa_r+0x74a>
 800a598:	42b3      	cmp	r3, r6
 800a59a:	9a08      	ldr	r2, [sp, #32]
 800a59c:	bfa8      	it	ge
 800a59e:	4633      	movge	r3, r6
 800a5a0:	eba8 0803 	sub.w	r8, r8, r3
 800a5a4:	1af6      	subs	r6, r6, r3
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ac:	b1f3      	cbz	r3, 800a5ec <_dtoa_r+0x78c>
 800a5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80b7 	beq.w	800a724 <_dtoa_r+0x8c4>
 800a5b6:	b18c      	cbz	r4, 800a5dc <_dtoa_r+0x77c>
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	4658      	mov	r0, fp
 800a5be:	f000 fd11 	bl	800afe4 <__pow5mult>
 800a5c2:	464a      	mov	r2, r9
 800a5c4:	4601      	mov	r1, r0
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	4658      	mov	r0, fp
 800a5ca:	f000 fc61 	bl	800ae90 <__multiply>
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	9004      	str	r0, [sp, #16]
 800a5d2:	4658      	mov	r0, fp
 800a5d4:	f000 fb48 	bl	800ac68 <_Bfree>
 800a5d8:	9b04      	ldr	r3, [sp, #16]
 800a5da:	4699      	mov	r9, r3
 800a5dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5de:	1b1a      	subs	r2, r3, r4
 800a5e0:	d004      	beq.n	800a5ec <_dtoa_r+0x78c>
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	4658      	mov	r0, fp
 800a5e6:	f000 fcfd 	bl	800afe4 <__pow5mult>
 800a5ea:	4681      	mov	r9, r0
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	4658      	mov	r0, fp
 800a5f0:	f000 fc38 	bl	800ae64 <__i2b>
 800a5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 81cf 	beq.w	800a99c <_dtoa_r+0xb3c>
 800a5fe:	461a      	mov	r2, r3
 800a600:	4601      	mov	r1, r0
 800a602:	4658      	mov	r0, fp
 800a604:	f000 fcee 	bl	800afe4 <__pow5mult>
 800a608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	4604      	mov	r4, r0
 800a60e:	f300 8095 	bgt.w	800a73c <_dtoa_r+0x8dc>
 800a612:	9b02      	ldr	r3, [sp, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 8087 	bne.w	800a728 <_dtoa_r+0x8c8>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a620:	2b00      	cmp	r3, #0
 800a622:	f040 8089 	bne.w	800a738 <_dtoa_r+0x8d8>
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a62c:	0d1b      	lsrs	r3, r3, #20
 800a62e:	051b      	lsls	r3, r3, #20
 800a630:	b12b      	cbz	r3, 800a63e <_dtoa_r+0x7de>
 800a632:	9b08      	ldr	r3, [sp, #32]
 800a634:	3301      	adds	r3, #1
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	f108 0801 	add.w	r8, r8, #1
 800a63c:	2301      	movs	r3, #1
 800a63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 81b0 	beq.w	800a9a8 <_dtoa_r+0xb48>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a64e:	6918      	ldr	r0, [r3, #16]
 800a650:	f000 fbbc 	bl	800adcc <__hi0bits>
 800a654:	f1c0 0020 	rsb	r0, r0, #32
 800a658:	9b08      	ldr	r3, [sp, #32]
 800a65a:	4418      	add	r0, r3
 800a65c:	f010 001f 	ands.w	r0, r0, #31
 800a660:	d077      	beq.n	800a752 <_dtoa_r+0x8f2>
 800a662:	f1c0 0320 	rsb	r3, r0, #32
 800a666:	2b04      	cmp	r3, #4
 800a668:	dd6b      	ble.n	800a742 <_dtoa_r+0x8e2>
 800a66a:	9b08      	ldr	r3, [sp, #32]
 800a66c:	f1c0 001c 	rsb	r0, r0, #28
 800a670:	4403      	add	r3, r0
 800a672:	4480      	add	r8, r0
 800a674:	4406      	add	r6, r0
 800a676:	9308      	str	r3, [sp, #32]
 800a678:	f1b8 0f00 	cmp.w	r8, #0
 800a67c:	dd05      	ble.n	800a68a <_dtoa_r+0x82a>
 800a67e:	4649      	mov	r1, r9
 800a680:	4642      	mov	r2, r8
 800a682:	4658      	mov	r0, fp
 800a684:	f000 fd08 	bl	800b098 <__lshift>
 800a688:	4681      	mov	r9, r0
 800a68a:	9b08      	ldr	r3, [sp, #32]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd05      	ble.n	800a69c <_dtoa_r+0x83c>
 800a690:	4621      	mov	r1, r4
 800a692:	461a      	mov	r2, r3
 800a694:	4658      	mov	r0, fp
 800a696:	f000 fcff 	bl	800b098 <__lshift>
 800a69a:	4604      	mov	r4, r0
 800a69c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d059      	beq.n	800a756 <_dtoa_r+0x8f6>
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4648      	mov	r0, r9
 800a6a6:	f000 fd63 	bl	800b170 <__mcmp>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	da53      	bge.n	800a756 <_dtoa_r+0x8f6>
 800a6ae:	1e7b      	subs	r3, r7, #1
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	220a      	movs	r2, #10
 800a6b8:	4658      	mov	r0, fp
 800a6ba:	f000 faf7 	bl	800acac <__multadd>
 800a6be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6c0:	4681      	mov	r9, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 8172 	beq.w	800a9ac <_dtoa_r+0xb4c>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	220a      	movs	r2, #10
 800a6ce:	4658      	mov	r0, fp
 800a6d0:	f000 faec 	bl	800acac <__multadd>
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	4605      	mov	r5, r0
 800a6da:	dc67      	bgt.n	800a7ac <_dtoa_r+0x94c>
 800a6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	dc41      	bgt.n	800a766 <_dtoa_r+0x906>
 800a6e2:	e063      	b.n	800a7ac <_dtoa_r+0x94c>
 800a6e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a6ea:	e746      	b.n	800a57a <_dtoa_r+0x71a>
 800a6ec:	9b07      	ldr	r3, [sp, #28]
 800a6ee:	1e5c      	subs	r4, r3, #1
 800a6f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6f2:	42a3      	cmp	r3, r4
 800a6f4:	bfbf      	itttt	lt
 800a6f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a6f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a6fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a6fc:	1ae3      	sublt	r3, r4, r3
 800a6fe:	bfb4      	ite	lt
 800a700:	18d2      	addlt	r2, r2, r3
 800a702:	1b1c      	subge	r4, r3, r4
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	bfbc      	itt	lt
 800a708:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a70a:	2400      	movlt	r4, #0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bfb5      	itete	lt
 800a710:	eba8 0603 	sublt.w	r6, r8, r3
 800a714:	9b07      	ldrge	r3, [sp, #28]
 800a716:	2300      	movlt	r3, #0
 800a718:	4646      	movge	r6, r8
 800a71a:	e730      	b.n	800a57e <_dtoa_r+0x71e>
 800a71c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a71e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a720:	4646      	mov	r6, r8
 800a722:	e735      	b.n	800a590 <_dtoa_r+0x730>
 800a724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a726:	e75c      	b.n	800a5e2 <_dtoa_r+0x782>
 800a728:	2300      	movs	r3, #0
 800a72a:	e788      	b.n	800a63e <_dtoa_r+0x7de>
 800a72c:	3fe00000 	.word	0x3fe00000
 800a730:	40240000 	.word	0x40240000
 800a734:	40140000 	.word	0x40140000
 800a738:	9b02      	ldr	r3, [sp, #8]
 800a73a:	e780      	b.n	800a63e <_dtoa_r+0x7de>
 800a73c:	2300      	movs	r3, #0
 800a73e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a740:	e782      	b.n	800a648 <_dtoa_r+0x7e8>
 800a742:	d099      	beq.n	800a678 <_dtoa_r+0x818>
 800a744:	9a08      	ldr	r2, [sp, #32]
 800a746:	331c      	adds	r3, #28
 800a748:	441a      	add	r2, r3
 800a74a:	4498      	add	r8, r3
 800a74c:	441e      	add	r6, r3
 800a74e:	9208      	str	r2, [sp, #32]
 800a750:	e792      	b.n	800a678 <_dtoa_r+0x818>
 800a752:	4603      	mov	r3, r0
 800a754:	e7f6      	b.n	800a744 <_dtoa_r+0x8e4>
 800a756:	9b07      	ldr	r3, [sp, #28]
 800a758:	9704      	str	r7, [sp, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	dc20      	bgt.n	800a7a0 <_dtoa_r+0x940>
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a762:	2b02      	cmp	r3, #2
 800a764:	dd1e      	ble.n	800a7a4 <_dtoa_r+0x944>
 800a766:	9b00      	ldr	r3, [sp, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f47f aec0 	bne.w	800a4ee <_dtoa_r+0x68e>
 800a76e:	4621      	mov	r1, r4
 800a770:	2205      	movs	r2, #5
 800a772:	4658      	mov	r0, fp
 800a774:	f000 fa9a 	bl	800acac <__multadd>
 800a778:	4601      	mov	r1, r0
 800a77a:	4604      	mov	r4, r0
 800a77c:	4648      	mov	r0, r9
 800a77e:	f000 fcf7 	bl	800b170 <__mcmp>
 800a782:	2800      	cmp	r0, #0
 800a784:	f77f aeb3 	ble.w	800a4ee <_dtoa_r+0x68e>
 800a788:	4656      	mov	r6, sl
 800a78a:	2331      	movs	r3, #49	@ 0x31
 800a78c:	f806 3b01 	strb.w	r3, [r6], #1
 800a790:	9b04      	ldr	r3, [sp, #16]
 800a792:	3301      	adds	r3, #1
 800a794:	9304      	str	r3, [sp, #16]
 800a796:	e6ae      	b.n	800a4f6 <_dtoa_r+0x696>
 800a798:	9c07      	ldr	r4, [sp, #28]
 800a79a:	9704      	str	r7, [sp, #16]
 800a79c:	4625      	mov	r5, r4
 800a79e:	e7f3      	b.n	800a788 <_dtoa_r+0x928>
 800a7a0:	9b07      	ldr	r3, [sp, #28]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 8104 	beq.w	800a9b4 <_dtoa_r+0xb54>
 800a7ac:	2e00      	cmp	r6, #0
 800a7ae:	dd05      	ble.n	800a7bc <_dtoa_r+0x95c>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4632      	mov	r2, r6
 800a7b4:	4658      	mov	r0, fp
 800a7b6:	f000 fc6f 	bl	800b098 <__lshift>
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d05a      	beq.n	800a878 <_dtoa_r+0xa18>
 800a7c2:	6869      	ldr	r1, [r5, #4]
 800a7c4:	4658      	mov	r0, fp
 800a7c6:	f000 fa0f 	bl	800abe8 <_Balloc>
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	b928      	cbnz	r0, 800a7da <_dtoa_r+0x97a>
 800a7ce:	4b84      	ldr	r3, [pc, #528]	@ (800a9e0 <_dtoa_r+0xb80>)
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7d6:	f7ff bb5a 	b.w	8009e8e <_dtoa_r+0x2e>
 800a7da:	692a      	ldr	r2, [r5, #16]
 800a7dc:	3202      	adds	r2, #2
 800a7de:	0092      	lsls	r2, r2, #2
 800a7e0:	f105 010c 	add.w	r1, r5, #12
 800a7e4:	300c      	adds	r0, #12
 800a7e6:	f7ff fa9c 	bl	8009d22 <memcpy>
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	4631      	mov	r1, r6
 800a7ee:	4658      	mov	r0, fp
 800a7f0:	f000 fc52 	bl	800b098 <__lshift>
 800a7f4:	f10a 0301 	add.w	r3, sl, #1
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	4453      	add	r3, sl
 800a7fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a800:	9b02      	ldr	r3, [sp, #8]
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	462f      	mov	r7, r5
 800a808:	930a      	str	r3, [sp, #40]	@ 0x28
 800a80a:	4605      	mov	r5, r0
 800a80c:	9b07      	ldr	r3, [sp, #28]
 800a80e:	4621      	mov	r1, r4
 800a810:	3b01      	subs	r3, #1
 800a812:	4648      	mov	r0, r9
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	f7ff fa99 	bl	8009d4c <quorem>
 800a81a:	4639      	mov	r1, r7
 800a81c:	9002      	str	r0, [sp, #8]
 800a81e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a822:	4648      	mov	r0, r9
 800a824:	f000 fca4 	bl	800b170 <__mcmp>
 800a828:	462a      	mov	r2, r5
 800a82a:	9008      	str	r0, [sp, #32]
 800a82c:	4621      	mov	r1, r4
 800a82e:	4658      	mov	r0, fp
 800a830:	f000 fcba 	bl	800b1a8 <__mdiff>
 800a834:	68c2      	ldr	r2, [r0, #12]
 800a836:	4606      	mov	r6, r0
 800a838:	bb02      	cbnz	r2, 800a87c <_dtoa_r+0xa1c>
 800a83a:	4601      	mov	r1, r0
 800a83c:	4648      	mov	r0, r9
 800a83e:	f000 fc97 	bl	800b170 <__mcmp>
 800a842:	4602      	mov	r2, r0
 800a844:	4631      	mov	r1, r6
 800a846:	4658      	mov	r0, fp
 800a848:	920e      	str	r2, [sp, #56]	@ 0x38
 800a84a:	f000 fa0d 	bl	800ac68 <_Bfree>
 800a84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a850:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a852:	9e07      	ldr	r6, [sp, #28]
 800a854:	ea43 0102 	orr.w	r1, r3, r2
 800a858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a85a:	4319      	orrs	r1, r3
 800a85c:	d110      	bne.n	800a880 <_dtoa_r+0xa20>
 800a85e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a862:	d029      	beq.n	800a8b8 <_dtoa_r+0xa58>
 800a864:	9b08      	ldr	r3, [sp, #32]
 800a866:	2b00      	cmp	r3, #0
 800a868:	dd02      	ble.n	800a870 <_dtoa_r+0xa10>
 800a86a:	9b02      	ldr	r3, [sp, #8]
 800a86c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a870:	9b00      	ldr	r3, [sp, #0]
 800a872:	f883 8000 	strb.w	r8, [r3]
 800a876:	e63f      	b.n	800a4f8 <_dtoa_r+0x698>
 800a878:	4628      	mov	r0, r5
 800a87a:	e7bb      	b.n	800a7f4 <_dtoa_r+0x994>
 800a87c:	2201      	movs	r2, #1
 800a87e:	e7e1      	b.n	800a844 <_dtoa_r+0x9e4>
 800a880:	9b08      	ldr	r3, [sp, #32]
 800a882:	2b00      	cmp	r3, #0
 800a884:	db04      	blt.n	800a890 <_dtoa_r+0xa30>
 800a886:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a888:	430b      	orrs	r3, r1
 800a88a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a88c:	430b      	orrs	r3, r1
 800a88e:	d120      	bne.n	800a8d2 <_dtoa_r+0xa72>
 800a890:	2a00      	cmp	r2, #0
 800a892:	dded      	ble.n	800a870 <_dtoa_r+0xa10>
 800a894:	4649      	mov	r1, r9
 800a896:	2201      	movs	r2, #1
 800a898:	4658      	mov	r0, fp
 800a89a:	f000 fbfd 	bl	800b098 <__lshift>
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4681      	mov	r9, r0
 800a8a2:	f000 fc65 	bl	800b170 <__mcmp>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	dc03      	bgt.n	800a8b2 <_dtoa_r+0xa52>
 800a8aa:	d1e1      	bne.n	800a870 <_dtoa_r+0xa10>
 800a8ac:	f018 0f01 	tst.w	r8, #1
 800a8b0:	d0de      	beq.n	800a870 <_dtoa_r+0xa10>
 800a8b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8b6:	d1d8      	bne.n	800a86a <_dtoa_r+0xa0a>
 800a8b8:	9a00      	ldr	r2, [sp, #0]
 800a8ba:	2339      	movs	r3, #57	@ 0x39
 800a8bc:	7013      	strb	r3, [r2, #0]
 800a8be:	4633      	mov	r3, r6
 800a8c0:	461e      	mov	r6, r3
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a8c8:	2a39      	cmp	r2, #57	@ 0x39
 800a8ca:	d052      	beq.n	800a972 <_dtoa_r+0xb12>
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	701a      	strb	r2, [r3, #0]
 800a8d0:	e612      	b.n	800a4f8 <_dtoa_r+0x698>
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	dd07      	ble.n	800a8e6 <_dtoa_r+0xa86>
 800a8d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8da:	d0ed      	beq.n	800a8b8 <_dtoa_r+0xa58>
 800a8dc:	9a00      	ldr	r2, [sp, #0]
 800a8de:	f108 0301 	add.w	r3, r8, #1
 800a8e2:	7013      	strb	r3, [r2, #0]
 800a8e4:	e608      	b.n	800a4f8 <_dtoa_r+0x698>
 800a8e6:	9b07      	ldr	r3, [sp, #28]
 800a8e8:	9a07      	ldr	r2, [sp, #28]
 800a8ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d028      	beq.n	800a946 <_dtoa_r+0xae6>
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	4658      	mov	r0, fp
 800a8fc:	f000 f9d6 	bl	800acac <__multadd>
 800a900:	42af      	cmp	r7, r5
 800a902:	4681      	mov	r9, r0
 800a904:	f04f 0300 	mov.w	r3, #0
 800a908:	f04f 020a 	mov.w	r2, #10
 800a90c:	4639      	mov	r1, r7
 800a90e:	4658      	mov	r0, fp
 800a910:	d107      	bne.n	800a922 <_dtoa_r+0xac2>
 800a912:	f000 f9cb 	bl	800acac <__multadd>
 800a916:	4607      	mov	r7, r0
 800a918:	4605      	mov	r5, r0
 800a91a:	9b07      	ldr	r3, [sp, #28]
 800a91c:	3301      	adds	r3, #1
 800a91e:	9307      	str	r3, [sp, #28]
 800a920:	e774      	b.n	800a80c <_dtoa_r+0x9ac>
 800a922:	f000 f9c3 	bl	800acac <__multadd>
 800a926:	4629      	mov	r1, r5
 800a928:	4607      	mov	r7, r0
 800a92a:	2300      	movs	r3, #0
 800a92c:	220a      	movs	r2, #10
 800a92e:	4658      	mov	r0, fp
 800a930:	f000 f9bc 	bl	800acac <__multadd>
 800a934:	4605      	mov	r5, r0
 800a936:	e7f0      	b.n	800a91a <_dtoa_r+0xaba>
 800a938:	9b00      	ldr	r3, [sp, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	bfcc      	ite	gt
 800a93e:	461e      	movgt	r6, r3
 800a940:	2601      	movle	r6, #1
 800a942:	4456      	add	r6, sl
 800a944:	2700      	movs	r7, #0
 800a946:	4649      	mov	r1, r9
 800a948:	2201      	movs	r2, #1
 800a94a:	4658      	mov	r0, fp
 800a94c:	f000 fba4 	bl	800b098 <__lshift>
 800a950:	4621      	mov	r1, r4
 800a952:	4681      	mov	r9, r0
 800a954:	f000 fc0c 	bl	800b170 <__mcmp>
 800a958:	2800      	cmp	r0, #0
 800a95a:	dcb0      	bgt.n	800a8be <_dtoa_r+0xa5e>
 800a95c:	d102      	bne.n	800a964 <_dtoa_r+0xb04>
 800a95e:	f018 0f01 	tst.w	r8, #1
 800a962:	d1ac      	bne.n	800a8be <_dtoa_r+0xa5e>
 800a964:	4633      	mov	r3, r6
 800a966:	461e      	mov	r6, r3
 800a968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a96c:	2a30      	cmp	r2, #48	@ 0x30
 800a96e:	d0fa      	beq.n	800a966 <_dtoa_r+0xb06>
 800a970:	e5c2      	b.n	800a4f8 <_dtoa_r+0x698>
 800a972:	459a      	cmp	sl, r3
 800a974:	d1a4      	bne.n	800a8c0 <_dtoa_r+0xa60>
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	3301      	adds	r3, #1
 800a97a:	9304      	str	r3, [sp, #16]
 800a97c:	2331      	movs	r3, #49	@ 0x31
 800a97e:	f88a 3000 	strb.w	r3, [sl]
 800a982:	e5b9      	b.n	800a4f8 <_dtoa_r+0x698>
 800a984:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a986:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a9e4 <_dtoa_r+0xb84>
 800a98a:	b11b      	cbz	r3, 800a994 <_dtoa_r+0xb34>
 800a98c:	f10a 0308 	add.w	r3, sl, #8
 800a990:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	4650      	mov	r0, sl
 800a996:	b019      	add	sp, #100	@ 0x64
 800a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	f77f ae37 	ble.w	800a612 <_dtoa_r+0x7b2>
 800a9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	e655      	b.n	800a658 <_dtoa_r+0x7f8>
 800a9ac:	9b00      	ldr	r3, [sp, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f77f aed6 	ble.w	800a760 <_dtoa_r+0x900>
 800a9b4:	4656      	mov	r6, sl
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	4648      	mov	r0, r9
 800a9ba:	f7ff f9c7 	bl	8009d4c <quorem>
 800a9be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9c2:	f806 8b01 	strb.w	r8, [r6], #1
 800a9c6:	9b00      	ldr	r3, [sp, #0]
 800a9c8:	eba6 020a 	sub.w	r2, r6, sl
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	ddb3      	ble.n	800a938 <_dtoa_r+0xad8>
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	220a      	movs	r2, #10
 800a9d6:	4658      	mov	r0, fp
 800a9d8:	f000 f968 	bl	800acac <__multadd>
 800a9dc:	4681      	mov	r9, r0
 800a9de:	e7ea      	b.n	800a9b6 <_dtoa_r+0xb56>
 800a9e0:	0800db19 	.word	0x0800db19
 800a9e4:	0800da9d 	.word	0x0800da9d

0800a9e8 <_free_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	2900      	cmp	r1, #0
 800a9ee:	d041      	beq.n	800aa74 <_free_r+0x8c>
 800a9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9f4:	1f0c      	subs	r4, r1, #4
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bfb8      	it	lt
 800a9fa:	18e4      	addlt	r4, r4, r3
 800a9fc:	f000 f8e8 	bl	800abd0 <__malloc_lock>
 800aa00:	4a1d      	ldr	r2, [pc, #116]	@ (800aa78 <_free_r+0x90>)
 800aa02:	6813      	ldr	r3, [r2, #0]
 800aa04:	b933      	cbnz	r3, 800aa14 <_free_r+0x2c>
 800aa06:	6063      	str	r3, [r4, #4]
 800aa08:	6014      	str	r4, [r2, #0]
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa10:	f000 b8e4 	b.w	800abdc <__malloc_unlock>
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d908      	bls.n	800aa2a <_free_r+0x42>
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	1821      	adds	r1, r4, r0
 800aa1c:	428b      	cmp	r3, r1
 800aa1e:	bf01      	itttt	eq
 800aa20:	6819      	ldreq	r1, [r3, #0]
 800aa22:	685b      	ldreq	r3, [r3, #4]
 800aa24:	1809      	addeq	r1, r1, r0
 800aa26:	6021      	streq	r1, [r4, #0]
 800aa28:	e7ed      	b.n	800aa06 <_free_r+0x1e>
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	b10b      	cbz	r3, 800aa34 <_free_r+0x4c>
 800aa30:	42a3      	cmp	r3, r4
 800aa32:	d9fa      	bls.n	800aa2a <_free_r+0x42>
 800aa34:	6811      	ldr	r1, [r2, #0]
 800aa36:	1850      	adds	r0, r2, r1
 800aa38:	42a0      	cmp	r0, r4
 800aa3a:	d10b      	bne.n	800aa54 <_free_r+0x6c>
 800aa3c:	6820      	ldr	r0, [r4, #0]
 800aa3e:	4401      	add	r1, r0
 800aa40:	1850      	adds	r0, r2, r1
 800aa42:	4283      	cmp	r3, r0
 800aa44:	6011      	str	r1, [r2, #0]
 800aa46:	d1e0      	bne.n	800aa0a <_free_r+0x22>
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	6053      	str	r3, [r2, #4]
 800aa4e:	4408      	add	r0, r1
 800aa50:	6010      	str	r0, [r2, #0]
 800aa52:	e7da      	b.n	800aa0a <_free_r+0x22>
 800aa54:	d902      	bls.n	800aa5c <_free_r+0x74>
 800aa56:	230c      	movs	r3, #12
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	e7d6      	b.n	800aa0a <_free_r+0x22>
 800aa5c:	6820      	ldr	r0, [r4, #0]
 800aa5e:	1821      	adds	r1, r4, r0
 800aa60:	428b      	cmp	r3, r1
 800aa62:	bf04      	itt	eq
 800aa64:	6819      	ldreq	r1, [r3, #0]
 800aa66:	685b      	ldreq	r3, [r3, #4]
 800aa68:	6063      	str	r3, [r4, #4]
 800aa6a:	bf04      	itt	eq
 800aa6c:	1809      	addeq	r1, r1, r0
 800aa6e:	6021      	streq	r1, [r4, #0]
 800aa70:	6054      	str	r4, [r2, #4]
 800aa72:	e7ca      	b.n	800aa0a <_free_r+0x22>
 800aa74:	bd38      	pop	{r3, r4, r5, pc}
 800aa76:	bf00      	nop
 800aa78:	20000820 	.word	0x20000820

0800aa7c <malloc>:
 800aa7c:	4b02      	ldr	r3, [pc, #8]	@ (800aa88 <malloc+0xc>)
 800aa7e:	4601      	mov	r1, r0
 800aa80:	6818      	ldr	r0, [r3, #0]
 800aa82:	f000 b825 	b.w	800aad0 <_malloc_r>
 800aa86:	bf00      	nop
 800aa88:	20000044 	.word	0x20000044

0800aa8c <sbrk_aligned>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	4e0f      	ldr	r6, [pc, #60]	@ (800aacc <sbrk_aligned+0x40>)
 800aa90:	460c      	mov	r4, r1
 800aa92:	6831      	ldr	r1, [r6, #0]
 800aa94:	4605      	mov	r5, r0
 800aa96:	b911      	cbnz	r1, 800aa9e <sbrk_aligned+0x12>
 800aa98:	f001 ffd2 	bl	800ca40 <_sbrk_r>
 800aa9c:	6030      	str	r0, [r6, #0]
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f001 ffcd 	bl	800ca40 <_sbrk_r>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	d103      	bne.n	800aab2 <sbrk_aligned+0x26>
 800aaaa:	f04f 34ff 	mov.w	r4, #4294967295
 800aaae:	4620      	mov	r0, r4
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
 800aab2:	1cc4      	adds	r4, r0, #3
 800aab4:	f024 0403 	bic.w	r4, r4, #3
 800aab8:	42a0      	cmp	r0, r4
 800aaba:	d0f8      	beq.n	800aaae <sbrk_aligned+0x22>
 800aabc:	1a21      	subs	r1, r4, r0
 800aabe:	4628      	mov	r0, r5
 800aac0:	f001 ffbe 	bl	800ca40 <_sbrk_r>
 800aac4:	3001      	adds	r0, #1
 800aac6:	d1f2      	bne.n	800aaae <sbrk_aligned+0x22>
 800aac8:	e7ef      	b.n	800aaaa <sbrk_aligned+0x1e>
 800aaca:	bf00      	nop
 800aacc:	2000081c 	.word	0x2000081c

0800aad0 <_malloc_r>:
 800aad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad4:	1ccd      	adds	r5, r1, #3
 800aad6:	f025 0503 	bic.w	r5, r5, #3
 800aada:	3508      	adds	r5, #8
 800aadc:	2d0c      	cmp	r5, #12
 800aade:	bf38      	it	cc
 800aae0:	250c      	movcc	r5, #12
 800aae2:	2d00      	cmp	r5, #0
 800aae4:	4606      	mov	r6, r0
 800aae6:	db01      	blt.n	800aaec <_malloc_r+0x1c>
 800aae8:	42a9      	cmp	r1, r5
 800aaea:	d904      	bls.n	800aaf6 <_malloc_r+0x26>
 800aaec:	230c      	movs	r3, #12
 800aaee:	6033      	str	r3, [r6, #0]
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abcc <_malloc_r+0xfc>
 800aafa:	f000 f869 	bl	800abd0 <__malloc_lock>
 800aafe:	f8d8 3000 	ldr.w	r3, [r8]
 800ab02:	461c      	mov	r4, r3
 800ab04:	bb44      	cbnz	r4, 800ab58 <_malloc_r+0x88>
 800ab06:	4629      	mov	r1, r5
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f7ff ffbf 	bl	800aa8c <sbrk_aligned>
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	4604      	mov	r4, r0
 800ab12:	d158      	bne.n	800abc6 <_malloc_r+0xf6>
 800ab14:	f8d8 4000 	ldr.w	r4, [r8]
 800ab18:	4627      	mov	r7, r4
 800ab1a:	2f00      	cmp	r7, #0
 800ab1c:	d143      	bne.n	800aba6 <_malloc_r+0xd6>
 800ab1e:	2c00      	cmp	r4, #0
 800ab20:	d04b      	beq.n	800abba <_malloc_r+0xea>
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	4639      	mov	r1, r7
 800ab26:	4630      	mov	r0, r6
 800ab28:	eb04 0903 	add.w	r9, r4, r3
 800ab2c:	f001 ff88 	bl	800ca40 <_sbrk_r>
 800ab30:	4581      	cmp	r9, r0
 800ab32:	d142      	bne.n	800abba <_malloc_r+0xea>
 800ab34:	6821      	ldr	r1, [r4, #0]
 800ab36:	1a6d      	subs	r5, r5, r1
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f7ff ffa6 	bl	800aa8c <sbrk_aligned>
 800ab40:	3001      	adds	r0, #1
 800ab42:	d03a      	beq.n	800abba <_malloc_r+0xea>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	442b      	add	r3, r5
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	bb62      	cbnz	r2, 800abac <_malloc_r+0xdc>
 800ab52:	f8c8 7000 	str.w	r7, [r8]
 800ab56:	e00f      	b.n	800ab78 <_malloc_r+0xa8>
 800ab58:	6822      	ldr	r2, [r4, #0]
 800ab5a:	1b52      	subs	r2, r2, r5
 800ab5c:	d420      	bmi.n	800aba0 <_malloc_r+0xd0>
 800ab5e:	2a0b      	cmp	r2, #11
 800ab60:	d917      	bls.n	800ab92 <_malloc_r+0xc2>
 800ab62:	1961      	adds	r1, r4, r5
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	6025      	str	r5, [r4, #0]
 800ab68:	bf18      	it	ne
 800ab6a:	6059      	strne	r1, [r3, #4]
 800ab6c:	6863      	ldr	r3, [r4, #4]
 800ab6e:	bf08      	it	eq
 800ab70:	f8c8 1000 	streq.w	r1, [r8]
 800ab74:	5162      	str	r2, [r4, r5]
 800ab76:	604b      	str	r3, [r1, #4]
 800ab78:	4630      	mov	r0, r6
 800ab7a:	f000 f82f 	bl	800abdc <__malloc_unlock>
 800ab7e:	f104 000b 	add.w	r0, r4, #11
 800ab82:	1d23      	adds	r3, r4, #4
 800ab84:	f020 0007 	bic.w	r0, r0, #7
 800ab88:	1ac2      	subs	r2, r0, r3
 800ab8a:	bf1c      	itt	ne
 800ab8c:	1a1b      	subne	r3, r3, r0
 800ab8e:	50a3      	strne	r3, [r4, r2]
 800ab90:	e7af      	b.n	800aaf2 <_malloc_r+0x22>
 800ab92:	6862      	ldr	r2, [r4, #4]
 800ab94:	42a3      	cmp	r3, r4
 800ab96:	bf0c      	ite	eq
 800ab98:	f8c8 2000 	streq.w	r2, [r8]
 800ab9c:	605a      	strne	r2, [r3, #4]
 800ab9e:	e7eb      	b.n	800ab78 <_malloc_r+0xa8>
 800aba0:	4623      	mov	r3, r4
 800aba2:	6864      	ldr	r4, [r4, #4]
 800aba4:	e7ae      	b.n	800ab04 <_malloc_r+0x34>
 800aba6:	463c      	mov	r4, r7
 800aba8:	687f      	ldr	r7, [r7, #4]
 800abaa:	e7b6      	b.n	800ab1a <_malloc_r+0x4a>
 800abac:	461a      	mov	r2, r3
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	d1fb      	bne.n	800abac <_malloc_r+0xdc>
 800abb4:	2300      	movs	r3, #0
 800abb6:	6053      	str	r3, [r2, #4]
 800abb8:	e7de      	b.n	800ab78 <_malloc_r+0xa8>
 800abba:	230c      	movs	r3, #12
 800abbc:	6033      	str	r3, [r6, #0]
 800abbe:	4630      	mov	r0, r6
 800abc0:	f000 f80c 	bl	800abdc <__malloc_unlock>
 800abc4:	e794      	b.n	800aaf0 <_malloc_r+0x20>
 800abc6:	6005      	str	r5, [r0, #0]
 800abc8:	e7d6      	b.n	800ab78 <_malloc_r+0xa8>
 800abca:	bf00      	nop
 800abcc:	20000820 	.word	0x20000820

0800abd0 <__malloc_lock>:
 800abd0:	4801      	ldr	r0, [pc, #4]	@ (800abd8 <__malloc_lock+0x8>)
 800abd2:	f7ff b8a4 	b.w	8009d1e <__retarget_lock_acquire_recursive>
 800abd6:	bf00      	nop
 800abd8:	20000818 	.word	0x20000818

0800abdc <__malloc_unlock>:
 800abdc:	4801      	ldr	r0, [pc, #4]	@ (800abe4 <__malloc_unlock+0x8>)
 800abde:	f7ff b89f 	b.w	8009d20 <__retarget_lock_release_recursive>
 800abe2:	bf00      	nop
 800abe4:	20000818 	.word	0x20000818

0800abe8 <_Balloc>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	69c6      	ldr	r6, [r0, #28]
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	b976      	cbnz	r6, 800ac10 <_Balloc+0x28>
 800abf2:	2010      	movs	r0, #16
 800abf4:	f7ff ff42 	bl	800aa7c <malloc>
 800abf8:	4602      	mov	r2, r0
 800abfa:	61e0      	str	r0, [r4, #28]
 800abfc:	b920      	cbnz	r0, 800ac08 <_Balloc+0x20>
 800abfe:	4b18      	ldr	r3, [pc, #96]	@ (800ac60 <_Balloc+0x78>)
 800ac00:	4818      	ldr	r0, [pc, #96]	@ (800ac64 <_Balloc+0x7c>)
 800ac02:	216b      	movs	r1, #107	@ 0x6b
 800ac04:	f001 ff34 	bl	800ca70 <__assert_func>
 800ac08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac0c:	6006      	str	r6, [r0, #0]
 800ac0e:	60c6      	str	r6, [r0, #12]
 800ac10:	69e6      	ldr	r6, [r4, #28]
 800ac12:	68f3      	ldr	r3, [r6, #12]
 800ac14:	b183      	cbz	r3, 800ac38 <_Balloc+0x50>
 800ac16:	69e3      	ldr	r3, [r4, #28]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac1e:	b9b8      	cbnz	r0, 800ac50 <_Balloc+0x68>
 800ac20:	2101      	movs	r1, #1
 800ac22:	fa01 f605 	lsl.w	r6, r1, r5
 800ac26:	1d72      	adds	r2, r6, #5
 800ac28:	0092      	lsls	r2, r2, #2
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f001 ff3e 	bl	800caac <_calloc_r>
 800ac30:	b160      	cbz	r0, 800ac4c <_Balloc+0x64>
 800ac32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac36:	e00e      	b.n	800ac56 <_Balloc+0x6e>
 800ac38:	2221      	movs	r2, #33	@ 0x21
 800ac3a:	2104      	movs	r1, #4
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f001 ff35 	bl	800caac <_calloc_r>
 800ac42:	69e3      	ldr	r3, [r4, #28]
 800ac44:	60f0      	str	r0, [r6, #12]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e4      	bne.n	800ac16 <_Balloc+0x2e>
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	6802      	ldr	r2, [r0, #0]
 800ac52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac56:	2300      	movs	r3, #0
 800ac58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac5c:	e7f7      	b.n	800ac4e <_Balloc+0x66>
 800ac5e:	bf00      	nop
 800ac60:	0800daaa 	.word	0x0800daaa
 800ac64:	0800db2a 	.word	0x0800db2a

0800ac68 <_Bfree>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	69c6      	ldr	r6, [r0, #28]
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	b976      	cbnz	r6, 800ac90 <_Bfree+0x28>
 800ac72:	2010      	movs	r0, #16
 800ac74:	f7ff ff02 	bl	800aa7c <malloc>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	61e8      	str	r0, [r5, #28]
 800ac7c:	b920      	cbnz	r0, 800ac88 <_Bfree+0x20>
 800ac7e:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <_Bfree+0x3c>)
 800ac80:	4809      	ldr	r0, [pc, #36]	@ (800aca8 <_Bfree+0x40>)
 800ac82:	218f      	movs	r1, #143	@ 0x8f
 800ac84:	f001 fef4 	bl	800ca70 <__assert_func>
 800ac88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac8c:	6006      	str	r6, [r0, #0]
 800ac8e:	60c6      	str	r6, [r0, #12]
 800ac90:	b13c      	cbz	r4, 800aca2 <_Bfree+0x3a>
 800ac92:	69eb      	ldr	r3, [r5, #28]
 800ac94:	6862      	ldr	r2, [r4, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac9c:	6021      	str	r1, [r4, #0]
 800ac9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	0800daaa 	.word	0x0800daaa
 800aca8:	0800db2a 	.word	0x0800db2a

0800acac <__multadd>:
 800acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb0:	690d      	ldr	r5, [r1, #16]
 800acb2:	4607      	mov	r7, r0
 800acb4:	460c      	mov	r4, r1
 800acb6:	461e      	mov	r6, r3
 800acb8:	f101 0c14 	add.w	ip, r1, #20
 800acbc:	2000      	movs	r0, #0
 800acbe:	f8dc 3000 	ldr.w	r3, [ip]
 800acc2:	b299      	uxth	r1, r3
 800acc4:	fb02 6101 	mla	r1, r2, r1, r6
 800acc8:	0c1e      	lsrs	r6, r3, #16
 800acca:	0c0b      	lsrs	r3, r1, #16
 800accc:	fb02 3306 	mla	r3, r2, r6, r3
 800acd0:	b289      	uxth	r1, r1
 800acd2:	3001      	adds	r0, #1
 800acd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acd8:	4285      	cmp	r5, r0
 800acda:	f84c 1b04 	str.w	r1, [ip], #4
 800acde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ace2:	dcec      	bgt.n	800acbe <__multadd+0x12>
 800ace4:	b30e      	cbz	r6, 800ad2a <__multadd+0x7e>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	42ab      	cmp	r3, r5
 800acea:	dc19      	bgt.n	800ad20 <__multadd+0x74>
 800acec:	6861      	ldr	r1, [r4, #4]
 800acee:	4638      	mov	r0, r7
 800acf0:	3101      	adds	r1, #1
 800acf2:	f7ff ff79 	bl	800abe8 <_Balloc>
 800acf6:	4680      	mov	r8, r0
 800acf8:	b928      	cbnz	r0, 800ad06 <__multadd+0x5a>
 800acfa:	4602      	mov	r2, r0
 800acfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <__multadd+0x84>)
 800acfe:	480d      	ldr	r0, [pc, #52]	@ (800ad34 <__multadd+0x88>)
 800ad00:	21ba      	movs	r1, #186	@ 0xba
 800ad02:	f001 feb5 	bl	800ca70 <__assert_func>
 800ad06:	6922      	ldr	r2, [r4, #16]
 800ad08:	3202      	adds	r2, #2
 800ad0a:	f104 010c 	add.w	r1, r4, #12
 800ad0e:	0092      	lsls	r2, r2, #2
 800ad10:	300c      	adds	r0, #12
 800ad12:	f7ff f806 	bl	8009d22 <memcpy>
 800ad16:	4621      	mov	r1, r4
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f7ff ffa5 	bl	800ac68 <_Bfree>
 800ad1e:	4644      	mov	r4, r8
 800ad20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad24:	3501      	adds	r5, #1
 800ad26:	615e      	str	r6, [r3, #20]
 800ad28:	6125      	str	r5, [r4, #16]
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	0800db19 	.word	0x0800db19
 800ad34:	0800db2a 	.word	0x0800db2a

0800ad38 <__s2b>:
 800ad38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	4615      	mov	r5, r2
 800ad40:	461f      	mov	r7, r3
 800ad42:	2209      	movs	r2, #9
 800ad44:	3308      	adds	r3, #8
 800ad46:	4606      	mov	r6, r0
 800ad48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	2201      	movs	r2, #1
 800ad50:	429a      	cmp	r2, r3
 800ad52:	db09      	blt.n	800ad68 <__s2b+0x30>
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff ff47 	bl	800abe8 <_Balloc>
 800ad5a:	b940      	cbnz	r0, 800ad6e <__s2b+0x36>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	4b19      	ldr	r3, [pc, #100]	@ (800adc4 <__s2b+0x8c>)
 800ad60:	4819      	ldr	r0, [pc, #100]	@ (800adc8 <__s2b+0x90>)
 800ad62:	21d3      	movs	r1, #211	@ 0xd3
 800ad64:	f001 fe84 	bl	800ca70 <__assert_func>
 800ad68:	0052      	lsls	r2, r2, #1
 800ad6a:	3101      	adds	r1, #1
 800ad6c:	e7f0      	b.n	800ad50 <__s2b+0x18>
 800ad6e:	9b08      	ldr	r3, [sp, #32]
 800ad70:	6143      	str	r3, [r0, #20]
 800ad72:	2d09      	cmp	r5, #9
 800ad74:	f04f 0301 	mov.w	r3, #1
 800ad78:	6103      	str	r3, [r0, #16]
 800ad7a:	dd16      	ble.n	800adaa <__s2b+0x72>
 800ad7c:	f104 0909 	add.w	r9, r4, #9
 800ad80:	46c8      	mov	r8, r9
 800ad82:	442c      	add	r4, r5
 800ad84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad88:	4601      	mov	r1, r0
 800ad8a:	3b30      	subs	r3, #48	@ 0x30
 800ad8c:	220a      	movs	r2, #10
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ff8c 	bl	800acac <__multadd>
 800ad94:	45a0      	cmp	r8, r4
 800ad96:	d1f5      	bne.n	800ad84 <__s2b+0x4c>
 800ad98:	f1a5 0408 	sub.w	r4, r5, #8
 800ad9c:	444c      	add	r4, r9
 800ad9e:	1b2d      	subs	r5, r5, r4
 800ada0:	1963      	adds	r3, r4, r5
 800ada2:	42bb      	cmp	r3, r7
 800ada4:	db04      	blt.n	800adb0 <__s2b+0x78>
 800ada6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adaa:	340a      	adds	r4, #10
 800adac:	2509      	movs	r5, #9
 800adae:	e7f6      	b.n	800ad9e <__s2b+0x66>
 800adb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adb4:	4601      	mov	r1, r0
 800adb6:	3b30      	subs	r3, #48	@ 0x30
 800adb8:	220a      	movs	r2, #10
 800adba:	4630      	mov	r0, r6
 800adbc:	f7ff ff76 	bl	800acac <__multadd>
 800adc0:	e7ee      	b.n	800ada0 <__s2b+0x68>
 800adc2:	bf00      	nop
 800adc4:	0800db19 	.word	0x0800db19
 800adc8:	0800db2a 	.word	0x0800db2a

0800adcc <__hi0bits>:
 800adcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800add0:	4603      	mov	r3, r0
 800add2:	bf36      	itet	cc
 800add4:	0403      	lslcc	r3, r0, #16
 800add6:	2000      	movcs	r0, #0
 800add8:	2010      	movcc	r0, #16
 800adda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adde:	bf3c      	itt	cc
 800ade0:	021b      	lslcc	r3, r3, #8
 800ade2:	3008      	addcc	r0, #8
 800ade4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ade8:	bf3c      	itt	cc
 800adea:	011b      	lslcc	r3, r3, #4
 800adec:	3004      	addcc	r0, #4
 800adee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf2:	bf3c      	itt	cc
 800adf4:	009b      	lslcc	r3, r3, #2
 800adf6:	3002      	addcc	r0, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	db05      	blt.n	800ae08 <__hi0bits+0x3c>
 800adfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae00:	f100 0001 	add.w	r0, r0, #1
 800ae04:	bf08      	it	eq
 800ae06:	2020      	moveq	r0, #32
 800ae08:	4770      	bx	lr

0800ae0a <__lo0bits>:
 800ae0a:	6803      	ldr	r3, [r0, #0]
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	f013 0007 	ands.w	r0, r3, #7
 800ae12:	d00b      	beq.n	800ae2c <__lo0bits+0x22>
 800ae14:	07d9      	lsls	r1, r3, #31
 800ae16:	d421      	bmi.n	800ae5c <__lo0bits+0x52>
 800ae18:	0798      	lsls	r0, r3, #30
 800ae1a:	bf49      	itett	mi
 800ae1c:	085b      	lsrmi	r3, r3, #1
 800ae1e:	089b      	lsrpl	r3, r3, #2
 800ae20:	2001      	movmi	r0, #1
 800ae22:	6013      	strmi	r3, [r2, #0]
 800ae24:	bf5c      	itt	pl
 800ae26:	6013      	strpl	r3, [r2, #0]
 800ae28:	2002      	movpl	r0, #2
 800ae2a:	4770      	bx	lr
 800ae2c:	b299      	uxth	r1, r3
 800ae2e:	b909      	cbnz	r1, 800ae34 <__lo0bits+0x2a>
 800ae30:	0c1b      	lsrs	r3, r3, #16
 800ae32:	2010      	movs	r0, #16
 800ae34:	b2d9      	uxtb	r1, r3
 800ae36:	b909      	cbnz	r1, 800ae3c <__lo0bits+0x32>
 800ae38:	3008      	adds	r0, #8
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	0719      	lsls	r1, r3, #28
 800ae3e:	bf04      	itt	eq
 800ae40:	091b      	lsreq	r3, r3, #4
 800ae42:	3004      	addeq	r0, #4
 800ae44:	0799      	lsls	r1, r3, #30
 800ae46:	bf04      	itt	eq
 800ae48:	089b      	lsreq	r3, r3, #2
 800ae4a:	3002      	addeq	r0, #2
 800ae4c:	07d9      	lsls	r1, r3, #31
 800ae4e:	d403      	bmi.n	800ae58 <__lo0bits+0x4e>
 800ae50:	085b      	lsrs	r3, r3, #1
 800ae52:	f100 0001 	add.w	r0, r0, #1
 800ae56:	d003      	beq.n	800ae60 <__lo0bits+0x56>
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	4770      	bx	lr
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	4770      	bx	lr
 800ae60:	2020      	movs	r0, #32
 800ae62:	4770      	bx	lr

0800ae64 <__i2b>:
 800ae64:	b510      	push	{r4, lr}
 800ae66:	460c      	mov	r4, r1
 800ae68:	2101      	movs	r1, #1
 800ae6a:	f7ff febd 	bl	800abe8 <_Balloc>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	b928      	cbnz	r0, 800ae7e <__i2b+0x1a>
 800ae72:	4b05      	ldr	r3, [pc, #20]	@ (800ae88 <__i2b+0x24>)
 800ae74:	4805      	ldr	r0, [pc, #20]	@ (800ae8c <__i2b+0x28>)
 800ae76:	f240 1145 	movw	r1, #325	@ 0x145
 800ae7a:	f001 fdf9 	bl	800ca70 <__assert_func>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	6144      	str	r4, [r0, #20]
 800ae82:	6103      	str	r3, [r0, #16]
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	bf00      	nop
 800ae88:	0800db19 	.word	0x0800db19
 800ae8c:	0800db2a 	.word	0x0800db2a

0800ae90 <__multiply>:
 800ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	4614      	mov	r4, r2
 800ae96:	690a      	ldr	r2, [r1, #16]
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	bfa8      	it	ge
 800ae9e:	4623      	movge	r3, r4
 800aea0:	460f      	mov	r7, r1
 800aea2:	bfa4      	itt	ge
 800aea4:	460c      	movge	r4, r1
 800aea6:	461f      	movge	r7, r3
 800aea8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aeac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	6861      	ldr	r1, [r4, #4]
 800aeb4:	eb0a 0609 	add.w	r6, sl, r9
 800aeb8:	42b3      	cmp	r3, r6
 800aeba:	b085      	sub	sp, #20
 800aebc:	bfb8      	it	lt
 800aebe:	3101      	addlt	r1, #1
 800aec0:	f7ff fe92 	bl	800abe8 <_Balloc>
 800aec4:	b930      	cbnz	r0, 800aed4 <__multiply+0x44>
 800aec6:	4602      	mov	r2, r0
 800aec8:	4b44      	ldr	r3, [pc, #272]	@ (800afdc <__multiply+0x14c>)
 800aeca:	4845      	ldr	r0, [pc, #276]	@ (800afe0 <__multiply+0x150>)
 800aecc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aed0:	f001 fdce 	bl	800ca70 <__assert_func>
 800aed4:	f100 0514 	add.w	r5, r0, #20
 800aed8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aedc:	462b      	mov	r3, r5
 800aede:	2200      	movs	r2, #0
 800aee0:	4543      	cmp	r3, r8
 800aee2:	d321      	bcc.n	800af28 <__multiply+0x98>
 800aee4:	f107 0114 	add.w	r1, r7, #20
 800aee8:	f104 0214 	add.w	r2, r4, #20
 800aeec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aef0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aef4:	9302      	str	r3, [sp, #8]
 800aef6:	1b13      	subs	r3, r2, r4
 800aef8:	3b15      	subs	r3, #21
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	3304      	adds	r3, #4
 800af00:	f104 0715 	add.w	r7, r4, #21
 800af04:	42ba      	cmp	r2, r7
 800af06:	bf38      	it	cc
 800af08:	2304      	movcc	r3, #4
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	9b02      	ldr	r3, [sp, #8]
 800af0e:	9103      	str	r1, [sp, #12]
 800af10:	428b      	cmp	r3, r1
 800af12:	d80c      	bhi.n	800af2e <__multiply+0x9e>
 800af14:	2e00      	cmp	r6, #0
 800af16:	dd03      	ble.n	800af20 <__multiply+0x90>
 800af18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d05b      	beq.n	800afd8 <__multiply+0x148>
 800af20:	6106      	str	r6, [r0, #16]
 800af22:	b005      	add	sp, #20
 800af24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af28:	f843 2b04 	str.w	r2, [r3], #4
 800af2c:	e7d8      	b.n	800aee0 <__multiply+0x50>
 800af2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800af32:	f1ba 0f00 	cmp.w	sl, #0
 800af36:	d024      	beq.n	800af82 <__multiply+0xf2>
 800af38:	f104 0e14 	add.w	lr, r4, #20
 800af3c:	46a9      	mov	r9, r5
 800af3e:	f04f 0c00 	mov.w	ip, #0
 800af42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af46:	f8d9 3000 	ldr.w	r3, [r9]
 800af4a:	fa1f fb87 	uxth.w	fp, r7
 800af4e:	b29b      	uxth	r3, r3
 800af50:	fb0a 330b 	mla	r3, sl, fp, r3
 800af54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800af58:	f8d9 7000 	ldr.w	r7, [r9]
 800af5c:	4463      	add	r3, ip
 800af5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af62:	fb0a c70b 	mla	r7, sl, fp, ip
 800af66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af70:	4572      	cmp	r2, lr
 800af72:	f849 3b04 	str.w	r3, [r9], #4
 800af76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af7a:	d8e2      	bhi.n	800af42 <__multiply+0xb2>
 800af7c:	9b01      	ldr	r3, [sp, #4]
 800af7e:	f845 c003 	str.w	ip, [r5, r3]
 800af82:	9b03      	ldr	r3, [sp, #12]
 800af84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af88:	3104      	adds	r1, #4
 800af8a:	f1b9 0f00 	cmp.w	r9, #0
 800af8e:	d021      	beq.n	800afd4 <__multiply+0x144>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	f104 0c14 	add.w	ip, r4, #20
 800af96:	46ae      	mov	lr, r5
 800af98:	f04f 0a00 	mov.w	sl, #0
 800af9c:	f8bc b000 	ldrh.w	fp, [ip]
 800afa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800afa4:	fb09 770b 	mla	r7, r9, fp, r7
 800afa8:	4457      	add	r7, sl
 800afaa:	b29b      	uxth	r3, r3
 800afac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afb0:	f84e 3b04 	str.w	r3, [lr], #4
 800afb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afbc:	f8be 3000 	ldrh.w	r3, [lr]
 800afc0:	fb09 330a 	mla	r3, r9, sl, r3
 800afc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800afc8:	4562      	cmp	r2, ip
 800afca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afce:	d8e5      	bhi.n	800af9c <__multiply+0x10c>
 800afd0:	9f01      	ldr	r7, [sp, #4]
 800afd2:	51eb      	str	r3, [r5, r7]
 800afd4:	3504      	adds	r5, #4
 800afd6:	e799      	b.n	800af0c <__multiply+0x7c>
 800afd8:	3e01      	subs	r6, #1
 800afda:	e79b      	b.n	800af14 <__multiply+0x84>
 800afdc:	0800db19 	.word	0x0800db19
 800afe0:	0800db2a 	.word	0x0800db2a

0800afe4 <__pow5mult>:
 800afe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe8:	4615      	mov	r5, r2
 800afea:	f012 0203 	ands.w	r2, r2, #3
 800afee:	4607      	mov	r7, r0
 800aff0:	460e      	mov	r6, r1
 800aff2:	d007      	beq.n	800b004 <__pow5mult+0x20>
 800aff4:	4c25      	ldr	r4, [pc, #148]	@ (800b08c <__pow5mult+0xa8>)
 800aff6:	3a01      	subs	r2, #1
 800aff8:	2300      	movs	r3, #0
 800affa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800affe:	f7ff fe55 	bl	800acac <__multadd>
 800b002:	4606      	mov	r6, r0
 800b004:	10ad      	asrs	r5, r5, #2
 800b006:	d03d      	beq.n	800b084 <__pow5mult+0xa0>
 800b008:	69fc      	ldr	r4, [r7, #28]
 800b00a:	b97c      	cbnz	r4, 800b02c <__pow5mult+0x48>
 800b00c:	2010      	movs	r0, #16
 800b00e:	f7ff fd35 	bl	800aa7c <malloc>
 800b012:	4602      	mov	r2, r0
 800b014:	61f8      	str	r0, [r7, #28]
 800b016:	b928      	cbnz	r0, 800b024 <__pow5mult+0x40>
 800b018:	4b1d      	ldr	r3, [pc, #116]	@ (800b090 <__pow5mult+0xac>)
 800b01a:	481e      	ldr	r0, [pc, #120]	@ (800b094 <__pow5mult+0xb0>)
 800b01c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b020:	f001 fd26 	bl	800ca70 <__assert_func>
 800b024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b028:	6004      	str	r4, [r0, #0]
 800b02a:	60c4      	str	r4, [r0, #12]
 800b02c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b034:	b94c      	cbnz	r4, 800b04a <__pow5mult+0x66>
 800b036:	f240 2171 	movw	r1, #625	@ 0x271
 800b03a:	4638      	mov	r0, r7
 800b03c:	f7ff ff12 	bl	800ae64 <__i2b>
 800b040:	2300      	movs	r3, #0
 800b042:	f8c8 0008 	str.w	r0, [r8, #8]
 800b046:	4604      	mov	r4, r0
 800b048:	6003      	str	r3, [r0, #0]
 800b04a:	f04f 0900 	mov.w	r9, #0
 800b04e:	07eb      	lsls	r3, r5, #31
 800b050:	d50a      	bpl.n	800b068 <__pow5mult+0x84>
 800b052:	4631      	mov	r1, r6
 800b054:	4622      	mov	r2, r4
 800b056:	4638      	mov	r0, r7
 800b058:	f7ff ff1a 	bl	800ae90 <__multiply>
 800b05c:	4631      	mov	r1, r6
 800b05e:	4680      	mov	r8, r0
 800b060:	4638      	mov	r0, r7
 800b062:	f7ff fe01 	bl	800ac68 <_Bfree>
 800b066:	4646      	mov	r6, r8
 800b068:	106d      	asrs	r5, r5, #1
 800b06a:	d00b      	beq.n	800b084 <__pow5mult+0xa0>
 800b06c:	6820      	ldr	r0, [r4, #0]
 800b06e:	b938      	cbnz	r0, 800b080 <__pow5mult+0x9c>
 800b070:	4622      	mov	r2, r4
 800b072:	4621      	mov	r1, r4
 800b074:	4638      	mov	r0, r7
 800b076:	f7ff ff0b 	bl	800ae90 <__multiply>
 800b07a:	6020      	str	r0, [r4, #0]
 800b07c:	f8c0 9000 	str.w	r9, [r0]
 800b080:	4604      	mov	r4, r0
 800b082:	e7e4      	b.n	800b04e <__pow5mult+0x6a>
 800b084:	4630      	mov	r0, r6
 800b086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08a:	bf00      	nop
 800b08c:	0800db84 	.word	0x0800db84
 800b090:	0800daaa 	.word	0x0800daaa
 800b094:	0800db2a 	.word	0x0800db2a

0800b098 <__lshift>:
 800b098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b09c:	460c      	mov	r4, r1
 800b09e:	6849      	ldr	r1, [r1, #4]
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	4691      	mov	r9, r2
 800b0ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0b0:	f108 0601 	add.w	r6, r8, #1
 800b0b4:	42b3      	cmp	r3, r6
 800b0b6:	db0b      	blt.n	800b0d0 <__lshift+0x38>
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff fd95 	bl	800abe8 <_Balloc>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b948      	cbnz	r0, 800b0d6 <__lshift+0x3e>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	4b28      	ldr	r3, [pc, #160]	@ (800b168 <__lshift+0xd0>)
 800b0c6:	4829      	ldr	r0, [pc, #164]	@ (800b16c <__lshift+0xd4>)
 800b0c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b0cc:	f001 fcd0 	bl	800ca70 <__assert_func>
 800b0d0:	3101      	adds	r1, #1
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	e7ee      	b.n	800b0b4 <__lshift+0x1c>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f100 0114 	add.w	r1, r0, #20
 800b0dc:	f100 0210 	add.w	r2, r0, #16
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	4553      	cmp	r3, sl
 800b0e4:	db33      	blt.n	800b14e <__lshift+0xb6>
 800b0e6:	6920      	ldr	r0, [r4, #16]
 800b0e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0ec:	f104 0314 	add.w	r3, r4, #20
 800b0f0:	f019 091f 	ands.w	r9, r9, #31
 800b0f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0fc:	d02b      	beq.n	800b156 <__lshift+0xbe>
 800b0fe:	f1c9 0e20 	rsb	lr, r9, #32
 800b102:	468a      	mov	sl, r1
 800b104:	2200      	movs	r2, #0
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	fa00 f009 	lsl.w	r0, r0, r9
 800b10c:	4310      	orrs	r0, r2
 800b10e:	f84a 0b04 	str.w	r0, [sl], #4
 800b112:	f853 2b04 	ldr.w	r2, [r3], #4
 800b116:	459c      	cmp	ip, r3
 800b118:	fa22 f20e 	lsr.w	r2, r2, lr
 800b11c:	d8f3      	bhi.n	800b106 <__lshift+0x6e>
 800b11e:	ebac 0304 	sub.w	r3, ip, r4
 800b122:	3b15      	subs	r3, #21
 800b124:	f023 0303 	bic.w	r3, r3, #3
 800b128:	3304      	adds	r3, #4
 800b12a:	f104 0015 	add.w	r0, r4, #21
 800b12e:	4584      	cmp	ip, r0
 800b130:	bf38      	it	cc
 800b132:	2304      	movcc	r3, #4
 800b134:	50ca      	str	r2, [r1, r3]
 800b136:	b10a      	cbz	r2, 800b13c <__lshift+0xa4>
 800b138:	f108 0602 	add.w	r6, r8, #2
 800b13c:	3e01      	subs	r6, #1
 800b13e:	4638      	mov	r0, r7
 800b140:	612e      	str	r6, [r5, #16]
 800b142:	4621      	mov	r1, r4
 800b144:	f7ff fd90 	bl	800ac68 <_Bfree>
 800b148:	4628      	mov	r0, r5
 800b14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b152:	3301      	adds	r3, #1
 800b154:	e7c5      	b.n	800b0e2 <__lshift+0x4a>
 800b156:	3904      	subs	r1, #4
 800b158:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b160:	459c      	cmp	ip, r3
 800b162:	d8f9      	bhi.n	800b158 <__lshift+0xc0>
 800b164:	e7ea      	b.n	800b13c <__lshift+0xa4>
 800b166:	bf00      	nop
 800b168:	0800db19 	.word	0x0800db19
 800b16c:	0800db2a 	.word	0x0800db2a

0800b170 <__mcmp>:
 800b170:	690a      	ldr	r2, [r1, #16]
 800b172:	4603      	mov	r3, r0
 800b174:	6900      	ldr	r0, [r0, #16]
 800b176:	1a80      	subs	r0, r0, r2
 800b178:	b530      	push	{r4, r5, lr}
 800b17a:	d10e      	bne.n	800b19a <__mcmp+0x2a>
 800b17c:	3314      	adds	r3, #20
 800b17e:	3114      	adds	r1, #20
 800b180:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b188:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b18c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b190:	4295      	cmp	r5, r2
 800b192:	d003      	beq.n	800b19c <__mcmp+0x2c>
 800b194:	d205      	bcs.n	800b1a2 <__mcmp+0x32>
 800b196:	f04f 30ff 	mov.w	r0, #4294967295
 800b19a:	bd30      	pop	{r4, r5, pc}
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d3f3      	bcc.n	800b188 <__mcmp+0x18>
 800b1a0:	e7fb      	b.n	800b19a <__mcmp+0x2a>
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	e7f9      	b.n	800b19a <__mcmp+0x2a>
	...

0800b1a8 <__mdiff>:
 800b1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	4689      	mov	r9, r1
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	4648      	mov	r0, r9
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	f7ff ffdb 	bl	800b170 <__mcmp>
 800b1ba:	1e05      	subs	r5, r0, #0
 800b1bc:	d112      	bne.n	800b1e4 <__mdiff+0x3c>
 800b1be:	4629      	mov	r1, r5
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7ff fd11 	bl	800abe8 <_Balloc>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	b928      	cbnz	r0, 800b1d6 <__mdiff+0x2e>
 800b1ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b2c8 <__mdiff+0x120>)
 800b1cc:	f240 2137 	movw	r1, #567	@ 0x237
 800b1d0:	483e      	ldr	r0, [pc, #248]	@ (800b2cc <__mdiff+0x124>)
 800b1d2:	f001 fc4d 	bl	800ca70 <__assert_func>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1dc:	4610      	mov	r0, r2
 800b1de:	b003      	add	sp, #12
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	bfbc      	itt	lt
 800b1e6:	464b      	movlt	r3, r9
 800b1e8:	46a1      	movlt	r9, r4
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b1f0:	bfba      	itte	lt
 800b1f2:	461c      	movlt	r4, r3
 800b1f4:	2501      	movlt	r5, #1
 800b1f6:	2500      	movge	r5, #0
 800b1f8:	f7ff fcf6 	bl	800abe8 <_Balloc>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	b918      	cbnz	r0, 800b208 <__mdiff+0x60>
 800b200:	4b31      	ldr	r3, [pc, #196]	@ (800b2c8 <__mdiff+0x120>)
 800b202:	f240 2145 	movw	r1, #581	@ 0x245
 800b206:	e7e3      	b.n	800b1d0 <__mdiff+0x28>
 800b208:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b20c:	6926      	ldr	r6, [r4, #16]
 800b20e:	60c5      	str	r5, [r0, #12]
 800b210:	f109 0310 	add.w	r3, r9, #16
 800b214:	f109 0514 	add.w	r5, r9, #20
 800b218:	f104 0e14 	add.w	lr, r4, #20
 800b21c:	f100 0b14 	add.w	fp, r0, #20
 800b220:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b224:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	46d9      	mov	r9, fp
 800b22c:	f04f 0c00 	mov.w	ip, #0
 800b230:	9b01      	ldr	r3, [sp, #4]
 800b232:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b236:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	fa1f f38a 	uxth.w	r3, sl
 800b240:	4619      	mov	r1, r3
 800b242:	b283      	uxth	r3, r0
 800b244:	1acb      	subs	r3, r1, r3
 800b246:	0c00      	lsrs	r0, r0, #16
 800b248:	4463      	add	r3, ip
 800b24a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b24e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b252:	b29b      	uxth	r3, r3
 800b254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b258:	4576      	cmp	r6, lr
 800b25a:	f849 3b04 	str.w	r3, [r9], #4
 800b25e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b262:	d8e5      	bhi.n	800b230 <__mdiff+0x88>
 800b264:	1b33      	subs	r3, r6, r4
 800b266:	3b15      	subs	r3, #21
 800b268:	f023 0303 	bic.w	r3, r3, #3
 800b26c:	3415      	adds	r4, #21
 800b26e:	3304      	adds	r3, #4
 800b270:	42a6      	cmp	r6, r4
 800b272:	bf38      	it	cc
 800b274:	2304      	movcc	r3, #4
 800b276:	441d      	add	r5, r3
 800b278:	445b      	add	r3, fp
 800b27a:	461e      	mov	r6, r3
 800b27c:	462c      	mov	r4, r5
 800b27e:	4544      	cmp	r4, r8
 800b280:	d30e      	bcc.n	800b2a0 <__mdiff+0xf8>
 800b282:	f108 0103 	add.w	r1, r8, #3
 800b286:	1b49      	subs	r1, r1, r5
 800b288:	f021 0103 	bic.w	r1, r1, #3
 800b28c:	3d03      	subs	r5, #3
 800b28e:	45a8      	cmp	r8, r5
 800b290:	bf38      	it	cc
 800b292:	2100      	movcc	r1, #0
 800b294:	440b      	add	r3, r1
 800b296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b29a:	b191      	cbz	r1, 800b2c2 <__mdiff+0x11a>
 800b29c:	6117      	str	r7, [r2, #16]
 800b29e:	e79d      	b.n	800b1dc <__mdiff+0x34>
 800b2a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2a4:	46e6      	mov	lr, ip
 800b2a6:	0c08      	lsrs	r0, r1, #16
 800b2a8:	fa1c fc81 	uxtah	ip, ip, r1
 800b2ac:	4471      	add	r1, lr
 800b2ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b2b2:	b289      	uxth	r1, r1
 800b2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b2b8:	f846 1b04 	str.w	r1, [r6], #4
 800b2bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2c0:	e7dd      	b.n	800b27e <__mdiff+0xd6>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	e7e7      	b.n	800b296 <__mdiff+0xee>
 800b2c6:	bf00      	nop
 800b2c8:	0800db19 	.word	0x0800db19
 800b2cc:	0800db2a 	.word	0x0800db2a

0800b2d0 <__ulp>:
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	ed8d 0b00 	vstr	d0, [sp]
 800b2d6:	9a01      	ldr	r2, [sp, #4]
 800b2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800b318 <__ulp+0x48>)
 800b2da:	4013      	ands	r3, r2
 800b2dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dc08      	bgt.n	800b2f6 <__ulp+0x26>
 800b2e4:	425b      	negs	r3, r3
 800b2e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b2ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b2ee:	da04      	bge.n	800b2fa <__ulp+0x2a>
 800b2f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b2f4:	4113      	asrs	r3, r2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	e008      	b.n	800b30c <__ulp+0x3c>
 800b2fa:	f1a2 0314 	sub.w	r3, r2, #20
 800b2fe:	2b1e      	cmp	r3, #30
 800b300:	bfda      	itte	le
 800b302:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b306:	40da      	lsrle	r2, r3
 800b308:	2201      	movgt	r2, #1
 800b30a:	2300      	movs	r3, #0
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	ec41 0b10 	vmov	d0, r0, r1
 800b314:	b002      	add	sp, #8
 800b316:	4770      	bx	lr
 800b318:	7ff00000 	.word	0x7ff00000

0800b31c <__b2d>:
 800b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b320:	6906      	ldr	r6, [r0, #16]
 800b322:	f100 0814 	add.w	r8, r0, #20
 800b326:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b32a:	1f37      	subs	r7, r6, #4
 800b32c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b330:	4610      	mov	r0, r2
 800b332:	f7ff fd4b 	bl	800adcc <__hi0bits>
 800b336:	f1c0 0320 	rsb	r3, r0, #32
 800b33a:	280a      	cmp	r0, #10
 800b33c:	600b      	str	r3, [r1, #0]
 800b33e:	491b      	ldr	r1, [pc, #108]	@ (800b3ac <__b2d+0x90>)
 800b340:	dc15      	bgt.n	800b36e <__b2d+0x52>
 800b342:	f1c0 0c0b 	rsb	ip, r0, #11
 800b346:	fa22 f30c 	lsr.w	r3, r2, ip
 800b34a:	45b8      	cmp	r8, r7
 800b34c:	ea43 0501 	orr.w	r5, r3, r1
 800b350:	bf34      	ite	cc
 800b352:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b356:	2300      	movcs	r3, #0
 800b358:	3015      	adds	r0, #21
 800b35a:	fa02 f000 	lsl.w	r0, r2, r0
 800b35e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b362:	4303      	orrs	r3, r0
 800b364:	461c      	mov	r4, r3
 800b366:	ec45 4b10 	vmov	d0, r4, r5
 800b36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36e:	45b8      	cmp	r8, r7
 800b370:	bf3a      	itte	cc
 800b372:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b376:	f1a6 0708 	subcc.w	r7, r6, #8
 800b37a:	2300      	movcs	r3, #0
 800b37c:	380b      	subs	r0, #11
 800b37e:	d012      	beq.n	800b3a6 <__b2d+0x8a>
 800b380:	f1c0 0120 	rsb	r1, r0, #32
 800b384:	fa23 f401 	lsr.w	r4, r3, r1
 800b388:	4082      	lsls	r2, r0
 800b38a:	4322      	orrs	r2, r4
 800b38c:	4547      	cmp	r7, r8
 800b38e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b392:	bf8c      	ite	hi
 800b394:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b398:	2200      	movls	r2, #0
 800b39a:	4083      	lsls	r3, r0
 800b39c:	40ca      	lsrs	r2, r1
 800b39e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	e7de      	b.n	800b364 <__b2d+0x48>
 800b3a6:	ea42 0501 	orr.w	r5, r2, r1
 800b3aa:	e7db      	b.n	800b364 <__b2d+0x48>
 800b3ac:	3ff00000 	.word	0x3ff00000

0800b3b0 <__d2b>:
 800b3b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3b4:	460f      	mov	r7, r1
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	ec59 8b10 	vmov	r8, r9, d0
 800b3bc:	4616      	mov	r6, r2
 800b3be:	f7ff fc13 	bl	800abe8 <_Balloc>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	b930      	cbnz	r0, 800b3d4 <__d2b+0x24>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4b23      	ldr	r3, [pc, #140]	@ (800b458 <__d2b+0xa8>)
 800b3ca:	4824      	ldr	r0, [pc, #144]	@ (800b45c <__d2b+0xac>)
 800b3cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3d0:	f001 fb4e 	bl	800ca70 <__assert_func>
 800b3d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3dc:	b10d      	cbz	r5, 800b3e2 <__d2b+0x32>
 800b3de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	f1b8 0300 	subs.w	r3, r8, #0
 800b3e8:	d023      	beq.n	800b432 <__d2b+0x82>
 800b3ea:	4668      	mov	r0, sp
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	f7ff fd0c 	bl	800ae0a <__lo0bits>
 800b3f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3f6:	b1d0      	cbz	r0, 800b42e <__d2b+0x7e>
 800b3f8:	f1c0 0320 	rsb	r3, r0, #32
 800b3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b400:	430b      	orrs	r3, r1
 800b402:	40c2      	lsrs	r2, r0
 800b404:	6163      	str	r3, [r4, #20]
 800b406:	9201      	str	r2, [sp, #4]
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	61a3      	str	r3, [r4, #24]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bf0c      	ite	eq
 800b410:	2201      	moveq	r2, #1
 800b412:	2202      	movne	r2, #2
 800b414:	6122      	str	r2, [r4, #16]
 800b416:	b1a5      	cbz	r5, 800b442 <__d2b+0x92>
 800b418:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b41c:	4405      	add	r5, r0
 800b41e:	603d      	str	r5, [r7, #0]
 800b420:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b424:	6030      	str	r0, [r6, #0]
 800b426:	4620      	mov	r0, r4
 800b428:	b003      	add	sp, #12
 800b42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b42e:	6161      	str	r1, [r4, #20]
 800b430:	e7ea      	b.n	800b408 <__d2b+0x58>
 800b432:	a801      	add	r0, sp, #4
 800b434:	f7ff fce9 	bl	800ae0a <__lo0bits>
 800b438:	9b01      	ldr	r3, [sp, #4]
 800b43a:	6163      	str	r3, [r4, #20]
 800b43c:	3020      	adds	r0, #32
 800b43e:	2201      	movs	r2, #1
 800b440:	e7e8      	b.n	800b414 <__d2b+0x64>
 800b442:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b446:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b44a:	6038      	str	r0, [r7, #0]
 800b44c:	6918      	ldr	r0, [r3, #16]
 800b44e:	f7ff fcbd 	bl	800adcc <__hi0bits>
 800b452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b456:	e7e5      	b.n	800b424 <__d2b+0x74>
 800b458:	0800db19 	.word	0x0800db19
 800b45c:	0800db2a 	.word	0x0800db2a

0800b460 <__ratio>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	b085      	sub	sp, #20
 800b466:	e9cd 1000 	strd	r1, r0, [sp]
 800b46a:	a902      	add	r1, sp, #8
 800b46c:	f7ff ff56 	bl	800b31c <__b2d>
 800b470:	9800      	ldr	r0, [sp, #0]
 800b472:	a903      	add	r1, sp, #12
 800b474:	ec55 4b10 	vmov	r4, r5, d0
 800b478:	f7ff ff50 	bl	800b31c <__b2d>
 800b47c:	9b01      	ldr	r3, [sp, #4]
 800b47e:	6919      	ldr	r1, [r3, #16]
 800b480:	9b00      	ldr	r3, [sp, #0]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	1ac9      	subs	r1, r1, r3
 800b486:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	ec5b ab10 	vmov	sl, fp, d0
 800b490:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b494:	2b00      	cmp	r3, #0
 800b496:	bfce      	itee	gt
 800b498:	462a      	movgt	r2, r5
 800b49a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b49e:	465a      	movle	r2, fp
 800b4a0:	462f      	mov	r7, r5
 800b4a2:	46d9      	mov	r9, fp
 800b4a4:	bfcc      	ite	gt
 800b4a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	4652      	mov	r2, sl
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f5 f9e9 	bl	800088c <__aeabi_ddiv>
 800b4ba:	ec41 0b10 	vmov	d0, r0, r1
 800b4be:	b005      	add	sp, #20
 800b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4c4 <__copybits>:
 800b4c4:	3901      	subs	r1, #1
 800b4c6:	b570      	push	{r4, r5, r6, lr}
 800b4c8:	1149      	asrs	r1, r1, #5
 800b4ca:	6914      	ldr	r4, [r2, #16]
 800b4cc:	3101      	adds	r1, #1
 800b4ce:	f102 0314 	add.w	r3, r2, #20
 800b4d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4da:	1f05      	subs	r5, r0, #4
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	d30c      	bcc.n	800b4fa <__copybits+0x36>
 800b4e0:	1aa3      	subs	r3, r4, r2
 800b4e2:	3b11      	subs	r3, #17
 800b4e4:	f023 0303 	bic.w	r3, r3, #3
 800b4e8:	3211      	adds	r2, #17
 800b4ea:	42a2      	cmp	r2, r4
 800b4ec:	bf88      	it	hi
 800b4ee:	2300      	movhi	r3, #0
 800b4f0:	4418      	add	r0, r3
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4288      	cmp	r0, r1
 800b4f6:	d305      	bcc.n	800b504 <__copybits+0x40>
 800b4f8:	bd70      	pop	{r4, r5, r6, pc}
 800b4fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b4fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800b502:	e7eb      	b.n	800b4dc <__copybits+0x18>
 800b504:	f840 3b04 	str.w	r3, [r0], #4
 800b508:	e7f4      	b.n	800b4f4 <__copybits+0x30>

0800b50a <__any_on>:
 800b50a:	f100 0214 	add.w	r2, r0, #20
 800b50e:	6900      	ldr	r0, [r0, #16]
 800b510:	114b      	asrs	r3, r1, #5
 800b512:	4298      	cmp	r0, r3
 800b514:	b510      	push	{r4, lr}
 800b516:	db11      	blt.n	800b53c <__any_on+0x32>
 800b518:	dd0a      	ble.n	800b530 <__any_on+0x26>
 800b51a:	f011 011f 	ands.w	r1, r1, #31
 800b51e:	d007      	beq.n	800b530 <__any_on+0x26>
 800b520:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b524:	fa24 f001 	lsr.w	r0, r4, r1
 800b528:	fa00 f101 	lsl.w	r1, r0, r1
 800b52c:	428c      	cmp	r4, r1
 800b52e:	d10b      	bne.n	800b548 <__any_on+0x3e>
 800b530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b534:	4293      	cmp	r3, r2
 800b536:	d803      	bhi.n	800b540 <__any_on+0x36>
 800b538:	2000      	movs	r0, #0
 800b53a:	bd10      	pop	{r4, pc}
 800b53c:	4603      	mov	r3, r0
 800b53e:	e7f7      	b.n	800b530 <__any_on+0x26>
 800b540:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b544:	2900      	cmp	r1, #0
 800b546:	d0f5      	beq.n	800b534 <__any_on+0x2a>
 800b548:	2001      	movs	r0, #1
 800b54a:	e7f6      	b.n	800b53a <__any_on+0x30>

0800b54c <sulp>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	4604      	mov	r4, r0
 800b550:	460d      	mov	r5, r1
 800b552:	ec45 4b10 	vmov	d0, r4, r5
 800b556:	4616      	mov	r6, r2
 800b558:	f7ff feba 	bl	800b2d0 <__ulp>
 800b55c:	ec51 0b10 	vmov	r0, r1, d0
 800b560:	b17e      	cbz	r6, 800b582 <sulp+0x36>
 800b562:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b566:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dd09      	ble.n	800b582 <sulp+0x36>
 800b56e:	051b      	lsls	r3, r3, #20
 800b570:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b574:	2400      	movs	r4, #0
 800b576:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b57a:	4622      	mov	r2, r4
 800b57c:	462b      	mov	r3, r5
 800b57e:	f7f5 f85b 	bl	8000638 <__aeabi_dmul>
 800b582:	ec41 0b10 	vmov	d0, r0, r1
 800b586:	bd70      	pop	{r4, r5, r6, pc}

0800b588 <_strtod_l>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	b09f      	sub	sp, #124	@ 0x7c
 800b58e:	460c      	mov	r4, r1
 800b590:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b592:	2200      	movs	r2, #0
 800b594:	921a      	str	r2, [sp, #104]	@ 0x68
 800b596:	9005      	str	r0, [sp, #20]
 800b598:	f04f 0a00 	mov.w	sl, #0
 800b59c:	f04f 0b00 	mov.w	fp, #0
 800b5a0:	460a      	mov	r2, r1
 800b5a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5a4:	7811      	ldrb	r1, [r2, #0]
 800b5a6:	292b      	cmp	r1, #43	@ 0x2b
 800b5a8:	d04a      	beq.n	800b640 <_strtod_l+0xb8>
 800b5aa:	d838      	bhi.n	800b61e <_strtod_l+0x96>
 800b5ac:	290d      	cmp	r1, #13
 800b5ae:	d832      	bhi.n	800b616 <_strtod_l+0x8e>
 800b5b0:	2908      	cmp	r1, #8
 800b5b2:	d832      	bhi.n	800b61a <_strtod_l+0x92>
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	d03b      	beq.n	800b630 <_strtod_l+0xa8>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b5bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b5be:	782a      	ldrb	r2, [r5, #0]
 800b5c0:	2a30      	cmp	r2, #48	@ 0x30
 800b5c2:	f040 80b3 	bne.w	800b72c <_strtod_l+0x1a4>
 800b5c6:	786a      	ldrb	r2, [r5, #1]
 800b5c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5cc:	2a58      	cmp	r2, #88	@ 0x58
 800b5ce:	d16e      	bne.n	800b6ae <_strtod_l+0x126>
 800b5d0:	9302      	str	r3, [sp, #8]
 800b5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	4a8e      	ldr	r2, [pc, #568]	@ (800b814 <_strtod_l+0x28c>)
 800b5dc:	9805      	ldr	r0, [sp, #20]
 800b5de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b5e0:	a919      	add	r1, sp, #100	@ 0x64
 800b5e2:	f001 fadf 	bl	800cba4 <__gethex>
 800b5e6:	f010 060f 	ands.w	r6, r0, #15
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	d005      	beq.n	800b5fa <_strtod_l+0x72>
 800b5ee:	2e06      	cmp	r6, #6
 800b5f0:	d128      	bne.n	800b644 <_strtod_l+0xbc>
 800b5f2:	3501      	adds	r5, #1
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f040 858e 	bne.w	800c11e <_strtod_l+0xb96>
 800b602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b604:	b1cb      	cbz	r3, 800b63a <_strtod_l+0xb2>
 800b606:	4652      	mov	r2, sl
 800b608:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b60c:	ec43 2b10 	vmov	d0, r2, r3
 800b610:	b01f      	add	sp, #124	@ 0x7c
 800b612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b616:	2920      	cmp	r1, #32
 800b618:	d1ce      	bne.n	800b5b8 <_strtod_l+0x30>
 800b61a:	3201      	adds	r2, #1
 800b61c:	e7c1      	b.n	800b5a2 <_strtod_l+0x1a>
 800b61e:	292d      	cmp	r1, #45	@ 0x2d
 800b620:	d1ca      	bne.n	800b5b8 <_strtod_l+0x30>
 800b622:	2101      	movs	r1, #1
 800b624:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b626:	1c51      	adds	r1, r2, #1
 800b628:	9119      	str	r1, [sp, #100]	@ 0x64
 800b62a:	7852      	ldrb	r2, [r2, #1]
 800b62c:	2a00      	cmp	r2, #0
 800b62e:	d1c5      	bne.n	800b5bc <_strtod_l+0x34>
 800b630:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b632:	9419      	str	r4, [sp, #100]	@ 0x64
 800b634:	2b00      	cmp	r3, #0
 800b636:	f040 8570 	bne.w	800c11a <_strtod_l+0xb92>
 800b63a:	4652      	mov	r2, sl
 800b63c:	465b      	mov	r3, fp
 800b63e:	e7e5      	b.n	800b60c <_strtod_l+0x84>
 800b640:	2100      	movs	r1, #0
 800b642:	e7ef      	b.n	800b624 <_strtod_l+0x9c>
 800b644:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b646:	b13a      	cbz	r2, 800b658 <_strtod_l+0xd0>
 800b648:	2135      	movs	r1, #53	@ 0x35
 800b64a:	a81c      	add	r0, sp, #112	@ 0x70
 800b64c:	f7ff ff3a 	bl	800b4c4 <__copybits>
 800b650:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b652:	9805      	ldr	r0, [sp, #20]
 800b654:	f7ff fb08 	bl	800ac68 <_Bfree>
 800b658:	3e01      	subs	r6, #1
 800b65a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b65c:	2e04      	cmp	r6, #4
 800b65e:	d806      	bhi.n	800b66e <_strtod_l+0xe6>
 800b660:	e8df f006 	tbb	[pc, r6]
 800b664:	201d0314 	.word	0x201d0314
 800b668:	14          	.byte	0x14
 800b669:	00          	.byte	0x00
 800b66a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b66e:	05e1      	lsls	r1, r4, #23
 800b670:	bf48      	it	mi
 800b672:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b676:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b67a:	0d1b      	lsrs	r3, r3, #20
 800b67c:	051b      	lsls	r3, r3, #20
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1bb      	bne.n	800b5fa <_strtod_l+0x72>
 800b682:	f7fe fb21 	bl	8009cc8 <__errno>
 800b686:	2322      	movs	r3, #34	@ 0x22
 800b688:	6003      	str	r3, [r0, #0]
 800b68a:	e7b6      	b.n	800b5fa <_strtod_l+0x72>
 800b68c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b690:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b694:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b698:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b69c:	e7e7      	b.n	800b66e <_strtod_l+0xe6>
 800b69e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b81c <_strtod_l+0x294>
 800b6a2:	e7e4      	b.n	800b66e <_strtod_l+0xe6>
 800b6a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b6a8:	f04f 3aff 	mov.w	sl, #4294967295
 800b6ac:	e7df      	b.n	800b66e <_strtod_l+0xe6>
 800b6ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	2b30      	cmp	r3, #48	@ 0x30
 800b6b8:	d0f9      	beq.n	800b6ae <_strtod_l+0x126>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d09d      	beq.n	800b5fa <_strtod_l+0x72>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	9308      	str	r3, [sp, #32]
 800b6ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6cc:	461f      	mov	r7, r3
 800b6ce:	220a      	movs	r2, #10
 800b6d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b6d2:	7805      	ldrb	r5, [r0, #0]
 800b6d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b6d8:	b2d9      	uxtb	r1, r3
 800b6da:	2909      	cmp	r1, #9
 800b6dc:	d928      	bls.n	800b730 <_strtod_l+0x1a8>
 800b6de:	494e      	ldr	r1, [pc, #312]	@ (800b818 <_strtod_l+0x290>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f001 f979 	bl	800c9d8 <strncmp>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d032      	beq.n	800b750 <_strtod_l+0x1c8>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	4681      	mov	r9, r0
 800b6f0:	463d      	mov	r5, r7
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2a65      	cmp	r2, #101	@ 0x65
 800b6f6:	d001      	beq.n	800b6fc <_strtod_l+0x174>
 800b6f8:	2a45      	cmp	r2, #69	@ 0x45
 800b6fa:	d114      	bne.n	800b726 <_strtod_l+0x19e>
 800b6fc:	b91d      	cbnz	r5, 800b706 <_strtod_l+0x17e>
 800b6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b700:	4302      	orrs	r2, r0
 800b702:	d095      	beq.n	800b630 <_strtod_l+0xa8>
 800b704:	2500      	movs	r5, #0
 800b706:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b708:	1c62      	adds	r2, r4, #1
 800b70a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b70c:	7862      	ldrb	r2, [r4, #1]
 800b70e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b710:	d077      	beq.n	800b802 <_strtod_l+0x27a>
 800b712:	2a2d      	cmp	r2, #45	@ 0x2d
 800b714:	d07b      	beq.n	800b80e <_strtod_l+0x286>
 800b716:	f04f 0c00 	mov.w	ip, #0
 800b71a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b71e:	2909      	cmp	r1, #9
 800b720:	f240 8082 	bls.w	800b828 <_strtod_l+0x2a0>
 800b724:	9419      	str	r4, [sp, #100]	@ 0x64
 800b726:	f04f 0800 	mov.w	r8, #0
 800b72a:	e0a2      	b.n	800b872 <_strtod_l+0x2ea>
 800b72c:	2300      	movs	r3, #0
 800b72e:	e7c7      	b.n	800b6c0 <_strtod_l+0x138>
 800b730:	2f08      	cmp	r7, #8
 800b732:	bfd5      	itete	le
 800b734:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b736:	9908      	ldrgt	r1, [sp, #32]
 800b738:	fb02 3301 	mlale	r3, r2, r1, r3
 800b73c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b740:	f100 0001 	add.w	r0, r0, #1
 800b744:	bfd4      	ite	le
 800b746:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b748:	9308      	strgt	r3, [sp, #32]
 800b74a:	3701      	adds	r7, #1
 800b74c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b74e:	e7bf      	b.n	800b6d0 <_strtod_l+0x148>
 800b750:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	9219      	str	r2, [sp, #100]	@ 0x64
 800b756:	785a      	ldrb	r2, [r3, #1]
 800b758:	b37f      	cbz	r7, 800b7ba <_strtod_l+0x232>
 800b75a:	4681      	mov	r9, r0
 800b75c:	463d      	mov	r5, r7
 800b75e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b762:	2b09      	cmp	r3, #9
 800b764:	d912      	bls.n	800b78c <_strtod_l+0x204>
 800b766:	2301      	movs	r3, #1
 800b768:	e7c4      	b.n	800b6f4 <_strtod_l+0x16c>
 800b76a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b76c:	1c5a      	adds	r2, r3, #1
 800b76e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b770:	785a      	ldrb	r2, [r3, #1]
 800b772:	3001      	adds	r0, #1
 800b774:	2a30      	cmp	r2, #48	@ 0x30
 800b776:	d0f8      	beq.n	800b76a <_strtod_l+0x1e2>
 800b778:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	f200 84d3 	bhi.w	800c128 <_strtod_l+0xba0>
 800b782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b784:	930c      	str	r3, [sp, #48]	@ 0x30
 800b786:	4681      	mov	r9, r0
 800b788:	2000      	movs	r0, #0
 800b78a:	4605      	mov	r5, r0
 800b78c:	3a30      	subs	r2, #48	@ 0x30
 800b78e:	f100 0301 	add.w	r3, r0, #1
 800b792:	d02a      	beq.n	800b7ea <_strtod_l+0x262>
 800b794:	4499      	add	r9, r3
 800b796:	eb00 0c05 	add.w	ip, r0, r5
 800b79a:	462b      	mov	r3, r5
 800b79c:	210a      	movs	r1, #10
 800b79e:	4563      	cmp	r3, ip
 800b7a0:	d10d      	bne.n	800b7be <_strtod_l+0x236>
 800b7a2:	1c69      	adds	r1, r5, #1
 800b7a4:	4401      	add	r1, r0
 800b7a6:	4428      	add	r0, r5
 800b7a8:	2808      	cmp	r0, #8
 800b7aa:	dc16      	bgt.n	800b7da <_strtod_l+0x252>
 800b7ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7ae:	230a      	movs	r3, #10
 800b7b0:	fb03 2300 	mla	r3, r3, r0, r2
 800b7b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e018      	b.n	800b7ec <_strtod_l+0x264>
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	e7da      	b.n	800b774 <_strtod_l+0x1ec>
 800b7be:	2b08      	cmp	r3, #8
 800b7c0:	f103 0301 	add.w	r3, r3, #1
 800b7c4:	dc03      	bgt.n	800b7ce <_strtod_l+0x246>
 800b7c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b7c8:	434e      	muls	r6, r1
 800b7ca:	960a      	str	r6, [sp, #40]	@ 0x28
 800b7cc:	e7e7      	b.n	800b79e <_strtod_l+0x216>
 800b7ce:	2b10      	cmp	r3, #16
 800b7d0:	bfde      	ittt	le
 800b7d2:	9e08      	ldrle	r6, [sp, #32]
 800b7d4:	434e      	mulle	r6, r1
 800b7d6:	9608      	strle	r6, [sp, #32]
 800b7d8:	e7e1      	b.n	800b79e <_strtod_l+0x216>
 800b7da:	280f      	cmp	r0, #15
 800b7dc:	dceb      	bgt.n	800b7b6 <_strtod_l+0x22e>
 800b7de:	9808      	ldr	r0, [sp, #32]
 800b7e0:	230a      	movs	r3, #10
 800b7e2:	fb03 2300 	mla	r3, r3, r0, r2
 800b7e6:	9308      	str	r3, [sp, #32]
 800b7e8:	e7e5      	b.n	800b7b6 <_strtod_l+0x22e>
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b7ee:	1c50      	adds	r0, r2, #1
 800b7f0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7f2:	7852      	ldrb	r2, [r2, #1]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	e7b1      	b.n	800b75e <_strtod_l+0x1d6>
 800b7fa:	f04f 0900 	mov.w	r9, #0
 800b7fe:	2301      	movs	r3, #1
 800b800:	e77d      	b.n	800b6fe <_strtod_l+0x176>
 800b802:	f04f 0c00 	mov.w	ip, #0
 800b806:	1ca2      	adds	r2, r4, #2
 800b808:	9219      	str	r2, [sp, #100]	@ 0x64
 800b80a:	78a2      	ldrb	r2, [r4, #2]
 800b80c:	e785      	b.n	800b71a <_strtod_l+0x192>
 800b80e:	f04f 0c01 	mov.w	ip, #1
 800b812:	e7f8      	b.n	800b806 <_strtod_l+0x27e>
 800b814:	0800dc98 	.word	0x0800dc98
 800b818:	0800dc80 	.word	0x0800dc80
 800b81c:	7ff00000 	.word	0x7ff00000
 800b820:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b822:	1c51      	adds	r1, r2, #1
 800b824:	9119      	str	r1, [sp, #100]	@ 0x64
 800b826:	7852      	ldrb	r2, [r2, #1]
 800b828:	2a30      	cmp	r2, #48	@ 0x30
 800b82a:	d0f9      	beq.n	800b820 <_strtod_l+0x298>
 800b82c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b830:	2908      	cmp	r1, #8
 800b832:	f63f af78 	bhi.w	800b726 <_strtod_l+0x19e>
 800b836:	3a30      	subs	r2, #48	@ 0x30
 800b838:	920e      	str	r2, [sp, #56]	@ 0x38
 800b83a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b83c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b83e:	f04f 080a 	mov.w	r8, #10
 800b842:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b844:	1c56      	adds	r6, r2, #1
 800b846:	9619      	str	r6, [sp, #100]	@ 0x64
 800b848:	7852      	ldrb	r2, [r2, #1]
 800b84a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b84e:	f1be 0f09 	cmp.w	lr, #9
 800b852:	d939      	bls.n	800b8c8 <_strtod_l+0x340>
 800b854:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b856:	1a76      	subs	r6, r6, r1
 800b858:	2e08      	cmp	r6, #8
 800b85a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b85e:	dc03      	bgt.n	800b868 <_strtod_l+0x2e0>
 800b860:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b862:	4588      	cmp	r8, r1
 800b864:	bfa8      	it	ge
 800b866:	4688      	movge	r8, r1
 800b868:	f1bc 0f00 	cmp.w	ip, #0
 800b86c:	d001      	beq.n	800b872 <_strtod_l+0x2ea>
 800b86e:	f1c8 0800 	rsb	r8, r8, #0
 800b872:	2d00      	cmp	r5, #0
 800b874:	d14e      	bne.n	800b914 <_strtod_l+0x38c>
 800b876:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b878:	4308      	orrs	r0, r1
 800b87a:	f47f aebe 	bne.w	800b5fa <_strtod_l+0x72>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f47f aed6 	bne.w	800b630 <_strtod_l+0xa8>
 800b884:	2a69      	cmp	r2, #105	@ 0x69
 800b886:	d028      	beq.n	800b8da <_strtod_l+0x352>
 800b888:	dc25      	bgt.n	800b8d6 <_strtod_l+0x34e>
 800b88a:	2a49      	cmp	r2, #73	@ 0x49
 800b88c:	d025      	beq.n	800b8da <_strtod_l+0x352>
 800b88e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b890:	f47f aece 	bne.w	800b630 <_strtod_l+0xa8>
 800b894:	499b      	ldr	r1, [pc, #620]	@ (800bb04 <_strtod_l+0x57c>)
 800b896:	a819      	add	r0, sp, #100	@ 0x64
 800b898:	f001 fba6 	bl	800cfe8 <__match>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	f43f aec7 	beq.w	800b630 <_strtod_l+0xa8>
 800b8a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b28      	cmp	r3, #40	@ 0x28
 800b8a8:	d12e      	bne.n	800b908 <_strtod_l+0x380>
 800b8aa:	4997      	ldr	r1, [pc, #604]	@ (800bb08 <_strtod_l+0x580>)
 800b8ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800b8ae:	a819      	add	r0, sp, #100	@ 0x64
 800b8b0:	f001 fbae 	bl	800d010 <__hexnan>
 800b8b4:	2805      	cmp	r0, #5
 800b8b6:	d127      	bne.n	800b908 <_strtod_l+0x380>
 800b8b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b8be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b8c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b8c6:	e698      	b.n	800b5fa <_strtod_l+0x72>
 800b8c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8ca:	fb08 2101 	mla	r1, r8, r1, r2
 800b8ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b8d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8d4:	e7b5      	b.n	800b842 <_strtod_l+0x2ba>
 800b8d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800b8d8:	e7da      	b.n	800b890 <_strtod_l+0x308>
 800b8da:	498c      	ldr	r1, [pc, #560]	@ (800bb0c <_strtod_l+0x584>)
 800b8dc:	a819      	add	r0, sp, #100	@ 0x64
 800b8de:	f001 fb83 	bl	800cfe8 <__match>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	f43f aea4 	beq.w	800b630 <_strtod_l+0xa8>
 800b8e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8ea:	4989      	ldr	r1, [pc, #548]	@ (800bb10 <_strtod_l+0x588>)
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	a819      	add	r0, sp, #100	@ 0x64
 800b8f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8f2:	f001 fb79 	bl	800cfe8 <__match>
 800b8f6:	b910      	cbnz	r0, 800b8fe <_strtod_l+0x376>
 800b8f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bb20 <_strtod_l+0x598>
 800b902:	f04f 0a00 	mov.w	sl, #0
 800b906:	e678      	b.n	800b5fa <_strtod_l+0x72>
 800b908:	4882      	ldr	r0, [pc, #520]	@ (800bb14 <_strtod_l+0x58c>)
 800b90a:	f001 f8a9 	bl	800ca60 <nan>
 800b90e:	ec5b ab10 	vmov	sl, fp, d0
 800b912:	e672      	b.n	800b5fa <_strtod_l+0x72>
 800b914:	eba8 0309 	sub.w	r3, r8, r9
 800b918:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91c:	2f00      	cmp	r7, #0
 800b91e:	bf08      	it	eq
 800b920:	462f      	moveq	r7, r5
 800b922:	2d10      	cmp	r5, #16
 800b924:	462c      	mov	r4, r5
 800b926:	bfa8      	it	ge
 800b928:	2410      	movge	r4, #16
 800b92a:	f7f4 fe0b 	bl	8000544 <__aeabi_ui2d>
 800b92e:	2d09      	cmp	r5, #9
 800b930:	4682      	mov	sl, r0
 800b932:	468b      	mov	fp, r1
 800b934:	dc13      	bgt.n	800b95e <_strtod_l+0x3d6>
 800b936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f43f ae5e 	beq.w	800b5fa <_strtod_l+0x72>
 800b93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b940:	dd78      	ble.n	800ba34 <_strtod_l+0x4ac>
 800b942:	2b16      	cmp	r3, #22
 800b944:	dc5f      	bgt.n	800ba06 <_strtod_l+0x47e>
 800b946:	4974      	ldr	r1, [pc, #464]	@ (800bb18 <_strtod_l+0x590>)
 800b948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b950:	4652      	mov	r2, sl
 800b952:	465b      	mov	r3, fp
 800b954:	f7f4 fe70 	bl	8000638 <__aeabi_dmul>
 800b958:	4682      	mov	sl, r0
 800b95a:	468b      	mov	fp, r1
 800b95c:	e64d      	b.n	800b5fa <_strtod_l+0x72>
 800b95e:	4b6e      	ldr	r3, [pc, #440]	@ (800bb18 <_strtod_l+0x590>)
 800b960:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b964:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b968:	f7f4 fe66 	bl	8000638 <__aeabi_dmul>
 800b96c:	4682      	mov	sl, r0
 800b96e:	9808      	ldr	r0, [sp, #32]
 800b970:	468b      	mov	fp, r1
 800b972:	f7f4 fde7 	bl	8000544 <__aeabi_ui2d>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4650      	mov	r0, sl
 800b97c:	4659      	mov	r1, fp
 800b97e:	f7f4 fca5 	bl	80002cc <__adddf3>
 800b982:	2d0f      	cmp	r5, #15
 800b984:	4682      	mov	sl, r0
 800b986:	468b      	mov	fp, r1
 800b988:	ddd5      	ble.n	800b936 <_strtod_l+0x3ae>
 800b98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b98c:	1b2c      	subs	r4, r5, r4
 800b98e:	441c      	add	r4, r3
 800b990:	2c00      	cmp	r4, #0
 800b992:	f340 8096 	ble.w	800bac2 <_strtod_l+0x53a>
 800b996:	f014 030f 	ands.w	r3, r4, #15
 800b99a:	d00a      	beq.n	800b9b2 <_strtod_l+0x42a>
 800b99c:	495e      	ldr	r1, [pc, #376]	@ (800bb18 <_strtod_l+0x590>)
 800b99e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9a2:	4652      	mov	r2, sl
 800b9a4:	465b      	mov	r3, fp
 800b9a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9aa:	f7f4 fe45 	bl	8000638 <__aeabi_dmul>
 800b9ae:	4682      	mov	sl, r0
 800b9b0:	468b      	mov	fp, r1
 800b9b2:	f034 040f 	bics.w	r4, r4, #15
 800b9b6:	d073      	beq.n	800baa0 <_strtod_l+0x518>
 800b9b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b9bc:	dd48      	ble.n	800ba50 <_strtod_l+0x4c8>
 800b9be:	2400      	movs	r4, #0
 800b9c0:	46a0      	mov	r8, r4
 800b9c2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9c4:	46a1      	mov	r9, r4
 800b9c6:	9a05      	ldr	r2, [sp, #20]
 800b9c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bb20 <_strtod_l+0x598>
 800b9cc:	2322      	movs	r3, #34	@ 0x22
 800b9ce:	6013      	str	r3, [r2, #0]
 800b9d0:	f04f 0a00 	mov.w	sl, #0
 800b9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f43f ae0f 	beq.w	800b5fa <_strtod_l+0x72>
 800b9dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9de:	9805      	ldr	r0, [sp, #20]
 800b9e0:	f7ff f942 	bl	800ac68 <_Bfree>
 800b9e4:	9805      	ldr	r0, [sp, #20]
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7ff f93e 	bl	800ac68 <_Bfree>
 800b9ec:	9805      	ldr	r0, [sp, #20]
 800b9ee:	4641      	mov	r1, r8
 800b9f0:	f7ff f93a 	bl	800ac68 <_Bfree>
 800b9f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9f6:	9805      	ldr	r0, [sp, #20]
 800b9f8:	f7ff f936 	bl	800ac68 <_Bfree>
 800b9fc:	9805      	ldr	r0, [sp, #20]
 800b9fe:	4621      	mov	r1, r4
 800ba00:	f7ff f932 	bl	800ac68 <_Bfree>
 800ba04:	e5f9      	b.n	800b5fa <_strtod_l+0x72>
 800ba06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	dbbc      	blt.n	800b98a <_strtod_l+0x402>
 800ba10:	4c41      	ldr	r4, [pc, #260]	@ (800bb18 <_strtod_l+0x590>)
 800ba12:	f1c5 050f 	rsb	r5, r5, #15
 800ba16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba1a:	4652      	mov	r2, sl
 800ba1c:	465b      	mov	r3, fp
 800ba1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba22:	f7f4 fe09 	bl	8000638 <__aeabi_dmul>
 800ba26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba28:	1b5d      	subs	r5, r3, r5
 800ba2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba32:	e78f      	b.n	800b954 <_strtod_l+0x3cc>
 800ba34:	3316      	adds	r3, #22
 800ba36:	dba8      	blt.n	800b98a <_strtod_l+0x402>
 800ba38:	4b37      	ldr	r3, [pc, #220]	@ (800bb18 <_strtod_l+0x590>)
 800ba3a:	eba9 0808 	sub.w	r8, r9, r8
 800ba3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ba42:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba46:	4650      	mov	r0, sl
 800ba48:	4659      	mov	r1, fp
 800ba4a:	f7f4 ff1f 	bl	800088c <__aeabi_ddiv>
 800ba4e:	e783      	b.n	800b958 <_strtod_l+0x3d0>
 800ba50:	4b32      	ldr	r3, [pc, #200]	@ (800bb1c <_strtod_l+0x594>)
 800ba52:	9308      	str	r3, [sp, #32]
 800ba54:	2300      	movs	r3, #0
 800ba56:	1124      	asrs	r4, r4, #4
 800ba58:	4650      	mov	r0, sl
 800ba5a:	4659      	mov	r1, fp
 800ba5c:	461e      	mov	r6, r3
 800ba5e:	2c01      	cmp	r4, #1
 800ba60:	dc21      	bgt.n	800baa6 <_strtod_l+0x51e>
 800ba62:	b10b      	cbz	r3, 800ba68 <_strtod_l+0x4e0>
 800ba64:	4682      	mov	sl, r0
 800ba66:	468b      	mov	fp, r1
 800ba68:	492c      	ldr	r1, [pc, #176]	@ (800bb1c <_strtod_l+0x594>)
 800ba6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba72:	4652      	mov	r2, sl
 800ba74:	465b      	mov	r3, fp
 800ba76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba7a:	f7f4 fddd 	bl	8000638 <__aeabi_dmul>
 800ba7e:	4b28      	ldr	r3, [pc, #160]	@ (800bb20 <_strtod_l+0x598>)
 800ba80:	460a      	mov	r2, r1
 800ba82:	400b      	ands	r3, r1
 800ba84:	4927      	ldr	r1, [pc, #156]	@ (800bb24 <_strtod_l+0x59c>)
 800ba86:	428b      	cmp	r3, r1
 800ba88:	4682      	mov	sl, r0
 800ba8a:	d898      	bhi.n	800b9be <_strtod_l+0x436>
 800ba8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ba90:	428b      	cmp	r3, r1
 800ba92:	bf86      	itte	hi
 800ba94:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bb28 <_strtod_l+0x5a0>
 800ba98:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800baa0:	2300      	movs	r3, #0
 800baa2:	9308      	str	r3, [sp, #32]
 800baa4:	e07a      	b.n	800bb9c <_strtod_l+0x614>
 800baa6:	07e2      	lsls	r2, r4, #31
 800baa8:	d505      	bpl.n	800bab6 <_strtod_l+0x52e>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f7f4 fdc2 	bl	8000638 <__aeabi_dmul>
 800bab4:	2301      	movs	r3, #1
 800bab6:	9a08      	ldr	r2, [sp, #32]
 800bab8:	3208      	adds	r2, #8
 800baba:	3601      	adds	r6, #1
 800babc:	1064      	asrs	r4, r4, #1
 800babe:	9208      	str	r2, [sp, #32]
 800bac0:	e7cd      	b.n	800ba5e <_strtod_l+0x4d6>
 800bac2:	d0ed      	beq.n	800baa0 <_strtod_l+0x518>
 800bac4:	4264      	negs	r4, r4
 800bac6:	f014 020f 	ands.w	r2, r4, #15
 800baca:	d00a      	beq.n	800bae2 <_strtod_l+0x55a>
 800bacc:	4b12      	ldr	r3, [pc, #72]	@ (800bb18 <_strtod_l+0x590>)
 800bace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bad2:	4650      	mov	r0, sl
 800bad4:	4659      	mov	r1, fp
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	f7f4 fed7 	bl	800088c <__aeabi_ddiv>
 800bade:	4682      	mov	sl, r0
 800bae0:	468b      	mov	fp, r1
 800bae2:	1124      	asrs	r4, r4, #4
 800bae4:	d0dc      	beq.n	800baa0 <_strtod_l+0x518>
 800bae6:	2c1f      	cmp	r4, #31
 800bae8:	dd20      	ble.n	800bb2c <_strtod_l+0x5a4>
 800baea:	2400      	movs	r4, #0
 800baec:	46a0      	mov	r8, r4
 800baee:	940a      	str	r4, [sp, #40]	@ 0x28
 800baf0:	46a1      	mov	r9, r4
 800baf2:	9a05      	ldr	r2, [sp, #20]
 800baf4:	2322      	movs	r3, #34	@ 0x22
 800baf6:	f04f 0a00 	mov.w	sl, #0
 800bafa:	f04f 0b00 	mov.w	fp, #0
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	e768      	b.n	800b9d4 <_strtod_l+0x44c>
 800bb02:	bf00      	nop
 800bb04:	0800da71 	.word	0x0800da71
 800bb08:	0800dc84 	.word	0x0800dc84
 800bb0c:	0800da69 	.word	0x0800da69
 800bb10:	0800daa0 	.word	0x0800daa0
 800bb14:	0800de2d 	.word	0x0800de2d
 800bb18:	0800dbb8 	.word	0x0800dbb8
 800bb1c:	0800db90 	.word	0x0800db90
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	7ca00000 	.word	0x7ca00000
 800bb28:	7fefffff 	.word	0x7fefffff
 800bb2c:	f014 0310 	ands.w	r3, r4, #16
 800bb30:	bf18      	it	ne
 800bb32:	236a      	movne	r3, #106	@ 0x6a
 800bb34:	4ea9      	ldr	r6, [pc, #676]	@ (800bddc <_strtod_l+0x854>)
 800bb36:	9308      	str	r3, [sp, #32]
 800bb38:	4650      	mov	r0, sl
 800bb3a:	4659      	mov	r1, fp
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	07e2      	lsls	r2, r4, #31
 800bb40:	d504      	bpl.n	800bb4c <_strtod_l+0x5c4>
 800bb42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb46:	f7f4 fd77 	bl	8000638 <__aeabi_dmul>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	1064      	asrs	r4, r4, #1
 800bb4e:	f106 0608 	add.w	r6, r6, #8
 800bb52:	d1f4      	bne.n	800bb3e <_strtod_l+0x5b6>
 800bb54:	b10b      	cbz	r3, 800bb5a <_strtod_l+0x5d2>
 800bb56:	4682      	mov	sl, r0
 800bb58:	468b      	mov	fp, r1
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	b1b3      	cbz	r3, 800bb8c <_strtod_l+0x604>
 800bb5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	4659      	mov	r1, fp
 800bb6a:	dd0f      	ble.n	800bb8c <_strtod_l+0x604>
 800bb6c:	2b1f      	cmp	r3, #31
 800bb6e:	dd55      	ble.n	800bc1c <_strtod_l+0x694>
 800bb70:	2b34      	cmp	r3, #52	@ 0x34
 800bb72:	bfde      	ittt	le
 800bb74:	f04f 33ff 	movle.w	r3, #4294967295
 800bb78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bb7c:	4093      	lslle	r3, r2
 800bb7e:	f04f 0a00 	mov.w	sl, #0
 800bb82:	bfcc      	ite	gt
 800bb84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bb88:	ea03 0b01 	andle.w	fp, r3, r1
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2300      	movs	r3, #0
 800bb90:	4650      	mov	r0, sl
 800bb92:	4659      	mov	r1, fp
 800bb94:	f7f4 ffb8 	bl	8000b08 <__aeabi_dcmpeq>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d1a6      	bne.n	800baea <_strtod_l+0x562>
 800bb9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bba2:	9805      	ldr	r0, [sp, #20]
 800bba4:	462b      	mov	r3, r5
 800bba6:	463a      	mov	r2, r7
 800bba8:	f7ff f8c6 	bl	800ad38 <__s2b>
 800bbac:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f43f af05 	beq.w	800b9be <_strtod_l+0x436>
 800bbb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb6:	2a00      	cmp	r2, #0
 800bbb8:	eba9 0308 	sub.w	r3, r9, r8
 800bbbc:	bfa8      	it	ge
 800bbbe:	2300      	movge	r3, #0
 800bbc0:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbc2:	2400      	movs	r4, #0
 800bbc4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bbc8:	9316      	str	r3, [sp, #88]	@ 0x58
 800bbca:	46a0      	mov	r8, r4
 800bbcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbce:	9805      	ldr	r0, [sp, #20]
 800bbd0:	6859      	ldr	r1, [r3, #4]
 800bbd2:	f7ff f809 	bl	800abe8 <_Balloc>
 800bbd6:	4681      	mov	r9, r0
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	f43f aef4 	beq.w	800b9c6 <_strtod_l+0x43e>
 800bbde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbe0:	691a      	ldr	r2, [r3, #16]
 800bbe2:	3202      	adds	r2, #2
 800bbe4:	f103 010c 	add.w	r1, r3, #12
 800bbe8:	0092      	lsls	r2, r2, #2
 800bbea:	300c      	adds	r0, #12
 800bbec:	f7fe f899 	bl	8009d22 <memcpy>
 800bbf0:	ec4b ab10 	vmov	d0, sl, fp
 800bbf4:	9805      	ldr	r0, [sp, #20]
 800bbf6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbf8:	a91b      	add	r1, sp, #108	@ 0x6c
 800bbfa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bbfe:	f7ff fbd7 	bl	800b3b0 <__d2b>
 800bc02:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f43f aede 	beq.w	800b9c6 <_strtod_l+0x43e>
 800bc0a:	9805      	ldr	r0, [sp, #20]
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	f7ff f929 	bl	800ae64 <__i2b>
 800bc12:	4680      	mov	r8, r0
 800bc14:	b948      	cbnz	r0, 800bc2a <_strtod_l+0x6a2>
 800bc16:	f04f 0800 	mov.w	r8, #0
 800bc1a:	e6d4      	b.n	800b9c6 <_strtod_l+0x43e>
 800bc1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc20:	fa02 f303 	lsl.w	r3, r2, r3
 800bc24:	ea03 0a0a 	and.w	sl, r3, sl
 800bc28:	e7b0      	b.n	800bb8c <_strtod_l+0x604>
 800bc2a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bc2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	bfab      	itete	ge
 800bc32:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bc34:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bc36:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bc38:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bc3a:	bfac      	ite	ge
 800bc3c:	18ef      	addge	r7, r5, r3
 800bc3e:	1b5e      	sublt	r6, r3, r5
 800bc40:	9b08      	ldr	r3, [sp, #32]
 800bc42:	1aed      	subs	r5, r5, r3
 800bc44:	4415      	add	r5, r2
 800bc46:	4b66      	ldr	r3, [pc, #408]	@ (800bde0 <_strtod_l+0x858>)
 800bc48:	3d01      	subs	r5, #1
 800bc4a:	429d      	cmp	r5, r3
 800bc4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc50:	da50      	bge.n	800bcf4 <_strtod_l+0x76c>
 800bc52:	1b5b      	subs	r3, r3, r5
 800bc54:	2b1f      	cmp	r3, #31
 800bc56:	eba2 0203 	sub.w	r2, r2, r3
 800bc5a:	f04f 0101 	mov.w	r1, #1
 800bc5e:	dc3d      	bgt.n	800bcdc <_strtod_l+0x754>
 800bc60:	fa01 f303 	lsl.w	r3, r1, r3
 800bc64:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc66:	2300      	movs	r3, #0
 800bc68:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc6a:	18bd      	adds	r5, r7, r2
 800bc6c:	9b08      	ldr	r3, [sp, #32]
 800bc6e:	42af      	cmp	r7, r5
 800bc70:	4416      	add	r6, r2
 800bc72:	441e      	add	r6, r3
 800bc74:	463b      	mov	r3, r7
 800bc76:	bfa8      	it	ge
 800bc78:	462b      	movge	r3, r5
 800bc7a:	42b3      	cmp	r3, r6
 800bc7c:	bfa8      	it	ge
 800bc7e:	4633      	movge	r3, r6
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bfc2      	ittt	gt
 800bc84:	1aed      	subgt	r5, r5, r3
 800bc86:	1af6      	subgt	r6, r6, r3
 800bc88:	1aff      	subgt	r7, r7, r3
 800bc8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dd16      	ble.n	800bcbe <_strtod_l+0x736>
 800bc90:	4641      	mov	r1, r8
 800bc92:	9805      	ldr	r0, [sp, #20]
 800bc94:	461a      	mov	r2, r3
 800bc96:	f7ff f9a5 	bl	800afe4 <__pow5mult>
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d0ba      	beq.n	800bc16 <_strtod_l+0x68e>
 800bca0:	4601      	mov	r1, r0
 800bca2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bca4:	9805      	ldr	r0, [sp, #20]
 800bca6:	f7ff f8f3 	bl	800ae90 <__multiply>
 800bcaa:	900e      	str	r0, [sp, #56]	@ 0x38
 800bcac:	2800      	cmp	r0, #0
 800bcae:	f43f ae8a 	beq.w	800b9c6 <_strtod_l+0x43e>
 800bcb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcb4:	9805      	ldr	r0, [sp, #20]
 800bcb6:	f7fe ffd7 	bl	800ac68 <_Bfree>
 800bcba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcbe:	2d00      	cmp	r5, #0
 800bcc0:	dc1d      	bgt.n	800bcfe <_strtod_l+0x776>
 800bcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	dd23      	ble.n	800bd10 <_strtod_l+0x788>
 800bcc8:	4649      	mov	r1, r9
 800bcca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bccc:	9805      	ldr	r0, [sp, #20]
 800bcce:	f7ff f989 	bl	800afe4 <__pow5mult>
 800bcd2:	4681      	mov	r9, r0
 800bcd4:	b9e0      	cbnz	r0, 800bd10 <_strtod_l+0x788>
 800bcd6:	f04f 0900 	mov.w	r9, #0
 800bcda:	e674      	b.n	800b9c6 <_strtod_l+0x43e>
 800bcdc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bce0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bce4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bce8:	35e2      	adds	r5, #226	@ 0xe2
 800bcea:	fa01 f305 	lsl.w	r3, r1, r5
 800bcee:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcf0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bcf2:	e7ba      	b.n	800bc6a <_strtod_l+0x6e2>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcfc:	e7b5      	b.n	800bc6a <_strtod_l+0x6e2>
 800bcfe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd00:	9805      	ldr	r0, [sp, #20]
 800bd02:	462a      	mov	r2, r5
 800bd04:	f7ff f9c8 	bl	800b098 <__lshift>
 800bd08:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d1d9      	bne.n	800bcc2 <_strtod_l+0x73a>
 800bd0e:	e65a      	b.n	800b9c6 <_strtod_l+0x43e>
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	dd07      	ble.n	800bd24 <_strtod_l+0x79c>
 800bd14:	4649      	mov	r1, r9
 800bd16:	9805      	ldr	r0, [sp, #20]
 800bd18:	4632      	mov	r2, r6
 800bd1a:	f7ff f9bd 	bl	800b098 <__lshift>
 800bd1e:	4681      	mov	r9, r0
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d0d8      	beq.n	800bcd6 <_strtod_l+0x74e>
 800bd24:	2f00      	cmp	r7, #0
 800bd26:	dd08      	ble.n	800bd3a <_strtod_l+0x7b2>
 800bd28:	4641      	mov	r1, r8
 800bd2a:	9805      	ldr	r0, [sp, #20]
 800bd2c:	463a      	mov	r2, r7
 800bd2e:	f7ff f9b3 	bl	800b098 <__lshift>
 800bd32:	4680      	mov	r8, r0
 800bd34:	2800      	cmp	r0, #0
 800bd36:	f43f ae46 	beq.w	800b9c6 <_strtod_l+0x43e>
 800bd3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd3c:	9805      	ldr	r0, [sp, #20]
 800bd3e:	464a      	mov	r2, r9
 800bd40:	f7ff fa32 	bl	800b1a8 <__mdiff>
 800bd44:	4604      	mov	r4, r0
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f43f ae3d 	beq.w	800b9c6 <_strtod_l+0x43e>
 800bd4c:	68c3      	ldr	r3, [r0, #12]
 800bd4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd50:	2300      	movs	r3, #0
 800bd52:	60c3      	str	r3, [r0, #12]
 800bd54:	4641      	mov	r1, r8
 800bd56:	f7ff fa0b 	bl	800b170 <__mcmp>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	da46      	bge.n	800bdec <_strtod_l+0x864>
 800bd5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd60:	ea53 030a 	orrs.w	r3, r3, sl
 800bd64:	d16c      	bne.n	800be40 <_strtod_l+0x8b8>
 800bd66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d168      	bne.n	800be40 <_strtod_l+0x8b8>
 800bd6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd72:	0d1b      	lsrs	r3, r3, #20
 800bd74:	051b      	lsls	r3, r3, #20
 800bd76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd7a:	d961      	bls.n	800be40 <_strtod_l+0x8b8>
 800bd7c:	6963      	ldr	r3, [r4, #20]
 800bd7e:	b913      	cbnz	r3, 800bd86 <_strtod_l+0x7fe>
 800bd80:	6923      	ldr	r3, [r4, #16]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	dd5c      	ble.n	800be40 <_strtod_l+0x8b8>
 800bd86:	4621      	mov	r1, r4
 800bd88:	2201      	movs	r2, #1
 800bd8a:	9805      	ldr	r0, [sp, #20]
 800bd8c:	f7ff f984 	bl	800b098 <__lshift>
 800bd90:	4641      	mov	r1, r8
 800bd92:	4604      	mov	r4, r0
 800bd94:	f7ff f9ec 	bl	800b170 <__mcmp>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dd51      	ble.n	800be40 <_strtod_l+0x8b8>
 800bd9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bda0:	9a08      	ldr	r2, [sp, #32]
 800bda2:	0d1b      	lsrs	r3, r3, #20
 800bda4:	051b      	lsls	r3, r3, #20
 800bda6:	2a00      	cmp	r2, #0
 800bda8:	d06b      	beq.n	800be82 <_strtod_l+0x8fa>
 800bdaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bdae:	d868      	bhi.n	800be82 <_strtod_l+0x8fa>
 800bdb0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bdb4:	f67f ae9d 	bls.w	800baf2 <_strtod_l+0x56a>
 800bdb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bde4 <_strtod_l+0x85c>)
 800bdba:	4650      	mov	r0, sl
 800bdbc:	4659      	mov	r1, fp
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f7f4 fc3a 	bl	8000638 <__aeabi_dmul>
 800bdc4:	4b08      	ldr	r3, [pc, #32]	@ (800bde8 <_strtod_l+0x860>)
 800bdc6:	400b      	ands	r3, r1
 800bdc8:	4682      	mov	sl, r0
 800bdca:	468b      	mov	fp, r1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f47f ae05 	bne.w	800b9dc <_strtod_l+0x454>
 800bdd2:	9a05      	ldr	r2, [sp, #20]
 800bdd4:	2322      	movs	r3, #34	@ 0x22
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	e600      	b.n	800b9dc <_strtod_l+0x454>
 800bdda:	bf00      	nop
 800bddc:	0800dcb0 	.word	0x0800dcb0
 800bde0:	fffffc02 	.word	0xfffffc02
 800bde4:	39500000 	.word	0x39500000
 800bde8:	7ff00000 	.word	0x7ff00000
 800bdec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bdf0:	d165      	bne.n	800bebe <_strtod_l+0x936>
 800bdf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bdf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdf8:	b35a      	cbz	r2, 800be52 <_strtod_l+0x8ca>
 800bdfa:	4a9f      	ldr	r2, [pc, #636]	@ (800c078 <_strtod_l+0xaf0>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d12b      	bne.n	800be58 <_strtod_l+0x8d0>
 800be00:	9b08      	ldr	r3, [sp, #32]
 800be02:	4651      	mov	r1, sl
 800be04:	b303      	cbz	r3, 800be48 <_strtod_l+0x8c0>
 800be06:	4b9d      	ldr	r3, [pc, #628]	@ (800c07c <_strtod_l+0xaf4>)
 800be08:	465a      	mov	r2, fp
 800be0a:	4013      	ands	r3, r2
 800be0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be10:	f04f 32ff 	mov.w	r2, #4294967295
 800be14:	d81b      	bhi.n	800be4e <_strtod_l+0x8c6>
 800be16:	0d1b      	lsrs	r3, r3, #20
 800be18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be1c:	fa02 f303 	lsl.w	r3, r2, r3
 800be20:	4299      	cmp	r1, r3
 800be22:	d119      	bne.n	800be58 <_strtod_l+0x8d0>
 800be24:	4b96      	ldr	r3, [pc, #600]	@ (800c080 <_strtod_l+0xaf8>)
 800be26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be28:	429a      	cmp	r2, r3
 800be2a:	d102      	bne.n	800be32 <_strtod_l+0x8aa>
 800be2c:	3101      	adds	r1, #1
 800be2e:	f43f adca 	beq.w	800b9c6 <_strtod_l+0x43e>
 800be32:	4b92      	ldr	r3, [pc, #584]	@ (800c07c <_strtod_l+0xaf4>)
 800be34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be36:	401a      	ands	r2, r3
 800be38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800be3c:	f04f 0a00 	mov.w	sl, #0
 800be40:	9b08      	ldr	r3, [sp, #32]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1b8      	bne.n	800bdb8 <_strtod_l+0x830>
 800be46:	e5c9      	b.n	800b9dc <_strtod_l+0x454>
 800be48:	f04f 33ff 	mov.w	r3, #4294967295
 800be4c:	e7e8      	b.n	800be20 <_strtod_l+0x898>
 800be4e:	4613      	mov	r3, r2
 800be50:	e7e6      	b.n	800be20 <_strtod_l+0x898>
 800be52:	ea53 030a 	orrs.w	r3, r3, sl
 800be56:	d0a1      	beq.n	800bd9c <_strtod_l+0x814>
 800be58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be5a:	b1db      	cbz	r3, 800be94 <_strtod_l+0x90c>
 800be5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be5e:	4213      	tst	r3, r2
 800be60:	d0ee      	beq.n	800be40 <_strtod_l+0x8b8>
 800be62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be64:	9a08      	ldr	r2, [sp, #32]
 800be66:	4650      	mov	r0, sl
 800be68:	4659      	mov	r1, fp
 800be6a:	b1bb      	cbz	r3, 800be9c <_strtod_l+0x914>
 800be6c:	f7ff fb6e 	bl	800b54c <sulp>
 800be70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be74:	ec53 2b10 	vmov	r2, r3, d0
 800be78:	f7f4 fa28 	bl	80002cc <__adddf3>
 800be7c:	4682      	mov	sl, r0
 800be7e:	468b      	mov	fp, r1
 800be80:	e7de      	b.n	800be40 <_strtod_l+0x8b8>
 800be82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be8e:	f04f 3aff 	mov.w	sl, #4294967295
 800be92:	e7d5      	b.n	800be40 <_strtod_l+0x8b8>
 800be94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be96:	ea13 0f0a 	tst.w	r3, sl
 800be9a:	e7e1      	b.n	800be60 <_strtod_l+0x8d8>
 800be9c:	f7ff fb56 	bl	800b54c <sulp>
 800bea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bea4:	ec53 2b10 	vmov	r2, r3, d0
 800bea8:	f7f4 fa0e 	bl	80002c8 <__aeabi_dsub>
 800beac:	2200      	movs	r2, #0
 800beae:	2300      	movs	r3, #0
 800beb0:	4682      	mov	sl, r0
 800beb2:	468b      	mov	fp, r1
 800beb4:	f7f4 fe28 	bl	8000b08 <__aeabi_dcmpeq>
 800beb8:	2800      	cmp	r0, #0
 800beba:	d0c1      	beq.n	800be40 <_strtod_l+0x8b8>
 800bebc:	e619      	b.n	800baf2 <_strtod_l+0x56a>
 800bebe:	4641      	mov	r1, r8
 800bec0:	4620      	mov	r0, r4
 800bec2:	f7ff facd 	bl	800b460 <__ratio>
 800bec6:	ec57 6b10 	vmov	r6, r7, d0
 800beca:	2200      	movs	r2, #0
 800becc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 fe2c 	bl	8000b30 <__aeabi_dcmple>
 800bed8:	2800      	cmp	r0, #0
 800beda:	d06f      	beq.n	800bfbc <_strtod_l+0xa34>
 800bedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d17a      	bne.n	800bfd8 <_strtod_l+0xa50>
 800bee2:	f1ba 0f00 	cmp.w	sl, #0
 800bee6:	d158      	bne.n	800bf9a <_strtod_l+0xa12>
 800bee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d15a      	bne.n	800bfa8 <_strtod_l+0xa20>
 800bef2:	4b64      	ldr	r3, [pc, #400]	@ (800c084 <_strtod_l+0xafc>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	4630      	mov	r0, r6
 800bef8:	4639      	mov	r1, r7
 800befa:	f7f4 fe0f 	bl	8000b1c <__aeabi_dcmplt>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d159      	bne.n	800bfb6 <_strtod_l+0xa2e>
 800bf02:	4630      	mov	r0, r6
 800bf04:	4639      	mov	r1, r7
 800bf06:	4b60      	ldr	r3, [pc, #384]	@ (800c088 <_strtod_l+0xb00>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f7f4 fb95 	bl	8000638 <__aeabi_dmul>
 800bf0e:	4606      	mov	r6, r0
 800bf10:	460f      	mov	r7, r1
 800bf12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf16:	9606      	str	r6, [sp, #24]
 800bf18:	9307      	str	r3, [sp, #28]
 800bf1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf1e:	4d57      	ldr	r5, [pc, #348]	@ (800c07c <_strtod_l+0xaf4>)
 800bf20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf26:	401d      	ands	r5, r3
 800bf28:	4b58      	ldr	r3, [pc, #352]	@ (800c08c <_strtod_l+0xb04>)
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	f040 80b2 	bne.w	800c094 <_strtod_l+0xb0c>
 800bf30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bf36:	ec4b ab10 	vmov	d0, sl, fp
 800bf3a:	f7ff f9c9 	bl	800b2d0 <__ulp>
 800bf3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf42:	ec51 0b10 	vmov	r0, r1, d0
 800bf46:	f7f4 fb77 	bl	8000638 <__aeabi_dmul>
 800bf4a:	4652      	mov	r2, sl
 800bf4c:	465b      	mov	r3, fp
 800bf4e:	f7f4 f9bd 	bl	80002cc <__adddf3>
 800bf52:	460b      	mov	r3, r1
 800bf54:	4949      	ldr	r1, [pc, #292]	@ (800c07c <_strtod_l+0xaf4>)
 800bf56:	4a4e      	ldr	r2, [pc, #312]	@ (800c090 <_strtod_l+0xb08>)
 800bf58:	4019      	ands	r1, r3
 800bf5a:	4291      	cmp	r1, r2
 800bf5c:	4682      	mov	sl, r0
 800bf5e:	d942      	bls.n	800bfe6 <_strtod_l+0xa5e>
 800bf60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf62:	4b47      	ldr	r3, [pc, #284]	@ (800c080 <_strtod_l+0xaf8>)
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d103      	bne.n	800bf70 <_strtod_l+0x9e8>
 800bf68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	f43f ad2b 	beq.w	800b9c6 <_strtod_l+0x43e>
 800bf70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c080 <_strtod_l+0xaf8>
 800bf74:	f04f 3aff 	mov.w	sl, #4294967295
 800bf78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf7a:	9805      	ldr	r0, [sp, #20]
 800bf7c:	f7fe fe74 	bl	800ac68 <_Bfree>
 800bf80:	9805      	ldr	r0, [sp, #20]
 800bf82:	4649      	mov	r1, r9
 800bf84:	f7fe fe70 	bl	800ac68 <_Bfree>
 800bf88:	9805      	ldr	r0, [sp, #20]
 800bf8a:	4641      	mov	r1, r8
 800bf8c:	f7fe fe6c 	bl	800ac68 <_Bfree>
 800bf90:	9805      	ldr	r0, [sp, #20]
 800bf92:	4621      	mov	r1, r4
 800bf94:	f7fe fe68 	bl	800ac68 <_Bfree>
 800bf98:	e618      	b.n	800bbcc <_strtod_l+0x644>
 800bf9a:	f1ba 0f01 	cmp.w	sl, #1
 800bf9e:	d103      	bne.n	800bfa8 <_strtod_l+0xa20>
 800bfa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f43f ada5 	beq.w	800baf2 <_strtod_l+0x56a>
 800bfa8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c058 <_strtod_l+0xad0>
 800bfac:	4f35      	ldr	r7, [pc, #212]	@ (800c084 <_strtod_l+0xafc>)
 800bfae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfb2:	2600      	movs	r6, #0
 800bfb4:	e7b1      	b.n	800bf1a <_strtod_l+0x992>
 800bfb6:	4f34      	ldr	r7, [pc, #208]	@ (800c088 <_strtod_l+0xb00>)
 800bfb8:	2600      	movs	r6, #0
 800bfba:	e7aa      	b.n	800bf12 <_strtod_l+0x98a>
 800bfbc:	4b32      	ldr	r3, [pc, #200]	@ (800c088 <_strtod_l+0xb00>)
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 fb38 	bl	8000638 <__aeabi_dmul>
 800bfc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfca:	4606      	mov	r6, r0
 800bfcc:	460f      	mov	r7, r1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d09f      	beq.n	800bf12 <_strtod_l+0x98a>
 800bfd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bfd6:	e7a0      	b.n	800bf1a <_strtod_l+0x992>
 800bfd8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c060 <_strtod_l+0xad8>
 800bfdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfe0:	ec57 6b17 	vmov	r6, r7, d7
 800bfe4:	e799      	b.n	800bf1a <_strtod_l+0x992>
 800bfe6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bfea:	9b08      	ldr	r3, [sp, #32]
 800bfec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1c1      	bne.n	800bf78 <_strtod_l+0x9f0>
 800bff4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bff8:	0d1b      	lsrs	r3, r3, #20
 800bffa:	051b      	lsls	r3, r3, #20
 800bffc:	429d      	cmp	r5, r3
 800bffe:	d1bb      	bne.n	800bf78 <_strtod_l+0x9f0>
 800c000:	4630      	mov	r0, r6
 800c002:	4639      	mov	r1, r7
 800c004:	f7f4 fe78 	bl	8000cf8 <__aeabi_d2lz>
 800c008:	f7f4 fae8 	bl	80005dc <__aeabi_l2d>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4630      	mov	r0, r6
 800c012:	4639      	mov	r1, r7
 800c014:	f7f4 f958 	bl	80002c8 <__aeabi_dsub>
 800c018:	460b      	mov	r3, r1
 800c01a:	4602      	mov	r2, r0
 800c01c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c020:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c026:	ea46 060a 	orr.w	r6, r6, sl
 800c02a:	431e      	orrs	r6, r3
 800c02c:	d06f      	beq.n	800c10e <_strtod_l+0xb86>
 800c02e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c068 <_strtod_l+0xae0>)
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f7f4 fd72 	bl	8000b1c <__aeabi_dcmplt>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f47f accf 	bne.w	800b9dc <_strtod_l+0x454>
 800c03e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c070 <_strtod_l+0xae8>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c048:	f7f4 fd86 	bl	8000b58 <__aeabi_dcmpgt>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d093      	beq.n	800bf78 <_strtod_l+0x9f0>
 800c050:	e4c4      	b.n	800b9dc <_strtod_l+0x454>
 800c052:	bf00      	nop
 800c054:	f3af 8000 	nop.w
 800c058:	00000000 	.word	0x00000000
 800c05c:	bff00000 	.word	0xbff00000
 800c060:	00000000 	.word	0x00000000
 800c064:	3ff00000 	.word	0x3ff00000
 800c068:	94a03595 	.word	0x94a03595
 800c06c:	3fdfffff 	.word	0x3fdfffff
 800c070:	35afe535 	.word	0x35afe535
 800c074:	3fe00000 	.word	0x3fe00000
 800c078:	000fffff 	.word	0x000fffff
 800c07c:	7ff00000 	.word	0x7ff00000
 800c080:	7fefffff 	.word	0x7fefffff
 800c084:	3ff00000 	.word	0x3ff00000
 800c088:	3fe00000 	.word	0x3fe00000
 800c08c:	7fe00000 	.word	0x7fe00000
 800c090:	7c9fffff 	.word	0x7c9fffff
 800c094:	9b08      	ldr	r3, [sp, #32]
 800c096:	b323      	cbz	r3, 800c0e2 <_strtod_l+0xb5a>
 800c098:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c09c:	d821      	bhi.n	800c0e2 <_strtod_l+0xb5a>
 800c09e:	a328      	add	r3, pc, #160	@ (adr r3, 800c140 <_strtod_l+0xbb8>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	f7f4 fd42 	bl	8000b30 <__aeabi_dcmple>
 800c0ac:	b1a0      	cbz	r0, 800c0d8 <_strtod_l+0xb50>
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f7f4 fd99 	bl	8000be8 <__aeabi_d2uiz>
 800c0b6:	2801      	cmp	r0, #1
 800c0b8:	bf38      	it	cc
 800c0ba:	2001      	movcc	r0, #1
 800c0bc:	f7f4 fa42 	bl	8000544 <__aeabi_ui2d>
 800c0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	460f      	mov	r7, r1
 800c0c6:	b9fb      	cbnz	r3, 800c108 <_strtod_l+0xb80>
 800c0c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c0ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c0d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c0d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c0de:	1b5b      	subs	r3, r3, r5
 800c0e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c0e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c0ea:	f7ff f8f1 	bl	800b2d0 <__ulp>
 800c0ee:	4650      	mov	r0, sl
 800c0f0:	ec53 2b10 	vmov	r2, r3, d0
 800c0f4:	4659      	mov	r1, fp
 800c0f6:	f7f4 fa9f 	bl	8000638 <__aeabi_dmul>
 800c0fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c0fe:	f7f4 f8e5 	bl	80002cc <__adddf3>
 800c102:	4682      	mov	sl, r0
 800c104:	468b      	mov	fp, r1
 800c106:	e770      	b.n	800bfea <_strtod_l+0xa62>
 800c108:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c10c:	e7e0      	b.n	800c0d0 <_strtod_l+0xb48>
 800c10e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c148 <_strtod_l+0xbc0>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 fd02 	bl	8000b1c <__aeabi_dcmplt>
 800c118:	e798      	b.n	800c04c <_strtod_l+0xac4>
 800c11a:	2300      	movs	r3, #0
 800c11c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c11e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	f7ff ba6d 	b.w	800b602 <_strtod_l+0x7a>
 800c128:	2a65      	cmp	r2, #101	@ 0x65
 800c12a:	f43f ab66 	beq.w	800b7fa <_strtod_l+0x272>
 800c12e:	2a45      	cmp	r2, #69	@ 0x45
 800c130:	f43f ab63 	beq.w	800b7fa <_strtod_l+0x272>
 800c134:	2301      	movs	r3, #1
 800c136:	f7ff bb9e 	b.w	800b876 <_strtod_l+0x2ee>
 800c13a:	bf00      	nop
 800c13c:	f3af 8000 	nop.w
 800c140:	ffc00000 	.word	0xffc00000
 800c144:	41dfffff 	.word	0x41dfffff
 800c148:	94a03595 	.word	0x94a03595
 800c14c:	3fcfffff 	.word	0x3fcfffff

0800c150 <_strtod_r>:
 800c150:	4b01      	ldr	r3, [pc, #4]	@ (800c158 <_strtod_r+0x8>)
 800c152:	f7ff ba19 	b.w	800b588 <_strtod_l>
 800c156:	bf00      	nop
 800c158:	20000094 	.word	0x20000094

0800c15c <_strtol_l.constprop.0>:
 800c15c:	2b24      	cmp	r3, #36	@ 0x24
 800c15e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c162:	4686      	mov	lr, r0
 800c164:	4690      	mov	r8, r2
 800c166:	d801      	bhi.n	800c16c <_strtol_l.constprop.0+0x10>
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d106      	bne.n	800c17a <_strtol_l.constprop.0+0x1e>
 800c16c:	f7fd fdac 	bl	8009cc8 <__errno>
 800c170:	2316      	movs	r3, #22
 800c172:	6003      	str	r3, [r0, #0]
 800c174:	2000      	movs	r0, #0
 800c176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17a:	4834      	ldr	r0, [pc, #208]	@ (800c24c <_strtol_l.constprop.0+0xf0>)
 800c17c:	460d      	mov	r5, r1
 800c17e:	462a      	mov	r2, r5
 800c180:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c184:	5d06      	ldrb	r6, [r0, r4]
 800c186:	f016 0608 	ands.w	r6, r6, #8
 800c18a:	d1f8      	bne.n	800c17e <_strtol_l.constprop.0+0x22>
 800c18c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c18e:	d12d      	bne.n	800c1ec <_strtol_l.constprop.0+0x90>
 800c190:	782c      	ldrb	r4, [r5, #0]
 800c192:	2601      	movs	r6, #1
 800c194:	1c95      	adds	r5, r2, #2
 800c196:	f033 0210 	bics.w	r2, r3, #16
 800c19a:	d109      	bne.n	800c1b0 <_strtol_l.constprop.0+0x54>
 800c19c:	2c30      	cmp	r4, #48	@ 0x30
 800c19e:	d12a      	bne.n	800c1f6 <_strtol_l.constprop.0+0x9a>
 800c1a0:	782a      	ldrb	r2, [r5, #0]
 800c1a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c1a6:	2a58      	cmp	r2, #88	@ 0x58
 800c1a8:	d125      	bne.n	800c1f6 <_strtol_l.constprop.0+0x9a>
 800c1aa:	786c      	ldrb	r4, [r5, #1]
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	3502      	adds	r5, #2
 800c1b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c1b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	fbbc f9f3 	udiv	r9, ip, r3
 800c1be:	4610      	mov	r0, r2
 800c1c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c1c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c1c8:	2f09      	cmp	r7, #9
 800c1ca:	d81b      	bhi.n	800c204 <_strtol_l.constprop.0+0xa8>
 800c1cc:	463c      	mov	r4, r7
 800c1ce:	42a3      	cmp	r3, r4
 800c1d0:	dd27      	ble.n	800c222 <_strtol_l.constprop.0+0xc6>
 800c1d2:	1c57      	adds	r7, r2, #1
 800c1d4:	d007      	beq.n	800c1e6 <_strtol_l.constprop.0+0x8a>
 800c1d6:	4581      	cmp	r9, r0
 800c1d8:	d320      	bcc.n	800c21c <_strtol_l.constprop.0+0xc0>
 800c1da:	d101      	bne.n	800c1e0 <_strtol_l.constprop.0+0x84>
 800c1dc:	45a2      	cmp	sl, r4
 800c1de:	db1d      	blt.n	800c21c <_strtol_l.constprop.0+0xc0>
 800c1e0:	fb00 4003 	mla	r0, r0, r3, r4
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1ea:	e7eb      	b.n	800c1c4 <_strtol_l.constprop.0+0x68>
 800c1ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800c1ee:	bf04      	itt	eq
 800c1f0:	782c      	ldrbeq	r4, [r5, #0]
 800c1f2:	1c95      	addeq	r5, r2, #2
 800c1f4:	e7cf      	b.n	800c196 <_strtol_l.constprop.0+0x3a>
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1da      	bne.n	800c1b0 <_strtol_l.constprop.0+0x54>
 800c1fa:	2c30      	cmp	r4, #48	@ 0x30
 800c1fc:	bf0c      	ite	eq
 800c1fe:	2308      	moveq	r3, #8
 800c200:	230a      	movne	r3, #10
 800c202:	e7d5      	b.n	800c1b0 <_strtol_l.constprop.0+0x54>
 800c204:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c208:	2f19      	cmp	r7, #25
 800c20a:	d801      	bhi.n	800c210 <_strtol_l.constprop.0+0xb4>
 800c20c:	3c37      	subs	r4, #55	@ 0x37
 800c20e:	e7de      	b.n	800c1ce <_strtol_l.constprop.0+0x72>
 800c210:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c214:	2f19      	cmp	r7, #25
 800c216:	d804      	bhi.n	800c222 <_strtol_l.constprop.0+0xc6>
 800c218:	3c57      	subs	r4, #87	@ 0x57
 800c21a:	e7d8      	b.n	800c1ce <_strtol_l.constprop.0+0x72>
 800c21c:	f04f 32ff 	mov.w	r2, #4294967295
 800c220:	e7e1      	b.n	800c1e6 <_strtol_l.constprop.0+0x8a>
 800c222:	1c53      	adds	r3, r2, #1
 800c224:	d108      	bne.n	800c238 <_strtol_l.constprop.0+0xdc>
 800c226:	2322      	movs	r3, #34	@ 0x22
 800c228:	f8ce 3000 	str.w	r3, [lr]
 800c22c:	4660      	mov	r0, ip
 800c22e:	f1b8 0f00 	cmp.w	r8, #0
 800c232:	d0a0      	beq.n	800c176 <_strtol_l.constprop.0+0x1a>
 800c234:	1e69      	subs	r1, r5, #1
 800c236:	e006      	b.n	800c246 <_strtol_l.constprop.0+0xea>
 800c238:	b106      	cbz	r6, 800c23c <_strtol_l.constprop.0+0xe0>
 800c23a:	4240      	negs	r0, r0
 800c23c:	f1b8 0f00 	cmp.w	r8, #0
 800c240:	d099      	beq.n	800c176 <_strtol_l.constprop.0+0x1a>
 800c242:	2a00      	cmp	r2, #0
 800c244:	d1f6      	bne.n	800c234 <_strtol_l.constprop.0+0xd8>
 800c246:	f8c8 1000 	str.w	r1, [r8]
 800c24a:	e794      	b.n	800c176 <_strtol_l.constprop.0+0x1a>
 800c24c:	0800dcd9 	.word	0x0800dcd9

0800c250 <_strtol_r>:
 800c250:	f7ff bf84 	b.w	800c15c <_strtol_l.constprop.0>

0800c254 <__ssputs_r>:
 800c254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c258:	688e      	ldr	r6, [r1, #8]
 800c25a:	461f      	mov	r7, r3
 800c25c:	42be      	cmp	r6, r7
 800c25e:	680b      	ldr	r3, [r1, #0]
 800c260:	4682      	mov	sl, r0
 800c262:	460c      	mov	r4, r1
 800c264:	4690      	mov	r8, r2
 800c266:	d82d      	bhi.n	800c2c4 <__ssputs_r+0x70>
 800c268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c26c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c270:	d026      	beq.n	800c2c0 <__ssputs_r+0x6c>
 800c272:	6965      	ldr	r5, [r4, #20]
 800c274:	6909      	ldr	r1, [r1, #16]
 800c276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c27a:	eba3 0901 	sub.w	r9, r3, r1
 800c27e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c282:	1c7b      	adds	r3, r7, #1
 800c284:	444b      	add	r3, r9
 800c286:	106d      	asrs	r5, r5, #1
 800c288:	429d      	cmp	r5, r3
 800c28a:	bf38      	it	cc
 800c28c:	461d      	movcc	r5, r3
 800c28e:	0553      	lsls	r3, r2, #21
 800c290:	d527      	bpl.n	800c2e2 <__ssputs_r+0x8e>
 800c292:	4629      	mov	r1, r5
 800c294:	f7fe fc1c 	bl	800aad0 <_malloc_r>
 800c298:	4606      	mov	r6, r0
 800c29a:	b360      	cbz	r0, 800c2f6 <__ssputs_r+0xa2>
 800c29c:	6921      	ldr	r1, [r4, #16]
 800c29e:	464a      	mov	r2, r9
 800c2a0:	f7fd fd3f 	bl	8009d22 <memcpy>
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	6126      	str	r6, [r4, #16]
 800c2b2:	6165      	str	r5, [r4, #20]
 800c2b4:	444e      	add	r6, r9
 800c2b6:	eba5 0509 	sub.w	r5, r5, r9
 800c2ba:	6026      	str	r6, [r4, #0]
 800c2bc:	60a5      	str	r5, [r4, #8]
 800c2be:	463e      	mov	r6, r7
 800c2c0:	42be      	cmp	r6, r7
 800c2c2:	d900      	bls.n	800c2c6 <__ssputs_r+0x72>
 800c2c4:	463e      	mov	r6, r7
 800c2c6:	6820      	ldr	r0, [r4, #0]
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	4641      	mov	r1, r8
 800c2cc:	f000 fb6a 	bl	800c9a4 <memmove>
 800c2d0:	68a3      	ldr	r3, [r4, #8]
 800c2d2:	1b9b      	subs	r3, r3, r6
 800c2d4:	60a3      	str	r3, [r4, #8]
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	4433      	add	r3, r6
 800c2da:	6023      	str	r3, [r4, #0]
 800c2dc:	2000      	movs	r0, #0
 800c2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	f000 ff41 	bl	800d16a <_realloc_r>
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d1e0      	bne.n	800c2b0 <__ssputs_r+0x5c>
 800c2ee:	6921      	ldr	r1, [r4, #16]
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	f7fe fb79 	bl	800a9e8 <_free_r>
 800c2f6:	230c      	movs	r3, #12
 800c2f8:	f8ca 3000 	str.w	r3, [sl]
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	f04f 30ff 	mov.w	r0, #4294967295
 800c308:	e7e9      	b.n	800c2de <__ssputs_r+0x8a>
	...

0800c30c <_svfiprintf_r>:
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	4698      	mov	r8, r3
 800c312:	898b      	ldrh	r3, [r1, #12]
 800c314:	061b      	lsls	r3, r3, #24
 800c316:	b09d      	sub	sp, #116	@ 0x74
 800c318:	4607      	mov	r7, r0
 800c31a:	460d      	mov	r5, r1
 800c31c:	4614      	mov	r4, r2
 800c31e:	d510      	bpl.n	800c342 <_svfiprintf_r+0x36>
 800c320:	690b      	ldr	r3, [r1, #16]
 800c322:	b973      	cbnz	r3, 800c342 <_svfiprintf_r+0x36>
 800c324:	2140      	movs	r1, #64	@ 0x40
 800c326:	f7fe fbd3 	bl	800aad0 <_malloc_r>
 800c32a:	6028      	str	r0, [r5, #0]
 800c32c:	6128      	str	r0, [r5, #16]
 800c32e:	b930      	cbnz	r0, 800c33e <_svfiprintf_r+0x32>
 800c330:	230c      	movs	r3, #12
 800c332:	603b      	str	r3, [r7, #0]
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	b01d      	add	sp, #116	@ 0x74
 800c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33e:	2340      	movs	r3, #64	@ 0x40
 800c340:	616b      	str	r3, [r5, #20]
 800c342:	2300      	movs	r3, #0
 800c344:	9309      	str	r3, [sp, #36]	@ 0x24
 800c346:	2320      	movs	r3, #32
 800c348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c34c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c350:	2330      	movs	r3, #48	@ 0x30
 800c352:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4f0 <_svfiprintf_r+0x1e4>
 800c356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c35a:	f04f 0901 	mov.w	r9, #1
 800c35e:	4623      	mov	r3, r4
 800c360:	469a      	mov	sl, r3
 800c362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c366:	b10a      	cbz	r2, 800c36c <_svfiprintf_r+0x60>
 800c368:	2a25      	cmp	r2, #37	@ 0x25
 800c36a:	d1f9      	bne.n	800c360 <_svfiprintf_r+0x54>
 800c36c:	ebba 0b04 	subs.w	fp, sl, r4
 800c370:	d00b      	beq.n	800c38a <_svfiprintf_r+0x7e>
 800c372:	465b      	mov	r3, fp
 800c374:	4622      	mov	r2, r4
 800c376:	4629      	mov	r1, r5
 800c378:	4638      	mov	r0, r7
 800c37a:	f7ff ff6b 	bl	800c254 <__ssputs_r>
 800c37e:	3001      	adds	r0, #1
 800c380:	f000 80a7 	beq.w	800c4d2 <_svfiprintf_r+0x1c6>
 800c384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c386:	445a      	add	r2, fp
 800c388:	9209      	str	r2, [sp, #36]	@ 0x24
 800c38a:	f89a 3000 	ldrb.w	r3, [sl]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 809f 	beq.w	800c4d2 <_svfiprintf_r+0x1c6>
 800c394:	2300      	movs	r3, #0
 800c396:	f04f 32ff 	mov.w	r2, #4294967295
 800c39a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c39e:	f10a 0a01 	add.w	sl, sl, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	9307      	str	r3, [sp, #28]
 800c3a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3ac:	4654      	mov	r4, sl
 800c3ae:	2205      	movs	r2, #5
 800c3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b4:	484e      	ldr	r0, [pc, #312]	@ (800c4f0 <_svfiprintf_r+0x1e4>)
 800c3b6:	f7f3 ff2b 	bl	8000210 <memchr>
 800c3ba:	9a04      	ldr	r2, [sp, #16]
 800c3bc:	b9d8      	cbnz	r0, 800c3f6 <_svfiprintf_r+0xea>
 800c3be:	06d0      	lsls	r0, r2, #27
 800c3c0:	bf44      	itt	mi
 800c3c2:	2320      	movmi	r3, #32
 800c3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3c8:	0711      	lsls	r1, r2, #28
 800c3ca:	bf44      	itt	mi
 800c3cc:	232b      	movmi	r3, #43	@ 0x2b
 800c3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3d8:	d015      	beq.n	800c406 <_svfiprintf_r+0xfa>
 800c3da:	9a07      	ldr	r2, [sp, #28]
 800c3dc:	4654      	mov	r4, sl
 800c3de:	2000      	movs	r0, #0
 800c3e0:	f04f 0c0a 	mov.w	ip, #10
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ea:	3b30      	subs	r3, #48	@ 0x30
 800c3ec:	2b09      	cmp	r3, #9
 800c3ee:	d94b      	bls.n	800c488 <_svfiprintf_r+0x17c>
 800c3f0:	b1b0      	cbz	r0, 800c420 <_svfiprintf_r+0x114>
 800c3f2:	9207      	str	r2, [sp, #28]
 800c3f4:	e014      	b.n	800c420 <_svfiprintf_r+0x114>
 800c3f6:	eba0 0308 	sub.w	r3, r0, r8
 800c3fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c3fe:	4313      	orrs	r3, r2
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	46a2      	mov	sl, r4
 800c404:	e7d2      	b.n	800c3ac <_svfiprintf_r+0xa0>
 800c406:	9b03      	ldr	r3, [sp, #12]
 800c408:	1d19      	adds	r1, r3, #4
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	9103      	str	r1, [sp, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	bfbb      	ittet	lt
 800c412:	425b      	neglt	r3, r3
 800c414:	f042 0202 	orrlt.w	r2, r2, #2
 800c418:	9307      	strge	r3, [sp, #28]
 800c41a:	9307      	strlt	r3, [sp, #28]
 800c41c:	bfb8      	it	lt
 800c41e:	9204      	strlt	r2, [sp, #16]
 800c420:	7823      	ldrb	r3, [r4, #0]
 800c422:	2b2e      	cmp	r3, #46	@ 0x2e
 800c424:	d10a      	bne.n	800c43c <_svfiprintf_r+0x130>
 800c426:	7863      	ldrb	r3, [r4, #1]
 800c428:	2b2a      	cmp	r3, #42	@ 0x2a
 800c42a:	d132      	bne.n	800c492 <_svfiprintf_r+0x186>
 800c42c:	9b03      	ldr	r3, [sp, #12]
 800c42e:	1d1a      	adds	r2, r3, #4
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	9203      	str	r2, [sp, #12]
 800c434:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c438:	3402      	adds	r4, #2
 800c43a:	9305      	str	r3, [sp, #20]
 800c43c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c500 <_svfiprintf_r+0x1f4>
 800c440:	7821      	ldrb	r1, [r4, #0]
 800c442:	2203      	movs	r2, #3
 800c444:	4650      	mov	r0, sl
 800c446:	f7f3 fee3 	bl	8000210 <memchr>
 800c44a:	b138      	cbz	r0, 800c45c <_svfiprintf_r+0x150>
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	eba0 000a 	sub.w	r0, r0, sl
 800c452:	2240      	movs	r2, #64	@ 0x40
 800c454:	4082      	lsls	r2, r0
 800c456:	4313      	orrs	r3, r2
 800c458:	3401      	adds	r4, #1
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c460:	4824      	ldr	r0, [pc, #144]	@ (800c4f4 <_svfiprintf_r+0x1e8>)
 800c462:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c466:	2206      	movs	r2, #6
 800c468:	f7f3 fed2 	bl	8000210 <memchr>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d036      	beq.n	800c4de <_svfiprintf_r+0x1d2>
 800c470:	4b21      	ldr	r3, [pc, #132]	@ (800c4f8 <_svfiprintf_r+0x1ec>)
 800c472:	bb1b      	cbnz	r3, 800c4bc <_svfiprintf_r+0x1b0>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	3307      	adds	r3, #7
 800c478:	f023 0307 	bic.w	r3, r3, #7
 800c47c:	3308      	adds	r3, #8
 800c47e:	9303      	str	r3, [sp, #12]
 800c480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c482:	4433      	add	r3, r6
 800c484:	9309      	str	r3, [sp, #36]	@ 0x24
 800c486:	e76a      	b.n	800c35e <_svfiprintf_r+0x52>
 800c488:	fb0c 3202 	mla	r2, ip, r2, r3
 800c48c:	460c      	mov	r4, r1
 800c48e:	2001      	movs	r0, #1
 800c490:	e7a8      	b.n	800c3e4 <_svfiprintf_r+0xd8>
 800c492:	2300      	movs	r3, #0
 800c494:	3401      	adds	r4, #1
 800c496:	9305      	str	r3, [sp, #20]
 800c498:	4619      	mov	r1, r3
 800c49a:	f04f 0c0a 	mov.w	ip, #10
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4a4:	3a30      	subs	r2, #48	@ 0x30
 800c4a6:	2a09      	cmp	r2, #9
 800c4a8:	d903      	bls.n	800c4b2 <_svfiprintf_r+0x1a6>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0c6      	beq.n	800c43c <_svfiprintf_r+0x130>
 800c4ae:	9105      	str	r1, [sp, #20]
 800c4b0:	e7c4      	b.n	800c43c <_svfiprintf_r+0x130>
 800c4b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e7f0      	b.n	800c49e <_svfiprintf_r+0x192>
 800c4bc:	ab03      	add	r3, sp, #12
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	462a      	mov	r2, r5
 800c4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c4fc <_svfiprintf_r+0x1f0>)
 800c4c4:	a904      	add	r1, sp, #16
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	f7fc fbb6 	bl	8008c38 <_printf_float>
 800c4cc:	1c42      	adds	r2, r0, #1
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	d1d6      	bne.n	800c480 <_svfiprintf_r+0x174>
 800c4d2:	89ab      	ldrh	r3, [r5, #12]
 800c4d4:	065b      	lsls	r3, r3, #25
 800c4d6:	f53f af2d 	bmi.w	800c334 <_svfiprintf_r+0x28>
 800c4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4dc:	e72c      	b.n	800c338 <_svfiprintf_r+0x2c>
 800c4de:	ab03      	add	r3, sp, #12
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	462a      	mov	r2, r5
 800c4e4:	4b05      	ldr	r3, [pc, #20]	@ (800c4fc <_svfiprintf_r+0x1f0>)
 800c4e6:	a904      	add	r1, sp, #16
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f7fc fe3d 	bl	8009168 <_printf_i>
 800c4ee:	e7ed      	b.n	800c4cc <_svfiprintf_r+0x1c0>
 800c4f0:	0800ddd9 	.word	0x0800ddd9
 800c4f4:	0800dde3 	.word	0x0800dde3
 800c4f8:	08008c39 	.word	0x08008c39
 800c4fc:	0800c255 	.word	0x0800c255
 800c500:	0800dddf 	.word	0x0800dddf

0800c504 <__sfputc_r>:
 800c504:	6893      	ldr	r3, [r2, #8]
 800c506:	3b01      	subs	r3, #1
 800c508:	2b00      	cmp	r3, #0
 800c50a:	b410      	push	{r4}
 800c50c:	6093      	str	r3, [r2, #8]
 800c50e:	da08      	bge.n	800c522 <__sfputc_r+0x1e>
 800c510:	6994      	ldr	r4, [r2, #24]
 800c512:	42a3      	cmp	r3, r4
 800c514:	db01      	blt.n	800c51a <__sfputc_r+0x16>
 800c516:	290a      	cmp	r1, #10
 800c518:	d103      	bne.n	800c522 <__sfputc_r+0x1e>
 800c51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c51e:	f7fd baec 	b.w	8009afa <__swbuf_r>
 800c522:	6813      	ldr	r3, [r2, #0]
 800c524:	1c58      	adds	r0, r3, #1
 800c526:	6010      	str	r0, [r2, #0]
 800c528:	7019      	strb	r1, [r3, #0]
 800c52a:	4608      	mov	r0, r1
 800c52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <__sfputs_r>:
 800c532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c534:	4606      	mov	r6, r0
 800c536:	460f      	mov	r7, r1
 800c538:	4614      	mov	r4, r2
 800c53a:	18d5      	adds	r5, r2, r3
 800c53c:	42ac      	cmp	r4, r5
 800c53e:	d101      	bne.n	800c544 <__sfputs_r+0x12>
 800c540:	2000      	movs	r0, #0
 800c542:	e007      	b.n	800c554 <__sfputs_r+0x22>
 800c544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c548:	463a      	mov	r2, r7
 800c54a:	4630      	mov	r0, r6
 800c54c:	f7ff ffda 	bl	800c504 <__sfputc_r>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d1f3      	bne.n	800c53c <__sfputs_r+0xa>
 800c554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c558 <_vfiprintf_r>:
 800c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	460d      	mov	r5, r1
 800c55e:	b09d      	sub	sp, #116	@ 0x74
 800c560:	4614      	mov	r4, r2
 800c562:	4698      	mov	r8, r3
 800c564:	4606      	mov	r6, r0
 800c566:	b118      	cbz	r0, 800c570 <_vfiprintf_r+0x18>
 800c568:	6a03      	ldr	r3, [r0, #32]
 800c56a:	b90b      	cbnz	r3, 800c570 <_vfiprintf_r+0x18>
 800c56c:	f7fd f9bc 	bl	80098e8 <__sinit>
 800c570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c572:	07d9      	lsls	r1, r3, #31
 800c574:	d405      	bmi.n	800c582 <_vfiprintf_r+0x2a>
 800c576:	89ab      	ldrh	r3, [r5, #12]
 800c578:	059a      	lsls	r2, r3, #22
 800c57a:	d402      	bmi.n	800c582 <_vfiprintf_r+0x2a>
 800c57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c57e:	f7fd fbce 	bl	8009d1e <__retarget_lock_acquire_recursive>
 800c582:	89ab      	ldrh	r3, [r5, #12]
 800c584:	071b      	lsls	r3, r3, #28
 800c586:	d501      	bpl.n	800c58c <_vfiprintf_r+0x34>
 800c588:	692b      	ldr	r3, [r5, #16]
 800c58a:	b99b      	cbnz	r3, 800c5b4 <_vfiprintf_r+0x5c>
 800c58c:	4629      	mov	r1, r5
 800c58e:	4630      	mov	r0, r6
 800c590:	f7fd faf2 	bl	8009b78 <__swsetup_r>
 800c594:	b170      	cbz	r0, 800c5b4 <_vfiprintf_r+0x5c>
 800c596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c598:	07dc      	lsls	r4, r3, #31
 800c59a:	d504      	bpl.n	800c5a6 <_vfiprintf_r+0x4e>
 800c59c:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a0:	b01d      	add	sp, #116	@ 0x74
 800c5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a6:	89ab      	ldrh	r3, [r5, #12]
 800c5a8:	0598      	lsls	r0, r3, #22
 800c5aa:	d4f7      	bmi.n	800c59c <_vfiprintf_r+0x44>
 800c5ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ae:	f7fd fbb7 	bl	8009d20 <__retarget_lock_release_recursive>
 800c5b2:	e7f3      	b.n	800c59c <_vfiprintf_r+0x44>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b8:	2320      	movs	r3, #32
 800c5ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5be:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5c2:	2330      	movs	r3, #48	@ 0x30
 800c5c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c774 <_vfiprintf_r+0x21c>
 800c5c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5cc:	f04f 0901 	mov.w	r9, #1
 800c5d0:	4623      	mov	r3, r4
 800c5d2:	469a      	mov	sl, r3
 800c5d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d8:	b10a      	cbz	r2, 800c5de <_vfiprintf_r+0x86>
 800c5da:	2a25      	cmp	r2, #37	@ 0x25
 800c5dc:	d1f9      	bne.n	800c5d2 <_vfiprintf_r+0x7a>
 800c5de:	ebba 0b04 	subs.w	fp, sl, r4
 800c5e2:	d00b      	beq.n	800c5fc <_vfiprintf_r+0xa4>
 800c5e4:	465b      	mov	r3, fp
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f7ff ffa1 	bl	800c532 <__sfputs_r>
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	f000 80a7 	beq.w	800c744 <_vfiprintf_r+0x1ec>
 800c5f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f8:	445a      	add	r2, fp
 800c5fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 809f 	beq.w	800c744 <_vfiprintf_r+0x1ec>
 800c606:	2300      	movs	r3, #0
 800c608:	f04f 32ff 	mov.w	r2, #4294967295
 800c60c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c610:	f10a 0a01 	add.w	sl, sl, #1
 800c614:	9304      	str	r3, [sp, #16]
 800c616:	9307      	str	r3, [sp, #28]
 800c618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c61c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c61e:	4654      	mov	r4, sl
 800c620:	2205      	movs	r2, #5
 800c622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c626:	4853      	ldr	r0, [pc, #332]	@ (800c774 <_vfiprintf_r+0x21c>)
 800c628:	f7f3 fdf2 	bl	8000210 <memchr>
 800c62c:	9a04      	ldr	r2, [sp, #16]
 800c62e:	b9d8      	cbnz	r0, 800c668 <_vfiprintf_r+0x110>
 800c630:	06d1      	lsls	r1, r2, #27
 800c632:	bf44      	itt	mi
 800c634:	2320      	movmi	r3, #32
 800c636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c63a:	0713      	lsls	r3, r2, #28
 800c63c:	bf44      	itt	mi
 800c63e:	232b      	movmi	r3, #43	@ 0x2b
 800c640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c644:	f89a 3000 	ldrb.w	r3, [sl]
 800c648:	2b2a      	cmp	r3, #42	@ 0x2a
 800c64a:	d015      	beq.n	800c678 <_vfiprintf_r+0x120>
 800c64c:	9a07      	ldr	r2, [sp, #28]
 800c64e:	4654      	mov	r4, sl
 800c650:	2000      	movs	r0, #0
 800c652:	f04f 0c0a 	mov.w	ip, #10
 800c656:	4621      	mov	r1, r4
 800c658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c65c:	3b30      	subs	r3, #48	@ 0x30
 800c65e:	2b09      	cmp	r3, #9
 800c660:	d94b      	bls.n	800c6fa <_vfiprintf_r+0x1a2>
 800c662:	b1b0      	cbz	r0, 800c692 <_vfiprintf_r+0x13a>
 800c664:	9207      	str	r2, [sp, #28]
 800c666:	e014      	b.n	800c692 <_vfiprintf_r+0x13a>
 800c668:	eba0 0308 	sub.w	r3, r0, r8
 800c66c:	fa09 f303 	lsl.w	r3, r9, r3
 800c670:	4313      	orrs	r3, r2
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	46a2      	mov	sl, r4
 800c676:	e7d2      	b.n	800c61e <_vfiprintf_r+0xc6>
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	1d19      	adds	r1, r3, #4
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	9103      	str	r1, [sp, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	bfbb      	ittet	lt
 800c684:	425b      	neglt	r3, r3
 800c686:	f042 0202 	orrlt.w	r2, r2, #2
 800c68a:	9307      	strge	r3, [sp, #28]
 800c68c:	9307      	strlt	r3, [sp, #28]
 800c68e:	bfb8      	it	lt
 800c690:	9204      	strlt	r2, [sp, #16]
 800c692:	7823      	ldrb	r3, [r4, #0]
 800c694:	2b2e      	cmp	r3, #46	@ 0x2e
 800c696:	d10a      	bne.n	800c6ae <_vfiprintf_r+0x156>
 800c698:	7863      	ldrb	r3, [r4, #1]
 800c69a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c69c:	d132      	bne.n	800c704 <_vfiprintf_r+0x1ac>
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	1d1a      	adds	r2, r3, #4
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	9203      	str	r2, [sp, #12]
 800c6a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6aa:	3402      	adds	r4, #2
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c784 <_vfiprintf_r+0x22c>
 800c6b2:	7821      	ldrb	r1, [r4, #0]
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	4650      	mov	r0, sl
 800c6b8:	f7f3 fdaa 	bl	8000210 <memchr>
 800c6bc:	b138      	cbz	r0, 800c6ce <_vfiprintf_r+0x176>
 800c6be:	9b04      	ldr	r3, [sp, #16]
 800c6c0:	eba0 000a 	sub.w	r0, r0, sl
 800c6c4:	2240      	movs	r2, #64	@ 0x40
 800c6c6:	4082      	lsls	r2, r0
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	3401      	adds	r4, #1
 800c6cc:	9304      	str	r3, [sp, #16]
 800c6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d2:	4829      	ldr	r0, [pc, #164]	@ (800c778 <_vfiprintf_r+0x220>)
 800c6d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6d8:	2206      	movs	r2, #6
 800c6da:	f7f3 fd99 	bl	8000210 <memchr>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d03f      	beq.n	800c762 <_vfiprintf_r+0x20a>
 800c6e2:	4b26      	ldr	r3, [pc, #152]	@ (800c77c <_vfiprintf_r+0x224>)
 800c6e4:	bb1b      	cbnz	r3, 800c72e <_vfiprintf_r+0x1d6>
 800c6e6:	9b03      	ldr	r3, [sp, #12]
 800c6e8:	3307      	adds	r3, #7
 800c6ea:	f023 0307 	bic.w	r3, r3, #7
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	9303      	str	r3, [sp, #12]
 800c6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6f4:	443b      	add	r3, r7
 800c6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f8:	e76a      	b.n	800c5d0 <_vfiprintf_r+0x78>
 800c6fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6fe:	460c      	mov	r4, r1
 800c700:	2001      	movs	r0, #1
 800c702:	e7a8      	b.n	800c656 <_vfiprintf_r+0xfe>
 800c704:	2300      	movs	r3, #0
 800c706:	3401      	adds	r4, #1
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	4619      	mov	r1, r3
 800c70c:	f04f 0c0a 	mov.w	ip, #10
 800c710:	4620      	mov	r0, r4
 800c712:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c716:	3a30      	subs	r2, #48	@ 0x30
 800c718:	2a09      	cmp	r2, #9
 800c71a:	d903      	bls.n	800c724 <_vfiprintf_r+0x1cc>
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d0c6      	beq.n	800c6ae <_vfiprintf_r+0x156>
 800c720:	9105      	str	r1, [sp, #20]
 800c722:	e7c4      	b.n	800c6ae <_vfiprintf_r+0x156>
 800c724:	fb0c 2101 	mla	r1, ip, r1, r2
 800c728:	4604      	mov	r4, r0
 800c72a:	2301      	movs	r3, #1
 800c72c:	e7f0      	b.n	800c710 <_vfiprintf_r+0x1b8>
 800c72e:	ab03      	add	r3, sp, #12
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	462a      	mov	r2, r5
 800c734:	4b12      	ldr	r3, [pc, #72]	@ (800c780 <_vfiprintf_r+0x228>)
 800c736:	a904      	add	r1, sp, #16
 800c738:	4630      	mov	r0, r6
 800c73a:	f7fc fa7d 	bl	8008c38 <_printf_float>
 800c73e:	4607      	mov	r7, r0
 800c740:	1c78      	adds	r0, r7, #1
 800c742:	d1d6      	bne.n	800c6f2 <_vfiprintf_r+0x19a>
 800c744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c746:	07d9      	lsls	r1, r3, #31
 800c748:	d405      	bmi.n	800c756 <_vfiprintf_r+0x1fe>
 800c74a:	89ab      	ldrh	r3, [r5, #12]
 800c74c:	059a      	lsls	r2, r3, #22
 800c74e:	d402      	bmi.n	800c756 <_vfiprintf_r+0x1fe>
 800c750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c752:	f7fd fae5 	bl	8009d20 <__retarget_lock_release_recursive>
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	065b      	lsls	r3, r3, #25
 800c75a:	f53f af1f 	bmi.w	800c59c <_vfiprintf_r+0x44>
 800c75e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c760:	e71e      	b.n	800c5a0 <_vfiprintf_r+0x48>
 800c762:	ab03      	add	r3, sp, #12
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	462a      	mov	r2, r5
 800c768:	4b05      	ldr	r3, [pc, #20]	@ (800c780 <_vfiprintf_r+0x228>)
 800c76a:	a904      	add	r1, sp, #16
 800c76c:	4630      	mov	r0, r6
 800c76e:	f7fc fcfb 	bl	8009168 <_printf_i>
 800c772:	e7e4      	b.n	800c73e <_vfiprintf_r+0x1e6>
 800c774:	0800ddd9 	.word	0x0800ddd9
 800c778:	0800dde3 	.word	0x0800dde3
 800c77c:	08008c39 	.word	0x08008c39
 800c780:	0800c533 	.word	0x0800c533
 800c784:	0800dddf 	.word	0x0800dddf

0800c788 <__sflush_r>:
 800c788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c790:	0716      	lsls	r6, r2, #28
 800c792:	4605      	mov	r5, r0
 800c794:	460c      	mov	r4, r1
 800c796:	d454      	bmi.n	800c842 <__sflush_r+0xba>
 800c798:	684b      	ldr	r3, [r1, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dc02      	bgt.n	800c7a4 <__sflush_r+0x1c>
 800c79e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	dd48      	ble.n	800c836 <__sflush_r+0xae>
 800c7a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7a6:	2e00      	cmp	r6, #0
 800c7a8:	d045      	beq.n	800c836 <__sflush_r+0xae>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7b0:	682f      	ldr	r7, [r5, #0]
 800c7b2:	6a21      	ldr	r1, [r4, #32]
 800c7b4:	602b      	str	r3, [r5, #0]
 800c7b6:	d030      	beq.n	800c81a <__sflush_r+0x92>
 800c7b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	0759      	lsls	r1, r3, #29
 800c7be:	d505      	bpl.n	800c7cc <__sflush_r+0x44>
 800c7c0:	6863      	ldr	r3, [r4, #4]
 800c7c2:	1ad2      	subs	r2, r2, r3
 800c7c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7c6:	b10b      	cbz	r3, 800c7cc <__sflush_r+0x44>
 800c7c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7ca:	1ad2      	subs	r2, r2, r3
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7d0:	6a21      	ldr	r1, [r4, #32]
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	47b0      	blx	r6
 800c7d6:	1c43      	adds	r3, r0, #1
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	d106      	bne.n	800c7ea <__sflush_r+0x62>
 800c7dc:	6829      	ldr	r1, [r5, #0]
 800c7de:	291d      	cmp	r1, #29
 800c7e0:	d82b      	bhi.n	800c83a <__sflush_r+0xb2>
 800c7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800c88c <__sflush_r+0x104>)
 800c7e4:	410a      	asrs	r2, r1
 800c7e6:	07d6      	lsls	r6, r2, #31
 800c7e8:	d427      	bmi.n	800c83a <__sflush_r+0xb2>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	6062      	str	r2, [r4, #4]
 800c7ee:	04d9      	lsls	r1, r3, #19
 800c7f0:	6922      	ldr	r2, [r4, #16]
 800c7f2:	6022      	str	r2, [r4, #0]
 800c7f4:	d504      	bpl.n	800c800 <__sflush_r+0x78>
 800c7f6:	1c42      	adds	r2, r0, #1
 800c7f8:	d101      	bne.n	800c7fe <__sflush_r+0x76>
 800c7fa:	682b      	ldr	r3, [r5, #0]
 800c7fc:	b903      	cbnz	r3, 800c800 <__sflush_r+0x78>
 800c7fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800c800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c802:	602f      	str	r7, [r5, #0]
 800c804:	b1b9      	cbz	r1, 800c836 <__sflush_r+0xae>
 800c806:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c80a:	4299      	cmp	r1, r3
 800c80c:	d002      	beq.n	800c814 <__sflush_r+0x8c>
 800c80e:	4628      	mov	r0, r5
 800c810:	f7fe f8ea 	bl	800a9e8 <_free_r>
 800c814:	2300      	movs	r3, #0
 800c816:	6363      	str	r3, [r4, #52]	@ 0x34
 800c818:	e00d      	b.n	800c836 <__sflush_r+0xae>
 800c81a:	2301      	movs	r3, #1
 800c81c:	4628      	mov	r0, r5
 800c81e:	47b0      	blx	r6
 800c820:	4602      	mov	r2, r0
 800c822:	1c50      	adds	r0, r2, #1
 800c824:	d1c9      	bne.n	800c7ba <__sflush_r+0x32>
 800c826:	682b      	ldr	r3, [r5, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d0c6      	beq.n	800c7ba <__sflush_r+0x32>
 800c82c:	2b1d      	cmp	r3, #29
 800c82e:	d001      	beq.n	800c834 <__sflush_r+0xac>
 800c830:	2b16      	cmp	r3, #22
 800c832:	d11e      	bne.n	800c872 <__sflush_r+0xea>
 800c834:	602f      	str	r7, [r5, #0]
 800c836:	2000      	movs	r0, #0
 800c838:	e022      	b.n	800c880 <__sflush_r+0xf8>
 800c83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c83e:	b21b      	sxth	r3, r3
 800c840:	e01b      	b.n	800c87a <__sflush_r+0xf2>
 800c842:	690f      	ldr	r7, [r1, #16]
 800c844:	2f00      	cmp	r7, #0
 800c846:	d0f6      	beq.n	800c836 <__sflush_r+0xae>
 800c848:	0793      	lsls	r3, r2, #30
 800c84a:	680e      	ldr	r6, [r1, #0]
 800c84c:	bf08      	it	eq
 800c84e:	694b      	ldreq	r3, [r1, #20]
 800c850:	600f      	str	r7, [r1, #0]
 800c852:	bf18      	it	ne
 800c854:	2300      	movne	r3, #0
 800c856:	eba6 0807 	sub.w	r8, r6, r7
 800c85a:	608b      	str	r3, [r1, #8]
 800c85c:	f1b8 0f00 	cmp.w	r8, #0
 800c860:	dde9      	ble.n	800c836 <__sflush_r+0xae>
 800c862:	6a21      	ldr	r1, [r4, #32]
 800c864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c866:	4643      	mov	r3, r8
 800c868:	463a      	mov	r2, r7
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b0      	blx	r6
 800c86e:	2800      	cmp	r0, #0
 800c870:	dc08      	bgt.n	800c884 <__sflush_r+0xfc>
 800c872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	f04f 30ff 	mov.w	r0, #4294967295
 800c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c884:	4407      	add	r7, r0
 800c886:	eba8 0800 	sub.w	r8, r8, r0
 800c88a:	e7e7      	b.n	800c85c <__sflush_r+0xd4>
 800c88c:	dfbffffe 	.word	0xdfbffffe

0800c890 <_fflush_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	690b      	ldr	r3, [r1, #16]
 800c894:	4605      	mov	r5, r0
 800c896:	460c      	mov	r4, r1
 800c898:	b913      	cbnz	r3, 800c8a0 <_fflush_r+0x10>
 800c89a:	2500      	movs	r5, #0
 800c89c:	4628      	mov	r0, r5
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	b118      	cbz	r0, 800c8aa <_fflush_r+0x1a>
 800c8a2:	6a03      	ldr	r3, [r0, #32]
 800c8a4:	b90b      	cbnz	r3, 800c8aa <_fflush_r+0x1a>
 800c8a6:	f7fd f81f 	bl	80098e8 <__sinit>
 800c8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0f3      	beq.n	800c89a <_fflush_r+0xa>
 800c8b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8b4:	07d0      	lsls	r0, r2, #31
 800c8b6:	d404      	bmi.n	800c8c2 <_fflush_r+0x32>
 800c8b8:	0599      	lsls	r1, r3, #22
 800c8ba:	d402      	bmi.n	800c8c2 <_fflush_r+0x32>
 800c8bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8be:	f7fd fa2e 	bl	8009d1e <__retarget_lock_acquire_recursive>
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	4621      	mov	r1, r4
 800c8c6:	f7ff ff5f 	bl	800c788 <__sflush_r>
 800c8ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8cc:	07da      	lsls	r2, r3, #31
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	d4e4      	bmi.n	800c89c <_fflush_r+0xc>
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	059b      	lsls	r3, r3, #22
 800c8d6:	d4e1      	bmi.n	800c89c <_fflush_r+0xc>
 800c8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8da:	f7fd fa21 	bl	8009d20 <__retarget_lock_release_recursive>
 800c8de:	e7dd      	b.n	800c89c <_fflush_r+0xc>

0800c8e0 <__swhatbuf_r>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e8:	2900      	cmp	r1, #0
 800c8ea:	b096      	sub	sp, #88	@ 0x58
 800c8ec:	4615      	mov	r5, r2
 800c8ee:	461e      	mov	r6, r3
 800c8f0:	da0d      	bge.n	800c90e <__swhatbuf_r+0x2e>
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c8f8:	f04f 0100 	mov.w	r1, #0
 800c8fc:	bf14      	ite	ne
 800c8fe:	2340      	movne	r3, #64	@ 0x40
 800c900:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c904:	2000      	movs	r0, #0
 800c906:	6031      	str	r1, [r6, #0]
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	b016      	add	sp, #88	@ 0x58
 800c90c:	bd70      	pop	{r4, r5, r6, pc}
 800c90e:	466a      	mov	r2, sp
 800c910:	f000 f874 	bl	800c9fc <_fstat_r>
 800c914:	2800      	cmp	r0, #0
 800c916:	dbec      	blt.n	800c8f2 <__swhatbuf_r+0x12>
 800c918:	9901      	ldr	r1, [sp, #4]
 800c91a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c91e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c922:	4259      	negs	r1, r3
 800c924:	4159      	adcs	r1, r3
 800c926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c92a:	e7eb      	b.n	800c904 <__swhatbuf_r+0x24>

0800c92c <__smakebuf_r>:
 800c92c:	898b      	ldrh	r3, [r1, #12]
 800c92e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c930:	079d      	lsls	r5, r3, #30
 800c932:	4606      	mov	r6, r0
 800c934:	460c      	mov	r4, r1
 800c936:	d507      	bpl.n	800c948 <__smakebuf_r+0x1c>
 800c938:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	6123      	str	r3, [r4, #16]
 800c940:	2301      	movs	r3, #1
 800c942:	6163      	str	r3, [r4, #20]
 800c944:	b003      	add	sp, #12
 800c946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c948:	ab01      	add	r3, sp, #4
 800c94a:	466a      	mov	r2, sp
 800c94c:	f7ff ffc8 	bl	800c8e0 <__swhatbuf_r>
 800c950:	9f00      	ldr	r7, [sp, #0]
 800c952:	4605      	mov	r5, r0
 800c954:	4639      	mov	r1, r7
 800c956:	4630      	mov	r0, r6
 800c958:	f7fe f8ba 	bl	800aad0 <_malloc_r>
 800c95c:	b948      	cbnz	r0, 800c972 <__smakebuf_r+0x46>
 800c95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c962:	059a      	lsls	r2, r3, #22
 800c964:	d4ee      	bmi.n	800c944 <__smakebuf_r+0x18>
 800c966:	f023 0303 	bic.w	r3, r3, #3
 800c96a:	f043 0302 	orr.w	r3, r3, #2
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	e7e2      	b.n	800c938 <__smakebuf_r+0xc>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	6020      	str	r0, [r4, #0]
 800c976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c97a:	81a3      	strh	r3, [r4, #12]
 800c97c:	9b01      	ldr	r3, [sp, #4]
 800c97e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c982:	b15b      	cbz	r3, 800c99c <__smakebuf_r+0x70>
 800c984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c988:	4630      	mov	r0, r6
 800c98a:	f000 f849 	bl	800ca20 <_isatty_r>
 800c98e:	b128      	cbz	r0, 800c99c <__smakebuf_r+0x70>
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	f023 0303 	bic.w	r3, r3, #3
 800c996:	f043 0301 	orr.w	r3, r3, #1
 800c99a:	81a3      	strh	r3, [r4, #12]
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	431d      	orrs	r5, r3
 800c9a0:	81a5      	strh	r5, [r4, #12]
 800c9a2:	e7cf      	b.n	800c944 <__smakebuf_r+0x18>

0800c9a4 <memmove>:
 800c9a4:	4288      	cmp	r0, r1
 800c9a6:	b510      	push	{r4, lr}
 800c9a8:	eb01 0402 	add.w	r4, r1, r2
 800c9ac:	d902      	bls.n	800c9b4 <memmove+0x10>
 800c9ae:	4284      	cmp	r4, r0
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	d807      	bhi.n	800c9c4 <memmove+0x20>
 800c9b4:	1e43      	subs	r3, r0, #1
 800c9b6:	42a1      	cmp	r1, r4
 800c9b8:	d008      	beq.n	800c9cc <memmove+0x28>
 800c9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9c2:	e7f8      	b.n	800c9b6 <memmove+0x12>
 800c9c4:	4402      	add	r2, r0
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	428a      	cmp	r2, r1
 800c9ca:	d100      	bne.n	800c9ce <memmove+0x2a>
 800c9cc:	bd10      	pop	{r4, pc}
 800c9ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9d6:	e7f7      	b.n	800c9c8 <memmove+0x24>

0800c9d8 <strncmp>:
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	b16a      	cbz	r2, 800c9f8 <strncmp+0x20>
 800c9dc:	3901      	subs	r1, #1
 800c9de:	1884      	adds	r4, r0, r2
 800c9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d103      	bne.n	800c9f4 <strncmp+0x1c>
 800c9ec:	42a0      	cmp	r0, r4
 800c9ee:	d001      	beq.n	800c9f4 <strncmp+0x1c>
 800c9f0:	2a00      	cmp	r2, #0
 800c9f2:	d1f5      	bne.n	800c9e0 <strncmp+0x8>
 800c9f4:	1ad0      	subs	r0, r2, r3
 800c9f6:	bd10      	pop	{r4, pc}
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	e7fc      	b.n	800c9f6 <strncmp+0x1e>

0800c9fc <_fstat_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d07      	ldr	r5, [pc, #28]	@ (800ca1c <_fstat_r+0x20>)
 800ca00:	2300      	movs	r3, #0
 800ca02:	4604      	mov	r4, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	4611      	mov	r1, r2
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	f7f6 fff1 	bl	80039f0 <_fstat>
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	d102      	bne.n	800ca18 <_fstat_r+0x1c>
 800ca12:	682b      	ldr	r3, [r5, #0]
 800ca14:	b103      	cbz	r3, 800ca18 <_fstat_r+0x1c>
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	bd38      	pop	{r3, r4, r5, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20000814 	.word	0x20000814

0800ca20 <_isatty_r>:
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	4d06      	ldr	r5, [pc, #24]	@ (800ca3c <_isatty_r+0x1c>)
 800ca24:	2300      	movs	r3, #0
 800ca26:	4604      	mov	r4, r0
 800ca28:	4608      	mov	r0, r1
 800ca2a:	602b      	str	r3, [r5, #0]
 800ca2c:	f7f6 fff0 	bl	8003a10 <_isatty>
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	d102      	bne.n	800ca3a <_isatty_r+0x1a>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	b103      	cbz	r3, 800ca3a <_isatty_r+0x1a>
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	20000814 	.word	0x20000814

0800ca40 <_sbrk_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d06      	ldr	r5, [pc, #24]	@ (800ca5c <_sbrk_r+0x1c>)
 800ca44:	2300      	movs	r3, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	4608      	mov	r0, r1
 800ca4a:	602b      	str	r3, [r5, #0]
 800ca4c:	f7f6 fff8 	bl	8003a40 <_sbrk>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_sbrk_r+0x1a>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_sbrk_r+0x1a>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20000814 	.word	0x20000814

0800ca60 <nan>:
 800ca60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca68 <nan+0x8>
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	00000000 	.word	0x00000000
 800ca6c:	7ff80000 	.word	0x7ff80000

0800ca70 <__assert_func>:
 800ca70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca72:	4614      	mov	r4, r2
 800ca74:	461a      	mov	r2, r3
 800ca76:	4b09      	ldr	r3, [pc, #36]	@ (800ca9c <__assert_func+0x2c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	68d8      	ldr	r0, [r3, #12]
 800ca7e:	b954      	cbnz	r4, 800ca96 <__assert_func+0x26>
 800ca80:	4b07      	ldr	r3, [pc, #28]	@ (800caa0 <__assert_func+0x30>)
 800ca82:	461c      	mov	r4, r3
 800ca84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca88:	9100      	str	r1, [sp, #0]
 800ca8a:	462b      	mov	r3, r5
 800ca8c:	4905      	ldr	r1, [pc, #20]	@ (800caa4 <__assert_func+0x34>)
 800ca8e:	f000 fba7 	bl	800d1e0 <fiprintf>
 800ca92:	f000 fbb7 	bl	800d204 <abort>
 800ca96:	4b04      	ldr	r3, [pc, #16]	@ (800caa8 <__assert_func+0x38>)
 800ca98:	e7f4      	b.n	800ca84 <__assert_func+0x14>
 800ca9a:	bf00      	nop
 800ca9c:	20000044 	.word	0x20000044
 800caa0:	0800de2d 	.word	0x0800de2d
 800caa4:	0800ddff 	.word	0x0800ddff
 800caa8:	0800ddf2 	.word	0x0800ddf2

0800caac <_calloc_r>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	fba1 5402 	umull	r5, r4, r1, r2
 800cab2:	b93c      	cbnz	r4, 800cac4 <_calloc_r+0x18>
 800cab4:	4629      	mov	r1, r5
 800cab6:	f7fe f80b 	bl	800aad0 <_malloc_r>
 800caba:	4606      	mov	r6, r0
 800cabc:	b928      	cbnz	r0, 800caca <_calloc_r+0x1e>
 800cabe:	2600      	movs	r6, #0
 800cac0:	4630      	mov	r0, r6
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	220c      	movs	r2, #12
 800cac6:	6002      	str	r2, [r0, #0]
 800cac8:	e7f9      	b.n	800cabe <_calloc_r+0x12>
 800caca:	462a      	mov	r2, r5
 800cacc:	4621      	mov	r1, r4
 800cace:	f7fd f8a9 	bl	8009c24 <memset>
 800cad2:	e7f5      	b.n	800cac0 <_calloc_r+0x14>

0800cad4 <rshift>:
 800cad4:	6903      	ldr	r3, [r0, #16]
 800cad6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cada:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cade:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cae2:	f100 0414 	add.w	r4, r0, #20
 800cae6:	dd45      	ble.n	800cb74 <rshift+0xa0>
 800cae8:	f011 011f 	ands.w	r1, r1, #31
 800caec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800caf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800caf4:	d10c      	bne.n	800cb10 <rshift+0x3c>
 800caf6:	f100 0710 	add.w	r7, r0, #16
 800cafa:	4629      	mov	r1, r5
 800cafc:	42b1      	cmp	r1, r6
 800cafe:	d334      	bcc.n	800cb6a <rshift+0x96>
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	1eea      	subs	r2, r5, #3
 800cb06:	4296      	cmp	r6, r2
 800cb08:	bf38      	it	cc
 800cb0a:	2300      	movcc	r3, #0
 800cb0c:	4423      	add	r3, r4
 800cb0e:	e015      	b.n	800cb3c <rshift+0x68>
 800cb10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb14:	f1c1 0820 	rsb	r8, r1, #32
 800cb18:	40cf      	lsrs	r7, r1
 800cb1a:	f105 0e04 	add.w	lr, r5, #4
 800cb1e:	46a1      	mov	r9, r4
 800cb20:	4576      	cmp	r6, lr
 800cb22:	46f4      	mov	ip, lr
 800cb24:	d815      	bhi.n	800cb52 <rshift+0x7e>
 800cb26:	1a9a      	subs	r2, r3, r2
 800cb28:	0092      	lsls	r2, r2, #2
 800cb2a:	3a04      	subs	r2, #4
 800cb2c:	3501      	adds	r5, #1
 800cb2e:	42ae      	cmp	r6, r5
 800cb30:	bf38      	it	cc
 800cb32:	2200      	movcc	r2, #0
 800cb34:	18a3      	adds	r3, r4, r2
 800cb36:	50a7      	str	r7, [r4, r2]
 800cb38:	b107      	cbz	r7, 800cb3c <rshift+0x68>
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	1b1a      	subs	r2, r3, r4
 800cb3e:	42a3      	cmp	r3, r4
 800cb40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb44:	bf08      	it	eq
 800cb46:	2300      	moveq	r3, #0
 800cb48:	6102      	str	r2, [r0, #16]
 800cb4a:	bf08      	it	eq
 800cb4c:	6143      	streq	r3, [r0, #20]
 800cb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb52:	f8dc c000 	ldr.w	ip, [ip]
 800cb56:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb5a:	ea4c 0707 	orr.w	r7, ip, r7
 800cb5e:	f849 7b04 	str.w	r7, [r9], #4
 800cb62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb66:	40cf      	lsrs	r7, r1
 800cb68:	e7da      	b.n	800cb20 <rshift+0x4c>
 800cb6a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb6e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb72:	e7c3      	b.n	800cafc <rshift+0x28>
 800cb74:	4623      	mov	r3, r4
 800cb76:	e7e1      	b.n	800cb3c <rshift+0x68>

0800cb78 <__hexdig_fun>:
 800cb78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cb7c:	2b09      	cmp	r3, #9
 800cb7e:	d802      	bhi.n	800cb86 <__hexdig_fun+0xe>
 800cb80:	3820      	subs	r0, #32
 800cb82:	b2c0      	uxtb	r0, r0
 800cb84:	4770      	bx	lr
 800cb86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cb8a:	2b05      	cmp	r3, #5
 800cb8c:	d801      	bhi.n	800cb92 <__hexdig_fun+0x1a>
 800cb8e:	3847      	subs	r0, #71	@ 0x47
 800cb90:	e7f7      	b.n	800cb82 <__hexdig_fun+0xa>
 800cb92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cb96:	2b05      	cmp	r3, #5
 800cb98:	d801      	bhi.n	800cb9e <__hexdig_fun+0x26>
 800cb9a:	3827      	subs	r0, #39	@ 0x27
 800cb9c:	e7f1      	b.n	800cb82 <__hexdig_fun+0xa>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	4770      	bx	lr
	...

0800cba4 <__gethex>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	b085      	sub	sp, #20
 800cbaa:	468a      	mov	sl, r1
 800cbac:	9302      	str	r3, [sp, #8]
 800cbae:	680b      	ldr	r3, [r1, #0]
 800cbb0:	9001      	str	r0, [sp, #4]
 800cbb2:	4690      	mov	r8, r2
 800cbb4:	1c9c      	adds	r4, r3, #2
 800cbb6:	46a1      	mov	r9, r4
 800cbb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cbbc:	2830      	cmp	r0, #48	@ 0x30
 800cbbe:	d0fa      	beq.n	800cbb6 <__gethex+0x12>
 800cbc0:	eba9 0303 	sub.w	r3, r9, r3
 800cbc4:	f1a3 0b02 	sub.w	fp, r3, #2
 800cbc8:	f7ff ffd6 	bl	800cb78 <__hexdig_fun>
 800cbcc:	4605      	mov	r5, r0
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d168      	bne.n	800cca4 <__gethex+0x100>
 800cbd2:	49a0      	ldr	r1, [pc, #640]	@ (800ce54 <__gethex+0x2b0>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	4648      	mov	r0, r9
 800cbd8:	f7ff fefe 	bl	800c9d8 <strncmp>
 800cbdc:	4607      	mov	r7, r0
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d167      	bne.n	800ccb2 <__gethex+0x10e>
 800cbe2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cbe6:	4626      	mov	r6, r4
 800cbe8:	f7ff ffc6 	bl	800cb78 <__hexdig_fun>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d062      	beq.n	800ccb6 <__gethex+0x112>
 800cbf0:	4623      	mov	r3, r4
 800cbf2:	7818      	ldrb	r0, [r3, #0]
 800cbf4:	2830      	cmp	r0, #48	@ 0x30
 800cbf6:	4699      	mov	r9, r3
 800cbf8:	f103 0301 	add.w	r3, r3, #1
 800cbfc:	d0f9      	beq.n	800cbf2 <__gethex+0x4e>
 800cbfe:	f7ff ffbb 	bl	800cb78 <__hexdig_fun>
 800cc02:	fab0 f580 	clz	r5, r0
 800cc06:	096d      	lsrs	r5, r5, #5
 800cc08:	f04f 0b01 	mov.w	fp, #1
 800cc0c:	464a      	mov	r2, r9
 800cc0e:	4616      	mov	r6, r2
 800cc10:	3201      	adds	r2, #1
 800cc12:	7830      	ldrb	r0, [r6, #0]
 800cc14:	f7ff ffb0 	bl	800cb78 <__hexdig_fun>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d1f8      	bne.n	800cc0e <__gethex+0x6a>
 800cc1c:	498d      	ldr	r1, [pc, #564]	@ (800ce54 <__gethex+0x2b0>)
 800cc1e:	2201      	movs	r2, #1
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7ff fed9 	bl	800c9d8 <strncmp>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d13f      	bne.n	800ccaa <__gethex+0x106>
 800cc2a:	b944      	cbnz	r4, 800cc3e <__gethex+0x9a>
 800cc2c:	1c74      	adds	r4, r6, #1
 800cc2e:	4622      	mov	r2, r4
 800cc30:	4616      	mov	r6, r2
 800cc32:	3201      	adds	r2, #1
 800cc34:	7830      	ldrb	r0, [r6, #0]
 800cc36:	f7ff ff9f 	bl	800cb78 <__hexdig_fun>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d1f8      	bne.n	800cc30 <__gethex+0x8c>
 800cc3e:	1ba4      	subs	r4, r4, r6
 800cc40:	00a7      	lsls	r7, r4, #2
 800cc42:	7833      	ldrb	r3, [r6, #0]
 800cc44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cc48:	2b50      	cmp	r3, #80	@ 0x50
 800cc4a:	d13e      	bne.n	800ccca <__gethex+0x126>
 800cc4c:	7873      	ldrb	r3, [r6, #1]
 800cc4e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc50:	d033      	beq.n	800ccba <__gethex+0x116>
 800cc52:	2b2d      	cmp	r3, #45	@ 0x2d
 800cc54:	d034      	beq.n	800ccc0 <__gethex+0x11c>
 800cc56:	1c71      	adds	r1, r6, #1
 800cc58:	2400      	movs	r4, #0
 800cc5a:	7808      	ldrb	r0, [r1, #0]
 800cc5c:	f7ff ff8c 	bl	800cb78 <__hexdig_fun>
 800cc60:	1e43      	subs	r3, r0, #1
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b18      	cmp	r3, #24
 800cc66:	d830      	bhi.n	800ccca <__gethex+0x126>
 800cc68:	f1a0 0210 	sub.w	r2, r0, #16
 800cc6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc70:	f7ff ff82 	bl	800cb78 <__hexdig_fun>
 800cc74:	f100 3cff 	add.w	ip, r0, #4294967295
 800cc78:	fa5f fc8c 	uxtb.w	ip, ip
 800cc7c:	f1bc 0f18 	cmp.w	ip, #24
 800cc80:	f04f 030a 	mov.w	r3, #10
 800cc84:	d91e      	bls.n	800ccc4 <__gethex+0x120>
 800cc86:	b104      	cbz	r4, 800cc8a <__gethex+0xe6>
 800cc88:	4252      	negs	r2, r2
 800cc8a:	4417      	add	r7, r2
 800cc8c:	f8ca 1000 	str.w	r1, [sl]
 800cc90:	b1ed      	cbz	r5, 800ccce <__gethex+0x12a>
 800cc92:	f1bb 0f00 	cmp.w	fp, #0
 800cc96:	bf0c      	ite	eq
 800cc98:	2506      	moveq	r5, #6
 800cc9a:	2500      	movne	r5, #0
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	b005      	add	sp, #20
 800cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca4:	2500      	movs	r5, #0
 800cca6:	462c      	mov	r4, r5
 800cca8:	e7b0      	b.n	800cc0c <__gethex+0x68>
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	d1c7      	bne.n	800cc3e <__gethex+0x9a>
 800ccae:	4627      	mov	r7, r4
 800ccb0:	e7c7      	b.n	800cc42 <__gethex+0x9e>
 800ccb2:	464e      	mov	r6, r9
 800ccb4:	462f      	mov	r7, r5
 800ccb6:	2501      	movs	r5, #1
 800ccb8:	e7c3      	b.n	800cc42 <__gethex+0x9e>
 800ccba:	2400      	movs	r4, #0
 800ccbc:	1cb1      	adds	r1, r6, #2
 800ccbe:	e7cc      	b.n	800cc5a <__gethex+0xb6>
 800ccc0:	2401      	movs	r4, #1
 800ccc2:	e7fb      	b.n	800ccbc <__gethex+0x118>
 800ccc4:	fb03 0002 	mla	r0, r3, r2, r0
 800ccc8:	e7ce      	b.n	800cc68 <__gethex+0xc4>
 800ccca:	4631      	mov	r1, r6
 800cccc:	e7de      	b.n	800cc8c <__gethex+0xe8>
 800ccce:	eba6 0309 	sub.w	r3, r6, r9
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	2b07      	cmp	r3, #7
 800ccd8:	dc0a      	bgt.n	800ccf0 <__gethex+0x14c>
 800ccda:	9801      	ldr	r0, [sp, #4]
 800ccdc:	f7fd ff84 	bl	800abe8 <_Balloc>
 800cce0:	4604      	mov	r4, r0
 800cce2:	b940      	cbnz	r0, 800ccf6 <__gethex+0x152>
 800cce4:	4b5c      	ldr	r3, [pc, #368]	@ (800ce58 <__gethex+0x2b4>)
 800cce6:	4602      	mov	r2, r0
 800cce8:	21e4      	movs	r1, #228	@ 0xe4
 800ccea:	485c      	ldr	r0, [pc, #368]	@ (800ce5c <__gethex+0x2b8>)
 800ccec:	f7ff fec0 	bl	800ca70 <__assert_func>
 800ccf0:	3101      	adds	r1, #1
 800ccf2:	105b      	asrs	r3, r3, #1
 800ccf4:	e7ef      	b.n	800ccd6 <__gethex+0x132>
 800ccf6:	f100 0a14 	add.w	sl, r0, #20
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	4655      	mov	r5, sl
 800ccfe:	469b      	mov	fp, r3
 800cd00:	45b1      	cmp	r9, r6
 800cd02:	d337      	bcc.n	800cd74 <__gethex+0x1d0>
 800cd04:	f845 bb04 	str.w	fp, [r5], #4
 800cd08:	eba5 050a 	sub.w	r5, r5, sl
 800cd0c:	10ad      	asrs	r5, r5, #2
 800cd0e:	6125      	str	r5, [r4, #16]
 800cd10:	4658      	mov	r0, fp
 800cd12:	f7fe f85b 	bl	800adcc <__hi0bits>
 800cd16:	016d      	lsls	r5, r5, #5
 800cd18:	f8d8 6000 	ldr.w	r6, [r8]
 800cd1c:	1a2d      	subs	r5, r5, r0
 800cd1e:	42b5      	cmp	r5, r6
 800cd20:	dd54      	ble.n	800cdcc <__gethex+0x228>
 800cd22:	1bad      	subs	r5, r5, r6
 800cd24:	4629      	mov	r1, r5
 800cd26:	4620      	mov	r0, r4
 800cd28:	f7fe fbef 	bl	800b50a <__any_on>
 800cd2c:	4681      	mov	r9, r0
 800cd2e:	b178      	cbz	r0, 800cd50 <__gethex+0x1ac>
 800cd30:	1e6b      	subs	r3, r5, #1
 800cd32:	1159      	asrs	r1, r3, #5
 800cd34:	f003 021f 	and.w	r2, r3, #31
 800cd38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cd3c:	f04f 0901 	mov.w	r9, #1
 800cd40:	fa09 f202 	lsl.w	r2, r9, r2
 800cd44:	420a      	tst	r2, r1
 800cd46:	d003      	beq.n	800cd50 <__gethex+0x1ac>
 800cd48:	454b      	cmp	r3, r9
 800cd4a:	dc36      	bgt.n	800cdba <__gethex+0x216>
 800cd4c:	f04f 0902 	mov.w	r9, #2
 800cd50:	4629      	mov	r1, r5
 800cd52:	4620      	mov	r0, r4
 800cd54:	f7ff febe 	bl	800cad4 <rshift>
 800cd58:	442f      	add	r7, r5
 800cd5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd5e:	42bb      	cmp	r3, r7
 800cd60:	da42      	bge.n	800cde8 <__gethex+0x244>
 800cd62:	9801      	ldr	r0, [sp, #4]
 800cd64:	4621      	mov	r1, r4
 800cd66:	f7fd ff7f 	bl	800ac68 <_Bfree>
 800cd6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	25a3      	movs	r5, #163	@ 0xa3
 800cd72:	e793      	b.n	800cc9c <__gethex+0xf8>
 800cd74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cd78:	2a2e      	cmp	r2, #46	@ 0x2e
 800cd7a:	d012      	beq.n	800cda2 <__gethex+0x1fe>
 800cd7c:	2b20      	cmp	r3, #32
 800cd7e:	d104      	bne.n	800cd8a <__gethex+0x1e6>
 800cd80:	f845 bb04 	str.w	fp, [r5], #4
 800cd84:	f04f 0b00 	mov.w	fp, #0
 800cd88:	465b      	mov	r3, fp
 800cd8a:	7830      	ldrb	r0, [r6, #0]
 800cd8c:	9303      	str	r3, [sp, #12]
 800cd8e:	f7ff fef3 	bl	800cb78 <__hexdig_fun>
 800cd92:	9b03      	ldr	r3, [sp, #12]
 800cd94:	f000 000f 	and.w	r0, r0, #15
 800cd98:	4098      	lsls	r0, r3
 800cd9a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd9e:	3304      	adds	r3, #4
 800cda0:	e7ae      	b.n	800cd00 <__gethex+0x15c>
 800cda2:	45b1      	cmp	r9, r6
 800cda4:	d8ea      	bhi.n	800cd7c <__gethex+0x1d8>
 800cda6:	492b      	ldr	r1, [pc, #172]	@ (800ce54 <__gethex+0x2b0>)
 800cda8:	9303      	str	r3, [sp, #12]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7ff fe13 	bl	800c9d8 <strncmp>
 800cdb2:	9b03      	ldr	r3, [sp, #12]
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d1e1      	bne.n	800cd7c <__gethex+0x1d8>
 800cdb8:	e7a2      	b.n	800cd00 <__gethex+0x15c>
 800cdba:	1ea9      	subs	r1, r5, #2
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f7fe fba4 	bl	800b50a <__any_on>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0c2      	beq.n	800cd4c <__gethex+0x1a8>
 800cdc6:	f04f 0903 	mov.w	r9, #3
 800cdca:	e7c1      	b.n	800cd50 <__gethex+0x1ac>
 800cdcc:	da09      	bge.n	800cde2 <__gethex+0x23e>
 800cdce:	1b75      	subs	r5, r6, r5
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	9801      	ldr	r0, [sp, #4]
 800cdd4:	462a      	mov	r2, r5
 800cdd6:	f7fe f95f 	bl	800b098 <__lshift>
 800cdda:	1b7f      	subs	r7, r7, r5
 800cddc:	4604      	mov	r4, r0
 800cdde:	f100 0a14 	add.w	sl, r0, #20
 800cde2:	f04f 0900 	mov.w	r9, #0
 800cde6:	e7b8      	b.n	800cd5a <__gethex+0x1b6>
 800cde8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdec:	42bd      	cmp	r5, r7
 800cdee:	dd6f      	ble.n	800ced0 <__gethex+0x32c>
 800cdf0:	1bed      	subs	r5, r5, r7
 800cdf2:	42ae      	cmp	r6, r5
 800cdf4:	dc34      	bgt.n	800ce60 <__gethex+0x2bc>
 800cdf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d022      	beq.n	800ce44 <__gethex+0x2a0>
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d024      	beq.n	800ce4c <__gethex+0x2a8>
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d115      	bne.n	800ce32 <__gethex+0x28e>
 800ce06:	42ae      	cmp	r6, r5
 800ce08:	d113      	bne.n	800ce32 <__gethex+0x28e>
 800ce0a:	2e01      	cmp	r6, #1
 800ce0c:	d10b      	bne.n	800ce26 <__gethex+0x282>
 800ce0e:	9a02      	ldr	r2, [sp, #8]
 800ce10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce14:	6013      	str	r3, [r2, #0]
 800ce16:	2301      	movs	r3, #1
 800ce18:	6123      	str	r3, [r4, #16]
 800ce1a:	f8ca 3000 	str.w	r3, [sl]
 800ce1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce20:	2562      	movs	r5, #98	@ 0x62
 800ce22:	601c      	str	r4, [r3, #0]
 800ce24:	e73a      	b.n	800cc9c <__gethex+0xf8>
 800ce26:	1e71      	subs	r1, r6, #1
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f7fe fb6e 	bl	800b50a <__any_on>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d1ed      	bne.n	800ce0e <__gethex+0x26a>
 800ce32:	9801      	ldr	r0, [sp, #4]
 800ce34:	4621      	mov	r1, r4
 800ce36:	f7fd ff17 	bl	800ac68 <_Bfree>
 800ce3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	6013      	str	r3, [r2, #0]
 800ce40:	2550      	movs	r5, #80	@ 0x50
 800ce42:	e72b      	b.n	800cc9c <__gethex+0xf8>
 800ce44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1f3      	bne.n	800ce32 <__gethex+0x28e>
 800ce4a:	e7e0      	b.n	800ce0e <__gethex+0x26a>
 800ce4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1dd      	bne.n	800ce0e <__gethex+0x26a>
 800ce52:	e7ee      	b.n	800ce32 <__gethex+0x28e>
 800ce54:	0800dc80 	.word	0x0800dc80
 800ce58:	0800db19 	.word	0x0800db19
 800ce5c:	0800de2e 	.word	0x0800de2e
 800ce60:	1e6f      	subs	r7, r5, #1
 800ce62:	f1b9 0f00 	cmp.w	r9, #0
 800ce66:	d130      	bne.n	800ceca <__gethex+0x326>
 800ce68:	b127      	cbz	r7, 800ce74 <__gethex+0x2d0>
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f7fe fb4c 	bl	800b50a <__any_on>
 800ce72:	4681      	mov	r9, r0
 800ce74:	117a      	asrs	r2, r7, #5
 800ce76:	2301      	movs	r3, #1
 800ce78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce7c:	f007 071f 	and.w	r7, r7, #31
 800ce80:	40bb      	lsls	r3, r7
 800ce82:	4213      	tst	r3, r2
 800ce84:	4629      	mov	r1, r5
 800ce86:	4620      	mov	r0, r4
 800ce88:	bf18      	it	ne
 800ce8a:	f049 0902 	orrne.w	r9, r9, #2
 800ce8e:	f7ff fe21 	bl	800cad4 <rshift>
 800ce92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ce96:	1b76      	subs	r6, r6, r5
 800ce98:	2502      	movs	r5, #2
 800ce9a:	f1b9 0f00 	cmp.w	r9, #0
 800ce9e:	d047      	beq.n	800cf30 <__gethex+0x38c>
 800cea0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d015      	beq.n	800ced4 <__gethex+0x330>
 800cea8:	2b03      	cmp	r3, #3
 800ceaa:	d017      	beq.n	800cedc <__gethex+0x338>
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d109      	bne.n	800cec4 <__gethex+0x320>
 800ceb0:	f019 0f02 	tst.w	r9, #2
 800ceb4:	d006      	beq.n	800cec4 <__gethex+0x320>
 800ceb6:	f8da 3000 	ldr.w	r3, [sl]
 800ceba:	ea49 0903 	orr.w	r9, r9, r3
 800cebe:	f019 0f01 	tst.w	r9, #1
 800cec2:	d10e      	bne.n	800cee2 <__gethex+0x33e>
 800cec4:	f045 0510 	orr.w	r5, r5, #16
 800cec8:	e032      	b.n	800cf30 <__gethex+0x38c>
 800ceca:	f04f 0901 	mov.w	r9, #1
 800cece:	e7d1      	b.n	800ce74 <__gethex+0x2d0>
 800ced0:	2501      	movs	r5, #1
 800ced2:	e7e2      	b.n	800ce9a <__gethex+0x2f6>
 800ced4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ced6:	f1c3 0301 	rsb	r3, r3, #1
 800ceda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d0f0      	beq.n	800cec4 <__gethex+0x320>
 800cee2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cee6:	f104 0314 	add.w	r3, r4, #20
 800ceea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ceee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cef2:	f04f 0c00 	mov.w	ip, #0
 800cef6:	4618      	mov	r0, r3
 800cef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf00:	d01b      	beq.n	800cf3a <__gethex+0x396>
 800cf02:	3201      	adds	r2, #1
 800cf04:	6002      	str	r2, [r0, #0]
 800cf06:	2d02      	cmp	r5, #2
 800cf08:	f104 0314 	add.w	r3, r4, #20
 800cf0c:	d13c      	bne.n	800cf88 <__gethex+0x3e4>
 800cf0e:	f8d8 2000 	ldr.w	r2, [r8]
 800cf12:	3a01      	subs	r2, #1
 800cf14:	42b2      	cmp	r2, r6
 800cf16:	d109      	bne.n	800cf2c <__gethex+0x388>
 800cf18:	1171      	asrs	r1, r6, #5
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf20:	f006 061f 	and.w	r6, r6, #31
 800cf24:	fa02 f606 	lsl.w	r6, r2, r6
 800cf28:	421e      	tst	r6, r3
 800cf2a:	d13a      	bne.n	800cfa2 <__gethex+0x3fe>
 800cf2c:	f045 0520 	orr.w	r5, r5, #32
 800cf30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf32:	601c      	str	r4, [r3, #0]
 800cf34:	9b02      	ldr	r3, [sp, #8]
 800cf36:	601f      	str	r7, [r3, #0]
 800cf38:	e6b0      	b.n	800cc9c <__gethex+0xf8>
 800cf3a:	4299      	cmp	r1, r3
 800cf3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf40:	d8d9      	bhi.n	800cef6 <__gethex+0x352>
 800cf42:	68a3      	ldr	r3, [r4, #8]
 800cf44:	459b      	cmp	fp, r3
 800cf46:	db17      	blt.n	800cf78 <__gethex+0x3d4>
 800cf48:	6861      	ldr	r1, [r4, #4]
 800cf4a:	9801      	ldr	r0, [sp, #4]
 800cf4c:	3101      	adds	r1, #1
 800cf4e:	f7fd fe4b 	bl	800abe8 <_Balloc>
 800cf52:	4681      	mov	r9, r0
 800cf54:	b918      	cbnz	r0, 800cf5e <__gethex+0x3ba>
 800cf56:	4b1a      	ldr	r3, [pc, #104]	@ (800cfc0 <__gethex+0x41c>)
 800cf58:	4602      	mov	r2, r0
 800cf5a:	2184      	movs	r1, #132	@ 0x84
 800cf5c:	e6c5      	b.n	800ccea <__gethex+0x146>
 800cf5e:	6922      	ldr	r2, [r4, #16]
 800cf60:	3202      	adds	r2, #2
 800cf62:	f104 010c 	add.w	r1, r4, #12
 800cf66:	0092      	lsls	r2, r2, #2
 800cf68:	300c      	adds	r0, #12
 800cf6a:	f7fc feda 	bl	8009d22 <memcpy>
 800cf6e:	4621      	mov	r1, r4
 800cf70:	9801      	ldr	r0, [sp, #4]
 800cf72:	f7fd fe79 	bl	800ac68 <_Bfree>
 800cf76:	464c      	mov	r4, r9
 800cf78:	6923      	ldr	r3, [r4, #16]
 800cf7a:	1c5a      	adds	r2, r3, #1
 800cf7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf80:	6122      	str	r2, [r4, #16]
 800cf82:	2201      	movs	r2, #1
 800cf84:	615a      	str	r2, [r3, #20]
 800cf86:	e7be      	b.n	800cf06 <__gethex+0x362>
 800cf88:	6922      	ldr	r2, [r4, #16]
 800cf8a:	455a      	cmp	r2, fp
 800cf8c:	dd0b      	ble.n	800cfa6 <__gethex+0x402>
 800cf8e:	2101      	movs	r1, #1
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7ff fd9f 	bl	800cad4 <rshift>
 800cf96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf9a:	3701      	adds	r7, #1
 800cf9c:	42bb      	cmp	r3, r7
 800cf9e:	f6ff aee0 	blt.w	800cd62 <__gethex+0x1be>
 800cfa2:	2501      	movs	r5, #1
 800cfa4:	e7c2      	b.n	800cf2c <__gethex+0x388>
 800cfa6:	f016 061f 	ands.w	r6, r6, #31
 800cfaa:	d0fa      	beq.n	800cfa2 <__gethex+0x3fe>
 800cfac:	4453      	add	r3, sl
 800cfae:	f1c6 0620 	rsb	r6, r6, #32
 800cfb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cfb6:	f7fd ff09 	bl	800adcc <__hi0bits>
 800cfba:	42b0      	cmp	r0, r6
 800cfbc:	dbe7      	blt.n	800cf8e <__gethex+0x3ea>
 800cfbe:	e7f0      	b.n	800cfa2 <__gethex+0x3fe>
 800cfc0:	0800db19 	.word	0x0800db19

0800cfc4 <L_shift>:
 800cfc4:	f1c2 0208 	rsb	r2, r2, #8
 800cfc8:	0092      	lsls	r2, r2, #2
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	f1c2 0620 	rsb	r6, r2, #32
 800cfd0:	6843      	ldr	r3, [r0, #4]
 800cfd2:	6804      	ldr	r4, [r0, #0]
 800cfd4:	fa03 f506 	lsl.w	r5, r3, r6
 800cfd8:	432c      	orrs	r4, r5
 800cfda:	40d3      	lsrs	r3, r2
 800cfdc:	6004      	str	r4, [r0, #0]
 800cfde:	f840 3f04 	str.w	r3, [r0, #4]!
 800cfe2:	4288      	cmp	r0, r1
 800cfe4:	d3f4      	bcc.n	800cfd0 <L_shift+0xc>
 800cfe6:	bd70      	pop	{r4, r5, r6, pc}

0800cfe8 <__match>:
 800cfe8:	b530      	push	{r4, r5, lr}
 800cfea:	6803      	ldr	r3, [r0, #0]
 800cfec:	3301      	adds	r3, #1
 800cfee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cff2:	b914      	cbnz	r4, 800cffa <__match+0x12>
 800cff4:	6003      	str	r3, [r0, #0]
 800cff6:	2001      	movs	r0, #1
 800cff8:	bd30      	pop	{r4, r5, pc}
 800cffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cffe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d002:	2d19      	cmp	r5, #25
 800d004:	bf98      	it	ls
 800d006:	3220      	addls	r2, #32
 800d008:	42a2      	cmp	r2, r4
 800d00a:	d0f0      	beq.n	800cfee <__match+0x6>
 800d00c:	2000      	movs	r0, #0
 800d00e:	e7f3      	b.n	800cff8 <__match+0x10>

0800d010 <__hexnan>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	680b      	ldr	r3, [r1, #0]
 800d016:	6801      	ldr	r1, [r0, #0]
 800d018:	115e      	asrs	r6, r3, #5
 800d01a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d01e:	f013 031f 	ands.w	r3, r3, #31
 800d022:	b087      	sub	sp, #28
 800d024:	bf18      	it	ne
 800d026:	3604      	addne	r6, #4
 800d028:	2500      	movs	r5, #0
 800d02a:	1f37      	subs	r7, r6, #4
 800d02c:	4682      	mov	sl, r0
 800d02e:	4690      	mov	r8, r2
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	f846 5c04 	str.w	r5, [r6, #-4]
 800d036:	46b9      	mov	r9, r7
 800d038:	463c      	mov	r4, r7
 800d03a:	9502      	str	r5, [sp, #8]
 800d03c:	46ab      	mov	fp, r5
 800d03e:	784a      	ldrb	r2, [r1, #1]
 800d040:	1c4b      	adds	r3, r1, #1
 800d042:	9303      	str	r3, [sp, #12]
 800d044:	b342      	cbz	r2, 800d098 <__hexnan+0x88>
 800d046:	4610      	mov	r0, r2
 800d048:	9105      	str	r1, [sp, #20]
 800d04a:	9204      	str	r2, [sp, #16]
 800d04c:	f7ff fd94 	bl	800cb78 <__hexdig_fun>
 800d050:	2800      	cmp	r0, #0
 800d052:	d151      	bne.n	800d0f8 <__hexnan+0xe8>
 800d054:	9a04      	ldr	r2, [sp, #16]
 800d056:	9905      	ldr	r1, [sp, #20]
 800d058:	2a20      	cmp	r2, #32
 800d05a:	d818      	bhi.n	800d08e <__hexnan+0x7e>
 800d05c:	9b02      	ldr	r3, [sp, #8]
 800d05e:	459b      	cmp	fp, r3
 800d060:	dd13      	ble.n	800d08a <__hexnan+0x7a>
 800d062:	454c      	cmp	r4, r9
 800d064:	d206      	bcs.n	800d074 <__hexnan+0x64>
 800d066:	2d07      	cmp	r5, #7
 800d068:	dc04      	bgt.n	800d074 <__hexnan+0x64>
 800d06a:	462a      	mov	r2, r5
 800d06c:	4649      	mov	r1, r9
 800d06e:	4620      	mov	r0, r4
 800d070:	f7ff ffa8 	bl	800cfc4 <L_shift>
 800d074:	4544      	cmp	r4, r8
 800d076:	d952      	bls.n	800d11e <__hexnan+0x10e>
 800d078:	2300      	movs	r3, #0
 800d07a:	f1a4 0904 	sub.w	r9, r4, #4
 800d07e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d082:	f8cd b008 	str.w	fp, [sp, #8]
 800d086:	464c      	mov	r4, r9
 800d088:	461d      	mov	r5, r3
 800d08a:	9903      	ldr	r1, [sp, #12]
 800d08c:	e7d7      	b.n	800d03e <__hexnan+0x2e>
 800d08e:	2a29      	cmp	r2, #41	@ 0x29
 800d090:	d157      	bne.n	800d142 <__hexnan+0x132>
 800d092:	3102      	adds	r1, #2
 800d094:	f8ca 1000 	str.w	r1, [sl]
 800d098:	f1bb 0f00 	cmp.w	fp, #0
 800d09c:	d051      	beq.n	800d142 <__hexnan+0x132>
 800d09e:	454c      	cmp	r4, r9
 800d0a0:	d206      	bcs.n	800d0b0 <__hexnan+0xa0>
 800d0a2:	2d07      	cmp	r5, #7
 800d0a4:	dc04      	bgt.n	800d0b0 <__hexnan+0xa0>
 800d0a6:	462a      	mov	r2, r5
 800d0a8:	4649      	mov	r1, r9
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f7ff ff8a 	bl	800cfc4 <L_shift>
 800d0b0:	4544      	cmp	r4, r8
 800d0b2:	d936      	bls.n	800d122 <__hexnan+0x112>
 800d0b4:	f1a8 0204 	sub.w	r2, r8, #4
 800d0b8:	4623      	mov	r3, r4
 800d0ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800d0be:	f842 1f04 	str.w	r1, [r2, #4]!
 800d0c2:	429f      	cmp	r7, r3
 800d0c4:	d2f9      	bcs.n	800d0ba <__hexnan+0xaa>
 800d0c6:	1b3b      	subs	r3, r7, r4
 800d0c8:	f023 0303 	bic.w	r3, r3, #3
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	3401      	adds	r4, #1
 800d0d0:	3e03      	subs	r6, #3
 800d0d2:	42b4      	cmp	r4, r6
 800d0d4:	bf88      	it	hi
 800d0d6:	2304      	movhi	r3, #4
 800d0d8:	4443      	add	r3, r8
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f843 2b04 	str.w	r2, [r3], #4
 800d0e0:	429f      	cmp	r7, r3
 800d0e2:	d2fb      	bcs.n	800d0dc <__hexnan+0xcc>
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	b91b      	cbnz	r3, 800d0f0 <__hexnan+0xe0>
 800d0e8:	4547      	cmp	r7, r8
 800d0ea:	d128      	bne.n	800d13e <__hexnan+0x12e>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	603b      	str	r3, [r7, #0]
 800d0f0:	2005      	movs	r0, #5
 800d0f2:	b007      	add	sp, #28
 800d0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f8:	3501      	adds	r5, #1
 800d0fa:	2d08      	cmp	r5, #8
 800d0fc:	f10b 0b01 	add.w	fp, fp, #1
 800d100:	dd06      	ble.n	800d110 <__hexnan+0x100>
 800d102:	4544      	cmp	r4, r8
 800d104:	d9c1      	bls.n	800d08a <__hexnan+0x7a>
 800d106:	2300      	movs	r3, #0
 800d108:	f844 3c04 	str.w	r3, [r4, #-4]
 800d10c:	2501      	movs	r5, #1
 800d10e:	3c04      	subs	r4, #4
 800d110:	6822      	ldr	r2, [r4, #0]
 800d112:	f000 000f 	and.w	r0, r0, #15
 800d116:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d11a:	6020      	str	r0, [r4, #0]
 800d11c:	e7b5      	b.n	800d08a <__hexnan+0x7a>
 800d11e:	2508      	movs	r5, #8
 800d120:	e7b3      	b.n	800d08a <__hexnan+0x7a>
 800d122:	9b01      	ldr	r3, [sp, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0dd      	beq.n	800d0e4 <__hexnan+0xd4>
 800d128:	f1c3 0320 	rsb	r3, r3, #32
 800d12c:	f04f 32ff 	mov.w	r2, #4294967295
 800d130:	40da      	lsrs	r2, r3
 800d132:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d136:	4013      	ands	r3, r2
 800d138:	f846 3c04 	str.w	r3, [r6, #-4]
 800d13c:	e7d2      	b.n	800d0e4 <__hexnan+0xd4>
 800d13e:	3f04      	subs	r7, #4
 800d140:	e7d0      	b.n	800d0e4 <__hexnan+0xd4>
 800d142:	2004      	movs	r0, #4
 800d144:	e7d5      	b.n	800d0f2 <__hexnan+0xe2>

0800d146 <__ascii_mbtowc>:
 800d146:	b082      	sub	sp, #8
 800d148:	b901      	cbnz	r1, 800d14c <__ascii_mbtowc+0x6>
 800d14a:	a901      	add	r1, sp, #4
 800d14c:	b142      	cbz	r2, 800d160 <__ascii_mbtowc+0x1a>
 800d14e:	b14b      	cbz	r3, 800d164 <__ascii_mbtowc+0x1e>
 800d150:	7813      	ldrb	r3, [r2, #0]
 800d152:	600b      	str	r3, [r1, #0]
 800d154:	7812      	ldrb	r2, [r2, #0]
 800d156:	1e10      	subs	r0, r2, #0
 800d158:	bf18      	it	ne
 800d15a:	2001      	movne	r0, #1
 800d15c:	b002      	add	sp, #8
 800d15e:	4770      	bx	lr
 800d160:	4610      	mov	r0, r2
 800d162:	e7fb      	b.n	800d15c <__ascii_mbtowc+0x16>
 800d164:	f06f 0001 	mvn.w	r0, #1
 800d168:	e7f8      	b.n	800d15c <__ascii_mbtowc+0x16>

0800d16a <_realloc_r>:
 800d16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16e:	4680      	mov	r8, r0
 800d170:	4615      	mov	r5, r2
 800d172:	460c      	mov	r4, r1
 800d174:	b921      	cbnz	r1, 800d180 <_realloc_r+0x16>
 800d176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d17a:	4611      	mov	r1, r2
 800d17c:	f7fd bca8 	b.w	800aad0 <_malloc_r>
 800d180:	b92a      	cbnz	r2, 800d18e <_realloc_r+0x24>
 800d182:	f7fd fc31 	bl	800a9e8 <_free_r>
 800d186:	2400      	movs	r4, #0
 800d188:	4620      	mov	r0, r4
 800d18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d18e:	f000 f840 	bl	800d212 <_malloc_usable_size_r>
 800d192:	4285      	cmp	r5, r0
 800d194:	4606      	mov	r6, r0
 800d196:	d802      	bhi.n	800d19e <_realloc_r+0x34>
 800d198:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d19c:	d8f4      	bhi.n	800d188 <_realloc_r+0x1e>
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4640      	mov	r0, r8
 800d1a2:	f7fd fc95 	bl	800aad0 <_malloc_r>
 800d1a6:	4607      	mov	r7, r0
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d0ec      	beq.n	800d186 <_realloc_r+0x1c>
 800d1ac:	42b5      	cmp	r5, r6
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	bf28      	it	cs
 800d1b4:	4632      	movcs	r2, r6
 800d1b6:	f7fc fdb4 	bl	8009d22 <memcpy>
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4640      	mov	r0, r8
 800d1be:	f7fd fc13 	bl	800a9e8 <_free_r>
 800d1c2:	463c      	mov	r4, r7
 800d1c4:	e7e0      	b.n	800d188 <_realloc_r+0x1e>

0800d1c6 <__ascii_wctomb>:
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	b141      	cbz	r1, 800d1de <__ascii_wctomb+0x18>
 800d1cc:	2aff      	cmp	r2, #255	@ 0xff
 800d1ce:	d904      	bls.n	800d1da <__ascii_wctomb+0x14>
 800d1d0:	228a      	movs	r2, #138	@ 0x8a
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d8:	4770      	bx	lr
 800d1da:	700a      	strb	r2, [r1, #0]
 800d1dc:	2001      	movs	r0, #1
 800d1de:	4770      	bx	lr

0800d1e0 <fiprintf>:
 800d1e0:	b40e      	push	{r1, r2, r3}
 800d1e2:	b503      	push	{r0, r1, lr}
 800d1e4:	4601      	mov	r1, r0
 800d1e6:	ab03      	add	r3, sp, #12
 800d1e8:	4805      	ldr	r0, [pc, #20]	@ (800d200 <fiprintf+0x20>)
 800d1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ee:	6800      	ldr	r0, [r0, #0]
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	f7ff f9b1 	bl	800c558 <_vfiprintf_r>
 800d1f6:	b002      	add	sp, #8
 800d1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1fc:	b003      	add	sp, #12
 800d1fe:	4770      	bx	lr
 800d200:	20000044 	.word	0x20000044

0800d204 <abort>:
 800d204:	b508      	push	{r3, lr}
 800d206:	2006      	movs	r0, #6
 800d208:	f000 f834 	bl	800d274 <raise>
 800d20c:	2001      	movs	r0, #1
 800d20e:	f7f6 fbbb 	bl	8003988 <_exit>

0800d212 <_malloc_usable_size_r>:
 800d212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d216:	1f18      	subs	r0, r3, #4
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bfbc      	itt	lt
 800d21c:	580b      	ldrlt	r3, [r1, r0]
 800d21e:	18c0      	addlt	r0, r0, r3
 800d220:	4770      	bx	lr

0800d222 <_raise_r>:
 800d222:	291f      	cmp	r1, #31
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4605      	mov	r5, r0
 800d228:	460c      	mov	r4, r1
 800d22a:	d904      	bls.n	800d236 <_raise_r+0x14>
 800d22c:	2316      	movs	r3, #22
 800d22e:	6003      	str	r3, [r0, #0]
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	bd38      	pop	{r3, r4, r5, pc}
 800d236:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d238:	b112      	cbz	r2, 800d240 <_raise_r+0x1e>
 800d23a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d23e:	b94b      	cbnz	r3, 800d254 <_raise_r+0x32>
 800d240:	4628      	mov	r0, r5
 800d242:	f000 f831 	bl	800d2a8 <_getpid_r>
 800d246:	4622      	mov	r2, r4
 800d248:	4601      	mov	r1, r0
 800d24a:	4628      	mov	r0, r5
 800d24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d250:	f000 b818 	b.w	800d284 <_kill_r>
 800d254:	2b01      	cmp	r3, #1
 800d256:	d00a      	beq.n	800d26e <_raise_r+0x4c>
 800d258:	1c59      	adds	r1, r3, #1
 800d25a:	d103      	bne.n	800d264 <_raise_r+0x42>
 800d25c:	2316      	movs	r3, #22
 800d25e:	6003      	str	r3, [r0, #0]
 800d260:	2001      	movs	r0, #1
 800d262:	e7e7      	b.n	800d234 <_raise_r+0x12>
 800d264:	2100      	movs	r1, #0
 800d266:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d26a:	4620      	mov	r0, r4
 800d26c:	4798      	blx	r3
 800d26e:	2000      	movs	r0, #0
 800d270:	e7e0      	b.n	800d234 <_raise_r+0x12>
	...

0800d274 <raise>:
 800d274:	4b02      	ldr	r3, [pc, #8]	@ (800d280 <raise+0xc>)
 800d276:	4601      	mov	r1, r0
 800d278:	6818      	ldr	r0, [r3, #0]
 800d27a:	f7ff bfd2 	b.w	800d222 <_raise_r>
 800d27e:	bf00      	nop
 800d280:	20000044 	.word	0x20000044

0800d284 <_kill_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	4d07      	ldr	r5, [pc, #28]	@ (800d2a4 <_kill_r+0x20>)
 800d288:	2300      	movs	r3, #0
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	4611      	mov	r1, r2
 800d290:	602b      	str	r3, [r5, #0]
 800d292:	f7f6 fb69 	bl	8003968 <_kill>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	d102      	bne.n	800d2a0 <_kill_r+0x1c>
 800d29a:	682b      	ldr	r3, [r5, #0]
 800d29c:	b103      	cbz	r3, 800d2a0 <_kill_r+0x1c>
 800d29e:	6023      	str	r3, [r4, #0]
 800d2a0:	bd38      	pop	{r3, r4, r5, pc}
 800d2a2:	bf00      	nop
 800d2a4:	20000814 	.word	0x20000814

0800d2a8 <_getpid_r>:
 800d2a8:	f7f6 bb56 	b.w	8003958 <_getpid>

0800d2ac <atan2>:
 800d2ac:	f000 b800 	b.w	800d2b0 <__ieee754_atan2>

0800d2b0 <__ieee754_atan2>:
 800d2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2b4:	ec57 6b11 	vmov	r6, r7, d1
 800d2b8:	4273      	negs	r3, r6
 800d2ba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d438 <__ieee754_atan2+0x188>
 800d2be:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d2c2:	4333      	orrs	r3, r6
 800d2c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d2c8:	4543      	cmp	r3, r8
 800d2ca:	ec51 0b10 	vmov	r0, r1, d0
 800d2ce:	4635      	mov	r5, r6
 800d2d0:	d809      	bhi.n	800d2e6 <__ieee754_atan2+0x36>
 800d2d2:	4244      	negs	r4, r0
 800d2d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d2d8:	4304      	orrs	r4, r0
 800d2da:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d2de:	4544      	cmp	r4, r8
 800d2e0:	468e      	mov	lr, r1
 800d2e2:	4681      	mov	r9, r0
 800d2e4:	d907      	bls.n	800d2f6 <__ieee754_atan2+0x46>
 800d2e6:	4632      	mov	r2, r6
 800d2e8:	463b      	mov	r3, r7
 800d2ea:	f7f2 ffef 	bl	80002cc <__adddf3>
 800d2ee:	ec41 0b10 	vmov	d0, r0, r1
 800d2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d2fa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d2fe:	4334      	orrs	r4, r6
 800d300:	d103      	bne.n	800d30a <__ieee754_atan2+0x5a>
 800d302:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d306:	f000 b89b 	b.w	800d440 <atan>
 800d30a:	17bc      	asrs	r4, r7, #30
 800d30c:	f004 0402 	and.w	r4, r4, #2
 800d310:	ea53 0909 	orrs.w	r9, r3, r9
 800d314:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d318:	d107      	bne.n	800d32a <__ieee754_atan2+0x7a>
 800d31a:	2c02      	cmp	r4, #2
 800d31c:	d05f      	beq.n	800d3de <__ieee754_atan2+0x12e>
 800d31e:	2c03      	cmp	r4, #3
 800d320:	d1e5      	bne.n	800d2ee <__ieee754_atan2+0x3e>
 800d322:	a141      	add	r1, pc, #260	@ (adr r1, 800d428 <__ieee754_atan2+0x178>)
 800d324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d328:	e7e1      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d32a:	4315      	orrs	r5, r2
 800d32c:	d106      	bne.n	800d33c <__ieee754_atan2+0x8c>
 800d32e:	f1be 0f00 	cmp.w	lr, #0
 800d332:	da5f      	bge.n	800d3f4 <__ieee754_atan2+0x144>
 800d334:	a13e      	add	r1, pc, #248	@ (adr r1, 800d430 <__ieee754_atan2+0x180>)
 800d336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d33a:	e7d8      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d33c:	4542      	cmp	r2, r8
 800d33e:	d10f      	bne.n	800d360 <__ieee754_atan2+0xb0>
 800d340:	4293      	cmp	r3, r2
 800d342:	f104 34ff 	add.w	r4, r4, #4294967295
 800d346:	d107      	bne.n	800d358 <__ieee754_atan2+0xa8>
 800d348:	2c02      	cmp	r4, #2
 800d34a:	d84c      	bhi.n	800d3e6 <__ieee754_atan2+0x136>
 800d34c:	4b34      	ldr	r3, [pc, #208]	@ (800d420 <__ieee754_atan2+0x170>)
 800d34e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d352:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d356:	e7ca      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d358:	2c02      	cmp	r4, #2
 800d35a:	d848      	bhi.n	800d3ee <__ieee754_atan2+0x13e>
 800d35c:	4b31      	ldr	r3, [pc, #196]	@ (800d424 <__ieee754_atan2+0x174>)
 800d35e:	e7f6      	b.n	800d34e <__ieee754_atan2+0x9e>
 800d360:	4543      	cmp	r3, r8
 800d362:	d0e4      	beq.n	800d32e <__ieee754_atan2+0x7e>
 800d364:	1a9b      	subs	r3, r3, r2
 800d366:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d36a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d36e:	da1e      	bge.n	800d3ae <__ieee754_atan2+0xfe>
 800d370:	2f00      	cmp	r7, #0
 800d372:	da01      	bge.n	800d378 <__ieee754_atan2+0xc8>
 800d374:	323c      	adds	r2, #60	@ 0x3c
 800d376:	db1e      	blt.n	800d3b6 <__ieee754_atan2+0x106>
 800d378:	4632      	mov	r2, r6
 800d37a:	463b      	mov	r3, r7
 800d37c:	f7f3 fa86 	bl	800088c <__aeabi_ddiv>
 800d380:	ec41 0b10 	vmov	d0, r0, r1
 800d384:	f000 f9f4 	bl	800d770 <fabs>
 800d388:	f000 f85a 	bl	800d440 <atan>
 800d38c:	ec51 0b10 	vmov	r0, r1, d0
 800d390:	2c01      	cmp	r4, #1
 800d392:	d013      	beq.n	800d3bc <__ieee754_atan2+0x10c>
 800d394:	2c02      	cmp	r4, #2
 800d396:	d015      	beq.n	800d3c4 <__ieee754_atan2+0x114>
 800d398:	2c00      	cmp	r4, #0
 800d39a:	d0a8      	beq.n	800d2ee <__ieee754_atan2+0x3e>
 800d39c:	a318      	add	r3, pc, #96	@ (adr r3, 800d400 <__ieee754_atan2+0x150>)
 800d39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a2:	f7f2 ff91 	bl	80002c8 <__aeabi_dsub>
 800d3a6:	a318      	add	r3, pc, #96	@ (adr r3, 800d408 <__ieee754_atan2+0x158>)
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	e014      	b.n	800d3d8 <__ieee754_atan2+0x128>
 800d3ae:	a118      	add	r1, pc, #96	@ (adr r1, 800d410 <__ieee754_atan2+0x160>)
 800d3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3b4:	e7ec      	b.n	800d390 <__ieee754_atan2+0xe0>
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	e7e9      	b.n	800d390 <__ieee754_atan2+0xe0>
 800d3bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	e794      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d3c4:	a30e      	add	r3, pc, #56	@ (adr r3, 800d400 <__ieee754_atan2+0x150>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 ff7d 	bl	80002c8 <__aeabi_dsub>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	a10d      	add	r1, pc, #52	@ (adr r1, 800d408 <__ieee754_atan2+0x158>)
 800d3d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3d8:	f7f2 ff76 	bl	80002c8 <__aeabi_dsub>
 800d3dc:	e787      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d3de:	a10a      	add	r1, pc, #40	@ (adr r1, 800d408 <__ieee754_atan2+0x158>)
 800d3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3e4:	e783      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d3e6:	a10c      	add	r1, pc, #48	@ (adr r1, 800d418 <__ieee754_atan2+0x168>)
 800d3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3ec:	e77f      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	e77c      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d3f4:	a106      	add	r1, pc, #24	@ (adr r1, 800d410 <__ieee754_atan2+0x160>)
 800d3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3fa:	e778      	b.n	800d2ee <__ieee754_atan2+0x3e>
 800d3fc:	f3af 8000 	nop.w
 800d400:	33145c07 	.word	0x33145c07
 800d404:	3ca1a626 	.word	0x3ca1a626
 800d408:	54442d18 	.word	0x54442d18
 800d40c:	400921fb 	.word	0x400921fb
 800d410:	54442d18 	.word	0x54442d18
 800d414:	3ff921fb 	.word	0x3ff921fb
 800d418:	54442d18 	.word	0x54442d18
 800d41c:	3fe921fb 	.word	0x3fe921fb
 800d420:	0800dea8 	.word	0x0800dea8
 800d424:	0800de90 	.word	0x0800de90
 800d428:	54442d18 	.word	0x54442d18
 800d42c:	c00921fb 	.word	0xc00921fb
 800d430:	54442d18 	.word	0x54442d18
 800d434:	bff921fb 	.word	0xbff921fb
 800d438:	7ff00000 	.word	0x7ff00000
 800d43c:	00000000 	.word	0x00000000

0800d440 <atan>:
 800d440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	ec55 4b10 	vmov	r4, r5, d0
 800d448:	4bbf      	ldr	r3, [pc, #764]	@ (800d748 <atan+0x308>)
 800d44a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d44e:	429e      	cmp	r6, r3
 800d450:	46ab      	mov	fp, r5
 800d452:	d918      	bls.n	800d486 <atan+0x46>
 800d454:	4bbd      	ldr	r3, [pc, #756]	@ (800d74c <atan+0x30c>)
 800d456:	429e      	cmp	r6, r3
 800d458:	d801      	bhi.n	800d45e <atan+0x1e>
 800d45a:	d109      	bne.n	800d470 <atan+0x30>
 800d45c:	b144      	cbz	r4, 800d470 <atan+0x30>
 800d45e:	4622      	mov	r2, r4
 800d460:	462b      	mov	r3, r5
 800d462:	4620      	mov	r0, r4
 800d464:	4629      	mov	r1, r5
 800d466:	f7f2 ff31 	bl	80002cc <__adddf3>
 800d46a:	4604      	mov	r4, r0
 800d46c:	460d      	mov	r5, r1
 800d46e:	e006      	b.n	800d47e <atan+0x3e>
 800d470:	f1bb 0f00 	cmp.w	fp, #0
 800d474:	f340 812b 	ble.w	800d6ce <atan+0x28e>
 800d478:	a597      	add	r5, pc, #604	@ (adr r5, 800d6d8 <atan+0x298>)
 800d47a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d47e:	ec45 4b10 	vmov	d0, r4, r5
 800d482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d486:	4bb2      	ldr	r3, [pc, #712]	@ (800d750 <atan+0x310>)
 800d488:	429e      	cmp	r6, r3
 800d48a:	d813      	bhi.n	800d4b4 <atan+0x74>
 800d48c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d490:	429e      	cmp	r6, r3
 800d492:	d80c      	bhi.n	800d4ae <atan+0x6e>
 800d494:	a392      	add	r3, pc, #584	@ (adr r3, 800d6e0 <atan+0x2a0>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	4620      	mov	r0, r4
 800d49c:	4629      	mov	r1, r5
 800d49e:	f7f2 ff15 	bl	80002cc <__adddf3>
 800d4a2:	4bac      	ldr	r3, [pc, #688]	@ (800d754 <atan+0x314>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f7f3 fb57 	bl	8000b58 <__aeabi_dcmpgt>
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	d1e7      	bne.n	800d47e <atan+0x3e>
 800d4ae:	f04f 3aff 	mov.w	sl, #4294967295
 800d4b2:	e029      	b.n	800d508 <atan+0xc8>
 800d4b4:	f000 f95c 	bl	800d770 <fabs>
 800d4b8:	4ba7      	ldr	r3, [pc, #668]	@ (800d758 <atan+0x318>)
 800d4ba:	429e      	cmp	r6, r3
 800d4bc:	ec55 4b10 	vmov	r4, r5, d0
 800d4c0:	f200 80bc 	bhi.w	800d63c <atan+0x1fc>
 800d4c4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d4c8:	429e      	cmp	r6, r3
 800d4ca:	f200 809e 	bhi.w	800d60a <atan+0x1ca>
 800d4ce:	4622      	mov	r2, r4
 800d4d0:	462b      	mov	r3, r5
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	4629      	mov	r1, r5
 800d4d6:	f7f2 fef9 	bl	80002cc <__adddf3>
 800d4da:	4b9e      	ldr	r3, [pc, #632]	@ (800d754 <atan+0x314>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f7f2 fef3 	bl	80002c8 <__aeabi_dsub>
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	460f      	mov	r7, r1
 800d4e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f7f2 feec 	bl	80002cc <__adddf3>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	4639      	mov	r1, r7
 800d4fc:	f7f3 f9c6 	bl	800088c <__aeabi_ddiv>
 800d500:	f04f 0a00 	mov.w	sl, #0
 800d504:	4604      	mov	r4, r0
 800d506:	460d      	mov	r5, r1
 800d508:	4622      	mov	r2, r4
 800d50a:	462b      	mov	r3, r5
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f3 f892 	bl	8000638 <__aeabi_dmul>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	4680      	mov	r8, r0
 800d51a:	4689      	mov	r9, r1
 800d51c:	f7f3 f88c 	bl	8000638 <__aeabi_dmul>
 800d520:	a371      	add	r3, pc, #452	@ (adr r3, 800d6e8 <atan+0x2a8>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	4606      	mov	r6, r0
 800d528:	460f      	mov	r7, r1
 800d52a:	f7f3 f885 	bl	8000638 <__aeabi_dmul>
 800d52e:	a370      	add	r3, pc, #448	@ (adr r3, 800d6f0 <atan+0x2b0>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	f7f2 feca 	bl	80002cc <__adddf3>
 800d538:	4632      	mov	r2, r6
 800d53a:	463b      	mov	r3, r7
 800d53c:	f7f3 f87c 	bl	8000638 <__aeabi_dmul>
 800d540:	a36d      	add	r3, pc, #436	@ (adr r3, 800d6f8 <atan+0x2b8>)
 800d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d546:	f7f2 fec1 	bl	80002cc <__adddf3>
 800d54a:	4632      	mov	r2, r6
 800d54c:	463b      	mov	r3, r7
 800d54e:	f7f3 f873 	bl	8000638 <__aeabi_dmul>
 800d552:	a36b      	add	r3, pc, #428	@ (adr r3, 800d700 <atan+0x2c0>)
 800d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d558:	f7f2 feb8 	bl	80002cc <__adddf3>
 800d55c:	4632      	mov	r2, r6
 800d55e:	463b      	mov	r3, r7
 800d560:	f7f3 f86a 	bl	8000638 <__aeabi_dmul>
 800d564:	a368      	add	r3, pc, #416	@ (adr r3, 800d708 <atan+0x2c8>)
 800d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56a:	f7f2 feaf 	bl	80002cc <__adddf3>
 800d56e:	4632      	mov	r2, r6
 800d570:	463b      	mov	r3, r7
 800d572:	f7f3 f861 	bl	8000638 <__aeabi_dmul>
 800d576:	a366      	add	r3, pc, #408	@ (adr r3, 800d710 <atan+0x2d0>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f7f2 fea6 	bl	80002cc <__adddf3>
 800d580:	4642      	mov	r2, r8
 800d582:	464b      	mov	r3, r9
 800d584:	f7f3 f858 	bl	8000638 <__aeabi_dmul>
 800d588:	a363      	add	r3, pc, #396	@ (adr r3, 800d718 <atan+0x2d8>)
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	4680      	mov	r8, r0
 800d590:	4689      	mov	r9, r1
 800d592:	4630      	mov	r0, r6
 800d594:	4639      	mov	r1, r7
 800d596:	f7f3 f84f 	bl	8000638 <__aeabi_dmul>
 800d59a:	a361      	add	r3, pc, #388	@ (adr r3, 800d720 <atan+0x2e0>)
 800d59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a0:	f7f2 fe92 	bl	80002c8 <__aeabi_dsub>
 800d5a4:	4632      	mov	r2, r6
 800d5a6:	463b      	mov	r3, r7
 800d5a8:	f7f3 f846 	bl	8000638 <__aeabi_dmul>
 800d5ac:	a35e      	add	r3, pc, #376	@ (adr r3, 800d728 <atan+0x2e8>)
 800d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b2:	f7f2 fe89 	bl	80002c8 <__aeabi_dsub>
 800d5b6:	4632      	mov	r2, r6
 800d5b8:	463b      	mov	r3, r7
 800d5ba:	f7f3 f83d 	bl	8000638 <__aeabi_dmul>
 800d5be:	a35c      	add	r3, pc, #368	@ (adr r3, 800d730 <atan+0x2f0>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	f7f2 fe80 	bl	80002c8 <__aeabi_dsub>
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	f7f3 f834 	bl	8000638 <__aeabi_dmul>
 800d5d0:	a359      	add	r3, pc, #356	@ (adr r3, 800d738 <atan+0x2f8>)
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	f7f2 fe77 	bl	80002c8 <__aeabi_dsub>
 800d5da:	4632      	mov	r2, r6
 800d5dc:	463b      	mov	r3, r7
 800d5de:	f7f3 f82b 	bl	8000638 <__aeabi_dmul>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	f7f2 fe6f 	bl	80002cc <__adddf3>
 800d5ee:	4622      	mov	r2, r4
 800d5f0:	462b      	mov	r3, r5
 800d5f2:	f7f3 f821 	bl	8000638 <__aeabi_dmul>
 800d5f6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	d148      	bne.n	800d692 <atan+0x252>
 800d600:	4620      	mov	r0, r4
 800d602:	4629      	mov	r1, r5
 800d604:	f7f2 fe60 	bl	80002c8 <__aeabi_dsub>
 800d608:	e72f      	b.n	800d46a <atan+0x2a>
 800d60a:	4b52      	ldr	r3, [pc, #328]	@ (800d754 <atan+0x314>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	4620      	mov	r0, r4
 800d610:	4629      	mov	r1, r5
 800d612:	f7f2 fe59 	bl	80002c8 <__aeabi_dsub>
 800d616:	4b4f      	ldr	r3, [pc, #316]	@ (800d754 <atan+0x314>)
 800d618:	4606      	mov	r6, r0
 800d61a:	460f      	mov	r7, r1
 800d61c:	2200      	movs	r2, #0
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	f7f2 fe53 	bl	80002cc <__adddf3>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4630      	mov	r0, r6
 800d62c:	4639      	mov	r1, r7
 800d62e:	f7f3 f92d 	bl	800088c <__aeabi_ddiv>
 800d632:	f04f 0a01 	mov.w	sl, #1
 800d636:	4604      	mov	r4, r0
 800d638:	460d      	mov	r5, r1
 800d63a:	e765      	b.n	800d508 <atan+0xc8>
 800d63c:	4b47      	ldr	r3, [pc, #284]	@ (800d75c <atan+0x31c>)
 800d63e:	429e      	cmp	r6, r3
 800d640:	d21c      	bcs.n	800d67c <atan+0x23c>
 800d642:	4b47      	ldr	r3, [pc, #284]	@ (800d760 <atan+0x320>)
 800d644:	2200      	movs	r2, #0
 800d646:	4620      	mov	r0, r4
 800d648:	4629      	mov	r1, r5
 800d64a:	f7f2 fe3d 	bl	80002c8 <__aeabi_dsub>
 800d64e:	4b44      	ldr	r3, [pc, #272]	@ (800d760 <atan+0x320>)
 800d650:	4606      	mov	r6, r0
 800d652:	460f      	mov	r7, r1
 800d654:	2200      	movs	r2, #0
 800d656:	4620      	mov	r0, r4
 800d658:	4629      	mov	r1, r5
 800d65a:	f7f2 ffed 	bl	8000638 <__aeabi_dmul>
 800d65e:	4b3d      	ldr	r3, [pc, #244]	@ (800d754 <atan+0x314>)
 800d660:	2200      	movs	r2, #0
 800d662:	f7f2 fe33 	bl	80002cc <__adddf3>
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	4630      	mov	r0, r6
 800d66c:	4639      	mov	r1, r7
 800d66e:	f7f3 f90d 	bl	800088c <__aeabi_ddiv>
 800d672:	f04f 0a02 	mov.w	sl, #2
 800d676:	4604      	mov	r4, r0
 800d678:	460d      	mov	r5, r1
 800d67a:	e745      	b.n	800d508 <atan+0xc8>
 800d67c:	4622      	mov	r2, r4
 800d67e:	462b      	mov	r3, r5
 800d680:	4938      	ldr	r1, [pc, #224]	@ (800d764 <atan+0x324>)
 800d682:	2000      	movs	r0, #0
 800d684:	f7f3 f902 	bl	800088c <__aeabi_ddiv>
 800d688:	f04f 0a03 	mov.w	sl, #3
 800d68c:	4604      	mov	r4, r0
 800d68e:	460d      	mov	r5, r1
 800d690:	e73a      	b.n	800d508 <atan+0xc8>
 800d692:	4b35      	ldr	r3, [pc, #212]	@ (800d768 <atan+0x328>)
 800d694:	4e35      	ldr	r6, [pc, #212]	@ (800d76c <atan+0x32c>)
 800d696:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69e:	f7f2 fe13 	bl	80002c8 <__aeabi_dsub>
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	462b      	mov	r3, r5
 800d6a6:	f7f2 fe0f 	bl	80002c8 <__aeabi_dsub>
 800d6aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d6b6:	f7f2 fe07 	bl	80002c8 <__aeabi_dsub>
 800d6ba:	f1bb 0f00 	cmp.w	fp, #0
 800d6be:	4604      	mov	r4, r0
 800d6c0:	460d      	mov	r5, r1
 800d6c2:	f6bf aedc 	bge.w	800d47e <atan+0x3e>
 800d6c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d6ca:	461d      	mov	r5, r3
 800d6cc:	e6d7      	b.n	800d47e <atan+0x3e>
 800d6ce:	a51c      	add	r5, pc, #112	@ (adr r5, 800d740 <atan+0x300>)
 800d6d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d6d4:	e6d3      	b.n	800d47e <atan+0x3e>
 800d6d6:	bf00      	nop
 800d6d8:	54442d18 	.word	0x54442d18
 800d6dc:	3ff921fb 	.word	0x3ff921fb
 800d6e0:	8800759c 	.word	0x8800759c
 800d6e4:	7e37e43c 	.word	0x7e37e43c
 800d6e8:	e322da11 	.word	0xe322da11
 800d6ec:	3f90ad3a 	.word	0x3f90ad3a
 800d6f0:	24760deb 	.word	0x24760deb
 800d6f4:	3fa97b4b 	.word	0x3fa97b4b
 800d6f8:	a0d03d51 	.word	0xa0d03d51
 800d6fc:	3fb10d66 	.word	0x3fb10d66
 800d700:	c54c206e 	.word	0xc54c206e
 800d704:	3fb745cd 	.word	0x3fb745cd
 800d708:	920083ff 	.word	0x920083ff
 800d70c:	3fc24924 	.word	0x3fc24924
 800d710:	5555550d 	.word	0x5555550d
 800d714:	3fd55555 	.word	0x3fd55555
 800d718:	2c6a6c2f 	.word	0x2c6a6c2f
 800d71c:	bfa2b444 	.word	0xbfa2b444
 800d720:	52defd9a 	.word	0x52defd9a
 800d724:	3fadde2d 	.word	0x3fadde2d
 800d728:	af749a6d 	.word	0xaf749a6d
 800d72c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d730:	fe231671 	.word	0xfe231671
 800d734:	3fbc71c6 	.word	0x3fbc71c6
 800d738:	9998ebc4 	.word	0x9998ebc4
 800d73c:	3fc99999 	.word	0x3fc99999
 800d740:	54442d18 	.word	0x54442d18
 800d744:	bff921fb 	.word	0xbff921fb
 800d748:	440fffff 	.word	0x440fffff
 800d74c:	7ff00000 	.word	0x7ff00000
 800d750:	3fdbffff 	.word	0x3fdbffff
 800d754:	3ff00000 	.word	0x3ff00000
 800d758:	3ff2ffff 	.word	0x3ff2ffff
 800d75c:	40038000 	.word	0x40038000
 800d760:	3ff80000 	.word	0x3ff80000
 800d764:	bff00000 	.word	0xbff00000
 800d768:	0800dec0 	.word	0x0800dec0
 800d76c:	0800dee0 	.word	0x0800dee0

0800d770 <fabs>:
 800d770:	ec51 0b10 	vmov	r0, r1, d0
 800d774:	4602      	mov	r2, r0
 800d776:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d77a:	ec43 2b10 	vmov	d0, r2, r3
 800d77e:	4770      	bx	lr

0800d780 <_init>:
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d782:	bf00      	nop
 800d784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d786:	bc08      	pop	{r3}
 800d788:	469e      	mov	lr, r3
 800d78a:	4770      	bx	lr

0800d78c <_fini>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	bf00      	nop
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr
