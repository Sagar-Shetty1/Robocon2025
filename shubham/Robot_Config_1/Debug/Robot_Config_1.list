
Robot_Config_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800d480  0800d480  0000e480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbb8  0800dbb8  0000f200  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbb8  0800dbb8  0000ebb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbc0  0800dbc0  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbc0  0800dbc0  0000ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbc4  0800dbc4  0000ebc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800dbc8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000200  0800ddc8  0000f200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  0800ddc8  0000f7e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128ac  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280c  00000000  00000000  00021adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  000242e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4e  00000000  00000000  00025500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024120  00000000  00000000  0002634e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160bb  00000000  00000000  0004a46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d861e  00000000  00000000  00060529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063fc  00000000  00000000  00138b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d468 	.word	0x0800d468

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800d468 	.word	0x0800d468

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4619      	mov	r1, r3
 8001032:	2007      	movs	r0, #7
 8001034:	f000 fa44 	bl	80014c0 <bno055_writeData>
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4619      	mov	r1, r3
 800104e:	203d      	movs	r0, #61	@ 0x3d
 8001050:	f000 fa36 	bl	80014c0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d103      	bne.n	8001062 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800105a:	2013      	movs	r0, #19
 800105c:	f000 fa24 	bl	80014a8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001060:	e002      	b.n	8001068 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001062:	2007      	movs	r0, #7
 8001064:	f000 fa20 	bl	80014a8 <bno055_delay>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ffe3 	bl	8001040 <bno055_setOperationMode>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001082:	200c      	movs	r0, #12
 8001084:	f7ff ffdc 	bl	8001040 <bno055_setOperationMode>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001090:	2120      	movs	r1, #32
 8001092:	203f      	movs	r0, #63	@ 0x3f
 8001094:	f000 fa14 	bl	80014c0 <bno055_writeData>
  bno055_delay(700);
 8001098:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800109c:	f000 fa04 	bl	80014a8 <bno055_delay>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  bno055_reset();
 80010aa:	f7ff ffef 	bl	800108c <bno055_reset>

  uint8_t id = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 faed 	bl	8001698 <bno055_readData>
  if (id != BNO055_ID) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80010c2:	d004      	beq.n	80010ce <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <bno055_setup+0x4c>)
 80010ca:	f008 fab9 	bl	8009640 <iprintf>
  }
  bno055_setPage(0);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ffa8 	bl	8001024 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	203f      	movs	r0, #63	@ 0x3f
 80010d8:	f000 f9f2 	bl	80014c0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80010dc:	f7ff ffc8 	bl	8001070 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 f9e1 	bl	80014a8 <bno055_delay>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800d480 	.word	0x0800d480

080010f4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80010f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010f8:	b09e      	sub	sp, #120	@ 0x78
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ff8e 	bl	8001024 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800110c:	2b20      	cmp	r3, #32
 800110e:	d108      	bne.n	8001122 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001110:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001118:	2208      	movs	r2, #8
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fabc 	bl	8001698 <bno055_readData>
 8001120:	e007      	b.n	8001132 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001122:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800112a:	2206      	movs	r2, #6
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fab3 	bl	8001698 <bno055_readData>

  double scale = 1;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b8b      	ldr	r3, [pc, #556]	@ (8001364 <bno055_getVector+0x270>)
 8001138:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800113c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001140:	2b0e      	cmp	r3, #14
 8001142:	d109      	bne.n	8001158 <bno055_getVector+0x64>
    scale = magScale;
 8001144:	4b88      	ldr	r3, [pc, #544]	@ (8001368 <bno055_getVector+0x274>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9fb 	bl	8000544 <__aeabi_ui2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001156:	e03e      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800115c:	2b08      	cmp	r3, #8
 800115e:	d007      	beq.n	8001170 <bno055_getVector+0x7c>
 8001160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001164:	2b28      	cmp	r3, #40	@ 0x28
 8001166:	d003      	beq.n	8001170 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116c:	2b2e      	cmp	r3, #46	@ 0x2e
 800116e:	d109      	bne.n	8001184 <bno055_getVector+0x90>
    scale = accelScale;
 8001170:	4b7e      	ldr	r3, [pc, #504]	@ (800136c <bno055_getVector+0x278>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9e5 	bl	8000544 <__aeabi_ui2d>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001182:	e028      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001188:	2b14      	cmp	r3, #20
 800118a:	d109      	bne.n	80011a0 <bno055_getVector+0xac>
    scale = angularRateScale;
 800118c:	4b78      	ldr	r3, [pc, #480]	@ (8001370 <bno055_getVector+0x27c>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9d7 	bl	8000544 <__aeabi_ui2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800119e:	e01a      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011a4:	2b1a      	cmp	r3, #26
 80011a6:	d109      	bne.n	80011bc <bno055_getVector+0xc8>
    scale = eulerScale;
 80011a8:	4b72      	ldr	r3, [pc, #456]	@ (8001374 <bno055_getVector+0x280>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9c9 	bl	8000544 <__aeabi_ui2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011ba:	e00c      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80011bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	d108      	bne.n	80011d6 <bno055_getVector+0xe2>
    scale = quaScale;
 80011c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001378 <bno055_getVector+0x284>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9bb 	bl	8000544 <__aeabi_ui2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011da:	2220      	movs	r2, #32
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f008 fb96 	bl	8009910 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80011e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011e8:	2b20      	cmp	r3, #32
 80011ea:	d150      	bne.n	800128e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ec:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9b0 	bl	8000564 <__aeabi_i2d>
 8001204:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001208:	f7ff fb40 	bl	800088c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001214:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21b      	sxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f99c 	bl	8000564 <__aeabi_i2d>
 800122c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001230:	f7ff fb2c 	bl	800088c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800123c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f988 	bl	8000564 <__aeabi_i2d>
 8001254:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001258:	f7ff fb18 	bl	800088c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001264:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f974 	bl	8000564 <__aeabi_i2d>
 800127c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001280:	f7ff fb04 	bl	800088c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800128c:	e03b      	b.n	8001306 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800128e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95f 	bl	8000564 <__aeabi_i2d>
 80012a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012aa:	f7ff faef 	bl	800088c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80012b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f94b 	bl	8000564 <__aeabi_i2d>
 80012ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012d2:	f7ff fadb 	bl	800088c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80012de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f937 	bl	8000564 <__aeabi_i2d>
 80012f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012fa:	f7ff fac7 	bl	800088c <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001306:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800130a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800131a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800131e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001322:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001326:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800132a:	ec49 8b14 	vmov	d4, r8, r9
 800132e:	ec45 4b15 	vmov	d5, r4, r5
 8001332:	ec41 0b16 	vmov	d6, r0, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
}
 800133a:	eeb0 0a44 	vmov.f32	s0, s8
 800133e:	eef0 0a64 	vmov.f32	s1, s9
 8001342:	eeb0 1a45 	vmov.f32	s2, s10
 8001346:	eef0 1a65 	vmov.f32	s3, s11
 800134a:	eeb0 2a46 	vmov.f32	s4, s12
 800134e:	eef0 2a66 	vmov.f32	s5, s13
 8001352:	eeb0 3a47 	vmov.f32	s6, s14
 8001356:	eef0 3a67 	vmov.f32	s7, s15
 800135a:	3778      	adds	r7, #120	@ 0x78
 800135c:	46bd      	mov	sp, r7
 800135e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001362:	bf00      	nop
 8001364:	3ff00000 	.word	0x3ff00000
 8001368:	20000006 	.word	0x20000006
 800136c:	20000000 	.word	0x20000000
 8001370:	20000002 	.word	0x20000002
 8001374:	20000004 	.word	0x20000004
 8001378:	20000008 	.word	0x20000008

0800137c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 800137c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001380:	b090      	sub	sp, #64	@ 0x40
 8001382:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001384:	201a      	movs	r0, #26
 8001386:	f7ff feb5 	bl	80010f4 <bno055_getVector>
 800138a:	eeb0 4a40 	vmov.f32	s8, s0
 800138e:	eef0 4a60 	vmov.f32	s9, s1
 8001392:	eeb0 5a41 	vmov.f32	s10, s2
 8001396:	eef0 5a61 	vmov.f32	s11, s3
 800139a:	eeb0 6a42 	vmov.f32	s12, s4
 800139e:	eef0 6a62 	vmov.f32	s13, s5
 80013a2:	eeb0 7a43 	vmov.f32	s14, s6
 80013a6:	eef0 7a63 	vmov.f32	s15, s7
 80013aa:	ed87 4b08 	vstr	d4, [r7, #32]
 80013ae:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80013b2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80013b6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80013ba:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013be:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80013c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013ca:	ec49 8b14 	vmov	d4, r8, r9
 80013ce:	ec45 4b15 	vmov	d5, r4, r5
 80013d2:	ec41 0b16 	vmov	d6, r0, r1
 80013d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80013da:	eeb0 0a44 	vmov.f32	s0, s8
 80013de:	eef0 0a64 	vmov.f32	s1, s9
 80013e2:	eeb0 1a45 	vmov.f32	s2, s10
 80013e6:	eef0 1a65 	vmov.f32	s3, s11
 80013ea:	eeb0 2a46 	vmov.f32	s4, s12
 80013ee:	eef0 2a66 	vmov.f32	s5, s13
 80013f2:	eeb0 3a47 	vmov.f32	s6, s14
 80013f6:	eef0 3a67 	vmov.f32	s7, s15
 80013fa:	3740      	adds	r7, #64	@ 0x40
 80013fc:	46bd      	mov	sp, r7
 80013fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001402 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001402:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001406:	b090      	sub	sp, #64	@ 0x40
 8001408:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800140a:	2020      	movs	r0, #32
 800140c:	f7ff fe72 	bl	80010f4 <bno055_getVector>
 8001410:	eeb0 4a40 	vmov.f32	s8, s0
 8001414:	eef0 4a60 	vmov.f32	s9, s1
 8001418:	eeb0 5a41 	vmov.f32	s10, s2
 800141c:	eef0 5a61 	vmov.f32	s11, s3
 8001420:	eeb0 6a42 	vmov.f32	s12, s4
 8001424:	eef0 6a62 	vmov.f32	s13, s5
 8001428:	eeb0 7a43 	vmov.f32	s14, s6
 800142c:	eef0 7a63 	vmov.f32	s15, s7
 8001430:	ed87 4b08 	vstr	d4, [r7, #32]
 8001434:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001438:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800143c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001444:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001448:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800144c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001450:	ec49 8b14 	vmov	d4, r8, r9
 8001454:	ec45 4b15 	vmov	d5, r4, r5
 8001458:	ec41 0b16 	vmov	d6, r0, r1
 800145c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001460:	eeb0 0a44 	vmov.f32	s0, s8
 8001464:	eef0 0a64 	vmov.f32	s1, s9
 8001468:	eeb0 1a45 	vmov.f32	s2, s10
 800146c:	eef0 1a65 	vmov.f32	s3, s11
 8001470:	eeb0 2a46 	vmov.f32	s4, s12
 8001474:	eef0 2a66 	vmov.f32	s5, s13
 8001478:	eeb0 3a47 	vmov.f32	s6, s14
 800147c:	eef0 3a67 	vmov.f32	s7, s15
 8001480:	3740      	adds	r7, #64	@ 0x40
 8001482:	46bd      	mov	sp, r7
 8001484:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001488 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <bno055_assignI2C+0x1c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000021c 	.word	0x2000021c

080014a8 <bno055_delay>:

void bno055_delay(int time) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fab6 	bl	8003a24 <HAL_Delay>
#endif
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	733b      	strb	r3, [r7, #12]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80014d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001644 <bno055_writeData+0x184>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f107 020c 	add.w	r2, r7, #12
 80014e0:	230a      	movs	r3, #10
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2302      	movs	r3, #2
 80014e6:	2150      	movs	r1, #80	@ 0x50
 80014e8:	f003 fac6 	bl	8004a78 <HAL_I2C_Master_Transmit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80a0 	beq.w	8001638 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d103      	bne.n	8001506 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80014fe:	4852      	ldr	r0, [pc, #328]	@ (8001648 <bno055_writeData+0x188>)
 8001500:	f008 f906 	bl	8009710 <puts>
 8001504:	e012      	b.n	800152c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d103      	bne.n	8001514 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800150c:	484f      	ldr	r0, [pc, #316]	@ (800164c <bno055_writeData+0x18c>)
 800150e:	f008 f8ff 	bl	8009710 <puts>
 8001512:	e00b      	b.n	800152c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d103      	bne.n	8001522 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800151a:	484d      	ldr	r0, [pc, #308]	@ (8001650 <bno055_writeData+0x190>)
 800151c:	f008 f8f8 	bl	8009710 <puts>
 8001520:	e004      	b.n	800152c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	4619      	mov	r1, r3
 8001526:	484b      	ldr	r0, [pc, #300]	@ (8001654 <bno055_writeData+0x194>)
 8001528:	f008 f88a 	bl	8009640 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800152c:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <bno055_writeData+0x184>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fddf 	bl	80050f4 <HAL_I2C_GetError>
 8001536:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d07e      	beq.n	800163c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d103      	bne.n	800154c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001544:	4844      	ldr	r0, [pc, #272]	@ (8001658 <bno055_writeData+0x198>)
 8001546:	f008 f8e3 	bl	8009710 <puts>
 800154a:	e021      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d103      	bne.n	800155a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001552:	4842      	ldr	r0, [pc, #264]	@ (800165c <bno055_writeData+0x19c>)
 8001554:	f008 f8dc 	bl	8009710 <puts>
 8001558:	e01a      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d103      	bne.n	8001568 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001560:	483f      	ldr	r0, [pc, #252]	@ (8001660 <bno055_writeData+0x1a0>)
 8001562:	f008 f8d5 	bl	8009710 <puts>
 8001566:	e013      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d103      	bne.n	8001576 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800156e:	483d      	ldr	r0, [pc, #244]	@ (8001664 <bno055_writeData+0x1a4>)
 8001570:	f008 f8ce 	bl	8009710 <puts>
 8001574:	e00c      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b10      	cmp	r3, #16
 800157a:	d103      	bne.n	8001584 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800157c:	483a      	ldr	r0, [pc, #232]	@ (8001668 <bno055_writeData+0x1a8>)
 800157e:	f008 f8c7 	bl	8009710 <puts>
 8001582:	e005      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b20      	cmp	r3, #32
 8001588:	d102      	bne.n	8001590 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800158a:	4838      	ldr	r0, [pc, #224]	@ (800166c <bno055_writeData+0x1ac>)
 800158c:	f008 f8c0 	bl	8009710 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <bno055_writeData+0x184>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fd9f 	bl	80050d8 <HAL_I2C_GetState>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80015a4:	4832      	ldr	r0, [pc, #200]	@ (8001670 <bno055_writeData+0x1b0>)
 80015a6:	f008 f8b3 	bl	8009710 <puts>
 80015aa:	e048      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d103      	bne.n	80015ba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80015b2:	482f      	ldr	r0, [pc, #188]	@ (8001670 <bno055_writeData+0x1b0>)
 80015b4:	f008 f8ac 	bl	8009710 <puts>
 80015b8:	e041      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b24      	cmp	r3, #36	@ 0x24
 80015be:	d103      	bne.n	80015c8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80015c0:	482c      	ldr	r0, [pc, #176]	@ (8001674 <bno055_writeData+0x1b4>)
 80015c2:	f008 f8a5 	bl	8009710 <puts>
 80015c6:	e03a      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b21      	cmp	r3, #33	@ 0x21
 80015cc:	d103      	bne.n	80015d6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80015ce:	482a      	ldr	r0, [pc, #168]	@ (8001678 <bno055_writeData+0x1b8>)
 80015d0:	f008 f89e 	bl	8009710 <puts>
 80015d4:	e033      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b22      	cmp	r3, #34	@ 0x22
 80015da:	d103      	bne.n	80015e4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80015dc:	4827      	ldr	r0, [pc, #156]	@ (800167c <bno055_writeData+0x1bc>)
 80015de:	f008 f897 	bl	8009710 <puts>
 80015e2:	e02c      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b28      	cmp	r3, #40	@ 0x28
 80015e8:	d103      	bne.n	80015f2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80015ea:	4825      	ldr	r0, [pc, #148]	@ (8001680 <bno055_writeData+0x1c0>)
 80015ec:	f008 f890 	bl	8009710 <puts>
 80015f0:	e025      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b29      	cmp	r3, #41	@ 0x29
 80015f6:	d103      	bne.n	8001600 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80015f8:	4822      	ldr	r0, [pc, #136]	@ (8001684 <bno055_writeData+0x1c4>)
 80015fa:	f008 f889 	bl	8009710 <puts>
 80015fe:	e01e      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b2a      	cmp	r3, #42	@ 0x2a
 8001604:	d103      	bne.n	800160e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001606:	4820      	ldr	r0, [pc, #128]	@ (8001688 <bno055_writeData+0x1c8>)
 8001608:	f008 f882 	bl	8009710 <puts>
 800160c:	e017      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b60      	cmp	r3, #96	@ 0x60
 8001612:	d103      	bne.n	800161c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001614:	481d      	ldr	r0, [pc, #116]	@ (800168c <bno055_writeData+0x1cc>)
 8001616:	f008 f87b 	bl	8009710 <puts>
 800161a:	e010      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001620:	d103      	bne.n	800162a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001622:	481b      	ldr	r0, [pc, #108]	@ (8001690 <bno055_writeData+0x1d0>)
 8001624:	f008 f874 	bl	8009710 <puts>
 8001628:	e009      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2be0      	cmp	r3, #224	@ 0xe0
 800162e:	d106      	bne.n	800163e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001630:	4818      	ldr	r0, [pc, #96]	@ (8001694 <bno055_writeData+0x1d4>)
 8001632:	f008 f86d 	bl	8009710 <puts>
 8001636:	e002      	b.n	800163e <bno055_writeData+0x17e>
    return;
 8001638:	bf00      	nop
 800163a:	e000      	b.n	800163e <bno055_writeData+0x17e>
    return;
 800163c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000021c 	.word	0x2000021c
 8001648:	0800d4bc 	.word	0x0800d4bc
 800164c:	0800d4e0 	.word	0x0800d4e0
 8001650:	0800d508 	.word	0x0800d508
 8001654:	0800d52c 	.word	0x0800d52c
 8001658:	0800d544 	.word	0x0800d544
 800165c:	0800d558 	.word	0x0800d558
 8001660:	0800d56c 	.word	0x0800d56c
 8001664:	0800d580 	.word	0x0800d580
 8001668:	0800d594 	.word	0x0800d594
 800166c:	0800d5a8 	.word	0x0800d5a8
 8001670:	0800d5c0 	.word	0x0800d5c0
 8001674:	0800d5d8 	.word	0x0800d5d8
 8001678:	0800d5ec 	.word	0x0800d5ec
 800167c:	0800d604 	.word	0x0800d604
 8001680:	0800d61c 	.word	0x0800d61c
 8001684:	0800d634 	.word	0x0800d634
 8001688:	0800d654 	.word	0x0800d654
 800168c:	0800d674 	.word	0x0800d674
 8001690:	0800d68c 	.word	0x0800d68c
 8001694:	0800d6a4 	.word	0x0800d6a4

08001698 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af02      	add	r7, sp, #8
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <bno055_readData+0x40>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	1dfa      	adds	r2, r7, #7
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2150      	movs	r1, #80	@ 0x50
 80016b6:	f003 f9df 	bl	8004a78 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <bno055_readData+0x40>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2264      	movs	r2, #100	@ 0x64
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	2150      	movs	r1, #80	@ 0x50
 80016ca:	f003 fad3 	bl	8004c74 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000021c 	.word	0x2000021c

080016dc <HAL_UART_RxCpltCallback>:
// Encoder state
volatile int32_t prev_encoder5 = 0;
volatile int32_t prev_encoder10 = 0;
volatile int32_t prev_encoder11 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80016e4:	2210      	movs	r2, #16
 80016e6:	4904      	ldr	r1, [pc, #16]	@ (80016f8 <HAL_UART_RxCpltCallback+0x1c>)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <HAL_UART_RxCpltCallback+0x20>)
 80016ea:	f005 ff6e 	bl	80075ca <HAL_UART_Receive_DMA>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000620 	.word	0x20000620
 80016fc:	200004fc 	.word	0x200004fc

08001700 <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	69b9      	ldr	r1, [r7, #24]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	1a8a      	subs	r2, r1, r2
 800171a:	fb03 f202 	mul.w	r2, r3, r2
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1acb      	subs	r3, r1, r3
 8001724:	fb92 f2f3 	sdiv	r2, r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4413      	add	r3, r2

}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <update_odometry>:
//		y = y - dist4;
//	}
//
//}

void update_odometry(int16_t encoder1, int32_t encoder2, int16_t encoder3) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
    // Calculate the change in encoder values
    int16_t delta1 = encoder1 - last_encoder1;
 8001748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001754:	4b8c      	ldr	r3, [pc, #560]	@ (8001988 <update_odometry+0x250>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001762:	ee17 3a90 	vmov	r3, s15
 8001766:	83fb      	strh	r3, [r7, #30]
    int32_t delta2 = encoder2 - last_encoder2;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001772:	4b86      	ldr	r3, [pc, #536]	@ (800198c <update_odometry+0x254>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001780:	ee17 3a90 	vmov	r3, s15
 8001784:	61bb      	str	r3, [r7, #24]
    int16_t delta3 = encoder3 - last_encoder3;
 8001786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	4b7f      	ldr	r3, [pc, #508]	@ (8001990 <update_odometry+0x258>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a0:	ee17 3a90 	vmov	r3, s15
 80017a4:	82fb      	strh	r3, [r7, #22]

    // Calculate distance per encoder count
    float wheel_circumference = 2 * M_PI * WHEEL_RADIUS;
 80017a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001994 <update_odometry+0x25c>)
 80017a8:	613b      	str	r3, [r7, #16]
    float distance_per_count = (1.0 / ENCODER_COUNTS_PER_REV) * (wheel_circumference / 1000);
 80017aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ae:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001998 <update_odometry+0x260>
 80017b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017b6:	ee16 0a90 	vmov	r0, s13
 80017ba:	f7fe fee5 	bl	8000588 <__aeabi_f2d>
 80017be:	a370      	add	r3, pc, #448	@ (adr r3, 8001980 <update_odometry+0x248>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff38 	bl	8000638 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff fa2a 	bl	8000c28 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]

    // Compute average delta for forward/backward encoders (without abs)
    float avgDelta12 = (delta1 + delta2) / 2.0;
 80017d8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4413      	add	r3, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe febf 	bl	8000564 <__aeabi_i2d>
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ee:	f7ff f84d 	bl	800088c <__aeabi_ddiv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff fa15 	bl	8000c28 <__aeabi_d2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	60bb      	str	r3, [r7, #8]

    // Check movement direction based on joystick
    if (ly >= Buff1 && (lx <= BuffP && lx >= BuffN)) {
 8001802:	4b66      	ldr	r3, [pc, #408]	@ (800199c <update_odometry+0x264>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <update_odometry+0x268>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	db1a      	blt.n	8001844 <update_odometry+0x10c>
 800180e:	4b65      	ldr	r3, [pc, #404]	@ (80019a4 <update_odometry+0x26c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b65      	ldr	r3, [pc, #404]	@ (80019a8 <update_odometry+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	dc14      	bgt.n	8001844 <update_odometry+0x10c>
 800181a:	4b62      	ldr	r3, [pc, #392]	@ (80019a4 <update_odometry+0x26c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b63      	ldr	r3, [pc, #396]	@ (80019ac <update_odometry+0x274>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	db0e      	blt.n	8001844 <update_odometry+0x10c>
        // Forward motion - use the actual delta (with sign) to track position
        x += distance_per_count * avgDelta12;
 8001826:	ed97 7a03 	vldr	s14, [r7, #12]
 800182a:	edd7 7a02 	vldr	s15, [r7, #8]
 800182e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001832:	4b5f      	ldr	r3, [pc, #380]	@ (80019b0 <update_odometry+0x278>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183c:	4b5c      	ldr	r3, [pc, #368]	@ (80019b0 <update_odometry+0x278>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
 8001842:	e01f      	b.n	8001884 <update_odometry+0x14c>
    } else if (ly <= Buff2 && (lx <= BuffP && lx >= BuffN)) {
 8001844:	4b55      	ldr	r3, [pc, #340]	@ (800199c <update_odometry+0x264>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b5a      	ldr	r3, [pc, #360]	@ (80019b4 <update_odometry+0x27c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	dc19      	bgt.n	8001884 <update_odometry+0x14c>
 8001850:	4b54      	ldr	r3, [pc, #336]	@ (80019a4 <update_odometry+0x26c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b54      	ldr	r3, [pc, #336]	@ (80019a8 <update_odometry+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	dc13      	bgt.n	8001884 <update_odometry+0x14c>
 800185c:	4b51      	ldr	r3, [pc, #324]	@ (80019a4 <update_odometry+0x26c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b52      	ldr	r3, [pc, #328]	@ (80019ac <update_odometry+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	db0d      	blt.n	8001884 <update_odometry+0x14c>
        // Backward motion - use the actual delta (with sign) to track position
        x += distance_per_count * avgDelta12;  // Will be negative when going backward
 8001868:	ed97 7a03 	vldr	s14, [r7, #12]
 800186c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001874:	4b4e      	ldr	r3, [pc, #312]	@ (80019b0 <update_odometry+0x278>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187e:	4b4c      	ldr	r3, [pc, #304]	@ (80019b0 <update_odometry+0x278>)
 8001880:	edc3 7a00 	vstr	s15, [r3]
    }

    // Handle y-axis movement similarly...
    // Note: Keep your original code for y movement if it's working correctly
    if (lx >= Buff1 && (ly <= BuffP && ly >= BuffN)) {
 8001884:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <update_odometry+0x26c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b45      	ldr	r3, [pc, #276]	@ (80019a0 <update_odometry+0x268>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	db28      	blt.n	80018e2 <update_odometry+0x1aa>
 8001890:	4b42      	ldr	r3, [pc, #264]	@ (800199c <update_odometry+0x264>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b44      	ldr	r3, [pc, #272]	@ (80019a8 <update_odometry+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	dc22      	bgt.n	80018e2 <update_odometry+0x1aa>
 800189c:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <update_odometry+0x264>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b42      	ldr	r3, [pc, #264]	@ (80019ac <update_odometry+0x274>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	db1c      	blt.n	80018e2 <update_odometry+0x1aa>
        dist3 = distance_per_count * abs(delta3);  // Using delta3 for y-axis
 80018a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bfb8      	it	lt
 80018b0:	425b      	neglt	r3, r3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	4b3c      	ldr	r3, [pc, #240]	@ (80019b8 <update_odometry+0x280>)
 80018c6:	edc3 7a00 	vstr	s15, [r3]
        y += dist3;
 80018ca:	4b3c      	ldr	r3, [pc, #240]	@ (80019bc <update_odometry+0x284>)
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	4b39      	ldr	r3, [pc, #228]	@ (80019b8 <update_odometry+0x280>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <update_odometry+0x284>)
 80018dc:	edc3 7a00 	vstr	s15, [r3]
 80018e0:	e02d      	b.n	800193e <update_odometry+0x206>
    } else if (lx <= Buff2 && (ly <= BuffP && ly >= BuffN)) {
 80018e2:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <update_odometry+0x26c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b33      	ldr	r3, [pc, #204]	@ (80019b4 <update_odometry+0x27c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dc27      	bgt.n	800193e <update_odometry+0x206>
 80018ee:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <update_odometry+0x264>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <update_odometry+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dc21      	bgt.n	800193e <update_odometry+0x206>
 80018fa:	4b28      	ldr	r3, [pc, #160]	@ (800199c <update_odometry+0x264>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <update_odometry+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	db1b      	blt.n	800193e <update_odometry+0x206>
        dist4 = distance_per_count * abs(delta3);
 8001906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800190a:	2b00      	cmp	r3, #0
 800190c:	bfb8      	it	lt
 800190e:	425b      	neglt	r3, r3
 8001910:	b29b      	uxth	r3, r3
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	edd7 7a03 	vldr	s15, [r7, #12]
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <update_odometry+0x288>)
 8001924:	edc3 7a00 	vstr	s15, [r3]
        y -= dist4;
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <update_odometry+0x284>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <update_odometry+0x288>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <update_odometry+0x284>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
    }

    // Update last encoder values for the next iteration
    last_encoder1 = encoder1;
 800193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <update_odometry+0x250>)
 800194c:	edc3 7a00 	vstr	s15, [r3]
    last_encoder2 = encoder2;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <update_odometry+0x254>)
 800195c:	edc3 7a00 	vstr	s15, [r3]
    last_encoder3 = encoder3;
 8001960:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <update_odometry+0x258>)
 800196e:	edc3 7a00 	vstr	s15, [r3]
}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w
 8001980:	1afb8a9d 	.word	0x1afb8a9d
 8001984:	3f676821 	.word	0x3f676821
 8001988:	20000678 	.word	0x20000678
 800198c:	2000067c 	.word	0x2000067c
 8001990:	20000680 	.word	0x20000680
 8001994:	43c77dbb 	.word	0x43c77dbb
 8001998:	447a0000 	.word	0x447a0000
 800199c:	20000634 	.word	0x20000634
 80019a0:	20000018 	.word	0x20000018
 80019a4:	20000630 	.word	0x20000630
 80019a8:	20000020 	.word	0x20000020
 80019ac:	20000024 	.word	0x20000024
 80019b0:	20000684 	.word	0x20000684
 80019b4:	2000001c 	.word	0x2000001c
 80019b8:	20000670 	.word	0x20000670
 80019bc:	20000688 	.word	0x20000688
 80019c0:	20000674 	.word	0x20000674
 80019c4:	00000000 	.word	0x00000000

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019cc:	ed2d 8b02 	vpush	{d8}
 80019d0:	b091      	sub	sp, #68	@ 0x44
 80019d2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d4:	f001 ffb4 	bl	8003940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d8:	f000 fe56 	bl	8002688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019dc:	f001 fa58 	bl	8002e90 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e0:	f001 fa36 	bl	8002e50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019e4:	f001 fa0a 	bl	8002dfc <MX_USART2_UART_Init>
  MX_UART4_Init();
 80019e8:	f001 f9de 	bl	8002da8 <MX_UART4_Init>
  MX_TIM1_Init();
 80019ec:	f000 feec 	bl	80027c8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80019f0:	f001 f83e 	bl	8002a70 <MX_TIM8_Init>
  MX_I2C1_Init();
 80019f4:	f000 feba 	bl	800276c <MX_I2C1_Init>
  MX_TIM5_Init();
 80019f8:	f000 ffe6 	bl	80029c8 <MX_TIM5_Init>
  MX_TIM10_Init();
 80019fc:	f001 f888 	bl	8002b10 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001a00:	f001 f8d4 	bl	8002bac <MX_TIM11_Init>
  MX_TIM13_Init();
 8001a04:	f001 f982 	bl	8002d0c <MX_TIM13_Init>
  MX_TIM2_Init();
 8001a08:	f000 ff36 	bl	8002878 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a0c:	f000 ff88 	bl	8002920 <MX_TIM3_Init>
  MX_TIM12_Init();
 8001a10:	f001 f91a 	bl	8002c48 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8001a14:	2210      	movs	r2, #16
 8001a16:	4979      	ldr	r1, [pc, #484]	@ (8001bfc <main+0x234>)
 8001a18:	4879      	ldr	r0, [pc, #484]	@ (8001c00 <main+0x238>)
 8001a1a:	f005 fdd6 	bl	80075ca <HAL_UART_Receive_DMA>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a1e:	213c      	movs	r1, #60	@ 0x3c
 8001a20:	4878      	ldr	r0, [pc, #480]	@ (8001c04 <main+0x23c>)
 8001a22:	f004 ff47 	bl	80068b4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a26:	213c      	movs	r1, #60	@ 0x3c
 8001a28:	4877      	ldr	r0, [pc, #476]	@ (8001c08 <main+0x240>)
 8001a2a:	f004 ff43 	bl	80068b4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a2e:	213c      	movs	r1, #60	@ 0x3c
 8001a30:	4876      	ldr	r0, [pc, #472]	@ (8001c0c <main+0x244>)
 8001a32:	f004 ff3f 	bl	80068b4 <HAL_TIM_Encoder_Start>
	bno055_assignI2C(&hi2c1);
 8001a36:	4876      	ldr	r0, [pc, #472]	@ (8001c10 <main+0x248>)
 8001a38:	f7ff fd26 	bl	8001488 <bno055_assignI2C>
	bno055_setup();
 8001a3c:	f7ff fb32 	bl	80010a4 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001a40:	f7ff fb1d 	bl	800107e <bno055_setOperationModeNDOF>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* ps5 controller */
		lx = (rxbuff[0] & 0x80) ?
 8001a44:	4b6d      	ldr	r3, [pc, #436]	@ (8001bfc <main+0x234>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da04      	bge.n	8001a58 <main+0x90>
 8001a4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001bfc <main+0x234>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a56:	e001      	b.n	8001a5c <main+0x94>
 8001a58:	4b68      	ldr	r3, [pc, #416]	@ (8001bfc <main+0x234>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 8001a5c:	4a6d      	ldr	r2, [pc, #436]	@ (8001c14 <main+0x24c>)
 8001a5e:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 8001a60:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <main+0x234>)
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da04      	bge.n	8001a74 <main+0xac>
 8001a6a:	4b64      	ldr	r3, [pc, #400]	@ (8001bfc <main+0x234>)
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a72:	e001      	b.n	8001a78 <main+0xb0>
 8001a74:	4b61      	ldr	r3, [pc, #388]	@ (8001bfc <main+0x234>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 8001a78:	4a67      	ldr	r2, [pc, #412]	@ (8001c18 <main+0x250>)
 8001a7a:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 8001a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8001bfc <main+0x234>)
 8001a7e:	789b      	ldrb	r3, [r3, #2]
 8001a80:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da04      	bge.n	8001a90 <main+0xc8>
 8001a86:	4b5d      	ldr	r3, [pc, #372]	@ (8001bfc <main+0x234>)
 8001a88:	789b      	ldrb	r3, [r3, #2]
 8001a8a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a8e:	e001      	b.n	8001a94 <main+0xcc>
 8001a90:	4b5a      	ldr	r3, [pc, #360]	@ (8001bfc <main+0x234>)
 8001a92:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 8001a94:	4a61      	ldr	r2, [pc, #388]	@ (8001c1c <main+0x254>)
 8001a96:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 8001a98:	4b58      	ldr	r3, [pc, #352]	@ (8001bfc <main+0x234>)
 8001a9a:	78db      	ldrb	r3, [r3, #3]
 8001a9c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da04      	bge.n	8001aac <main+0xe4>
 8001aa2:	4b56      	ldr	r3, [pc, #344]	@ (8001bfc <main+0x234>)
 8001aa4:	78db      	ldrb	r3, [r3, #3]
 8001aa6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001aaa:	e001      	b.n	8001ab0 <main+0xe8>
 8001aac:	4b53      	ldr	r3, [pc, #332]	@ (8001bfc <main+0x234>)
 8001aae:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 8001ab0:	4a5b      	ldr	r2, [pc, #364]	@ (8001c20 <main+0x258>)
 8001ab2:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8001ab4:	4b51      	ldr	r3, [pc, #324]	@ (8001bfc <main+0x234>)
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da04      	bge.n	8001ac8 <main+0x100>
 8001abe:	4b4f      	ldr	r3, [pc, #316]	@ (8001bfc <main+0x234>)
 8001ac0:	791b      	ldrb	r3, [r3, #4]
 8001ac2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ac6:	e001      	b.n	8001acc <main+0x104>
 8001ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8001bfc <main+0x234>)
 8001aca:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 8001acc:	4a55      	ldr	r2, [pc, #340]	@ (8001c24 <main+0x25c>)
 8001ace:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <main+0x234>)
 8001ad2:	795b      	ldrb	r3, [r3, #5]
 8001ad4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da04      	bge.n	8001ae4 <main+0x11c>
 8001ada:	4b48      	ldr	r3, [pc, #288]	@ (8001bfc <main+0x234>)
 8001adc:	795b      	ldrb	r3, [r3, #5]
 8001ade:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ae2:	e001      	b.n	8001ae8 <main+0x120>
 8001ae4:	4b45      	ldr	r3, [pc, #276]	@ (8001bfc <main+0x234>)
 8001ae6:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8001c28 <main+0x260>)
 8001aea:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 8001aec:	4b43      	ldr	r3, [pc, #268]	@ (8001bfc <main+0x234>)
 8001aee:	799b      	ldrb	r3, [r3, #6]
 8001af0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da04      	bge.n	8001b00 <main+0x138>
 8001af6:	4b41      	ldr	r3, [pc, #260]	@ (8001bfc <main+0x234>)
 8001af8:	799b      	ldrb	r3, [r3, #6]
 8001afa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001afe:	e001      	b.n	8001b04 <main+0x13c>
 8001b00:	4b3e      	ldr	r3, [pc, #248]	@ (8001bfc <main+0x234>)
 8001b02:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 8001b04:	4a49      	ldr	r2, [pc, #292]	@ (8001c2c <main+0x264>)
 8001b06:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 8001b08:	4b3c      	ldr	r3, [pc, #240]	@ (8001bfc <main+0x234>)
 8001b0a:	79db      	ldrb	r3, [r3, #7]
 8001b0c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da04      	bge.n	8001b1c <main+0x154>
 8001b12:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <main+0x234>)
 8001b14:	79db      	ldrb	r3, [r3, #7]
 8001b16:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b1a:	e001      	b.n	8001b20 <main+0x158>
 8001b1c:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <main+0x234>)
 8001b1e:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 8001b20:	4a43      	ldr	r2, [pc, #268]	@ (8001c30 <main+0x268>)
 8001b22:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 8001b24:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <main+0x234>)
 8001b26:	7a1b      	ldrb	r3, [r3, #8]
 8001b28:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	da04      	bge.n	8001b38 <main+0x170>
 8001b2e:	4b33      	ldr	r3, [pc, #204]	@ (8001bfc <main+0x234>)
 8001b30:	7a1b      	ldrb	r3, [r3, #8]
 8001b32:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b36:	e001      	b.n	8001b3c <main+0x174>
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <main+0x234>)
 8001b3a:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 8001b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c34 <main+0x26c>)
 8001b3e:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 8001b40:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <main+0x234>)
 8001b42:	7a5b      	ldrb	r3, [r3, #9]
 8001b44:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da04      	bge.n	8001b54 <main+0x18c>
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <main+0x234>)
 8001b4c:	7a5b      	ldrb	r3, [r3, #9]
 8001b4e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b52:	e001      	b.n	8001b58 <main+0x190>
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <main+0x234>)
 8001b56:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 8001b58:	4a37      	ldr	r2, [pc, #220]	@ (8001c38 <main+0x270>)
 8001b5a:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <main+0x234>)
 8001b5e:	7a9b      	ldrb	r3, [r3, #10]
 8001b60:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da04      	bge.n	8001b70 <main+0x1a8>
 8001b66:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <main+0x234>)
 8001b68:	7a9b      	ldrb	r3, [r3, #10]
 8001b6a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b6e:	e001      	b.n	8001b74 <main+0x1ac>
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <main+0x234>)
 8001b72:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 8001b74:	4a31      	ldr	r2, [pc, #196]	@ (8001c3c <main+0x274>)
 8001b76:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 8001b78:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <main+0x234>)
 8001b7a:	7adb      	ldrb	r3, [r3, #11]
 8001b7c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da04      	bge.n	8001b8c <main+0x1c4>
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <main+0x234>)
 8001b84:	7adb      	ldrb	r3, [r3, #11]
 8001b86:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b8a:	e001      	b.n	8001b90 <main+0x1c8>
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <main+0x234>)
 8001b8e:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <main+0x278>)
 8001b92:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <main+0x234>)
 8001b96:	7b1b      	ldrb	r3, [r3, #12]
 8001b98:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	da04      	bge.n	8001ba8 <main+0x1e0>
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <main+0x234>)
 8001ba0:	7b1b      	ldrb	r3, [r3, #12]
 8001ba2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ba6:	e001      	b.n	8001bac <main+0x1e4>
 8001ba8:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <main+0x234>)
 8001baa:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 8001bac:	4a25      	ldr	r2, [pc, #148]	@ (8001c44 <main+0x27c>)
 8001bae:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <main+0x234>)
 8001bb2:	7b5b      	ldrb	r3, [r3, #13]
 8001bb4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	da04      	bge.n	8001bc4 <main+0x1fc>
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <main+0x234>)
 8001bbc:	7b5b      	ldrb	r3, [r3, #13]
 8001bbe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bc2:	e001      	b.n	8001bc8 <main+0x200>
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <main+0x234>)
 8001bc6:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c48 <main+0x280>)
 8001bca:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <main+0x234>)
 8001bce:	7b9b      	ldrb	r3, [r3, #14]
 8001bd0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da04      	bge.n	8001be0 <main+0x218>
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <main+0x234>)
 8001bd8:	7b9b      	ldrb	r3, [r3, #14]
 8001bda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bde:	e001      	b.n	8001be4 <main+0x21c>
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <main+0x234>)
 8001be2:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <main+0x284>)
 8001be6:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <main+0x234>)
 8001bea:	7bdb      	ldrb	r3, [r3, #15]
 8001bec:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da2e      	bge.n	8001c50 <main+0x288>
 8001bf2:	4b02      	ldr	r3, [pc, #8]	@ (8001bfc <main+0x234>)
 8001bf4:	7bdb      	ldrb	r3, [r3, #15]
 8001bf6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bfa:	e02b      	b.n	8001c54 <main+0x28c>
 8001bfc:	20000620 	.word	0x20000620
 8001c00:	200004fc 	.word	0x200004fc
 8001c04:	20000274 	.word	0x20000274
 8001c08:	200002bc 	.word	0x200002bc
 8001c0c:	20000304 	.word	0x20000304
 8001c10:	20000220 	.word	0x20000220
 8001c14:	20000630 	.word	0x20000630
 8001c18:	20000634 	.word	0x20000634
 8001c1c:	20000638 	.word	0x20000638
 8001c20:	2000063c 	.word	0x2000063c
 8001c24:	20000640 	.word	0x20000640
 8001c28:	20000644 	.word	0x20000644
 8001c2c:	20000648 	.word	0x20000648
 8001c30:	2000064c 	.word	0x2000064c
 8001c34:	20000650 	.word	0x20000650
 8001c38:	20000654 	.word	0x20000654
 8001c3c:	20000658 	.word	0x20000658
 8001c40:	2000065c 	.word	0x2000065c
 8001c44:	20000660 	.word	0x20000660
 8001c48:	20000668 	.word	0x20000668
 8001c4c:	20000664 	.word	0x20000664
 8001c50:	4bad      	ldr	r3, [pc, #692]	@ (8001f08 <main+0x540>)
 8001c52:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 8001c54:	4aad      	ldr	r2, [pc, #692]	@ (8001f0c <main+0x544>)
 8001c56:	6013      	str	r3, [r2, #0]
		//				lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1);
//		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly,
//				rx, ry, cro, squ, tri, cir);

		/* 3 encoders */
		uint16_t raw_counter1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001c58:	4bad      	ldr	r3, [pc, #692]	@ (8001f10 <main+0x548>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint32_t raw_counter2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001c60:	4bac      	ldr	r3, [pc, #688]	@ (8001f14 <main+0x54c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
		uint16_t raw_counter3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001c68:	4bab      	ldr	r3, [pc, #684]	@ (8001f18 <main+0x550>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	84fb      	strh	r3, [r7, #38]	@ 0x26

		// Convert to signed values
		signed_counter1 =
				(raw_counter1 < 32768) ?
						(int16_t) raw_counter1 :
 8001c70:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
		signed_counter1 =
 8001c74:	4ba9      	ldr	r3, [pc, #676]	@ (8001f1c <main+0x554>)
 8001c76:	801a      	strh	r2, [r3, #0]
						(int16_t) (raw_counter1 - 65536);
		signed_counter2 =
				(raw_counter2 < 2147483648) ?
						(int32_t) raw_counter2 :
 8001c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
		signed_counter2 =
 8001c7a:	4aa9      	ldr	r2, [pc, #676]	@ (8001f20 <main+0x558>)
 8001c7c:	6013      	str	r3, [r2, #0]
						(int32_t) (raw_counter2 - 4294967296);
		signed_counter3 =
				(raw_counter3 < 32768) ?
						(int16_t) raw_counter3 :
 8001c7e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
		signed_counter3 =
 8001c82:	4ba8      	ldr	r3, [pc, #672]	@ (8001f24 <main+0x55c>)
 8001c84:	801a      	strh	r2, [r3, #0]
						(int16_t) (raw_counter3 - 65536);

		/* IMU */
		bno055_vector_t v = bno055_getVectorEuler();
 8001c86:	f7ff fb79 	bl	800137c <bno055_getVectorEuler>
 8001c8a:	eeb0 4a40 	vmov.f32	s8, s0
 8001c8e:	eef0 4a60 	vmov.f32	s9, s1
 8001c92:	eeb0 5a41 	vmov.f32	s10, s2
 8001c96:	eef0 5a61 	vmov.f32	s11, s3
 8001c9a:	eeb0 6a42 	vmov.f32	s12, s4
 8001c9e:	eef0 6a62 	vmov.f32	s13, s5
 8001ca2:	eeb0 7a43 	vmov.f32	s14, s6
 8001ca6:	eef0 7a63 	vmov.f32	s15, s7
 8001caa:	ed87 4b00 	vstr	d4, [r7]
 8001cae:	ed87 5b02 	vstr	d5, [r7, #8]
 8001cb2:	ed87 6b04 	vstr	d6, [r7, #16]
 8001cb6:	ed87 7b06 	vstr	d7, [r7, #24]
		//		printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
		v = bno055_getVectorQuaternion();
 8001cba:	f7ff fba2 	bl	8001402 <bno055_getVectorQuaternion>
 8001cbe:	eeb0 4a40 	vmov.f32	s8, s0
 8001cc2:	eef0 4a60 	vmov.f32	s9, s1
 8001cc6:	eeb0 5a41 	vmov.f32	s10, s2
 8001cca:	eef0 5a61 	vmov.f32	s11, s3
 8001cce:	eeb0 6a42 	vmov.f32	s12, s4
 8001cd2:	eef0 6a62 	vmov.f32	s13, s5
 8001cd6:	eeb0 7a43 	vmov.f32	s14, s6
 8001cda:	eef0 7a63 	vmov.f32	s15, s7
 8001cde:	ed87 4b00 	vstr	d4, [r7]
 8001ce2:	ed87 5b02 	vstr	d5, [r7, #8]
 8001ce6:	ed87 6b04 	vstr	d6, [r7, #16]
 8001cea:	ed87 7b06 	vstr	d7, [r7, #24]
		//		printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
		yaw = -(atan2(2.0 * (v.w * v.z + v.x * v.y),
 8001cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf6:	f7fe fc9f 	bl	8000638 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4690      	mov	r8, r2
 8001d00:	4699      	mov	r9, r3
 8001d02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d0a:	f7fe fc95 	bl	8000638 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4640      	mov	r0, r8
 8001d14:	4649      	mov	r1, r9
 8001d16:	f7fe fad9 	bl	80002cc <__adddf3>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	f7fe fad1 	bl	80002cc <__adddf3>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	ec43 2b18 	vmov	d8, r2, r3
				1.0 - 2.0 * (v.y * v.y + v.z * v.z))) * (180.0 / pi);
 8001d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d3a:	f7fe fc7d 	bl	8000638 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4690      	mov	r8, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d4e:	f7fe fc73 	bl	8000638 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4640      	mov	r0, r8
 8001d58:	4649      	mov	r1, r9
 8001d5a:	f7fe fab7 	bl	80002cc <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	f7fe faaf 	bl	80002cc <__adddf3>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
		yaw = -(atan2(2.0 * (v.w * v.z + v.x * v.y),
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	496c      	ldr	r1, [pc, #432]	@ (8001f28 <main+0x560>)
 8001d78:	f7fe faa6 	bl	80002c8 <__aeabi_dsub>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ec43 2b17 	vmov	d7, r2, r3
 8001d84:	eeb0 1a47 	vmov.f32	s2, s14
 8001d88:	eef0 1a67 	vmov.f32	s3, s15
 8001d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8001d90:	eef0 0a68 	vmov.f32	s1, s17
 8001d94:	f00b f8fe 	bl	800cf94 <atan2>
 8001d98:	ec53 2b10 	vmov	r2, r3, d0
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
				1.0 - 2.0 * (v.y * v.y + v.z * v.z))) * (180.0 / pi);
 8001da2:	a357      	add	r3, pc, #348	@ (adr r3, 8001f00 <main+0x538>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fc44 	bl	8000638 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe ff36 	bl	8000c28 <__aeabi_d2f>
 8001dbc:	4603      	mov	r3, r0
		yaw = -(atan2(2.0 * (v.w * v.z + v.x * v.y),
 8001dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8001f2c <main+0x564>)
 8001dc0:	6013      	str	r3, [r2, #0]
//				printf("Yaw: %.2f\r\n", yaw);
		printf("Encoder position: %d %d %d X: %.2f Y: %.2f\r\n",
 8001dc2:	4b56      	ldr	r3, [pc, #344]	@ (8001f1c <main+0x554>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	469a      	mov	sl, r3
 8001dca:	4b55      	ldr	r3, [pc, #340]	@ (8001f20 <main+0x558>)
 8001dcc:	681e      	ldr	r6, [r3, #0]
 8001dce:	4b55      	ldr	r3, [pc, #340]	@ (8001f24 <main+0x55c>)
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	469b      	mov	fp, r3
 8001dd6:	4b56      	ldr	r3, [pc, #344]	@ (8001f30 <main+0x568>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbd4 	bl	8000588 <__aeabi_f2d>
 8001de0:	4680      	mov	r8, r0
 8001de2:	4689      	mov	r9, r1
 8001de4:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <main+0x56c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbcd 	bl	8000588 <__aeabi_f2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001df6:	e9cd 8900 	strd	r8, r9, [sp]
 8001dfa:	465b      	mov	r3, fp
 8001dfc:	4632      	mov	r2, r6
 8001dfe:	4651      	mov	r1, sl
 8001e00:	484d      	ldr	r0, [pc, #308]	@ (8001f38 <main+0x570>)
 8001e02:	f007 fc1d 	bl	8009640 <iprintf>
				signed_counter1, signed_counter2, signed_counter3, x, y);

		/* 3 wheel */
		uint16_t dutycycle;

		dutycycle = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	84bb      	strh	r3, [r7, #36]	@ 0x24
		MovementState current_state = STOP;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		/* chassis */
		//motors stop
		if (ly >= Buff2 && ly <= Buff1 && lx >= Buff2 && lx <= Buff1
 8001e10:	4b4a      	ldr	r3, [pc, #296]	@ (8001f3c <main+0x574>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b4a      	ldr	r3, [pc, #296]	@ (8001f40 <main+0x578>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	db35      	blt.n	8001e88 <main+0x4c0>
 8001e1c:	4b47      	ldr	r3, [pc, #284]	@ (8001f3c <main+0x574>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b48      	ldr	r3, [pc, #288]	@ (8001f44 <main+0x57c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dc2f      	bgt.n	8001e88 <main+0x4c0>
 8001e28:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <main+0x580>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b44      	ldr	r3, [pc, #272]	@ (8001f40 <main+0x578>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	db29      	blt.n	8001e88 <main+0x4c0>
 8001e34:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <main+0x580>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b42      	ldr	r3, [pc, #264]	@ (8001f44 <main+0x57c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dc23      	bgt.n	8001e88 <main+0x4c0>
				&& rx >= Buff2 && rx <= Buff1) {
 8001e40:	4b42      	ldr	r3, [pc, #264]	@ (8001f4c <main+0x584>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <main+0x578>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	db1d      	blt.n	8001e88 <main+0x4c0>
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <main+0x584>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <main+0x57c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dc17      	bgt.n	8001e88 <main+0x4c0>

			dutycycle = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 8001e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f50 <main+0x588>)
 8001e5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e60:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 8001e62:	4a3c      	ldr	r2, [pc, #240]	@ (8001f54 <main+0x58c>)
 8001e64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e66:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001e68:	4a3b      	ldr	r2, [pc, #236]	@ (8001f58 <main+0x590>)
 8001e6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e6c:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001e6e:	2100      	movs	r1, #0
 8001e70:	483a      	ldr	r0, [pc, #232]	@ (8001f5c <main+0x594>)
 8001e72:	f004 fbb1 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001e76:	2100      	movs	r1, #0
 8001e78:	4839      	ldr	r0, [pc, #228]	@ (8001f60 <main+0x598>)
 8001e7a:	f004 fbad 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4838      	ldr	r0, [pc, #224]	@ (8001f64 <main+0x59c>)
 8001e82:	f004 fba9 	bl	80065d8 <HAL_TIM_PWM_Start>
 8001e86:	e312      	b.n	80024ae <main+0xae6>

		}

		//	  	//forward

		else if (ly >= Buff1 && (lx <= BuffP && lx >= BuffN))
 8001e88:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <main+0x574>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <main+0x57c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	db71      	blt.n	8001f78 <main+0x5b0>
 8001e94:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <main+0x580>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b33      	ldr	r3, [pc, #204]	@ (8001f68 <main+0x5a0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dc6b      	bgt.n	8001f78 <main+0x5b0>
 8001ea0:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <main+0x580>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b31      	ldr	r3, [pc, #196]	@ (8001f6c <main+0x5a4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	db65      	blt.n	8001f78 <main+0x5b0>

		{

			dutycycle = map(ly, Buff1, 127, 0, fast);
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <main+0x574>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <main+0x57c>)
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <main+0x5a8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	227f      	movs	r2, #127	@ 0x7f
 8001ebe:	f7ff fc1f 	bl	8001700 <map>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM10->CCR1 = dutycycle;
 8001ec6:	4a23      	ldr	r2, [pc, #140]	@ (8001f54 <main+0x58c>)
 8001ec8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001eca:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001ecc:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <main+0x590>)
 8001ece:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ed0:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4822      	ldr	r0, [pc, #136]	@ (8001f60 <main+0x598>)
 8001ed6:	f004 fb7f 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001eda:	2100      	movs	r1, #0
 8001edc:	4821      	ldr	r0, [pc, #132]	@ (8001f64 <main+0x59c>)
 8001ede:	f004 fb7b 	bl	80065d8 <HAL_TIM_PWM_Start>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4823      	ldr	r0, [pc, #140]	@ (8001f74 <main+0x5ac>)
 8001ee8:	f002 fc68 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4820      	ldr	r0, [pc, #128]	@ (8001f74 <main+0x5ac>)
 8001ef2:	f002 fc63 	bl	80047bc <HAL_GPIO_WritePin>
			current_state = FORWARD;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001efc:	e2d7      	b.n	80024ae <main+0xae6>
 8001efe:	bf00      	nop
 8001f00:	1a674644 	.word	0x1a674644
 8001f04:	404ca5dc 	.word	0x404ca5dc
 8001f08:	20000620 	.word	0x20000620
 8001f0c:	2000066c 	.word	0x2000066c
 8001f10:	20000274 	.word	0x20000274
 8001f14:	200002bc 	.word	0x200002bc
 8001f18:	20000304 	.word	0x20000304
 8001f1c:	20000610 	.word	0x20000610
 8001f20:	20000614 	.word	0x20000614
 8001f24:	20000618 	.word	0x20000618
 8001f28:	3ff00000 	.word	0x3ff00000
 8001f2c:	2000061c 	.word	0x2000061c
 8001f30:	20000684 	.word	0x20000684
 8001f34:	20000688 	.word	0x20000688
 8001f38:	0800d6bc 	.word	0x0800d6bc
 8001f3c:	20000634 	.word	0x20000634
 8001f40:	2000001c 	.word	0x2000001c
 8001f44:	20000018 	.word	0x20000018
 8001f48:	20000630 	.word	0x20000630
 8001f4c:	20000638 	.word	0x20000638
 8001f50:	40001800 	.word	0x40001800
 8001f54:	40014400 	.word	0x40014400
 8001f58:	40014800 	.word	0x40014800
 8001f5c:	2000046c 	.word	0x2000046c
 8001f60:	200003dc 	.word	0x200003dc
 8001f64:	20000424 	.word	0x20000424
 8001f68:	20000020 	.word	0x20000020
 8001f6c:	20000024 	.word	0x20000024
 8001f70:	20000014 	.word	0x20000014
 8001f74:	40020800 	.word	0x40020800

		}

		// backward

		else if (ly <= Buff2 && (lx <= BuffP && lx >= BuffN))
 8001f78:	4ba2      	ldr	r3, [pc, #648]	@ (8002204 <main+0x83c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4ba2      	ldr	r3, [pc, #648]	@ (8002208 <main+0x840>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dc35      	bgt.n	8001ff0 <main+0x628>
 8001f84:	4ba1      	ldr	r3, [pc, #644]	@ (800220c <main+0x844>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4ba1      	ldr	r3, [pc, #644]	@ (8002210 <main+0x848>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dc2f      	bgt.n	8001ff0 <main+0x628>
 8001f90:	4b9e      	ldr	r3, [pc, #632]	@ (800220c <main+0x844>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b9f      	ldr	r3, [pc, #636]	@ (8002214 <main+0x84c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	db29      	blt.n	8001ff0 <main+0x628>

		{

			dutycycle = map(ly, -128, Buff2, fast, 0);
 8001f9c:	4b99      	ldr	r3, [pc, #612]	@ (8002204 <main+0x83c>)
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	4b99      	ldr	r3, [pc, #612]	@ (8002208 <main+0x840>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b9c      	ldr	r3, [pc, #624]	@ (8002218 <main+0x850>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2100      	movs	r1, #0
 8001faa:	9100      	str	r1, [sp, #0]
 8001fac:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001fb0:	f7ff fba6 	bl	8001700 <map>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM10->CCR1 = dutycycle;
 8001fb8:	4a98      	ldr	r2, [pc, #608]	@ (800221c <main+0x854>)
 8001fba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fbc:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001fbe:	4a98      	ldr	r2, [pc, #608]	@ (8002220 <main+0x858>)
 8001fc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fc2:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4897      	ldr	r0, [pc, #604]	@ (8002224 <main+0x85c>)
 8001fc8:	f004 fb06 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4896      	ldr	r0, [pc, #600]	@ (8002228 <main+0x860>)
 8001fd0:	f004 fb02 	bl	80065d8 <HAL_TIM_PWM_Start>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	4894      	ldr	r0, [pc, #592]	@ (800222c <main+0x864>)
 8001fda:	f002 fbef 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	4892      	ldr	r0, [pc, #584]	@ (800222c <main+0x864>)
 8001fe4:	f002 fbea 	bl	80047bc <HAL_GPIO_WritePin>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
			current_state = BACKWARD;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fee:	e25e      	b.n	80024ae <main+0xae6>

		}

		//	right

		else if (lx >= Buff1 && (ly <= BuffP && ly >= BuffN))
 8001ff0:	4b86      	ldr	r3, [pc, #536]	@ (800220c <main+0x844>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8002230 <main+0x868>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	db5a      	blt.n	80020b2 <main+0x6ea>
 8001ffc:	4b81      	ldr	r3, [pc, #516]	@ (8002204 <main+0x83c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b83      	ldr	r3, [pc, #524]	@ (8002210 <main+0x848>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	dc54      	bgt.n	80020b2 <main+0x6ea>
 8002008:	4b7e      	ldr	r3, [pc, #504]	@ (8002204 <main+0x83c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b81      	ldr	r3, [pc, #516]	@ (8002214 <main+0x84c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	db4e      	blt.n	80020b2 <main+0x6ea>

		{

			dutycycle = map(lx, Buff1, 127, 0, fast);
 8002014:	4b7d      	ldr	r3, [pc, #500]	@ (800220c <main+0x844>)
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	4b85      	ldr	r3, [pc, #532]	@ (8002230 <main+0x868>)
 800201a:	6819      	ldr	r1, [r3, #0]
 800201c:	4b7e      	ldr	r3, [pc, #504]	@ (8002218 <main+0x850>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	227f      	movs	r2, #127	@ 0x7f
 8002026:	f7ff fb6b 	bl	8001700 <map>
 800202a:	4603      	mov	r3, r0
 800202c:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 800202e:	4a81      	ldr	r2, [pc, #516]	@ (8002234 <main+0x86c>)
 8002030:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002032:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = cos30 * dutycycle;
 8002034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203e:	4b7e      	ldr	r3, [pc, #504]	@ (8002238 <main+0x870>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002048:	4b74      	ldr	r3, [pc, #464]	@ (800221c <main+0x854>)
 800204a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800204e:	ee17 2a90 	vmov	r2, s15
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM11->CCR1 = cos30 * dutycycle;
 8002054:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800205e:	4b76      	ldr	r3, [pc, #472]	@ (8002238 <main+0x870>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002068:	4b6d      	ldr	r3, [pc, #436]	@ (8002220 <main+0x858>)
 800206a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206e:	ee17 2a90 	vmov	r2, s15
 8002072:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002074:	2100      	movs	r1, #0
 8002076:	4871      	ldr	r0, [pc, #452]	@ (800223c <main+0x874>)
 8002078:	f004 faae 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800207c:	2100      	movs	r1, #0
 800207e:	4869      	ldr	r0, [pc, #420]	@ (8002224 <main+0x85c>)
 8002080:	f004 faaa 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002084:	2100      	movs	r1, #0
 8002086:	4868      	ldr	r0, [pc, #416]	@ (8002228 <main+0x860>)
 8002088:	f004 faa6 	bl	80065d8 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2101      	movs	r1, #1
 8002090:	4866      	ldr	r0, [pc, #408]	@ (800222c <main+0x864>)
 8002092:	f002 fb93 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	2102      	movs	r1, #2
 800209a:	4864      	ldr	r0, [pc, #400]	@ (800222c <main+0x864>)
 800209c:	f002 fb8e 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2104      	movs	r1, #4
 80020a4:	4861      	ldr	r0, [pc, #388]	@ (800222c <main+0x864>)
 80020a6:	f002 fb89 	bl	80047bc <HAL_GPIO_WritePin>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
			current_state = RIGHT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020b0:	e1fd      	b.n	80024ae <main+0xae6>

		}

		// left

		else if (lx <= Buff2 && (ly <= BuffP && ly >= BuffN))
 80020b2:	4b56      	ldr	r3, [pc, #344]	@ (800220c <main+0x844>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b54      	ldr	r3, [pc, #336]	@ (8002208 <main+0x840>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dc5b      	bgt.n	8002176 <main+0x7ae>
 80020be:	4b51      	ldr	r3, [pc, #324]	@ (8002204 <main+0x83c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b53      	ldr	r3, [pc, #332]	@ (8002210 <main+0x848>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dc55      	bgt.n	8002176 <main+0x7ae>
 80020ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002204 <main+0x83c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b51      	ldr	r3, [pc, #324]	@ (8002214 <main+0x84c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	db4f      	blt.n	8002176 <main+0x7ae>

		{

			dutycycle = map(lx, -128, Buff2, fast, 0);
 80020d6:	4b4d      	ldr	r3, [pc, #308]	@ (800220c <main+0x844>)
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	4b4b      	ldr	r3, [pc, #300]	@ (8002208 <main+0x840>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b4e      	ldr	r3, [pc, #312]	@ (8002218 <main+0x850>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2100      	movs	r1, #0
 80020e4:	9100      	str	r1, [sp, #0]
 80020e6:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80020ea:	f7ff fb09 	bl	8001700 <map>
 80020ee:	4603      	mov	r3, r0
 80020f0:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 80020f2:	4a50      	ldr	r2, [pc, #320]	@ (8002234 <main+0x86c>)
 80020f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020f6:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = cos30 * dutycycle;
 80020f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002102:	4b4d      	ldr	r3, [pc, #308]	@ (8002238 <main+0x870>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210c:	4b43      	ldr	r3, [pc, #268]	@ (800221c <main+0x854>)
 800210e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002112:	ee17 2a90 	vmov	r2, s15
 8002116:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM11->CCR1 = cos30 * dutycycle;
 8002118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002122:	4b45      	ldr	r3, [pc, #276]	@ (8002238 <main+0x870>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	4b3c      	ldr	r3, [pc, #240]	@ (8002220 <main+0x858>)
 800212e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002132:	ee17 2a90 	vmov	r2, s15
 8002136:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002138:	2100      	movs	r1, #0
 800213a:	4840      	ldr	r0, [pc, #256]	@ (800223c <main+0x874>)
 800213c:	f004 fa4c 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002140:	2100      	movs	r1, #0
 8002142:	4838      	ldr	r0, [pc, #224]	@ (8002224 <main+0x85c>)
 8002144:	f004 fa48 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002148:	2100      	movs	r1, #0
 800214a:	4837      	ldr	r0, [pc, #220]	@ (8002228 <main+0x860>)
 800214c:	f004 fa44 	bl	80065d8 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002150:	2201      	movs	r2, #1
 8002152:	2101      	movs	r1, #1
 8002154:	4835      	ldr	r0, [pc, #212]	@ (800222c <main+0x864>)
 8002156:	f002 fb31 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	2102      	movs	r1, #2
 800215e:	4833      	ldr	r0, [pc, #204]	@ (800222c <main+0x864>)
 8002160:	f002 fb2c 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002164:	2201      	movs	r2, #1
 8002166:	2104      	movs	r1, #4
 8002168:	4830      	ldr	r0, [pc, #192]	@ (800222c <main+0x864>)
 800216a:	f002 fb27 	bl	80047bc <HAL_GPIO_WritePin>
			current_state = LEFT;
 800216e:	2304      	movs	r3, #4
 8002170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002174:	e19b      	b.n	80024ae <main+0xae6>

		}

		//clockwise

		else if (rx >= Buff1 && (ry <= BuffP && ry >= BuffN)) {
 8002176:	4b32      	ldr	r3, [pc, #200]	@ (8002240 <main+0x878>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <main+0x868>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	db62      	blt.n	8002248 <main+0x880>
 8002182:	4b30      	ldr	r3, [pc, #192]	@ (8002244 <main+0x87c>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <main+0x848>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	dc5c      	bgt.n	8002248 <main+0x880>
 800218e:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <main+0x87c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <main+0x84c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	db56      	blt.n	8002248 <main+0x880>

			dutycycle = map(rx, Buff1, 127, 0, 100);
 800219a:	4b29      	ldr	r3, [pc, #164]	@ (8002240 <main+0x878>)
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <main+0x868>)
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	2364      	movs	r3, #100	@ 0x64
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2300      	movs	r3, #0
 80021a8:	227f      	movs	r2, #127	@ 0x7f
 80021aa:	f7ff faa9 	bl	8001700 <map>
 80021ae:	4603      	mov	r3, r0
 80021b0:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 80021b2:	4a20      	ldr	r2, [pc, #128]	@ (8002234 <main+0x86c>)
 80021b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021b6:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 80021b8:	4a18      	ldr	r2, [pc, #96]	@ (800221c <main+0x854>)
 80021ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021bc:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 80021be:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <main+0x858>)
 80021c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021c2:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80021c4:	2100      	movs	r1, #0
 80021c6:	481d      	ldr	r0, [pc, #116]	@ (800223c <main+0x874>)
 80021c8:	f004 fa06 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80021cc:	2100      	movs	r1, #0
 80021ce:	4815      	ldr	r0, [pc, #84]	@ (8002224 <main+0x85c>)
 80021d0:	f004 fa02 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80021d4:	2100      	movs	r1, #0
 80021d6:	4814      	ldr	r0, [pc, #80]	@ (8002228 <main+0x860>)
 80021d8:	f004 f9fe 	bl	80065d8 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80021dc:	2201      	movs	r2, #1
 80021de:	2101      	movs	r1, #1
 80021e0:	4812      	ldr	r0, [pc, #72]	@ (800222c <main+0x864>)
 80021e2:	f002 faeb 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2102      	movs	r1, #2
 80021ea:	4810      	ldr	r0, [pc, #64]	@ (800222c <main+0x864>)
 80021ec:	f002 fae6 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2104      	movs	r1, #4
 80021f4:	480d      	ldr	r0, [pc, #52]	@ (800222c <main+0x864>)
 80021f6:	f002 fae1 	bl	80047bc <HAL_GPIO_WritePin>
			current_state = CLOCKWISE;
 80021fa:	2305      	movs	r3, #5
 80021fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002200:	e155      	b.n	80024ae <main+0xae6>
 8002202:	bf00      	nop
 8002204:	20000634 	.word	0x20000634
 8002208:	2000001c 	.word	0x2000001c
 800220c:	20000630 	.word	0x20000630
 8002210:	20000020 	.word	0x20000020
 8002214:	20000024 	.word	0x20000024
 8002218:	20000014 	.word	0x20000014
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800
 8002224:	200003dc 	.word	0x200003dc
 8002228:	20000424 	.word	0x20000424
 800222c:	40020800 	.word	0x40020800
 8002230:	20000018 	.word	0x20000018
 8002234:	40001800 	.word	0x40001800
 8002238:	20000028 	.word	0x20000028
 800223c:	2000046c 	.word	0x2000046c
 8002240:	20000638 	.word	0x20000638
 8002244:	2000063c 	.word	0x2000063c

		}

		// anticlockwise

		else if (rx <= Buff2 && (ry <= BuffP && ry >= BuffN)) {
 8002248:	4b6f      	ldr	r3, [pc, #444]	@ (8002408 <main+0xa40>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <main+0xa44>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	dc40      	bgt.n	80022d6 <main+0x90e>
 8002254:	4b6e      	ldr	r3, [pc, #440]	@ (8002410 <main+0xa48>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b6e      	ldr	r3, [pc, #440]	@ (8002414 <main+0xa4c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	dc3a      	bgt.n	80022d6 <main+0x90e>
 8002260:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <main+0xa48>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b6c      	ldr	r3, [pc, #432]	@ (8002418 <main+0xa50>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	db34      	blt.n	80022d6 <main+0x90e>

			dutycycle = map(rx, -128, Buff2, 100, 0);
 800226c:	4b66      	ldr	r3, [pc, #408]	@ (8002408 <main+0xa40>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	4b66      	ldr	r3, [pc, #408]	@ (800240c <main+0xa44>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2364      	movs	r3, #100	@ 0x64
 800227a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800227e:	f7ff fa3f 	bl	8001700 <map>
 8002282:	4603      	mov	r3, r0
 8002284:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM12->CCR1 = dutycycle;
 8002286:	4a65      	ldr	r2, [pc, #404]	@ (800241c <main+0xa54>)
 8002288:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800228a:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 800228c:	4a64      	ldr	r2, [pc, #400]	@ (8002420 <main+0xa58>)
 800228e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002290:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8002292:	4a64      	ldr	r2, [pc, #400]	@ (8002424 <main+0xa5c>)
 8002294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002296:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002298:	2100      	movs	r1, #0
 800229a:	4863      	ldr	r0, [pc, #396]	@ (8002428 <main+0xa60>)
 800229c:	f004 f99c 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80022a0:	2100      	movs	r1, #0
 80022a2:	4862      	ldr	r0, [pc, #392]	@ (800242c <main+0xa64>)
 80022a4:	f004 f998 	bl	80065d8 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80022a8:	2100      	movs	r1, #0
 80022aa:	4861      	ldr	r0, [pc, #388]	@ (8002430 <main+0xa68>)
 80022ac:	f004 f994 	bl	80065d8 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2101      	movs	r1, #1
 80022b4:	485f      	ldr	r0, [pc, #380]	@ (8002434 <main+0xa6c>)
 80022b6:	f002 fa81 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2102      	movs	r1, #2
 80022be:	485d      	ldr	r0, [pc, #372]	@ (8002434 <main+0xa6c>)
 80022c0:	f002 fa7c 	bl	80047bc <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2104      	movs	r1, #4
 80022c8:	485a      	ldr	r0, [pc, #360]	@ (8002434 <main+0xa6c>)
 80022ca:	f002 fa77 	bl	80047bc <HAL_GPIO_WritePin>
			current_state = ANTICLOCKWISE;
 80022ce:	2306      	movs	r3, #6
 80022d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022d4:	e0eb      	b.n	80024ae <main+0xae6>
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);

		}

		//top-right
		else if (lx > 70 && ly > 70) {
 80022d6:	4b58      	ldr	r3, [pc, #352]	@ (8002438 <main+0xa70>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b46      	cmp	r3, #70	@ 0x46
 80022dc:	dd2d      	ble.n	800233a <main+0x972>
 80022de:	4b57      	ldr	r3, [pc, #348]	@ (800243c <main+0xa74>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b46      	cmp	r3, #70	@ 0x46
 80022e4:	dd29      	ble.n	800233a <main+0x972>

			dutycycle = map(rx, -128, Buff2, 400, 0);
 80022e6:	4b48      	ldr	r3, [pc, #288]	@ (8002408 <main+0xa40>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	4b48      	ldr	r3, [pc, #288]	@ (800240c <main+0xa44>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80022f6:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80022fa:	f7ff fa01 	bl	8001700 <map>
 80022fe:	4603      	mov	r3, r0
 8002300:	84bb      	strh	r3, [r7, #36]	@ 0x24

			//motor 1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002302:	2201      	movs	r2, #1
 8002304:	2101      	movs	r1, #1
 8002306:	484b      	ldr	r0, [pc, #300]	@ (8002434 <main+0xa6c>)
 8002308:	f002 fa58 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dutycycle);
 800230c:	4b4c      	ldr	r3, [pc, #304]	@ (8002440 <main+0xa78>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002312:	639a      	str	r2, [r3, #56]	@ 0x38

			//motor 2
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2102      	movs	r1, #2
 8002318:	4846      	ldr	r0, [pc, #280]	@ (8002434 <main+0xa6c>)
 800231a:	f002 fa4f 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutycycle);
 800231e:	4b49      	ldr	r3, [pc, #292]	@ (8002444 <main+0xa7c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002324:	635a      	str	r2, [r3, #52]	@ 0x34

			//motor 3
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8002326:	2201      	movs	r2, #1
 8002328:	2104      	movs	r1, #4
 800232a:	4842      	ldr	r0, [pc, #264]	@ (8002434 <main+0xa6c>)
 800232c:	f002 fa46 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002330:	4b43      	ldr	r3, [pc, #268]	@ (8002440 <main+0xa78>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2200      	movs	r2, #0
 8002336:	635a      	str	r2, [r3, #52]	@ 0x34
 8002338:	e0b9      	b.n	80024ae <main+0xae6>

		}
		//top-left
		else if (lx < -70 && ly > 70) {
 800233a:	4b3f      	ldr	r3, [pc, #252]	@ (8002438 <main+0xa70>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8002342:	da2d      	bge.n	80023a0 <main+0x9d8>
 8002344:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <main+0xa74>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b46      	cmp	r3, #70	@ 0x46
 800234a:	dd29      	ble.n	80023a0 <main+0x9d8>

			dutycycle = map(rx, -128, Buff2, 400, 0);
 800234c:	4b2e      	ldr	r3, [pc, #184]	@ (8002408 <main+0xa40>)
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <main+0xa44>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800235c:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8002360:	f7ff f9ce 	bl	8001700 <map>
 8002364:	4603      	mov	r3, r0
 8002366:	84bb      	strh	r3, [r7, #36]	@ 0x24

			//motor 1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2101      	movs	r1, #1
 800236c:	4831      	ldr	r0, [pc, #196]	@ (8002434 <main+0xa6c>)
 800236e:	f002 fa25 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dutycycle);
 8002372:	4b33      	ldr	r3, [pc, #204]	@ (8002440 <main+0xa78>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002378:	639a      	str	r2, [r3, #56]	@ 0x38

			//motor 2
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800237a:	2201      	movs	r2, #1
 800237c:	2102      	movs	r1, #2
 800237e:	482d      	ldr	r0, [pc, #180]	@ (8002434 <main+0xa6c>)
 8002380:	f002 fa1c 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002384:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <main+0xa7c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2200      	movs	r2, #0
 800238a:	635a      	str	r2, [r3, #52]	@ 0x34

			//motor 3
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800238c:	2201      	movs	r2, #1
 800238e:	2104      	movs	r1, #4
 8002390:	4828      	ldr	r0, [pc, #160]	@ (8002434 <main+0xa6c>)
 8002392:	f002 fa13 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutycycle);
 8002396:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <main+0xa78>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34
 800239e:	e086      	b.n	80024ae <main+0xae6>

		}
		//bottom-right
		else if (lx > 70 && ly < -70) {
 80023a0:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <main+0xa70>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b46      	cmp	r3, #70	@ 0x46
 80023a6:	dd4f      	ble.n	8002448 <main+0xa80>
 80023a8:	4b24      	ldr	r3, [pc, #144]	@ (800243c <main+0xa74>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 80023b0:	da4a      	bge.n	8002448 <main+0xa80>

			dutycycle = map(rx, -128, Buff2, 400, 0);
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <main+0xa40>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <main+0xa44>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80023c2:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80023c6:	f7ff f99b 	bl	8001700 <map>
 80023ca:	4603      	mov	r3, r0
 80023cc:	84bb      	strh	r3, [r7, #36]	@ 0x24

			//motor 1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2101      	movs	r1, #1
 80023d2:	4818      	ldr	r0, [pc, #96]	@ (8002434 <main+0xa6c>)
 80023d4:	f002 f9f2 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dutycycle);
 80023d8:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <main+0xa78>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023de:	639a      	str	r2, [r3, #56]	@ 0x38

			//motor 2
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2102      	movs	r1, #2
 80023e4:	4813      	ldr	r0, [pc, #76]	@ (8002434 <main+0xa6c>)
 80023e6:	f002 f9e9 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <main+0xa7c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34

			//motor 3
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2104      	movs	r1, #4
 80023f6:	480f      	ldr	r0, [pc, #60]	@ (8002434 <main+0xa6c>)
 80023f8:	f002 f9e0 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutycycle);
 80023fc:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <main+0xa78>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002402:	635a      	str	r2, [r3, #52]	@ 0x34
 8002404:	e053      	b.n	80024ae <main+0xae6>
 8002406:	bf00      	nop
 8002408:	20000638 	.word	0x20000638
 800240c:	2000001c 	.word	0x2000001c
 8002410:	2000063c 	.word	0x2000063c
 8002414:	20000020 	.word	0x20000020
 8002418:	20000024 	.word	0x20000024
 800241c:	40001800 	.word	0x40001800
 8002420:	40014400 	.word	0x40014400
 8002424:	40014800 	.word	0x40014800
 8002428:	2000046c 	.word	0x2000046c
 800242c:	200003dc 	.word	0x200003dc
 8002430:	20000424 	.word	0x20000424
 8002434:	40020800 	.word	0x40020800
 8002438:	20000630 	.word	0x20000630
 800243c:	20000634 	.word	0x20000634
 8002440:	20000304 	.word	0x20000304
 8002444:	200002bc 	.word	0x200002bc

		}
		//bottom-left
		else if (lx < -70 && ly < -70) {
 8002448:	4b72      	ldr	r3, [pc, #456]	@ (8002614 <main+0xc4c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8002450:	da2d      	bge.n	80024ae <main+0xae6>
 8002452:	4b71      	ldr	r3, [pc, #452]	@ (8002618 <main+0xc50>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 800245a:	da28      	bge.n	80024ae <main+0xae6>

			dutycycle = map(rx, -128, Buff2, 400, 0);
 800245c:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <main+0xc54>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	4b6f      	ldr	r3, [pc, #444]	@ (8002620 <main+0xc58>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800246c:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8002470:	f7ff f946 	bl	8001700 <map>
 8002474:	4603      	mov	r3, r0
 8002476:	84bb      	strh	r3, [r7, #36]	@ 0x24

			//motor 1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2101      	movs	r1, #1
 800247c:	4869      	ldr	r0, [pc, #420]	@ (8002624 <main+0xc5c>)
 800247e:	f002 f99d 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dutycycle);
 8002482:	4b69      	ldr	r3, [pc, #420]	@ (8002628 <main+0xc60>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002488:	639a      	str	r2, [r3, #56]	@ 0x38

			//motor 2
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800248a:	2201      	movs	r2, #1
 800248c:	2102      	movs	r1, #2
 800248e:	4865      	ldr	r0, [pc, #404]	@ (8002624 <main+0xc5c>)
 8002490:	f002 f994 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutycycle);
 8002494:	4b65      	ldr	r3, [pc, #404]	@ (800262c <main+0xc64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800249a:	635a      	str	r2, [r3, #52]	@ 0x34

			//motor 3
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800249c:	2201      	movs	r2, #1
 800249e:	2104      	movs	r1, #4
 80024a0:	4860      	ldr	r0, [pc, #384]	@ (8002624 <main+0xc5c>)
 80024a2:	f002 f98b 	bl	80047bc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80024a6:	4b60      	ldr	r3, [pc, #384]	@ (8002628 <main+0xc60>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34

		}
		update_odometry(signed_counter1, signed_counter2, signed_counter3);
 80024ae:	4b60      	ldr	r3, [pc, #384]	@ (8002630 <main+0xc68>)
 80024b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002634 <main+0xc6c>)
 80024b6:	6811      	ldr	r1, [r2, #0]
 80024b8:	4a5f      	ldr	r2, [pc, #380]	@ (8002638 <main+0xc70>)
 80024ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f93a 	bl	8001738 <update_odometry>
		/* Stepper */
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 80024c4:	4b5d      	ldr	r3, [pc, #372]	@ (800263c <main+0xc74>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	2108      	movs	r1, #8
 80024d6:	4853      	ldr	r0, [pc, #332]	@ (8002624 <main+0xc5c>)
 80024d8:	f002 f970 	bl	80047bc <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 80024dc:	4b58      	ldr	r3, [pc, #352]	@ (8002640 <main+0xc78>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d109      	bne.n	80024f8 <main+0xb30>
 80024e4:	4b57      	ldr	r3, [pc, #348]	@ (8002644 <main+0xc7c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <main+0xb30>
			direction1 = 1;  // Set to Anti-clockwise
 80024ec:	4b53      	ldr	r3, [pc, #332]	@ (800263c <main+0xc74>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 80024f2:	4b55      	ldr	r3, [pc, #340]	@ (8002648 <main+0xc80>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 80024f8:	4b54      	ldr	r3, [pc, #336]	@ (800264c <main+0xc84>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d109      	bne.n	8002514 <main+0xb4c>
 8002500:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <main+0xc88>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <main+0xb4c>
			direction1 = 0;  // Set to Clockwise
 8002508:	4b4c      	ldr	r3, [pc, #304]	@ (800263c <main+0xc74>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 800250e:	4b4e      	ldr	r3, [pc, #312]	@ (8002648 <main+0xc80>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]
		}
		if (cir == 1 && !prev_cir) {
 8002514:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <main+0xc8c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d106      	bne.n	800252a <main+0xb62>
 800251c:	4b4e      	ldr	r3, [pc, #312]	@ (8002658 <main+0xc90>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <main+0xb62>
			stepper_running1 = 0;
 8002524:	4b48      	ldr	r3, [pc, #288]	@ (8002648 <main+0xc80>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
		}
		prev_ll1 = ll1;
 800252a:	4b45      	ldr	r3, [pc, #276]	@ (8002640 <main+0xc78>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a45      	ldr	r2, [pc, #276]	@ (8002644 <main+0xc7c>)
 8002530:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <main+0xc84>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a46      	ldr	r2, [pc, #280]	@ (8002650 <main+0xc88>)
 8002538:	6013      	str	r3, [r2, #0]
		prev_cir = cir;
 800253a:	4b46      	ldr	r3, [pc, #280]	@ (8002654 <main+0xc8c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a46      	ldr	r2, [pc, #280]	@ (8002658 <main+0xc90>)
 8002540:	6013      	str	r3, [r2, #0]
		if (stepper_running1
 8002542:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <main+0xc80>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d023      	beq.n	8002592 <main+0xbca>
				&& (HAL_GetTick() - last_step_time1) >= step_delay1) {
 800254a:	f001 fa5f 	bl	8003a0c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	4b42      	ldr	r3, [pc, #264]	@ (800265c <main+0xc94>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a42      	ldr	r2, [pc, #264]	@ (8002660 <main+0xc98>)
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	4293      	cmp	r3, r2
 800255c:	d319      	bcc.n	8002592 <main+0xbca>
			last_step_time1 = HAL_GetTick(); // Update last step time
 800255e:	f001 fa55 	bl	8003a0c <HAL_GetTick>
 8002562:	4603      	mov	r3, r0
 8002564:	4a3d      	ldr	r2, [pc, #244]	@ (800265c <main+0xc94>)
 8002566:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 8002568:	4b3e      	ldr	r3, [pc, #248]	@ (8002664 <main+0xc9c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d108      	bne.n	8002582 <main+0xbba>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 8002570:	2201      	movs	r2, #1
 8002572:	2120      	movs	r1, #32
 8002574:	482b      	ldr	r0, [pc, #172]	@ (8002624 <main+0xc5c>)
 8002576:	f002 f921 	bl	80047bc <HAL_GPIO_WritePin>
				step_state1 = 1;
 800257a:	4b3a      	ldr	r3, [pc, #232]	@ (8002664 <main+0xc9c>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e007      	b.n	8002592 <main+0xbca>
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 8002582:	2200      	movs	r2, #0
 8002584:	2120      	movs	r1, #32
 8002586:	4827      	ldr	r0, [pc, #156]	@ (8002624 <main+0xc5c>)
 8002588:	f002 f918 	bl	80047bc <HAL_GPIO_WritePin>
				step_state1 = 0;
 800258c:	4b35      	ldr	r3, [pc, #212]	@ (8002664 <main+0xc9c>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
		}

		/* IMU */

		/* Dribbling */
		if (tri == 1 && !prev_tri) {
 8002592:	4b35      	ldr	r3, [pc, #212]	@ (8002668 <main+0xca0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d106      	bne.n	80025a8 <main+0xbe0>
 800259a:	4b34      	ldr	r3, [pc, #208]	@ (800266c <main+0xca4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <main+0xbe0>
			ebike_running = 1;
 80025a2:	4b33      	ldr	r3, [pc, #204]	@ (8002670 <main+0xca8>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
		}
		if (cro == 1 && !prev_cro) {  // cro button pressed
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <main+0xcac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10c      	bne.n	80025ca <main+0xc02>
 80025b0:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <main+0xcb0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d108      	bne.n	80025ca <main+0xc02>
			printf("cross pressed");
 80025b8:	4830      	ldr	r0, [pc, #192]	@ (800267c <main+0xcb4>)
 80025ba:	f007 f841 	bl	8009640 <iprintf>
			direction1 = 0;  // Set to Clockwise
 80025be:	4b1f      	ldr	r3, [pc, #124]	@ (800263c <main+0xc74>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
			ebike_running = 0;
 80025c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <main+0xca8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
		}
		prev_tri = tri;
 80025ca:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <main+0xca0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a27      	ldr	r2, [pc, #156]	@ (800266c <main+0xca4>)
 80025d0:	6013      	str	r3, [r2, #0]
		prev_cro = cro;
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <main+0xcac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a28      	ldr	r2, [pc, #160]	@ (8002678 <main+0xcb0>)
 80025d8:	6013      	str	r3, [r2, #0]
		if (ebike_running) {
 80025da:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <main+0xca8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00f      	beq.n	8002602 <main+0xc3a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025e8:	480e      	ldr	r0, [pc, #56]	@ (8002624 <main+0xc5c>)
 80025ea:	f002 f8e7 	bl	80047bc <HAL_GPIO_WritePin>
			TIM13->CCR1 = (1350* 999) / 3500;  //rpm 2000 test
 80025ee:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <main+0xcb8>)
 80025f0:	f240 1281 	movw	r2, #385	@ 0x181
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80025f6:	2100      	movs	r1, #0
 80025f8:	4822      	ldr	r0, [pc, #136]	@ (8002684 <main+0xcbc>)
 80025fa:	f003 ffed 	bl	80065d8 <HAL_TIM_PWM_Start>
 80025fe:	f7ff ba21 	b.w	8001a44 <main+0x7c>
		} else {
			//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
			TIM13->CCR1 = (0 * 999) / 3500;
 8002602:	4b1f      	ldr	r3, [pc, #124]	@ (8002680 <main+0xcb8>)
 8002604:	2200      	movs	r2, #0
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002608:	2100      	movs	r1, #0
 800260a:	481e      	ldr	r0, [pc, #120]	@ (8002684 <main+0xcbc>)
 800260c:	f003 ffe4 	bl	80065d8 <HAL_TIM_PWM_Start>
	while (1) {
 8002610:	f7ff ba18 	b.w	8001a44 <main+0x7c>
 8002614:	20000630 	.word	0x20000630
 8002618:	20000634 	.word	0x20000634
 800261c:	20000638 	.word	0x20000638
 8002620:	2000001c 	.word	0x2000001c
 8002624:	40020800 	.word	0x40020800
 8002628:	20000304 	.word	0x20000304
 800262c:	200002bc 	.word	0x200002bc
 8002630:	20000610 	.word	0x20000610
 8002634:	20000614 	.word	0x20000614
 8002638:	20000618 	.word	0x20000618
 800263c:	2000000c 	.word	0x2000000c
 8002640:	20000660 	.word	0x20000660
 8002644:	20000608 	.word	0x20000608
 8002648:	200005f4 	.word	0x200005f4
 800264c:	20000664 	.word	0x20000664
 8002650:	2000060c 	.word	0x2000060c
 8002654:	2000064c 	.word	0x2000064c
 8002658:	200005fc 	.word	0x200005fc
 800265c:	200005ec 	.word	0x200005ec
 8002660:	20000010 	.word	0x20000010
 8002664:	200005f0 	.word	0x200005f0
 8002668:	20000648 	.word	0x20000648
 800266c:	20000600 	.word	0x20000600
 8002670:	200005f8 	.word	0x200005f8
 8002674:	20000640 	.word	0x20000640
 8002678:	20000604 	.word	0x20000604
 800267c:	0800d6ec 	.word	0x0800d6ec
 8002680:	40001c00 	.word	0x40001c00
 8002684:	200004b4 	.word	0x200004b4

08002688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b094      	sub	sp, #80	@ 0x50
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	2234      	movs	r2, #52	@ 0x34
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f007 f93a 	bl	8009910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002764 <SystemClock_Config+0xdc>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <SystemClock_Config+0xdc>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80026bc:	4b29      	ldr	r3, [pc, #164]	@ (8002764 <SystemClock_Config+0xdc>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c8:	2300      	movs	r3, #0
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4b26      	ldr	r3, [pc, #152]	@ (8002768 <SystemClock_Config+0xe0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a25      	ldr	r2, [pc, #148]	@ (8002768 <SystemClock_Config+0xe0>)
 80026d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <SystemClock_Config+0xe0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ec:	2310      	movs	r3, #16
 80026ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f0:	2302      	movs	r3, #2
 80026f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026f8:	2308      	movs	r3, #8
 80026fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80026fc:	23b4      	movs	r3, #180	@ 0xb4
 80026fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002700:	2302      	movs	r3, #2
 8002702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002704:	2302      	movs	r3, #2
 8002706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002708:	2302      	movs	r3, #2
 800270a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fc1b 	bl	8005f4c <HAL_RCC_OscConfig>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800271c:	f000 fc6a 	bl	8002ff4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002720:	f003 f87a 	bl	8005818 <HAL_PWREx_EnableOverDrive>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800272a:	f000 fc63 	bl	8002ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272e:	230f      	movs	r3, #15
 8002730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002732:	2302      	movs	r3, #2
 8002734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800273a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800273e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002744:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	2105      	movs	r1, #5
 800274c:	4618      	mov	r0, r3
 800274e:	f003 f8b3 	bl	80058b8 <HAL_RCC_ClockConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002758:	f000 fc4c 	bl	8002ff4 <Error_Handler>
  }
}
 800275c:	bf00      	nop
 800275e:	3750      	adds	r7, #80	@ 0x50
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000

0800276c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002770:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <MX_I2C1_Init+0x50>)
 8002772:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <MX_I2C1_Init+0x54>)
 8002774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <MX_I2C1_Init+0x50>)
 8002778:	4a12      	ldr	r2, [pc, #72]	@ (80027c4 <MX_I2C1_Init+0x58>)
 800277a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800277c:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <MX_I2C1_Init+0x50>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002782:	4b0e      	ldr	r3, [pc, #56]	@ (80027bc <MX_I2C1_Init+0x50>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <MX_I2C1_Init+0x50>)
 800278a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800278e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <MX_I2C1_Init+0x50>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002796:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <MX_I2C1_Init+0x50>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800279c:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <MX_I2C1_Init+0x50>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <MX_I2C1_Init+0x50>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027a8:	4804      	ldr	r0, [pc, #16]	@ (80027bc <MX_I2C1_Init+0x50>)
 80027aa:	f002 f821 	bl	80047f0 <HAL_I2C_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027b4:	f000 fc1e 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000220 	.word	0x20000220
 80027c0:	40005400 	.word	0x40005400
 80027c4:	00061a80 	.word	0x00061a80

080027c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	@ 0x30
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	2224      	movs	r2, #36	@ 0x24
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f007 f89a 	bl	8009910 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027e4:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <MX_TIM1_Init+0xa8>)
 80027e6:	4a23      	ldr	r2, [pc, #140]	@ (8002874 <MX_TIM1_Init+0xac>)
 80027e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ea:	4b21      	ldr	r3, [pc, #132]	@ (8002870 <MX_TIM1_Init+0xa8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <MX_TIM1_Init+0xa8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <MX_TIM1_Init+0xa8>)
 80027f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002870 <MX_TIM1_Init+0xa8>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002804:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <MX_TIM1_Init+0xa8>)
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280a:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <MX_TIM1_Init+0xa8>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002810:	2301      	movs	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002818:	2301      	movs	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002828:	2301      	movs	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	4619      	mov	r1, r3
 800283a:	480d      	ldr	r0, [pc, #52]	@ (8002870 <MX_TIM1_Init+0xa8>)
 800283c:	f003 ff94 	bl	8006768 <HAL_TIM_Encoder_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002846:	f000 fbd5 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4806      	ldr	r0, [pc, #24]	@ (8002870 <MX_TIM1_Init+0xa8>)
 8002858:	f004 fd60 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002862:	f000 fbc7 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	3730      	adds	r7, #48	@ 0x30
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000274 	.word	0x20000274
 8002874:	40010000 	.word	0x40010000

08002878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	2224      	movs	r2, #36	@ 0x24
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f007 f842 	bl	8009910 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002894:	4b21      	ldr	r3, [pc, #132]	@ (800291c <MX_TIM2_Init+0xa4>)
 8002896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800289a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800289c:	4b1f      	ldr	r3, [pc, #124]	@ (800291c <MX_TIM2_Init+0xa4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <MX_TIM2_Init+0xa4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <MX_TIM2_Init+0xa4>)
 80028aa:	f04f 32ff 	mov.w	r2, #4294967295
 80028ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b0:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <MX_TIM2_Init+0xa4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b6:	4b19      	ldr	r3, [pc, #100]	@ (800291c <MX_TIM2_Init+0xa4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028bc:	2301      	movs	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028c4:	2301      	movs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028d4:	2301      	movs	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	4619      	mov	r1, r3
 80028e6:	480d      	ldr	r0, [pc, #52]	@ (800291c <MX_TIM2_Init+0xa4>)
 80028e8:	f003 ff3e 	bl	8006768 <HAL_TIM_Encoder_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80028f2:	f000 fb7f 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4806      	ldr	r0, [pc, #24]	@ (800291c <MX_TIM2_Init+0xa4>)
 8002904:	f004 fd0a 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800290e:	f000 fb71 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002912:	bf00      	nop
 8002914:	3730      	adds	r7, #48	@ 0x30
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200002bc 	.word	0x200002bc

08002920 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	@ 0x30
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	2224      	movs	r2, #36	@ 0x24
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f006 ffee 	bl	8009910 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800293c:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 800293e:	4a21      	ldr	r2, [pc, #132]	@ (80029c4 <MX_TIM3_Init+0xa4>)
 8002940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002942:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800294e:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 8002950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002954:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295c:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002962:	2301      	movs	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800296a:	2301      	movs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800297a:	2301      	movs	r3, #1
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4619      	mov	r1, r3
 800298c:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 800298e:	f003 feeb 	bl	8006768 <HAL_TIM_Encoder_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002998:	f000 fb2c 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	@ (80029c0 <MX_TIM3_Init+0xa0>)
 80029aa:	f004 fcb7 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029b4:	f000 fb1e 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029b8:	bf00      	nop
 80029ba:	3730      	adds	r7, #48	@ 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000304 	.word	0x20000304
 80029c4:	40000400 	.word	0x40000400

080029c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	@ 0x30
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	2224      	movs	r2, #36	@ 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f006 ff9a 	bl	8009910 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029e4:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 80029e6:	4a21      	ldr	r2, [pc, #132]	@ (8002a6c <MX_TIM5_Init+0xa4>)
 80029e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80029ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80029f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a12:	2301      	movs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a22:	2301      	movs	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 8002a36:	f003 fe97 	bl	8006768 <HAL_TIM_Encoder_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002a40:	f000 fad8 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	@ (8002a68 <MX_TIM5_Init+0xa0>)
 8002a52:	f004 fc63 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002a5c:	f000 faca 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	3730      	adds	r7, #48	@ 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	2000034c 	.word	0x2000034c
 8002a6c:	40000c00 	.word	0x40000c00

08002a70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a84:	463b      	mov	r3, r7
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b0c <MX_TIM8_Init+0x9c>)
 8002a90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002a94:	22b3      	movs	r2, #179	@ 0xb3
 8002a96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002aa0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002aa4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ab8:	4813      	ldr	r0, [pc, #76]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002aba:	f003 fce5 	bl	8006488 <HAL_TIM_Base_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002ac4:	f000 fa96 	bl	8002ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002ad6:	f004 f83d 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002ae0:	f000 fa88 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002aec:	463b      	mov	r3, r7
 8002aee:	4619      	mov	r1, r3
 8002af0:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <MX_TIM8_Init+0x98>)
 8002af2:	f004 fc13 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002afc:	f000 fa7a 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000394 	.word	0x20000394
 8002b0c:	40010400 	.word	0x40010400

08002b10 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
 8002b24:	615a      	str	r2, [r3, #20]
 8002b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <MX_TIM10_Init+0x98>)
 8002b2c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 179;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b30:	22b3      	movs	r2, #179	@ 0xb3
 8002b32:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b40:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b48:	4b16      	ldr	r3, [pc, #88]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b4e:	4815      	ldr	r0, [pc, #84]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b50:	f003 fc9a 	bl	8006488 <HAL_TIM_Base_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002b5a:	f000 fa4b 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002b5e:	4811      	ldr	r0, [pc, #68]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b60:	f003 fce1 	bl	8006526 <HAL_TIM_PWM_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002b6a:	f000 fa43 	bl	8002ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b6e:	2360      	movs	r3, #96	@ 0x60
 8002b70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	2200      	movs	r2, #0
 8002b82:	4619      	mov	r1, r3
 8002b84:	4807      	ldr	r0, [pc, #28]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b86:	f003 ff23 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002b90:	f000 fa30 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002b94:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <MX_TIM10_Init+0x94>)
 8002b96:	f000 fc3f 	bl	8003418 <HAL_TIM_MspPostInit>

}
 8002b9a:	bf00      	nop
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200003dc 	.word	0x200003dc
 8002ba8:	40014400 	.word	0x40014400

08002bac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
 8002bc0:	615a      	str	r2, [r3, #20]
 8002bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <MX_TIM11_Init+0x98>)
 8002bc8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002bcc:	22b3      	movs	r2, #179	@ 0xb3
 8002bce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002bd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bdc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bde:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be4:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002bea:	4815      	ldr	r0, [pc, #84]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002bec:	f003 fc4c 	bl	8006488 <HAL_TIM_Base_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002bf6:	f000 f9fd 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002bfa:	4811      	ldr	r0, [pc, #68]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002bfc:	f003 fc93 	bl	8006526 <HAL_TIM_PWM_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002c06:	f000 f9f5 	bl	8002ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c0a:	2360      	movs	r3, #96	@ 0x60
 8002c0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4807      	ldr	r0, [pc, #28]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002c22:	f003 fed5 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002c2c:	f000 f9e2 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002c30:	4803      	ldr	r0, [pc, #12]	@ (8002c40 <MX_TIM11_Init+0x94>)
 8002c32:	f000 fbf1 	bl	8003418 <HAL_TIM_MspPostInit>

}
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000424 	.word	0x20000424
 8002c44:	40014800 	.word	0x40014800

08002c48 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	@ 0x30
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4e:	f107 0320 	add.w	r3, r7, #32
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	611a      	str	r2, [r3, #16]
 8002c6a:	615a      	str	r2, [r3, #20]
 8002c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c6e:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002c70:	4a25      	ldr	r2, [pc, #148]	@ (8002d08 <MX_TIM12_Init+0xc0>)
 8002c72:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 179;
 8002c74:	4b23      	ldr	r3, [pc, #140]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002c76:	22b3      	movs	r2, #179	@ 0xb3
 8002c78:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8002c80:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002c82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c86:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c94:	481b      	ldr	r0, [pc, #108]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002c96:	f003 fbf7 	bl	8006488 <HAL_TIM_Base_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002ca0:	f000 f9a8 	bl	8002ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002caa:	f107 0320 	add.w	r3, r7, #32
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4814      	ldr	r0, [pc, #80]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002cb2:	f003 ff4f 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002cbc:	f000 f99a 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002cc0:	4810      	ldr	r0, [pc, #64]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002cc2:	f003 fc30 	bl	8006526 <HAL_TIM_PWM_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002ccc:	f000 f992 	bl	8002ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cd0:	2360      	movs	r3, #96	@ 0x60
 8002cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4807      	ldr	r0, [pc, #28]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002ce8:	f003 fe72 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002cf2:	f000 f97f 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002cf6:	4803      	ldr	r0, [pc, #12]	@ (8002d04 <MX_TIM12_Init+0xbc>)
 8002cf8:	f000 fb8e 	bl	8003418 <HAL_TIM_MspPostInit>

}
 8002cfc:	bf00      	nop
 8002cfe:	3730      	adds	r7, #48	@ 0x30
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	2000046c 	.word	0x2000046c
 8002d08:	40001800 	.word	0x40001800

08002d0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
 8002d20:	615a      	str	r2, [r3, #20]
 8002d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002d24:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d26:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <MX_TIM13_Init+0x98>)
 8002d28:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 179;
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d2c:	22b3      	movs	r2, #179	@ 0xb3
 8002d2e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d3c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3e:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d44:	4b16      	ldr	r3, [pc, #88]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002d4a:	4815      	ldr	r0, [pc, #84]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d4c:	f003 fb9c 	bl	8006488 <HAL_TIM_Base_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002d56:	f000 f94d 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002d5a:	4811      	ldr	r0, [pc, #68]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d5c:	f003 fbe3 	bl	8006526 <HAL_TIM_PWM_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002d66:	f000 f945 	bl	8002ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d6a:	2360      	movs	r3, #96	@ 0x60
 8002d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4807      	ldr	r0, [pc, #28]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d82:	f003 fe25 	bl	80069d0 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002d8c:	f000 f932 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002d90:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <MX_TIM13_Init+0x94>)
 8002d92:	f000 fb41 	bl	8003418 <HAL_TIM_MspPostInit>

}
 8002d96:	bf00      	nop
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200004b4 	.word	0x200004b4
 8002da4:	40001c00 	.word	0x40001c00

08002da8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002dac:	4b11      	ldr	r3, [pc, #68]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002dae:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <MX_UART4_Init+0x50>)
 8002db0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002db8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dde:	4805      	ldr	r0, [pc, #20]	@ (8002df4 <MX_UART4_Init+0x4c>)
 8002de0:	f004 fb18 	bl	8007414 <HAL_UART_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002dea:	f000 f903 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200004fc 	.word	0x200004fc
 8002df8:	40004c00 	.word	0x40004c00

08002dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e02:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <MX_USART2_UART_Init+0x50>)
 8002e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e06:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e20:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e22:	220c      	movs	r2, #12
 8002e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e26:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e32:	4805      	ldr	r0, [pc, #20]	@ (8002e48 <MX_USART2_UART_Init+0x4c>)
 8002e34:	f004 faee 	bl	8007414 <HAL_UART_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e3e:	f000 f8d9 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000544 	.word	0x20000544
 8002e4c:	40004400 	.word	0x40004400

08002e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <MX_DMA_Init+0x3c>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <MX_DMA_Init+0x3c>)
 8002e60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e66:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <MX_DMA_Init+0x3c>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	200d      	movs	r0, #13
 8002e78:	f000 fed3 	bl	8003c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002e7c:	200d      	movs	r0, #13
 8002e7e:	f000 feec 	bl	8003c5a <HAL_NVIC_EnableIRQ>

}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	4a42      	ldr	r2, [pc, #264]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb6:	4b40      	ldr	r3, [pc, #256]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a3b      	ldr	r2, [pc, #236]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b39      	ldr	r3, [pc, #228]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	4b35      	ldr	r3, [pc, #212]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a34      	ldr	r2, [pc, #208]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <MX_GPIO_Init+0x128>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002f16:	2200      	movs	r2, #0
 8002f18:	f248 31ef 	movw	r1, #33775	@ 0x83ef
 8002f1c:	4827      	ldr	r0, [pc, #156]	@ (8002fbc <MX_GPIO_Init+0x12c>)
 8002f1e:	f001 fc4d 	bl	80047bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_5|stepper_direction_Pin|motor1_Pin
                          |motor2_Pin|motor3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8002f28:	4825      	ldr	r0, [pc, #148]	@ (8002fc0 <MX_GPIO_Init+0x130>)
 8002f2a:	f001 fc47 	bl	80047bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|stepper_speed_Pin, GPIO_PIN_RESET);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f249 4104 	movw	r1, #37892	@ 0x9404
 8002f34:	4823      	ldr	r0, [pc, #140]	@ (8002fc4 <MX_GPIO_Init+0x134>)
 8002f36:	f001 fc41 	bl	80047bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	481a      	ldr	r0, [pc, #104]	@ (8002fbc <MX_GPIO_Init+0x12c>)
 8002f52:	f001 fa9f 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 PC2
                           PC3 PC5 stepper_direction_Pin motor1_Pin
                           motor2_Pin motor3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002f56:	f248 33ef 	movw	r3, #33775	@ 0x83ef
 8002f5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_5|stepper_direction_Pin|motor1_Pin
                          |motor2_Pin|motor3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4813      	ldr	r0, [pc, #76]	@ (8002fbc <MX_GPIO_Init+0x12c>)
 8002f70:	f001 fa90 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8002f74:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8002f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480c      	ldr	r0, [pc, #48]	@ (8002fc0 <MX_GPIO_Init+0x130>)
 8002f8e:	f001 fa81 	bl	8004494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 stepper_speed_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|stepper_speed_Pin;
 8002f92:	f249 4304 	movw	r3, #37892	@ 0x9404
 8002f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4806      	ldr	r0, [pc, #24]	@ (8002fc4 <MX_GPIO_Init+0x134>)
 8002fac:	f001 fa72 	bl	8004494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fb0:	bf00      	nop
 8002fb2:	3728      	adds	r7, #40	@ 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020800 	.word	0x40020800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400

08002fc8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4804      	ldr	r0, [pc, #16]	@ (8002ff0 <_write+0x28>)
 8002fe0:	f004 fa68 	bl	80074b4 <HAL_UART_Transmit>
	return len;
 8002fe4:	687b      	ldr	r3, [r7, #4]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000544 	.word	0x20000544

08002ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff8:	b672      	cpsid	i
}
 8002ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <Error_Handler+0x8>

08003000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <HAL_MspInit+0x4c>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	4a0f      	ldr	r2, [pc, #60]	@ (800304c <HAL_MspInit+0x4c>)
 8003010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003014:	6453      	str	r3, [r2, #68]	@ 0x44
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_MspInit+0x4c>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4b09      	ldr	r3, [pc, #36]	@ (800304c <HAL_MspInit+0x4c>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	4a08      	ldr	r2, [pc, #32]	@ (800304c <HAL_MspInit+0x4c>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	@ 0x40
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_MspInit+0x4c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800303e:	2007      	movs	r0, #7
 8003040:	f000 fde4 	bl	8003c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	@ 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <HAL_I2C_MspInit+0x84>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d12b      	bne.n	80030ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	4b18      	ldr	r3, [pc, #96]	@ (80030d8 <HAL_I2C_MspInit+0x88>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <HAL_I2C_MspInit+0x88>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <HAL_I2C_MspInit+0x88>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800308e:	23c0      	movs	r3, #192	@ 0xc0
 8003090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003092:	2312      	movs	r3, #18
 8003094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800309e:	2304      	movs	r3, #4
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	480c      	ldr	r0, [pc, #48]	@ (80030dc <HAL_I2C_MspInit+0x8c>)
 80030aa:	f001 f9f3 	bl	8004494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_I2C_MspInit+0x88>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <HAL_I2C_MspInit+0x88>)
 80030b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_I2C_MspInit+0x88>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80030ca:	bf00      	nop
 80030cc:	3728      	adds	r7, #40	@ 0x28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40005400 	.word	0x40005400
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020400 	.word	0x40020400

080030e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b092      	sub	sp, #72	@ 0x48
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a83      	ldr	r2, [pc, #524]	@ (800330c <HAL_TIM_Encoder_MspInit+0x22c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d12d      	bne.n	800315e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	633b      	str	r3, [r7, #48]	@ 0x30
 8003106:	4b82      	ldr	r3, [pc, #520]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	4a81      	ldr	r2, [pc, #516]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6453      	str	r3, [r2, #68]	@ 0x44
 8003112:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	633b      	str	r3, [r7, #48]	@ 0x30
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003122:	4b7b      	ldr	r3, [pc, #492]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a7a      	ldr	r2, [pc, #488]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b78      	ldr	r3, [pc, #480]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800313a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003144:	2301      	movs	r3, #1
 8003146:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800314c:	2301      	movs	r3, #1
 800314e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003154:	4619      	mov	r1, r3
 8003156:	486f      	ldr	r0, [pc, #444]	@ (8003314 <HAL_TIM_Encoder_MspInit+0x234>)
 8003158:	f001 f99c 	bl	8004494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800315c:	e0d1      	b.n	8003302 <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003166:	d14b      	bne.n	8003200 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316c:	4b68      	ldr	r3, [pc, #416]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	4a67      	ldr	r2, [pc, #412]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6413      	str	r3, [r2, #64]	@ 0x40
 8003178:	4b65      	ldr	r3, [pc, #404]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	2300      	movs	r3, #0
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
 8003188:	4b61      	ldr	r3, [pc, #388]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	4a60      	ldr	r2, [pc, #384]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6313      	str	r3, [r2, #48]	@ 0x30
 8003194:	4b5e      	ldr	r3, [pc, #376]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a0:	2300      	movs	r3, #0
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	4a59      	ldr	r2, [pc, #356]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b0:	4b57      	ldr	r3, [pc, #348]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031ce:	2301      	movs	r3, #1
 80031d0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031d6:	4619      	mov	r1, r3
 80031d8:	484e      	ldr	r0, [pc, #312]	@ (8003314 <HAL_TIM_Encoder_MspInit+0x234>)
 80031da:	f001 f95b 	bl	8004494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031de:	2308      	movs	r3, #8
 80031e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e6:	2301      	movs	r3, #1
 80031e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031ee:	2301      	movs	r3, #1
 80031f0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031f6:	4619      	mov	r1, r3
 80031f8:	4847      	ldr	r0, [pc, #284]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x238>)
 80031fa:	f001 f94b 	bl	8004494 <HAL_GPIO_Init>
}
 80031fe:	e080      	b.n	8003302 <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM3)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a45      	ldr	r2, [pc, #276]	@ (800331c <HAL_TIM_Encoder_MspInit+0x23c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d14a      	bne.n	80032a0 <HAL_TIM_Encoder_MspInit+0x1c0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	4b40      	ldr	r3, [pc, #256]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	4a3f      	ldr	r2, [pc, #252]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	6413      	str	r3, [r2, #64]	@ 0x40
 800321a:	4b3d      	ldr	r3, [pc, #244]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	4a38      	ldr	r2, [pc, #224]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6313      	str	r3, [r2, #48]	@ 0x30
 8003236:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	4b32      	ldr	r3, [pc, #200]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	4a31      	ldr	r2, [pc, #196]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6313      	str	r3, [r2, #48]	@ 0x30
 8003252:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003266:	2301      	movs	r3, #1
 8003268:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800326e:	2302      	movs	r3, #2
 8003270:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003276:	4619      	mov	r1, r3
 8003278:	4826      	ldr	r0, [pc, #152]	@ (8003314 <HAL_TIM_Encoder_MspInit+0x234>)
 800327a:	f001 f90b 	bl	8004494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800327e:	2310      	movs	r3, #16
 8003280:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003286:	2301      	movs	r3, #1
 8003288:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800328e:	2302      	movs	r3, #2
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003292:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003296:	4619      	mov	r1, r3
 8003298:	481f      	ldr	r0, [pc, #124]	@ (8003318 <HAL_TIM_Encoder_MspInit+0x238>)
 800329a:	f001 f8fb 	bl	8004494 <HAL_GPIO_Init>
}
 800329e:	e030      	b.n	8003302 <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM5)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003320 <HAL_TIM_Encoder_MspInit+0x240>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d12b      	bne.n	8003302 <HAL_TIM_Encoder_MspInit+0x222>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	4b18      	ldr	r3, [pc, #96]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	4a17      	ldr	r2, [pc, #92]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ba:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	4a10      	ldr	r2, [pc, #64]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <HAL_TIM_Encoder_MspInit+0x230>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032e2:	2303      	movs	r3, #3
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ea:	2301      	movs	r3, #1
 80032ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	2300      	movs	r3, #0
 80032f0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032f2:	2302      	movs	r3, #2
 80032f4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032fa:	4619      	mov	r1, r3
 80032fc:	4805      	ldr	r0, [pc, #20]	@ (8003314 <HAL_TIM_Encoder_MspInit+0x234>)
 80032fe:	f001 f8c9 	bl	8004494 <HAL_GPIO_Init>
}
 8003302:	bf00      	nop
 8003304:	3748      	adds	r7, #72	@ 0x48
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40023800 	.word	0x40023800
 8003314:	40020000 	.word	0x40020000
 8003318:	40020400 	.word	0x40020400
 800331c:	40000400 	.word	0x40000400
 8003320:	40000c00 	.word	0x40000c00

08003324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	@ 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a33      	ldr	r2, [pc, #204]	@ (8003400 <HAL_TIM_Base_MspInit+0xdc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	4b32      	ldr	r3, [pc, #200]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	4a31      	ldr	r2, [pc, #196]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	6453      	str	r3, [r2, #68]	@ 0x44
 8003346:	4b2f      	ldr	r3, [pc, #188]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003352:	e04e      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <HAL_TIM_Base_MspInit+0xe4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10e      	bne.n	800337c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	4b28      	ldr	r3, [pc, #160]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	4a27      	ldr	r2, [pc, #156]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 8003368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336c:	6453      	str	r3, [r2, #68]	@ 0x44
 800336e:	4b25      	ldr	r3, [pc, #148]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	69bb      	ldr	r3, [r7, #24]
}
 800337a:	e03a      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM11)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a22      	ldr	r2, [pc, #136]	@ (800340c <HAL_TIM_Base_MspInit+0xe8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	4a1d      	ldr	r2, [pc, #116]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003394:	6453      	str	r3, [r2, #68]	@ 0x44
 8003396:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697b      	ldr	r3, [r7, #20]
}
 80033a2:	e026      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <HAL_TIM_Base_MspInit+0xec>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10e      	bne.n	80033cc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	4a13      	ldr	r2, [pc, #76]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 80033b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033be:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
}
 80033ca:	e012      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM13)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a10      	ldr	r2, [pc, #64]	@ (8003414 <HAL_TIM_Base_MspInit+0xf0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4a09      	ldr	r2, [pc, #36]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 80033e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <HAL_TIM_Base_MspInit+0xe0>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
}
 80033f2:	bf00      	nop
 80033f4:	3724      	adds	r7, #36	@ 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010400 	.word	0x40010400
 8003404:	40023800 	.word	0x40023800
 8003408:	40014400 	.word	0x40014400
 800340c:	40014800 	.word	0x40014800
 8003410:	40001800 	.word	0x40001800
 8003414:	40001c00 	.word	0x40001c00

08003418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	@ 0x30
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a49      	ldr	r2, [pc, #292]	@ (800355c <HAL_TIM_MspPostInit+0x144>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d11f      	bne.n	800347a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	4b48      	ldr	r3, [pc, #288]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	4a47      	ldr	r2, [pc, #284]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6313      	str	r3, [r2, #48]	@ 0x30
 800344a:	4b45      	ldr	r3, [pc, #276]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	69bb      	ldr	r3, [r7, #24]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800345a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003468:	2303      	movs	r3, #3
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346c:	f107 031c 	add.w	r3, r7, #28
 8003470:	4619      	mov	r1, r3
 8003472:	483c      	ldr	r0, [pc, #240]	@ (8003564 <HAL_TIM_MspPostInit+0x14c>)
 8003474:	f001 f80e 	bl	8004494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003478:	e06c      	b.n	8003554 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM11)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a3a      	ldr	r2, [pc, #232]	@ (8003568 <HAL_TIM_MspPostInit+0x150>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d11f      	bne.n	80034c4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	4b35      	ldr	r3, [pc, #212]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	4a34      	ldr	r2, [pc, #208]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	6313      	str	r3, [r2, #48]	@ 0x30
 8003494:	4b32      	ldr	r3, [pc, #200]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80034b2:	2303      	movs	r3, #3
 80034b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b6:	f107 031c 	add.w	r3, r7, #28
 80034ba:	4619      	mov	r1, r3
 80034bc:	4829      	ldr	r0, [pc, #164]	@ (8003564 <HAL_TIM_MspPostInit+0x14c>)
 80034be:	f000 ffe9 	bl	8004494 <HAL_GPIO_Init>
}
 80034c2:	e047      	b.n	8003554 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a28      	ldr	r2, [pc, #160]	@ (800356c <HAL_TIM_MspPostInit+0x154>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d11f      	bne.n	800350e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	4b23      	ldr	r3, [pc, #140]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	4a22      	ldr	r2, [pc, #136]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034de:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80034fc:	2309      	movs	r3, #9
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	4619      	mov	r1, r3
 8003506:	4817      	ldr	r0, [pc, #92]	@ (8003564 <HAL_TIM_MspPostInit+0x14c>)
 8003508:	f000 ffc4 	bl	8004494 <HAL_GPIO_Init>
}
 800350c:	e022      	b.n	8003554 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM13)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <HAL_TIM_MspPostInit+0x158>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d11d      	bne.n	8003554 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4a0f      	ldr	r2, [pc, #60]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6313      	str	r3, [r2, #48]	@ 0x30
 8003528:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <HAL_TIM_MspPostInit+0x148>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003534:	2340      	movs	r3, #64	@ 0x40
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003544:	2309      	movs	r3, #9
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	4619      	mov	r1, r3
 800354e:	4809      	ldr	r0, [pc, #36]	@ (8003574 <HAL_TIM_MspPostInit+0x15c>)
 8003550:	f000 ffa0 	bl	8004494 <HAL_GPIO_Init>
}
 8003554:	bf00      	nop
 8003556:	3730      	adds	r7, #48	@ 0x30
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40014400 	.word	0x40014400
 8003560:	40023800 	.word	0x40023800
 8003564:	40020400 	.word	0x40020400
 8003568:	40014800 	.word	0x40014800
 800356c:	40001800 	.word	0x40001800
 8003570:	40001c00 	.word	0x40001c00
 8003574:	40020000 	.word	0x40020000

08003578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	@ 0x30
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4e      	ldr	r2, [pc, #312]	@ (80036d0 <HAL_UART_MspInit+0x158>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d164      	bne.n	8003664 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a4c      	ldr	r2, [pc, #304]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 80035a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	4b46      	ldr	r3, [pc, #280]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	4a45      	ldr	r2, [pc, #276]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c6:	4b43      	ldr	r3, [pc, #268]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035e4:	2308      	movs	r3, #8
 80035e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e8:	f107 031c 	add.w	r3, r7, #28
 80035ec:	4619      	mov	r1, r3
 80035ee:	483a      	ldr	r0, [pc, #232]	@ (80036d8 <HAL_UART_MspInit+0x160>)
 80035f0:	f000 ff50 	bl	8004494 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80035f4:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035f6:	4a3a      	ldr	r2, [pc, #232]	@ (80036e0 <HAL_UART_MspInit+0x168>)
 80035f8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80035fa:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <HAL_UART_MspInit+0x164>)
 80035fc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003600:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003602:	4b36      	ldr	r3, [pc, #216]	@ (80036dc <HAL_UART_MspInit+0x164>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003608:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_UART_MspInit+0x164>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800360e:	4b33      	ldr	r3, [pc, #204]	@ (80036dc <HAL_UART_MspInit+0x164>)
 8003610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003614:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003616:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_UART_MspInit+0x164>)
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800361c:	4b2f      	ldr	r3, [pc, #188]	@ (80036dc <HAL_UART_MspInit+0x164>)
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003622:	4b2e      	ldr	r3, [pc, #184]	@ (80036dc <HAL_UART_MspInit+0x164>)
 8003624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003628:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800362a:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_UART_MspInit+0x164>)
 800362c:	2200      	movs	r2, #0
 800362e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003630:	4b2a      	ldr	r3, [pc, #168]	@ (80036dc <HAL_UART_MspInit+0x164>)
 8003632:	2200      	movs	r2, #0
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003636:	4829      	ldr	r0, [pc, #164]	@ (80036dc <HAL_UART_MspInit+0x164>)
 8003638:	f000 fb2a 	bl	8003c90 <HAL_DMA_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003642:	f7ff fcd7 	bl	8002ff4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <HAL_UART_MspInit+0x164>)
 800364a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800364c:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <HAL_UART_MspInit+0x164>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	2034      	movs	r0, #52	@ 0x34
 8003658:	f000 fae3 	bl	8003c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800365c:	2034      	movs	r0, #52	@ 0x34
 800365e:	f000 fafc 	bl	8003c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003662:	e030      	b.n	80036c6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <HAL_UART_MspInit+0x16c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d12b      	bne.n	80036c6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 8003678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367c:	6413      	str	r3, [r2, #64]	@ 0x40
 800367e:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	4a10      	ldr	r2, [pc, #64]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6313      	str	r3, [r2, #48]	@ 0x30
 800369a:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_UART_MspInit+0x15c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036a6:	230c      	movs	r3, #12
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b2:	2303      	movs	r3, #3
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036b6:	2307      	movs	r3, #7
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 031c 	add.w	r3, r7, #28
 80036be:	4619      	mov	r1, r3
 80036c0:	4809      	ldr	r0, [pc, #36]	@ (80036e8 <HAL_UART_MspInit+0x170>)
 80036c2:	f000 fee7 	bl	8004494 <HAL_GPIO_Init>
}
 80036c6:	bf00      	nop
 80036c8:	3730      	adds	r7, #48	@ 0x30
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40004c00 	.word	0x40004c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020800 	.word	0x40020800
 80036dc:	2000058c 	.word	0x2000058c
 80036e0:	40026040 	.word	0x40026040
 80036e4:	40004400 	.word	0x40004400
 80036e8:	40020000 	.word	0x40020000

080036ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <NMI_Handler+0x4>

080036f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <MemManage_Handler+0x4>

08003704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <UsageFault_Handler+0x4>

08003714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003742:	f000 f94f 	bl	80039e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003750:	4802      	ldr	r0, [pc, #8]	@ (800375c <DMA1_Stream2_IRQHandler+0x10>)
 8003752:	f000 fc35 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000058c 	.word	0x2000058c

08003760 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003764:	4802      	ldr	r0, [pc, #8]	@ (8003770 <UART4_IRQHandler+0x10>)
 8003766:	f003 ff55 	bl	8007614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200004fc 	.word	0x200004fc

08003774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return 1;
 8003778:	2301      	movs	r3, #1
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_kill>:

int _kill(int pid, int sig)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800378e:	f006 f911 	bl	80099b4 <__errno>
 8003792:	4603      	mov	r3, r0
 8003794:	2216      	movs	r2, #22
 8003796:	601a      	str	r2, [r3, #0]
  return -1;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_exit>:

void _exit (int status)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ffe7 	bl	8003784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037b6:	bf00      	nop
 80037b8:	e7fd      	b.n	80037b6 <_exit+0x12>

080037ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e00a      	b.n	80037e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037cc:	f3af 8000 	nop.w
 80037d0:	4601      	mov	r1, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	60ba      	str	r2, [r7, #8]
 80037d8:	b2ca      	uxtb	r2, r1
 80037da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	3301      	adds	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	dbf0      	blt.n	80037cc <_read+0x12>
  }

  return len;
 80037ea:	687b      	ldr	r3, [r7, #4]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800381c:	605a      	str	r2, [r3, #4]
  return 0;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <_isatty>:

int _isatty(int file)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003834:	2301      	movs	r3, #1
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003864:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <_sbrk+0x5c>)
 8003866:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <_sbrk+0x60>)
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003870:	4b13      	ldr	r3, [pc, #76]	@ (80038c0 <_sbrk+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003878:	4b11      	ldr	r3, [pc, #68]	@ (80038c0 <_sbrk+0x64>)
 800387a:	4a12      	ldr	r2, [pc, #72]	@ (80038c4 <_sbrk+0x68>)
 800387c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800387e:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	429a      	cmp	r2, r3
 800388a:	d207      	bcs.n	800389c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800388c:	f006 f892 	bl	80099b4 <__errno>
 8003890:	4603      	mov	r3, r0
 8003892:	220c      	movs	r2, #12
 8003894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	e009      	b.n	80038b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <_sbrk+0x64>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038a2:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <_sbrk+0x64>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	4a05      	ldr	r2, [pc, #20]	@ (80038c0 <_sbrk+0x64>)
 80038ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ae:	68fb      	ldr	r3, [r7, #12]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20020000 	.word	0x20020000
 80038bc:	00000400 	.word	0x00000400
 80038c0:	2000068c 	.word	0x2000068c
 80038c4:	200007e0 	.word	0x200007e0

080038c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <SystemInit+0x20>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d2:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <SystemInit+0x20>)
 80038d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003924 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80038f0:	f7ff ffea 	bl	80038c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038f4:	480c      	ldr	r0, [pc, #48]	@ (8003928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038f6:	490d      	ldr	r1, [pc, #52]	@ (800392c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038fc:	e002      	b.n	8003904 <LoopCopyDataInit>

080038fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003902:	3304      	adds	r3, #4

08003904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003908:	d3f9      	bcc.n	80038fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800390c:	4c0a      	ldr	r4, [pc, #40]	@ (8003938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003910:	e001      	b.n	8003916 <LoopFillZerobss>

08003912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003914:	3204      	adds	r2, #4

08003916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003918:	d3fb      	bcc.n	8003912 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800391a:	f006 f851 	bl	80099c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391e:	f7fe f853 	bl	80019c8 <main>
  bx  lr    
 8003922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800392c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003930:	0800dbc8 	.word	0x0800dbc8
  ldr r2, =_sbss
 8003934:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003938:	200007e0 	.word	0x200007e0

0800393c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800393c:	e7fe      	b.n	800393c <ADC_IRQHandler>
	...

08003940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003944:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <HAL_Init+0x40>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0d      	ldr	r2, [pc, #52]	@ (8003980 <HAL_Init+0x40>)
 800394a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_Init+0x40>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <HAL_Init+0x40>)
 8003956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800395a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800395c:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <HAL_Init+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <HAL_Init+0x40>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003968:	2003      	movs	r0, #3
 800396a:	f000 f94f 	bl	8003c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800396e:	2000      	movs	r0, #0
 8003970:	f000 f808 	bl	8003984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003974:	f7ff fb44 	bl	8003000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00

08003984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <HAL_InitTick+0x54>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b12      	ldr	r3, [pc, #72]	@ (80039dc <HAL_InitTick+0x58>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800399a:	fbb3 f3f1 	udiv	r3, r3, r1
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f967 	bl	8003c76 <HAL_SYSTICK_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00e      	b.n	80039d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d80a      	bhi.n	80039ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039b8:	2200      	movs	r2, #0
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	f000 f92f 	bl	8003c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039c4:	4a06      	ldr	r2, [pc, #24]	@ (80039e0 <HAL_InitTick+0x5c>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	e000      	b.n	80039d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	2000002c 	.word	0x2000002c
 80039dc:	20000034 	.word	0x20000034
 80039e0:	20000030 	.word	0x20000030

080039e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_IncTick+0x20>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <HAL_IncTick+0x24>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	@ (8003a08 <HAL_IncTick+0x24>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000034 	.word	0x20000034
 8003a08:	20000690 	.word	0x20000690

08003a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b03      	ldr	r3, [pc, #12]	@ (8003a20 <HAL_GetTick+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000690 	.word	0x20000690

08003a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff ffee 	bl	8003a0c <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d005      	beq.n	8003a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <HAL_Delay+0x44>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a4a:	bf00      	nop
 8003a4c:	f7ff ffde 	bl	8003a0c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d8f7      	bhi.n	8003a4c <HAL_Delay+0x28>
  {
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000034 	.word	0x20000034

08003a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9e:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	60d3      	str	r3, [r2, #12]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <__NVIC_GetPriorityGrouping+0x18>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	f003 0307 	and.w	r3, r3, #7
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	db0b      	blt.n	8003afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	f003 021f 	and.w	r2, r3, #31
 8003ae8:	4907      	ldr	r1, [pc, #28]	@ (8003b08 <__NVIC_EnableIRQ+0x38>)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2001      	movs	r0, #1
 8003af2:	fa00 f202 	lsl.w	r2, r0, r2
 8003af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000e100 	.word	0xe000e100

08003b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	6039      	str	r1, [r7, #0]
 8003b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	db0a      	blt.n	8003b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	490c      	ldr	r1, [pc, #48]	@ (8003b58 <__NVIC_SetPriority+0x4c>)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	0112      	lsls	r2, r2, #4
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b34:	e00a      	b.n	8003b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	4908      	ldr	r1, [pc, #32]	@ (8003b5c <__NVIC_SetPriority+0x50>)
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	3b04      	subs	r3, #4
 8003b44:	0112      	lsls	r2, r2, #4
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	440b      	add	r3, r1
 8003b4a:	761a      	strb	r2, [r3, #24]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000e100 	.word	0xe000e100
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	@ 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f1c3 0307 	rsb	r3, r3, #7
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	bf28      	it	cs
 8003b7e:	2304      	movcs	r3, #4
 8003b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3304      	adds	r3, #4
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d902      	bls.n	8003b90 <NVIC_EncodePriority+0x30>
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	3b03      	subs	r3, #3
 8003b8e:	e000      	b.n	8003b92 <NVIC_EncodePriority+0x32>
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	43d9      	mvns	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb8:	4313      	orrs	r3, r2
         );
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3724      	adds	r7, #36	@ 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd8:	d301      	bcc.n	8003bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e00f      	b.n	8003bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bde:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <SysTick_Config+0x40>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003be6:	210f      	movs	r1, #15
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	f7ff ff8e 	bl	8003b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <SysTick_Config+0x40>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bf6:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <SysTick_Config+0x40>)
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	e000e010 	.word	0xe000e010

08003c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff29 	bl	8003a6c <__NVIC_SetPriorityGrouping>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c34:	f7ff ff3e 	bl	8003ab4 <__NVIC_GetPriorityGrouping>
 8003c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f7ff ff8e 	bl	8003b60 <NVIC_EncodePriority>
 8003c44:	4602      	mov	r2, r0
 8003c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff5d 	bl	8003b0c <__NVIC_SetPriority>
}
 8003c52:	bf00      	nop
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff31 	bl	8003ad0 <__NVIC_EnableIRQ>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ffa2 	bl	8003bc8 <SysTick_Config>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c9c:	f7ff feb6 	bl	8003a0c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e099      	b.n	8003de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ccc:	e00f      	b.n	8003cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cce:	f7ff fe9d 	bl	8003a0c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d908      	bls.n	8003cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e078      	b.n	8003de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e8      	bne.n	8003cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_DMA_Init+0x158>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d107      	bne.n	8003d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	4313      	orrs	r3, r2
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d117      	bne.n	8003db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb01 	bl	800439c <DMA_CheckFifoParam>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2240      	movs	r2, #64	@ 0x40
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003dae:	2301      	movs	r3, #1
 8003db0:	e016      	b.n	8003de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fab8 	bl	8004330 <DMA_CalcBaseAndBitshift>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc8:	223f      	movs	r2, #63	@ 0x3f
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	f010803f 	.word	0xf010803f

08003dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_DMA_Start_IT+0x26>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e040      	b.n	8003e94 <HAL_DMA_Start_IT+0xa8>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d12f      	bne.n	8003e86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fa4a 	bl	80042d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e44:	223f      	movs	r2, #63	@ 0x3f
 8003e46:	409a      	lsls	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0216 	orr.w	r2, r2, #22
 8003e5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e005      	b.n	8003e92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003eaa:	f7ff fdaf 	bl	8003a0c <HAL_GetTick>
 8003eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d008      	beq.n	8003ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2280      	movs	r2, #128	@ 0x80
 8003ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e052      	b.n	8003f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0216 	bic.w	r2, r2, #22
 8003edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_DMA_Abort+0x62>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0208 	bic.w	r2, r2, #8
 8003f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1e:	e013      	b.n	8003f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f20:	f7ff fd74 	bl	8003a0c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d90c      	bls.n	8003f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2203      	movs	r2, #3
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e015      	b.n	8003f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e4      	bne.n	8003f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5a:	223f      	movs	r2, #63	@ 0x3f
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2280      	movs	r2, #128	@ 0x80
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00c      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fcc:	4b8e      	ldr	r3, [pc, #568]	@ (8004208 <HAL_DMA_IRQHandler+0x248>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a8e      	ldr	r2, [pc, #568]	@ (800420c <HAL_DMA_IRQHandler+0x24c>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fea:	2208      	movs	r2, #8
 8003fec:	409a      	lsls	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01a      	beq.n	800402c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0204 	bic.w	r2, r2, #4
 8004012:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	2208      	movs	r2, #8
 800401a:	409a      	lsls	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004030:	2201      	movs	r2, #1
 8004032:	409a      	lsls	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	2201      	movs	r2, #1
 8004050:	409a      	lsls	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	f043 0202 	orr.w	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004066:	2204      	movs	r2, #4
 8004068:	409a      	lsls	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d012      	beq.n	8004098 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	2204      	movs	r2, #4
 8004086:	409a      	lsls	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409c:	2210      	movs	r2, #16
 800409e:	409a      	lsls	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d043      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03c      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	2210      	movs	r2, #16
 80040bc:	409a      	lsls	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d018      	beq.n	8004102 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d024      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
 80040ee:	e01f      	b.n	8004130 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4798      	blx	r3
 8004100:	e016      	b.n	8004130 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0208 	bic.w	r2, r2, #8
 800411e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	2220      	movs	r2, #32
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 808f 	beq.w	8004260 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8087 	beq.w	8004260 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	2220      	movs	r2, #32
 8004158:	409a      	lsls	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b05      	cmp	r3, #5
 8004168:	d136      	bne.n	80041d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0216 	bic.w	r2, r2, #22
 8004178:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004188:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_DMA_IRQHandler+0x1da>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0208 	bic.w	r2, r2, #8
 80041a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	223f      	movs	r2, #63	@ 0x3f
 80041b0:	409a      	lsls	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d07e      	beq.n	80042cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
        }
        return;
 80041d6:	e079      	b.n	80042cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d031      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
 8004204:	e02c      	b.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
 8004206:	bf00      	nop
 8004208:	2000002c 	.word	0x2000002c
 800420c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d023      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
 8004220:	e01e      	b.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0210 	bic.w	r2, r2, #16
 800423e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004264:	2b00      	cmp	r3, #0
 8004266:	d032      	beq.n	80042ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d022      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2205      	movs	r2, #5
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	3301      	adds	r3, #1
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	429a      	cmp	r2, r3
 8004296:	d307      	bcc.n	80042a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f2      	bne.n	800428c <HAL_DMA_IRQHandler+0x2cc>
 80042a6:	e000      	b.n	80042aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e000      	b.n	80042ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80042cc:	bf00      	nop
    }
  }
}
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b40      	cmp	r3, #64	@ 0x40
 8004300:	d108      	bne.n	8004314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004312:	e007      	b.n	8004324 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	3b10      	subs	r3, #16
 8004340:	4a14      	ldr	r2, [pc, #80]	@ (8004394 <DMA_CalcBaseAndBitshift+0x64>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800434a:	4a13      	ldr	r2, [pc, #76]	@ (8004398 <DMA_CalcBaseAndBitshift+0x68>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d909      	bls.n	8004372 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004370:	e007      	b.n	8004382 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	aaaaaaab 	.word	0xaaaaaaab
 8004398:	0800d714 	.word	0x0800d714

0800439c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11f      	bne.n	80043f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d856      	bhi.n	800446a <DMA_CheckFifoParam+0xce>
 80043bc:	a201      	add	r2, pc, #4	@ (adr r2, 80043c4 <DMA_CheckFifoParam+0x28>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e7 	.word	0x080043e7
 80043cc:	080043d5 	.word	0x080043d5
 80043d0:	0800446b 	.word	0x0800446b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d046      	beq.n	800446e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e4:	e043      	b.n	800446e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043ee:	d140      	bne.n	8004472 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f4:	e03d      	b.n	8004472 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fe:	d121      	bne.n	8004444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d837      	bhi.n	8004476 <DMA_CheckFifoParam+0xda>
 8004406:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <DMA_CheckFifoParam+0x70>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	0800441d 	.word	0x0800441d
 8004410:	08004423 	.word	0x08004423
 8004414:	0800441d 	.word	0x0800441d
 8004418:	08004435 	.word	0x08004435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e030      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d025      	beq.n	800447a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004432:	e022      	b.n	800447a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800443c:	d11f      	bne.n	800447e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004442:	e01c      	b.n	800447e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d903      	bls.n	8004452 <DMA_CheckFifoParam+0xb6>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d003      	beq.n	8004458 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004450:	e018      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
      break;
 8004456:	e015      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e00b      	b.n	8004482 <DMA_CheckFifoParam+0xe6>
      break;
 800446a:	bf00      	nop
 800446c:	e00a      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 800446e:	bf00      	nop
 8004470:	e008      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 8004472:	bf00      	nop
 8004474:	e006      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 8004476:	bf00      	nop
 8004478:	e004      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;   
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <DMA_CheckFifoParam+0xe8>
      break;
 8004482:	bf00      	nop
    }
  } 
  
  return status; 
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop

08004494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	@ 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e165      	b.n	800477c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b0:	2201      	movs	r2, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	f040 8154 	bne.w	8004776 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d005      	beq.n	80044e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d130      	bne.n	8004548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800451c:	2201      	movs	r2, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 0201 	and.w	r2, r3, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d017      	beq.n	8004584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	2203      	movs	r2, #3
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d123      	bne.n	80045d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	08da      	lsrs	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3208      	adds	r2, #8
 8004598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	220f      	movs	r2, #15
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	08da      	lsrs	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3208      	adds	r2, #8
 80045d2:	69b9      	ldr	r1, [r7, #24]
 80045d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	2203      	movs	r2, #3
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0203 	and.w	r2, r3, #3
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80ae 	beq.w	8004776 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	4b5d      	ldr	r3, [pc, #372]	@ (8004794 <HAL_GPIO_Init+0x300>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	4a5c      	ldr	r2, [pc, #368]	@ (8004794 <HAL_GPIO_Init+0x300>)
 8004624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004628:	6453      	str	r3, [r2, #68]	@ 0x44
 800462a:	4b5a      	ldr	r3, [pc, #360]	@ (8004794 <HAL_GPIO_Init+0x300>)
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004636:	4a58      	ldr	r2, [pc, #352]	@ (8004798 <HAL_GPIO_Init+0x304>)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	3302      	adds	r3, #2
 800463e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4013      	ands	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4f      	ldr	r2, [pc, #316]	@ (800479c <HAL_GPIO_Init+0x308>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d025      	beq.n	80046ae <HAL_GPIO_Init+0x21a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4e      	ldr	r2, [pc, #312]	@ (80047a0 <HAL_GPIO_Init+0x30c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01f      	beq.n	80046aa <HAL_GPIO_Init+0x216>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4d      	ldr	r2, [pc, #308]	@ (80047a4 <HAL_GPIO_Init+0x310>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x212>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4c      	ldr	r2, [pc, #304]	@ (80047a8 <HAL_GPIO_Init+0x314>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x20e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4b      	ldr	r2, [pc, #300]	@ (80047ac <HAL_GPIO_Init+0x318>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00d      	beq.n	800469e <HAL_GPIO_Init+0x20a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4a      	ldr	r2, [pc, #296]	@ (80047b0 <HAL_GPIO_Init+0x31c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x206>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a49      	ldr	r2, [pc, #292]	@ (80047b4 <HAL_GPIO_Init+0x320>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_GPIO_Init+0x202>
 8004692:	2306      	movs	r3, #6
 8004694:	e00c      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 8004696:	2307      	movs	r3, #7
 8004698:	e00a      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 800469a:	2305      	movs	r3, #5
 800469c:	e008      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 800469e:	2304      	movs	r3, #4
 80046a0:	e006      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046a2:	2303      	movs	r3, #3
 80046a4:	e004      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e002      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_GPIO_Init+0x21c>
 80046ae:	2300      	movs	r3, #0
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	f002 0203 	and.w	r2, r2, #3
 80046b6:	0092      	lsls	r2, r2, #2
 80046b8:	4093      	lsls	r3, r2
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c0:	4935      	ldr	r1, [pc, #212]	@ (8004798 <HAL_GPIO_Init+0x304>)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	3302      	adds	r3, #2
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ce:	4b3a      	ldr	r3, [pc, #232]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046f2:	4a31      	ldr	r2, [pc, #196]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f8:	4b2f      	ldr	r3, [pc, #188]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800471c:	4a26      	ldr	r2, [pc, #152]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004722:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004746:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800474c:	4b1a      	ldr	r3, [pc, #104]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004770:	4a11      	ldr	r2, [pc, #68]	@ (80047b8 <HAL_GPIO_Init+0x324>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b0f      	cmp	r3, #15
 8004780:	f67f ae96 	bls.w	80044b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3724      	adds	r7, #36	@ 0x24
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40013800 	.word	0x40013800
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020400 	.word	0x40020400
 80047a4:	40020800 	.word	0x40020800
 80047a8:	40020c00 	.word	0x40020c00
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40021400 	.word	0x40021400
 80047b4:	40021800 	.word	0x40021800
 80047b8:	40013c00 	.word	0x40013c00

080047bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
 80047c8:	4613      	mov	r3, r2
 80047ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047cc:	787b      	ldrb	r3, [r7, #1]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047d8:	e003      	b.n	80047e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047da:	887b      	ldrh	r3, [r7, #2]
 80047dc:	041a      	lsls	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	619a      	str	r2, [r3, #24]
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e12b      	b.n	8004a5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fe fc1a 	bl	8003050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	@ 0x24
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004842:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004852:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004854:	f001 f922 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 8004858:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4a81      	ldr	r2, [pc, #516]	@ (8004a64 <HAL_I2C_Init+0x274>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d807      	bhi.n	8004874 <HAL_I2C_Init+0x84>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a80      	ldr	r2, [pc, #512]	@ (8004a68 <HAL_I2C_Init+0x278>)
 8004868:	4293      	cmp	r3, r2
 800486a:	bf94      	ite	ls
 800486c:	2301      	movls	r3, #1
 800486e:	2300      	movhi	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e006      	b.n	8004882 <HAL_I2C_Init+0x92>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a7d      	ldr	r2, [pc, #500]	@ (8004a6c <HAL_I2C_Init+0x27c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	bf94      	ite	ls
 800487c:	2301      	movls	r3, #1
 800487e:	2300      	movhi	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0e7      	b.n	8004a5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a78      	ldr	r2, [pc, #480]	@ (8004a70 <HAL_I2C_Init+0x280>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	0c9b      	lsrs	r3, r3, #18
 8004894:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004a64 <HAL_I2C_Init+0x274>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d802      	bhi.n	80048c4 <HAL_I2C_Init+0xd4>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3301      	adds	r3, #1
 80048c2:	e009      	b.n	80048d8 <HAL_I2C_Init+0xe8>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	4a69      	ldr	r2, [pc, #420]	@ (8004a74 <HAL_I2C_Init+0x284>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	3301      	adds	r3, #1
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	495c      	ldr	r1, [pc, #368]	@ (8004a64 <HAL_I2C_Init+0x274>)
 80048f4:	428b      	cmp	r3, r1
 80048f6:	d819      	bhi.n	800492c <HAL_I2C_Init+0x13c>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e59      	subs	r1, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	fbb1 f3f3 	udiv	r3, r1, r3
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800490c:	400b      	ands	r3, r1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_I2C_Init+0x138>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1e59      	subs	r1, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004920:	3301      	adds	r3, #1
 8004922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004926:	e051      	b.n	80049cc <HAL_I2C_Init+0x1dc>
 8004928:	2304      	movs	r3, #4
 800492a:	e04f      	b.n	80049cc <HAL_I2C_Init+0x1dc>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d111      	bne.n	8004958 <HAL_I2C_Init+0x168>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e58      	subs	r0, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	440b      	add	r3, r1
 8004942:	fbb0 f3f3 	udiv	r3, r0, r3
 8004946:	3301      	adds	r3, #1
 8004948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e012      	b.n	800497e <HAL_I2C_Init+0x18e>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1e58      	subs	r0, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6859      	ldr	r1, [r3, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	0099      	lsls	r1, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	fbb0 f3f3 	udiv	r3, r0, r3
 800496e:	3301      	adds	r3, #1
 8004970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_I2C_Init+0x196>
 8004982:	2301      	movs	r3, #1
 8004984:	e022      	b.n	80049cc <HAL_I2C_Init+0x1dc>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10e      	bne.n	80049ac <HAL_I2C_Init+0x1bc>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1e58      	subs	r0, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6859      	ldr	r1, [r3, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	440b      	add	r3, r1
 800499c:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049aa:	e00f      	b.n	80049cc <HAL_I2C_Init+0x1dc>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1e58      	subs	r0, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	0099      	lsls	r1, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	6809      	ldr	r1, [r1, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6911      	ldr	r1, [r2, #16]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68d2      	ldr	r2, [r2, #12]
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	000186a0 	.word	0x000186a0
 8004a68:	001e847f 	.word	0x001e847f
 8004a6c:	003d08ff 	.word	0x003d08ff
 8004a70:	431bde83 	.word	0x431bde83
 8004a74:	10624dd3 	.word	0x10624dd3

08004a78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	461a      	mov	r2, r3
 8004a84:	460b      	mov	r3, r1
 8004a86:	817b      	strh	r3, [r7, #10]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a8c:	f7fe ffbe 	bl	8003a0c <HAL_GetTick>
 8004a90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	f040 80e0 	bne.w	8004c60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2319      	movs	r3, #25
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4970      	ldr	r1, [pc, #448]	@ (8004c6c <HAL_I2C_Master_Transmit+0x1f4>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fc7e 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0d3      	b.n	8004c62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_I2C_Master_Transmit+0x50>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0cc      	b.n	8004c62 <HAL_I2C_Master_Transmit+0x1ea>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d007      	beq.n	8004aee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004afc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2221      	movs	r2, #33	@ 0x21
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2210      	movs	r2, #16
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	893a      	ldrh	r2, [r7, #8]
 8004b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a50      	ldr	r2, [pc, #320]	@ (8004c70 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b30:	8979      	ldrh	r1, [r7, #10]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6a3a      	ldr	r2, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fae8 	bl	800510c <I2C_MasterRequestWrite>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e08d      	b.n	8004c62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b5c:	e066      	b.n	8004c2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	6a39      	ldr	r1, [r7, #32]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fd3c 	bl	80055e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00d      	beq.n	8004b8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d107      	bne.n	8004b86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e06b      	b.n	8004c62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d11b      	bne.n	8004c00 <HAL_I2C_Master_Transmit+0x188>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d017      	beq.n	8004c00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	6a39      	ldr	r1, [r7, #32]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fd33 	bl	8005670 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d107      	bne.n	8004c28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e01a      	b.n	8004c62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d194      	bne.n	8004b5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	00100002 	.word	0x00100002
 8004c70:	ffff0000 	.word	0xffff0000

08004c74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08c      	sub	sp, #48	@ 0x30
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	460b      	mov	r3, r1
 8004c82:	817b      	strh	r3, [r7, #10]
 8004c84:	4613      	mov	r3, r2
 8004c86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c88:	f7fe fec0 	bl	8003a0c <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	f040 8217 	bne.w	80050ca <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	2319      	movs	r3, #25
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	497c      	ldr	r1, [pc, #496]	@ (8004e98 <HAL_I2C_Master_Receive+0x224>)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fb80 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e20a      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_I2C_Master_Receive+0x50>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e203      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d007      	beq.n	8004cea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2222      	movs	r2, #34	@ 0x22
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2210      	movs	r2, #16
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	893a      	ldrh	r2, [r7, #8]
 8004d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a5c      	ldr	r2, [pc, #368]	@ (8004e9c <HAL_I2C_Master_Receive+0x228>)
 8004d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d2c:	8979      	ldrh	r1, [r7, #10]
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 fa6c 	bl	8005210 <I2C_MasterRequestRead>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e1c4      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d113      	bne.n	8004d72 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e198      	b.n	80050a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d11b      	bne.n	8004db2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e178      	b.n	80050a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d11b      	bne.n	8004df2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	e158      	b.n	80050a4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e18:	e144      	b.n	80050a4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	f200 80f1 	bhi.w	8005006 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d123      	bne.n	8004e74 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fc65 	bl	8005700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e145      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e72:	e117      	b.n	80050a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d14e      	bne.n	8004f1a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	2200      	movs	r2, #0
 8004e84:	4906      	ldr	r1, [pc, #24]	@ (8004ea0 <HAL_I2C_Master_Receive+0x22c>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fa90 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e11a      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
 8004e96:	bf00      	nop
 8004e98:	00100002 	.word	0x00100002
 8004e9c:	ffff0000 	.word	0xffff0000
 8004ea0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f18:	e0c4      	b.n	80050a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	2200      	movs	r2, #0
 8004f22:	496c      	ldr	r1, [pc, #432]	@ (80050d4 <HAL_I2C_Master_Receive+0x460>)
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fa41 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0cb      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4955      	ldr	r1, [pc, #340]	@ (80050d4 <HAL_I2C_Master_Receive+0x460>)
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fa13 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e09d      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005004:	e04e      	b.n	80050a4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005008:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fb78 	bl	8005700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e058      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d124      	bne.n	80050a4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505e:	2b03      	cmp	r3, #3
 8005060:	d107      	bne.n	8005072 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005070:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f aeb6 	bne.w	8004e1a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3728      	adds	r7, #40	@ 0x28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	00010004 	.word	0x00010004

080050d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e6:	b2db      	uxtb	r3, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	460b      	mov	r3, r1
 800511a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d006      	beq.n	8005136 <I2C_MasterRequestWrite+0x2a>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d003      	beq.n	8005136 <I2C_MasterRequestWrite+0x2a>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005134:	d108      	bne.n	8005148 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e00b      	b.n	8005160 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514c:	2b12      	cmp	r3, #18
 800514e:	d107      	bne.n	8005160 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800515e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f91d 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00d      	beq.n	8005194 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005186:	d103      	bne.n	8005190 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e035      	b.n	8005200 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800519c:	d108      	bne.n	80051b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051ac:	611a      	str	r2, [r3, #16]
 80051ae:	e01b      	b.n	80051e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051b0:	897b      	ldrh	r3, [r7, #10]
 80051b2:	11db      	asrs	r3, r3, #7
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f003 0306 	and.w	r3, r3, #6
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f063 030f 	orn	r3, r3, #15
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	490e      	ldr	r1, [pc, #56]	@ (8005208 <I2C_MasterRequestWrite+0xfc>)
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f966 	bl	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e010      	b.n	8005200 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4907      	ldr	r1, [pc, #28]	@ (800520c <I2C_MasterRequestWrite+0x100>)
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f956 	bl	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	00010008 	.word	0x00010008
 800520c:	00010002 	.word	0x00010002

08005210 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	460b      	mov	r3, r1
 800521e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005234:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d006      	beq.n	800524a <I2C_MasterRequestRead+0x3a>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d003      	beq.n	800524a <I2C_MasterRequestRead+0x3a>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005248:	d108      	bne.n	800525c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e00b      	b.n	8005274 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	2b11      	cmp	r3, #17
 8005262:	d107      	bne.n	8005274 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f893 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800529a:	d103      	bne.n	80052a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e079      	b.n	800539c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052b0:	d108      	bne.n	80052c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052b2:	897b      	ldrh	r3, [r7, #10]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	611a      	str	r2, [r3, #16]
 80052c2:	e05f      	b.n	8005384 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052c4:	897b      	ldrh	r3, [r7, #10]
 80052c6:	11db      	asrs	r3, r3, #7
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0306 	and.w	r3, r3, #6
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f063 030f 	orn	r3, r3, #15
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4930      	ldr	r1, [pc, #192]	@ (80053a4 <I2C_MasterRequestRead+0x194>)
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f8dc 	bl	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e054      	b.n	800539c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4929      	ldr	r1, [pc, #164]	@ (80053a8 <I2C_MasterRequestRead+0x198>)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f8cc 	bl	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e044      	b.n	800539c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005336:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f831 	bl	80053ac <I2C_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800535e:	d103      	bne.n	8005368 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005366:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e017      	b.n	800539c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800536c:	897b      	ldrh	r3, [r7, #10]
 800536e:	11db      	asrs	r3, r3, #7
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0306 	and.w	r3, r3, #6
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f063 030e 	orn	r3, r3, #14
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	4907      	ldr	r1, [pc, #28]	@ (80053a8 <I2C_MasterRequestRead+0x198>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f888 	bl	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	00010008 	.word	0x00010008
 80053a8:	00010002 	.word	0x00010002

080053ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053bc:	e048      	b.n	8005450 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d044      	beq.n	8005450 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7fe fb21 	bl	8003a0c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d302      	bcc.n	80053dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d139      	bne.n	8005450 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10d      	bne.n	8005402 <I2C_WaitOnFlagUntilTimeout+0x56>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	43da      	mvns	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	e00c      	b.n	800541c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	43da      	mvns	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	429a      	cmp	r2, r3
 8005420:	d116      	bne.n	8005450 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e023      	b.n	8005498 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10d      	bne.n	8005476 <I2C_WaitOnFlagUntilTimeout+0xca>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	43da      	mvns	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	e00c      	b.n	8005490 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	43da      	mvns	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	429a      	cmp	r2, r3
 8005494:	d093      	beq.n	80053be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054ae:	e071      	b.n	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054be:	d123      	bne.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	f043 0204 	orr.w	r2, r3, #4
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e067      	b.n	80055d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d041      	beq.n	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005510:	f7fe fa7c 	bl	8003a0c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d136      	bne.n	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10c      	bne.n	800554a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	43da      	mvns	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e00b      	b.n	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	43da      	mvns	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d016      	beq.n	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e021      	b.n	80055d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d10c      	bne.n	80055b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	43da      	mvns	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bf14      	ite	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	2300      	moveq	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e00b      	b.n	80055d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	43da      	mvns	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f47f af6d 	bne.w	80054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ec:	e034      	b.n	8005658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f8e3 	bl	80057ba <I2C_IsAcknowledgeFailed>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e034      	b.n	8005668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d028      	beq.n	8005658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fe fa01 	bl	8003a0c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11d      	bne.n	8005658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005626:	2b80      	cmp	r3, #128	@ 0x80
 8005628:	d016      	beq.n	8005658 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e007      	b.n	8005668 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005662:	2b80      	cmp	r3, #128	@ 0x80
 8005664:	d1c3      	bne.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800567c:	e034      	b.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f89b 	bl	80057ba <I2C_IsAcknowledgeFailed>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e034      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d028      	beq.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005696:	f7fe f9b9 	bl	8003a0c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d302      	bcc.n	80056ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11d      	bne.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d016      	beq.n	80056e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e007      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d1c3      	bne.n	800567e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800570c:	e049      	b.n	80057a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b10      	cmp	r3, #16
 800571a:	d119      	bne.n	8005750 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0210 	mvn.w	r2, #16
 8005724:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e030      	b.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005750:	f7fe f95c 	bl	8003a0c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	429a      	cmp	r2, r3
 800575e:	d302      	bcc.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d11d      	bne.n	80057a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005770:	2b40      	cmp	r3, #64	@ 0x40
 8005772:	d016      	beq.n	80057a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e007      	b.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ac:	2b40      	cmp	r3, #64	@ 0x40
 80057ae:	d1ae      	bne.n	800570e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d0:	d11b      	bne.n	800580a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4b20      	ldr	r3, [pc, #128]	@ (80058a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	4a1f      	ldr	r2, [pc, #124]	@ (80058a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800582c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005830:	6413      	str	r3, [r2, #64]	@ 0x40
 8005832:	4b1d      	ldr	r3, [pc, #116]	@ (80058a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800583e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <HAL_PWREx_EnableOverDrive+0x94>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005844:	f7fe f8e2 	bl	8003a0c <HAL_GetTick>
 8005848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800584a:	e009      	b.n	8005860 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800584c:	f7fe f8de 	bl	8003a0c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800585a:	d901      	bls.n	8005860 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e01f      	b.n	80058a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005860:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586c:	d1ee      	bne.n	800584c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800586e:	4b11      	ldr	r3, [pc, #68]	@ (80058b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005874:	f7fe f8ca 	bl	8003a0c <HAL_GetTick>
 8005878:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800587a:	e009      	b.n	8005890 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800587c:	f7fe f8c6 	bl	8003a0c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800588a:	d901      	bls.n	8005890 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e007      	b.n	80058a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800589c:	d1ee      	bne.n	800587c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40023800 	.word	0x40023800
 80058ac:	420e0040 	.word	0x420e0040
 80058b0:	40007000 	.word	0x40007000
 80058b4:	420e0044 	.word	0x420e0044

080058b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0cc      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058cc:	4b68      	ldr	r3, [pc, #416]	@ (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d90c      	bls.n	80058f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b65      	ldr	r3, [pc, #404]	@ (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b63      	ldr	r3, [pc, #396]	@ (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0b8      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d020      	beq.n	8005942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800590c:	4b59      	ldr	r3, [pc, #356]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	4a58      	ldr	r2, [pc, #352]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005916:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005924:	4b53      	ldr	r3, [pc, #332]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4a52      	ldr	r2, [pc, #328]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800592e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005930:	4b50      	ldr	r3, [pc, #320]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	494d      	ldr	r1, [pc, #308]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d044      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005956:	4b47      	ldr	r3, [pc, #284]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d119      	bne.n	8005996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e07f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d003      	beq.n	8005976 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005972:	2b03      	cmp	r3, #3
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005976:	4b3f      	ldr	r3, [pc, #252]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e06f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005986:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e067      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005996:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 0203 	bic.w	r2, r3, #3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4934      	ldr	r1, [pc, #208]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059a8:	f7fe f830 	bl	8003a0c <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b0:	f7fe f82c 	bl	8003a0c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e04f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 020c 	and.w	r2, r3, #12
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d1eb      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059d8:	4b25      	ldr	r3, [pc, #148]	@ (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d20c      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b22      	ldr	r3, [pc, #136]	@ (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b20      	ldr	r3, [pc, #128]	@ (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e032      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a0c:	4b19      	ldr	r3, [pc, #100]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4916      	ldr	r1, [pc, #88]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	490e      	ldr	r1, [pc, #56]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a3e:	f000 f855 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005a42:	4602      	mov	r2, r0
 8005a44:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	490a      	ldr	r1, [pc, #40]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c0>)
 8005a50:	5ccb      	ldrb	r3, [r1, r3]
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	4a09      	ldr	r2, [pc, #36]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a5a:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fd ff90 	bl	8003984 <HAL_InitTick>

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40023c00 	.word	0x40023c00
 8005a74:	40023800 	.word	0x40023800
 8005a78:	0800d6fc 	.word	0x0800d6fc
 8005a7c:	2000002c 	.word	0x2000002c
 8005a80:	20000030 	.word	0x20000030

08005a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a88:	4b03      	ldr	r3, [pc, #12]	@ (8005a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	2000002c 	.word	0x2000002c

08005a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005aa0:	f7ff fff0 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	0a9b      	lsrs	r3, r3, #10
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4903      	ldr	r1, [pc, #12]	@ (8005ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	0800d70c 	.word	0x0800d70c

08005ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ac8:	f7ff ffdc 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0b5b      	lsrs	r3, r3, #13
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	@ (8005ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	0800d70c 	.word	0x0800d70c

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b0ae      	sub	sp, #184	@ 0xb8
 8005af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b12:	4bcb      	ldr	r3, [pc, #812]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	f200 8206 	bhi.w	8005f2c <HAL_RCC_GetSysClockFreq+0x440>
 8005b20:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005f2d 	.word	0x08005f2d
 8005b30:	08005f2d 	.word	0x08005f2d
 8005b34:	08005f2d 	.word	0x08005f2d
 8005b38:	08005b65 	.word	0x08005b65
 8005b3c:	08005f2d 	.word	0x08005f2d
 8005b40:	08005f2d 	.word	0x08005f2d
 8005b44:	08005f2d 	.word	0x08005f2d
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005f2d 	.word	0x08005f2d
 8005b50:	08005f2d 	.word	0x08005f2d
 8005b54:	08005f2d 	.word	0x08005f2d
 8005b58:	08005d5d 	.word	0x08005d5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b5c:	4bb9      	ldr	r3, [pc, #740]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b62:	e1e7      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b64:	4bb8      	ldr	r3, [pc, #736]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b6a:	e1e3      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b6c:	4bb4      	ldr	r3, [pc, #720]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b78:	4bb1      	ldr	r3, [pc, #708]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d071      	beq.n	8005c68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b84:	4bae      	ldr	r3, [pc, #696]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	099b      	lsrs	r3, r3, #6
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b90:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005baa:	4622      	mov	r2, r4
 8005bac:	462b      	mov	r3, r5
 8005bae:	f04f 0000 	mov.w	r0, #0
 8005bb2:	f04f 0100 	mov.w	r1, #0
 8005bb6:	0159      	lsls	r1, r3, #5
 8005bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bbc:	0150      	lsls	r0, r2, #5
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	1a51      	subs	r1, r2, r1
 8005bc6:	6439      	str	r1, [r7, #64]	@ 0x40
 8005bc8:	4629      	mov	r1, r5
 8005bca:	eb63 0301 	sbc.w	r3, r3, r1
 8005bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005bdc:	4649      	mov	r1, r9
 8005bde:	018b      	lsls	r3, r1, #6
 8005be0:	4641      	mov	r1, r8
 8005be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005be6:	4641      	mov	r1, r8
 8005be8:	018a      	lsls	r2, r1, #6
 8005bea:	4641      	mov	r1, r8
 8005bec:	1a51      	subs	r1, r2, r1
 8005bee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005c04:	4649      	mov	r1, r9
 8005c06:	00cb      	lsls	r3, r1, #3
 8005c08:	4641      	mov	r1, r8
 8005c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c0e:	4641      	mov	r1, r8
 8005c10:	00ca      	lsls	r2, r1, #3
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	4622      	mov	r2, r4
 8005c1a:	189b      	adds	r3, r3, r2
 8005c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c1e:	462b      	mov	r3, r5
 8005c20:	460a      	mov	r2, r1
 8005c22:	eb42 0303 	adc.w	r3, r2, r3
 8005c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c34:	4629      	mov	r1, r5
 8005c36:	024b      	lsls	r3, r1, #9
 8005c38:	4621      	mov	r1, r4
 8005c3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c3e:	4621      	mov	r1, r4
 8005c40:	024a      	lsls	r2, r1, #9
 8005c42:	4610      	mov	r0, r2
 8005c44:	4619      	mov	r1, r3
 8005c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005c58:	f7fb f836 	bl	8000cc8 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c66:	e067      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c68:	4b75      	ldr	r3, [pc, #468]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	099b      	lsrs	r3, r3, #6
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c82:	2300      	movs	r3, #0
 8005c84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	f04f 0000 	mov.w	r0, #0
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	0159      	lsls	r1, r3, #5
 8005c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c9c:	0150      	lsls	r0, r2, #5
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	1a51      	subs	r1, r2, r1
 8005ca6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ca8:	4629      	mov	r1, r5
 8005caa:	eb63 0301 	sbc.w	r3, r3, r1
 8005cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	018b      	lsls	r3, r1, #6
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	018a      	lsls	r2, r1, #6
 8005cca:	4641      	mov	r1, r8
 8005ccc:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ce2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cea:	4692      	mov	sl, r2
 8005cec:	469b      	mov	fp, r3
 8005cee:	4623      	mov	r3, r4
 8005cf0:	eb1a 0303 	adds.w	r3, sl, r3
 8005cf4:	623b      	str	r3, [r7, #32]
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	028b      	lsls	r3, r1, #10
 8005d0e:	4621      	mov	r1, r4
 8005d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d14:	4621      	mov	r1, r4
 8005d16:	028a      	lsls	r2, r1, #10
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d20:	2200      	movs	r2, #0
 8005d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d24:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005d2a:	f7fa ffcd 	bl	8000cc8 <__aeabi_uldivmod>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4613      	mov	r3, r2
 8005d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d38:	4b41      	ldr	r3, [pc, #260]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	3301      	adds	r3, #1
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d5a:	e0eb      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d5c:	4b38      	ldr	r3, [pc, #224]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d68:	4b35      	ldr	r3, [pc, #212]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d06b      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d74:	4b32      	ldr	r3, [pc, #200]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	099b      	lsrs	r3, r3, #6
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d88:	2300      	movs	r3, #0
 8005d8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005d90:	4622      	mov	r2, r4
 8005d92:	462b      	mov	r3, r5
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	0159      	lsls	r1, r3, #5
 8005d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da2:	0150      	lsls	r0, r2, #5
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4621      	mov	r1, r4
 8005daa:	1a51      	subs	r1, r2, r1
 8005dac:	61b9      	str	r1, [r7, #24]
 8005dae:	4629      	mov	r1, r5
 8005db0:	eb63 0301 	sbc.w	r3, r3, r1
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005dc2:	4659      	mov	r1, fp
 8005dc4:	018b      	lsls	r3, r1, #6
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dcc:	4651      	mov	r1, sl
 8005dce:	018a      	lsls	r2, r1, #6
 8005dd0:	4651      	mov	r1, sl
 8005dd2:	ebb2 0801 	subs.w	r8, r2, r1
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	eb63 0901 	sbc.w	r9, r3, r1
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005de8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005df0:	4690      	mov	r8, r2
 8005df2:	4699      	mov	r9, r3
 8005df4:	4623      	mov	r3, r4
 8005df6:	eb18 0303 	adds.w	r3, r8, r3
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	eb49 0303 	adc.w	r3, r9, r3
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005e10:	4629      	mov	r1, r5
 8005e12:	024b      	lsls	r3, r1, #9
 8005e14:	4621      	mov	r1, r4
 8005e16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	024a      	lsls	r2, r1, #9
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4619      	mov	r1, r3
 8005e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e26:	2200      	movs	r2, #0
 8005e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005e2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e30:	f7fa ff4a 	bl	8000cc8 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4613      	mov	r3, r2
 8005e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e3e:	e065      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0x420>
 8005e40:	40023800 	.word	0x40023800
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	099b      	lsrs	r3, r3, #6
 8005e52:	2200      	movs	r2, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	4611      	mov	r1, r2
 8005e58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e5e:	2300      	movs	r3, #0
 8005e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005e66:	4642      	mov	r2, r8
 8005e68:	464b      	mov	r3, r9
 8005e6a:	f04f 0000 	mov.w	r0, #0
 8005e6e:	f04f 0100 	mov.w	r1, #0
 8005e72:	0159      	lsls	r1, r3, #5
 8005e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e78:	0150      	lsls	r0, r2, #5
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4641      	mov	r1, r8
 8005e80:	1a51      	subs	r1, r2, r1
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	4649      	mov	r1, r9
 8005e86:	eb63 0301 	sbc.w	r3, r3, r1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005e98:	4659      	mov	r1, fp
 8005e9a:	018b      	lsls	r3, r1, #6
 8005e9c:	4651      	mov	r1, sl
 8005e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	018a      	lsls	r2, r1, #6
 8005ea6:	4651      	mov	r1, sl
 8005ea8:	1a54      	subs	r4, r2, r1
 8005eaa:	4659      	mov	r1, fp
 8005eac:	eb63 0501 	sbc.w	r5, r3, r1
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	00eb      	lsls	r3, r5, #3
 8005eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ebe:	00e2      	lsls	r2, r4, #3
 8005ec0:	4614      	mov	r4, r2
 8005ec2:	461d      	mov	r5, r3
 8005ec4:	4643      	mov	r3, r8
 8005ec6:	18e3      	adds	r3, r4, r3
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	464b      	mov	r3, r9
 8005ecc:	eb45 0303 	adc.w	r3, r5, r3
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ede:	4629      	mov	r1, r5
 8005ee0:	028b      	lsls	r3, r1, #10
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ee8:	4621      	mov	r1, r4
 8005eea:	028a      	lsls	r2, r1, #10
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005efa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005efe:	f7fa fee3 	bl	8000cc8 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4613      	mov	r3, r2
 8005f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x458>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	0f1b      	lsrs	r3, r3, #28
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f2a:	e003      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	37b8      	adds	r7, #184	@ 0xb8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f42:	bf00      	nop
 8005f44:	40023800 	.word	0x40023800
 8005f48:	00f42400 	.word	0x00f42400

08005f4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e28d      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8083 	beq.w	8006072 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f6c:	4b94      	ldr	r3, [pc, #592]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 030c 	and.w	r3, r3, #12
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d019      	beq.n	8005fac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f78:	4b91      	ldr	r3, [pc, #580]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d106      	bne.n	8005f92 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f84:	4b8e      	ldr	r3, [pc, #568]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f90:	d00c      	beq.n	8005fac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f92:	4b8b      	ldr	r3, [pc, #556]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f9a:	2b0c      	cmp	r3, #12
 8005f9c:	d112      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9e:	4b88      	ldr	r3, [pc, #544]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005faa:	d10b      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	4b84      	ldr	r3, [pc, #528]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05b      	beq.n	8006070 <HAL_RCC_OscConfig+0x124>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d157      	bne.n	8006070 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e25a      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCC_OscConfig+0x90>
 8005fce:	4b7c      	ldr	r3, [pc, #496]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a7b      	ldr	r2, [pc, #492]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e01d      	b.n	8006018 <HAL_RCC_OscConfig+0xcc>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCC_OscConfig+0xb4>
 8005fe6:	4b76      	ldr	r3, [pc, #472]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a75      	ldr	r2, [pc, #468]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	4b73      	ldr	r3, [pc, #460]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a72      	ldr	r2, [pc, #456]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e00b      	b.n	8006018 <HAL_RCC_OscConfig+0xcc>
 8006000:	4b6f      	ldr	r3, [pc, #444]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a6e      	ldr	r2, [pc, #440]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b6c      	ldr	r3, [pc, #432]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a6b      	ldr	r2, [pc, #428]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fd fcf4 	bl	8003a0c <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fd fcf0 	bl	8003a0c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e21f      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	4b61      	ldr	r3, [pc, #388]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0xdc>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fd fce0 	bl	8003a0c <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006050:	f7fd fcdc 	bl	8003a0c <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	@ 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e20b      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	4b57      	ldr	r3, [pc, #348]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x104>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d06f      	beq.n	800615e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800607e:	4b50      	ldr	r3, [pc, #320]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800608a:	4b4d      	ldr	r3, [pc, #308]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
        || \
 8006092:	2b08      	cmp	r3, #8
 8006094:	d105      	bne.n	80060a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006096:	4b4a      	ldr	r3, [pc, #296]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060a2:	4b47      	ldr	r3, [pc, #284]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d11c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ae:	4b44      	ldr	r3, [pc, #272]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d116      	bne.n	80060e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ba:	4b41      	ldr	r3, [pc, #260]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_RCC_OscConfig+0x186>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d001      	beq.n	80060d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e1d3      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d2:	4b3b      	ldr	r3, [pc, #236]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4937      	ldr	r1, [pc, #220]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e6:	e03a      	b.n	800615e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d020      	beq.n	8006132 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060f0:	4b34      	ldr	r3, [pc, #208]	@ (80061c4 <HAL_RCC_OscConfig+0x278>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fd fc89 	bl	8003a0c <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fe:	f7fd fc85 	bl	8003a0c <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e1b4      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006110:	4b2b      	ldr	r3, [pc, #172]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611c:	4b28      	ldr	r3, [pc, #160]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	4925      	ldr	r1, [pc, #148]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 800612c:	4313      	orrs	r3, r2
 800612e:	600b      	str	r3, [r1, #0]
 8006130:	e015      	b.n	800615e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006132:	4b24      	ldr	r3, [pc, #144]	@ (80061c4 <HAL_RCC_OscConfig+0x278>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fd fc68 	bl	8003a0c <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006140:	f7fd fc64 	bl	8003a0c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e193      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006152:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f0      	bne.n	8006140 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d036      	beq.n	80061d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006172:	4b15      	ldr	r3, [pc, #84]	@ (80061c8 <HAL_RCC_OscConfig+0x27c>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006178:	f7fd fc48 	bl	8003a0c <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006180:	f7fd fc44 	bl	8003a0c <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e173      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006192:	4b0b      	ldr	r3, [pc, #44]	@ (80061c0 <HAL_RCC_OscConfig+0x274>)
 8006194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x234>
 800619e:	e01b      	b.n	80061d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a0:	4b09      	ldr	r3, [pc, #36]	@ (80061c8 <HAL_RCC_OscConfig+0x27c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a6:	f7fd fc31 	bl	8003a0c <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ac:	e00e      	b.n	80061cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ae:	f7fd fc2d 	bl	8003a0c <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d907      	bls.n	80061cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e15c      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
 80061c0:	40023800 	.word	0x40023800
 80061c4:	42470000 	.word	0x42470000
 80061c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	4b8a      	ldr	r3, [pc, #552]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 80061ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1ea      	bne.n	80061ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8097 	beq.w	8006314 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ea:	4b83      	ldr	r3, [pc, #524]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	4b7f      	ldr	r3, [pc, #508]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	4a7e      	ldr	r2, [pc, #504]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006204:	6413      	str	r3, [r2, #64]	@ 0x40
 8006206:	4b7c      	ldr	r3, [pc, #496]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620e:	60bb      	str	r3, [r7, #8]
 8006210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006212:	2301      	movs	r3, #1
 8006214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006216:	4b79      	ldr	r3, [pc, #484]	@ (80063fc <HAL_RCC_OscConfig+0x4b0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d118      	bne.n	8006254 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006222:	4b76      	ldr	r3, [pc, #472]	@ (80063fc <HAL_RCC_OscConfig+0x4b0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a75      	ldr	r2, [pc, #468]	@ (80063fc <HAL_RCC_OscConfig+0x4b0>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800622c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622e:	f7fd fbed 	bl	8003a0c <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006236:	f7fd fbe9 	bl	8003a0c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e118      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006248:	4b6c      	ldr	r3, [pc, #432]	@ (80063fc <HAL_RCC_OscConfig+0x4b0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d106      	bne.n	800626a <HAL_RCC_OscConfig+0x31e>
 800625c:	4b66      	ldr	r3, [pc, #408]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006260:	4a65      	ldr	r2, [pc, #404]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	6713      	str	r3, [r2, #112]	@ 0x70
 8006268:	e01c      	b.n	80062a4 <HAL_RCC_OscConfig+0x358>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b05      	cmp	r3, #5
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0x340>
 8006272:	4b61      	ldr	r3, [pc, #388]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006276:	4a60      	ldr	r2, [pc, #384]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006278:	f043 0304 	orr.w	r3, r3, #4
 800627c:	6713      	str	r3, [r2, #112]	@ 0x70
 800627e:	4b5e      	ldr	r3, [pc, #376]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006282:	4a5d      	ldr	r2, [pc, #372]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6713      	str	r3, [r2, #112]	@ 0x70
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0x358>
 800628c:	4b5a      	ldr	r3, [pc, #360]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006290:	4a59      	ldr	r2, [pc, #356]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	6713      	str	r3, [r2, #112]	@ 0x70
 8006298:	4b57      	ldr	r3, [pc, #348]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629c:	4a56      	ldr	r2, [pc, #344]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 800629e:	f023 0304 	bic.w	r3, r3, #4
 80062a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fd fbae 	bl	8003a0c <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b2:	e00a      	b.n	80062ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b4:	f7fd fbaa 	bl	8003a0c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e0d7      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ca:	4b4b      	ldr	r3, [pc, #300]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0ee      	beq.n	80062b4 <HAL_RCC_OscConfig+0x368>
 80062d6:	e014      	b.n	8006302 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d8:	f7fd fb98 	bl	8003a0c <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062de:	e00a      	b.n	80062f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e0:	f7fd fb94 	bl	8003a0c <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e0c1      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f6:	4b40      	ldr	r3, [pc, #256]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ee      	bne.n	80062e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d105      	bne.n	8006314 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006308:	4b3b      	ldr	r3, [pc, #236]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 800630a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630c:	4a3a      	ldr	r2, [pc, #232]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 800630e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006312:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80ad 	beq.w	8006478 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800631e:	4b36      	ldr	r3, [pc, #216]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b08      	cmp	r3, #8
 8006328:	d060      	beq.n	80063ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d145      	bne.n	80063be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006332:	4b33      	ldr	r3, [pc, #204]	@ (8006400 <HAL_RCC_OscConfig+0x4b4>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fd fb68 	bl	8003a0c <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006340:	f7fd fb64 	bl	8003a0c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e093      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006352:	4b29      	ldr	r3, [pc, #164]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69da      	ldr	r2, [r3, #28]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636c:	019b      	lsls	r3, r3, #6
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	3b01      	subs	r3, #1
 8006378:	041b      	lsls	r3, r3, #16
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006388:	071b      	lsls	r3, r3, #28
 800638a:	491b      	ldr	r1, [pc, #108]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006390:	4b1b      	ldr	r3, [pc, #108]	@ (8006400 <HAL_RCC_OscConfig+0x4b4>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006396:	f7fd fb39 	bl	8003a0c <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800639e:	f7fd fb35 	bl	8003a0c <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e064      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b0:	4b11      	ldr	r3, [pc, #68]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f0      	beq.n	800639e <HAL_RCC_OscConfig+0x452>
 80063bc:	e05c      	b.n	8006478 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063be:	4b10      	ldr	r3, [pc, #64]	@ (8006400 <HAL_RCC_OscConfig+0x4b4>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fd fb22 	bl	8003a0c <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063cc:	f7fd fb1e 	bl	8003a0c <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04d      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063de:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <HAL_RCC_OscConfig+0x4ac>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x480>
 80063ea:	e045      	b.n	8006478 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d107      	bne.n	8006404 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e040      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
 80063f8:	40023800 	.word	0x40023800
 80063fc:	40007000 	.word	0x40007000
 8006400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006404:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <HAL_RCC_OscConfig+0x538>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d030      	beq.n	8006474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d129      	bne.n	8006474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642a:	429a      	cmp	r2, r3
 800642c:	d122      	bne.n	8006474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006434:	4013      	ands	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800643a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800643c:	4293      	cmp	r3, r2
 800643e:	d119      	bne.n	8006474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	3b01      	subs	r3, #1
 800644e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006450:	429a      	cmp	r2, r3
 8006452:	d10f      	bne.n	8006474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d107      	bne.n	8006474 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40023800 	.word	0x40023800

08006488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e041      	b.n	800651e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fc ff38 	bl	8003324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f000 fc0c 	bl	8006ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e041      	b.n	80065bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f839 	bl	80065c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	4619      	mov	r1, r3
 8006564:	4610      	mov	r0, r2
 8006566:	f000 fbbd 	bl	8006ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <HAL_TIM_PWM_Start+0x24>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e022      	b.n	8006642 <HAL_TIM_PWM_Start+0x6a>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d109      	bne.n	8006616 <HAL_TIM_PWM_Start+0x3e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e015      	b.n	8006642 <HAL_TIM_PWM_Start+0x6a>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b08      	cmp	r3, #8
 800661a:	d109      	bne.n	8006630 <HAL_TIM_PWM_Start+0x58>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e008      	b.n	8006642 <HAL_TIM_PWM_Start+0x6a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e07c      	b.n	8006744 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start+0x82>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006658:	e013      	b.n	8006682 <HAL_TIM_PWM_Start+0xaa>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0x92>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006668:	e00b      	b.n	8006682 <HAL_TIM_PWM_Start+0xaa>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0xa2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006678:	e003      	b.n	8006682 <HAL_TIM_PWM_Start+0xaa>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2201      	movs	r2, #1
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fe20 	bl	80072d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a2d      	ldr	r2, [pc, #180]	@ (800674c <HAL_TIM_PWM_Start+0x174>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <HAL_TIM_PWM_Start+0xcc>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2c      	ldr	r2, [pc, #176]	@ (8006750 <HAL_TIM_PWM_Start+0x178>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d101      	bne.n	80066a8 <HAL_TIM_PWM_Start+0xd0>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <HAL_TIM_PWM_Start+0xd2>
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a22      	ldr	r2, [pc, #136]	@ (800674c <HAL_TIM_PWM_Start+0x174>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d0:	d01d      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006754 <HAL_TIM_PWM_Start+0x17c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006758 <HAL_TIM_PWM_Start+0x180>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1c      	ldr	r2, [pc, #112]	@ (800675c <HAL_TIM_PWM_Start+0x184>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a16      	ldr	r2, [pc, #88]	@ (8006750 <HAL_TIM_PWM_Start+0x178>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a18      	ldr	r2, [pc, #96]	@ (8006760 <HAL_TIM_PWM_Start+0x188>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIM_PWM_Start+0x136>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a16      	ldr	r2, [pc, #88]	@ (8006764 <HAL_TIM_PWM_Start+0x18c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d111      	bne.n	8006732 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b06      	cmp	r3, #6
 800671e:	d010      	beq.n	8006742 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006730:	e007      	b.n	8006742 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40010000 	.word	0x40010000
 8006750:	40010400 	.word	0x40010400
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40014000 	.word	0x40014000
 8006764:	40001800 	.word	0x40001800

08006768 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e097      	b.n	80068ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7fc fca5 	bl	80030e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ac:	f023 0307 	bic.w	r3, r3, #7
 80067b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4619      	mov	r1, r3
 80067bc:	4610      	mov	r0, r2
 80067be:	f000 fa91 	bl	8006ce4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	4313      	orrs	r3, r2
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006808:	f023 030c 	bic.w	r3, r3, #12
 800680c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006814:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	4313      	orrs	r3, r2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	011a      	lsls	r2, r3, #4
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	031b      	lsls	r3, r3, #12
 8006838:	4313      	orrs	r3, r2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	4313      	orrs	r3, r2
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d110      	bne.n	8006906 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d102      	bne.n	80068f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ea:	7b7b      	ldrb	r3, [r7, #13]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d001      	beq.n	80068f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e069      	b.n	80069c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006904:	e031      	b.n	800696a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b04      	cmp	r3, #4
 800690a:	d110      	bne.n	800692e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d102      	bne.n	8006918 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006912:	7b3b      	ldrb	r3, [r7, #12]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d001      	beq.n	800691c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e055      	b.n	80069c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800692c:	e01d      	b.n	800696a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d108      	bne.n	8006946 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d105      	bne.n	8006946 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800693a:	7b7b      	ldrb	r3, [r7, #13]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d102      	bne.n	8006946 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006940:	7b3b      	ldrb	r3, [r7, #12]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d001      	beq.n	800694a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e03e      	b.n	80069c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_TIM_Encoder_Start+0xc4>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d008      	beq.n	8006988 <HAL_TIM_Encoder_Start+0xd4>
 8006976:	e00f      	b.n	8006998 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2201      	movs	r2, #1
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fca5 	bl	80072d0 <TIM_CCxChannelCmd>
      break;
 8006986:	e016      	b.n	80069b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2201      	movs	r2, #1
 800698e:	2104      	movs	r1, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fc9d 	bl	80072d0 <TIM_CCxChannelCmd>
      break;
 8006996:	e00e      	b.n	80069b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2201      	movs	r2, #1
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fc95 	bl	80072d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	2104      	movs	r1, #4
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fc8e 	bl	80072d0 <TIM_CCxChannelCmd>
      break;
 80069b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e0ae      	b.n	8006b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b0c      	cmp	r3, #12
 80069fa:	f200 809f 	bhi.w	8006b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006b3d 	.word	0x08006b3d
 8006a0c:	08006b3d 	.word	0x08006b3d
 8006a10:	08006b3d 	.word	0x08006b3d
 8006a14:	08006a79 	.word	0x08006a79
 8006a18:	08006b3d 	.word	0x08006b3d
 8006a1c:	08006b3d 	.word	0x08006b3d
 8006a20:	08006b3d 	.word	0x08006b3d
 8006a24:	08006abb 	.word	0x08006abb
 8006a28:	08006b3d 	.word	0x08006b3d
 8006a2c:	08006b3d 	.word	0x08006b3d
 8006a30:	08006b3d 	.word	0x08006b3d
 8006a34:	08006afb 	.word	0x08006afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f9fc 	bl	8006e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0208 	orr.w	r2, r2, #8
 8006a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0204 	bic.w	r2, r2, #4
 8006a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	619a      	str	r2, [r3, #24]
      break;
 8006a76:	e064      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fa4c 	bl	8006f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6999      	ldr	r1, [r3, #24]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	021a      	lsls	r2, r3, #8
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	619a      	str	r2, [r3, #24]
      break;
 8006ab8:	e043      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 faa1 	bl	8007008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69da      	ldr	r2, [r3, #28]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0208 	orr.w	r2, r2, #8
 8006ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0204 	bic.w	r2, r2, #4
 8006ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69d9      	ldr	r1, [r3, #28]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	61da      	str	r2, [r3, #28]
      break;
 8006af8:	e023      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 faf5 	bl	80070f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69d9      	ldr	r1, [r3, #28]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	021a      	lsls	r2, r3, #8
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	61da      	str	r2, [r3, #28]
      break;
 8006b3a:	e002      	b.n	8006b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e0b4      	b.n	8006cda <HAL_TIM_ConfigClockSource+0x186>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba8:	d03e      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0xd4>
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bae:	f200 8087 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb6:	f000 8086 	beq.w	8006cc6 <HAL_TIM_ConfigClockSource+0x172>
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbe:	d87f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b70      	cmp	r3, #112	@ 0x70
 8006bc2:	d01a      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0xa6>
 8006bc4:	2b70      	cmp	r3, #112	@ 0x70
 8006bc6:	d87b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b60      	cmp	r3, #96	@ 0x60
 8006bca:	d050      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x11a>
 8006bcc:	2b60      	cmp	r3, #96	@ 0x60
 8006bce:	d877      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b50      	cmp	r3, #80	@ 0x50
 8006bd2:	d03c      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0xfa>
 8006bd4:	2b50      	cmp	r3, #80	@ 0x50
 8006bd6:	d873      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b40      	cmp	r3, #64	@ 0x40
 8006bda:	d058      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x13a>
 8006bdc:	2b40      	cmp	r3, #64	@ 0x40
 8006bde:	d86f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b30      	cmp	r3, #48	@ 0x30
 8006be2:	d064      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006be4:	2b30      	cmp	r3, #48	@ 0x30
 8006be6:	d86b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d060      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d867      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d05c      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d05a      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bf8:	e062      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c0a:	f000 fb41 	bl	8007290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	609a      	str	r2, [r3, #8]
      break;
 8006c26:	e04f      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c38:	f000 fb2a 	bl	8007290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c4a:	609a      	str	r2, [r3, #8]
      break;
 8006c4c:	e03c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f000 fa9e 	bl	800719c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2150      	movs	r1, #80	@ 0x50
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 faf7 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006c6c:	e02c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 fabd 	bl	80071fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2160      	movs	r1, #96	@ 0x60
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fae7 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e01c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fa7e 	bl	800719c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2140      	movs	r1, #64	@ 0x40
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fad7 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006cac:	e00c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f000 face 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006cbe:	e003      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc4:	e000      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a46      	ldr	r2, [pc, #280]	@ (8006e10 <TIM_Base_SetConfig+0x12c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d02:	d00f      	beq.n	8006d24 <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a43      	ldr	r2, [pc, #268]	@ (8006e14 <TIM_Base_SetConfig+0x130>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a42      	ldr	r2, [pc, #264]	@ (8006e18 <TIM_Base_SetConfig+0x134>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a41      	ldr	r2, [pc, #260]	@ (8006e1c <TIM_Base_SetConfig+0x138>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a40      	ldr	r2, [pc, #256]	@ (8006e20 <TIM_Base_SetConfig+0x13c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d108      	bne.n	8006d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a35      	ldr	r2, [pc, #212]	@ (8006e10 <TIM_Base_SetConfig+0x12c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d02b      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d44:	d027      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a32      	ldr	r2, [pc, #200]	@ (8006e14 <TIM_Base_SetConfig+0x130>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d023      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a31      	ldr	r2, [pc, #196]	@ (8006e18 <TIM_Base_SetConfig+0x134>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01f      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a30      	ldr	r2, [pc, #192]	@ (8006e1c <TIM_Base_SetConfig+0x138>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01b      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2f      	ldr	r2, [pc, #188]	@ (8006e20 <TIM_Base_SetConfig+0x13c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d017      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2e      	ldr	r2, [pc, #184]	@ (8006e24 <TIM_Base_SetConfig+0x140>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2d      	ldr	r2, [pc, #180]	@ (8006e28 <TIM_Base_SetConfig+0x144>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a2c      	ldr	r2, [pc, #176]	@ (8006e2c <TIM_Base_SetConfig+0x148>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a2b      	ldr	r2, [pc, #172]	@ (8006e30 <TIM_Base_SetConfig+0x14c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2a      	ldr	r2, [pc, #168]	@ (8006e34 <TIM_Base_SetConfig+0x150>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a29      	ldr	r2, [pc, #164]	@ (8006e38 <TIM_Base_SetConfig+0x154>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d108      	bne.n	8006da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a10      	ldr	r2, [pc, #64]	@ (8006e10 <TIM_Base_SetConfig+0x12c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_Base_SetConfig+0xf8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a12      	ldr	r2, [pc, #72]	@ (8006e20 <TIM_Base_SetConfig+0x13c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d103      	bne.n	8006de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]
  }
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800
 8006e30:	40001800 	.word	0x40001800
 8006e34:	40001c00 	.word	0x40001c00
 8006e38:	40002000 	.word	0x40002000

08006e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f023 0201 	bic.w	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 0302 	bic.w	r3, r3, #2
 8006e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a20      	ldr	r2, [pc, #128]	@ (8006f14 <TIM_OC1_SetConfig+0xd8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_OC1_SetConfig+0x64>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006f18 <TIM_OC1_SetConfig+0xdc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d10c      	bne.n	8006eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 0308 	bic.w	r3, r3, #8
 8006ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	@ (8006f14 <TIM_OC1_SetConfig+0xd8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC1_SetConfig+0x8e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a14      	ldr	r2, [pc, #80]	@ (8006f18 <TIM_OC1_SetConfig+0xdc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d111      	bne.n	8006eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40010400 	.word	0x40010400

08006f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f023 0210 	bic.w	r2, r3, #16
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0320 	bic.w	r3, r3, #32
 8006f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a22      	ldr	r2, [pc, #136]	@ (8007000 <TIM_OC2_SetConfig+0xe4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_OC2_SetConfig+0x68>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a21      	ldr	r2, [pc, #132]	@ (8007004 <TIM_OC2_SetConfig+0xe8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d10d      	bne.n	8006fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a17      	ldr	r2, [pc, #92]	@ (8007000 <TIM_OC2_SetConfig+0xe4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC2_SetConfig+0x94>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a16      	ldr	r2, [pc, #88]	@ (8007004 <TIM_OC2_SetConfig+0xe8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d113      	bne.n	8006fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40010400 	.word	0x40010400

08007008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a21      	ldr	r2, [pc, #132]	@ (80070e8 <TIM_OC3_SetConfig+0xe0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_OC3_SetConfig+0x66>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a20      	ldr	r2, [pc, #128]	@ (80070ec <TIM_OC3_SetConfig+0xe4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d10d      	bne.n	800708a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a16      	ldr	r2, [pc, #88]	@ (80070e8 <TIM_OC3_SetConfig+0xe0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_OC3_SetConfig+0x92>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	@ (80070ec <TIM_OC3_SetConfig+0xe4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d113      	bne.n	80070c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400

080070f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800713a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	031b      	lsls	r3, r3, #12
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a12      	ldr	r2, [pc, #72]	@ (8007194 <TIM_OC4_SetConfig+0xa4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_OC4_SetConfig+0x68>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a11      	ldr	r2, [pc, #68]	@ (8007198 <TIM_OC4_SetConfig+0xa8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d109      	bne.n	800716c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800715e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	019b      	lsls	r3, r3, #6
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	621a      	str	r2, [r3, #32]
}
 8007186:	bf00      	nop
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40010000 	.word	0x40010000
 8007198:	40010400 	.word	0x40010400

0800719c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f023 0201 	bic.w	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 030a 	bic.w	r3, r3, #10
 80071d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b087      	sub	sp, #28
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f023 0210 	bic.w	r2, r3, #16
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	031b      	lsls	r3, r3, #12
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	f043 0307 	orr.w	r3, r3, #7
 800727c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	021a      	lsls	r2, r3, #8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	609a      	str	r2, [r3, #8]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2201      	movs	r2, #1
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	401a      	ands	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	fa01 f303 	lsl.w	r3, r1, r3
 8007308:	431a      	orrs	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e05a      	b.n	80073ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a21      	ldr	r2, [pc, #132]	@ (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d022      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007380:	d01d      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1d      	ldr	r2, [pc, #116]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d018      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1b      	ldr	r2, [pc, #108]	@ (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1a      	ldr	r2, [pc, #104]	@ (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00e      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a18      	ldr	r2, [pc, #96]	@ (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d009      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a17      	ldr	r2, [pc, #92]	@ (800740c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d004      	beq.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a15      	ldr	r2, [pc, #84]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d10c      	bne.n	80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40010000 	.word	0x40010000
 80073fc:	40000400 	.word	0x40000400
 8007400:	40000800 	.word	0x40000800
 8007404:	40000c00 	.word	0x40000c00
 8007408:	40010400 	.word	0x40010400
 800740c:	40014000 	.word	0x40014000
 8007410:	40001800 	.word	0x40001800

08007414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e042      	b.n	80074ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fc f89c 	bl	8003578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2224      	movs	r2, #36	@ 0x24
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 ff4f 	bl	80082fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800746c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800747c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800748c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	@ 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d175      	bne.n	80075c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_UART_Transmit+0x2c>
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e06e      	b.n	80075c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2221      	movs	r2, #33	@ 0x21
 80074ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074f2:	f7fc fa8b 	bl	8003a0c <HAL_GetTick>
 80074f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	88fa      	ldrh	r2, [r7, #6]
 8007502:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750c:	d108      	bne.n	8007520 <HAL_UART_Transmit+0x6c>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	e003      	b.n	8007528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007528:	e02e      	b.n	8007588 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2200      	movs	r2, #0
 8007532:	2180      	movs	r1, #128	@ 0x80
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fc27 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e03a      	b.n	80075c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	3302      	adds	r3, #2
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	e007      	b.n	800757a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	3301      	adds	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1cb      	bne.n	800752a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	2140      	movs	r1, #64	@ 0x40
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fbf3 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e006      	b.n	80075c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	e000      	b.n	80075c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
  }
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d112      	bne.n	800760a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_UART_Receive_DMA+0x26>
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e00b      	b.n	800760c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	461a      	mov	r2, r3
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fc1b 	bl	8007e3c <UART_Start_Receive_DMA>
 8007606:	4603      	mov	r3, r0
 8007608:	e000      	b.n	800760c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b0ba      	sub	sp, #232	@ 0xe8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800763a:	2300      	movs	r3, #0
 800763c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007640:	2300      	movs	r3, #0
 8007642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10f      	bne.n	800767a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800765a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <HAL_UART_IRQHandler+0x66>
 8007666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fd83 	bl	800817e <UART_Receive_IT>
      return;
 8007678:	e25b      	b.n	8007b32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800767a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80de 	beq.w	8007840 <HAL_UART_IRQHandler+0x22c>
 8007684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007694:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80d1 	beq.w	8007840 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <HAL_UART_IRQHandler+0xae>
 80076aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ba:	f043 0201 	orr.w	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_UART_IRQHandler+0xd2>
 80076ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076de:	f043 0202 	orr.w	r2, r3, #2
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <HAL_UART_IRQHandler+0xf6>
 80076f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007702:	f043 0204 	orr.w	r2, r3, #4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800770a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d011      	beq.n	800773a <HAL_UART_IRQHandler+0x126>
 8007716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	f043 0208 	orr.w	r2, r3, #8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 81f2 	beq.w	8007b28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <HAL_UART_IRQHandler+0x14e>
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fd0e 	bl	800817e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776c:	2b40      	cmp	r3, #64	@ 0x40
 800776e:	bf0c      	ite	eq
 8007770:	2301      	moveq	r3, #1
 8007772:	2300      	movne	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <HAL_UART_IRQHandler+0x17a>
 8007786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d04f      	beq.n	800782e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc16 	bl	8007fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779e:	2b40      	cmp	r3, #64	@ 0x40
 80077a0:	d141      	bne.n	8007826 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3314      	adds	r3, #20
 80077a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80077ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80077d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80077da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80077e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1d9      	bne.n	80077a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d013      	beq.n	800781e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fa:	4a7e      	ldr	r2, [pc, #504]	@ (80079f4 <HAL_UART_IRQHandler+0x3e0>)
 80077fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007802:	4618      	mov	r0, r3
 8007804:	f7fc fbba 	bl	8003f7c <HAL_DMA_Abort_IT>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d016      	beq.n	800783c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781c:	e00e      	b.n	800783c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f99e 	bl	8007b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	e00a      	b.n	800783c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f99a 	bl	8007b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782c:	e006      	b.n	800783c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f996 	bl	8007b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800783a:	e175      	b.n	8007b28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783c:	bf00      	nop
    return;
 800783e:	e173      	b.n	8007b28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007844:	2b01      	cmp	r3, #1
 8007846:	f040 814f 	bne.w	8007ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800784a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784e:	f003 0310 	and.w	r3, r3, #16
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 8148 	beq.w	8007ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8141 	beq.w	8007ae8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007866:	2300      	movs	r3, #0
 8007868:	60bb      	str	r3, [r7, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	60bb      	str	r3, [r7, #8]
 800787a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007886:	2b40      	cmp	r3, #64	@ 0x40
 8007888:	f040 80b6 	bne.w	80079f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8145 	beq.w	8007b2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078aa:	429a      	cmp	r2, r3
 80078ac:	f080 813e 	bcs.w	8007b2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c2:	f000 8088 	beq.w	80079d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80078dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	330c      	adds	r3, #12
 80078ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80078f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80078fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800790a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1d9      	bne.n	80078c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3314      	adds	r3, #20
 8007918:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007936:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800793a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800793e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e1      	bne.n	8007912 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3314      	adds	r3, #20
 8007954:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800795e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3314      	adds	r3, #20
 800796e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007974:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007978:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e3      	bne.n	800794e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079a6:	f023 0310 	bic.w	r3, r3, #16
 80079aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	330c      	adds	r3, #12
 80079b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80079ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e3      	bne.n	8007994 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fc fa63 	bl	8003e9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f8c1 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079f2:	e09b      	b.n	8007b2c <HAL_UART_IRQHandler+0x518>
 80079f4:	08008087 	.word	0x08008087
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 808e 	beq.w	8007b30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8089 	beq.w	8007b30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	330c      	adds	r3, #12
 8007a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007a42:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e3      	bne.n	8007a1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3314      	adds	r3, #20
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	623b      	str	r3, [r7, #32]
   return(result);
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3314      	adds	r3, #20
 8007a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e3      	bne.n	8007a56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0310 	bic.w	r3, r3, #16
 8007ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	330c      	adds	r3, #12
 8007abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ac0:	61fa      	str	r2, [r7, #28]
 8007ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	69b9      	ldr	r1, [r7, #24]
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e3      	bne.n	8007a9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f847 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ae6:	e023      	b.n	8007b30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <HAL_UART_IRQHandler+0x4f4>
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fad4 	bl	80080ae <UART_Transmit_IT>
    return;
 8007b06:	e014      	b.n	8007b32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00e      	beq.n	8007b32 <HAL_UART_IRQHandler+0x51e>
 8007b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fb14 	bl	800814e <UART_EndTransmit_IT>
    return;
 8007b26:	e004      	b.n	8007b32 <HAL_UART_IRQHandler+0x51e>
    return;
 8007b28:	bf00      	nop
 8007b2a:	e002      	b.n	8007b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b30:	bf00      	nop
  }
}
 8007b32:	37e8      	adds	r7, #232	@ 0xe8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b09c      	sub	sp, #112	@ 0x70
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b98:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d172      	bne.n	8007c8e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007baa:	2200      	movs	r2, #0
 8007bac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	330c      	adds	r3, #12
 8007bcc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007bce:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bd0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3314      	adds	r3, #20
 8007be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3314      	adds	r3, #20
 8007c00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c02:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e5      	bne.n	8007be2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3314      	adds	r3, #20
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	623b      	str	r3, [r7, #32]
   return(result);
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3314      	adds	r3, #20
 8007c34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d119      	bne.n	8007c8e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	330c      	adds	r3, #12
 8007c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f023 0310 	bic.w	r3, r3, #16
 8007c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	330c      	adds	r3, #12
 8007c78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007c7a:	61fa      	str	r2, [r7, #28]
 8007c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	69b9      	ldr	r1, [r7, #24]
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	617b      	str	r3, [r7, #20]
   return(result);
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e5      	bne.n	8007c5a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c90:	2200      	movs	r2, #0
 8007c92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d106      	bne.n	8007caa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ca4:	f7ff ff66 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ca8:	e002      	b.n	8007cb0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007caa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007cac:	f7f9 fd16 	bl	80016dc <HAL_UART_RxCpltCallback>
}
 8007cb0:	bf00      	nop
 8007cb2:	3770      	adds	r7, #112	@ 0x70
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d108      	bne.n	8007ce6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	4619      	mov	r1, r3
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff ff48 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ce4:	e002      	b.n	8007cec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff ff30 	bl	8007b4c <HAL_UART_RxHalfCpltCallback>
}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d10:	2b80      	cmp	r3, #128	@ 0x80
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b21      	cmp	r3, #33	@ 0x21
 8007d26:	d108      	bne.n	8007d3a <UART_DMAError+0x46>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007d34:	68b8      	ldr	r0, [r7, #8]
 8007d36:	f000 f91b 	bl	8007f70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d44:	2b40      	cmp	r3, #64	@ 0x40
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b22      	cmp	r3, #34	@ 0x22
 8007d5a:	d108      	bne.n	8007d6e <UART_DMAError+0x7a>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2200      	movs	r2, #0
 8007d66:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007d68:	68b8      	ldr	r0, [r7, #8]
 8007d6a:	f000 f929 	bl	8007fc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d72:	f043 0210 	orr.w	r2, r3, #16
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d7a:	68b8      	ldr	r0, [r7, #8]
 8007d7c:	f7ff fef0 	bl	8007b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4613      	mov	r3, r2
 8007d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d98:	e03b      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da0:	d037      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da2:	f7fb fe33 	bl	8003a0c <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	6a3a      	ldr	r2, [r7, #32]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d302      	bcc.n	8007db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e03a      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d023      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b80      	cmp	r3, #128	@ 0x80
 8007dce:	d020      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b40      	cmp	r3, #64	@ 0x40
 8007dd4:	d01d      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d116      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f8e0 	bl	8007fc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2208      	movs	r2, #8
 8007e04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e00f      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d0b4      	beq.n	8007d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b098      	sub	sp, #96	@ 0x60
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2222      	movs	r2, #34	@ 0x22
 8007e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e68:	4a3e      	ldr	r2, [pc, #248]	@ (8007f64 <UART_Start_Receive_DMA+0x128>)
 8007e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e70:	4a3d      	ldr	r2, [pc, #244]	@ (8007f68 <UART_Start_Receive_DMA+0x12c>)
 8007e72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e78:	4a3c      	ldr	r2, [pc, #240]	@ (8007f6c <UART_Start_Receive_DMA+0x130>)
 8007e7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e80:	2200      	movs	r2, #0
 8007e82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e84:	f107 0308 	add.w	r3, r7, #8
 8007e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3304      	adds	r3, #4
 8007e94:	4619      	mov	r1, r3
 8007e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	f7fb ffa6 	bl	8003dec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	613b      	str	r3, [r7, #16]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d019      	beq.n	8007ef2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ede:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e5      	bne.n	8007ebe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f04:	f043 0301 	orr.w	r3, r3, #1
 8007f08:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f12:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007f18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e5      	bne.n	8007ef2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3314      	adds	r3, #20
 8007f2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	617b      	str	r3, [r7, #20]
   return(result);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3314      	adds	r3, #20
 8007f44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f46:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6a39      	ldr	r1, [r7, #32]
 8007f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e5      	bne.n	8007f26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3760      	adds	r7, #96	@ 0x60
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	08007b8d 	.word	0x08007b8d
 8007f68:	08007cb9 	.word	0x08007cb9
 8007f6c:	08007cf5 	.word	0x08007cf5

08007f70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b089      	sub	sp, #36	@ 0x24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	330c      	adds	r3, #12
 8007f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	61ba      	str	r2, [r7, #24]
 8007f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6979      	ldr	r1, [r7, #20]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e5      	bne.n	8007f78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007fb4:	bf00      	nop
 8007fb6:	3724      	adds	r7, #36	@ 0x24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b095      	sub	sp, #84	@ 0x54
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fe8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e5      	bne.n	8007fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3314      	adds	r3, #20
 8008002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	61fb      	str	r3, [r7, #28]
   return(result);
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800801c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	2b01      	cmp	r3, #1
 8008036:	d119      	bne.n	800806c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	60bb      	str	r3, [r7, #8]
   return(result);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f023 0310 	bic.w	r3, r3, #16
 800804e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008058:	61ba      	str	r2, [r7, #24]
 800805a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6979      	ldr	r1, [r7, #20]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	613b      	str	r3, [r7, #16]
   return(result);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e5      	bne.n	8008038 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800807a:	bf00      	nop
 800807c:	3754      	adds	r7, #84	@ 0x54
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff fd5d 	bl	8007b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b085      	sub	sp, #20
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b21      	cmp	r3, #33	@ 0x21
 80080c0:	d13e      	bne.n	8008140 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ca:	d114      	bne.n	80080f6 <UART_Transmit_IT+0x48>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d110      	bne.n	80080f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	1c9a      	adds	r2, r3, #2
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	621a      	str	r2, [r3, #32]
 80080f4:	e008      	b.n	8008108 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	1c59      	adds	r1, r3, #1
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6211      	str	r1, [r2, #32]
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800810c:	b29b      	uxth	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4619      	mov	r1, r3
 8008116:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10f      	bne.n	800813c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800812a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800813a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	e000      	b.n	8008142 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008140:	2302      	movs	r3, #2
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008164:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff fce2 	bl	8007b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b08c      	sub	sp, #48	@ 0x30
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b22      	cmp	r3, #34	@ 0x22
 8008190:	f040 80ae 	bne.w	80082f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800819c:	d117      	bne.n	80081ce <UART_Receive_IT+0x50>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d113      	bne.n	80081ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081bc:	b29a      	uxth	r2, r3
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c6:	1c9a      	adds	r2, r3, #2
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80081cc:	e026      	b.n	800821c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e0:	d007      	beq.n	80081f2 <UART_Receive_IT+0x74>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <UART_Receive_IT+0x82>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e008      	b.n	8008212 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820c:	b2da      	uxtb	r2, r3
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	b29b      	uxth	r3, r3
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	4619      	mov	r1, r3
 800822a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800822c:	2b00      	cmp	r3, #0
 800822e:	d15d      	bne.n	80082ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0220 	bic.w	r2, r2, #32
 800823e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800824e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0201 	bic.w	r2, r2, #1
 800825e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008272:	2b01      	cmp	r3, #1
 8008274:	d135      	bne.n	80082e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	330c      	adds	r3, #12
 8008282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	613b      	str	r3, [r7, #16]
   return(result);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f023 0310 	bic.w	r3, r3, #16
 8008292:	627b      	str	r3, [r7, #36]	@ 0x24
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	330c      	adds	r3, #12
 800829a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829c:	623a      	str	r2, [r7, #32]
 800829e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	69f9      	ldr	r1, [r7, #28]
 80082a2:	6a3a      	ldr	r2, [r7, #32]
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e5      	bne.n	800827c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0310 	and.w	r3, r3, #16
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d10a      	bne.n	80082d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fc4a 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
 80082e0:	e002      	b.n	80082e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7f9 f9fa 	bl	80016dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e002      	b.n	80082f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e000      	b.n	80082f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80082f0:	2302      	movs	r3, #2
  }
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3730      	adds	r7, #48	@ 0x30
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008300:	b0c0      	sub	sp, #256	@ 0x100
 8008302:	af00      	add	r7, sp, #0
 8008304:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008318:	68d9      	ldr	r1, [r3, #12]
 800831a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	ea40 0301 	orr.w	r3, r0, r1
 8008324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	431a      	orrs	r2, r3
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	431a      	orrs	r2, r3
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	4313      	orrs	r3, r2
 8008344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008354:	f021 010c 	bic.w	r1, r1, #12
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008362:	430b      	orrs	r3, r1
 8008364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008376:	6999      	ldr	r1, [r3, #24]
 8008378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	ea40 0301 	orr.w	r3, r0, r1
 8008382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b8f      	ldr	r3, [pc, #572]	@ (80085c8 <UART_SetConfig+0x2cc>)
 800838c:	429a      	cmp	r2, r3
 800838e:	d005      	beq.n	800839c <UART_SetConfig+0xa0>
 8008390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b8d      	ldr	r3, [pc, #564]	@ (80085cc <UART_SetConfig+0x2d0>)
 8008398:	429a      	cmp	r2, r3
 800839a:	d104      	bne.n	80083a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800839c:	f7fd fb92 	bl	8005ac4 <HAL_RCC_GetPCLK2Freq>
 80083a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083a4:	e003      	b.n	80083ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083a6:	f7fd fb79 	bl	8005a9c <HAL_RCC_GetPCLK1Freq>
 80083aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083b8:	f040 810c 	bne.w	80085d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083ce:	4622      	mov	r2, r4
 80083d0:	462b      	mov	r3, r5
 80083d2:	1891      	adds	r1, r2, r2
 80083d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083d6:	415b      	adcs	r3, r3
 80083d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083de:	4621      	mov	r1, r4
 80083e0:	eb12 0801 	adds.w	r8, r2, r1
 80083e4:	4629      	mov	r1, r5
 80083e6:	eb43 0901 	adc.w	r9, r3, r1
 80083ea:	f04f 0200 	mov.w	r2, #0
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083fe:	4690      	mov	r8, r2
 8008400:	4699      	mov	r9, r3
 8008402:	4623      	mov	r3, r4
 8008404:	eb18 0303 	adds.w	r3, r8, r3
 8008408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800840c:	462b      	mov	r3, r5
 800840e:	eb49 0303 	adc.w	r3, r9, r3
 8008412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008422:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800842a:	460b      	mov	r3, r1
 800842c:	18db      	adds	r3, r3, r3
 800842e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008430:	4613      	mov	r3, r2
 8008432:	eb42 0303 	adc.w	r3, r2, r3
 8008436:	657b      	str	r3, [r7, #84]	@ 0x54
 8008438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800843c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008440:	f7f8 fc42 	bl	8000cc8 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4b61      	ldr	r3, [pc, #388]	@ (80085d0 <UART_SetConfig+0x2d4>)
 800844a:	fba3 2302 	umull	r2, r3, r3, r2
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	011c      	lsls	r4, r3, #4
 8008452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008456:	2200      	movs	r2, #0
 8008458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800845c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008464:	4642      	mov	r2, r8
 8008466:	464b      	mov	r3, r9
 8008468:	1891      	adds	r1, r2, r2
 800846a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800846c:	415b      	adcs	r3, r3
 800846e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008474:	4641      	mov	r1, r8
 8008476:	eb12 0a01 	adds.w	sl, r2, r1
 800847a:	4649      	mov	r1, r9
 800847c:	eb43 0b01 	adc.w	fp, r3, r1
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800848c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008494:	4692      	mov	sl, r2
 8008496:	469b      	mov	fp, r3
 8008498:	4643      	mov	r3, r8
 800849a:	eb1a 0303 	adds.w	r3, sl, r3
 800849e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084a2:	464b      	mov	r3, r9
 80084a4:	eb4b 0303 	adc.w	r3, fp, r3
 80084a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084c0:	460b      	mov	r3, r1
 80084c2:	18db      	adds	r3, r3, r3
 80084c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084c6:	4613      	mov	r3, r2
 80084c8:	eb42 0303 	adc.w	r3, r2, r3
 80084cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084d6:	f7f8 fbf7 	bl	8000cc8 <__aeabi_uldivmod>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4611      	mov	r1, r2
 80084e0:	4b3b      	ldr	r3, [pc, #236]	@ (80085d0 <UART_SetConfig+0x2d4>)
 80084e2:	fba3 2301 	umull	r2, r3, r3, r1
 80084e6:	095b      	lsrs	r3, r3, #5
 80084e8:	2264      	movs	r2, #100	@ 0x64
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
 80084ee:	1acb      	subs	r3, r1, r3
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80084f6:	4b36      	ldr	r3, [pc, #216]	@ (80085d0 <UART_SetConfig+0x2d4>)
 80084f8:	fba3 2302 	umull	r2, r3, r3, r2
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008504:	441c      	add	r4, r3
 8008506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800850a:	2200      	movs	r2, #0
 800850c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008510:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	1891      	adds	r1, r2, r2
 800851e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008520:	415b      	adcs	r3, r3
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008528:	4641      	mov	r1, r8
 800852a:	1851      	adds	r1, r2, r1
 800852c:	6339      	str	r1, [r7, #48]	@ 0x30
 800852e:	4649      	mov	r1, r9
 8008530:	414b      	adcs	r3, r1
 8008532:	637b      	str	r3, [r7, #52]	@ 0x34
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008540:	4659      	mov	r1, fp
 8008542:	00cb      	lsls	r3, r1, #3
 8008544:	4651      	mov	r1, sl
 8008546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800854a:	4651      	mov	r1, sl
 800854c:	00ca      	lsls	r2, r1, #3
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	4603      	mov	r3, r0
 8008554:	4642      	mov	r2, r8
 8008556:	189b      	adds	r3, r3, r2
 8008558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800855c:	464b      	mov	r3, r9
 800855e:	460a      	mov	r2, r1
 8008560:	eb42 0303 	adc.w	r3, r2, r3
 8008564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008574:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800857c:	460b      	mov	r3, r1
 800857e:	18db      	adds	r3, r3, r3
 8008580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008582:	4613      	mov	r3, r2
 8008584:	eb42 0303 	adc.w	r3, r2, r3
 8008588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800858a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800858e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008592:	f7f8 fb99 	bl	8000cc8 <__aeabi_uldivmod>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <UART_SetConfig+0x2d4>)
 800859c:	fba3 1302 	umull	r1, r3, r3, r2
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	2164      	movs	r1, #100	@ 0x64
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	3332      	adds	r3, #50	@ 0x32
 80085ae:	4a08      	ldr	r2, [pc, #32]	@ (80085d0 <UART_SetConfig+0x2d4>)
 80085b0:	fba2 2303 	umull	r2, r3, r2, r3
 80085b4:	095b      	lsrs	r3, r3, #5
 80085b6:	f003 0207 	and.w	r2, r3, #7
 80085ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4422      	add	r2, r4
 80085c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085c4:	e106      	b.n	80087d4 <UART_SetConfig+0x4d8>
 80085c6:	bf00      	nop
 80085c8:	40011000 	.word	0x40011000
 80085cc:	40011400 	.word	0x40011400
 80085d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085e6:	4642      	mov	r2, r8
 80085e8:	464b      	mov	r3, r9
 80085ea:	1891      	adds	r1, r2, r2
 80085ec:	6239      	str	r1, [r7, #32]
 80085ee:	415b      	adcs	r3, r3
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085f6:	4641      	mov	r1, r8
 80085f8:	1854      	adds	r4, r2, r1
 80085fa:	4649      	mov	r1, r9
 80085fc:	eb43 0501 	adc.w	r5, r3, r1
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	f04f 0300 	mov.w	r3, #0
 8008608:	00eb      	lsls	r3, r5, #3
 800860a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800860e:	00e2      	lsls	r2, r4, #3
 8008610:	4614      	mov	r4, r2
 8008612:	461d      	mov	r5, r3
 8008614:	4643      	mov	r3, r8
 8008616:	18e3      	adds	r3, r4, r3
 8008618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800861c:	464b      	mov	r3, r9
 800861e:	eb45 0303 	adc.w	r3, r5, r3
 8008622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008636:	f04f 0200 	mov.w	r2, #0
 800863a:	f04f 0300 	mov.w	r3, #0
 800863e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008642:	4629      	mov	r1, r5
 8008644:	008b      	lsls	r3, r1, #2
 8008646:	4621      	mov	r1, r4
 8008648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800864c:	4621      	mov	r1, r4
 800864e:	008a      	lsls	r2, r1, #2
 8008650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008654:	f7f8 fb38 	bl	8000cc8 <__aeabi_uldivmod>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4b60      	ldr	r3, [pc, #384]	@ (80087e0 <UART_SetConfig+0x4e4>)
 800865e:	fba3 2302 	umull	r2, r3, r3, r2
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	011c      	lsls	r4, r3, #4
 8008666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800866a:	2200      	movs	r2, #0
 800866c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	1891      	adds	r1, r2, r2
 800867e:	61b9      	str	r1, [r7, #24]
 8008680:	415b      	adcs	r3, r3
 8008682:	61fb      	str	r3, [r7, #28]
 8008684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008688:	4641      	mov	r1, r8
 800868a:	1851      	adds	r1, r2, r1
 800868c:	6139      	str	r1, [r7, #16]
 800868e:	4649      	mov	r1, r9
 8008690:	414b      	adcs	r3, r1
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	f04f 0300 	mov.w	r3, #0
 800869c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086a0:	4659      	mov	r1, fp
 80086a2:	00cb      	lsls	r3, r1, #3
 80086a4:	4651      	mov	r1, sl
 80086a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086aa:	4651      	mov	r1, sl
 80086ac:	00ca      	lsls	r2, r1, #3
 80086ae:	4610      	mov	r0, r2
 80086b0:	4619      	mov	r1, r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	4642      	mov	r2, r8
 80086b6:	189b      	adds	r3, r3, r2
 80086b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086bc:	464b      	mov	r3, r9
 80086be:	460a      	mov	r2, r1
 80086c0:	eb42 0303 	adc.w	r3, r2, r3
 80086c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086e0:	4649      	mov	r1, r9
 80086e2:	008b      	lsls	r3, r1, #2
 80086e4:	4641      	mov	r1, r8
 80086e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ea:	4641      	mov	r1, r8
 80086ec:	008a      	lsls	r2, r1, #2
 80086ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80086f2:	f7f8 fae9 	bl	8000cc8 <__aeabi_uldivmod>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4611      	mov	r1, r2
 80086fc:	4b38      	ldr	r3, [pc, #224]	@ (80087e0 <UART_SetConfig+0x4e4>)
 80086fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008702:	095b      	lsrs	r3, r3, #5
 8008704:	2264      	movs	r2, #100	@ 0x64
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	1acb      	subs	r3, r1, r3
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	3332      	adds	r3, #50	@ 0x32
 8008710:	4a33      	ldr	r2, [pc, #204]	@ (80087e0 <UART_SetConfig+0x4e4>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	095b      	lsrs	r3, r3, #5
 8008718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800871c:	441c      	add	r4, r3
 800871e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008722:	2200      	movs	r2, #0
 8008724:	673b      	str	r3, [r7, #112]	@ 0x70
 8008726:	677a      	str	r2, [r7, #116]	@ 0x74
 8008728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	1891      	adds	r1, r2, r2
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	415b      	adcs	r3, r3
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800873c:	4641      	mov	r1, r8
 800873e:	1851      	adds	r1, r2, r1
 8008740:	6039      	str	r1, [r7, #0]
 8008742:	4649      	mov	r1, r9
 8008744:	414b      	adcs	r3, r1
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008754:	4659      	mov	r1, fp
 8008756:	00cb      	lsls	r3, r1, #3
 8008758:	4651      	mov	r1, sl
 800875a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800875e:	4651      	mov	r1, sl
 8008760:	00ca      	lsls	r2, r1, #3
 8008762:	4610      	mov	r0, r2
 8008764:	4619      	mov	r1, r3
 8008766:	4603      	mov	r3, r0
 8008768:	4642      	mov	r2, r8
 800876a:	189b      	adds	r3, r3, r2
 800876c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800876e:	464b      	mov	r3, r9
 8008770:	460a      	mov	r2, r1
 8008772:	eb42 0303 	adc.w	r3, r2, r3
 8008776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	663b      	str	r3, [r7, #96]	@ 0x60
 8008782:	667a      	str	r2, [r7, #100]	@ 0x64
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 0300 	mov.w	r3, #0
 800878c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008790:	4649      	mov	r1, r9
 8008792:	008b      	lsls	r3, r1, #2
 8008794:	4641      	mov	r1, r8
 8008796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800879a:	4641      	mov	r1, r8
 800879c:	008a      	lsls	r2, r1, #2
 800879e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087a2:	f7f8 fa91 	bl	8000cc8 <__aeabi_uldivmod>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <UART_SetConfig+0x4e4>)
 80087ac:	fba3 1302 	umull	r1, r3, r3, r2
 80087b0:	095b      	lsrs	r3, r3, #5
 80087b2:	2164      	movs	r1, #100	@ 0x64
 80087b4:	fb01 f303 	mul.w	r3, r1, r3
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	3332      	adds	r3, #50	@ 0x32
 80087be:	4a08      	ldr	r2, [pc, #32]	@ (80087e0 <UART_SetConfig+0x4e4>)
 80087c0:	fba2 2303 	umull	r2, r3, r2, r3
 80087c4:	095b      	lsrs	r3, r3, #5
 80087c6:	f003 020f 	and.w	r2, r3, #15
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4422      	add	r2, r4
 80087d2:	609a      	str	r2, [r3, #8]
}
 80087d4:	bf00      	nop
 80087d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087da:	46bd      	mov	sp, r7
 80087dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087e0:	51eb851f 	.word	0x51eb851f

080087e4 <__cvt>:
 80087e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	ec57 6b10 	vmov	r6, r7, d0
 80087ec:	2f00      	cmp	r7, #0
 80087ee:	460c      	mov	r4, r1
 80087f0:	4619      	mov	r1, r3
 80087f2:	463b      	mov	r3, r7
 80087f4:	bfbb      	ittet	lt
 80087f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087fa:	461f      	movlt	r7, r3
 80087fc:	2300      	movge	r3, #0
 80087fe:	232d      	movlt	r3, #45	@ 0x2d
 8008800:	700b      	strb	r3, [r1, #0]
 8008802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008804:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008808:	4691      	mov	r9, r2
 800880a:	f023 0820 	bic.w	r8, r3, #32
 800880e:	bfbc      	itt	lt
 8008810:	4632      	movlt	r2, r6
 8008812:	4616      	movlt	r6, r2
 8008814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008818:	d005      	beq.n	8008826 <__cvt+0x42>
 800881a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800881e:	d100      	bne.n	8008822 <__cvt+0x3e>
 8008820:	3401      	adds	r4, #1
 8008822:	2102      	movs	r1, #2
 8008824:	e000      	b.n	8008828 <__cvt+0x44>
 8008826:	2103      	movs	r1, #3
 8008828:	ab03      	add	r3, sp, #12
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	ab02      	add	r3, sp, #8
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	ec47 6b10 	vmov	d0, r6, r7
 8008834:	4653      	mov	r3, sl
 8008836:	4622      	mov	r2, r4
 8008838:	f001 f986 	bl	8009b48 <_dtoa_r>
 800883c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008840:	4605      	mov	r5, r0
 8008842:	d119      	bne.n	8008878 <__cvt+0x94>
 8008844:	f019 0f01 	tst.w	r9, #1
 8008848:	d00e      	beq.n	8008868 <__cvt+0x84>
 800884a:	eb00 0904 	add.w	r9, r0, r4
 800884e:	2200      	movs	r2, #0
 8008850:	2300      	movs	r3, #0
 8008852:	4630      	mov	r0, r6
 8008854:	4639      	mov	r1, r7
 8008856:	f7f8 f957 	bl	8000b08 <__aeabi_dcmpeq>
 800885a:	b108      	cbz	r0, 8008860 <__cvt+0x7c>
 800885c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008860:	2230      	movs	r2, #48	@ 0x30
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	454b      	cmp	r3, r9
 8008866:	d31e      	bcc.n	80088a6 <__cvt+0xc2>
 8008868:	9b03      	ldr	r3, [sp, #12]
 800886a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800886c:	1b5b      	subs	r3, r3, r5
 800886e:	4628      	mov	r0, r5
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	b004      	add	sp, #16
 8008874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800887c:	eb00 0904 	add.w	r9, r0, r4
 8008880:	d1e5      	bne.n	800884e <__cvt+0x6a>
 8008882:	7803      	ldrb	r3, [r0, #0]
 8008884:	2b30      	cmp	r3, #48	@ 0x30
 8008886:	d10a      	bne.n	800889e <__cvt+0xba>
 8008888:	2200      	movs	r2, #0
 800888a:	2300      	movs	r3, #0
 800888c:	4630      	mov	r0, r6
 800888e:	4639      	mov	r1, r7
 8008890:	f7f8 f93a 	bl	8000b08 <__aeabi_dcmpeq>
 8008894:	b918      	cbnz	r0, 800889e <__cvt+0xba>
 8008896:	f1c4 0401 	rsb	r4, r4, #1
 800889a:	f8ca 4000 	str.w	r4, [sl]
 800889e:	f8da 3000 	ldr.w	r3, [sl]
 80088a2:	4499      	add	r9, r3
 80088a4:	e7d3      	b.n	800884e <__cvt+0x6a>
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	9103      	str	r1, [sp, #12]
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e7d9      	b.n	8008862 <__cvt+0x7e>

080088ae <__exponent>:
 80088ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b0:	2900      	cmp	r1, #0
 80088b2:	bfba      	itte	lt
 80088b4:	4249      	neglt	r1, r1
 80088b6:	232d      	movlt	r3, #45	@ 0x2d
 80088b8:	232b      	movge	r3, #43	@ 0x2b
 80088ba:	2909      	cmp	r1, #9
 80088bc:	7002      	strb	r2, [r0, #0]
 80088be:	7043      	strb	r3, [r0, #1]
 80088c0:	dd29      	ble.n	8008916 <__exponent+0x68>
 80088c2:	f10d 0307 	add.w	r3, sp, #7
 80088c6:	461d      	mov	r5, r3
 80088c8:	270a      	movs	r7, #10
 80088ca:	461a      	mov	r2, r3
 80088cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80088d0:	fb07 1416 	mls	r4, r7, r6, r1
 80088d4:	3430      	adds	r4, #48	@ 0x30
 80088d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80088da:	460c      	mov	r4, r1
 80088dc:	2c63      	cmp	r4, #99	@ 0x63
 80088de:	f103 33ff 	add.w	r3, r3, #4294967295
 80088e2:	4631      	mov	r1, r6
 80088e4:	dcf1      	bgt.n	80088ca <__exponent+0x1c>
 80088e6:	3130      	adds	r1, #48	@ 0x30
 80088e8:	1e94      	subs	r4, r2, #2
 80088ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ee:	1c41      	adds	r1, r0, #1
 80088f0:	4623      	mov	r3, r4
 80088f2:	42ab      	cmp	r3, r5
 80088f4:	d30a      	bcc.n	800890c <__exponent+0x5e>
 80088f6:	f10d 0309 	add.w	r3, sp, #9
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	42ac      	cmp	r4, r5
 80088fe:	bf88      	it	hi
 8008900:	2300      	movhi	r3, #0
 8008902:	3302      	adds	r3, #2
 8008904:	4403      	add	r3, r0
 8008906:	1a18      	subs	r0, r3, r0
 8008908:	b003      	add	sp, #12
 800890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800890c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008910:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008914:	e7ed      	b.n	80088f2 <__exponent+0x44>
 8008916:	2330      	movs	r3, #48	@ 0x30
 8008918:	3130      	adds	r1, #48	@ 0x30
 800891a:	7083      	strb	r3, [r0, #2]
 800891c:	70c1      	strb	r1, [r0, #3]
 800891e:	1d03      	adds	r3, r0, #4
 8008920:	e7f1      	b.n	8008906 <__exponent+0x58>
	...

08008924 <_printf_float>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	b08d      	sub	sp, #52	@ 0x34
 800892a:	460c      	mov	r4, r1
 800892c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008930:	4616      	mov	r6, r2
 8008932:	461f      	mov	r7, r3
 8008934:	4605      	mov	r5, r0
 8008936:	f000 fff3 	bl	8009920 <_localeconv_r>
 800893a:	6803      	ldr	r3, [r0, #0]
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	4618      	mov	r0, r3
 8008940:	f7f7 fcb6 	bl	80002b0 <strlen>
 8008944:	2300      	movs	r3, #0
 8008946:	930a      	str	r3, [sp, #40]	@ 0x28
 8008948:	f8d8 3000 	ldr.w	r3, [r8]
 800894c:	9005      	str	r0, [sp, #20]
 800894e:	3307      	adds	r3, #7
 8008950:	f023 0307 	bic.w	r3, r3, #7
 8008954:	f103 0208 	add.w	r2, r3, #8
 8008958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800895c:	f8d4 b000 	ldr.w	fp, [r4]
 8008960:	f8c8 2000 	str.w	r2, [r8]
 8008964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800896c:	9307      	str	r3, [sp, #28]
 800896e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008972:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800897a:	4b9c      	ldr	r3, [pc, #624]	@ (8008bec <_printf_float+0x2c8>)
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	f7f8 f8f4 	bl	8000b6c <__aeabi_dcmpun>
 8008984:	bb70      	cbnz	r0, 80089e4 <_printf_float+0xc0>
 8008986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800898a:	4b98      	ldr	r3, [pc, #608]	@ (8008bec <_printf_float+0x2c8>)
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	f7f8 f8ce 	bl	8000b30 <__aeabi_dcmple>
 8008994:	bb30      	cbnz	r0, 80089e4 <_printf_float+0xc0>
 8008996:	2200      	movs	r2, #0
 8008998:	2300      	movs	r3, #0
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	f7f8 f8bd 	bl	8000b1c <__aeabi_dcmplt>
 80089a2:	b110      	cbz	r0, 80089aa <_printf_float+0x86>
 80089a4:	232d      	movs	r3, #45	@ 0x2d
 80089a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089aa:	4a91      	ldr	r2, [pc, #580]	@ (8008bf0 <_printf_float+0x2cc>)
 80089ac:	4b91      	ldr	r3, [pc, #580]	@ (8008bf4 <_printf_float+0x2d0>)
 80089ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089b2:	bf94      	ite	ls
 80089b4:	4690      	movls	r8, r2
 80089b6:	4698      	movhi	r8, r3
 80089b8:	2303      	movs	r3, #3
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	f02b 0304 	bic.w	r3, fp, #4
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	f04f 0900 	mov.w	r9, #0
 80089c6:	9700      	str	r7, [sp, #0]
 80089c8:	4633      	mov	r3, r6
 80089ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089cc:	4621      	mov	r1, r4
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 f9d2 	bl	8008d78 <_printf_common>
 80089d4:	3001      	adds	r0, #1
 80089d6:	f040 808d 	bne.w	8008af4 <_printf_float+0x1d0>
 80089da:	f04f 30ff 	mov.w	r0, #4294967295
 80089de:	b00d      	add	sp, #52	@ 0x34
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	4642      	mov	r2, r8
 80089e6:	464b      	mov	r3, r9
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f8 f8be 	bl	8000b6c <__aeabi_dcmpun>
 80089f0:	b140      	cbz	r0, 8008a04 <_printf_float+0xe0>
 80089f2:	464b      	mov	r3, r9
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bfbc      	itt	lt
 80089f8:	232d      	movlt	r3, #45	@ 0x2d
 80089fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80089fe:	4a7e      	ldr	r2, [pc, #504]	@ (8008bf8 <_printf_float+0x2d4>)
 8008a00:	4b7e      	ldr	r3, [pc, #504]	@ (8008bfc <_printf_float+0x2d8>)
 8008a02:	e7d4      	b.n	80089ae <_printf_float+0x8a>
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a0a:	9206      	str	r2, [sp, #24]
 8008a0c:	1c5a      	adds	r2, r3, #1
 8008a0e:	d13b      	bne.n	8008a88 <_printf_float+0x164>
 8008a10:	2306      	movs	r3, #6
 8008a12:	6063      	str	r3, [r4, #4]
 8008a14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6022      	str	r2, [r4, #0]
 8008a1c:	9303      	str	r3, [sp, #12]
 8008a1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a24:	ab09      	add	r3, sp, #36	@ 0x24
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	6861      	ldr	r1, [r4, #4]
 8008a2a:	ec49 8b10 	vmov	d0, r8, r9
 8008a2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a32:	4628      	mov	r0, r5
 8008a34:	f7ff fed6 	bl	80087e4 <__cvt>
 8008a38:	9b06      	ldr	r3, [sp, #24]
 8008a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a3c:	2b47      	cmp	r3, #71	@ 0x47
 8008a3e:	4680      	mov	r8, r0
 8008a40:	d129      	bne.n	8008a96 <_printf_float+0x172>
 8008a42:	1cc8      	adds	r0, r1, #3
 8008a44:	db02      	blt.n	8008a4c <_printf_float+0x128>
 8008a46:	6863      	ldr	r3, [r4, #4]
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	dd41      	ble.n	8008ad0 <_printf_float+0x1ac>
 8008a4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a50:	fa5f fa8a 	uxtb.w	sl, sl
 8008a54:	3901      	subs	r1, #1
 8008a56:	4652      	mov	r2, sl
 8008a58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a5e:	f7ff ff26 	bl	80088ae <__exponent>
 8008a62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a64:	1813      	adds	r3, r2, r0
 8008a66:	2a01      	cmp	r2, #1
 8008a68:	4681      	mov	r9, r0
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	dc02      	bgt.n	8008a74 <_printf_float+0x150>
 8008a6e:	6822      	ldr	r2, [r4, #0]
 8008a70:	07d2      	lsls	r2, r2, #31
 8008a72:	d501      	bpl.n	8008a78 <_printf_float+0x154>
 8008a74:	3301      	adds	r3, #1
 8008a76:	6123      	str	r3, [r4, #16]
 8008a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0a2      	beq.n	80089c6 <_printf_float+0xa2>
 8008a80:	232d      	movs	r3, #45	@ 0x2d
 8008a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a86:	e79e      	b.n	80089c6 <_printf_float+0xa2>
 8008a88:	9a06      	ldr	r2, [sp, #24]
 8008a8a:	2a47      	cmp	r2, #71	@ 0x47
 8008a8c:	d1c2      	bne.n	8008a14 <_printf_float+0xf0>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1c0      	bne.n	8008a14 <_printf_float+0xf0>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7bd      	b.n	8008a12 <_printf_float+0xee>
 8008a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a9a:	d9db      	bls.n	8008a54 <_printf_float+0x130>
 8008a9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008aa0:	d118      	bne.n	8008ad4 <_printf_float+0x1b0>
 8008aa2:	2900      	cmp	r1, #0
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	dd0b      	ble.n	8008ac0 <_printf_float+0x19c>
 8008aa8:	6121      	str	r1, [r4, #16]
 8008aaa:	b913      	cbnz	r3, 8008ab2 <_printf_float+0x18e>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	07d0      	lsls	r0, r2, #31
 8008ab0:	d502      	bpl.n	8008ab8 <_printf_float+0x194>
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	440b      	add	r3, r1
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008aba:	f04f 0900 	mov.w	r9, #0
 8008abe:	e7db      	b.n	8008a78 <_printf_float+0x154>
 8008ac0:	b913      	cbnz	r3, 8008ac8 <_printf_float+0x1a4>
 8008ac2:	6822      	ldr	r2, [r4, #0]
 8008ac4:	07d2      	lsls	r2, r2, #31
 8008ac6:	d501      	bpl.n	8008acc <_printf_float+0x1a8>
 8008ac8:	3302      	adds	r3, #2
 8008aca:	e7f4      	b.n	8008ab6 <_printf_float+0x192>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e7f2      	b.n	8008ab6 <_printf_float+0x192>
 8008ad0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	db05      	blt.n	8008ae6 <_printf_float+0x1c2>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	6121      	str	r1, [r4, #16]
 8008ade:	07d8      	lsls	r0, r3, #31
 8008ae0:	d5ea      	bpl.n	8008ab8 <_printf_float+0x194>
 8008ae2:	1c4b      	adds	r3, r1, #1
 8008ae4:	e7e7      	b.n	8008ab6 <_printf_float+0x192>
 8008ae6:	2900      	cmp	r1, #0
 8008ae8:	bfd4      	ite	le
 8008aea:	f1c1 0202 	rsble	r2, r1, #2
 8008aee:	2201      	movgt	r2, #1
 8008af0:	4413      	add	r3, r2
 8008af2:	e7e0      	b.n	8008ab6 <_printf_float+0x192>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	055a      	lsls	r2, r3, #21
 8008af8:	d407      	bmi.n	8008b0a <_printf_float+0x1e6>
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	4642      	mov	r2, r8
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	47b8      	blx	r7
 8008b04:	3001      	adds	r0, #1
 8008b06:	d12b      	bne.n	8008b60 <_printf_float+0x23c>
 8008b08:	e767      	b.n	80089da <_printf_float+0xb6>
 8008b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b0e:	f240 80dd 	bls.w	8008ccc <_printf_float+0x3a8>
 8008b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b16:	2200      	movs	r2, #0
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f7f7 fff5 	bl	8000b08 <__aeabi_dcmpeq>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d033      	beq.n	8008b8a <_printf_float+0x266>
 8008b22:	4a37      	ldr	r2, [pc, #220]	@ (8008c00 <_printf_float+0x2dc>)
 8008b24:	2301      	movs	r3, #1
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	f43f af54 	beq.w	80089da <_printf_float+0xb6>
 8008b32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b36:	4543      	cmp	r3, r8
 8008b38:	db02      	blt.n	8008b40 <_printf_float+0x21c>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	07d8      	lsls	r0, r3, #31
 8008b3e:	d50f      	bpl.n	8008b60 <_printf_float+0x23c>
 8008b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f af45 	beq.w	80089da <_printf_float+0xb6>
 8008b50:	f04f 0900 	mov.w	r9, #0
 8008b54:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b58:	f104 0a1a 	add.w	sl, r4, #26
 8008b5c:	45c8      	cmp	r8, r9
 8008b5e:	dc09      	bgt.n	8008b74 <_printf_float+0x250>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	079b      	lsls	r3, r3, #30
 8008b64:	f100 8103 	bmi.w	8008d6e <_printf_float+0x44a>
 8008b68:	68e0      	ldr	r0, [r4, #12]
 8008b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6c:	4298      	cmp	r0, r3
 8008b6e:	bfb8      	it	lt
 8008b70:	4618      	movlt	r0, r3
 8008b72:	e734      	b.n	80089de <_printf_float+0xba>
 8008b74:	2301      	movs	r3, #1
 8008b76:	4652      	mov	r2, sl
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b8      	blx	r7
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f af2b 	beq.w	80089da <_printf_float+0xb6>
 8008b84:	f109 0901 	add.w	r9, r9, #1
 8008b88:	e7e8      	b.n	8008b5c <_printf_float+0x238>
 8008b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc39      	bgt.n	8008c04 <_printf_float+0x2e0>
 8008b90:	4a1b      	ldr	r2, [pc, #108]	@ (8008c00 <_printf_float+0x2dc>)
 8008b92:	2301      	movs	r3, #1
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af1d 	beq.w	80089da <_printf_float+0xb6>
 8008ba0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ba4:	ea59 0303 	orrs.w	r3, r9, r3
 8008ba8:	d102      	bne.n	8008bb0 <_printf_float+0x28c>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	07d9      	lsls	r1, r3, #31
 8008bae:	d5d7      	bpl.n	8008b60 <_printf_float+0x23c>
 8008bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f43f af0d 	beq.w	80089da <_printf_float+0xb6>
 8008bc0:	f04f 0a00 	mov.w	sl, #0
 8008bc4:	f104 0b1a 	add.w	fp, r4, #26
 8008bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bca:	425b      	negs	r3, r3
 8008bcc:	4553      	cmp	r3, sl
 8008bce:	dc01      	bgt.n	8008bd4 <_printf_float+0x2b0>
 8008bd0:	464b      	mov	r3, r9
 8008bd2:	e793      	b.n	8008afc <_printf_float+0x1d8>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	465a      	mov	r2, fp
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b8      	blx	r7
 8008bde:	3001      	adds	r0, #1
 8008be0:	f43f aefb 	beq.w	80089da <_printf_float+0xb6>
 8008be4:	f10a 0a01 	add.w	sl, sl, #1
 8008be8:	e7ee      	b.n	8008bc8 <_printf_float+0x2a4>
 8008bea:	bf00      	nop
 8008bec:	7fefffff 	.word	0x7fefffff
 8008bf0:	0800d71c 	.word	0x0800d71c
 8008bf4:	0800d720 	.word	0x0800d720
 8008bf8:	0800d724 	.word	0x0800d724
 8008bfc:	0800d728 	.word	0x0800d728
 8008c00:	0800d72c 	.word	0x0800d72c
 8008c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c0a:	4553      	cmp	r3, sl
 8008c0c:	bfa8      	it	ge
 8008c0e:	4653      	movge	r3, sl
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	4699      	mov	r9, r3
 8008c14:	dc36      	bgt.n	8008c84 <_printf_float+0x360>
 8008c16:	f04f 0b00 	mov.w	fp, #0
 8008c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c1e:	f104 021a 	add.w	r2, r4, #26
 8008c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c24:	9306      	str	r3, [sp, #24]
 8008c26:	eba3 0309 	sub.w	r3, r3, r9
 8008c2a:	455b      	cmp	r3, fp
 8008c2c:	dc31      	bgt.n	8008c92 <_printf_float+0x36e>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	459a      	cmp	sl, r3
 8008c32:	dc3a      	bgt.n	8008caa <_printf_float+0x386>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	07da      	lsls	r2, r3, #31
 8008c38:	d437      	bmi.n	8008caa <_printf_float+0x386>
 8008c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8008c40:	9b06      	ldr	r3, [sp, #24]
 8008c42:	ebaa 0303 	sub.w	r3, sl, r3
 8008c46:	4599      	cmp	r9, r3
 8008c48:	bfa8      	it	ge
 8008c4a:	4699      	movge	r9, r3
 8008c4c:	f1b9 0f00 	cmp.w	r9, #0
 8008c50:	dc33      	bgt.n	8008cba <_printf_float+0x396>
 8008c52:	f04f 0800 	mov.w	r8, #0
 8008c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c5a:	f104 0b1a 	add.w	fp, r4, #26
 8008c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c60:	ebaa 0303 	sub.w	r3, sl, r3
 8008c64:	eba3 0309 	sub.w	r3, r3, r9
 8008c68:	4543      	cmp	r3, r8
 8008c6a:	f77f af79 	ble.w	8008b60 <_printf_float+0x23c>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	465a      	mov	r2, fp
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f aeae 	beq.w	80089da <_printf_float+0xb6>
 8008c7e:	f108 0801 	add.w	r8, r8, #1
 8008c82:	e7ec      	b.n	8008c5e <_printf_float+0x33a>
 8008c84:	4642      	mov	r2, r8
 8008c86:	4631      	mov	r1, r6
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d1c2      	bne.n	8008c16 <_printf_float+0x2f2>
 8008c90:	e6a3      	b.n	80089da <_printf_float+0xb6>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4631      	mov	r1, r6
 8008c96:	4628      	mov	r0, r5
 8008c98:	9206      	str	r2, [sp, #24]
 8008c9a:	47b8      	blx	r7
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	f43f ae9c 	beq.w	80089da <_printf_float+0xb6>
 8008ca2:	9a06      	ldr	r2, [sp, #24]
 8008ca4:	f10b 0b01 	add.w	fp, fp, #1
 8008ca8:	e7bb      	b.n	8008c22 <_printf_float+0x2fe>
 8008caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b8      	blx	r7
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d1c0      	bne.n	8008c3a <_printf_float+0x316>
 8008cb8:	e68f      	b.n	80089da <_printf_float+0xb6>
 8008cba:	9a06      	ldr	r2, [sp, #24]
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	4442      	add	r2, r8
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d1c3      	bne.n	8008c52 <_printf_float+0x32e>
 8008cca:	e686      	b.n	80089da <_printf_float+0xb6>
 8008ccc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cd0:	f1ba 0f01 	cmp.w	sl, #1
 8008cd4:	dc01      	bgt.n	8008cda <_printf_float+0x3b6>
 8008cd6:	07db      	lsls	r3, r3, #31
 8008cd8:	d536      	bpl.n	8008d48 <_printf_float+0x424>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4642      	mov	r2, r8
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f43f ae78 	beq.w	80089da <_printf_float+0xb6>
 8008cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f43f ae70 	beq.w	80089da <_printf_float+0xb6>
 8008cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2300      	movs	r3, #0
 8008d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d06:	f7f7 feff 	bl	8000b08 <__aeabi_dcmpeq>
 8008d0a:	b9c0      	cbnz	r0, 8008d3e <_printf_float+0x41a>
 8008d0c:	4653      	mov	r3, sl
 8008d0e:	f108 0201 	add.w	r2, r8, #1
 8008d12:	4631      	mov	r1, r6
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d10c      	bne.n	8008d36 <_printf_float+0x412>
 8008d1c:	e65d      	b.n	80089da <_printf_float+0xb6>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	465a      	mov	r2, fp
 8008d22:	4631      	mov	r1, r6
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b8      	blx	r7
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f43f ae56 	beq.w	80089da <_printf_float+0xb6>
 8008d2e:	f108 0801 	add.w	r8, r8, #1
 8008d32:	45d0      	cmp	r8, sl
 8008d34:	dbf3      	blt.n	8008d1e <_printf_float+0x3fa>
 8008d36:	464b      	mov	r3, r9
 8008d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d3c:	e6df      	b.n	8008afe <_printf_float+0x1da>
 8008d3e:	f04f 0800 	mov.w	r8, #0
 8008d42:	f104 0b1a 	add.w	fp, r4, #26
 8008d46:	e7f4      	b.n	8008d32 <_printf_float+0x40e>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	e7e1      	b.n	8008d12 <_printf_float+0x3ee>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	464a      	mov	r2, r9
 8008d52:	4631      	mov	r1, r6
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b8      	blx	r7
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f43f ae3e 	beq.w	80089da <_printf_float+0xb6>
 8008d5e:	f108 0801 	add.w	r8, r8, #1
 8008d62:	68e3      	ldr	r3, [r4, #12]
 8008d64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d66:	1a5b      	subs	r3, r3, r1
 8008d68:	4543      	cmp	r3, r8
 8008d6a:	dcf0      	bgt.n	8008d4e <_printf_float+0x42a>
 8008d6c:	e6fc      	b.n	8008b68 <_printf_float+0x244>
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	f104 0919 	add.w	r9, r4, #25
 8008d76:	e7f4      	b.n	8008d62 <_printf_float+0x43e>

08008d78 <_printf_common>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	4698      	mov	r8, r3
 8008d80:	688a      	ldr	r2, [r1, #8]
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	bfb8      	it	lt
 8008d8c:	4613      	movlt	r3, r2
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d94:	4607      	mov	r7, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	b10a      	cbz	r2, 8008d9e <_printf_common+0x26>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	0699      	lsls	r1, r3, #26
 8008da2:	bf42      	ittt	mi
 8008da4:	6833      	ldrmi	r3, [r6, #0]
 8008da6:	3302      	addmi	r3, #2
 8008da8:	6033      	strmi	r3, [r6, #0]
 8008daa:	6825      	ldr	r5, [r4, #0]
 8008dac:	f015 0506 	ands.w	r5, r5, #6
 8008db0:	d106      	bne.n	8008dc0 <_printf_common+0x48>
 8008db2:	f104 0a19 	add.w	sl, r4, #25
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	6832      	ldr	r2, [r6, #0]
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	dc26      	bgt.n	8008e0e <_printf_common+0x96>
 8008dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	3b00      	subs	r3, #0
 8008dc8:	bf18      	it	ne
 8008dca:	2301      	movne	r3, #1
 8008dcc:	0692      	lsls	r2, r2, #26
 8008dce:	d42b      	bmi.n	8008e28 <_printf_common+0xb0>
 8008dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	47c8      	blx	r9
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d01e      	beq.n	8008e1c <_printf_common+0xa4>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6922      	ldr	r2, [r4, #16]
 8008de2:	f003 0306 	and.w	r3, r3, #6
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	bf02      	ittt	eq
 8008dea:	68e5      	ldreq	r5, [r4, #12]
 8008dec:	6833      	ldreq	r3, [r6, #0]
 8008dee:	1aed      	subeq	r5, r5, r3
 8008df0:	68a3      	ldr	r3, [r4, #8]
 8008df2:	bf0c      	ite	eq
 8008df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df8:	2500      	movne	r5, #0
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	bfc4      	itt	gt
 8008dfe:	1a9b      	subgt	r3, r3, r2
 8008e00:	18ed      	addgt	r5, r5, r3
 8008e02:	2600      	movs	r6, #0
 8008e04:	341a      	adds	r4, #26
 8008e06:	42b5      	cmp	r5, r6
 8008e08:	d11a      	bne.n	8008e40 <_printf_common+0xc8>
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	e008      	b.n	8008e20 <_printf_common+0xa8>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4652      	mov	r2, sl
 8008e12:	4641      	mov	r1, r8
 8008e14:	4638      	mov	r0, r7
 8008e16:	47c8      	blx	r9
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d103      	bne.n	8008e24 <_printf_common+0xac>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e24:	3501      	adds	r5, #1
 8008e26:	e7c6      	b.n	8008db6 <_printf_common+0x3e>
 8008e28:	18e1      	adds	r1, r4, r3
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	2030      	movs	r0, #48	@ 0x30
 8008e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e32:	4422      	add	r2, r4
 8008e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	e7c7      	b.n	8008dd0 <_printf_common+0x58>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4622      	mov	r2, r4
 8008e44:	4641      	mov	r1, r8
 8008e46:	4638      	mov	r0, r7
 8008e48:	47c8      	blx	r9
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d0e6      	beq.n	8008e1c <_printf_common+0xa4>
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7d9      	b.n	8008e06 <_printf_common+0x8e>
	...

08008e54 <_printf_i>:
 8008e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	7e0f      	ldrb	r7, [r1, #24]
 8008e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e5c:	2f78      	cmp	r7, #120	@ 0x78
 8008e5e:	4691      	mov	r9, r2
 8008e60:	4680      	mov	r8, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	469a      	mov	sl, r3
 8008e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e6a:	d807      	bhi.n	8008e7c <_printf_i+0x28>
 8008e6c:	2f62      	cmp	r7, #98	@ 0x62
 8008e6e:	d80a      	bhi.n	8008e86 <_printf_i+0x32>
 8008e70:	2f00      	cmp	r7, #0
 8008e72:	f000 80d2 	beq.w	800901a <_printf_i+0x1c6>
 8008e76:	2f58      	cmp	r7, #88	@ 0x58
 8008e78:	f000 80b9 	beq.w	8008fee <_printf_i+0x19a>
 8008e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e84:	e03a      	b.n	8008efc <_printf_i+0xa8>
 8008e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e8a:	2b15      	cmp	r3, #21
 8008e8c:	d8f6      	bhi.n	8008e7c <_printf_i+0x28>
 8008e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e94 <_printf_i+0x40>)
 8008e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008f01 	.word	0x08008f01
 8008e9c:	08008e7d 	.word	0x08008e7d
 8008ea0:	08008e7d 	.word	0x08008e7d
 8008ea4:	08008e7d 	.word	0x08008e7d
 8008ea8:	08008e7d 	.word	0x08008e7d
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008e7d 	.word	0x08008e7d
 8008eb4:	08008e7d 	.word	0x08008e7d
 8008eb8:	08008e7d 	.word	0x08008e7d
 8008ebc:	08008e7d 	.word	0x08008e7d
 8008ec0:	08009001 	.word	0x08009001
 8008ec4:	08008f2b 	.word	0x08008f2b
 8008ec8:	08008fbb 	.word	0x08008fbb
 8008ecc:	08008e7d 	.word	0x08008e7d
 8008ed0:	08008e7d 	.word	0x08008e7d
 8008ed4:	08009023 	.word	0x08009023
 8008ed8:	08008e7d 	.word	0x08008e7d
 8008edc:	08008f2b 	.word	0x08008f2b
 8008ee0:	08008e7d 	.word	0x08008e7d
 8008ee4:	08008e7d 	.word	0x08008e7d
 8008ee8:	08008fc3 	.word	0x08008fc3
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	1d1a      	adds	r2, r3, #4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6032      	str	r2, [r6, #0]
 8008ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008efc:	2301      	movs	r3, #1
 8008efe:	e09d      	b.n	800903c <_printf_i+0x1e8>
 8008f00:	6833      	ldr	r3, [r6, #0]
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	6031      	str	r1, [r6, #0]
 8008f08:	0606      	lsls	r6, r0, #24
 8008f0a:	d501      	bpl.n	8008f10 <_printf_i+0xbc>
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	e003      	b.n	8008f18 <_printf_i+0xc4>
 8008f10:	0645      	lsls	r5, r0, #25
 8008f12:	d5fb      	bpl.n	8008f0c <_printf_i+0xb8>
 8008f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	da03      	bge.n	8008f24 <_printf_i+0xd0>
 8008f1c:	232d      	movs	r3, #45	@ 0x2d
 8008f1e:	426d      	negs	r5, r5
 8008f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f24:	4859      	ldr	r0, [pc, #356]	@ (800908c <_printf_i+0x238>)
 8008f26:	230a      	movs	r3, #10
 8008f28:	e011      	b.n	8008f4e <_printf_i+0xfa>
 8008f2a:	6821      	ldr	r1, [r4, #0]
 8008f2c:	6833      	ldr	r3, [r6, #0]
 8008f2e:	0608      	lsls	r0, r1, #24
 8008f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f34:	d402      	bmi.n	8008f3c <_printf_i+0xe8>
 8008f36:	0649      	lsls	r1, r1, #25
 8008f38:	bf48      	it	mi
 8008f3a:	b2ad      	uxthmi	r5, r5
 8008f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f3e:	4853      	ldr	r0, [pc, #332]	@ (800908c <_printf_i+0x238>)
 8008f40:	6033      	str	r3, [r6, #0]
 8008f42:	bf14      	ite	ne
 8008f44:	230a      	movne	r3, #10
 8008f46:	2308      	moveq	r3, #8
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f4e:	6866      	ldr	r6, [r4, #4]
 8008f50:	60a6      	str	r6, [r4, #8]
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	bfa2      	ittt	ge
 8008f56:	6821      	ldrge	r1, [r4, #0]
 8008f58:	f021 0104 	bicge.w	r1, r1, #4
 8008f5c:	6021      	strge	r1, [r4, #0]
 8008f5e:	b90d      	cbnz	r5, 8008f64 <_printf_i+0x110>
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	d04b      	beq.n	8008ffc <_printf_i+0x1a8>
 8008f64:	4616      	mov	r6, r2
 8008f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f6e:	5dc7      	ldrb	r7, [r0, r7]
 8008f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f74:	462f      	mov	r7, r5
 8008f76:	42bb      	cmp	r3, r7
 8008f78:	460d      	mov	r5, r1
 8008f7a:	d9f4      	bls.n	8008f66 <_printf_i+0x112>
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d10b      	bne.n	8008f98 <_printf_i+0x144>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07df      	lsls	r7, r3, #31
 8008f84:	d508      	bpl.n	8008f98 <_printf_i+0x144>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	6861      	ldr	r1, [r4, #4]
 8008f8a:	4299      	cmp	r1, r3
 8008f8c:	bfde      	ittt	le
 8008f8e:	2330      	movle	r3, #48	@ 0x30
 8008f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f98:	1b92      	subs	r2, r2, r6
 8008f9a:	6122      	str	r2, [r4, #16]
 8008f9c:	f8cd a000 	str.w	sl, [sp]
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	aa03      	add	r2, sp, #12
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7ff fee6 	bl	8008d78 <_printf_common>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d14a      	bne.n	8009046 <_printf_i+0x1f2>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	b004      	add	sp, #16
 8008fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	f043 0320 	orr.w	r3, r3, #32
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	4833      	ldr	r0, [pc, #204]	@ (8009090 <_printf_i+0x23c>)
 8008fc4:	2778      	movs	r7, #120	@ 0x78
 8008fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	6831      	ldr	r1, [r6, #0]
 8008fce:	061f      	lsls	r7, r3, #24
 8008fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fd4:	d402      	bmi.n	8008fdc <_printf_i+0x188>
 8008fd6:	065f      	lsls	r7, r3, #25
 8008fd8:	bf48      	it	mi
 8008fda:	b2ad      	uxthmi	r5, r5
 8008fdc:	6031      	str	r1, [r6, #0]
 8008fde:	07d9      	lsls	r1, r3, #31
 8008fe0:	bf44      	itt	mi
 8008fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fe6:	6023      	strmi	r3, [r4, #0]
 8008fe8:	b11d      	cbz	r5, 8008ff2 <_printf_i+0x19e>
 8008fea:	2310      	movs	r3, #16
 8008fec:	e7ac      	b.n	8008f48 <_printf_i+0xf4>
 8008fee:	4827      	ldr	r0, [pc, #156]	@ (800908c <_printf_i+0x238>)
 8008ff0:	e7e9      	b.n	8008fc6 <_printf_i+0x172>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	f023 0320 	bic.w	r3, r3, #32
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	e7f6      	b.n	8008fea <_printf_i+0x196>
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	e7bd      	b.n	8008f7c <_printf_i+0x128>
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	6825      	ldr	r5, [r4, #0]
 8009004:	6961      	ldr	r1, [r4, #20]
 8009006:	1d18      	adds	r0, r3, #4
 8009008:	6030      	str	r0, [r6, #0]
 800900a:	062e      	lsls	r6, r5, #24
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	d501      	bpl.n	8009014 <_printf_i+0x1c0>
 8009010:	6019      	str	r1, [r3, #0]
 8009012:	e002      	b.n	800901a <_printf_i+0x1c6>
 8009014:	0668      	lsls	r0, r5, #25
 8009016:	d5fb      	bpl.n	8009010 <_printf_i+0x1bc>
 8009018:	8019      	strh	r1, [r3, #0]
 800901a:	2300      	movs	r3, #0
 800901c:	6123      	str	r3, [r4, #16]
 800901e:	4616      	mov	r6, r2
 8009020:	e7bc      	b.n	8008f9c <_printf_i+0x148>
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	1d1a      	adds	r2, r3, #4
 8009026:	6032      	str	r2, [r6, #0]
 8009028:	681e      	ldr	r6, [r3, #0]
 800902a:	6862      	ldr	r2, [r4, #4]
 800902c:	2100      	movs	r1, #0
 800902e:	4630      	mov	r0, r6
 8009030:	f7f7 f8ee 	bl	8000210 <memchr>
 8009034:	b108      	cbz	r0, 800903a <_printf_i+0x1e6>
 8009036:	1b80      	subs	r0, r0, r6
 8009038:	6060      	str	r0, [r4, #4]
 800903a:	6863      	ldr	r3, [r4, #4]
 800903c:	6123      	str	r3, [r4, #16]
 800903e:	2300      	movs	r3, #0
 8009040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009044:	e7aa      	b.n	8008f9c <_printf_i+0x148>
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	4632      	mov	r2, r6
 800904a:	4649      	mov	r1, r9
 800904c:	4640      	mov	r0, r8
 800904e:	47d0      	blx	sl
 8009050:	3001      	adds	r0, #1
 8009052:	d0ad      	beq.n	8008fb0 <_printf_i+0x15c>
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	079b      	lsls	r3, r3, #30
 8009058:	d413      	bmi.n	8009082 <_printf_i+0x22e>
 800905a:	68e0      	ldr	r0, [r4, #12]
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	4298      	cmp	r0, r3
 8009060:	bfb8      	it	lt
 8009062:	4618      	movlt	r0, r3
 8009064:	e7a6      	b.n	8008fb4 <_printf_i+0x160>
 8009066:	2301      	movs	r3, #1
 8009068:	4632      	mov	r2, r6
 800906a:	4649      	mov	r1, r9
 800906c:	4640      	mov	r0, r8
 800906e:	47d0      	blx	sl
 8009070:	3001      	adds	r0, #1
 8009072:	d09d      	beq.n	8008fb0 <_printf_i+0x15c>
 8009074:	3501      	adds	r5, #1
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	9903      	ldr	r1, [sp, #12]
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	42ab      	cmp	r3, r5
 800907e:	dcf2      	bgt.n	8009066 <_printf_i+0x212>
 8009080:	e7eb      	b.n	800905a <_printf_i+0x206>
 8009082:	2500      	movs	r5, #0
 8009084:	f104 0619 	add.w	r6, r4, #25
 8009088:	e7f5      	b.n	8009076 <_printf_i+0x222>
 800908a:	bf00      	nop
 800908c:	0800d72e 	.word	0x0800d72e
 8009090:	0800d73f 	.word	0x0800d73f

08009094 <_scanf_float>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	b087      	sub	sp, #28
 800909a:	4617      	mov	r7, r2
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	688b      	ldr	r3, [r1, #8]
 80090a0:	1e5a      	subs	r2, r3, #1
 80090a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090a6:	bf81      	itttt	hi
 80090a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80090ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80090b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80090b4:	608b      	strhi	r3, [r1, #8]
 80090b6:	680b      	ldr	r3, [r1, #0]
 80090b8:	460a      	mov	r2, r1
 80090ba:	f04f 0500 	mov.w	r5, #0
 80090be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80090c2:	f842 3b1c 	str.w	r3, [r2], #28
 80090c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80090ca:	4680      	mov	r8, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	bf98      	it	ls
 80090d0:	f04f 0b00 	movls.w	fp, #0
 80090d4:	9201      	str	r2, [sp, #4]
 80090d6:	4616      	mov	r6, r2
 80090d8:	46aa      	mov	sl, r5
 80090da:	46a9      	mov	r9, r5
 80090dc:	9502      	str	r5, [sp, #8]
 80090de:	68a2      	ldr	r2, [r4, #8]
 80090e0:	b152      	cbz	r2, 80090f8 <_scanf_float+0x64>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80090e8:	d864      	bhi.n	80091b4 <_scanf_float+0x120>
 80090ea:	2b40      	cmp	r3, #64	@ 0x40
 80090ec:	d83c      	bhi.n	8009168 <_scanf_float+0xd4>
 80090ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80090f2:	b2c8      	uxtb	r0, r1
 80090f4:	280e      	cmp	r0, #14
 80090f6:	d93a      	bls.n	800916e <_scanf_float+0xda>
 80090f8:	f1b9 0f00 	cmp.w	r9, #0
 80090fc:	d003      	beq.n	8009106 <_scanf_float+0x72>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800910a:	f1ba 0f01 	cmp.w	sl, #1
 800910e:	f200 8117 	bhi.w	8009340 <_scanf_float+0x2ac>
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	429e      	cmp	r6, r3
 8009116:	f200 8108 	bhi.w	800932a <_scanf_float+0x296>
 800911a:	2001      	movs	r0, #1
 800911c:	b007      	add	sp, #28
 800911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009122:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009126:	2a0d      	cmp	r2, #13
 8009128:	d8e6      	bhi.n	80090f8 <_scanf_float+0x64>
 800912a:	a101      	add	r1, pc, #4	@ (adr r1, 8009130 <_scanf_float+0x9c>)
 800912c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009130:	08009277 	.word	0x08009277
 8009134:	080090f9 	.word	0x080090f9
 8009138:	080090f9 	.word	0x080090f9
 800913c:	080090f9 	.word	0x080090f9
 8009140:	080092d7 	.word	0x080092d7
 8009144:	080092af 	.word	0x080092af
 8009148:	080090f9 	.word	0x080090f9
 800914c:	080090f9 	.word	0x080090f9
 8009150:	08009285 	.word	0x08009285
 8009154:	080090f9 	.word	0x080090f9
 8009158:	080090f9 	.word	0x080090f9
 800915c:	080090f9 	.word	0x080090f9
 8009160:	080090f9 	.word	0x080090f9
 8009164:	0800923d 	.word	0x0800923d
 8009168:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800916c:	e7db      	b.n	8009126 <_scanf_float+0x92>
 800916e:	290e      	cmp	r1, #14
 8009170:	d8c2      	bhi.n	80090f8 <_scanf_float+0x64>
 8009172:	a001      	add	r0, pc, #4	@ (adr r0, 8009178 <_scanf_float+0xe4>)
 8009174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009178:	0800922d 	.word	0x0800922d
 800917c:	080090f9 	.word	0x080090f9
 8009180:	0800922d 	.word	0x0800922d
 8009184:	080092c3 	.word	0x080092c3
 8009188:	080090f9 	.word	0x080090f9
 800918c:	080091d5 	.word	0x080091d5
 8009190:	08009213 	.word	0x08009213
 8009194:	08009213 	.word	0x08009213
 8009198:	08009213 	.word	0x08009213
 800919c:	08009213 	.word	0x08009213
 80091a0:	08009213 	.word	0x08009213
 80091a4:	08009213 	.word	0x08009213
 80091a8:	08009213 	.word	0x08009213
 80091ac:	08009213 	.word	0x08009213
 80091b0:	08009213 	.word	0x08009213
 80091b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80091b6:	d809      	bhi.n	80091cc <_scanf_float+0x138>
 80091b8:	2b60      	cmp	r3, #96	@ 0x60
 80091ba:	d8b2      	bhi.n	8009122 <_scanf_float+0x8e>
 80091bc:	2b54      	cmp	r3, #84	@ 0x54
 80091be:	d07b      	beq.n	80092b8 <_scanf_float+0x224>
 80091c0:	2b59      	cmp	r3, #89	@ 0x59
 80091c2:	d199      	bne.n	80090f8 <_scanf_float+0x64>
 80091c4:	2d07      	cmp	r5, #7
 80091c6:	d197      	bne.n	80090f8 <_scanf_float+0x64>
 80091c8:	2508      	movs	r5, #8
 80091ca:	e02c      	b.n	8009226 <_scanf_float+0x192>
 80091cc:	2b74      	cmp	r3, #116	@ 0x74
 80091ce:	d073      	beq.n	80092b8 <_scanf_float+0x224>
 80091d0:	2b79      	cmp	r3, #121	@ 0x79
 80091d2:	e7f6      	b.n	80091c2 <_scanf_float+0x12e>
 80091d4:	6821      	ldr	r1, [r4, #0]
 80091d6:	05c8      	lsls	r0, r1, #23
 80091d8:	d51b      	bpl.n	8009212 <_scanf_float+0x17e>
 80091da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80091de:	6021      	str	r1, [r4, #0]
 80091e0:	f109 0901 	add.w	r9, r9, #1
 80091e4:	f1bb 0f00 	cmp.w	fp, #0
 80091e8:	d003      	beq.n	80091f2 <_scanf_float+0x15e>
 80091ea:	3201      	adds	r2, #1
 80091ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091f0:	60a2      	str	r2, [r4, #8]
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	60a3      	str	r3, [r4, #8]
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	3301      	adds	r3, #1
 80091fc:	6123      	str	r3, [r4, #16]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	607b      	str	r3, [r7, #4]
 8009206:	f340 8087 	ble.w	8009318 <_scanf_float+0x284>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	603b      	str	r3, [r7, #0]
 8009210:	e765      	b.n	80090de <_scanf_float+0x4a>
 8009212:	eb1a 0105 	adds.w	r1, sl, r5
 8009216:	f47f af6f 	bne.w	80090f8 <_scanf_float+0x64>
 800921a:	6822      	ldr	r2, [r4, #0]
 800921c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009220:	6022      	str	r2, [r4, #0]
 8009222:	460d      	mov	r5, r1
 8009224:	468a      	mov	sl, r1
 8009226:	f806 3b01 	strb.w	r3, [r6], #1
 800922a:	e7e2      	b.n	80091f2 <_scanf_float+0x15e>
 800922c:	6822      	ldr	r2, [r4, #0]
 800922e:	0610      	lsls	r0, r2, #24
 8009230:	f57f af62 	bpl.w	80090f8 <_scanf_float+0x64>
 8009234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009238:	6022      	str	r2, [r4, #0]
 800923a:	e7f4      	b.n	8009226 <_scanf_float+0x192>
 800923c:	f1ba 0f00 	cmp.w	sl, #0
 8009240:	d10e      	bne.n	8009260 <_scanf_float+0x1cc>
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d10e      	bne.n	8009266 <_scanf_float+0x1d2>
 8009248:	6822      	ldr	r2, [r4, #0]
 800924a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800924e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009252:	d108      	bne.n	8009266 <_scanf_float+0x1d2>
 8009254:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	f04f 0a01 	mov.w	sl, #1
 800925e:	e7e2      	b.n	8009226 <_scanf_float+0x192>
 8009260:	f1ba 0f02 	cmp.w	sl, #2
 8009264:	d055      	beq.n	8009312 <_scanf_float+0x27e>
 8009266:	2d01      	cmp	r5, #1
 8009268:	d002      	beq.n	8009270 <_scanf_float+0x1dc>
 800926a:	2d04      	cmp	r5, #4
 800926c:	f47f af44 	bne.w	80090f8 <_scanf_float+0x64>
 8009270:	3501      	adds	r5, #1
 8009272:	b2ed      	uxtb	r5, r5
 8009274:	e7d7      	b.n	8009226 <_scanf_float+0x192>
 8009276:	f1ba 0f01 	cmp.w	sl, #1
 800927a:	f47f af3d 	bne.w	80090f8 <_scanf_float+0x64>
 800927e:	f04f 0a02 	mov.w	sl, #2
 8009282:	e7d0      	b.n	8009226 <_scanf_float+0x192>
 8009284:	b97d      	cbnz	r5, 80092a6 <_scanf_float+0x212>
 8009286:	f1b9 0f00 	cmp.w	r9, #0
 800928a:	f47f af38 	bne.w	80090fe <_scanf_float+0x6a>
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009294:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009298:	f040 8108 	bne.w	80094ac <_scanf_float+0x418>
 800929c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092a0:	6022      	str	r2, [r4, #0]
 80092a2:	2501      	movs	r5, #1
 80092a4:	e7bf      	b.n	8009226 <_scanf_float+0x192>
 80092a6:	2d03      	cmp	r5, #3
 80092a8:	d0e2      	beq.n	8009270 <_scanf_float+0x1dc>
 80092aa:	2d05      	cmp	r5, #5
 80092ac:	e7de      	b.n	800926c <_scanf_float+0x1d8>
 80092ae:	2d02      	cmp	r5, #2
 80092b0:	f47f af22 	bne.w	80090f8 <_scanf_float+0x64>
 80092b4:	2503      	movs	r5, #3
 80092b6:	e7b6      	b.n	8009226 <_scanf_float+0x192>
 80092b8:	2d06      	cmp	r5, #6
 80092ba:	f47f af1d 	bne.w	80090f8 <_scanf_float+0x64>
 80092be:	2507      	movs	r5, #7
 80092c0:	e7b1      	b.n	8009226 <_scanf_float+0x192>
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	0591      	lsls	r1, r2, #22
 80092c6:	f57f af17 	bpl.w	80090f8 <_scanf_float+0x64>
 80092ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80092ce:	6022      	str	r2, [r4, #0]
 80092d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80092d4:	e7a7      	b.n	8009226 <_scanf_float+0x192>
 80092d6:	6822      	ldr	r2, [r4, #0]
 80092d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80092dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80092e0:	d006      	beq.n	80092f0 <_scanf_float+0x25c>
 80092e2:	0550      	lsls	r0, r2, #21
 80092e4:	f57f af08 	bpl.w	80090f8 <_scanf_float+0x64>
 80092e8:	f1b9 0f00 	cmp.w	r9, #0
 80092ec:	f000 80de 	beq.w	80094ac <_scanf_float+0x418>
 80092f0:	0591      	lsls	r1, r2, #22
 80092f2:	bf58      	it	pl
 80092f4:	9902      	ldrpl	r1, [sp, #8]
 80092f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092fa:	bf58      	it	pl
 80092fc:	eba9 0101 	subpl.w	r1, r9, r1
 8009300:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009304:	bf58      	it	pl
 8009306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	f04f 0900 	mov.w	r9, #0
 8009310:	e789      	b.n	8009226 <_scanf_float+0x192>
 8009312:	f04f 0a03 	mov.w	sl, #3
 8009316:	e786      	b.n	8009226 <_scanf_float+0x192>
 8009318:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800931c:	4639      	mov	r1, r7
 800931e:	4640      	mov	r0, r8
 8009320:	4798      	blx	r3
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f aedb 	beq.w	80090de <_scanf_float+0x4a>
 8009328:	e6e6      	b.n	80090f8 <_scanf_float+0x64>
 800932a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800932e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009332:	463a      	mov	r2, r7
 8009334:	4640      	mov	r0, r8
 8009336:	4798      	blx	r3
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	3b01      	subs	r3, #1
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	e6e8      	b.n	8009112 <_scanf_float+0x7e>
 8009340:	1e6b      	subs	r3, r5, #1
 8009342:	2b06      	cmp	r3, #6
 8009344:	d824      	bhi.n	8009390 <_scanf_float+0x2fc>
 8009346:	2d02      	cmp	r5, #2
 8009348:	d836      	bhi.n	80093b8 <_scanf_float+0x324>
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	429e      	cmp	r6, r3
 800934e:	f67f aee4 	bls.w	800911a <_scanf_float+0x86>
 8009352:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800935a:	463a      	mov	r2, r7
 800935c:	4640      	mov	r0, r8
 800935e:	4798      	blx	r3
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	3b01      	subs	r3, #1
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	e7f0      	b.n	800934a <_scanf_float+0x2b6>
 8009368:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800936c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009370:	463a      	mov	r2, r7
 8009372:	4640      	mov	r0, r8
 8009374:	4798      	blx	r3
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	3b01      	subs	r3, #1
 800937a:	6123      	str	r3, [r4, #16]
 800937c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009380:	fa5f fa8a 	uxtb.w	sl, sl
 8009384:	f1ba 0f02 	cmp.w	sl, #2
 8009388:	d1ee      	bne.n	8009368 <_scanf_float+0x2d4>
 800938a:	3d03      	subs	r5, #3
 800938c:	b2ed      	uxtb	r5, r5
 800938e:	1b76      	subs	r6, r6, r5
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	05da      	lsls	r2, r3, #23
 8009394:	d530      	bpl.n	80093f8 <_scanf_float+0x364>
 8009396:	055b      	lsls	r3, r3, #21
 8009398:	d511      	bpl.n	80093be <_scanf_float+0x32a>
 800939a:	9b01      	ldr	r3, [sp, #4]
 800939c:	429e      	cmp	r6, r3
 800939e:	f67f aebc 	bls.w	800911a <_scanf_float+0x86>
 80093a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093aa:	463a      	mov	r2, r7
 80093ac:	4640      	mov	r0, r8
 80093ae:	4798      	blx	r3
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	e7f0      	b.n	800939a <_scanf_float+0x306>
 80093b8:	46aa      	mov	sl, r5
 80093ba:	46b3      	mov	fp, r6
 80093bc:	e7de      	b.n	800937c <_scanf_float+0x2e8>
 80093be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	2965      	cmp	r1, #101	@ 0x65
 80093c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80093ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	d00c      	beq.n	80093ec <_scanf_float+0x358>
 80093d2:	2945      	cmp	r1, #69	@ 0x45
 80093d4:	d00a      	beq.n	80093ec <_scanf_float+0x358>
 80093d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093da:	463a      	mov	r2, r7
 80093dc:	4640      	mov	r0, r8
 80093de:	4798      	blx	r3
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	1eb5      	subs	r5, r6, #2
 80093ea:	6123      	str	r3, [r4, #16]
 80093ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093f0:	463a      	mov	r2, r7
 80093f2:	4640      	mov	r0, r8
 80093f4:	4798      	blx	r3
 80093f6:	462e      	mov	r6, r5
 80093f8:	6822      	ldr	r2, [r4, #0]
 80093fa:	f012 0210 	ands.w	r2, r2, #16
 80093fe:	d001      	beq.n	8009404 <_scanf_float+0x370>
 8009400:	2000      	movs	r0, #0
 8009402:	e68b      	b.n	800911c <_scanf_float+0x88>
 8009404:	7032      	strb	r2, [r6, #0]
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800940c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009410:	d11c      	bne.n	800944c <_scanf_float+0x3b8>
 8009412:	9b02      	ldr	r3, [sp, #8]
 8009414:	454b      	cmp	r3, r9
 8009416:	eba3 0209 	sub.w	r2, r3, r9
 800941a:	d123      	bne.n	8009464 <_scanf_float+0x3d0>
 800941c:	9901      	ldr	r1, [sp, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	4640      	mov	r0, r8
 8009422:	f002 fd09 	bl	800be38 <_strtod_r>
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	6821      	ldr	r1, [r4, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f011 0f02 	tst.w	r1, #2
 8009430:	ec57 6b10 	vmov	r6, r7, d0
 8009434:	f103 0204 	add.w	r2, r3, #4
 8009438:	d01f      	beq.n	800947a <_scanf_float+0x3e6>
 800943a:	9903      	ldr	r1, [sp, #12]
 800943c:	600a      	str	r2, [r1, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	e9c3 6700 	strd	r6, r7, [r3]
 8009444:	68e3      	ldr	r3, [r4, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60e3      	str	r3, [r4, #12]
 800944a:	e7d9      	b.n	8009400 <_scanf_float+0x36c>
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0e4      	beq.n	800941c <_scanf_float+0x388>
 8009452:	9905      	ldr	r1, [sp, #20]
 8009454:	230a      	movs	r3, #10
 8009456:	3101      	adds	r1, #1
 8009458:	4640      	mov	r0, r8
 800945a:	f002 fd6d 	bl	800bf38 <_strtol_r>
 800945e:	9b04      	ldr	r3, [sp, #16]
 8009460:	9e05      	ldr	r6, [sp, #20]
 8009462:	1ac2      	subs	r2, r0, r3
 8009464:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009468:	429e      	cmp	r6, r3
 800946a:	bf28      	it	cs
 800946c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009470:	4910      	ldr	r1, [pc, #64]	@ (80094b4 <_scanf_float+0x420>)
 8009472:	4630      	mov	r0, r6
 8009474:	f000 f954 	bl	8009720 <siprintf>
 8009478:	e7d0      	b.n	800941c <_scanf_float+0x388>
 800947a:	f011 0f04 	tst.w	r1, #4
 800947e:	9903      	ldr	r1, [sp, #12]
 8009480:	600a      	str	r2, [r1, #0]
 8009482:	d1dc      	bne.n	800943e <_scanf_float+0x3aa>
 8009484:	681d      	ldr	r5, [r3, #0]
 8009486:	4632      	mov	r2, r6
 8009488:	463b      	mov	r3, r7
 800948a:	4630      	mov	r0, r6
 800948c:	4639      	mov	r1, r7
 800948e:	f7f7 fb6d 	bl	8000b6c <__aeabi_dcmpun>
 8009492:	b128      	cbz	r0, 80094a0 <_scanf_float+0x40c>
 8009494:	4808      	ldr	r0, [pc, #32]	@ (80094b8 <_scanf_float+0x424>)
 8009496:	f000 fac9 	bl	8009a2c <nanf>
 800949a:	ed85 0a00 	vstr	s0, [r5]
 800949e:	e7d1      	b.n	8009444 <_scanf_float+0x3b0>
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f7 fbc0 	bl	8000c28 <__aeabi_d2f>
 80094a8:	6028      	str	r0, [r5, #0]
 80094aa:	e7cb      	b.n	8009444 <_scanf_float+0x3b0>
 80094ac:	f04f 0900 	mov.w	r9, #0
 80094b0:	e629      	b.n	8009106 <_scanf_float+0x72>
 80094b2:	bf00      	nop
 80094b4:	0800d750 	.word	0x0800d750
 80094b8:	0800dae5 	.word	0x0800dae5

080094bc <std>:
 80094bc:	2300      	movs	r3, #0
 80094be:	b510      	push	{r4, lr}
 80094c0:	4604      	mov	r4, r0
 80094c2:	e9c0 3300 	strd	r3, r3, [r0]
 80094c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ca:	6083      	str	r3, [r0, #8]
 80094cc:	8181      	strh	r1, [r0, #12]
 80094ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80094d0:	81c2      	strh	r2, [r0, #14]
 80094d2:	6183      	str	r3, [r0, #24]
 80094d4:	4619      	mov	r1, r3
 80094d6:	2208      	movs	r2, #8
 80094d8:	305c      	adds	r0, #92	@ 0x5c
 80094da:	f000 fa19 	bl	8009910 <memset>
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <std+0x58>)
 80094e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80094e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009518 <std+0x5c>)
 80094e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094e6:	4b0d      	ldr	r3, [pc, #52]	@ (800951c <std+0x60>)
 80094e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009520 <std+0x64>)
 80094ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80094ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009524 <std+0x68>)
 80094f0:	6224      	str	r4, [r4, #32]
 80094f2:	429c      	cmp	r4, r3
 80094f4:	d006      	beq.n	8009504 <std+0x48>
 80094f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094fa:	4294      	cmp	r4, r2
 80094fc:	d002      	beq.n	8009504 <std+0x48>
 80094fe:	33d0      	adds	r3, #208	@ 0xd0
 8009500:	429c      	cmp	r4, r3
 8009502:	d105      	bne.n	8009510 <std+0x54>
 8009504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800950c:	f000 ba7c 	b.w	8009a08 <__retarget_lock_init_recursive>
 8009510:	bd10      	pop	{r4, pc}
 8009512:	bf00      	nop
 8009514:	08009761 	.word	0x08009761
 8009518:	08009783 	.word	0x08009783
 800951c:	080097bb 	.word	0x080097bb
 8009520:	080097df 	.word	0x080097df
 8009524:	20000694 	.word	0x20000694

08009528 <stdio_exit_handler>:
 8009528:	4a02      	ldr	r2, [pc, #8]	@ (8009534 <stdio_exit_handler+0xc>)
 800952a:	4903      	ldr	r1, [pc, #12]	@ (8009538 <stdio_exit_handler+0x10>)
 800952c:	4803      	ldr	r0, [pc, #12]	@ (800953c <stdio_exit_handler+0x14>)
 800952e:	f000 b869 	b.w	8009604 <_fwalk_sglue>
 8009532:	bf00      	nop
 8009534:	20000038 	.word	0x20000038
 8009538:	0800c579 	.word	0x0800c579
 800953c:	20000048 	.word	0x20000048

08009540 <cleanup_stdio>:
 8009540:	6841      	ldr	r1, [r0, #4]
 8009542:	4b0c      	ldr	r3, [pc, #48]	@ (8009574 <cleanup_stdio+0x34>)
 8009544:	4299      	cmp	r1, r3
 8009546:	b510      	push	{r4, lr}
 8009548:	4604      	mov	r4, r0
 800954a:	d001      	beq.n	8009550 <cleanup_stdio+0x10>
 800954c:	f003 f814 	bl	800c578 <_fflush_r>
 8009550:	68a1      	ldr	r1, [r4, #8]
 8009552:	4b09      	ldr	r3, [pc, #36]	@ (8009578 <cleanup_stdio+0x38>)
 8009554:	4299      	cmp	r1, r3
 8009556:	d002      	beq.n	800955e <cleanup_stdio+0x1e>
 8009558:	4620      	mov	r0, r4
 800955a:	f003 f80d 	bl	800c578 <_fflush_r>
 800955e:	68e1      	ldr	r1, [r4, #12]
 8009560:	4b06      	ldr	r3, [pc, #24]	@ (800957c <cleanup_stdio+0x3c>)
 8009562:	4299      	cmp	r1, r3
 8009564:	d004      	beq.n	8009570 <cleanup_stdio+0x30>
 8009566:	4620      	mov	r0, r4
 8009568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800956c:	f003 b804 	b.w	800c578 <_fflush_r>
 8009570:	bd10      	pop	{r4, pc}
 8009572:	bf00      	nop
 8009574:	20000694 	.word	0x20000694
 8009578:	200006fc 	.word	0x200006fc
 800957c:	20000764 	.word	0x20000764

08009580 <global_stdio_init.part.0>:
 8009580:	b510      	push	{r4, lr}
 8009582:	4b0b      	ldr	r3, [pc, #44]	@ (80095b0 <global_stdio_init.part.0+0x30>)
 8009584:	4c0b      	ldr	r4, [pc, #44]	@ (80095b4 <global_stdio_init.part.0+0x34>)
 8009586:	4a0c      	ldr	r2, [pc, #48]	@ (80095b8 <global_stdio_init.part.0+0x38>)
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	4620      	mov	r0, r4
 800958c:	2200      	movs	r2, #0
 800958e:	2104      	movs	r1, #4
 8009590:	f7ff ff94 	bl	80094bc <std>
 8009594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009598:	2201      	movs	r2, #1
 800959a:	2109      	movs	r1, #9
 800959c:	f7ff ff8e 	bl	80094bc <std>
 80095a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095a4:	2202      	movs	r2, #2
 80095a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095aa:	2112      	movs	r1, #18
 80095ac:	f7ff bf86 	b.w	80094bc <std>
 80095b0:	200007cc 	.word	0x200007cc
 80095b4:	20000694 	.word	0x20000694
 80095b8:	08009529 	.word	0x08009529

080095bc <__sfp_lock_acquire>:
 80095bc:	4801      	ldr	r0, [pc, #4]	@ (80095c4 <__sfp_lock_acquire+0x8>)
 80095be:	f000 ba24 	b.w	8009a0a <__retarget_lock_acquire_recursive>
 80095c2:	bf00      	nop
 80095c4:	200007d5 	.word	0x200007d5

080095c8 <__sfp_lock_release>:
 80095c8:	4801      	ldr	r0, [pc, #4]	@ (80095d0 <__sfp_lock_release+0x8>)
 80095ca:	f000 ba1f 	b.w	8009a0c <__retarget_lock_release_recursive>
 80095ce:	bf00      	nop
 80095d0:	200007d5 	.word	0x200007d5

080095d4 <__sinit>:
 80095d4:	b510      	push	{r4, lr}
 80095d6:	4604      	mov	r4, r0
 80095d8:	f7ff fff0 	bl	80095bc <__sfp_lock_acquire>
 80095dc:	6a23      	ldr	r3, [r4, #32]
 80095de:	b11b      	cbz	r3, 80095e8 <__sinit+0x14>
 80095e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e4:	f7ff bff0 	b.w	80095c8 <__sfp_lock_release>
 80095e8:	4b04      	ldr	r3, [pc, #16]	@ (80095fc <__sinit+0x28>)
 80095ea:	6223      	str	r3, [r4, #32]
 80095ec:	4b04      	ldr	r3, [pc, #16]	@ (8009600 <__sinit+0x2c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f5      	bne.n	80095e0 <__sinit+0xc>
 80095f4:	f7ff ffc4 	bl	8009580 <global_stdio_init.part.0>
 80095f8:	e7f2      	b.n	80095e0 <__sinit+0xc>
 80095fa:	bf00      	nop
 80095fc:	08009541 	.word	0x08009541
 8009600:	200007cc 	.word	0x200007cc

08009604 <_fwalk_sglue>:
 8009604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009608:	4607      	mov	r7, r0
 800960a:	4688      	mov	r8, r1
 800960c:	4614      	mov	r4, r2
 800960e:	2600      	movs	r6, #0
 8009610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009614:	f1b9 0901 	subs.w	r9, r9, #1
 8009618:	d505      	bpl.n	8009626 <_fwalk_sglue+0x22>
 800961a:	6824      	ldr	r4, [r4, #0]
 800961c:	2c00      	cmp	r4, #0
 800961e:	d1f7      	bne.n	8009610 <_fwalk_sglue+0xc>
 8009620:	4630      	mov	r0, r6
 8009622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009626:	89ab      	ldrh	r3, [r5, #12]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d907      	bls.n	800963c <_fwalk_sglue+0x38>
 800962c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009630:	3301      	adds	r3, #1
 8009632:	d003      	beq.n	800963c <_fwalk_sglue+0x38>
 8009634:	4629      	mov	r1, r5
 8009636:	4638      	mov	r0, r7
 8009638:	47c0      	blx	r8
 800963a:	4306      	orrs	r6, r0
 800963c:	3568      	adds	r5, #104	@ 0x68
 800963e:	e7e9      	b.n	8009614 <_fwalk_sglue+0x10>

08009640 <iprintf>:
 8009640:	b40f      	push	{r0, r1, r2, r3}
 8009642:	b507      	push	{r0, r1, r2, lr}
 8009644:	4906      	ldr	r1, [pc, #24]	@ (8009660 <iprintf+0x20>)
 8009646:	ab04      	add	r3, sp, #16
 8009648:	6808      	ldr	r0, [r1, #0]
 800964a:	f853 2b04 	ldr.w	r2, [r3], #4
 800964e:	6881      	ldr	r1, [r0, #8]
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	f002 fdf5 	bl	800c240 <_vfiprintf_r>
 8009656:	b003      	add	sp, #12
 8009658:	f85d eb04 	ldr.w	lr, [sp], #4
 800965c:	b004      	add	sp, #16
 800965e:	4770      	bx	lr
 8009660:	20000044 	.word	0x20000044

08009664 <_puts_r>:
 8009664:	6a03      	ldr	r3, [r0, #32]
 8009666:	b570      	push	{r4, r5, r6, lr}
 8009668:	6884      	ldr	r4, [r0, #8]
 800966a:	4605      	mov	r5, r0
 800966c:	460e      	mov	r6, r1
 800966e:	b90b      	cbnz	r3, 8009674 <_puts_r+0x10>
 8009670:	f7ff ffb0 	bl	80095d4 <__sinit>
 8009674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009676:	07db      	lsls	r3, r3, #31
 8009678:	d405      	bmi.n	8009686 <_puts_r+0x22>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	0598      	lsls	r0, r3, #22
 800967e:	d402      	bmi.n	8009686 <_puts_r+0x22>
 8009680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009682:	f000 f9c2 	bl	8009a0a <__retarget_lock_acquire_recursive>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	0719      	lsls	r1, r3, #28
 800968a:	d502      	bpl.n	8009692 <_puts_r+0x2e>
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d135      	bne.n	80096fe <_puts_r+0x9a>
 8009692:	4621      	mov	r1, r4
 8009694:	4628      	mov	r0, r5
 8009696:	f000 f8e5 	bl	8009864 <__swsetup_r>
 800969a:	b380      	cbz	r0, 80096fe <_puts_r+0x9a>
 800969c:	f04f 35ff 	mov.w	r5, #4294967295
 80096a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096a2:	07da      	lsls	r2, r3, #31
 80096a4:	d405      	bmi.n	80096b2 <_puts_r+0x4e>
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	059b      	lsls	r3, r3, #22
 80096aa:	d402      	bmi.n	80096b2 <_puts_r+0x4e>
 80096ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ae:	f000 f9ad 	bl	8009a0c <__retarget_lock_release_recursive>
 80096b2:	4628      	mov	r0, r5
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	da04      	bge.n	80096c4 <_puts_r+0x60>
 80096ba:	69a2      	ldr	r2, [r4, #24]
 80096bc:	429a      	cmp	r2, r3
 80096be:	dc17      	bgt.n	80096f0 <_puts_r+0x8c>
 80096c0:	290a      	cmp	r1, #10
 80096c2:	d015      	beq.n	80096f0 <_puts_r+0x8c>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	6022      	str	r2, [r4, #0]
 80096ca:	7019      	strb	r1, [r3, #0]
 80096cc:	68a3      	ldr	r3, [r4, #8]
 80096ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096d2:	3b01      	subs	r3, #1
 80096d4:	60a3      	str	r3, [r4, #8]
 80096d6:	2900      	cmp	r1, #0
 80096d8:	d1ed      	bne.n	80096b6 <_puts_r+0x52>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	da11      	bge.n	8009702 <_puts_r+0x9e>
 80096de:	4622      	mov	r2, r4
 80096e0:	210a      	movs	r1, #10
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f87f 	bl	80097e6 <__swbuf_r>
 80096e8:	3001      	adds	r0, #1
 80096ea:	d0d7      	beq.n	800969c <_puts_r+0x38>
 80096ec:	250a      	movs	r5, #10
 80096ee:	e7d7      	b.n	80096a0 <_puts_r+0x3c>
 80096f0:	4622      	mov	r2, r4
 80096f2:	4628      	mov	r0, r5
 80096f4:	f000 f877 	bl	80097e6 <__swbuf_r>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d1e7      	bne.n	80096cc <_puts_r+0x68>
 80096fc:	e7ce      	b.n	800969c <_puts_r+0x38>
 80096fe:	3e01      	subs	r6, #1
 8009700:	e7e4      	b.n	80096cc <_puts_r+0x68>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	6022      	str	r2, [r4, #0]
 8009708:	220a      	movs	r2, #10
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	e7ee      	b.n	80096ec <_puts_r+0x88>
	...

08009710 <puts>:
 8009710:	4b02      	ldr	r3, [pc, #8]	@ (800971c <puts+0xc>)
 8009712:	4601      	mov	r1, r0
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	f7ff bfa5 	b.w	8009664 <_puts_r>
 800971a:	bf00      	nop
 800971c:	20000044 	.word	0x20000044

08009720 <siprintf>:
 8009720:	b40e      	push	{r1, r2, r3}
 8009722:	b500      	push	{lr}
 8009724:	b09c      	sub	sp, #112	@ 0x70
 8009726:	ab1d      	add	r3, sp, #116	@ 0x74
 8009728:	9002      	str	r0, [sp, #8]
 800972a:	9006      	str	r0, [sp, #24]
 800972c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009730:	4809      	ldr	r0, [pc, #36]	@ (8009758 <siprintf+0x38>)
 8009732:	9107      	str	r1, [sp, #28]
 8009734:	9104      	str	r1, [sp, #16]
 8009736:	4909      	ldr	r1, [pc, #36]	@ (800975c <siprintf+0x3c>)
 8009738:	f853 2b04 	ldr.w	r2, [r3], #4
 800973c:	9105      	str	r1, [sp, #20]
 800973e:	6800      	ldr	r0, [r0, #0]
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	a902      	add	r1, sp, #8
 8009744:	f002 fc56 	bl	800bff4 <_svfiprintf_r>
 8009748:	9b02      	ldr	r3, [sp, #8]
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
 800974e:	b01c      	add	sp, #112	@ 0x70
 8009750:	f85d eb04 	ldr.w	lr, [sp], #4
 8009754:	b003      	add	sp, #12
 8009756:	4770      	bx	lr
 8009758:	20000044 	.word	0x20000044
 800975c:	ffff0208 	.word	0xffff0208

08009760 <__sread>:
 8009760:	b510      	push	{r4, lr}
 8009762:	460c      	mov	r4, r1
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	f000 f900 	bl	800996c <_read_r>
 800976c:	2800      	cmp	r0, #0
 800976e:	bfab      	itete	ge
 8009770:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009772:	89a3      	ldrhlt	r3, [r4, #12]
 8009774:	181b      	addge	r3, r3, r0
 8009776:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800977a:	bfac      	ite	ge
 800977c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800977e:	81a3      	strhlt	r3, [r4, #12]
 8009780:	bd10      	pop	{r4, pc}

08009782 <__swrite>:
 8009782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009786:	461f      	mov	r7, r3
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	05db      	lsls	r3, r3, #23
 800978c:	4605      	mov	r5, r0
 800978e:	460c      	mov	r4, r1
 8009790:	4616      	mov	r6, r2
 8009792:	d505      	bpl.n	80097a0 <__swrite+0x1e>
 8009794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009798:	2302      	movs	r3, #2
 800979a:	2200      	movs	r2, #0
 800979c:	f000 f8d4 	bl	8009948 <_lseek_r>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097aa:	81a3      	strh	r3, [r4, #12]
 80097ac:	4632      	mov	r2, r6
 80097ae:	463b      	mov	r3, r7
 80097b0:	4628      	mov	r0, r5
 80097b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b6:	f000 b8eb 	b.w	8009990 <_write_r>

080097ba <__sseek>:
 80097ba:	b510      	push	{r4, lr}
 80097bc:	460c      	mov	r4, r1
 80097be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c2:	f000 f8c1 	bl	8009948 <_lseek_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	bf15      	itete	ne
 80097cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097d6:	81a3      	strheq	r3, [r4, #12]
 80097d8:	bf18      	it	ne
 80097da:	81a3      	strhne	r3, [r4, #12]
 80097dc:	bd10      	pop	{r4, pc}

080097de <__sclose>:
 80097de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e2:	f000 b8a1 	b.w	8009928 <_close_r>

080097e6 <__swbuf_r>:
 80097e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e8:	460e      	mov	r6, r1
 80097ea:	4614      	mov	r4, r2
 80097ec:	4605      	mov	r5, r0
 80097ee:	b118      	cbz	r0, 80097f8 <__swbuf_r+0x12>
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	b90b      	cbnz	r3, 80097f8 <__swbuf_r+0x12>
 80097f4:	f7ff feee 	bl	80095d4 <__sinit>
 80097f8:	69a3      	ldr	r3, [r4, #24]
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	071a      	lsls	r2, r3, #28
 8009800:	d501      	bpl.n	8009806 <__swbuf_r+0x20>
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	b943      	cbnz	r3, 8009818 <__swbuf_r+0x32>
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f000 f82b 	bl	8009864 <__swsetup_r>
 800980e:	b118      	cbz	r0, 8009818 <__swbuf_r+0x32>
 8009810:	f04f 37ff 	mov.w	r7, #4294967295
 8009814:	4638      	mov	r0, r7
 8009816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	6922      	ldr	r2, [r4, #16]
 800981c:	1a98      	subs	r0, r3, r2
 800981e:	6963      	ldr	r3, [r4, #20]
 8009820:	b2f6      	uxtb	r6, r6
 8009822:	4283      	cmp	r3, r0
 8009824:	4637      	mov	r7, r6
 8009826:	dc05      	bgt.n	8009834 <__swbuf_r+0x4e>
 8009828:	4621      	mov	r1, r4
 800982a:	4628      	mov	r0, r5
 800982c:	f002 fea4 	bl	800c578 <_fflush_r>
 8009830:	2800      	cmp	r0, #0
 8009832:	d1ed      	bne.n	8009810 <__swbuf_r+0x2a>
 8009834:	68a3      	ldr	r3, [r4, #8]
 8009836:	3b01      	subs	r3, #1
 8009838:	60a3      	str	r3, [r4, #8]
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	701e      	strb	r6, [r3, #0]
 8009842:	6962      	ldr	r2, [r4, #20]
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	429a      	cmp	r2, r3
 8009848:	d004      	beq.n	8009854 <__swbuf_r+0x6e>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	07db      	lsls	r3, r3, #31
 800984e:	d5e1      	bpl.n	8009814 <__swbuf_r+0x2e>
 8009850:	2e0a      	cmp	r6, #10
 8009852:	d1df      	bne.n	8009814 <__swbuf_r+0x2e>
 8009854:	4621      	mov	r1, r4
 8009856:	4628      	mov	r0, r5
 8009858:	f002 fe8e 	bl	800c578 <_fflush_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	d0d9      	beq.n	8009814 <__swbuf_r+0x2e>
 8009860:	e7d6      	b.n	8009810 <__swbuf_r+0x2a>
	...

08009864 <__swsetup_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4b29      	ldr	r3, [pc, #164]	@ (800990c <__swsetup_r+0xa8>)
 8009868:	4605      	mov	r5, r0
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	460c      	mov	r4, r1
 800986e:	b118      	cbz	r0, 8009878 <__swsetup_r+0x14>
 8009870:	6a03      	ldr	r3, [r0, #32]
 8009872:	b90b      	cbnz	r3, 8009878 <__swsetup_r+0x14>
 8009874:	f7ff feae 	bl	80095d4 <__sinit>
 8009878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800987c:	0719      	lsls	r1, r3, #28
 800987e:	d422      	bmi.n	80098c6 <__swsetup_r+0x62>
 8009880:	06da      	lsls	r2, r3, #27
 8009882:	d407      	bmi.n	8009894 <__swsetup_r+0x30>
 8009884:	2209      	movs	r2, #9
 8009886:	602a      	str	r2, [r5, #0]
 8009888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	f04f 30ff 	mov.w	r0, #4294967295
 8009892:	e033      	b.n	80098fc <__swsetup_r+0x98>
 8009894:	0758      	lsls	r0, r3, #29
 8009896:	d512      	bpl.n	80098be <__swsetup_r+0x5a>
 8009898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800989a:	b141      	cbz	r1, 80098ae <__swsetup_r+0x4a>
 800989c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098a0:	4299      	cmp	r1, r3
 80098a2:	d002      	beq.n	80098aa <__swsetup_r+0x46>
 80098a4:	4628      	mov	r0, r5
 80098a6:	f000 ff13 	bl	800a6d0 <_free_r>
 80098aa:	2300      	movs	r3, #0
 80098ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	2300      	movs	r3, #0
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f043 0308 	orr.w	r3, r3, #8
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	b94b      	cbnz	r3, 80098de <__swsetup_r+0x7a>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098d4:	d003      	beq.n	80098de <__swsetup_r+0x7a>
 80098d6:	4621      	mov	r1, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	f002 fe9b 	bl	800c614 <__smakebuf_r>
 80098de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e2:	f013 0201 	ands.w	r2, r3, #1
 80098e6:	d00a      	beq.n	80098fe <__swsetup_r+0x9a>
 80098e8:	2200      	movs	r2, #0
 80098ea:	60a2      	str	r2, [r4, #8]
 80098ec:	6962      	ldr	r2, [r4, #20]
 80098ee:	4252      	negs	r2, r2
 80098f0:	61a2      	str	r2, [r4, #24]
 80098f2:	6922      	ldr	r2, [r4, #16]
 80098f4:	b942      	cbnz	r2, 8009908 <__swsetup_r+0xa4>
 80098f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098fa:	d1c5      	bne.n	8009888 <__swsetup_r+0x24>
 80098fc:	bd38      	pop	{r3, r4, r5, pc}
 80098fe:	0799      	lsls	r1, r3, #30
 8009900:	bf58      	it	pl
 8009902:	6962      	ldrpl	r2, [r4, #20]
 8009904:	60a2      	str	r2, [r4, #8]
 8009906:	e7f4      	b.n	80098f2 <__swsetup_r+0x8e>
 8009908:	2000      	movs	r0, #0
 800990a:	e7f7      	b.n	80098fc <__swsetup_r+0x98>
 800990c:	20000044 	.word	0x20000044

08009910 <memset>:
 8009910:	4402      	add	r2, r0
 8009912:	4603      	mov	r3, r0
 8009914:	4293      	cmp	r3, r2
 8009916:	d100      	bne.n	800991a <memset+0xa>
 8009918:	4770      	bx	lr
 800991a:	f803 1b01 	strb.w	r1, [r3], #1
 800991e:	e7f9      	b.n	8009914 <memset+0x4>

08009920 <_localeconv_r>:
 8009920:	4800      	ldr	r0, [pc, #0]	@ (8009924 <_localeconv_r+0x4>)
 8009922:	4770      	bx	lr
 8009924:	20000184 	.word	0x20000184

08009928 <_close_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d06      	ldr	r5, [pc, #24]	@ (8009944 <_close_r+0x1c>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	602b      	str	r3, [r5, #0]
 8009934:	f7f9 ff5e 	bl	80037f4 <_close>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_close_r+0x1a>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_close_r+0x1a>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	200007d0 	.word	0x200007d0

08009948 <_lseek_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	@ (8009968 <_lseek_r+0x20>)
 800994c:	4604      	mov	r4, r0
 800994e:	4608      	mov	r0, r1
 8009950:	4611      	mov	r1, r2
 8009952:	2200      	movs	r2, #0
 8009954:	602a      	str	r2, [r5, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f7f9 ff73 	bl	8003842 <_lseek>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_lseek_r+0x1e>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_lseek_r+0x1e>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	200007d0 	.word	0x200007d0

0800996c <_read_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d07      	ldr	r5, [pc, #28]	@ (800998c <_read_r+0x20>)
 8009970:	4604      	mov	r4, r0
 8009972:	4608      	mov	r0, r1
 8009974:	4611      	mov	r1, r2
 8009976:	2200      	movs	r2, #0
 8009978:	602a      	str	r2, [r5, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	f7f9 ff1d 	bl	80037ba <_read>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_read_r+0x1e>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_read_r+0x1e>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	200007d0 	.word	0x200007d0

08009990 <_write_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	@ (80099b0 <_write_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7f9 fb12 	bl	8002fc8 <_write>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_write_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_write_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	200007d0 	.word	0x200007d0

080099b4 <__errno>:
 80099b4:	4b01      	ldr	r3, [pc, #4]	@ (80099bc <__errno+0x8>)
 80099b6:	6818      	ldr	r0, [r3, #0]
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	20000044 	.word	0x20000044

080099c0 <__libc_init_array>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4d0d      	ldr	r5, [pc, #52]	@ (80099f8 <__libc_init_array+0x38>)
 80099c4:	4c0d      	ldr	r4, [pc, #52]	@ (80099fc <__libc_init_array+0x3c>)
 80099c6:	1b64      	subs	r4, r4, r5
 80099c8:	10a4      	asrs	r4, r4, #2
 80099ca:	2600      	movs	r6, #0
 80099cc:	42a6      	cmp	r6, r4
 80099ce:	d109      	bne.n	80099e4 <__libc_init_array+0x24>
 80099d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009a00 <__libc_init_array+0x40>)
 80099d2:	4c0c      	ldr	r4, [pc, #48]	@ (8009a04 <__libc_init_array+0x44>)
 80099d4:	f003 fd48 	bl	800d468 <_init>
 80099d8:	1b64      	subs	r4, r4, r5
 80099da:	10a4      	asrs	r4, r4, #2
 80099dc:	2600      	movs	r6, #0
 80099de:	42a6      	cmp	r6, r4
 80099e0:	d105      	bne.n	80099ee <__libc_init_array+0x2e>
 80099e2:	bd70      	pop	{r4, r5, r6, pc}
 80099e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e8:	4798      	blx	r3
 80099ea:	3601      	adds	r6, #1
 80099ec:	e7ee      	b.n	80099cc <__libc_init_array+0xc>
 80099ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f2:	4798      	blx	r3
 80099f4:	3601      	adds	r6, #1
 80099f6:	e7f2      	b.n	80099de <__libc_init_array+0x1e>
 80099f8:	0800dbc0 	.word	0x0800dbc0
 80099fc:	0800dbc0 	.word	0x0800dbc0
 8009a00:	0800dbc0 	.word	0x0800dbc0
 8009a04:	0800dbc4 	.word	0x0800dbc4

08009a08 <__retarget_lock_init_recursive>:
 8009a08:	4770      	bx	lr

08009a0a <__retarget_lock_acquire_recursive>:
 8009a0a:	4770      	bx	lr

08009a0c <__retarget_lock_release_recursive>:
 8009a0c:	4770      	bx	lr

08009a0e <memcpy>:
 8009a0e:	440a      	add	r2, r1
 8009a10:	4291      	cmp	r1, r2
 8009a12:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a16:	d100      	bne.n	8009a1a <memcpy+0xc>
 8009a18:	4770      	bx	lr
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a24:	4291      	cmp	r1, r2
 8009a26:	d1f9      	bne.n	8009a1c <memcpy+0xe>
 8009a28:	bd10      	pop	{r4, pc}
	...

08009a2c <nanf>:
 8009a2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009a34 <nanf+0x8>
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	7fc00000 	.word	0x7fc00000

08009a38 <quorem>:
 8009a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	6903      	ldr	r3, [r0, #16]
 8009a3e:	690c      	ldr	r4, [r1, #16]
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	4607      	mov	r7, r0
 8009a44:	db7e      	blt.n	8009b44 <quorem+0x10c>
 8009a46:	3c01      	subs	r4, #1
 8009a48:	f101 0814 	add.w	r8, r1, #20
 8009a4c:	00a3      	lsls	r3, r4, #2
 8009a4e:	f100 0514 	add.w	r5, r0, #20
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a62:	3301      	adds	r3, #1
 8009a64:	429a      	cmp	r2, r3
 8009a66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a6e:	d32e      	bcc.n	8009ace <quorem+0x96>
 8009a70:	f04f 0a00 	mov.w	sl, #0
 8009a74:	46c4      	mov	ip, r8
 8009a76:	46ae      	mov	lr, r5
 8009a78:	46d3      	mov	fp, sl
 8009a7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a7e:	b298      	uxth	r0, r3
 8009a80:	fb06 a000 	mla	r0, r6, r0, sl
 8009a84:	0c02      	lsrs	r2, r0, #16
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	fb06 2303 	mla	r3, r6, r3, r2
 8009a8c:	f8de 2000 	ldr.w	r2, [lr]
 8009a90:	b280      	uxth	r0, r0
 8009a92:	b292      	uxth	r2, r2
 8009a94:	1a12      	subs	r2, r2, r0
 8009a96:	445a      	add	r2, fp
 8009a98:	f8de 0000 	ldr.w	r0, [lr]
 8009a9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009aa6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009aaa:	b292      	uxth	r2, r2
 8009aac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ab0:	45e1      	cmp	r9, ip
 8009ab2:	f84e 2b04 	str.w	r2, [lr], #4
 8009ab6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009aba:	d2de      	bcs.n	8009a7a <quorem+0x42>
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	58eb      	ldr	r3, [r5, r3]
 8009ac0:	b92b      	cbnz	r3, 8009ace <quorem+0x96>
 8009ac2:	9b01      	ldr	r3, [sp, #4]
 8009ac4:	3b04      	subs	r3, #4
 8009ac6:	429d      	cmp	r5, r3
 8009ac8:	461a      	mov	r2, r3
 8009aca:	d32f      	bcc.n	8009b2c <quorem+0xf4>
 8009acc:	613c      	str	r4, [r7, #16]
 8009ace:	4638      	mov	r0, r7
 8009ad0:	f001 f9c2 	bl	800ae58 <__mcmp>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	db25      	blt.n	8009b24 <quorem+0xec>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	2000      	movs	r0, #0
 8009adc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ae0:	f8d1 c000 	ldr.w	ip, [r1]
 8009ae4:	fa1f fe82 	uxth.w	lr, r2
 8009ae8:	fa1f f38c 	uxth.w	r3, ip
 8009aec:	eba3 030e 	sub.w	r3, r3, lr
 8009af0:	4403      	add	r3, r0
 8009af2:	0c12      	lsrs	r2, r2, #16
 8009af4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009af8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b02:	45c1      	cmp	r9, r8
 8009b04:	f841 3b04 	str.w	r3, [r1], #4
 8009b08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b0c:	d2e6      	bcs.n	8009adc <quorem+0xa4>
 8009b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b16:	b922      	cbnz	r2, 8009b22 <quorem+0xea>
 8009b18:	3b04      	subs	r3, #4
 8009b1a:	429d      	cmp	r5, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	d30b      	bcc.n	8009b38 <quorem+0x100>
 8009b20:	613c      	str	r4, [r7, #16]
 8009b22:	3601      	adds	r6, #1
 8009b24:	4630      	mov	r0, r6
 8009b26:	b003      	add	sp, #12
 8009b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	6812      	ldr	r2, [r2, #0]
 8009b2e:	3b04      	subs	r3, #4
 8009b30:	2a00      	cmp	r2, #0
 8009b32:	d1cb      	bne.n	8009acc <quorem+0x94>
 8009b34:	3c01      	subs	r4, #1
 8009b36:	e7c6      	b.n	8009ac6 <quorem+0x8e>
 8009b38:	6812      	ldr	r2, [r2, #0]
 8009b3a:	3b04      	subs	r3, #4
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	d1ef      	bne.n	8009b20 <quorem+0xe8>
 8009b40:	3c01      	subs	r4, #1
 8009b42:	e7ea      	b.n	8009b1a <quorem+0xe2>
 8009b44:	2000      	movs	r0, #0
 8009b46:	e7ee      	b.n	8009b26 <quorem+0xee>

08009b48 <_dtoa_r>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	69c7      	ldr	r7, [r0, #28]
 8009b4e:	b099      	sub	sp, #100	@ 0x64
 8009b50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b54:	ec55 4b10 	vmov	r4, r5, d0
 8009b58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009b5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b5c:	4683      	mov	fp, r0
 8009b5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b62:	b97f      	cbnz	r7, 8009b84 <_dtoa_r+0x3c>
 8009b64:	2010      	movs	r0, #16
 8009b66:	f000 fdfd 	bl	800a764 <malloc>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009b70:	b920      	cbnz	r0, 8009b7c <_dtoa_r+0x34>
 8009b72:	4ba7      	ldr	r3, [pc, #668]	@ (8009e10 <_dtoa_r+0x2c8>)
 8009b74:	21ef      	movs	r1, #239	@ 0xef
 8009b76:	48a7      	ldr	r0, [pc, #668]	@ (8009e14 <_dtoa_r+0x2cc>)
 8009b78:	f002 fdee 	bl	800c758 <__assert_func>
 8009b7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b80:	6007      	str	r7, [r0, #0]
 8009b82:	60c7      	str	r7, [r0, #12]
 8009b84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b88:	6819      	ldr	r1, [r3, #0]
 8009b8a:	b159      	cbz	r1, 8009ba4 <_dtoa_r+0x5c>
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	604a      	str	r2, [r1, #4]
 8009b90:	2301      	movs	r3, #1
 8009b92:	4093      	lsls	r3, r2
 8009b94:	608b      	str	r3, [r1, #8]
 8009b96:	4658      	mov	r0, fp
 8009b98:	f000 feda 	bl	800a950 <_Bfree>
 8009b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	1e2b      	subs	r3, r5, #0
 8009ba6:	bfb9      	ittee	lt
 8009ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bac:	9303      	strlt	r3, [sp, #12]
 8009bae:	2300      	movge	r3, #0
 8009bb0:	6033      	strge	r3, [r6, #0]
 8009bb2:	9f03      	ldr	r7, [sp, #12]
 8009bb4:	4b98      	ldr	r3, [pc, #608]	@ (8009e18 <_dtoa_r+0x2d0>)
 8009bb6:	bfbc      	itt	lt
 8009bb8:	2201      	movlt	r2, #1
 8009bba:	6032      	strlt	r2, [r6, #0]
 8009bbc:	43bb      	bics	r3, r7
 8009bbe:	d112      	bne.n	8009be6 <_dtoa_r+0x9e>
 8009bc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bcc:	4323      	orrs	r3, r4
 8009bce:	f000 854d 	beq.w	800a66c <_dtoa_r+0xb24>
 8009bd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009e2c <_dtoa_r+0x2e4>
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 854f 	beq.w	800a67c <_dtoa_r+0xb34>
 8009bde:	f10a 0303 	add.w	r3, sl, #3
 8009be2:	f000 bd49 	b.w	800a678 <_dtoa_r+0xb30>
 8009be6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bea:	2200      	movs	r2, #0
 8009bec:	ec51 0b17 	vmov	r0, r1, d7
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009bf6:	f7f6 ff87 	bl	8000b08 <__aeabi_dcmpeq>
 8009bfa:	4680      	mov	r8, r0
 8009bfc:	b158      	cbz	r0, 8009c16 <_dtoa_r+0xce>
 8009bfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c00:	2301      	movs	r3, #1
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c06:	b113      	cbz	r3, 8009c0e <_dtoa_r+0xc6>
 8009c08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c0a:	4b84      	ldr	r3, [pc, #528]	@ (8009e1c <_dtoa_r+0x2d4>)
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009e30 <_dtoa_r+0x2e8>
 8009c12:	f000 bd33 	b.w	800a67c <_dtoa_r+0xb34>
 8009c16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c1a:	aa16      	add	r2, sp, #88	@ 0x58
 8009c1c:	a917      	add	r1, sp, #92	@ 0x5c
 8009c1e:	4658      	mov	r0, fp
 8009c20:	f001 fa3a 	bl	800b098 <__d2b>
 8009c24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c28:	4681      	mov	r9, r0
 8009c2a:	2e00      	cmp	r6, #0
 8009c2c:	d077      	beq.n	8009d1e <_dtoa_r+0x1d6>
 8009c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c48:	4619      	mov	r1, r3
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4b74      	ldr	r3, [pc, #464]	@ (8009e20 <_dtoa_r+0x2d8>)
 8009c4e:	f7f6 fb3b 	bl	80002c8 <__aeabi_dsub>
 8009c52:	a369      	add	r3, pc, #420	@ (adr r3, 8009df8 <_dtoa_r+0x2b0>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fcee 	bl	8000638 <__aeabi_dmul>
 8009c5c:	a368      	add	r3, pc, #416	@ (adr r3, 8009e00 <_dtoa_r+0x2b8>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f7f6 fb33 	bl	80002cc <__adddf3>
 8009c66:	4604      	mov	r4, r0
 8009c68:	4630      	mov	r0, r6
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	f7f6 fc7a 	bl	8000564 <__aeabi_i2d>
 8009c70:	a365      	add	r3, pc, #404	@ (adr r3, 8009e08 <_dtoa_r+0x2c0>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fcdf 	bl	8000638 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7f6 fb23 	bl	80002cc <__adddf3>
 8009c86:	4604      	mov	r4, r0
 8009c88:	460d      	mov	r5, r1
 8009c8a:	f7f6 ff85 	bl	8000b98 <__aeabi_d2iz>
 8009c8e:	2200      	movs	r2, #0
 8009c90:	4607      	mov	r7, r0
 8009c92:	2300      	movs	r3, #0
 8009c94:	4620      	mov	r0, r4
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7f6 ff40 	bl	8000b1c <__aeabi_dcmplt>
 8009c9c:	b140      	cbz	r0, 8009cb0 <_dtoa_r+0x168>
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f7f6 fc60 	bl	8000564 <__aeabi_i2d>
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	f7f6 ff2e 	bl	8000b08 <__aeabi_dcmpeq>
 8009cac:	b900      	cbnz	r0, 8009cb0 <_dtoa_r+0x168>
 8009cae:	3f01      	subs	r7, #1
 8009cb0:	2f16      	cmp	r7, #22
 8009cb2:	d851      	bhi.n	8009d58 <_dtoa_r+0x210>
 8009cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8009e24 <_dtoa_r+0x2dc>)
 8009cb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc2:	f7f6 ff2b 	bl	8000b1c <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d048      	beq.n	8009d5c <_dtoa_r+0x214>
 8009cca:	3f01      	subs	r7, #1
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9312      	str	r3, [sp, #72]	@ 0x48
 8009cd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cd2:	1b9b      	subs	r3, r3, r6
 8009cd4:	1e5a      	subs	r2, r3, #1
 8009cd6:	bf44      	itt	mi
 8009cd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009cdc:	2300      	movmi	r3, #0
 8009cde:	9208      	str	r2, [sp, #32]
 8009ce0:	bf54      	ite	pl
 8009ce2:	f04f 0800 	movpl.w	r8, #0
 8009ce6:	9308      	strmi	r3, [sp, #32]
 8009ce8:	2f00      	cmp	r7, #0
 8009cea:	db39      	blt.n	8009d60 <_dtoa_r+0x218>
 8009cec:	9b08      	ldr	r3, [sp, #32]
 8009cee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009cf0:	443b      	add	r3, r7
 8009cf2:	9308      	str	r3, [sp, #32]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfa:	2b09      	cmp	r3, #9
 8009cfc:	d864      	bhi.n	8009dc8 <_dtoa_r+0x280>
 8009cfe:	2b05      	cmp	r3, #5
 8009d00:	bfc4      	itt	gt
 8009d02:	3b04      	subgt	r3, #4
 8009d04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d08:	f1a3 0302 	sub.w	r3, r3, #2
 8009d0c:	bfcc      	ite	gt
 8009d0e:	2400      	movgt	r4, #0
 8009d10:	2401      	movle	r4, #1
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d863      	bhi.n	8009dde <_dtoa_r+0x296>
 8009d16:	e8df f003 	tbb	[pc, r3]
 8009d1a:	372a      	.short	0x372a
 8009d1c:	5535      	.short	0x5535
 8009d1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009d22:	441e      	add	r6, r3
 8009d24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	bfc1      	itttt	gt
 8009d2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d30:	409f      	lslgt	r7, r3
 8009d32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d3a:	bfd6      	itet	le
 8009d3c:	f1c3 0320 	rsble	r3, r3, #32
 8009d40:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d44:	fa04 f003 	lslle.w	r0, r4, r3
 8009d48:	f7f6 fbfc 	bl	8000544 <__aeabi_ui2d>
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d52:	3e01      	subs	r6, #1
 8009d54:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d56:	e777      	b.n	8009c48 <_dtoa_r+0x100>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e7b8      	b.n	8009cce <_dtoa_r+0x186>
 8009d5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d5e:	e7b7      	b.n	8009cd0 <_dtoa_r+0x188>
 8009d60:	427b      	negs	r3, r7
 8009d62:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d64:	2300      	movs	r3, #0
 8009d66:	eba8 0807 	sub.w	r8, r8, r7
 8009d6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d6c:	e7c4      	b.n	8009cf8 <_dtoa_r+0x1b0>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dc35      	bgt.n	8009de4 <_dtoa_r+0x29c>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	9307      	str	r3, [sp, #28]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d82:	e00b      	b.n	8009d9c <_dtoa_r+0x254>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e7f3      	b.n	8009d70 <_dtoa_r+0x228>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d8e:	18fb      	adds	r3, r7, r3
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	9307      	str	r3, [sp, #28]
 8009d98:	bfb8      	it	lt
 8009d9a:	2301      	movlt	r3, #1
 8009d9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009da0:	2100      	movs	r1, #0
 8009da2:	2204      	movs	r2, #4
 8009da4:	f102 0514 	add.w	r5, r2, #20
 8009da8:	429d      	cmp	r5, r3
 8009daa:	d91f      	bls.n	8009dec <_dtoa_r+0x2a4>
 8009dac:	6041      	str	r1, [r0, #4]
 8009dae:	4658      	mov	r0, fp
 8009db0:	f000 fd8e 	bl	800a8d0 <_Balloc>
 8009db4:	4682      	mov	sl, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d13c      	bne.n	8009e34 <_dtoa_r+0x2ec>
 8009dba:	4b1b      	ldr	r3, [pc, #108]	@ (8009e28 <_dtoa_r+0x2e0>)
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8009dc2:	e6d8      	b.n	8009b76 <_dtoa_r+0x2e>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e7e0      	b.n	8009d8a <_dtoa_r+0x242>
 8009dc8:	2401      	movs	r4, #1
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	9307      	str	r3, [sp, #28]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2312      	movs	r3, #18
 8009ddc:	e7d0      	b.n	8009d80 <_dtoa_r+0x238>
 8009dde:	2301      	movs	r3, #1
 8009de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009de2:	e7f5      	b.n	8009dd0 <_dtoa_r+0x288>
 8009de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	9307      	str	r3, [sp, #28]
 8009dea:	e7d7      	b.n	8009d9c <_dtoa_r+0x254>
 8009dec:	3101      	adds	r1, #1
 8009dee:	0052      	lsls	r2, r2, #1
 8009df0:	e7d8      	b.n	8009da4 <_dtoa_r+0x25c>
 8009df2:	bf00      	nop
 8009df4:	f3af 8000 	nop.w
 8009df8:	636f4361 	.word	0x636f4361
 8009dfc:	3fd287a7 	.word	0x3fd287a7
 8009e00:	8b60c8b3 	.word	0x8b60c8b3
 8009e04:	3fc68a28 	.word	0x3fc68a28
 8009e08:	509f79fb 	.word	0x509f79fb
 8009e0c:	3fd34413 	.word	0x3fd34413
 8009e10:	0800d762 	.word	0x0800d762
 8009e14:	0800d779 	.word	0x0800d779
 8009e18:	7ff00000 	.word	0x7ff00000
 8009e1c:	0800d72d 	.word	0x0800d72d
 8009e20:	3ff80000 	.word	0x3ff80000
 8009e24:	0800d870 	.word	0x0800d870
 8009e28:	0800d7d1 	.word	0x0800d7d1
 8009e2c:	0800d75e 	.word	0x0800d75e
 8009e30:	0800d72c 	.word	0x0800d72c
 8009e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e38:	6018      	str	r0, [r3, #0]
 8009e3a:	9b07      	ldr	r3, [sp, #28]
 8009e3c:	2b0e      	cmp	r3, #14
 8009e3e:	f200 80a4 	bhi.w	8009f8a <_dtoa_r+0x442>
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	f000 80a1 	beq.w	8009f8a <_dtoa_r+0x442>
 8009e48:	2f00      	cmp	r7, #0
 8009e4a:	dd33      	ble.n	8009eb4 <_dtoa_r+0x36c>
 8009e4c:	4bad      	ldr	r3, [pc, #692]	@ (800a104 <_dtoa_r+0x5bc>)
 8009e4e:	f007 020f 	and.w	r2, r7, #15
 8009e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e56:	ed93 7b00 	vldr	d7, [r3]
 8009e5a:	05f8      	lsls	r0, r7, #23
 8009e5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009e64:	d516      	bpl.n	8009e94 <_dtoa_r+0x34c>
 8009e66:	4ba8      	ldr	r3, [pc, #672]	@ (800a108 <_dtoa_r+0x5c0>)
 8009e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e70:	f7f6 fd0c 	bl	800088c <__aeabi_ddiv>
 8009e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e78:	f004 040f 	and.w	r4, r4, #15
 8009e7c:	2603      	movs	r6, #3
 8009e7e:	4da2      	ldr	r5, [pc, #648]	@ (800a108 <_dtoa_r+0x5c0>)
 8009e80:	b954      	cbnz	r4, 8009e98 <_dtoa_r+0x350>
 8009e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e8a:	f7f6 fcff 	bl	800088c <__aeabi_ddiv>
 8009e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e92:	e028      	b.n	8009ee6 <_dtoa_r+0x39e>
 8009e94:	2602      	movs	r6, #2
 8009e96:	e7f2      	b.n	8009e7e <_dtoa_r+0x336>
 8009e98:	07e1      	lsls	r1, r4, #31
 8009e9a:	d508      	bpl.n	8009eae <_dtoa_r+0x366>
 8009e9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ea0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ea4:	f7f6 fbc8 	bl	8000638 <__aeabi_dmul>
 8009ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eac:	3601      	adds	r6, #1
 8009eae:	1064      	asrs	r4, r4, #1
 8009eb0:	3508      	adds	r5, #8
 8009eb2:	e7e5      	b.n	8009e80 <_dtoa_r+0x338>
 8009eb4:	f000 80d2 	beq.w	800a05c <_dtoa_r+0x514>
 8009eb8:	427c      	negs	r4, r7
 8009eba:	4b92      	ldr	r3, [pc, #584]	@ (800a104 <_dtoa_r+0x5bc>)
 8009ebc:	4d92      	ldr	r5, [pc, #584]	@ (800a108 <_dtoa_r+0x5c0>)
 8009ebe:	f004 020f 	and.w	r2, r4, #15
 8009ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ece:	f7f6 fbb3 	bl	8000638 <__aeabi_dmul>
 8009ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed6:	1124      	asrs	r4, r4, #4
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2602      	movs	r6, #2
 8009edc:	2c00      	cmp	r4, #0
 8009ede:	f040 80b2 	bne.w	800a046 <_dtoa_r+0x4fe>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1d3      	bne.n	8009e8e <_dtoa_r+0x346>
 8009ee6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ee8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 80b7 	beq.w	800a060 <_dtoa_r+0x518>
 8009ef2:	4b86      	ldr	r3, [pc, #536]	@ (800a10c <_dtoa_r+0x5c4>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7f6 fe0f 	bl	8000b1c <__aeabi_dcmplt>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	f000 80ae 	beq.w	800a060 <_dtoa_r+0x518>
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 80aa 	beq.w	800a060 <_dtoa_r+0x518>
 8009f0c:	9b00      	ldr	r3, [sp, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	dd37      	ble.n	8009f82 <_dtoa_r+0x43a>
 8009f12:	1e7b      	subs	r3, r7, #1
 8009f14:	9304      	str	r3, [sp, #16]
 8009f16:	4620      	mov	r0, r4
 8009f18:	4b7d      	ldr	r3, [pc, #500]	@ (800a110 <_dtoa_r+0x5c8>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7f6 fb8b 	bl	8000638 <__aeabi_dmul>
 8009f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f26:	9c00      	ldr	r4, [sp, #0]
 8009f28:	3601      	adds	r6, #1
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7f6 fb1a 	bl	8000564 <__aeabi_i2d>
 8009f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f34:	f7f6 fb80 	bl	8000638 <__aeabi_dmul>
 8009f38:	4b76      	ldr	r3, [pc, #472]	@ (800a114 <_dtoa_r+0x5cc>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f7f6 f9c6 	bl	80002cc <__adddf3>
 8009f40:	4605      	mov	r5, r0
 8009f42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f46:	2c00      	cmp	r4, #0
 8009f48:	f040 808d 	bne.w	800a066 <_dtoa_r+0x51e>
 8009f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f50:	4b71      	ldr	r3, [pc, #452]	@ (800a118 <_dtoa_r+0x5d0>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	f7f6 f9b8 	bl	80002c8 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f60:	462a      	mov	r2, r5
 8009f62:	4633      	mov	r3, r6
 8009f64:	f7f6 fdf8 	bl	8000b58 <__aeabi_dcmpgt>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f040 828b 	bne.w	800a484 <_dtoa_r+0x93c>
 8009f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f72:	462a      	mov	r2, r5
 8009f74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009f78:	f7f6 fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f040 8128 	bne.w	800a1d2 <_dtoa_r+0x68a>
 8009f82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009f86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009f8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f2c0 815a 	blt.w	800a246 <_dtoa_r+0x6fe>
 8009f92:	2f0e      	cmp	r7, #14
 8009f94:	f300 8157 	bgt.w	800a246 <_dtoa_r+0x6fe>
 8009f98:	4b5a      	ldr	r3, [pc, #360]	@ (800a104 <_dtoa_r+0x5bc>)
 8009f9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f9e:	ed93 7b00 	vldr	d7, [r3]
 8009fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	ed8d 7b00 	vstr	d7, [sp]
 8009faa:	da03      	bge.n	8009fb4 <_dtoa_r+0x46c>
 8009fac:	9b07      	ldr	r3, [sp, #28]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f340 8101 	ble.w	800a1b6 <_dtoa_r+0x66e>
 8009fb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009fb8:	4656      	mov	r6, sl
 8009fba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7f6 fc63 	bl	800088c <__aeabi_ddiv>
 8009fc6:	f7f6 fde7 	bl	8000b98 <__aeabi_d2iz>
 8009fca:	4680      	mov	r8, r0
 8009fcc:	f7f6 faca 	bl	8000564 <__aeabi_i2d>
 8009fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd4:	f7f6 fb30 	bl	8000638 <__aeabi_dmul>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009fe4:	f7f6 f970 	bl	80002c8 <__aeabi_dsub>
 8009fe8:	f806 4b01 	strb.w	r4, [r6], #1
 8009fec:	9d07      	ldr	r5, [sp, #28]
 8009fee:	eba6 040a 	sub.w	r4, r6, sl
 8009ff2:	42a5      	cmp	r5, r4
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	f040 8117 	bne.w	800a22a <_dtoa_r+0x6e2>
 8009ffc:	f7f6 f966 	bl	80002cc <__adddf3>
 800a000:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	f7f6 fda6 	bl	8000b58 <__aeabi_dcmpgt>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	f040 80f9 	bne.w	800a204 <_dtoa_r+0x6bc>
 800a012:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a016:	4620      	mov	r0, r4
 800a018:	4629      	mov	r1, r5
 800a01a:	f7f6 fd75 	bl	8000b08 <__aeabi_dcmpeq>
 800a01e:	b118      	cbz	r0, 800a028 <_dtoa_r+0x4e0>
 800a020:	f018 0f01 	tst.w	r8, #1
 800a024:	f040 80ee 	bne.w	800a204 <_dtoa_r+0x6bc>
 800a028:	4649      	mov	r1, r9
 800a02a:	4658      	mov	r0, fp
 800a02c:	f000 fc90 	bl	800a950 <_Bfree>
 800a030:	2300      	movs	r3, #0
 800a032:	7033      	strb	r3, [r6, #0]
 800a034:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a036:	3701      	adds	r7, #1
 800a038:	601f      	str	r7, [r3, #0]
 800a03a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 831d 	beq.w	800a67c <_dtoa_r+0xb34>
 800a042:	601e      	str	r6, [r3, #0]
 800a044:	e31a      	b.n	800a67c <_dtoa_r+0xb34>
 800a046:	07e2      	lsls	r2, r4, #31
 800a048:	d505      	bpl.n	800a056 <_dtoa_r+0x50e>
 800a04a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a04e:	f7f6 faf3 	bl	8000638 <__aeabi_dmul>
 800a052:	3601      	adds	r6, #1
 800a054:	2301      	movs	r3, #1
 800a056:	1064      	asrs	r4, r4, #1
 800a058:	3508      	adds	r5, #8
 800a05a:	e73f      	b.n	8009edc <_dtoa_r+0x394>
 800a05c:	2602      	movs	r6, #2
 800a05e:	e742      	b.n	8009ee6 <_dtoa_r+0x39e>
 800a060:	9c07      	ldr	r4, [sp, #28]
 800a062:	9704      	str	r7, [sp, #16]
 800a064:	e761      	b.n	8009f2a <_dtoa_r+0x3e2>
 800a066:	4b27      	ldr	r3, [pc, #156]	@ (800a104 <_dtoa_r+0x5bc>)
 800a068:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a06a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a06e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a072:	4454      	add	r4, sl
 800a074:	2900      	cmp	r1, #0
 800a076:	d053      	beq.n	800a120 <_dtoa_r+0x5d8>
 800a078:	4928      	ldr	r1, [pc, #160]	@ (800a11c <_dtoa_r+0x5d4>)
 800a07a:	2000      	movs	r0, #0
 800a07c:	f7f6 fc06 	bl	800088c <__aeabi_ddiv>
 800a080:	4633      	mov	r3, r6
 800a082:	462a      	mov	r2, r5
 800a084:	f7f6 f920 	bl	80002c8 <__aeabi_dsub>
 800a088:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a08c:	4656      	mov	r6, sl
 800a08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a092:	f7f6 fd81 	bl	8000b98 <__aeabi_d2iz>
 800a096:	4605      	mov	r5, r0
 800a098:	f7f6 fa64 	bl	8000564 <__aeabi_i2d>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0a4:	f7f6 f910 	bl	80002c8 <__aeabi_dsub>
 800a0a8:	3530      	adds	r5, #48	@ 0x30
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0b2:	f806 5b01 	strb.w	r5, [r6], #1
 800a0b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0ba:	f7f6 fd2f 	bl	8000b1c <__aeabi_dcmplt>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d171      	bne.n	800a1a6 <_dtoa_r+0x65e>
 800a0c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0c6:	4911      	ldr	r1, [pc, #68]	@ (800a10c <_dtoa_r+0x5c4>)
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	f7f6 f8fd 	bl	80002c8 <__aeabi_dsub>
 800a0ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0d2:	f7f6 fd23 	bl	8000b1c <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f040 8095 	bne.w	800a206 <_dtoa_r+0x6be>
 800a0dc:	42a6      	cmp	r6, r4
 800a0de:	f43f af50 	beq.w	8009f82 <_dtoa_r+0x43a>
 800a0e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <_dtoa_r+0x5c8>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f7f6 faa5 	bl	8000638 <__aeabi_dmul>
 800a0ee:	4b08      	ldr	r3, [pc, #32]	@ (800a110 <_dtoa_r+0x5c8>)
 800a0f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0fa:	f7f6 fa9d 	bl	8000638 <__aeabi_dmul>
 800a0fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a102:	e7c4      	b.n	800a08e <_dtoa_r+0x546>
 800a104:	0800d870 	.word	0x0800d870
 800a108:	0800d848 	.word	0x0800d848
 800a10c:	3ff00000 	.word	0x3ff00000
 800a110:	40240000 	.word	0x40240000
 800a114:	401c0000 	.word	0x401c0000
 800a118:	40140000 	.word	0x40140000
 800a11c:	3fe00000 	.word	0x3fe00000
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	f7f6 fa88 	bl	8000638 <__aeabi_dmul>
 800a128:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a12c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a12e:	4656      	mov	r6, sl
 800a130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a134:	f7f6 fd30 	bl	8000b98 <__aeabi_d2iz>
 800a138:	4605      	mov	r5, r0
 800a13a:	f7f6 fa13 	bl	8000564 <__aeabi_i2d>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a146:	f7f6 f8bf 	bl	80002c8 <__aeabi_dsub>
 800a14a:	3530      	adds	r5, #48	@ 0x30
 800a14c:	f806 5b01 	strb.w	r5, [r6], #1
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	42a6      	cmp	r6, r4
 800a156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a15a:	f04f 0200 	mov.w	r2, #0
 800a15e:	d124      	bne.n	800a1aa <_dtoa_r+0x662>
 800a160:	4bac      	ldr	r3, [pc, #688]	@ (800a414 <_dtoa_r+0x8cc>)
 800a162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a166:	f7f6 f8b1 	bl	80002cc <__adddf3>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a172:	f7f6 fcf1 	bl	8000b58 <__aeabi_dcmpgt>
 800a176:	2800      	cmp	r0, #0
 800a178:	d145      	bne.n	800a206 <_dtoa_r+0x6be>
 800a17a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a17e:	49a5      	ldr	r1, [pc, #660]	@ (800a414 <_dtoa_r+0x8cc>)
 800a180:	2000      	movs	r0, #0
 800a182:	f7f6 f8a1 	bl	80002c8 <__aeabi_dsub>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a18e:	f7f6 fcc5 	bl	8000b1c <__aeabi_dcmplt>
 800a192:	2800      	cmp	r0, #0
 800a194:	f43f aef5 	beq.w	8009f82 <_dtoa_r+0x43a>
 800a198:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a19a:	1e73      	subs	r3, r6, #1
 800a19c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a19e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1a2:	2b30      	cmp	r3, #48	@ 0x30
 800a1a4:	d0f8      	beq.n	800a198 <_dtoa_r+0x650>
 800a1a6:	9f04      	ldr	r7, [sp, #16]
 800a1a8:	e73e      	b.n	800a028 <_dtoa_r+0x4e0>
 800a1aa:	4b9b      	ldr	r3, [pc, #620]	@ (800a418 <_dtoa_r+0x8d0>)
 800a1ac:	f7f6 fa44 	bl	8000638 <__aeabi_dmul>
 800a1b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1b4:	e7bc      	b.n	800a130 <_dtoa_r+0x5e8>
 800a1b6:	d10c      	bne.n	800a1d2 <_dtoa_r+0x68a>
 800a1b8:	4b98      	ldr	r3, [pc, #608]	@ (800a41c <_dtoa_r+0x8d4>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1c0:	f7f6 fa3a 	bl	8000638 <__aeabi_dmul>
 800a1c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1c8:	f7f6 fcbc 	bl	8000b44 <__aeabi_dcmpge>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	f000 8157 	beq.w	800a480 <_dtoa_r+0x938>
 800a1d2:	2400      	movs	r4, #0
 800a1d4:	4625      	mov	r5, r4
 800a1d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1d8:	43db      	mvns	r3, r3
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	4656      	mov	r6, sl
 800a1de:	2700      	movs	r7, #0
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4658      	mov	r0, fp
 800a1e4:	f000 fbb4 	bl	800a950 <_Bfree>
 800a1e8:	2d00      	cmp	r5, #0
 800a1ea:	d0dc      	beq.n	800a1a6 <_dtoa_r+0x65e>
 800a1ec:	b12f      	cbz	r7, 800a1fa <_dtoa_r+0x6b2>
 800a1ee:	42af      	cmp	r7, r5
 800a1f0:	d003      	beq.n	800a1fa <_dtoa_r+0x6b2>
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	4658      	mov	r0, fp
 800a1f6:	f000 fbab 	bl	800a950 <_Bfree>
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	4658      	mov	r0, fp
 800a1fe:	f000 fba7 	bl	800a950 <_Bfree>
 800a202:	e7d0      	b.n	800a1a6 <_dtoa_r+0x65e>
 800a204:	9704      	str	r7, [sp, #16]
 800a206:	4633      	mov	r3, r6
 800a208:	461e      	mov	r6, r3
 800a20a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a20e:	2a39      	cmp	r2, #57	@ 0x39
 800a210:	d107      	bne.n	800a222 <_dtoa_r+0x6da>
 800a212:	459a      	cmp	sl, r3
 800a214:	d1f8      	bne.n	800a208 <_dtoa_r+0x6c0>
 800a216:	9a04      	ldr	r2, [sp, #16]
 800a218:	3201      	adds	r2, #1
 800a21a:	9204      	str	r2, [sp, #16]
 800a21c:	2230      	movs	r2, #48	@ 0x30
 800a21e:	f88a 2000 	strb.w	r2, [sl]
 800a222:	781a      	ldrb	r2, [r3, #0]
 800a224:	3201      	adds	r2, #1
 800a226:	701a      	strb	r2, [r3, #0]
 800a228:	e7bd      	b.n	800a1a6 <_dtoa_r+0x65e>
 800a22a:	4b7b      	ldr	r3, [pc, #492]	@ (800a418 <_dtoa_r+0x8d0>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	f7f6 fa03 	bl	8000638 <__aeabi_dmul>
 800a232:	2200      	movs	r2, #0
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	460d      	mov	r5, r1
 800a23a:	f7f6 fc65 	bl	8000b08 <__aeabi_dcmpeq>
 800a23e:	2800      	cmp	r0, #0
 800a240:	f43f aebb 	beq.w	8009fba <_dtoa_r+0x472>
 800a244:	e6f0      	b.n	800a028 <_dtoa_r+0x4e0>
 800a246:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a248:	2a00      	cmp	r2, #0
 800a24a:	f000 80db 	beq.w	800a404 <_dtoa_r+0x8bc>
 800a24e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a250:	2a01      	cmp	r2, #1
 800a252:	f300 80bf 	bgt.w	800a3d4 <_dtoa_r+0x88c>
 800a256:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a258:	2a00      	cmp	r2, #0
 800a25a:	f000 80b7 	beq.w	800a3cc <_dtoa_r+0x884>
 800a25e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a262:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a264:	4646      	mov	r6, r8
 800a266:	9a08      	ldr	r2, [sp, #32]
 800a268:	2101      	movs	r1, #1
 800a26a:	441a      	add	r2, r3
 800a26c:	4658      	mov	r0, fp
 800a26e:	4498      	add	r8, r3
 800a270:	9208      	str	r2, [sp, #32]
 800a272:	f000 fc6b 	bl	800ab4c <__i2b>
 800a276:	4605      	mov	r5, r0
 800a278:	b15e      	cbz	r6, 800a292 <_dtoa_r+0x74a>
 800a27a:	9b08      	ldr	r3, [sp, #32]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dd08      	ble.n	800a292 <_dtoa_r+0x74a>
 800a280:	42b3      	cmp	r3, r6
 800a282:	9a08      	ldr	r2, [sp, #32]
 800a284:	bfa8      	it	ge
 800a286:	4633      	movge	r3, r6
 800a288:	eba8 0803 	sub.w	r8, r8, r3
 800a28c:	1af6      	subs	r6, r6, r3
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	9308      	str	r3, [sp, #32]
 800a292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a294:	b1f3      	cbz	r3, 800a2d4 <_dtoa_r+0x78c>
 800a296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 80b7 	beq.w	800a40c <_dtoa_r+0x8c4>
 800a29e:	b18c      	cbz	r4, 800a2c4 <_dtoa_r+0x77c>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	4658      	mov	r0, fp
 800a2a6:	f000 fd11 	bl	800accc <__pow5mult>
 800a2aa:	464a      	mov	r2, r9
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	4658      	mov	r0, fp
 800a2b2:	f000 fc61 	bl	800ab78 <__multiply>
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	9004      	str	r0, [sp, #16]
 800a2ba:	4658      	mov	r0, fp
 800a2bc:	f000 fb48 	bl	800a950 <_Bfree>
 800a2c0:	9b04      	ldr	r3, [sp, #16]
 800a2c2:	4699      	mov	r9, r3
 800a2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c6:	1b1a      	subs	r2, r3, r4
 800a2c8:	d004      	beq.n	800a2d4 <_dtoa_r+0x78c>
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	4658      	mov	r0, fp
 800a2ce:	f000 fcfd 	bl	800accc <__pow5mult>
 800a2d2:	4681      	mov	r9, r0
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	f000 fc38 	bl	800ab4c <__i2b>
 800a2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2de:	4604      	mov	r4, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 81cf 	beq.w	800a684 <_dtoa_r+0xb3c>
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	4658      	mov	r0, fp
 800a2ec:	f000 fcee 	bl	800accc <__pow5mult>
 800a2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	f300 8095 	bgt.w	800a424 <_dtoa_r+0x8dc>
 800a2fa:	9b02      	ldr	r3, [sp, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f040 8087 	bne.w	800a410 <_dtoa_r+0x8c8>
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f040 8089 	bne.w	800a420 <_dtoa_r+0x8d8>
 800a30e:	9b03      	ldr	r3, [sp, #12]
 800a310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a314:	0d1b      	lsrs	r3, r3, #20
 800a316:	051b      	lsls	r3, r3, #20
 800a318:	b12b      	cbz	r3, 800a326 <_dtoa_r+0x7de>
 800a31a:	9b08      	ldr	r3, [sp, #32]
 800a31c:	3301      	adds	r3, #1
 800a31e:	9308      	str	r3, [sp, #32]
 800a320:	f108 0801 	add.w	r8, r8, #1
 800a324:	2301      	movs	r3, #1
 800a326:	930a      	str	r3, [sp, #40]	@ 0x28
 800a328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 81b0 	beq.w	800a690 <_dtoa_r+0xb48>
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a336:	6918      	ldr	r0, [r3, #16]
 800a338:	f000 fbbc 	bl	800aab4 <__hi0bits>
 800a33c:	f1c0 0020 	rsb	r0, r0, #32
 800a340:	9b08      	ldr	r3, [sp, #32]
 800a342:	4418      	add	r0, r3
 800a344:	f010 001f 	ands.w	r0, r0, #31
 800a348:	d077      	beq.n	800a43a <_dtoa_r+0x8f2>
 800a34a:	f1c0 0320 	rsb	r3, r0, #32
 800a34e:	2b04      	cmp	r3, #4
 800a350:	dd6b      	ble.n	800a42a <_dtoa_r+0x8e2>
 800a352:	9b08      	ldr	r3, [sp, #32]
 800a354:	f1c0 001c 	rsb	r0, r0, #28
 800a358:	4403      	add	r3, r0
 800a35a:	4480      	add	r8, r0
 800a35c:	4406      	add	r6, r0
 800a35e:	9308      	str	r3, [sp, #32]
 800a360:	f1b8 0f00 	cmp.w	r8, #0
 800a364:	dd05      	ble.n	800a372 <_dtoa_r+0x82a>
 800a366:	4649      	mov	r1, r9
 800a368:	4642      	mov	r2, r8
 800a36a:	4658      	mov	r0, fp
 800a36c:	f000 fd08 	bl	800ad80 <__lshift>
 800a370:	4681      	mov	r9, r0
 800a372:	9b08      	ldr	r3, [sp, #32]
 800a374:	2b00      	cmp	r3, #0
 800a376:	dd05      	ble.n	800a384 <_dtoa_r+0x83c>
 800a378:	4621      	mov	r1, r4
 800a37a:	461a      	mov	r2, r3
 800a37c:	4658      	mov	r0, fp
 800a37e:	f000 fcff 	bl	800ad80 <__lshift>
 800a382:	4604      	mov	r4, r0
 800a384:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a386:	2b00      	cmp	r3, #0
 800a388:	d059      	beq.n	800a43e <_dtoa_r+0x8f6>
 800a38a:	4621      	mov	r1, r4
 800a38c:	4648      	mov	r0, r9
 800a38e:	f000 fd63 	bl	800ae58 <__mcmp>
 800a392:	2800      	cmp	r0, #0
 800a394:	da53      	bge.n	800a43e <_dtoa_r+0x8f6>
 800a396:	1e7b      	subs	r3, r7, #1
 800a398:	9304      	str	r3, [sp, #16]
 800a39a:	4649      	mov	r1, r9
 800a39c:	2300      	movs	r3, #0
 800a39e:	220a      	movs	r2, #10
 800a3a0:	4658      	mov	r0, fp
 800a3a2:	f000 faf7 	bl	800a994 <__multadd>
 800a3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f000 8172 	beq.w	800a694 <_dtoa_r+0xb4c>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	220a      	movs	r2, #10
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	f000 faec 	bl	800a994 <__multadd>
 800a3bc:	9b00      	ldr	r3, [sp, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	dc67      	bgt.n	800a494 <_dtoa_r+0x94c>
 800a3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	dc41      	bgt.n	800a44e <_dtoa_r+0x906>
 800a3ca:	e063      	b.n	800a494 <_dtoa_r+0x94c>
 800a3cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a3d2:	e746      	b.n	800a262 <_dtoa_r+0x71a>
 800a3d4:	9b07      	ldr	r3, [sp, #28]
 800a3d6:	1e5c      	subs	r4, r3, #1
 800a3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3da:	42a3      	cmp	r3, r4
 800a3dc:	bfbf      	itttt	lt
 800a3de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a3e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a3e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a3e4:	1ae3      	sublt	r3, r4, r3
 800a3e6:	bfb4      	ite	lt
 800a3e8:	18d2      	addlt	r2, r2, r3
 800a3ea:	1b1c      	subge	r4, r3, r4
 800a3ec:	9b07      	ldr	r3, [sp, #28]
 800a3ee:	bfbc      	itt	lt
 800a3f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a3f2:	2400      	movlt	r4, #0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	bfb5      	itete	lt
 800a3f8:	eba8 0603 	sublt.w	r6, r8, r3
 800a3fc:	9b07      	ldrge	r3, [sp, #28]
 800a3fe:	2300      	movlt	r3, #0
 800a400:	4646      	movge	r6, r8
 800a402:	e730      	b.n	800a266 <_dtoa_r+0x71e>
 800a404:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a406:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a408:	4646      	mov	r6, r8
 800a40a:	e735      	b.n	800a278 <_dtoa_r+0x730>
 800a40c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a40e:	e75c      	b.n	800a2ca <_dtoa_r+0x782>
 800a410:	2300      	movs	r3, #0
 800a412:	e788      	b.n	800a326 <_dtoa_r+0x7de>
 800a414:	3fe00000 	.word	0x3fe00000
 800a418:	40240000 	.word	0x40240000
 800a41c:	40140000 	.word	0x40140000
 800a420:	9b02      	ldr	r3, [sp, #8]
 800a422:	e780      	b.n	800a326 <_dtoa_r+0x7de>
 800a424:	2300      	movs	r3, #0
 800a426:	930a      	str	r3, [sp, #40]	@ 0x28
 800a428:	e782      	b.n	800a330 <_dtoa_r+0x7e8>
 800a42a:	d099      	beq.n	800a360 <_dtoa_r+0x818>
 800a42c:	9a08      	ldr	r2, [sp, #32]
 800a42e:	331c      	adds	r3, #28
 800a430:	441a      	add	r2, r3
 800a432:	4498      	add	r8, r3
 800a434:	441e      	add	r6, r3
 800a436:	9208      	str	r2, [sp, #32]
 800a438:	e792      	b.n	800a360 <_dtoa_r+0x818>
 800a43a:	4603      	mov	r3, r0
 800a43c:	e7f6      	b.n	800a42c <_dtoa_r+0x8e4>
 800a43e:	9b07      	ldr	r3, [sp, #28]
 800a440:	9704      	str	r7, [sp, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	dc20      	bgt.n	800a488 <_dtoa_r+0x940>
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	dd1e      	ble.n	800a48c <_dtoa_r+0x944>
 800a44e:	9b00      	ldr	r3, [sp, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	f47f aec0 	bne.w	800a1d6 <_dtoa_r+0x68e>
 800a456:	4621      	mov	r1, r4
 800a458:	2205      	movs	r2, #5
 800a45a:	4658      	mov	r0, fp
 800a45c:	f000 fa9a 	bl	800a994 <__multadd>
 800a460:	4601      	mov	r1, r0
 800a462:	4604      	mov	r4, r0
 800a464:	4648      	mov	r0, r9
 800a466:	f000 fcf7 	bl	800ae58 <__mcmp>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	f77f aeb3 	ble.w	800a1d6 <_dtoa_r+0x68e>
 800a470:	4656      	mov	r6, sl
 800a472:	2331      	movs	r3, #49	@ 0x31
 800a474:	f806 3b01 	strb.w	r3, [r6], #1
 800a478:	9b04      	ldr	r3, [sp, #16]
 800a47a:	3301      	adds	r3, #1
 800a47c:	9304      	str	r3, [sp, #16]
 800a47e:	e6ae      	b.n	800a1de <_dtoa_r+0x696>
 800a480:	9c07      	ldr	r4, [sp, #28]
 800a482:	9704      	str	r7, [sp, #16]
 800a484:	4625      	mov	r5, r4
 800a486:	e7f3      	b.n	800a470 <_dtoa_r+0x928>
 800a488:	9b07      	ldr	r3, [sp, #28]
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 8104 	beq.w	800a69c <_dtoa_r+0xb54>
 800a494:	2e00      	cmp	r6, #0
 800a496:	dd05      	ble.n	800a4a4 <_dtoa_r+0x95c>
 800a498:	4629      	mov	r1, r5
 800a49a:	4632      	mov	r2, r6
 800a49c:	4658      	mov	r0, fp
 800a49e:	f000 fc6f 	bl	800ad80 <__lshift>
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d05a      	beq.n	800a560 <_dtoa_r+0xa18>
 800a4aa:	6869      	ldr	r1, [r5, #4]
 800a4ac:	4658      	mov	r0, fp
 800a4ae:	f000 fa0f 	bl	800a8d0 <_Balloc>
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	b928      	cbnz	r0, 800a4c2 <_dtoa_r+0x97a>
 800a4b6:	4b84      	ldr	r3, [pc, #528]	@ (800a6c8 <_dtoa_r+0xb80>)
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a4be:	f7ff bb5a 	b.w	8009b76 <_dtoa_r+0x2e>
 800a4c2:	692a      	ldr	r2, [r5, #16]
 800a4c4:	3202      	adds	r2, #2
 800a4c6:	0092      	lsls	r2, r2, #2
 800a4c8:	f105 010c 	add.w	r1, r5, #12
 800a4cc:	300c      	adds	r0, #12
 800a4ce:	f7ff fa9e 	bl	8009a0e <memcpy>
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	4631      	mov	r1, r6
 800a4d6:	4658      	mov	r0, fp
 800a4d8:	f000 fc52 	bl	800ad80 <__lshift>
 800a4dc:	f10a 0301 	add.w	r3, sl, #1
 800a4e0:	9307      	str	r3, [sp, #28]
 800a4e2:	9b00      	ldr	r3, [sp, #0]
 800a4e4:	4453      	add	r3, sl
 800a4e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4e8:	9b02      	ldr	r3, [sp, #8]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	462f      	mov	r7, r5
 800a4f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	9b07      	ldr	r3, [sp, #28]
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	4648      	mov	r0, r9
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	f7ff fa9b 	bl	8009a38 <quorem>
 800a502:	4639      	mov	r1, r7
 800a504:	9002      	str	r0, [sp, #8]
 800a506:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a50a:	4648      	mov	r0, r9
 800a50c:	f000 fca4 	bl	800ae58 <__mcmp>
 800a510:	462a      	mov	r2, r5
 800a512:	9008      	str	r0, [sp, #32]
 800a514:	4621      	mov	r1, r4
 800a516:	4658      	mov	r0, fp
 800a518:	f000 fcba 	bl	800ae90 <__mdiff>
 800a51c:	68c2      	ldr	r2, [r0, #12]
 800a51e:	4606      	mov	r6, r0
 800a520:	bb02      	cbnz	r2, 800a564 <_dtoa_r+0xa1c>
 800a522:	4601      	mov	r1, r0
 800a524:	4648      	mov	r0, r9
 800a526:	f000 fc97 	bl	800ae58 <__mcmp>
 800a52a:	4602      	mov	r2, r0
 800a52c:	4631      	mov	r1, r6
 800a52e:	4658      	mov	r0, fp
 800a530:	920e      	str	r2, [sp, #56]	@ 0x38
 800a532:	f000 fa0d 	bl	800a950 <_Bfree>
 800a536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a538:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a53a:	9e07      	ldr	r6, [sp, #28]
 800a53c:	ea43 0102 	orr.w	r1, r3, r2
 800a540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a542:	4319      	orrs	r1, r3
 800a544:	d110      	bne.n	800a568 <_dtoa_r+0xa20>
 800a546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a54a:	d029      	beq.n	800a5a0 <_dtoa_r+0xa58>
 800a54c:	9b08      	ldr	r3, [sp, #32]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dd02      	ble.n	800a558 <_dtoa_r+0xa10>
 800a552:	9b02      	ldr	r3, [sp, #8]
 800a554:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a558:	9b00      	ldr	r3, [sp, #0]
 800a55a:	f883 8000 	strb.w	r8, [r3]
 800a55e:	e63f      	b.n	800a1e0 <_dtoa_r+0x698>
 800a560:	4628      	mov	r0, r5
 800a562:	e7bb      	b.n	800a4dc <_dtoa_r+0x994>
 800a564:	2201      	movs	r2, #1
 800a566:	e7e1      	b.n	800a52c <_dtoa_r+0x9e4>
 800a568:	9b08      	ldr	r3, [sp, #32]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	db04      	blt.n	800a578 <_dtoa_r+0xa30>
 800a56e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a570:	430b      	orrs	r3, r1
 800a572:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a574:	430b      	orrs	r3, r1
 800a576:	d120      	bne.n	800a5ba <_dtoa_r+0xa72>
 800a578:	2a00      	cmp	r2, #0
 800a57a:	dded      	ble.n	800a558 <_dtoa_r+0xa10>
 800a57c:	4649      	mov	r1, r9
 800a57e:	2201      	movs	r2, #1
 800a580:	4658      	mov	r0, fp
 800a582:	f000 fbfd 	bl	800ad80 <__lshift>
 800a586:	4621      	mov	r1, r4
 800a588:	4681      	mov	r9, r0
 800a58a:	f000 fc65 	bl	800ae58 <__mcmp>
 800a58e:	2800      	cmp	r0, #0
 800a590:	dc03      	bgt.n	800a59a <_dtoa_r+0xa52>
 800a592:	d1e1      	bne.n	800a558 <_dtoa_r+0xa10>
 800a594:	f018 0f01 	tst.w	r8, #1
 800a598:	d0de      	beq.n	800a558 <_dtoa_r+0xa10>
 800a59a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a59e:	d1d8      	bne.n	800a552 <_dtoa_r+0xa0a>
 800a5a0:	9a00      	ldr	r2, [sp, #0]
 800a5a2:	2339      	movs	r3, #57	@ 0x39
 800a5a4:	7013      	strb	r3, [r2, #0]
 800a5a6:	4633      	mov	r3, r6
 800a5a8:	461e      	mov	r6, r3
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a5b0:	2a39      	cmp	r2, #57	@ 0x39
 800a5b2:	d052      	beq.n	800a65a <_dtoa_r+0xb12>
 800a5b4:	3201      	adds	r2, #1
 800a5b6:	701a      	strb	r2, [r3, #0]
 800a5b8:	e612      	b.n	800a1e0 <_dtoa_r+0x698>
 800a5ba:	2a00      	cmp	r2, #0
 800a5bc:	dd07      	ble.n	800a5ce <_dtoa_r+0xa86>
 800a5be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5c2:	d0ed      	beq.n	800a5a0 <_dtoa_r+0xa58>
 800a5c4:	9a00      	ldr	r2, [sp, #0]
 800a5c6:	f108 0301 	add.w	r3, r8, #1
 800a5ca:	7013      	strb	r3, [r2, #0]
 800a5cc:	e608      	b.n	800a1e0 <_dtoa_r+0x698>
 800a5ce:	9b07      	ldr	r3, [sp, #28]
 800a5d0:	9a07      	ldr	r2, [sp, #28]
 800a5d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d028      	beq.n	800a62e <_dtoa_r+0xae6>
 800a5dc:	4649      	mov	r1, r9
 800a5de:	2300      	movs	r3, #0
 800a5e0:	220a      	movs	r2, #10
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f000 f9d6 	bl	800a994 <__multadd>
 800a5e8:	42af      	cmp	r7, r5
 800a5ea:	4681      	mov	r9, r0
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	f04f 020a 	mov.w	r2, #10
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	4658      	mov	r0, fp
 800a5f8:	d107      	bne.n	800a60a <_dtoa_r+0xac2>
 800a5fa:	f000 f9cb 	bl	800a994 <__multadd>
 800a5fe:	4607      	mov	r7, r0
 800a600:	4605      	mov	r5, r0
 800a602:	9b07      	ldr	r3, [sp, #28]
 800a604:	3301      	adds	r3, #1
 800a606:	9307      	str	r3, [sp, #28]
 800a608:	e774      	b.n	800a4f4 <_dtoa_r+0x9ac>
 800a60a:	f000 f9c3 	bl	800a994 <__multadd>
 800a60e:	4629      	mov	r1, r5
 800a610:	4607      	mov	r7, r0
 800a612:	2300      	movs	r3, #0
 800a614:	220a      	movs	r2, #10
 800a616:	4658      	mov	r0, fp
 800a618:	f000 f9bc 	bl	800a994 <__multadd>
 800a61c:	4605      	mov	r5, r0
 800a61e:	e7f0      	b.n	800a602 <_dtoa_r+0xaba>
 800a620:	9b00      	ldr	r3, [sp, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	bfcc      	ite	gt
 800a626:	461e      	movgt	r6, r3
 800a628:	2601      	movle	r6, #1
 800a62a:	4456      	add	r6, sl
 800a62c:	2700      	movs	r7, #0
 800a62e:	4649      	mov	r1, r9
 800a630:	2201      	movs	r2, #1
 800a632:	4658      	mov	r0, fp
 800a634:	f000 fba4 	bl	800ad80 <__lshift>
 800a638:	4621      	mov	r1, r4
 800a63a:	4681      	mov	r9, r0
 800a63c:	f000 fc0c 	bl	800ae58 <__mcmp>
 800a640:	2800      	cmp	r0, #0
 800a642:	dcb0      	bgt.n	800a5a6 <_dtoa_r+0xa5e>
 800a644:	d102      	bne.n	800a64c <_dtoa_r+0xb04>
 800a646:	f018 0f01 	tst.w	r8, #1
 800a64a:	d1ac      	bne.n	800a5a6 <_dtoa_r+0xa5e>
 800a64c:	4633      	mov	r3, r6
 800a64e:	461e      	mov	r6, r3
 800a650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a654:	2a30      	cmp	r2, #48	@ 0x30
 800a656:	d0fa      	beq.n	800a64e <_dtoa_r+0xb06>
 800a658:	e5c2      	b.n	800a1e0 <_dtoa_r+0x698>
 800a65a:	459a      	cmp	sl, r3
 800a65c:	d1a4      	bne.n	800a5a8 <_dtoa_r+0xa60>
 800a65e:	9b04      	ldr	r3, [sp, #16]
 800a660:	3301      	adds	r3, #1
 800a662:	9304      	str	r3, [sp, #16]
 800a664:	2331      	movs	r3, #49	@ 0x31
 800a666:	f88a 3000 	strb.w	r3, [sl]
 800a66a:	e5b9      	b.n	800a1e0 <_dtoa_r+0x698>
 800a66c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a66e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a6cc <_dtoa_r+0xb84>
 800a672:	b11b      	cbz	r3, 800a67c <_dtoa_r+0xb34>
 800a674:	f10a 0308 	add.w	r3, sl, #8
 800a678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	4650      	mov	r0, sl
 800a67e:	b019      	add	sp, #100	@ 0x64
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a686:	2b01      	cmp	r3, #1
 800a688:	f77f ae37 	ble.w	800a2fa <_dtoa_r+0x7b2>
 800a68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a68e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a690:	2001      	movs	r0, #1
 800a692:	e655      	b.n	800a340 <_dtoa_r+0x7f8>
 800a694:	9b00      	ldr	r3, [sp, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	f77f aed6 	ble.w	800a448 <_dtoa_r+0x900>
 800a69c:	4656      	mov	r6, sl
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4648      	mov	r0, r9
 800a6a2:	f7ff f9c9 	bl	8009a38 <quorem>
 800a6a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6aa:	f806 8b01 	strb.w	r8, [r6], #1
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	eba6 020a 	sub.w	r2, r6, sl
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	ddb3      	ble.n	800a620 <_dtoa_r+0xad8>
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	220a      	movs	r2, #10
 800a6be:	4658      	mov	r0, fp
 800a6c0:	f000 f968 	bl	800a994 <__multadd>
 800a6c4:	4681      	mov	r9, r0
 800a6c6:	e7ea      	b.n	800a69e <_dtoa_r+0xb56>
 800a6c8:	0800d7d1 	.word	0x0800d7d1
 800a6cc:	0800d755 	.word	0x0800d755

0800a6d0 <_free_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	d041      	beq.n	800a75c <_free_r+0x8c>
 800a6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6dc:	1f0c      	subs	r4, r1, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfb8      	it	lt
 800a6e2:	18e4      	addlt	r4, r4, r3
 800a6e4:	f000 f8e8 	bl	800a8b8 <__malloc_lock>
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a760 <_free_r+0x90>)
 800a6ea:	6813      	ldr	r3, [r2, #0]
 800a6ec:	b933      	cbnz	r3, 800a6fc <_free_r+0x2c>
 800a6ee:	6063      	str	r3, [r4, #4]
 800a6f0:	6014      	str	r4, [r2, #0]
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6f8:	f000 b8e4 	b.w	800a8c4 <__malloc_unlock>
 800a6fc:	42a3      	cmp	r3, r4
 800a6fe:	d908      	bls.n	800a712 <_free_r+0x42>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	1821      	adds	r1, r4, r0
 800a704:	428b      	cmp	r3, r1
 800a706:	bf01      	itttt	eq
 800a708:	6819      	ldreq	r1, [r3, #0]
 800a70a:	685b      	ldreq	r3, [r3, #4]
 800a70c:	1809      	addeq	r1, r1, r0
 800a70e:	6021      	streq	r1, [r4, #0]
 800a710:	e7ed      	b.n	800a6ee <_free_r+0x1e>
 800a712:	461a      	mov	r2, r3
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	b10b      	cbz	r3, 800a71c <_free_r+0x4c>
 800a718:	42a3      	cmp	r3, r4
 800a71a:	d9fa      	bls.n	800a712 <_free_r+0x42>
 800a71c:	6811      	ldr	r1, [r2, #0]
 800a71e:	1850      	adds	r0, r2, r1
 800a720:	42a0      	cmp	r0, r4
 800a722:	d10b      	bne.n	800a73c <_free_r+0x6c>
 800a724:	6820      	ldr	r0, [r4, #0]
 800a726:	4401      	add	r1, r0
 800a728:	1850      	adds	r0, r2, r1
 800a72a:	4283      	cmp	r3, r0
 800a72c:	6011      	str	r1, [r2, #0]
 800a72e:	d1e0      	bne.n	800a6f2 <_free_r+0x22>
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	6053      	str	r3, [r2, #4]
 800a736:	4408      	add	r0, r1
 800a738:	6010      	str	r0, [r2, #0]
 800a73a:	e7da      	b.n	800a6f2 <_free_r+0x22>
 800a73c:	d902      	bls.n	800a744 <_free_r+0x74>
 800a73e:	230c      	movs	r3, #12
 800a740:	602b      	str	r3, [r5, #0]
 800a742:	e7d6      	b.n	800a6f2 <_free_r+0x22>
 800a744:	6820      	ldr	r0, [r4, #0]
 800a746:	1821      	adds	r1, r4, r0
 800a748:	428b      	cmp	r3, r1
 800a74a:	bf04      	itt	eq
 800a74c:	6819      	ldreq	r1, [r3, #0]
 800a74e:	685b      	ldreq	r3, [r3, #4]
 800a750:	6063      	str	r3, [r4, #4]
 800a752:	bf04      	itt	eq
 800a754:	1809      	addeq	r1, r1, r0
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	6054      	str	r4, [r2, #4]
 800a75a:	e7ca      	b.n	800a6f2 <_free_r+0x22>
 800a75c:	bd38      	pop	{r3, r4, r5, pc}
 800a75e:	bf00      	nop
 800a760:	200007dc 	.word	0x200007dc

0800a764 <malloc>:
 800a764:	4b02      	ldr	r3, [pc, #8]	@ (800a770 <malloc+0xc>)
 800a766:	4601      	mov	r1, r0
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	f000 b825 	b.w	800a7b8 <_malloc_r>
 800a76e:	bf00      	nop
 800a770:	20000044 	.word	0x20000044

0800a774 <sbrk_aligned>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	4e0f      	ldr	r6, [pc, #60]	@ (800a7b4 <sbrk_aligned+0x40>)
 800a778:	460c      	mov	r4, r1
 800a77a:	6831      	ldr	r1, [r6, #0]
 800a77c:	4605      	mov	r5, r0
 800a77e:	b911      	cbnz	r1, 800a786 <sbrk_aligned+0x12>
 800a780:	f001 ffd2 	bl	800c728 <_sbrk_r>
 800a784:	6030      	str	r0, [r6, #0]
 800a786:	4621      	mov	r1, r4
 800a788:	4628      	mov	r0, r5
 800a78a:	f001 ffcd 	bl	800c728 <_sbrk_r>
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	d103      	bne.n	800a79a <sbrk_aligned+0x26>
 800a792:	f04f 34ff 	mov.w	r4, #4294967295
 800a796:	4620      	mov	r0, r4
 800a798:	bd70      	pop	{r4, r5, r6, pc}
 800a79a:	1cc4      	adds	r4, r0, #3
 800a79c:	f024 0403 	bic.w	r4, r4, #3
 800a7a0:	42a0      	cmp	r0, r4
 800a7a2:	d0f8      	beq.n	800a796 <sbrk_aligned+0x22>
 800a7a4:	1a21      	subs	r1, r4, r0
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	f001 ffbe 	bl	800c728 <_sbrk_r>
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	d1f2      	bne.n	800a796 <sbrk_aligned+0x22>
 800a7b0:	e7ef      	b.n	800a792 <sbrk_aligned+0x1e>
 800a7b2:	bf00      	nop
 800a7b4:	200007d8 	.word	0x200007d8

0800a7b8 <_malloc_r>:
 800a7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7bc:	1ccd      	adds	r5, r1, #3
 800a7be:	f025 0503 	bic.w	r5, r5, #3
 800a7c2:	3508      	adds	r5, #8
 800a7c4:	2d0c      	cmp	r5, #12
 800a7c6:	bf38      	it	cc
 800a7c8:	250c      	movcc	r5, #12
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	db01      	blt.n	800a7d4 <_malloc_r+0x1c>
 800a7d0:	42a9      	cmp	r1, r5
 800a7d2:	d904      	bls.n	800a7de <_malloc_r+0x26>
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	6033      	str	r3, [r6, #0]
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8b4 <_malloc_r+0xfc>
 800a7e2:	f000 f869 	bl	800a8b8 <__malloc_lock>
 800a7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ea:	461c      	mov	r4, r3
 800a7ec:	bb44      	cbnz	r4, 800a840 <_malloc_r+0x88>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff ffbf 	bl	800a774 <sbrk_aligned>
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	d158      	bne.n	800a8ae <_malloc_r+0xf6>
 800a7fc:	f8d8 4000 	ldr.w	r4, [r8]
 800a800:	4627      	mov	r7, r4
 800a802:	2f00      	cmp	r7, #0
 800a804:	d143      	bne.n	800a88e <_malloc_r+0xd6>
 800a806:	2c00      	cmp	r4, #0
 800a808:	d04b      	beq.n	800a8a2 <_malloc_r+0xea>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	4639      	mov	r1, r7
 800a80e:	4630      	mov	r0, r6
 800a810:	eb04 0903 	add.w	r9, r4, r3
 800a814:	f001 ff88 	bl	800c728 <_sbrk_r>
 800a818:	4581      	cmp	r9, r0
 800a81a:	d142      	bne.n	800a8a2 <_malloc_r+0xea>
 800a81c:	6821      	ldr	r1, [r4, #0]
 800a81e:	1a6d      	subs	r5, r5, r1
 800a820:	4629      	mov	r1, r5
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ffa6 	bl	800a774 <sbrk_aligned>
 800a828:	3001      	adds	r0, #1
 800a82a:	d03a      	beq.n	800a8a2 <_malloc_r+0xea>
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	442b      	add	r3, r5
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	f8d8 3000 	ldr.w	r3, [r8]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	bb62      	cbnz	r2, 800a894 <_malloc_r+0xdc>
 800a83a:	f8c8 7000 	str.w	r7, [r8]
 800a83e:	e00f      	b.n	800a860 <_malloc_r+0xa8>
 800a840:	6822      	ldr	r2, [r4, #0]
 800a842:	1b52      	subs	r2, r2, r5
 800a844:	d420      	bmi.n	800a888 <_malloc_r+0xd0>
 800a846:	2a0b      	cmp	r2, #11
 800a848:	d917      	bls.n	800a87a <_malloc_r+0xc2>
 800a84a:	1961      	adds	r1, r4, r5
 800a84c:	42a3      	cmp	r3, r4
 800a84e:	6025      	str	r5, [r4, #0]
 800a850:	bf18      	it	ne
 800a852:	6059      	strne	r1, [r3, #4]
 800a854:	6863      	ldr	r3, [r4, #4]
 800a856:	bf08      	it	eq
 800a858:	f8c8 1000 	streq.w	r1, [r8]
 800a85c:	5162      	str	r2, [r4, r5]
 800a85e:	604b      	str	r3, [r1, #4]
 800a860:	4630      	mov	r0, r6
 800a862:	f000 f82f 	bl	800a8c4 <__malloc_unlock>
 800a866:	f104 000b 	add.w	r0, r4, #11
 800a86a:	1d23      	adds	r3, r4, #4
 800a86c:	f020 0007 	bic.w	r0, r0, #7
 800a870:	1ac2      	subs	r2, r0, r3
 800a872:	bf1c      	itt	ne
 800a874:	1a1b      	subne	r3, r3, r0
 800a876:	50a3      	strne	r3, [r4, r2]
 800a878:	e7af      	b.n	800a7da <_malloc_r+0x22>
 800a87a:	6862      	ldr	r2, [r4, #4]
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	bf0c      	ite	eq
 800a880:	f8c8 2000 	streq.w	r2, [r8]
 800a884:	605a      	strne	r2, [r3, #4]
 800a886:	e7eb      	b.n	800a860 <_malloc_r+0xa8>
 800a888:	4623      	mov	r3, r4
 800a88a:	6864      	ldr	r4, [r4, #4]
 800a88c:	e7ae      	b.n	800a7ec <_malloc_r+0x34>
 800a88e:	463c      	mov	r4, r7
 800a890:	687f      	ldr	r7, [r7, #4]
 800a892:	e7b6      	b.n	800a802 <_malloc_r+0x4a>
 800a894:	461a      	mov	r2, r3
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	42a3      	cmp	r3, r4
 800a89a:	d1fb      	bne.n	800a894 <_malloc_r+0xdc>
 800a89c:	2300      	movs	r3, #0
 800a89e:	6053      	str	r3, [r2, #4]
 800a8a0:	e7de      	b.n	800a860 <_malloc_r+0xa8>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	6033      	str	r3, [r6, #0]
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f000 f80c 	bl	800a8c4 <__malloc_unlock>
 800a8ac:	e794      	b.n	800a7d8 <_malloc_r+0x20>
 800a8ae:	6005      	str	r5, [r0, #0]
 800a8b0:	e7d6      	b.n	800a860 <_malloc_r+0xa8>
 800a8b2:	bf00      	nop
 800a8b4:	200007dc 	.word	0x200007dc

0800a8b8 <__malloc_lock>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	@ (800a8c0 <__malloc_lock+0x8>)
 800a8ba:	f7ff b8a6 	b.w	8009a0a <__retarget_lock_acquire_recursive>
 800a8be:	bf00      	nop
 800a8c0:	200007d4 	.word	0x200007d4

0800a8c4 <__malloc_unlock>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	@ (800a8cc <__malloc_unlock+0x8>)
 800a8c6:	f7ff b8a1 	b.w	8009a0c <__retarget_lock_release_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	200007d4 	.word	0x200007d4

0800a8d0 <_Balloc>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	69c6      	ldr	r6, [r0, #28]
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	460d      	mov	r5, r1
 800a8d8:	b976      	cbnz	r6, 800a8f8 <_Balloc+0x28>
 800a8da:	2010      	movs	r0, #16
 800a8dc:	f7ff ff42 	bl	800a764 <malloc>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	61e0      	str	r0, [r4, #28]
 800a8e4:	b920      	cbnz	r0, 800a8f0 <_Balloc+0x20>
 800a8e6:	4b18      	ldr	r3, [pc, #96]	@ (800a948 <_Balloc+0x78>)
 800a8e8:	4818      	ldr	r0, [pc, #96]	@ (800a94c <_Balloc+0x7c>)
 800a8ea:	216b      	movs	r1, #107	@ 0x6b
 800a8ec:	f001 ff34 	bl	800c758 <__assert_func>
 800a8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8f4:	6006      	str	r6, [r0, #0]
 800a8f6:	60c6      	str	r6, [r0, #12]
 800a8f8:	69e6      	ldr	r6, [r4, #28]
 800a8fa:	68f3      	ldr	r3, [r6, #12]
 800a8fc:	b183      	cbz	r3, 800a920 <_Balloc+0x50>
 800a8fe:	69e3      	ldr	r3, [r4, #28]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a906:	b9b8      	cbnz	r0, 800a938 <_Balloc+0x68>
 800a908:	2101      	movs	r1, #1
 800a90a:	fa01 f605 	lsl.w	r6, r1, r5
 800a90e:	1d72      	adds	r2, r6, #5
 800a910:	0092      	lsls	r2, r2, #2
 800a912:	4620      	mov	r0, r4
 800a914:	f001 ff3e 	bl	800c794 <_calloc_r>
 800a918:	b160      	cbz	r0, 800a934 <_Balloc+0x64>
 800a91a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a91e:	e00e      	b.n	800a93e <_Balloc+0x6e>
 800a920:	2221      	movs	r2, #33	@ 0x21
 800a922:	2104      	movs	r1, #4
 800a924:	4620      	mov	r0, r4
 800a926:	f001 ff35 	bl	800c794 <_calloc_r>
 800a92a:	69e3      	ldr	r3, [r4, #28]
 800a92c:	60f0      	str	r0, [r6, #12]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e4      	bne.n	800a8fe <_Balloc+0x2e>
 800a934:	2000      	movs	r0, #0
 800a936:	bd70      	pop	{r4, r5, r6, pc}
 800a938:	6802      	ldr	r2, [r0, #0]
 800a93a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a93e:	2300      	movs	r3, #0
 800a940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a944:	e7f7      	b.n	800a936 <_Balloc+0x66>
 800a946:	bf00      	nop
 800a948:	0800d762 	.word	0x0800d762
 800a94c:	0800d7e2 	.word	0x0800d7e2

0800a950 <_Bfree>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	69c6      	ldr	r6, [r0, #28]
 800a954:	4605      	mov	r5, r0
 800a956:	460c      	mov	r4, r1
 800a958:	b976      	cbnz	r6, 800a978 <_Bfree+0x28>
 800a95a:	2010      	movs	r0, #16
 800a95c:	f7ff ff02 	bl	800a764 <malloc>
 800a960:	4602      	mov	r2, r0
 800a962:	61e8      	str	r0, [r5, #28]
 800a964:	b920      	cbnz	r0, 800a970 <_Bfree+0x20>
 800a966:	4b09      	ldr	r3, [pc, #36]	@ (800a98c <_Bfree+0x3c>)
 800a968:	4809      	ldr	r0, [pc, #36]	@ (800a990 <_Bfree+0x40>)
 800a96a:	218f      	movs	r1, #143	@ 0x8f
 800a96c:	f001 fef4 	bl	800c758 <__assert_func>
 800a970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a974:	6006      	str	r6, [r0, #0]
 800a976:	60c6      	str	r6, [r0, #12]
 800a978:	b13c      	cbz	r4, 800a98a <_Bfree+0x3a>
 800a97a:	69eb      	ldr	r3, [r5, #28]
 800a97c:	6862      	ldr	r2, [r4, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a984:	6021      	str	r1, [r4, #0]
 800a986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	0800d762 	.word	0x0800d762
 800a990:	0800d7e2 	.word	0x0800d7e2

0800a994 <__multadd>:
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	690d      	ldr	r5, [r1, #16]
 800a99a:	4607      	mov	r7, r0
 800a99c:	460c      	mov	r4, r1
 800a99e:	461e      	mov	r6, r3
 800a9a0:	f101 0c14 	add.w	ip, r1, #20
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a9aa:	b299      	uxth	r1, r3
 800a9ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a9b0:	0c1e      	lsrs	r6, r3, #16
 800a9b2:	0c0b      	lsrs	r3, r1, #16
 800a9b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a9b8:	b289      	uxth	r1, r1
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9c0:	4285      	cmp	r5, r0
 800a9c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a9c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9ca:	dcec      	bgt.n	800a9a6 <__multadd+0x12>
 800a9cc:	b30e      	cbz	r6, 800aa12 <__multadd+0x7e>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	42ab      	cmp	r3, r5
 800a9d2:	dc19      	bgt.n	800aa08 <__multadd+0x74>
 800a9d4:	6861      	ldr	r1, [r4, #4]
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	3101      	adds	r1, #1
 800a9da:	f7ff ff79 	bl	800a8d0 <_Balloc>
 800a9de:	4680      	mov	r8, r0
 800a9e0:	b928      	cbnz	r0, 800a9ee <__multadd+0x5a>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	@ (800aa18 <__multadd+0x84>)
 800a9e6:	480d      	ldr	r0, [pc, #52]	@ (800aa1c <__multadd+0x88>)
 800a9e8:	21ba      	movs	r1, #186	@ 0xba
 800a9ea:	f001 feb5 	bl	800c758 <__assert_func>
 800a9ee:	6922      	ldr	r2, [r4, #16]
 800a9f0:	3202      	adds	r2, #2
 800a9f2:	f104 010c 	add.w	r1, r4, #12
 800a9f6:	0092      	lsls	r2, r2, #2
 800a9f8:	300c      	adds	r0, #12
 800a9fa:	f7ff f808 	bl	8009a0e <memcpy>
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff ffa5 	bl	800a950 <_Bfree>
 800aa06:	4644      	mov	r4, r8
 800aa08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa0c:	3501      	adds	r5, #1
 800aa0e:	615e      	str	r6, [r3, #20]
 800aa10:	6125      	str	r5, [r4, #16]
 800aa12:	4620      	mov	r0, r4
 800aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa18:	0800d7d1 	.word	0x0800d7d1
 800aa1c:	0800d7e2 	.word	0x0800d7e2

0800aa20 <__s2b>:
 800aa20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	460c      	mov	r4, r1
 800aa26:	4615      	mov	r5, r2
 800aa28:	461f      	mov	r7, r3
 800aa2a:	2209      	movs	r2, #9
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	4606      	mov	r6, r0
 800aa30:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa34:	2100      	movs	r1, #0
 800aa36:	2201      	movs	r2, #1
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	db09      	blt.n	800aa50 <__s2b+0x30>
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff ff47 	bl	800a8d0 <_Balloc>
 800aa42:	b940      	cbnz	r0, 800aa56 <__s2b+0x36>
 800aa44:	4602      	mov	r2, r0
 800aa46:	4b19      	ldr	r3, [pc, #100]	@ (800aaac <__s2b+0x8c>)
 800aa48:	4819      	ldr	r0, [pc, #100]	@ (800aab0 <__s2b+0x90>)
 800aa4a:	21d3      	movs	r1, #211	@ 0xd3
 800aa4c:	f001 fe84 	bl	800c758 <__assert_func>
 800aa50:	0052      	lsls	r2, r2, #1
 800aa52:	3101      	adds	r1, #1
 800aa54:	e7f0      	b.n	800aa38 <__s2b+0x18>
 800aa56:	9b08      	ldr	r3, [sp, #32]
 800aa58:	6143      	str	r3, [r0, #20]
 800aa5a:	2d09      	cmp	r5, #9
 800aa5c:	f04f 0301 	mov.w	r3, #1
 800aa60:	6103      	str	r3, [r0, #16]
 800aa62:	dd16      	ble.n	800aa92 <__s2b+0x72>
 800aa64:	f104 0909 	add.w	r9, r4, #9
 800aa68:	46c8      	mov	r8, r9
 800aa6a:	442c      	add	r4, r5
 800aa6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa70:	4601      	mov	r1, r0
 800aa72:	3b30      	subs	r3, #48	@ 0x30
 800aa74:	220a      	movs	r2, #10
 800aa76:	4630      	mov	r0, r6
 800aa78:	f7ff ff8c 	bl	800a994 <__multadd>
 800aa7c:	45a0      	cmp	r8, r4
 800aa7e:	d1f5      	bne.n	800aa6c <__s2b+0x4c>
 800aa80:	f1a5 0408 	sub.w	r4, r5, #8
 800aa84:	444c      	add	r4, r9
 800aa86:	1b2d      	subs	r5, r5, r4
 800aa88:	1963      	adds	r3, r4, r5
 800aa8a:	42bb      	cmp	r3, r7
 800aa8c:	db04      	blt.n	800aa98 <__s2b+0x78>
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa92:	340a      	adds	r4, #10
 800aa94:	2509      	movs	r5, #9
 800aa96:	e7f6      	b.n	800aa86 <__s2b+0x66>
 800aa98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	3b30      	subs	r3, #48	@ 0x30
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7ff ff76 	bl	800a994 <__multadd>
 800aaa8:	e7ee      	b.n	800aa88 <__s2b+0x68>
 800aaaa:	bf00      	nop
 800aaac:	0800d7d1 	.word	0x0800d7d1
 800aab0:	0800d7e2 	.word	0x0800d7e2

0800aab4 <__hi0bits>:
 800aab4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aab8:	4603      	mov	r3, r0
 800aaba:	bf36      	itet	cc
 800aabc:	0403      	lslcc	r3, r0, #16
 800aabe:	2000      	movcs	r0, #0
 800aac0:	2010      	movcc	r0, #16
 800aac2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aac6:	bf3c      	itt	cc
 800aac8:	021b      	lslcc	r3, r3, #8
 800aaca:	3008      	addcc	r0, #8
 800aacc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aad0:	bf3c      	itt	cc
 800aad2:	011b      	lslcc	r3, r3, #4
 800aad4:	3004      	addcc	r0, #4
 800aad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aada:	bf3c      	itt	cc
 800aadc:	009b      	lslcc	r3, r3, #2
 800aade:	3002      	addcc	r0, #2
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	db05      	blt.n	800aaf0 <__hi0bits+0x3c>
 800aae4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aae8:	f100 0001 	add.w	r0, r0, #1
 800aaec:	bf08      	it	eq
 800aaee:	2020      	moveq	r0, #32
 800aaf0:	4770      	bx	lr

0800aaf2 <__lo0bits>:
 800aaf2:	6803      	ldr	r3, [r0, #0]
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	f013 0007 	ands.w	r0, r3, #7
 800aafa:	d00b      	beq.n	800ab14 <__lo0bits+0x22>
 800aafc:	07d9      	lsls	r1, r3, #31
 800aafe:	d421      	bmi.n	800ab44 <__lo0bits+0x52>
 800ab00:	0798      	lsls	r0, r3, #30
 800ab02:	bf49      	itett	mi
 800ab04:	085b      	lsrmi	r3, r3, #1
 800ab06:	089b      	lsrpl	r3, r3, #2
 800ab08:	2001      	movmi	r0, #1
 800ab0a:	6013      	strmi	r3, [r2, #0]
 800ab0c:	bf5c      	itt	pl
 800ab0e:	6013      	strpl	r3, [r2, #0]
 800ab10:	2002      	movpl	r0, #2
 800ab12:	4770      	bx	lr
 800ab14:	b299      	uxth	r1, r3
 800ab16:	b909      	cbnz	r1, 800ab1c <__lo0bits+0x2a>
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	2010      	movs	r0, #16
 800ab1c:	b2d9      	uxtb	r1, r3
 800ab1e:	b909      	cbnz	r1, 800ab24 <__lo0bits+0x32>
 800ab20:	3008      	adds	r0, #8
 800ab22:	0a1b      	lsrs	r3, r3, #8
 800ab24:	0719      	lsls	r1, r3, #28
 800ab26:	bf04      	itt	eq
 800ab28:	091b      	lsreq	r3, r3, #4
 800ab2a:	3004      	addeq	r0, #4
 800ab2c:	0799      	lsls	r1, r3, #30
 800ab2e:	bf04      	itt	eq
 800ab30:	089b      	lsreq	r3, r3, #2
 800ab32:	3002      	addeq	r0, #2
 800ab34:	07d9      	lsls	r1, r3, #31
 800ab36:	d403      	bmi.n	800ab40 <__lo0bits+0x4e>
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	f100 0001 	add.w	r0, r0, #1
 800ab3e:	d003      	beq.n	800ab48 <__lo0bits+0x56>
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	4770      	bx	lr
 800ab44:	2000      	movs	r0, #0
 800ab46:	4770      	bx	lr
 800ab48:	2020      	movs	r0, #32
 800ab4a:	4770      	bx	lr

0800ab4c <__i2b>:
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	460c      	mov	r4, r1
 800ab50:	2101      	movs	r1, #1
 800ab52:	f7ff febd 	bl	800a8d0 <_Balloc>
 800ab56:	4602      	mov	r2, r0
 800ab58:	b928      	cbnz	r0, 800ab66 <__i2b+0x1a>
 800ab5a:	4b05      	ldr	r3, [pc, #20]	@ (800ab70 <__i2b+0x24>)
 800ab5c:	4805      	ldr	r0, [pc, #20]	@ (800ab74 <__i2b+0x28>)
 800ab5e:	f240 1145 	movw	r1, #325	@ 0x145
 800ab62:	f001 fdf9 	bl	800c758 <__assert_func>
 800ab66:	2301      	movs	r3, #1
 800ab68:	6144      	str	r4, [r0, #20]
 800ab6a:	6103      	str	r3, [r0, #16]
 800ab6c:	bd10      	pop	{r4, pc}
 800ab6e:	bf00      	nop
 800ab70:	0800d7d1 	.word	0x0800d7d1
 800ab74:	0800d7e2 	.word	0x0800d7e2

0800ab78 <__multiply>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	4614      	mov	r4, r2
 800ab7e:	690a      	ldr	r2, [r1, #16]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	bfa8      	it	ge
 800ab86:	4623      	movge	r3, r4
 800ab88:	460f      	mov	r7, r1
 800ab8a:	bfa4      	itt	ge
 800ab8c:	460c      	movge	r4, r1
 800ab8e:	461f      	movge	r7, r3
 800ab90:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab94:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab98:	68a3      	ldr	r3, [r4, #8]
 800ab9a:	6861      	ldr	r1, [r4, #4]
 800ab9c:	eb0a 0609 	add.w	r6, sl, r9
 800aba0:	42b3      	cmp	r3, r6
 800aba2:	b085      	sub	sp, #20
 800aba4:	bfb8      	it	lt
 800aba6:	3101      	addlt	r1, #1
 800aba8:	f7ff fe92 	bl	800a8d0 <_Balloc>
 800abac:	b930      	cbnz	r0, 800abbc <__multiply+0x44>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b44      	ldr	r3, [pc, #272]	@ (800acc4 <__multiply+0x14c>)
 800abb2:	4845      	ldr	r0, [pc, #276]	@ (800acc8 <__multiply+0x150>)
 800abb4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800abb8:	f001 fdce 	bl	800c758 <__assert_func>
 800abbc:	f100 0514 	add.w	r5, r0, #20
 800abc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abc4:	462b      	mov	r3, r5
 800abc6:	2200      	movs	r2, #0
 800abc8:	4543      	cmp	r3, r8
 800abca:	d321      	bcc.n	800ac10 <__multiply+0x98>
 800abcc:	f107 0114 	add.w	r1, r7, #20
 800abd0:	f104 0214 	add.w	r2, r4, #20
 800abd4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800abd8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	1b13      	subs	r3, r2, r4
 800abe0:	3b15      	subs	r3, #21
 800abe2:	f023 0303 	bic.w	r3, r3, #3
 800abe6:	3304      	adds	r3, #4
 800abe8:	f104 0715 	add.w	r7, r4, #21
 800abec:	42ba      	cmp	r2, r7
 800abee:	bf38      	it	cc
 800abf0:	2304      	movcc	r3, #4
 800abf2:	9301      	str	r3, [sp, #4]
 800abf4:	9b02      	ldr	r3, [sp, #8]
 800abf6:	9103      	str	r1, [sp, #12]
 800abf8:	428b      	cmp	r3, r1
 800abfa:	d80c      	bhi.n	800ac16 <__multiply+0x9e>
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	dd03      	ble.n	800ac08 <__multiply+0x90>
 800ac00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d05b      	beq.n	800acc0 <__multiply+0x148>
 800ac08:	6106      	str	r6, [r0, #16]
 800ac0a:	b005      	add	sp, #20
 800ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac10:	f843 2b04 	str.w	r2, [r3], #4
 800ac14:	e7d8      	b.n	800abc8 <__multiply+0x50>
 800ac16:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac1a:	f1ba 0f00 	cmp.w	sl, #0
 800ac1e:	d024      	beq.n	800ac6a <__multiply+0xf2>
 800ac20:	f104 0e14 	add.w	lr, r4, #20
 800ac24:	46a9      	mov	r9, r5
 800ac26:	f04f 0c00 	mov.w	ip, #0
 800ac2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac2e:	f8d9 3000 	ldr.w	r3, [r9]
 800ac32:	fa1f fb87 	uxth.w	fp, r7
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ac40:	f8d9 7000 	ldr.w	r7, [r9]
 800ac44:	4463      	add	r3, ip
 800ac46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac4a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ac4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac58:	4572      	cmp	r2, lr
 800ac5a:	f849 3b04 	str.w	r3, [r9], #4
 800ac5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac62:	d8e2      	bhi.n	800ac2a <__multiply+0xb2>
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	f845 c003 	str.w	ip, [r5, r3]
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac70:	3104      	adds	r1, #4
 800ac72:	f1b9 0f00 	cmp.w	r9, #0
 800ac76:	d021      	beq.n	800acbc <__multiply+0x144>
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	f104 0c14 	add.w	ip, r4, #20
 800ac7e:	46ae      	mov	lr, r5
 800ac80:	f04f 0a00 	mov.w	sl, #0
 800ac84:	f8bc b000 	ldrh.w	fp, [ip]
 800ac88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac8c:	fb09 770b 	mla	r7, r9, fp, r7
 800ac90:	4457      	add	r7, sl
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac98:	f84e 3b04 	str.w	r3, [lr], #4
 800ac9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aca0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aca4:	f8be 3000 	ldrh.w	r3, [lr]
 800aca8:	fb09 330a 	mla	r3, r9, sl, r3
 800acac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800acb0:	4562      	cmp	r2, ip
 800acb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acb6:	d8e5      	bhi.n	800ac84 <__multiply+0x10c>
 800acb8:	9f01      	ldr	r7, [sp, #4]
 800acba:	51eb      	str	r3, [r5, r7]
 800acbc:	3504      	adds	r5, #4
 800acbe:	e799      	b.n	800abf4 <__multiply+0x7c>
 800acc0:	3e01      	subs	r6, #1
 800acc2:	e79b      	b.n	800abfc <__multiply+0x84>
 800acc4:	0800d7d1 	.word	0x0800d7d1
 800acc8:	0800d7e2 	.word	0x0800d7e2

0800accc <__pow5mult>:
 800accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd0:	4615      	mov	r5, r2
 800acd2:	f012 0203 	ands.w	r2, r2, #3
 800acd6:	4607      	mov	r7, r0
 800acd8:	460e      	mov	r6, r1
 800acda:	d007      	beq.n	800acec <__pow5mult+0x20>
 800acdc:	4c25      	ldr	r4, [pc, #148]	@ (800ad74 <__pow5mult+0xa8>)
 800acde:	3a01      	subs	r2, #1
 800ace0:	2300      	movs	r3, #0
 800ace2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ace6:	f7ff fe55 	bl	800a994 <__multadd>
 800acea:	4606      	mov	r6, r0
 800acec:	10ad      	asrs	r5, r5, #2
 800acee:	d03d      	beq.n	800ad6c <__pow5mult+0xa0>
 800acf0:	69fc      	ldr	r4, [r7, #28]
 800acf2:	b97c      	cbnz	r4, 800ad14 <__pow5mult+0x48>
 800acf4:	2010      	movs	r0, #16
 800acf6:	f7ff fd35 	bl	800a764 <malloc>
 800acfa:	4602      	mov	r2, r0
 800acfc:	61f8      	str	r0, [r7, #28]
 800acfe:	b928      	cbnz	r0, 800ad0c <__pow5mult+0x40>
 800ad00:	4b1d      	ldr	r3, [pc, #116]	@ (800ad78 <__pow5mult+0xac>)
 800ad02:	481e      	ldr	r0, [pc, #120]	@ (800ad7c <__pow5mult+0xb0>)
 800ad04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad08:	f001 fd26 	bl	800c758 <__assert_func>
 800ad0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad10:	6004      	str	r4, [r0, #0]
 800ad12:	60c4      	str	r4, [r0, #12]
 800ad14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad1c:	b94c      	cbnz	r4, 800ad32 <__pow5mult+0x66>
 800ad1e:	f240 2171 	movw	r1, #625	@ 0x271
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7ff ff12 	bl	800ab4c <__i2b>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad2e:	4604      	mov	r4, r0
 800ad30:	6003      	str	r3, [r0, #0]
 800ad32:	f04f 0900 	mov.w	r9, #0
 800ad36:	07eb      	lsls	r3, r5, #31
 800ad38:	d50a      	bpl.n	800ad50 <__pow5mult+0x84>
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7ff ff1a 	bl	800ab78 <__multiply>
 800ad44:	4631      	mov	r1, r6
 800ad46:	4680      	mov	r8, r0
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7ff fe01 	bl	800a950 <_Bfree>
 800ad4e:	4646      	mov	r6, r8
 800ad50:	106d      	asrs	r5, r5, #1
 800ad52:	d00b      	beq.n	800ad6c <__pow5mult+0xa0>
 800ad54:	6820      	ldr	r0, [r4, #0]
 800ad56:	b938      	cbnz	r0, 800ad68 <__pow5mult+0x9c>
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff ff0b 	bl	800ab78 <__multiply>
 800ad62:	6020      	str	r0, [r4, #0]
 800ad64:	f8c0 9000 	str.w	r9, [r0]
 800ad68:	4604      	mov	r4, r0
 800ad6a:	e7e4      	b.n	800ad36 <__pow5mult+0x6a>
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad72:	bf00      	nop
 800ad74:	0800d83c 	.word	0x0800d83c
 800ad78:	0800d762 	.word	0x0800d762
 800ad7c:	0800d7e2 	.word	0x0800d7e2

0800ad80 <__lshift>:
 800ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	460c      	mov	r4, r1
 800ad86:	6849      	ldr	r1, [r1, #4]
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad8e:	68a3      	ldr	r3, [r4, #8]
 800ad90:	4607      	mov	r7, r0
 800ad92:	4691      	mov	r9, r2
 800ad94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad98:	f108 0601 	add.w	r6, r8, #1
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	db0b      	blt.n	800adb8 <__lshift+0x38>
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff fd95 	bl	800a8d0 <_Balloc>
 800ada6:	4605      	mov	r5, r0
 800ada8:	b948      	cbnz	r0, 800adbe <__lshift+0x3e>
 800adaa:	4602      	mov	r2, r0
 800adac:	4b28      	ldr	r3, [pc, #160]	@ (800ae50 <__lshift+0xd0>)
 800adae:	4829      	ldr	r0, [pc, #164]	@ (800ae54 <__lshift+0xd4>)
 800adb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800adb4:	f001 fcd0 	bl	800c758 <__assert_func>
 800adb8:	3101      	adds	r1, #1
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	e7ee      	b.n	800ad9c <__lshift+0x1c>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f100 0114 	add.w	r1, r0, #20
 800adc4:	f100 0210 	add.w	r2, r0, #16
 800adc8:	4618      	mov	r0, r3
 800adca:	4553      	cmp	r3, sl
 800adcc:	db33      	blt.n	800ae36 <__lshift+0xb6>
 800adce:	6920      	ldr	r0, [r4, #16]
 800add0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800add4:	f104 0314 	add.w	r3, r4, #20
 800add8:	f019 091f 	ands.w	r9, r9, #31
 800addc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ade0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ade4:	d02b      	beq.n	800ae3e <__lshift+0xbe>
 800ade6:	f1c9 0e20 	rsb	lr, r9, #32
 800adea:	468a      	mov	sl, r1
 800adec:	2200      	movs	r2, #0
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	fa00 f009 	lsl.w	r0, r0, r9
 800adf4:	4310      	orrs	r0, r2
 800adf6:	f84a 0b04 	str.w	r0, [sl], #4
 800adfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800adfe:	459c      	cmp	ip, r3
 800ae00:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae04:	d8f3      	bhi.n	800adee <__lshift+0x6e>
 800ae06:	ebac 0304 	sub.w	r3, ip, r4
 800ae0a:	3b15      	subs	r3, #21
 800ae0c:	f023 0303 	bic.w	r3, r3, #3
 800ae10:	3304      	adds	r3, #4
 800ae12:	f104 0015 	add.w	r0, r4, #21
 800ae16:	4584      	cmp	ip, r0
 800ae18:	bf38      	it	cc
 800ae1a:	2304      	movcc	r3, #4
 800ae1c:	50ca      	str	r2, [r1, r3]
 800ae1e:	b10a      	cbz	r2, 800ae24 <__lshift+0xa4>
 800ae20:	f108 0602 	add.w	r6, r8, #2
 800ae24:	3e01      	subs	r6, #1
 800ae26:	4638      	mov	r0, r7
 800ae28:	612e      	str	r6, [r5, #16]
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	f7ff fd90 	bl	800a950 <_Bfree>
 800ae30:	4628      	mov	r0, r5
 800ae32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae36:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	e7c5      	b.n	800adca <__lshift+0x4a>
 800ae3e:	3904      	subs	r1, #4
 800ae40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae44:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae48:	459c      	cmp	ip, r3
 800ae4a:	d8f9      	bhi.n	800ae40 <__lshift+0xc0>
 800ae4c:	e7ea      	b.n	800ae24 <__lshift+0xa4>
 800ae4e:	bf00      	nop
 800ae50:	0800d7d1 	.word	0x0800d7d1
 800ae54:	0800d7e2 	.word	0x0800d7e2

0800ae58 <__mcmp>:
 800ae58:	690a      	ldr	r2, [r1, #16]
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	6900      	ldr	r0, [r0, #16]
 800ae5e:	1a80      	subs	r0, r0, r2
 800ae60:	b530      	push	{r4, r5, lr}
 800ae62:	d10e      	bne.n	800ae82 <__mcmp+0x2a>
 800ae64:	3314      	adds	r3, #20
 800ae66:	3114      	adds	r1, #20
 800ae68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae78:	4295      	cmp	r5, r2
 800ae7a:	d003      	beq.n	800ae84 <__mcmp+0x2c>
 800ae7c:	d205      	bcs.n	800ae8a <__mcmp+0x32>
 800ae7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae82:	bd30      	pop	{r4, r5, pc}
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d3f3      	bcc.n	800ae70 <__mcmp+0x18>
 800ae88:	e7fb      	b.n	800ae82 <__mcmp+0x2a>
 800ae8a:	2001      	movs	r0, #1
 800ae8c:	e7f9      	b.n	800ae82 <__mcmp+0x2a>
	...

0800ae90 <__mdiff>:
 800ae90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	4689      	mov	r9, r1
 800ae96:	4606      	mov	r6, r0
 800ae98:	4611      	mov	r1, r2
 800ae9a:	4648      	mov	r0, r9
 800ae9c:	4614      	mov	r4, r2
 800ae9e:	f7ff ffdb 	bl	800ae58 <__mcmp>
 800aea2:	1e05      	subs	r5, r0, #0
 800aea4:	d112      	bne.n	800aecc <__mdiff+0x3c>
 800aea6:	4629      	mov	r1, r5
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7ff fd11 	bl	800a8d0 <_Balloc>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	b928      	cbnz	r0, 800aebe <__mdiff+0x2e>
 800aeb2:	4b3f      	ldr	r3, [pc, #252]	@ (800afb0 <__mdiff+0x120>)
 800aeb4:	f240 2137 	movw	r1, #567	@ 0x237
 800aeb8:	483e      	ldr	r0, [pc, #248]	@ (800afb4 <__mdiff+0x124>)
 800aeba:	f001 fc4d 	bl	800c758 <__assert_func>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aec4:	4610      	mov	r0, r2
 800aec6:	b003      	add	sp, #12
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	bfbc      	itt	lt
 800aece:	464b      	movlt	r3, r9
 800aed0:	46a1      	movlt	r9, r4
 800aed2:	4630      	mov	r0, r6
 800aed4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aed8:	bfba      	itte	lt
 800aeda:	461c      	movlt	r4, r3
 800aedc:	2501      	movlt	r5, #1
 800aede:	2500      	movge	r5, #0
 800aee0:	f7ff fcf6 	bl	800a8d0 <_Balloc>
 800aee4:	4602      	mov	r2, r0
 800aee6:	b918      	cbnz	r0, 800aef0 <__mdiff+0x60>
 800aee8:	4b31      	ldr	r3, [pc, #196]	@ (800afb0 <__mdiff+0x120>)
 800aeea:	f240 2145 	movw	r1, #581	@ 0x245
 800aeee:	e7e3      	b.n	800aeb8 <__mdiff+0x28>
 800aef0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aef4:	6926      	ldr	r6, [r4, #16]
 800aef6:	60c5      	str	r5, [r0, #12]
 800aef8:	f109 0310 	add.w	r3, r9, #16
 800aefc:	f109 0514 	add.w	r5, r9, #20
 800af00:	f104 0e14 	add.w	lr, r4, #20
 800af04:	f100 0b14 	add.w	fp, r0, #20
 800af08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	46d9      	mov	r9, fp
 800af14:	f04f 0c00 	mov.w	ip, #0
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	fa1f f38a 	uxth.w	r3, sl
 800af28:	4619      	mov	r1, r3
 800af2a:	b283      	uxth	r3, r0
 800af2c:	1acb      	subs	r3, r1, r3
 800af2e:	0c00      	lsrs	r0, r0, #16
 800af30:	4463      	add	r3, ip
 800af32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af40:	4576      	cmp	r6, lr
 800af42:	f849 3b04 	str.w	r3, [r9], #4
 800af46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af4a:	d8e5      	bhi.n	800af18 <__mdiff+0x88>
 800af4c:	1b33      	subs	r3, r6, r4
 800af4e:	3b15      	subs	r3, #21
 800af50:	f023 0303 	bic.w	r3, r3, #3
 800af54:	3415      	adds	r4, #21
 800af56:	3304      	adds	r3, #4
 800af58:	42a6      	cmp	r6, r4
 800af5a:	bf38      	it	cc
 800af5c:	2304      	movcc	r3, #4
 800af5e:	441d      	add	r5, r3
 800af60:	445b      	add	r3, fp
 800af62:	461e      	mov	r6, r3
 800af64:	462c      	mov	r4, r5
 800af66:	4544      	cmp	r4, r8
 800af68:	d30e      	bcc.n	800af88 <__mdiff+0xf8>
 800af6a:	f108 0103 	add.w	r1, r8, #3
 800af6e:	1b49      	subs	r1, r1, r5
 800af70:	f021 0103 	bic.w	r1, r1, #3
 800af74:	3d03      	subs	r5, #3
 800af76:	45a8      	cmp	r8, r5
 800af78:	bf38      	it	cc
 800af7a:	2100      	movcc	r1, #0
 800af7c:	440b      	add	r3, r1
 800af7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af82:	b191      	cbz	r1, 800afaa <__mdiff+0x11a>
 800af84:	6117      	str	r7, [r2, #16]
 800af86:	e79d      	b.n	800aec4 <__mdiff+0x34>
 800af88:	f854 1b04 	ldr.w	r1, [r4], #4
 800af8c:	46e6      	mov	lr, ip
 800af8e:	0c08      	lsrs	r0, r1, #16
 800af90:	fa1c fc81 	uxtah	ip, ip, r1
 800af94:	4471      	add	r1, lr
 800af96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af9a:	b289      	uxth	r1, r1
 800af9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afa0:	f846 1b04 	str.w	r1, [r6], #4
 800afa4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afa8:	e7dd      	b.n	800af66 <__mdiff+0xd6>
 800afaa:	3f01      	subs	r7, #1
 800afac:	e7e7      	b.n	800af7e <__mdiff+0xee>
 800afae:	bf00      	nop
 800afb0:	0800d7d1 	.word	0x0800d7d1
 800afb4:	0800d7e2 	.word	0x0800d7e2

0800afb8 <__ulp>:
 800afb8:	b082      	sub	sp, #8
 800afba:	ed8d 0b00 	vstr	d0, [sp]
 800afbe:	9a01      	ldr	r2, [sp, #4]
 800afc0:	4b0f      	ldr	r3, [pc, #60]	@ (800b000 <__ulp+0x48>)
 800afc2:	4013      	ands	r3, r2
 800afc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dc08      	bgt.n	800afde <__ulp+0x26>
 800afcc:	425b      	negs	r3, r3
 800afce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800afd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800afd6:	da04      	bge.n	800afe2 <__ulp+0x2a>
 800afd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800afdc:	4113      	asrs	r3, r2
 800afde:	2200      	movs	r2, #0
 800afe0:	e008      	b.n	800aff4 <__ulp+0x3c>
 800afe2:	f1a2 0314 	sub.w	r3, r2, #20
 800afe6:	2b1e      	cmp	r3, #30
 800afe8:	bfda      	itte	le
 800afea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800afee:	40da      	lsrle	r2, r3
 800aff0:	2201      	movgt	r2, #1
 800aff2:	2300      	movs	r3, #0
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	ec41 0b10 	vmov	d0, r0, r1
 800affc:	b002      	add	sp, #8
 800affe:	4770      	bx	lr
 800b000:	7ff00000 	.word	0x7ff00000

0800b004 <__b2d>:
 800b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b008:	6906      	ldr	r6, [r0, #16]
 800b00a:	f100 0814 	add.w	r8, r0, #20
 800b00e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b012:	1f37      	subs	r7, r6, #4
 800b014:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b018:	4610      	mov	r0, r2
 800b01a:	f7ff fd4b 	bl	800aab4 <__hi0bits>
 800b01e:	f1c0 0320 	rsb	r3, r0, #32
 800b022:	280a      	cmp	r0, #10
 800b024:	600b      	str	r3, [r1, #0]
 800b026:	491b      	ldr	r1, [pc, #108]	@ (800b094 <__b2d+0x90>)
 800b028:	dc15      	bgt.n	800b056 <__b2d+0x52>
 800b02a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b02e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b032:	45b8      	cmp	r8, r7
 800b034:	ea43 0501 	orr.w	r5, r3, r1
 800b038:	bf34      	ite	cc
 800b03a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b03e:	2300      	movcs	r3, #0
 800b040:	3015      	adds	r0, #21
 800b042:	fa02 f000 	lsl.w	r0, r2, r0
 800b046:	fa23 f30c 	lsr.w	r3, r3, ip
 800b04a:	4303      	orrs	r3, r0
 800b04c:	461c      	mov	r4, r3
 800b04e:	ec45 4b10 	vmov	d0, r4, r5
 800b052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b056:	45b8      	cmp	r8, r7
 800b058:	bf3a      	itte	cc
 800b05a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b05e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b062:	2300      	movcs	r3, #0
 800b064:	380b      	subs	r0, #11
 800b066:	d012      	beq.n	800b08e <__b2d+0x8a>
 800b068:	f1c0 0120 	rsb	r1, r0, #32
 800b06c:	fa23 f401 	lsr.w	r4, r3, r1
 800b070:	4082      	lsls	r2, r0
 800b072:	4322      	orrs	r2, r4
 800b074:	4547      	cmp	r7, r8
 800b076:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b07a:	bf8c      	ite	hi
 800b07c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b080:	2200      	movls	r2, #0
 800b082:	4083      	lsls	r3, r0
 800b084:	40ca      	lsrs	r2, r1
 800b086:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b08a:	4313      	orrs	r3, r2
 800b08c:	e7de      	b.n	800b04c <__b2d+0x48>
 800b08e:	ea42 0501 	orr.w	r5, r2, r1
 800b092:	e7db      	b.n	800b04c <__b2d+0x48>
 800b094:	3ff00000 	.word	0x3ff00000

0800b098 <__d2b>:
 800b098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b09c:	460f      	mov	r7, r1
 800b09e:	2101      	movs	r1, #1
 800b0a0:	ec59 8b10 	vmov	r8, r9, d0
 800b0a4:	4616      	mov	r6, r2
 800b0a6:	f7ff fc13 	bl	800a8d0 <_Balloc>
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	b930      	cbnz	r0, 800b0bc <__d2b+0x24>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	4b23      	ldr	r3, [pc, #140]	@ (800b140 <__d2b+0xa8>)
 800b0b2:	4824      	ldr	r0, [pc, #144]	@ (800b144 <__d2b+0xac>)
 800b0b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0b8:	f001 fb4e 	bl	800c758 <__assert_func>
 800b0bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0c4:	b10d      	cbz	r5, 800b0ca <__d2b+0x32>
 800b0c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	f1b8 0300 	subs.w	r3, r8, #0
 800b0d0:	d023      	beq.n	800b11a <__d2b+0x82>
 800b0d2:	4668      	mov	r0, sp
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	f7ff fd0c 	bl	800aaf2 <__lo0bits>
 800b0da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0de:	b1d0      	cbz	r0, 800b116 <__d2b+0x7e>
 800b0e0:	f1c0 0320 	rsb	r3, r0, #32
 800b0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	40c2      	lsrs	r2, r0
 800b0ec:	6163      	str	r3, [r4, #20]
 800b0ee:	9201      	str	r2, [sp, #4]
 800b0f0:	9b01      	ldr	r3, [sp, #4]
 800b0f2:	61a3      	str	r3, [r4, #24]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bf0c      	ite	eq
 800b0f8:	2201      	moveq	r2, #1
 800b0fa:	2202      	movne	r2, #2
 800b0fc:	6122      	str	r2, [r4, #16]
 800b0fe:	b1a5      	cbz	r5, 800b12a <__d2b+0x92>
 800b100:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b104:	4405      	add	r5, r0
 800b106:	603d      	str	r5, [r7, #0]
 800b108:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b10c:	6030      	str	r0, [r6, #0]
 800b10e:	4620      	mov	r0, r4
 800b110:	b003      	add	sp, #12
 800b112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b116:	6161      	str	r1, [r4, #20]
 800b118:	e7ea      	b.n	800b0f0 <__d2b+0x58>
 800b11a:	a801      	add	r0, sp, #4
 800b11c:	f7ff fce9 	bl	800aaf2 <__lo0bits>
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	6163      	str	r3, [r4, #20]
 800b124:	3020      	adds	r0, #32
 800b126:	2201      	movs	r2, #1
 800b128:	e7e8      	b.n	800b0fc <__d2b+0x64>
 800b12a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b12e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b132:	6038      	str	r0, [r7, #0]
 800b134:	6918      	ldr	r0, [r3, #16]
 800b136:	f7ff fcbd 	bl	800aab4 <__hi0bits>
 800b13a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b13e:	e7e5      	b.n	800b10c <__d2b+0x74>
 800b140:	0800d7d1 	.word	0x0800d7d1
 800b144:	0800d7e2 	.word	0x0800d7e2

0800b148 <__ratio>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	b085      	sub	sp, #20
 800b14e:	e9cd 1000 	strd	r1, r0, [sp]
 800b152:	a902      	add	r1, sp, #8
 800b154:	f7ff ff56 	bl	800b004 <__b2d>
 800b158:	9800      	ldr	r0, [sp, #0]
 800b15a:	a903      	add	r1, sp, #12
 800b15c:	ec55 4b10 	vmov	r4, r5, d0
 800b160:	f7ff ff50 	bl	800b004 <__b2d>
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	6919      	ldr	r1, [r3, #16]
 800b168:	9b00      	ldr	r3, [sp, #0]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	1ac9      	subs	r1, r1, r3
 800b16e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b172:	1a9b      	subs	r3, r3, r2
 800b174:	ec5b ab10 	vmov	sl, fp, d0
 800b178:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bfce      	itee	gt
 800b180:	462a      	movgt	r2, r5
 800b182:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b186:	465a      	movle	r2, fp
 800b188:	462f      	mov	r7, r5
 800b18a:	46d9      	mov	r9, fp
 800b18c:	bfcc      	ite	gt
 800b18e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b192:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b196:	464b      	mov	r3, r9
 800b198:	4652      	mov	r2, sl
 800b19a:	4620      	mov	r0, r4
 800b19c:	4639      	mov	r1, r7
 800b19e:	f7f5 fb75 	bl	800088c <__aeabi_ddiv>
 800b1a2:	ec41 0b10 	vmov	d0, r0, r1
 800b1a6:	b005      	add	sp, #20
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1ac <__copybits>:
 800b1ac:	3901      	subs	r1, #1
 800b1ae:	b570      	push	{r4, r5, r6, lr}
 800b1b0:	1149      	asrs	r1, r1, #5
 800b1b2:	6914      	ldr	r4, [r2, #16]
 800b1b4:	3101      	adds	r1, #1
 800b1b6:	f102 0314 	add.w	r3, r2, #20
 800b1ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1c2:	1f05      	subs	r5, r0, #4
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d30c      	bcc.n	800b1e2 <__copybits+0x36>
 800b1c8:	1aa3      	subs	r3, r4, r2
 800b1ca:	3b11      	subs	r3, #17
 800b1cc:	f023 0303 	bic.w	r3, r3, #3
 800b1d0:	3211      	adds	r2, #17
 800b1d2:	42a2      	cmp	r2, r4
 800b1d4:	bf88      	it	hi
 800b1d6:	2300      	movhi	r3, #0
 800b1d8:	4418      	add	r0, r3
 800b1da:	2300      	movs	r3, #0
 800b1dc:	4288      	cmp	r0, r1
 800b1de:	d305      	bcc.n	800b1ec <__copybits+0x40>
 800b1e0:	bd70      	pop	{r4, r5, r6, pc}
 800b1e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1e6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1ea:	e7eb      	b.n	800b1c4 <__copybits+0x18>
 800b1ec:	f840 3b04 	str.w	r3, [r0], #4
 800b1f0:	e7f4      	b.n	800b1dc <__copybits+0x30>

0800b1f2 <__any_on>:
 800b1f2:	f100 0214 	add.w	r2, r0, #20
 800b1f6:	6900      	ldr	r0, [r0, #16]
 800b1f8:	114b      	asrs	r3, r1, #5
 800b1fa:	4298      	cmp	r0, r3
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	db11      	blt.n	800b224 <__any_on+0x32>
 800b200:	dd0a      	ble.n	800b218 <__any_on+0x26>
 800b202:	f011 011f 	ands.w	r1, r1, #31
 800b206:	d007      	beq.n	800b218 <__any_on+0x26>
 800b208:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b20c:	fa24 f001 	lsr.w	r0, r4, r1
 800b210:	fa00 f101 	lsl.w	r1, r0, r1
 800b214:	428c      	cmp	r4, r1
 800b216:	d10b      	bne.n	800b230 <__any_on+0x3e>
 800b218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d803      	bhi.n	800b228 <__any_on+0x36>
 800b220:	2000      	movs	r0, #0
 800b222:	bd10      	pop	{r4, pc}
 800b224:	4603      	mov	r3, r0
 800b226:	e7f7      	b.n	800b218 <__any_on+0x26>
 800b228:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b22c:	2900      	cmp	r1, #0
 800b22e:	d0f5      	beq.n	800b21c <__any_on+0x2a>
 800b230:	2001      	movs	r0, #1
 800b232:	e7f6      	b.n	800b222 <__any_on+0x30>

0800b234 <sulp>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4604      	mov	r4, r0
 800b238:	460d      	mov	r5, r1
 800b23a:	ec45 4b10 	vmov	d0, r4, r5
 800b23e:	4616      	mov	r6, r2
 800b240:	f7ff feba 	bl	800afb8 <__ulp>
 800b244:	ec51 0b10 	vmov	r0, r1, d0
 800b248:	b17e      	cbz	r6, 800b26a <sulp+0x36>
 800b24a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b24e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b252:	2b00      	cmp	r3, #0
 800b254:	dd09      	ble.n	800b26a <sulp+0x36>
 800b256:	051b      	lsls	r3, r3, #20
 800b258:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b25c:	2400      	movs	r4, #0
 800b25e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b262:	4622      	mov	r2, r4
 800b264:	462b      	mov	r3, r5
 800b266:	f7f5 f9e7 	bl	8000638 <__aeabi_dmul>
 800b26a:	ec41 0b10 	vmov	d0, r0, r1
 800b26e:	bd70      	pop	{r4, r5, r6, pc}

0800b270 <_strtod_l>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b09f      	sub	sp, #124	@ 0x7c
 800b276:	460c      	mov	r4, r1
 800b278:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b27a:	2200      	movs	r2, #0
 800b27c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b27e:	9005      	str	r0, [sp, #20]
 800b280:	f04f 0a00 	mov.w	sl, #0
 800b284:	f04f 0b00 	mov.w	fp, #0
 800b288:	460a      	mov	r2, r1
 800b28a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b28c:	7811      	ldrb	r1, [r2, #0]
 800b28e:	292b      	cmp	r1, #43	@ 0x2b
 800b290:	d04a      	beq.n	800b328 <_strtod_l+0xb8>
 800b292:	d838      	bhi.n	800b306 <_strtod_l+0x96>
 800b294:	290d      	cmp	r1, #13
 800b296:	d832      	bhi.n	800b2fe <_strtod_l+0x8e>
 800b298:	2908      	cmp	r1, #8
 800b29a:	d832      	bhi.n	800b302 <_strtod_l+0x92>
 800b29c:	2900      	cmp	r1, #0
 800b29e:	d03b      	beq.n	800b318 <_strtod_l+0xa8>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b2a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b2a6:	782a      	ldrb	r2, [r5, #0]
 800b2a8:	2a30      	cmp	r2, #48	@ 0x30
 800b2aa:	f040 80b3 	bne.w	800b414 <_strtod_l+0x1a4>
 800b2ae:	786a      	ldrb	r2, [r5, #1]
 800b2b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2b4:	2a58      	cmp	r2, #88	@ 0x58
 800b2b6:	d16e      	bne.n	800b396 <_strtod_l+0x126>
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	ab1a      	add	r3, sp, #104	@ 0x68
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	4a8e      	ldr	r2, [pc, #568]	@ (800b4fc <_strtod_l+0x28c>)
 800b2c4:	9805      	ldr	r0, [sp, #20]
 800b2c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b2c8:	a919      	add	r1, sp, #100	@ 0x64
 800b2ca:	f001 fadf 	bl	800c88c <__gethex>
 800b2ce:	f010 060f 	ands.w	r6, r0, #15
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	d005      	beq.n	800b2e2 <_strtod_l+0x72>
 800b2d6:	2e06      	cmp	r6, #6
 800b2d8:	d128      	bne.n	800b32c <_strtod_l+0xbc>
 800b2da:	3501      	adds	r5, #1
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9519      	str	r5, [sp, #100]	@ 0x64
 800b2e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f040 858e 	bne.w	800be06 <_strtod_l+0xb96>
 800b2ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ec:	b1cb      	cbz	r3, 800b322 <_strtod_l+0xb2>
 800b2ee:	4652      	mov	r2, sl
 800b2f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b2f4:	ec43 2b10 	vmov	d0, r2, r3
 800b2f8:	b01f      	add	sp, #124	@ 0x7c
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fe:	2920      	cmp	r1, #32
 800b300:	d1ce      	bne.n	800b2a0 <_strtod_l+0x30>
 800b302:	3201      	adds	r2, #1
 800b304:	e7c1      	b.n	800b28a <_strtod_l+0x1a>
 800b306:	292d      	cmp	r1, #45	@ 0x2d
 800b308:	d1ca      	bne.n	800b2a0 <_strtod_l+0x30>
 800b30a:	2101      	movs	r1, #1
 800b30c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b30e:	1c51      	adds	r1, r2, #1
 800b310:	9119      	str	r1, [sp, #100]	@ 0x64
 800b312:	7852      	ldrb	r2, [r2, #1]
 800b314:	2a00      	cmp	r2, #0
 800b316:	d1c5      	bne.n	800b2a4 <_strtod_l+0x34>
 800b318:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b31a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 8570 	bne.w	800be02 <_strtod_l+0xb92>
 800b322:	4652      	mov	r2, sl
 800b324:	465b      	mov	r3, fp
 800b326:	e7e5      	b.n	800b2f4 <_strtod_l+0x84>
 800b328:	2100      	movs	r1, #0
 800b32a:	e7ef      	b.n	800b30c <_strtod_l+0x9c>
 800b32c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b32e:	b13a      	cbz	r2, 800b340 <_strtod_l+0xd0>
 800b330:	2135      	movs	r1, #53	@ 0x35
 800b332:	a81c      	add	r0, sp, #112	@ 0x70
 800b334:	f7ff ff3a 	bl	800b1ac <__copybits>
 800b338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b33a:	9805      	ldr	r0, [sp, #20]
 800b33c:	f7ff fb08 	bl	800a950 <_Bfree>
 800b340:	3e01      	subs	r6, #1
 800b342:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b344:	2e04      	cmp	r6, #4
 800b346:	d806      	bhi.n	800b356 <_strtod_l+0xe6>
 800b348:	e8df f006 	tbb	[pc, r6]
 800b34c:	201d0314 	.word	0x201d0314
 800b350:	14          	.byte	0x14
 800b351:	00          	.byte	0x00
 800b352:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b356:	05e1      	lsls	r1, r4, #23
 800b358:	bf48      	it	mi
 800b35a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b35e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b362:	0d1b      	lsrs	r3, r3, #20
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1bb      	bne.n	800b2e2 <_strtod_l+0x72>
 800b36a:	f7fe fb23 	bl	80099b4 <__errno>
 800b36e:	2322      	movs	r3, #34	@ 0x22
 800b370:	6003      	str	r3, [r0, #0]
 800b372:	e7b6      	b.n	800b2e2 <_strtod_l+0x72>
 800b374:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b378:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b37c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b380:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b384:	e7e7      	b.n	800b356 <_strtod_l+0xe6>
 800b386:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b504 <_strtod_l+0x294>
 800b38a:	e7e4      	b.n	800b356 <_strtod_l+0xe6>
 800b38c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b390:	f04f 3aff 	mov.w	sl, #4294967295
 800b394:	e7df      	b.n	800b356 <_strtod_l+0xe6>
 800b396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b39c:	785b      	ldrb	r3, [r3, #1]
 800b39e:	2b30      	cmp	r3, #48	@ 0x30
 800b3a0:	d0f9      	beq.n	800b396 <_strtod_l+0x126>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d09d      	beq.n	800b2e2 <_strtod_l+0x72>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9308      	str	r3, [sp, #32]
 800b3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b4:	461f      	mov	r7, r3
 800b3b6:	220a      	movs	r2, #10
 800b3b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b3ba:	7805      	ldrb	r5, [r0, #0]
 800b3bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b3c0:	b2d9      	uxtb	r1, r3
 800b3c2:	2909      	cmp	r1, #9
 800b3c4:	d928      	bls.n	800b418 <_strtod_l+0x1a8>
 800b3c6:	494e      	ldr	r1, [pc, #312]	@ (800b500 <_strtod_l+0x290>)
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f001 f979 	bl	800c6c0 <strncmp>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d032      	beq.n	800b438 <_strtod_l+0x1c8>
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4681      	mov	r9, r0
 800b3d8:	463d      	mov	r5, r7
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2a65      	cmp	r2, #101	@ 0x65
 800b3de:	d001      	beq.n	800b3e4 <_strtod_l+0x174>
 800b3e0:	2a45      	cmp	r2, #69	@ 0x45
 800b3e2:	d114      	bne.n	800b40e <_strtod_l+0x19e>
 800b3e4:	b91d      	cbnz	r5, 800b3ee <_strtod_l+0x17e>
 800b3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3e8:	4302      	orrs	r2, r0
 800b3ea:	d095      	beq.n	800b318 <_strtod_l+0xa8>
 800b3ec:	2500      	movs	r5, #0
 800b3ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b3f0:	1c62      	adds	r2, r4, #1
 800b3f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3f4:	7862      	ldrb	r2, [r4, #1]
 800b3f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b3f8:	d077      	beq.n	800b4ea <_strtod_l+0x27a>
 800b3fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800b3fc:	d07b      	beq.n	800b4f6 <_strtod_l+0x286>
 800b3fe:	f04f 0c00 	mov.w	ip, #0
 800b402:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b406:	2909      	cmp	r1, #9
 800b408:	f240 8082 	bls.w	800b510 <_strtod_l+0x2a0>
 800b40c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b40e:	f04f 0800 	mov.w	r8, #0
 800b412:	e0a2      	b.n	800b55a <_strtod_l+0x2ea>
 800b414:	2300      	movs	r3, #0
 800b416:	e7c7      	b.n	800b3a8 <_strtod_l+0x138>
 800b418:	2f08      	cmp	r7, #8
 800b41a:	bfd5      	itete	le
 800b41c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b41e:	9908      	ldrgt	r1, [sp, #32]
 800b420:	fb02 3301 	mlale	r3, r2, r1, r3
 800b424:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b428:	f100 0001 	add.w	r0, r0, #1
 800b42c:	bfd4      	ite	le
 800b42e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b430:	9308      	strgt	r3, [sp, #32]
 800b432:	3701      	adds	r7, #1
 800b434:	9019      	str	r0, [sp, #100]	@ 0x64
 800b436:	e7bf      	b.n	800b3b8 <_strtod_l+0x148>
 800b438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b43e:	785a      	ldrb	r2, [r3, #1]
 800b440:	b37f      	cbz	r7, 800b4a2 <_strtod_l+0x232>
 800b442:	4681      	mov	r9, r0
 800b444:	463d      	mov	r5, r7
 800b446:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b44a:	2b09      	cmp	r3, #9
 800b44c:	d912      	bls.n	800b474 <_strtod_l+0x204>
 800b44e:	2301      	movs	r3, #1
 800b450:	e7c4      	b.n	800b3dc <_strtod_l+0x16c>
 800b452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b454:	1c5a      	adds	r2, r3, #1
 800b456:	9219      	str	r2, [sp, #100]	@ 0x64
 800b458:	785a      	ldrb	r2, [r3, #1]
 800b45a:	3001      	adds	r0, #1
 800b45c:	2a30      	cmp	r2, #48	@ 0x30
 800b45e:	d0f8      	beq.n	800b452 <_strtod_l+0x1e2>
 800b460:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b464:	2b08      	cmp	r3, #8
 800b466:	f200 84d3 	bhi.w	800be10 <_strtod_l+0xba0>
 800b46a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b46c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b46e:	4681      	mov	r9, r0
 800b470:	2000      	movs	r0, #0
 800b472:	4605      	mov	r5, r0
 800b474:	3a30      	subs	r2, #48	@ 0x30
 800b476:	f100 0301 	add.w	r3, r0, #1
 800b47a:	d02a      	beq.n	800b4d2 <_strtod_l+0x262>
 800b47c:	4499      	add	r9, r3
 800b47e:	eb00 0c05 	add.w	ip, r0, r5
 800b482:	462b      	mov	r3, r5
 800b484:	210a      	movs	r1, #10
 800b486:	4563      	cmp	r3, ip
 800b488:	d10d      	bne.n	800b4a6 <_strtod_l+0x236>
 800b48a:	1c69      	adds	r1, r5, #1
 800b48c:	4401      	add	r1, r0
 800b48e:	4428      	add	r0, r5
 800b490:	2808      	cmp	r0, #8
 800b492:	dc16      	bgt.n	800b4c2 <_strtod_l+0x252>
 800b494:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b496:	230a      	movs	r3, #10
 800b498:	fb03 2300 	mla	r3, r3, r0, r2
 800b49c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e018      	b.n	800b4d4 <_strtod_l+0x264>
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	e7da      	b.n	800b45c <_strtod_l+0x1ec>
 800b4a6:	2b08      	cmp	r3, #8
 800b4a8:	f103 0301 	add.w	r3, r3, #1
 800b4ac:	dc03      	bgt.n	800b4b6 <_strtod_l+0x246>
 800b4ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b4b0:	434e      	muls	r6, r1
 800b4b2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b4b4:	e7e7      	b.n	800b486 <_strtod_l+0x216>
 800b4b6:	2b10      	cmp	r3, #16
 800b4b8:	bfde      	ittt	le
 800b4ba:	9e08      	ldrle	r6, [sp, #32]
 800b4bc:	434e      	mulle	r6, r1
 800b4be:	9608      	strle	r6, [sp, #32]
 800b4c0:	e7e1      	b.n	800b486 <_strtod_l+0x216>
 800b4c2:	280f      	cmp	r0, #15
 800b4c4:	dceb      	bgt.n	800b49e <_strtod_l+0x22e>
 800b4c6:	9808      	ldr	r0, [sp, #32]
 800b4c8:	230a      	movs	r3, #10
 800b4ca:	fb03 2300 	mla	r3, r3, r0, r2
 800b4ce:	9308      	str	r3, [sp, #32]
 800b4d0:	e7e5      	b.n	800b49e <_strtod_l+0x22e>
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4d6:	1c50      	adds	r0, r2, #1
 800b4d8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b4da:	7852      	ldrb	r2, [r2, #1]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	460d      	mov	r5, r1
 800b4e0:	e7b1      	b.n	800b446 <_strtod_l+0x1d6>
 800b4e2:	f04f 0900 	mov.w	r9, #0
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e77d      	b.n	800b3e6 <_strtod_l+0x176>
 800b4ea:	f04f 0c00 	mov.w	ip, #0
 800b4ee:	1ca2      	adds	r2, r4, #2
 800b4f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4f2:	78a2      	ldrb	r2, [r4, #2]
 800b4f4:	e785      	b.n	800b402 <_strtod_l+0x192>
 800b4f6:	f04f 0c01 	mov.w	ip, #1
 800b4fa:	e7f8      	b.n	800b4ee <_strtod_l+0x27e>
 800b4fc:	0800d950 	.word	0x0800d950
 800b500:	0800d938 	.word	0x0800d938
 800b504:	7ff00000 	.word	0x7ff00000
 800b508:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b50a:	1c51      	adds	r1, r2, #1
 800b50c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b50e:	7852      	ldrb	r2, [r2, #1]
 800b510:	2a30      	cmp	r2, #48	@ 0x30
 800b512:	d0f9      	beq.n	800b508 <_strtod_l+0x298>
 800b514:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b518:	2908      	cmp	r1, #8
 800b51a:	f63f af78 	bhi.w	800b40e <_strtod_l+0x19e>
 800b51e:	3a30      	subs	r2, #48	@ 0x30
 800b520:	920e      	str	r2, [sp, #56]	@ 0x38
 800b522:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b524:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b526:	f04f 080a 	mov.w	r8, #10
 800b52a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b52c:	1c56      	adds	r6, r2, #1
 800b52e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b530:	7852      	ldrb	r2, [r2, #1]
 800b532:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b536:	f1be 0f09 	cmp.w	lr, #9
 800b53a:	d939      	bls.n	800b5b0 <_strtod_l+0x340>
 800b53c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b53e:	1a76      	subs	r6, r6, r1
 800b540:	2e08      	cmp	r6, #8
 800b542:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b546:	dc03      	bgt.n	800b550 <_strtod_l+0x2e0>
 800b548:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b54a:	4588      	cmp	r8, r1
 800b54c:	bfa8      	it	ge
 800b54e:	4688      	movge	r8, r1
 800b550:	f1bc 0f00 	cmp.w	ip, #0
 800b554:	d001      	beq.n	800b55a <_strtod_l+0x2ea>
 800b556:	f1c8 0800 	rsb	r8, r8, #0
 800b55a:	2d00      	cmp	r5, #0
 800b55c:	d14e      	bne.n	800b5fc <_strtod_l+0x38c>
 800b55e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b560:	4308      	orrs	r0, r1
 800b562:	f47f aebe 	bne.w	800b2e2 <_strtod_l+0x72>
 800b566:	2b00      	cmp	r3, #0
 800b568:	f47f aed6 	bne.w	800b318 <_strtod_l+0xa8>
 800b56c:	2a69      	cmp	r2, #105	@ 0x69
 800b56e:	d028      	beq.n	800b5c2 <_strtod_l+0x352>
 800b570:	dc25      	bgt.n	800b5be <_strtod_l+0x34e>
 800b572:	2a49      	cmp	r2, #73	@ 0x49
 800b574:	d025      	beq.n	800b5c2 <_strtod_l+0x352>
 800b576:	2a4e      	cmp	r2, #78	@ 0x4e
 800b578:	f47f aece 	bne.w	800b318 <_strtod_l+0xa8>
 800b57c:	499b      	ldr	r1, [pc, #620]	@ (800b7ec <_strtod_l+0x57c>)
 800b57e:	a819      	add	r0, sp, #100	@ 0x64
 800b580:	f001 fba6 	bl	800ccd0 <__match>
 800b584:	2800      	cmp	r0, #0
 800b586:	f43f aec7 	beq.w	800b318 <_strtod_l+0xa8>
 800b58a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b28      	cmp	r3, #40	@ 0x28
 800b590:	d12e      	bne.n	800b5f0 <_strtod_l+0x380>
 800b592:	4997      	ldr	r1, [pc, #604]	@ (800b7f0 <_strtod_l+0x580>)
 800b594:	aa1c      	add	r2, sp, #112	@ 0x70
 800b596:	a819      	add	r0, sp, #100	@ 0x64
 800b598:	f001 fbae 	bl	800ccf8 <__hexnan>
 800b59c:	2805      	cmp	r0, #5
 800b59e:	d127      	bne.n	800b5f0 <_strtod_l+0x380>
 800b5a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b5a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b5aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b5ae:	e698      	b.n	800b2e2 <_strtod_l+0x72>
 800b5b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b5b2:	fb08 2101 	mla	r1, r8, r1, r2
 800b5b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b5ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5bc:	e7b5      	b.n	800b52a <_strtod_l+0x2ba>
 800b5be:	2a6e      	cmp	r2, #110	@ 0x6e
 800b5c0:	e7da      	b.n	800b578 <_strtod_l+0x308>
 800b5c2:	498c      	ldr	r1, [pc, #560]	@ (800b7f4 <_strtod_l+0x584>)
 800b5c4:	a819      	add	r0, sp, #100	@ 0x64
 800b5c6:	f001 fb83 	bl	800ccd0 <__match>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	f43f aea4 	beq.w	800b318 <_strtod_l+0xa8>
 800b5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5d2:	4989      	ldr	r1, [pc, #548]	@ (800b7f8 <_strtod_l+0x588>)
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	a819      	add	r0, sp, #100	@ 0x64
 800b5d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5da:	f001 fb79 	bl	800ccd0 <__match>
 800b5de:	b910      	cbnz	r0, 800b5e6 <_strtod_l+0x376>
 800b5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b808 <_strtod_l+0x598>
 800b5ea:	f04f 0a00 	mov.w	sl, #0
 800b5ee:	e678      	b.n	800b2e2 <_strtod_l+0x72>
 800b5f0:	4882      	ldr	r0, [pc, #520]	@ (800b7fc <_strtod_l+0x58c>)
 800b5f2:	f001 f8a9 	bl	800c748 <nan>
 800b5f6:	ec5b ab10 	vmov	sl, fp, d0
 800b5fa:	e672      	b.n	800b2e2 <_strtod_l+0x72>
 800b5fc:	eba8 0309 	sub.w	r3, r8, r9
 800b600:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b602:	9309      	str	r3, [sp, #36]	@ 0x24
 800b604:	2f00      	cmp	r7, #0
 800b606:	bf08      	it	eq
 800b608:	462f      	moveq	r7, r5
 800b60a:	2d10      	cmp	r5, #16
 800b60c:	462c      	mov	r4, r5
 800b60e:	bfa8      	it	ge
 800b610:	2410      	movge	r4, #16
 800b612:	f7f4 ff97 	bl	8000544 <__aeabi_ui2d>
 800b616:	2d09      	cmp	r5, #9
 800b618:	4682      	mov	sl, r0
 800b61a:	468b      	mov	fp, r1
 800b61c:	dc13      	bgt.n	800b646 <_strtod_l+0x3d6>
 800b61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b620:	2b00      	cmp	r3, #0
 800b622:	f43f ae5e 	beq.w	800b2e2 <_strtod_l+0x72>
 800b626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b628:	dd78      	ble.n	800b71c <_strtod_l+0x4ac>
 800b62a:	2b16      	cmp	r3, #22
 800b62c:	dc5f      	bgt.n	800b6ee <_strtod_l+0x47e>
 800b62e:	4974      	ldr	r1, [pc, #464]	@ (800b800 <_strtod_l+0x590>)
 800b630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b638:	4652      	mov	r2, sl
 800b63a:	465b      	mov	r3, fp
 800b63c:	f7f4 fffc 	bl	8000638 <__aeabi_dmul>
 800b640:	4682      	mov	sl, r0
 800b642:	468b      	mov	fp, r1
 800b644:	e64d      	b.n	800b2e2 <_strtod_l+0x72>
 800b646:	4b6e      	ldr	r3, [pc, #440]	@ (800b800 <_strtod_l+0x590>)
 800b648:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b64c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b650:	f7f4 fff2 	bl	8000638 <__aeabi_dmul>
 800b654:	4682      	mov	sl, r0
 800b656:	9808      	ldr	r0, [sp, #32]
 800b658:	468b      	mov	fp, r1
 800b65a:	f7f4 ff73 	bl	8000544 <__aeabi_ui2d>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4650      	mov	r0, sl
 800b664:	4659      	mov	r1, fp
 800b666:	f7f4 fe31 	bl	80002cc <__adddf3>
 800b66a:	2d0f      	cmp	r5, #15
 800b66c:	4682      	mov	sl, r0
 800b66e:	468b      	mov	fp, r1
 800b670:	ddd5      	ble.n	800b61e <_strtod_l+0x3ae>
 800b672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b674:	1b2c      	subs	r4, r5, r4
 800b676:	441c      	add	r4, r3
 800b678:	2c00      	cmp	r4, #0
 800b67a:	f340 8096 	ble.w	800b7aa <_strtod_l+0x53a>
 800b67e:	f014 030f 	ands.w	r3, r4, #15
 800b682:	d00a      	beq.n	800b69a <_strtod_l+0x42a>
 800b684:	495e      	ldr	r1, [pc, #376]	@ (800b800 <_strtod_l+0x590>)
 800b686:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b68a:	4652      	mov	r2, sl
 800b68c:	465b      	mov	r3, fp
 800b68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b692:	f7f4 ffd1 	bl	8000638 <__aeabi_dmul>
 800b696:	4682      	mov	sl, r0
 800b698:	468b      	mov	fp, r1
 800b69a:	f034 040f 	bics.w	r4, r4, #15
 800b69e:	d073      	beq.n	800b788 <_strtod_l+0x518>
 800b6a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b6a4:	dd48      	ble.n	800b738 <_strtod_l+0x4c8>
 800b6a6:	2400      	movs	r4, #0
 800b6a8:	46a0      	mov	r8, r4
 800b6aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800b6ac:	46a1      	mov	r9, r4
 800b6ae:	9a05      	ldr	r2, [sp, #20]
 800b6b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b808 <_strtod_l+0x598>
 800b6b4:	2322      	movs	r3, #34	@ 0x22
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	f04f 0a00 	mov.w	sl, #0
 800b6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f43f ae0f 	beq.w	800b2e2 <_strtod_l+0x72>
 800b6c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6c6:	9805      	ldr	r0, [sp, #20]
 800b6c8:	f7ff f942 	bl	800a950 <_Bfree>
 800b6cc:	9805      	ldr	r0, [sp, #20]
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	f7ff f93e 	bl	800a950 <_Bfree>
 800b6d4:	9805      	ldr	r0, [sp, #20]
 800b6d6:	4641      	mov	r1, r8
 800b6d8:	f7ff f93a 	bl	800a950 <_Bfree>
 800b6dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6de:	9805      	ldr	r0, [sp, #20]
 800b6e0:	f7ff f936 	bl	800a950 <_Bfree>
 800b6e4:	9805      	ldr	r0, [sp, #20]
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	f7ff f932 	bl	800a950 <_Bfree>
 800b6ec:	e5f9      	b.n	800b2e2 <_strtod_l+0x72>
 800b6ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	dbbc      	blt.n	800b672 <_strtod_l+0x402>
 800b6f8:	4c41      	ldr	r4, [pc, #260]	@ (800b800 <_strtod_l+0x590>)
 800b6fa:	f1c5 050f 	rsb	r5, r5, #15
 800b6fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b702:	4652      	mov	r2, sl
 800b704:	465b      	mov	r3, fp
 800b706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b70a:	f7f4 ff95 	bl	8000638 <__aeabi_dmul>
 800b70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b710:	1b5d      	subs	r5, r3, r5
 800b712:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b716:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b71a:	e78f      	b.n	800b63c <_strtod_l+0x3cc>
 800b71c:	3316      	adds	r3, #22
 800b71e:	dba8      	blt.n	800b672 <_strtod_l+0x402>
 800b720:	4b37      	ldr	r3, [pc, #220]	@ (800b800 <_strtod_l+0x590>)
 800b722:	eba9 0808 	sub.w	r8, r9, r8
 800b726:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b72a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b72e:	4650      	mov	r0, sl
 800b730:	4659      	mov	r1, fp
 800b732:	f7f5 f8ab 	bl	800088c <__aeabi_ddiv>
 800b736:	e783      	b.n	800b640 <_strtod_l+0x3d0>
 800b738:	4b32      	ldr	r3, [pc, #200]	@ (800b804 <_strtod_l+0x594>)
 800b73a:	9308      	str	r3, [sp, #32]
 800b73c:	2300      	movs	r3, #0
 800b73e:	1124      	asrs	r4, r4, #4
 800b740:	4650      	mov	r0, sl
 800b742:	4659      	mov	r1, fp
 800b744:	461e      	mov	r6, r3
 800b746:	2c01      	cmp	r4, #1
 800b748:	dc21      	bgt.n	800b78e <_strtod_l+0x51e>
 800b74a:	b10b      	cbz	r3, 800b750 <_strtod_l+0x4e0>
 800b74c:	4682      	mov	sl, r0
 800b74e:	468b      	mov	fp, r1
 800b750:	492c      	ldr	r1, [pc, #176]	@ (800b804 <_strtod_l+0x594>)
 800b752:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b756:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b75a:	4652      	mov	r2, sl
 800b75c:	465b      	mov	r3, fp
 800b75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b762:	f7f4 ff69 	bl	8000638 <__aeabi_dmul>
 800b766:	4b28      	ldr	r3, [pc, #160]	@ (800b808 <_strtod_l+0x598>)
 800b768:	460a      	mov	r2, r1
 800b76a:	400b      	ands	r3, r1
 800b76c:	4927      	ldr	r1, [pc, #156]	@ (800b80c <_strtod_l+0x59c>)
 800b76e:	428b      	cmp	r3, r1
 800b770:	4682      	mov	sl, r0
 800b772:	d898      	bhi.n	800b6a6 <_strtod_l+0x436>
 800b774:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b778:	428b      	cmp	r3, r1
 800b77a:	bf86      	itte	hi
 800b77c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b810 <_strtod_l+0x5a0>
 800b780:	f04f 3aff 	movhi.w	sl, #4294967295
 800b784:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b788:	2300      	movs	r3, #0
 800b78a:	9308      	str	r3, [sp, #32]
 800b78c:	e07a      	b.n	800b884 <_strtod_l+0x614>
 800b78e:	07e2      	lsls	r2, r4, #31
 800b790:	d505      	bpl.n	800b79e <_strtod_l+0x52e>
 800b792:	9b08      	ldr	r3, [sp, #32]
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	f7f4 ff4e 	bl	8000638 <__aeabi_dmul>
 800b79c:	2301      	movs	r3, #1
 800b79e:	9a08      	ldr	r2, [sp, #32]
 800b7a0:	3208      	adds	r2, #8
 800b7a2:	3601      	adds	r6, #1
 800b7a4:	1064      	asrs	r4, r4, #1
 800b7a6:	9208      	str	r2, [sp, #32]
 800b7a8:	e7cd      	b.n	800b746 <_strtod_l+0x4d6>
 800b7aa:	d0ed      	beq.n	800b788 <_strtod_l+0x518>
 800b7ac:	4264      	negs	r4, r4
 800b7ae:	f014 020f 	ands.w	r2, r4, #15
 800b7b2:	d00a      	beq.n	800b7ca <_strtod_l+0x55a>
 800b7b4:	4b12      	ldr	r3, [pc, #72]	@ (800b800 <_strtod_l+0x590>)
 800b7b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	4659      	mov	r1, fp
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	f7f5 f863 	bl	800088c <__aeabi_ddiv>
 800b7c6:	4682      	mov	sl, r0
 800b7c8:	468b      	mov	fp, r1
 800b7ca:	1124      	asrs	r4, r4, #4
 800b7cc:	d0dc      	beq.n	800b788 <_strtod_l+0x518>
 800b7ce:	2c1f      	cmp	r4, #31
 800b7d0:	dd20      	ble.n	800b814 <_strtod_l+0x5a4>
 800b7d2:	2400      	movs	r4, #0
 800b7d4:	46a0      	mov	r8, r4
 800b7d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b7d8:	46a1      	mov	r9, r4
 800b7da:	9a05      	ldr	r2, [sp, #20]
 800b7dc:	2322      	movs	r3, #34	@ 0x22
 800b7de:	f04f 0a00 	mov.w	sl, #0
 800b7e2:	f04f 0b00 	mov.w	fp, #0
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	e768      	b.n	800b6bc <_strtod_l+0x44c>
 800b7ea:	bf00      	nop
 800b7ec:	0800d729 	.word	0x0800d729
 800b7f0:	0800d93c 	.word	0x0800d93c
 800b7f4:	0800d721 	.word	0x0800d721
 800b7f8:	0800d758 	.word	0x0800d758
 800b7fc:	0800dae5 	.word	0x0800dae5
 800b800:	0800d870 	.word	0x0800d870
 800b804:	0800d848 	.word	0x0800d848
 800b808:	7ff00000 	.word	0x7ff00000
 800b80c:	7ca00000 	.word	0x7ca00000
 800b810:	7fefffff 	.word	0x7fefffff
 800b814:	f014 0310 	ands.w	r3, r4, #16
 800b818:	bf18      	it	ne
 800b81a:	236a      	movne	r3, #106	@ 0x6a
 800b81c:	4ea9      	ldr	r6, [pc, #676]	@ (800bac4 <_strtod_l+0x854>)
 800b81e:	9308      	str	r3, [sp, #32]
 800b820:	4650      	mov	r0, sl
 800b822:	4659      	mov	r1, fp
 800b824:	2300      	movs	r3, #0
 800b826:	07e2      	lsls	r2, r4, #31
 800b828:	d504      	bpl.n	800b834 <_strtod_l+0x5c4>
 800b82a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b82e:	f7f4 ff03 	bl	8000638 <__aeabi_dmul>
 800b832:	2301      	movs	r3, #1
 800b834:	1064      	asrs	r4, r4, #1
 800b836:	f106 0608 	add.w	r6, r6, #8
 800b83a:	d1f4      	bne.n	800b826 <_strtod_l+0x5b6>
 800b83c:	b10b      	cbz	r3, 800b842 <_strtod_l+0x5d2>
 800b83e:	4682      	mov	sl, r0
 800b840:	468b      	mov	fp, r1
 800b842:	9b08      	ldr	r3, [sp, #32]
 800b844:	b1b3      	cbz	r3, 800b874 <_strtod_l+0x604>
 800b846:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b84a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b84e:	2b00      	cmp	r3, #0
 800b850:	4659      	mov	r1, fp
 800b852:	dd0f      	ble.n	800b874 <_strtod_l+0x604>
 800b854:	2b1f      	cmp	r3, #31
 800b856:	dd55      	ble.n	800b904 <_strtod_l+0x694>
 800b858:	2b34      	cmp	r3, #52	@ 0x34
 800b85a:	bfde      	ittt	le
 800b85c:	f04f 33ff 	movle.w	r3, #4294967295
 800b860:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b864:	4093      	lslle	r3, r2
 800b866:	f04f 0a00 	mov.w	sl, #0
 800b86a:	bfcc      	ite	gt
 800b86c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b870:	ea03 0b01 	andle.w	fp, r3, r1
 800b874:	2200      	movs	r2, #0
 800b876:	2300      	movs	r3, #0
 800b878:	4650      	mov	r0, sl
 800b87a:	4659      	mov	r1, fp
 800b87c:	f7f5 f944 	bl	8000b08 <__aeabi_dcmpeq>
 800b880:	2800      	cmp	r0, #0
 800b882:	d1a6      	bne.n	800b7d2 <_strtod_l+0x562>
 800b884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b88a:	9805      	ldr	r0, [sp, #20]
 800b88c:	462b      	mov	r3, r5
 800b88e:	463a      	mov	r2, r7
 800b890:	f7ff f8c6 	bl	800aa20 <__s2b>
 800b894:	900a      	str	r0, [sp, #40]	@ 0x28
 800b896:	2800      	cmp	r0, #0
 800b898:	f43f af05 	beq.w	800b6a6 <_strtod_l+0x436>
 800b89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b89e:	2a00      	cmp	r2, #0
 800b8a0:	eba9 0308 	sub.w	r3, r9, r8
 800b8a4:	bfa8      	it	ge
 800b8a6:	2300      	movge	r3, #0
 800b8a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8aa:	2400      	movs	r4, #0
 800b8ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b8b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b8b2:	46a0      	mov	r8, r4
 800b8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8b6:	9805      	ldr	r0, [sp, #20]
 800b8b8:	6859      	ldr	r1, [r3, #4]
 800b8ba:	f7ff f809 	bl	800a8d0 <_Balloc>
 800b8be:	4681      	mov	r9, r0
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	f43f aef4 	beq.w	800b6ae <_strtod_l+0x43e>
 800b8c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8c8:	691a      	ldr	r2, [r3, #16]
 800b8ca:	3202      	adds	r2, #2
 800b8cc:	f103 010c 	add.w	r1, r3, #12
 800b8d0:	0092      	lsls	r2, r2, #2
 800b8d2:	300c      	adds	r0, #12
 800b8d4:	f7fe f89b 	bl	8009a0e <memcpy>
 800b8d8:	ec4b ab10 	vmov	d0, sl, fp
 800b8dc:	9805      	ldr	r0, [sp, #20]
 800b8de:	aa1c      	add	r2, sp, #112	@ 0x70
 800b8e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b8e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b8e6:	f7ff fbd7 	bl	800b098 <__d2b>
 800b8ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f43f aede 	beq.w	800b6ae <_strtod_l+0x43e>
 800b8f2:	9805      	ldr	r0, [sp, #20]
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	f7ff f929 	bl	800ab4c <__i2b>
 800b8fa:	4680      	mov	r8, r0
 800b8fc:	b948      	cbnz	r0, 800b912 <_strtod_l+0x6a2>
 800b8fe:	f04f 0800 	mov.w	r8, #0
 800b902:	e6d4      	b.n	800b6ae <_strtod_l+0x43e>
 800b904:	f04f 32ff 	mov.w	r2, #4294967295
 800b908:	fa02 f303 	lsl.w	r3, r2, r3
 800b90c:	ea03 0a0a 	and.w	sl, r3, sl
 800b910:	e7b0      	b.n	800b874 <_strtod_l+0x604>
 800b912:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b914:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b916:	2d00      	cmp	r5, #0
 800b918:	bfab      	itete	ge
 800b91a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b91c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b91e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b920:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b922:	bfac      	ite	ge
 800b924:	18ef      	addge	r7, r5, r3
 800b926:	1b5e      	sublt	r6, r3, r5
 800b928:	9b08      	ldr	r3, [sp, #32]
 800b92a:	1aed      	subs	r5, r5, r3
 800b92c:	4415      	add	r5, r2
 800b92e:	4b66      	ldr	r3, [pc, #408]	@ (800bac8 <_strtod_l+0x858>)
 800b930:	3d01      	subs	r5, #1
 800b932:	429d      	cmp	r5, r3
 800b934:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b938:	da50      	bge.n	800b9dc <_strtod_l+0x76c>
 800b93a:	1b5b      	subs	r3, r3, r5
 800b93c:	2b1f      	cmp	r3, #31
 800b93e:	eba2 0203 	sub.w	r2, r2, r3
 800b942:	f04f 0101 	mov.w	r1, #1
 800b946:	dc3d      	bgt.n	800b9c4 <_strtod_l+0x754>
 800b948:	fa01 f303 	lsl.w	r3, r1, r3
 800b94c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b94e:	2300      	movs	r3, #0
 800b950:	9310      	str	r3, [sp, #64]	@ 0x40
 800b952:	18bd      	adds	r5, r7, r2
 800b954:	9b08      	ldr	r3, [sp, #32]
 800b956:	42af      	cmp	r7, r5
 800b958:	4416      	add	r6, r2
 800b95a:	441e      	add	r6, r3
 800b95c:	463b      	mov	r3, r7
 800b95e:	bfa8      	it	ge
 800b960:	462b      	movge	r3, r5
 800b962:	42b3      	cmp	r3, r6
 800b964:	bfa8      	it	ge
 800b966:	4633      	movge	r3, r6
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bfc2      	ittt	gt
 800b96c:	1aed      	subgt	r5, r5, r3
 800b96e:	1af6      	subgt	r6, r6, r3
 800b970:	1aff      	subgt	r7, r7, r3
 800b972:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b974:	2b00      	cmp	r3, #0
 800b976:	dd16      	ble.n	800b9a6 <_strtod_l+0x736>
 800b978:	4641      	mov	r1, r8
 800b97a:	9805      	ldr	r0, [sp, #20]
 800b97c:	461a      	mov	r2, r3
 800b97e:	f7ff f9a5 	bl	800accc <__pow5mult>
 800b982:	4680      	mov	r8, r0
 800b984:	2800      	cmp	r0, #0
 800b986:	d0ba      	beq.n	800b8fe <_strtod_l+0x68e>
 800b988:	4601      	mov	r1, r0
 800b98a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b98c:	9805      	ldr	r0, [sp, #20]
 800b98e:	f7ff f8f3 	bl	800ab78 <__multiply>
 800b992:	900e      	str	r0, [sp, #56]	@ 0x38
 800b994:	2800      	cmp	r0, #0
 800b996:	f43f ae8a 	beq.w	800b6ae <_strtod_l+0x43e>
 800b99a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b99c:	9805      	ldr	r0, [sp, #20]
 800b99e:	f7fe ffd7 	bl	800a950 <_Bfree>
 800b9a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	dc1d      	bgt.n	800b9e6 <_strtod_l+0x776>
 800b9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	dd23      	ble.n	800b9f8 <_strtod_l+0x788>
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b9b4:	9805      	ldr	r0, [sp, #20]
 800b9b6:	f7ff f989 	bl	800accc <__pow5mult>
 800b9ba:	4681      	mov	r9, r0
 800b9bc:	b9e0      	cbnz	r0, 800b9f8 <_strtod_l+0x788>
 800b9be:	f04f 0900 	mov.w	r9, #0
 800b9c2:	e674      	b.n	800b6ae <_strtod_l+0x43e>
 800b9c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b9c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b9cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b9d0:	35e2      	adds	r5, #226	@ 0xe2
 800b9d2:	fa01 f305 	lsl.w	r3, r1, r5
 800b9d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b9da:	e7ba      	b.n	800b952 <_strtod_l+0x6e2>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9e4:	e7b5      	b.n	800b952 <_strtod_l+0x6e2>
 800b9e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9e8:	9805      	ldr	r0, [sp, #20]
 800b9ea:	462a      	mov	r2, r5
 800b9ec:	f7ff f9c8 	bl	800ad80 <__lshift>
 800b9f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d1d9      	bne.n	800b9aa <_strtod_l+0x73a>
 800b9f6:	e65a      	b.n	800b6ae <_strtod_l+0x43e>
 800b9f8:	2e00      	cmp	r6, #0
 800b9fa:	dd07      	ble.n	800ba0c <_strtod_l+0x79c>
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	9805      	ldr	r0, [sp, #20]
 800ba00:	4632      	mov	r2, r6
 800ba02:	f7ff f9bd 	bl	800ad80 <__lshift>
 800ba06:	4681      	mov	r9, r0
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d0d8      	beq.n	800b9be <_strtod_l+0x74e>
 800ba0c:	2f00      	cmp	r7, #0
 800ba0e:	dd08      	ble.n	800ba22 <_strtod_l+0x7b2>
 800ba10:	4641      	mov	r1, r8
 800ba12:	9805      	ldr	r0, [sp, #20]
 800ba14:	463a      	mov	r2, r7
 800ba16:	f7ff f9b3 	bl	800ad80 <__lshift>
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	f43f ae46 	beq.w	800b6ae <_strtod_l+0x43e>
 800ba22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba24:	9805      	ldr	r0, [sp, #20]
 800ba26:	464a      	mov	r2, r9
 800ba28:	f7ff fa32 	bl	800ae90 <__mdiff>
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f43f ae3d 	beq.w	800b6ae <_strtod_l+0x43e>
 800ba34:	68c3      	ldr	r3, [r0, #12]
 800ba36:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60c3      	str	r3, [r0, #12]
 800ba3c:	4641      	mov	r1, r8
 800ba3e:	f7ff fa0b 	bl	800ae58 <__mcmp>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	da46      	bge.n	800bad4 <_strtod_l+0x864>
 800ba46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba48:	ea53 030a 	orrs.w	r3, r3, sl
 800ba4c:	d16c      	bne.n	800bb28 <_strtod_l+0x8b8>
 800ba4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d168      	bne.n	800bb28 <_strtod_l+0x8b8>
 800ba56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba5a:	0d1b      	lsrs	r3, r3, #20
 800ba5c:	051b      	lsls	r3, r3, #20
 800ba5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba62:	d961      	bls.n	800bb28 <_strtod_l+0x8b8>
 800ba64:	6963      	ldr	r3, [r4, #20]
 800ba66:	b913      	cbnz	r3, 800ba6e <_strtod_l+0x7fe>
 800ba68:	6923      	ldr	r3, [r4, #16]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	dd5c      	ble.n	800bb28 <_strtod_l+0x8b8>
 800ba6e:	4621      	mov	r1, r4
 800ba70:	2201      	movs	r2, #1
 800ba72:	9805      	ldr	r0, [sp, #20]
 800ba74:	f7ff f984 	bl	800ad80 <__lshift>
 800ba78:	4641      	mov	r1, r8
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	f7ff f9ec 	bl	800ae58 <__mcmp>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	dd51      	ble.n	800bb28 <_strtod_l+0x8b8>
 800ba84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba88:	9a08      	ldr	r2, [sp, #32]
 800ba8a:	0d1b      	lsrs	r3, r3, #20
 800ba8c:	051b      	lsls	r3, r3, #20
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	d06b      	beq.n	800bb6a <_strtod_l+0x8fa>
 800ba92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba96:	d868      	bhi.n	800bb6a <_strtod_l+0x8fa>
 800ba98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ba9c:	f67f ae9d 	bls.w	800b7da <_strtod_l+0x56a>
 800baa0:	4b0a      	ldr	r3, [pc, #40]	@ (800bacc <_strtod_l+0x85c>)
 800baa2:	4650      	mov	r0, sl
 800baa4:	4659      	mov	r1, fp
 800baa6:	2200      	movs	r2, #0
 800baa8:	f7f4 fdc6 	bl	8000638 <__aeabi_dmul>
 800baac:	4b08      	ldr	r3, [pc, #32]	@ (800bad0 <_strtod_l+0x860>)
 800baae:	400b      	ands	r3, r1
 800bab0:	4682      	mov	sl, r0
 800bab2:	468b      	mov	fp, r1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f47f ae05 	bne.w	800b6c4 <_strtod_l+0x454>
 800baba:	9a05      	ldr	r2, [sp, #20]
 800babc:	2322      	movs	r3, #34	@ 0x22
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	e600      	b.n	800b6c4 <_strtod_l+0x454>
 800bac2:	bf00      	nop
 800bac4:	0800d968 	.word	0x0800d968
 800bac8:	fffffc02 	.word	0xfffffc02
 800bacc:	39500000 	.word	0x39500000
 800bad0:	7ff00000 	.word	0x7ff00000
 800bad4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bad8:	d165      	bne.n	800bba6 <_strtod_l+0x936>
 800bada:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800badc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bae0:	b35a      	cbz	r2, 800bb3a <_strtod_l+0x8ca>
 800bae2:	4a9f      	ldr	r2, [pc, #636]	@ (800bd60 <_strtod_l+0xaf0>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d12b      	bne.n	800bb40 <_strtod_l+0x8d0>
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	4651      	mov	r1, sl
 800baec:	b303      	cbz	r3, 800bb30 <_strtod_l+0x8c0>
 800baee:	4b9d      	ldr	r3, [pc, #628]	@ (800bd64 <_strtod_l+0xaf4>)
 800baf0:	465a      	mov	r2, fp
 800baf2:	4013      	ands	r3, r2
 800baf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	d81b      	bhi.n	800bb36 <_strtod_l+0x8c6>
 800bafe:	0d1b      	lsrs	r3, r3, #20
 800bb00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb04:	fa02 f303 	lsl.w	r3, r2, r3
 800bb08:	4299      	cmp	r1, r3
 800bb0a:	d119      	bne.n	800bb40 <_strtod_l+0x8d0>
 800bb0c:	4b96      	ldr	r3, [pc, #600]	@ (800bd68 <_strtod_l+0xaf8>)
 800bb0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d102      	bne.n	800bb1a <_strtod_l+0x8aa>
 800bb14:	3101      	adds	r1, #1
 800bb16:	f43f adca 	beq.w	800b6ae <_strtod_l+0x43e>
 800bb1a:	4b92      	ldr	r3, [pc, #584]	@ (800bd64 <_strtod_l+0xaf4>)
 800bb1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb1e:	401a      	ands	r2, r3
 800bb20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bb24:	f04f 0a00 	mov.w	sl, #0
 800bb28:	9b08      	ldr	r3, [sp, #32]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1b8      	bne.n	800baa0 <_strtod_l+0x830>
 800bb2e:	e5c9      	b.n	800b6c4 <_strtod_l+0x454>
 800bb30:	f04f 33ff 	mov.w	r3, #4294967295
 800bb34:	e7e8      	b.n	800bb08 <_strtod_l+0x898>
 800bb36:	4613      	mov	r3, r2
 800bb38:	e7e6      	b.n	800bb08 <_strtod_l+0x898>
 800bb3a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb3e:	d0a1      	beq.n	800ba84 <_strtod_l+0x814>
 800bb40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb42:	b1db      	cbz	r3, 800bb7c <_strtod_l+0x90c>
 800bb44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb46:	4213      	tst	r3, r2
 800bb48:	d0ee      	beq.n	800bb28 <_strtod_l+0x8b8>
 800bb4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb4c:	9a08      	ldr	r2, [sp, #32]
 800bb4e:	4650      	mov	r0, sl
 800bb50:	4659      	mov	r1, fp
 800bb52:	b1bb      	cbz	r3, 800bb84 <_strtod_l+0x914>
 800bb54:	f7ff fb6e 	bl	800b234 <sulp>
 800bb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb5c:	ec53 2b10 	vmov	r2, r3, d0
 800bb60:	f7f4 fbb4 	bl	80002cc <__adddf3>
 800bb64:	4682      	mov	sl, r0
 800bb66:	468b      	mov	fp, r1
 800bb68:	e7de      	b.n	800bb28 <_strtod_l+0x8b8>
 800bb6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bb6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb76:	f04f 3aff 	mov.w	sl, #4294967295
 800bb7a:	e7d5      	b.n	800bb28 <_strtod_l+0x8b8>
 800bb7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb7e:	ea13 0f0a 	tst.w	r3, sl
 800bb82:	e7e1      	b.n	800bb48 <_strtod_l+0x8d8>
 800bb84:	f7ff fb56 	bl	800b234 <sulp>
 800bb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb8c:	ec53 2b10 	vmov	r2, r3, d0
 800bb90:	f7f4 fb9a 	bl	80002c8 <__aeabi_dsub>
 800bb94:	2200      	movs	r2, #0
 800bb96:	2300      	movs	r3, #0
 800bb98:	4682      	mov	sl, r0
 800bb9a:	468b      	mov	fp, r1
 800bb9c:	f7f4 ffb4 	bl	8000b08 <__aeabi_dcmpeq>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d0c1      	beq.n	800bb28 <_strtod_l+0x8b8>
 800bba4:	e619      	b.n	800b7da <_strtod_l+0x56a>
 800bba6:	4641      	mov	r1, r8
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7ff facd 	bl	800b148 <__ratio>
 800bbae:	ec57 6b10 	vmov	r6, r7, d0
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bbb8:	4630      	mov	r0, r6
 800bbba:	4639      	mov	r1, r7
 800bbbc:	f7f4 ffb8 	bl	8000b30 <__aeabi_dcmple>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d06f      	beq.n	800bca4 <_strtod_l+0xa34>
 800bbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d17a      	bne.n	800bcc0 <_strtod_l+0xa50>
 800bbca:	f1ba 0f00 	cmp.w	sl, #0
 800bbce:	d158      	bne.n	800bc82 <_strtod_l+0xa12>
 800bbd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d15a      	bne.n	800bc90 <_strtod_l+0xa20>
 800bbda:	4b64      	ldr	r3, [pc, #400]	@ (800bd6c <_strtod_l+0xafc>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 ff9b 	bl	8000b1c <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d159      	bne.n	800bc9e <_strtod_l+0xa2e>
 800bbea:	4630      	mov	r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	4b60      	ldr	r3, [pc, #384]	@ (800bd70 <_strtod_l+0xb00>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f7f4 fd21 	bl	8000638 <__aeabi_dmul>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bbfe:	9606      	str	r6, [sp, #24]
 800bc00:	9307      	str	r3, [sp, #28]
 800bc02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc06:	4d57      	ldr	r5, [pc, #348]	@ (800bd64 <_strtod_l+0xaf4>)
 800bc08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc0e:	401d      	ands	r5, r3
 800bc10:	4b58      	ldr	r3, [pc, #352]	@ (800bd74 <_strtod_l+0xb04>)
 800bc12:	429d      	cmp	r5, r3
 800bc14:	f040 80b2 	bne.w	800bd7c <_strtod_l+0xb0c>
 800bc18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bc1e:	ec4b ab10 	vmov	d0, sl, fp
 800bc22:	f7ff f9c9 	bl	800afb8 <__ulp>
 800bc26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc2a:	ec51 0b10 	vmov	r0, r1, d0
 800bc2e:	f7f4 fd03 	bl	8000638 <__aeabi_dmul>
 800bc32:	4652      	mov	r2, sl
 800bc34:	465b      	mov	r3, fp
 800bc36:	f7f4 fb49 	bl	80002cc <__adddf3>
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4949      	ldr	r1, [pc, #292]	@ (800bd64 <_strtod_l+0xaf4>)
 800bc3e:	4a4e      	ldr	r2, [pc, #312]	@ (800bd78 <_strtod_l+0xb08>)
 800bc40:	4019      	ands	r1, r3
 800bc42:	4291      	cmp	r1, r2
 800bc44:	4682      	mov	sl, r0
 800bc46:	d942      	bls.n	800bcce <_strtod_l+0xa5e>
 800bc48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc4a:	4b47      	ldr	r3, [pc, #284]	@ (800bd68 <_strtod_l+0xaf8>)
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d103      	bne.n	800bc58 <_strtod_l+0x9e8>
 800bc50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc52:	3301      	adds	r3, #1
 800bc54:	f43f ad2b 	beq.w	800b6ae <_strtod_l+0x43e>
 800bc58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bd68 <_strtod_l+0xaf8>
 800bc5c:	f04f 3aff 	mov.w	sl, #4294967295
 800bc60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc62:	9805      	ldr	r0, [sp, #20]
 800bc64:	f7fe fe74 	bl	800a950 <_Bfree>
 800bc68:	9805      	ldr	r0, [sp, #20]
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f7fe fe70 	bl	800a950 <_Bfree>
 800bc70:	9805      	ldr	r0, [sp, #20]
 800bc72:	4641      	mov	r1, r8
 800bc74:	f7fe fe6c 	bl	800a950 <_Bfree>
 800bc78:	9805      	ldr	r0, [sp, #20]
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	f7fe fe68 	bl	800a950 <_Bfree>
 800bc80:	e618      	b.n	800b8b4 <_strtod_l+0x644>
 800bc82:	f1ba 0f01 	cmp.w	sl, #1
 800bc86:	d103      	bne.n	800bc90 <_strtod_l+0xa20>
 800bc88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f43f ada5 	beq.w	800b7da <_strtod_l+0x56a>
 800bc90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bd40 <_strtod_l+0xad0>
 800bc94:	4f35      	ldr	r7, [pc, #212]	@ (800bd6c <_strtod_l+0xafc>)
 800bc96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc9a:	2600      	movs	r6, #0
 800bc9c:	e7b1      	b.n	800bc02 <_strtod_l+0x992>
 800bc9e:	4f34      	ldr	r7, [pc, #208]	@ (800bd70 <_strtod_l+0xb00>)
 800bca0:	2600      	movs	r6, #0
 800bca2:	e7aa      	b.n	800bbfa <_strtod_l+0x98a>
 800bca4:	4b32      	ldr	r3, [pc, #200]	@ (800bd70 <_strtod_l+0xb00>)
 800bca6:	4630      	mov	r0, r6
 800bca8:	4639      	mov	r1, r7
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7f4 fcc4 	bl	8000638 <__aeabi_dmul>
 800bcb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d09f      	beq.n	800bbfa <_strtod_l+0x98a>
 800bcba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bcbe:	e7a0      	b.n	800bc02 <_strtod_l+0x992>
 800bcc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bd48 <_strtod_l+0xad8>
 800bcc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcc8:	ec57 6b17 	vmov	r6, r7, d7
 800bccc:	e799      	b.n	800bc02 <_strtod_l+0x992>
 800bcce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bcd2:	9b08      	ldr	r3, [sp, #32]
 800bcd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1c1      	bne.n	800bc60 <_strtod_l+0x9f0>
 800bcdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bce0:	0d1b      	lsrs	r3, r3, #20
 800bce2:	051b      	lsls	r3, r3, #20
 800bce4:	429d      	cmp	r5, r3
 800bce6:	d1bb      	bne.n	800bc60 <_strtod_l+0x9f0>
 800bce8:	4630      	mov	r0, r6
 800bcea:	4639      	mov	r1, r7
 800bcec:	f7f5 f804 	bl	8000cf8 <__aeabi_d2lz>
 800bcf0:	f7f4 fc74 	bl	80005dc <__aeabi_l2d>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	f7f4 fae4 	bl	80002c8 <__aeabi_dsub>
 800bd00:	460b      	mov	r3, r1
 800bd02:	4602      	mov	r2, r0
 800bd04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd0e:	ea46 060a 	orr.w	r6, r6, sl
 800bd12:	431e      	orrs	r6, r3
 800bd14:	d06f      	beq.n	800bdf6 <_strtod_l+0xb86>
 800bd16:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd50 <_strtod_l+0xae0>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fefe 	bl	8000b1c <__aeabi_dcmplt>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	f47f accf 	bne.w	800b6c4 <_strtod_l+0x454>
 800bd26:	a30c      	add	r3, pc, #48	@ (adr r3, 800bd58 <_strtod_l+0xae8>)
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd30:	f7f4 ff12 	bl	8000b58 <__aeabi_dcmpgt>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d093      	beq.n	800bc60 <_strtod_l+0x9f0>
 800bd38:	e4c4      	b.n	800b6c4 <_strtod_l+0x454>
 800bd3a:	bf00      	nop
 800bd3c:	f3af 8000 	nop.w
 800bd40:	00000000 	.word	0x00000000
 800bd44:	bff00000 	.word	0xbff00000
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	3ff00000 	.word	0x3ff00000
 800bd50:	94a03595 	.word	0x94a03595
 800bd54:	3fdfffff 	.word	0x3fdfffff
 800bd58:	35afe535 	.word	0x35afe535
 800bd5c:	3fe00000 	.word	0x3fe00000
 800bd60:	000fffff 	.word	0x000fffff
 800bd64:	7ff00000 	.word	0x7ff00000
 800bd68:	7fefffff 	.word	0x7fefffff
 800bd6c:	3ff00000 	.word	0x3ff00000
 800bd70:	3fe00000 	.word	0x3fe00000
 800bd74:	7fe00000 	.word	0x7fe00000
 800bd78:	7c9fffff 	.word	0x7c9fffff
 800bd7c:	9b08      	ldr	r3, [sp, #32]
 800bd7e:	b323      	cbz	r3, 800bdca <_strtod_l+0xb5a>
 800bd80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bd84:	d821      	bhi.n	800bdca <_strtod_l+0xb5a>
 800bd86:	a328      	add	r3, pc, #160	@ (adr r3, 800be28 <_strtod_l+0xbb8>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 fece 	bl	8000b30 <__aeabi_dcmple>
 800bd94:	b1a0      	cbz	r0, 800bdc0 <_strtod_l+0xb50>
 800bd96:	4639      	mov	r1, r7
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7f4 ff25 	bl	8000be8 <__aeabi_d2uiz>
 800bd9e:	2801      	cmp	r0, #1
 800bda0:	bf38      	it	cc
 800bda2:	2001      	movcc	r0, #1
 800bda4:	f7f4 fbce 	bl	8000544 <__aeabi_ui2d>
 800bda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdaa:	4606      	mov	r6, r0
 800bdac:	460f      	mov	r7, r1
 800bdae:	b9fb      	cbnz	r3, 800bdf0 <_strtod_l+0xb80>
 800bdb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bdb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bdbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bdc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bdc6:	1b5b      	subs	r3, r3, r5
 800bdc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bdca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bdce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bdd2:	f7ff f8f1 	bl	800afb8 <__ulp>
 800bdd6:	4650      	mov	r0, sl
 800bdd8:	ec53 2b10 	vmov	r2, r3, d0
 800bddc:	4659      	mov	r1, fp
 800bdde:	f7f4 fc2b 	bl	8000638 <__aeabi_dmul>
 800bde2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bde6:	f7f4 fa71 	bl	80002cc <__adddf3>
 800bdea:	4682      	mov	sl, r0
 800bdec:	468b      	mov	fp, r1
 800bdee:	e770      	b.n	800bcd2 <_strtod_l+0xa62>
 800bdf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bdf4:	e7e0      	b.n	800bdb8 <_strtod_l+0xb48>
 800bdf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800be30 <_strtod_l+0xbc0>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fe8e 	bl	8000b1c <__aeabi_dcmplt>
 800be00:	e798      	b.n	800bd34 <_strtod_l+0xac4>
 800be02:	2300      	movs	r3, #0
 800be04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	f7ff ba6d 	b.w	800b2ea <_strtod_l+0x7a>
 800be10:	2a65      	cmp	r2, #101	@ 0x65
 800be12:	f43f ab66 	beq.w	800b4e2 <_strtod_l+0x272>
 800be16:	2a45      	cmp	r2, #69	@ 0x45
 800be18:	f43f ab63 	beq.w	800b4e2 <_strtod_l+0x272>
 800be1c:	2301      	movs	r3, #1
 800be1e:	f7ff bb9e 	b.w	800b55e <_strtod_l+0x2ee>
 800be22:	bf00      	nop
 800be24:	f3af 8000 	nop.w
 800be28:	ffc00000 	.word	0xffc00000
 800be2c:	41dfffff 	.word	0x41dfffff
 800be30:	94a03595 	.word	0x94a03595
 800be34:	3fcfffff 	.word	0x3fcfffff

0800be38 <_strtod_r>:
 800be38:	4b01      	ldr	r3, [pc, #4]	@ (800be40 <_strtod_r+0x8>)
 800be3a:	f7ff ba19 	b.w	800b270 <_strtod_l>
 800be3e:	bf00      	nop
 800be40:	20000094 	.word	0x20000094

0800be44 <_strtol_l.constprop.0>:
 800be44:	2b24      	cmp	r3, #36	@ 0x24
 800be46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be4a:	4686      	mov	lr, r0
 800be4c:	4690      	mov	r8, r2
 800be4e:	d801      	bhi.n	800be54 <_strtol_l.constprop.0+0x10>
 800be50:	2b01      	cmp	r3, #1
 800be52:	d106      	bne.n	800be62 <_strtol_l.constprop.0+0x1e>
 800be54:	f7fd fdae 	bl	80099b4 <__errno>
 800be58:	2316      	movs	r3, #22
 800be5a:	6003      	str	r3, [r0, #0]
 800be5c:	2000      	movs	r0, #0
 800be5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be62:	4834      	ldr	r0, [pc, #208]	@ (800bf34 <_strtol_l.constprop.0+0xf0>)
 800be64:	460d      	mov	r5, r1
 800be66:	462a      	mov	r2, r5
 800be68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be6c:	5d06      	ldrb	r6, [r0, r4]
 800be6e:	f016 0608 	ands.w	r6, r6, #8
 800be72:	d1f8      	bne.n	800be66 <_strtol_l.constprop.0+0x22>
 800be74:	2c2d      	cmp	r4, #45	@ 0x2d
 800be76:	d12d      	bne.n	800bed4 <_strtol_l.constprop.0+0x90>
 800be78:	782c      	ldrb	r4, [r5, #0]
 800be7a:	2601      	movs	r6, #1
 800be7c:	1c95      	adds	r5, r2, #2
 800be7e:	f033 0210 	bics.w	r2, r3, #16
 800be82:	d109      	bne.n	800be98 <_strtol_l.constprop.0+0x54>
 800be84:	2c30      	cmp	r4, #48	@ 0x30
 800be86:	d12a      	bne.n	800bede <_strtol_l.constprop.0+0x9a>
 800be88:	782a      	ldrb	r2, [r5, #0]
 800be8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be8e:	2a58      	cmp	r2, #88	@ 0x58
 800be90:	d125      	bne.n	800bede <_strtol_l.constprop.0+0x9a>
 800be92:	786c      	ldrb	r4, [r5, #1]
 800be94:	2310      	movs	r3, #16
 800be96:	3502      	adds	r5, #2
 800be98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800be9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bea0:	2200      	movs	r2, #0
 800bea2:	fbbc f9f3 	udiv	r9, ip, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	fb03 ca19 	mls	sl, r3, r9, ip
 800beac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800beb0:	2f09      	cmp	r7, #9
 800beb2:	d81b      	bhi.n	800beec <_strtol_l.constprop.0+0xa8>
 800beb4:	463c      	mov	r4, r7
 800beb6:	42a3      	cmp	r3, r4
 800beb8:	dd27      	ble.n	800bf0a <_strtol_l.constprop.0+0xc6>
 800beba:	1c57      	adds	r7, r2, #1
 800bebc:	d007      	beq.n	800bece <_strtol_l.constprop.0+0x8a>
 800bebe:	4581      	cmp	r9, r0
 800bec0:	d320      	bcc.n	800bf04 <_strtol_l.constprop.0+0xc0>
 800bec2:	d101      	bne.n	800bec8 <_strtol_l.constprop.0+0x84>
 800bec4:	45a2      	cmp	sl, r4
 800bec6:	db1d      	blt.n	800bf04 <_strtol_l.constprop.0+0xc0>
 800bec8:	fb00 4003 	mla	r0, r0, r3, r4
 800becc:	2201      	movs	r2, #1
 800bece:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bed2:	e7eb      	b.n	800beac <_strtol_l.constprop.0+0x68>
 800bed4:	2c2b      	cmp	r4, #43	@ 0x2b
 800bed6:	bf04      	itt	eq
 800bed8:	782c      	ldrbeq	r4, [r5, #0]
 800beda:	1c95      	addeq	r5, r2, #2
 800bedc:	e7cf      	b.n	800be7e <_strtol_l.constprop.0+0x3a>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1da      	bne.n	800be98 <_strtol_l.constprop.0+0x54>
 800bee2:	2c30      	cmp	r4, #48	@ 0x30
 800bee4:	bf0c      	ite	eq
 800bee6:	2308      	moveq	r3, #8
 800bee8:	230a      	movne	r3, #10
 800beea:	e7d5      	b.n	800be98 <_strtol_l.constprop.0+0x54>
 800beec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bef0:	2f19      	cmp	r7, #25
 800bef2:	d801      	bhi.n	800bef8 <_strtol_l.constprop.0+0xb4>
 800bef4:	3c37      	subs	r4, #55	@ 0x37
 800bef6:	e7de      	b.n	800beb6 <_strtol_l.constprop.0+0x72>
 800bef8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800befc:	2f19      	cmp	r7, #25
 800befe:	d804      	bhi.n	800bf0a <_strtol_l.constprop.0+0xc6>
 800bf00:	3c57      	subs	r4, #87	@ 0x57
 800bf02:	e7d8      	b.n	800beb6 <_strtol_l.constprop.0+0x72>
 800bf04:	f04f 32ff 	mov.w	r2, #4294967295
 800bf08:	e7e1      	b.n	800bece <_strtol_l.constprop.0+0x8a>
 800bf0a:	1c53      	adds	r3, r2, #1
 800bf0c:	d108      	bne.n	800bf20 <_strtol_l.constprop.0+0xdc>
 800bf0e:	2322      	movs	r3, #34	@ 0x22
 800bf10:	f8ce 3000 	str.w	r3, [lr]
 800bf14:	4660      	mov	r0, ip
 800bf16:	f1b8 0f00 	cmp.w	r8, #0
 800bf1a:	d0a0      	beq.n	800be5e <_strtol_l.constprop.0+0x1a>
 800bf1c:	1e69      	subs	r1, r5, #1
 800bf1e:	e006      	b.n	800bf2e <_strtol_l.constprop.0+0xea>
 800bf20:	b106      	cbz	r6, 800bf24 <_strtol_l.constprop.0+0xe0>
 800bf22:	4240      	negs	r0, r0
 800bf24:	f1b8 0f00 	cmp.w	r8, #0
 800bf28:	d099      	beq.n	800be5e <_strtol_l.constprop.0+0x1a>
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	d1f6      	bne.n	800bf1c <_strtol_l.constprop.0+0xd8>
 800bf2e:	f8c8 1000 	str.w	r1, [r8]
 800bf32:	e794      	b.n	800be5e <_strtol_l.constprop.0+0x1a>
 800bf34:	0800d991 	.word	0x0800d991

0800bf38 <_strtol_r>:
 800bf38:	f7ff bf84 	b.w	800be44 <_strtol_l.constprop.0>

0800bf3c <__ssputs_r>:
 800bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	688e      	ldr	r6, [r1, #8]
 800bf42:	461f      	mov	r7, r3
 800bf44:	42be      	cmp	r6, r7
 800bf46:	680b      	ldr	r3, [r1, #0]
 800bf48:	4682      	mov	sl, r0
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	4690      	mov	r8, r2
 800bf4e:	d82d      	bhi.n	800bfac <__ssputs_r+0x70>
 800bf50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf58:	d026      	beq.n	800bfa8 <__ssputs_r+0x6c>
 800bf5a:	6965      	ldr	r5, [r4, #20]
 800bf5c:	6909      	ldr	r1, [r1, #16]
 800bf5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf62:	eba3 0901 	sub.w	r9, r3, r1
 800bf66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf6a:	1c7b      	adds	r3, r7, #1
 800bf6c:	444b      	add	r3, r9
 800bf6e:	106d      	asrs	r5, r5, #1
 800bf70:	429d      	cmp	r5, r3
 800bf72:	bf38      	it	cc
 800bf74:	461d      	movcc	r5, r3
 800bf76:	0553      	lsls	r3, r2, #21
 800bf78:	d527      	bpl.n	800bfca <__ssputs_r+0x8e>
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	f7fe fc1c 	bl	800a7b8 <_malloc_r>
 800bf80:	4606      	mov	r6, r0
 800bf82:	b360      	cbz	r0, 800bfde <__ssputs_r+0xa2>
 800bf84:	6921      	ldr	r1, [r4, #16]
 800bf86:	464a      	mov	r2, r9
 800bf88:	f7fd fd41 	bl	8009a0e <memcpy>
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bf92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf96:	81a3      	strh	r3, [r4, #12]
 800bf98:	6126      	str	r6, [r4, #16]
 800bf9a:	6165      	str	r5, [r4, #20]
 800bf9c:	444e      	add	r6, r9
 800bf9e:	eba5 0509 	sub.w	r5, r5, r9
 800bfa2:	6026      	str	r6, [r4, #0]
 800bfa4:	60a5      	str	r5, [r4, #8]
 800bfa6:	463e      	mov	r6, r7
 800bfa8:	42be      	cmp	r6, r7
 800bfaa:	d900      	bls.n	800bfae <__ssputs_r+0x72>
 800bfac:	463e      	mov	r6, r7
 800bfae:	6820      	ldr	r0, [r4, #0]
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	f000 fb6a 	bl	800c68c <memmove>
 800bfb8:	68a3      	ldr	r3, [r4, #8]
 800bfba:	1b9b      	subs	r3, r3, r6
 800bfbc:	60a3      	str	r3, [r4, #8]
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	4433      	add	r3, r6
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfca:	462a      	mov	r2, r5
 800bfcc:	f000 ff41 	bl	800ce52 <_realloc_r>
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d1e0      	bne.n	800bf98 <__ssputs_r+0x5c>
 800bfd6:	6921      	ldr	r1, [r4, #16]
 800bfd8:	4650      	mov	r0, sl
 800bfda:	f7fe fb79 	bl	800a6d0 <_free_r>
 800bfde:	230c      	movs	r3, #12
 800bfe0:	f8ca 3000 	str.w	r3, [sl]
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfea:	81a3      	strh	r3, [r4, #12]
 800bfec:	f04f 30ff 	mov.w	r0, #4294967295
 800bff0:	e7e9      	b.n	800bfc6 <__ssputs_r+0x8a>
	...

0800bff4 <_svfiprintf_r>:
 800bff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff8:	4698      	mov	r8, r3
 800bffa:	898b      	ldrh	r3, [r1, #12]
 800bffc:	061b      	lsls	r3, r3, #24
 800bffe:	b09d      	sub	sp, #116	@ 0x74
 800c000:	4607      	mov	r7, r0
 800c002:	460d      	mov	r5, r1
 800c004:	4614      	mov	r4, r2
 800c006:	d510      	bpl.n	800c02a <_svfiprintf_r+0x36>
 800c008:	690b      	ldr	r3, [r1, #16]
 800c00a:	b973      	cbnz	r3, 800c02a <_svfiprintf_r+0x36>
 800c00c:	2140      	movs	r1, #64	@ 0x40
 800c00e:	f7fe fbd3 	bl	800a7b8 <_malloc_r>
 800c012:	6028      	str	r0, [r5, #0]
 800c014:	6128      	str	r0, [r5, #16]
 800c016:	b930      	cbnz	r0, 800c026 <_svfiprintf_r+0x32>
 800c018:	230c      	movs	r3, #12
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295
 800c020:	b01d      	add	sp, #116	@ 0x74
 800c022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c026:	2340      	movs	r3, #64	@ 0x40
 800c028:	616b      	str	r3, [r5, #20]
 800c02a:	2300      	movs	r3, #0
 800c02c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c02e:	2320      	movs	r3, #32
 800c030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c034:	f8cd 800c 	str.w	r8, [sp, #12]
 800c038:	2330      	movs	r3, #48	@ 0x30
 800c03a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c1d8 <_svfiprintf_r+0x1e4>
 800c03e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c042:	f04f 0901 	mov.w	r9, #1
 800c046:	4623      	mov	r3, r4
 800c048:	469a      	mov	sl, r3
 800c04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c04e:	b10a      	cbz	r2, 800c054 <_svfiprintf_r+0x60>
 800c050:	2a25      	cmp	r2, #37	@ 0x25
 800c052:	d1f9      	bne.n	800c048 <_svfiprintf_r+0x54>
 800c054:	ebba 0b04 	subs.w	fp, sl, r4
 800c058:	d00b      	beq.n	800c072 <_svfiprintf_r+0x7e>
 800c05a:	465b      	mov	r3, fp
 800c05c:	4622      	mov	r2, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	4638      	mov	r0, r7
 800c062:	f7ff ff6b 	bl	800bf3c <__ssputs_r>
 800c066:	3001      	adds	r0, #1
 800c068:	f000 80a7 	beq.w	800c1ba <_svfiprintf_r+0x1c6>
 800c06c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c06e:	445a      	add	r2, fp
 800c070:	9209      	str	r2, [sp, #36]	@ 0x24
 800c072:	f89a 3000 	ldrb.w	r3, [sl]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 809f 	beq.w	800c1ba <_svfiprintf_r+0x1c6>
 800c07c:	2300      	movs	r3, #0
 800c07e:	f04f 32ff 	mov.w	r2, #4294967295
 800c082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c086:	f10a 0a01 	add.w	sl, sl, #1
 800c08a:	9304      	str	r3, [sp, #16]
 800c08c:	9307      	str	r3, [sp, #28]
 800c08e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c092:	931a      	str	r3, [sp, #104]	@ 0x68
 800c094:	4654      	mov	r4, sl
 800c096:	2205      	movs	r2, #5
 800c098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c09c:	484e      	ldr	r0, [pc, #312]	@ (800c1d8 <_svfiprintf_r+0x1e4>)
 800c09e:	f7f4 f8b7 	bl	8000210 <memchr>
 800c0a2:	9a04      	ldr	r2, [sp, #16]
 800c0a4:	b9d8      	cbnz	r0, 800c0de <_svfiprintf_r+0xea>
 800c0a6:	06d0      	lsls	r0, r2, #27
 800c0a8:	bf44      	itt	mi
 800c0aa:	2320      	movmi	r3, #32
 800c0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0b0:	0711      	lsls	r1, r2, #28
 800c0b2:	bf44      	itt	mi
 800c0b4:	232b      	movmi	r3, #43	@ 0x2b
 800c0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c0be:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0c0:	d015      	beq.n	800c0ee <_svfiprintf_r+0xfa>
 800c0c2:	9a07      	ldr	r2, [sp, #28]
 800c0c4:	4654      	mov	r4, sl
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f04f 0c0a 	mov.w	ip, #10
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0d2:	3b30      	subs	r3, #48	@ 0x30
 800c0d4:	2b09      	cmp	r3, #9
 800c0d6:	d94b      	bls.n	800c170 <_svfiprintf_r+0x17c>
 800c0d8:	b1b0      	cbz	r0, 800c108 <_svfiprintf_r+0x114>
 800c0da:	9207      	str	r2, [sp, #28]
 800c0dc:	e014      	b.n	800c108 <_svfiprintf_r+0x114>
 800c0de:	eba0 0308 	sub.w	r3, r0, r8
 800c0e2:	fa09 f303 	lsl.w	r3, r9, r3
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	9304      	str	r3, [sp, #16]
 800c0ea:	46a2      	mov	sl, r4
 800c0ec:	e7d2      	b.n	800c094 <_svfiprintf_r+0xa0>
 800c0ee:	9b03      	ldr	r3, [sp, #12]
 800c0f0:	1d19      	adds	r1, r3, #4
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	9103      	str	r1, [sp, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	bfbb      	ittet	lt
 800c0fa:	425b      	neglt	r3, r3
 800c0fc:	f042 0202 	orrlt.w	r2, r2, #2
 800c100:	9307      	strge	r3, [sp, #28]
 800c102:	9307      	strlt	r3, [sp, #28]
 800c104:	bfb8      	it	lt
 800c106:	9204      	strlt	r2, [sp, #16]
 800c108:	7823      	ldrb	r3, [r4, #0]
 800c10a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c10c:	d10a      	bne.n	800c124 <_svfiprintf_r+0x130>
 800c10e:	7863      	ldrb	r3, [r4, #1]
 800c110:	2b2a      	cmp	r3, #42	@ 0x2a
 800c112:	d132      	bne.n	800c17a <_svfiprintf_r+0x186>
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	1d1a      	adds	r2, r3, #4
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	9203      	str	r2, [sp, #12]
 800c11c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c120:	3402      	adds	r4, #2
 800c122:	9305      	str	r3, [sp, #20]
 800c124:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c1e8 <_svfiprintf_r+0x1f4>
 800c128:	7821      	ldrb	r1, [r4, #0]
 800c12a:	2203      	movs	r2, #3
 800c12c:	4650      	mov	r0, sl
 800c12e:	f7f4 f86f 	bl	8000210 <memchr>
 800c132:	b138      	cbz	r0, 800c144 <_svfiprintf_r+0x150>
 800c134:	9b04      	ldr	r3, [sp, #16]
 800c136:	eba0 000a 	sub.w	r0, r0, sl
 800c13a:	2240      	movs	r2, #64	@ 0x40
 800c13c:	4082      	lsls	r2, r0
 800c13e:	4313      	orrs	r3, r2
 800c140:	3401      	adds	r4, #1
 800c142:	9304      	str	r3, [sp, #16]
 800c144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c148:	4824      	ldr	r0, [pc, #144]	@ (800c1dc <_svfiprintf_r+0x1e8>)
 800c14a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c14e:	2206      	movs	r2, #6
 800c150:	f7f4 f85e 	bl	8000210 <memchr>
 800c154:	2800      	cmp	r0, #0
 800c156:	d036      	beq.n	800c1c6 <_svfiprintf_r+0x1d2>
 800c158:	4b21      	ldr	r3, [pc, #132]	@ (800c1e0 <_svfiprintf_r+0x1ec>)
 800c15a:	bb1b      	cbnz	r3, 800c1a4 <_svfiprintf_r+0x1b0>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	3307      	adds	r3, #7
 800c160:	f023 0307 	bic.w	r3, r3, #7
 800c164:	3308      	adds	r3, #8
 800c166:	9303      	str	r3, [sp, #12]
 800c168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c16a:	4433      	add	r3, r6
 800c16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c16e:	e76a      	b.n	800c046 <_svfiprintf_r+0x52>
 800c170:	fb0c 3202 	mla	r2, ip, r2, r3
 800c174:	460c      	mov	r4, r1
 800c176:	2001      	movs	r0, #1
 800c178:	e7a8      	b.n	800c0cc <_svfiprintf_r+0xd8>
 800c17a:	2300      	movs	r3, #0
 800c17c:	3401      	adds	r4, #1
 800c17e:	9305      	str	r3, [sp, #20]
 800c180:	4619      	mov	r1, r3
 800c182:	f04f 0c0a 	mov.w	ip, #10
 800c186:	4620      	mov	r0, r4
 800c188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c18c:	3a30      	subs	r2, #48	@ 0x30
 800c18e:	2a09      	cmp	r2, #9
 800c190:	d903      	bls.n	800c19a <_svfiprintf_r+0x1a6>
 800c192:	2b00      	cmp	r3, #0
 800c194:	d0c6      	beq.n	800c124 <_svfiprintf_r+0x130>
 800c196:	9105      	str	r1, [sp, #20]
 800c198:	e7c4      	b.n	800c124 <_svfiprintf_r+0x130>
 800c19a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c19e:	4604      	mov	r4, r0
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e7f0      	b.n	800c186 <_svfiprintf_r+0x192>
 800c1a4:	ab03      	add	r3, sp, #12
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	462a      	mov	r2, r5
 800c1aa:	4b0e      	ldr	r3, [pc, #56]	@ (800c1e4 <_svfiprintf_r+0x1f0>)
 800c1ac:	a904      	add	r1, sp, #16
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f7fc fbb8 	bl	8008924 <_printf_float>
 800c1b4:	1c42      	adds	r2, r0, #1
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	d1d6      	bne.n	800c168 <_svfiprintf_r+0x174>
 800c1ba:	89ab      	ldrh	r3, [r5, #12]
 800c1bc:	065b      	lsls	r3, r3, #25
 800c1be:	f53f af2d 	bmi.w	800c01c <_svfiprintf_r+0x28>
 800c1c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1c4:	e72c      	b.n	800c020 <_svfiprintf_r+0x2c>
 800c1c6:	ab03      	add	r3, sp, #12
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	462a      	mov	r2, r5
 800c1cc:	4b05      	ldr	r3, [pc, #20]	@ (800c1e4 <_svfiprintf_r+0x1f0>)
 800c1ce:	a904      	add	r1, sp, #16
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	f7fc fe3f 	bl	8008e54 <_printf_i>
 800c1d6:	e7ed      	b.n	800c1b4 <_svfiprintf_r+0x1c0>
 800c1d8:	0800da91 	.word	0x0800da91
 800c1dc:	0800da9b 	.word	0x0800da9b
 800c1e0:	08008925 	.word	0x08008925
 800c1e4:	0800bf3d 	.word	0x0800bf3d
 800c1e8:	0800da97 	.word	0x0800da97

0800c1ec <__sfputc_r>:
 800c1ec:	6893      	ldr	r3, [r2, #8]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	b410      	push	{r4}
 800c1f4:	6093      	str	r3, [r2, #8]
 800c1f6:	da08      	bge.n	800c20a <__sfputc_r+0x1e>
 800c1f8:	6994      	ldr	r4, [r2, #24]
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	db01      	blt.n	800c202 <__sfputc_r+0x16>
 800c1fe:	290a      	cmp	r1, #10
 800c200:	d103      	bne.n	800c20a <__sfputc_r+0x1e>
 800c202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c206:	f7fd baee 	b.w	80097e6 <__swbuf_r>
 800c20a:	6813      	ldr	r3, [r2, #0]
 800c20c:	1c58      	adds	r0, r3, #1
 800c20e:	6010      	str	r0, [r2, #0]
 800c210:	7019      	strb	r1, [r3, #0]
 800c212:	4608      	mov	r0, r1
 800c214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <__sfputs_r>:
 800c21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21c:	4606      	mov	r6, r0
 800c21e:	460f      	mov	r7, r1
 800c220:	4614      	mov	r4, r2
 800c222:	18d5      	adds	r5, r2, r3
 800c224:	42ac      	cmp	r4, r5
 800c226:	d101      	bne.n	800c22c <__sfputs_r+0x12>
 800c228:	2000      	movs	r0, #0
 800c22a:	e007      	b.n	800c23c <__sfputs_r+0x22>
 800c22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c230:	463a      	mov	r2, r7
 800c232:	4630      	mov	r0, r6
 800c234:	f7ff ffda 	bl	800c1ec <__sfputc_r>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d1f3      	bne.n	800c224 <__sfputs_r+0xa>
 800c23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c240 <_vfiprintf_r>:
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	460d      	mov	r5, r1
 800c246:	b09d      	sub	sp, #116	@ 0x74
 800c248:	4614      	mov	r4, r2
 800c24a:	4698      	mov	r8, r3
 800c24c:	4606      	mov	r6, r0
 800c24e:	b118      	cbz	r0, 800c258 <_vfiprintf_r+0x18>
 800c250:	6a03      	ldr	r3, [r0, #32]
 800c252:	b90b      	cbnz	r3, 800c258 <_vfiprintf_r+0x18>
 800c254:	f7fd f9be 	bl	80095d4 <__sinit>
 800c258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c25a:	07d9      	lsls	r1, r3, #31
 800c25c:	d405      	bmi.n	800c26a <_vfiprintf_r+0x2a>
 800c25e:	89ab      	ldrh	r3, [r5, #12]
 800c260:	059a      	lsls	r2, r3, #22
 800c262:	d402      	bmi.n	800c26a <_vfiprintf_r+0x2a>
 800c264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c266:	f7fd fbd0 	bl	8009a0a <__retarget_lock_acquire_recursive>
 800c26a:	89ab      	ldrh	r3, [r5, #12]
 800c26c:	071b      	lsls	r3, r3, #28
 800c26e:	d501      	bpl.n	800c274 <_vfiprintf_r+0x34>
 800c270:	692b      	ldr	r3, [r5, #16]
 800c272:	b99b      	cbnz	r3, 800c29c <_vfiprintf_r+0x5c>
 800c274:	4629      	mov	r1, r5
 800c276:	4630      	mov	r0, r6
 800c278:	f7fd faf4 	bl	8009864 <__swsetup_r>
 800c27c:	b170      	cbz	r0, 800c29c <_vfiprintf_r+0x5c>
 800c27e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c280:	07dc      	lsls	r4, r3, #31
 800c282:	d504      	bpl.n	800c28e <_vfiprintf_r+0x4e>
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	b01d      	add	sp, #116	@ 0x74
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	0598      	lsls	r0, r3, #22
 800c292:	d4f7      	bmi.n	800c284 <_vfiprintf_r+0x44>
 800c294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c296:	f7fd fbb9 	bl	8009a0c <__retarget_lock_release_recursive>
 800c29a:	e7f3      	b.n	800c284 <_vfiprintf_r+0x44>
 800c29c:	2300      	movs	r3, #0
 800c29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2a0:	2320      	movs	r3, #32
 800c2a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2aa:	2330      	movs	r3, #48	@ 0x30
 800c2ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c45c <_vfiprintf_r+0x21c>
 800c2b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2b4:	f04f 0901 	mov.w	r9, #1
 800c2b8:	4623      	mov	r3, r4
 800c2ba:	469a      	mov	sl, r3
 800c2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c0:	b10a      	cbz	r2, 800c2c6 <_vfiprintf_r+0x86>
 800c2c2:	2a25      	cmp	r2, #37	@ 0x25
 800c2c4:	d1f9      	bne.n	800c2ba <_vfiprintf_r+0x7a>
 800c2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ca:	d00b      	beq.n	800c2e4 <_vfiprintf_r+0xa4>
 800c2cc:	465b      	mov	r3, fp
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ffa1 	bl	800c21a <__sfputs_r>
 800c2d8:	3001      	adds	r0, #1
 800c2da:	f000 80a7 	beq.w	800c42c <_vfiprintf_r+0x1ec>
 800c2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2e0:	445a      	add	r2, fp
 800c2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 809f 	beq.w	800c42c <_vfiprintf_r+0x1ec>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2f8:	f10a 0a01 	add.w	sl, sl, #1
 800c2fc:	9304      	str	r3, [sp, #16]
 800c2fe:	9307      	str	r3, [sp, #28]
 800c300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c304:	931a      	str	r3, [sp, #104]	@ 0x68
 800c306:	4654      	mov	r4, sl
 800c308:	2205      	movs	r2, #5
 800c30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30e:	4853      	ldr	r0, [pc, #332]	@ (800c45c <_vfiprintf_r+0x21c>)
 800c310:	f7f3 ff7e 	bl	8000210 <memchr>
 800c314:	9a04      	ldr	r2, [sp, #16]
 800c316:	b9d8      	cbnz	r0, 800c350 <_vfiprintf_r+0x110>
 800c318:	06d1      	lsls	r1, r2, #27
 800c31a:	bf44      	itt	mi
 800c31c:	2320      	movmi	r3, #32
 800c31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c322:	0713      	lsls	r3, r2, #28
 800c324:	bf44      	itt	mi
 800c326:	232b      	movmi	r3, #43	@ 0x2b
 800c328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c32c:	f89a 3000 	ldrb.w	r3, [sl]
 800c330:	2b2a      	cmp	r3, #42	@ 0x2a
 800c332:	d015      	beq.n	800c360 <_vfiprintf_r+0x120>
 800c334:	9a07      	ldr	r2, [sp, #28]
 800c336:	4654      	mov	r4, sl
 800c338:	2000      	movs	r0, #0
 800c33a:	f04f 0c0a 	mov.w	ip, #10
 800c33e:	4621      	mov	r1, r4
 800c340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c344:	3b30      	subs	r3, #48	@ 0x30
 800c346:	2b09      	cmp	r3, #9
 800c348:	d94b      	bls.n	800c3e2 <_vfiprintf_r+0x1a2>
 800c34a:	b1b0      	cbz	r0, 800c37a <_vfiprintf_r+0x13a>
 800c34c:	9207      	str	r2, [sp, #28]
 800c34e:	e014      	b.n	800c37a <_vfiprintf_r+0x13a>
 800c350:	eba0 0308 	sub.w	r3, r0, r8
 800c354:	fa09 f303 	lsl.w	r3, r9, r3
 800c358:	4313      	orrs	r3, r2
 800c35a:	9304      	str	r3, [sp, #16]
 800c35c:	46a2      	mov	sl, r4
 800c35e:	e7d2      	b.n	800c306 <_vfiprintf_r+0xc6>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	1d19      	adds	r1, r3, #4
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	9103      	str	r1, [sp, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bfbb      	ittet	lt
 800c36c:	425b      	neglt	r3, r3
 800c36e:	f042 0202 	orrlt.w	r2, r2, #2
 800c372:	9307      	strge	r3, [sp, #28]
 800c374:	9307      	strlt	r3, [sp, #28]
 800c376:	bfb8      	it	lt
 800c378:	9204      	strlt	r2, [sp, #16]
 800c37a:	7823      	ldrb	r3, [r4, #0]
 800c37c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c37e:	d10a      	bne.n	800c396 <_vfiprintf_r+0x156>
 800c380:	7863      	ldrb	r3, [r4, #1]
 800c382:	2b2a      	cmp	r3, #42	@ 0x2a
 800c384:	d132      	bne.n	800c3ec <_vfiprintf_r+0x1ac>
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	1d1a      	adds	r2, r3, #4
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	9203      	str	r2, [sp, #12]
 800c38e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c392:	3402      	adds	r4, #2
 800c394:	9305      	str	r3, [sp, #20]
 800c396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c46c <_vfiprintf_r+0x22c>
 800c39a:	7821      	ldrb	r1, [r4, #0]
 800c39c:	2203      	movs	r2, #3
 800c39e:	4650      	mov	r0, sl
 800c3a0:	f7f3 ff36 	bl	8000210 <memchr>
 800c3a4:	b138      	cbz	r0, 800c3b6 <_vfiprintf_r+0x176>
 800c3a6:	9b04      	ldr	r3, [sp, #16]
 800c3a8:	eba0 000a 	sub.w	r0, r0, sl
 800c3ac:	2240      	movs	r2, #64	@ 0x40
 800c3ae:	4082      	lsls	r2, r0
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	3401      	adds	r4, #1
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ba:	4829      	ldr	r0, [pc, #164]	@ (800c460 <_vfiprintf_r+0x220>)
 800c3bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3c0:	2206      	movs	r2, #6
 800c3c2:	f7f3 ff25 	bl	8000210 <memchr>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d03f      	beq.n	800c44a <_vfiprintf_r+0x20a>
 800c3ca:	4b26      	ldr	r3, [pc, #152]	@ (800c464 <_vfiprintf_r+0x224>)
 800c3cc:	bb1b      	cbnz	r3, 800c416 <_vfiprintf_r+0x1d6>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	3307      	adds	r3, #7
 800c3d2:	f023 0307 	bic.w	r3, r3, #7
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	9303      	str	r3, [sp, #12]
 800c3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3dc:	443b      	add	r3, r7
 800c3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3e0:	e76a      	b.n	800c2b8 <_vfiprintf_r+0x78>
 800c3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	e7a8      	b.n	800c33e <_vfiprintf_r+0xfe>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	3401      	adds	r4, #1
 800c3f0:	9305      	str	r3, [sp, #20]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	f04f 0c0a 	mov.w	ip, #10
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3fe:	3a30      	subs	r2, #48	@ 0x30
 800c400:	2a09      	cmp	r2, #9
 800c402:	d903      	bls.n	800c40c <_vfiprintf_r+0x1cc>
 800c404:	2b00      	cmp	r3, #0
 800c406:	d0c6      	beq.n	800c396 <_vfiprintf_r+0x156>
 800c408:	9105      	str	r1, [sp, #20]
 800c40a:	e7c4      	b.n	800c396 <_vfiprintf_r+0x156>
 800c40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c410:	4604      	mov	r4, r0
 800c412:	2301      	movs	r3, #1
 800c414:	e7f0      	b.n	800c3f8 <_vfiprintf_r+0x1b8>
 800c416:	ab03      	add	r3, sp, #12
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	462a      	mov	r2, r5
 800c41c:	4b12      	ldr	r3, [pc, #72]	@ (800c468 <_vfiprintf_r+0x228>)
 800c41e:	a904      	add	r1, sp, #16
 800c420:	4630      	mov	r0, r6
 800c422:	f7fc fa7f 	bl	8008924 <_printf_float>
 800c426:	4607      	mov	r7, r0
 800c428:	1c78      	adds	r0, r7, #1
 800c42a:	d1d6      	bne.n	800c3da <_vfiprintf_r+0x19a>
 800c42c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c42e:	07d9      	lsls	r1, r3, #31
 800c430:	d405      	bmi.n	800c43e <_vfiprintf_r+0x1fe>
 800c432:	89ab      	ldrh	r3, [r5, #12]
 800c434:	059a      	lsls	r2, r3, #22
 800c436:	d402      	bmi.n	800c43e <_vfiprintf_r+0x1fe>
 800c438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c43a:	f7fd fae7 	bl	8009a0c <__retarget_lock_release_recursive>
 800c43e:	89ab      	ldrh	r3, [r5, #12]
 800c440:	065b      	lsls	r3, r3, #25
 800c442:	f53f af1f 	bmi.w	800c284 <_vfiprintf_r+0x44>
 800c446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c448:	e71e      	b.n	800c288 <_vfiprintf_r+0x48>
 800c44a:	ab03      	add	r3, sp, #12
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	462a      	mov	r2, r5
 800c450:	4b05      	ldr	r3, [pc, #20]	@ (800c468 <_vfiprintf_r+0x228>)
 800c452:	a904      	add	r1, sp, #16
 800c454:	4630      	mov	r0, r6
 800c456:	f7fc fcfd 	bl	8008e54 <_printf_i>
 800c45a:	e7e4      	b.n	800c426 <_vfiprintf_r+0x1e6>
 800c45c:	0800da91 	.word	0x0800da91
 800c460:	0800da9b 	.word	0x0800da9b
 800c464:	08008925 	.word	0x08008925
 800c468:	0800c21b 	.word	0x0800c21b
 800c46c:	0800da97 	.word	0x0800da97

0800c470 <__sflush_r>:
 800c470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c478:	0716      	lsls	r6, r2, #28
 800c47a:	4605      	mov	r5, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	d454      	bmi.n	800c52a <__sflush_r+0xba>
 800c480:	684b      	ldr	r3, [r1, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	dc02      	bgt.n	800c48c <__sflush_r+0x1c>
 800c486:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd48      	ble.n	800c51e <__sflush_r+0xae>
 800c48c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c48e:	2e00      	cmp	r6, #0
 800c490:	d045      	beq.n	800c51e <__sflush_r+0xae>
 800c492:	2300      	movs	r3, #0
 800c494:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c498:	682f      	ldr	r7, [r5, #0]
 800c49a:	6a21      	ldr	r1, [r4, #32]
 800c49c:	602b      	str	r3, [r5, #0]
 800c49e:	d030      	beq.n	800c502 <__sflush_r+0x92>
 800c4a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	0759      	lsls	r1, r3, #29
 800c4a6:	d505      	bpl.n	800c4b4 <__sflush_r+0x44>
 800c4a8:	6863      	ldr	r3, [r4, #4]
 800c4aa:	1ad2      	subs	r2, r2, r3
 800c4ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4ae:	b10b      	cbz	r3, 800c4b4 <__sflush_r+0x44>
 800c4b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4b2:	1ad2      	subs	r2, r2, r3
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4b8:	6a21      	ldr	r1, [r4, #32]
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	47b0      	blx	r6
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	d106      	bne.n	800c4d2 <__sflush_r+0x62>
 800c4c4:	6829      	ldr	r1, [r5, #0]
 800c4c6:	291d      	cmp	r1, #29
 800c4c8:	d82b      	bhi.n	800c522 <__sflush_r+0xb2>
 800c4ca:	4a2a      	ldr	r2, [pc, #168]	@ (800c574 <__sflush_r+0x104>)
 800c4cc:	410a      	asrs	r2, r1
 800c4ce:	07d6      	lsls	r6, r2, #31
 800c4d0:	d427      	bmi.n	800c522 <__sflush_r+0xb2>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	6062      	str	r2, [r4, #4]
 800c4d6:	04d9      	lsls	r1, r3, #19
 800c4d8:	6922      	ldr	r2, [r4, #16]
 800c4da:	6022      	str	r2, [r4, #0]
 800c4dc:	d504      	bpl.n	800c4e8 <__sflush_r+0x78>
 800c4de:	1c42      	adds	r2, r0, #1
 800c4e0:	d101      	bne.n	800c4e6 <__sflush_r+0x76>
 800c4e2:	682b      	ldr	r3, [r5, #0]
 800c4e4:	b903      	cbnz	r3, 800c4e8 <__sflush_r+0x78>
 800c4e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4ea:	602f      	str	r7, [r5, #0]
 800c4ec:	b1b9      	cbz	r1, 800c51e <__sflush_r+0xae>
 800c4ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	d002      	beq.n	800c4fc <__sflush_r+0x8c>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7fe f8ea 	bl	800a6d0 <_free_r>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800c500:	e00d      	b.n	800c51e <__sflush_r+0xae>
 800c502:	2301      	movs	r3, #1
 800c504:	4628      	mov	r0, r5
 800c506:	47b0      	blx	r6
 800c508:	4602      	mov	r2, r0
 800c50a:	1c50      	adds	r0, r2, #1
 800c50c:	d1c9      	bne.n	800c4a2 <__sflush_r+0x32>
 800c50e:	682b      	ldr	r3, [r5, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0c6      	beq.n	800c4a2 <__sflush_r+0x32>
 800c514:	2b1d      	cmp	r3, #29
 800c516:	d001      	beq.n	800c51c <__sflush_r+0xac>
 800c518:	2b16      	cmp	r3, #22
 800c51a:	d11e      	bne.n	800c55a <__sflush_r+0xea>
 800c51c:	602f      	str	r7, [r5, #0]
 800c51e:	2000      	movs	r0, #0
 800c520:	e022      	b.n	800c568 <__sflush_r+0xf8>
 800c522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c526:	b21b      	sxth	r3, r3
 800c528:	e01b      	b.n	800c562 <__sflush_r+0xf2>
 800c52a:	690f      	ldr	r7, [r1, #16]
 800c52c:	2f00      	cmp	r7, #0
 800c52e:	d0f6      	beq.n	800c51e <__sflush_r+0xae>
 800c530:	0793      	lsls	r3, r2, #30
 800c532:	680e      	ldr	r6, [r1, #0]
 800c534:	bf08      	it	eq
 800c536:	694b      	ldreq	r3, [r1, #20]
 800c538:	600f      	str	r7, [r1, #0]
 800c53a:	bf18      	it	ne
 800c53c:	2300      	movne	r3, #0
 800c53e:	eba6 0807 	sub.w	r8, r6, r7
 800c542:	608b      	str	r3, [r1, #8]
 800c544:	f1b8 0f00 	cmp.w	r8, #0
 800c548:	dde9      	ble.n	800c51e <__sflush_r+0xae>
 800c54a:	6a21      	ldr	r1, [r4, #32]
 800c54c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c54e:	4643      	mov	r3, r8
 800c550:	463a      	mov	r2, r7
 800c552:	4628      	mov	r0, r5
 800c554:	47b0      	blx	r6
 800c556:	2800      	cmp	r0, #0
 800c558:	dc08      	bgt.n	800c56c <__sflush_r+0xfc>
 800c55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c562:	81a3      	strh	r3, [r4, #12]
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c56c:	4407      	add	r7, r0
 800c56e:	eba8 0800 	sub.w	r8, r8, r0
 800c572:	e7e7      	b.n	800c544 <__sflush_r+0xd4>
 800c574:	dfbffffe 	.word	0xdfbffffe

0800c578 <_fflush_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	690b      	ldr	r3, [r1, #16]
 800c57c:	4605      	mov	r5, r0
 800c57e:	460c      	mov	r4, r1
 800c580:	b913      	cbnz	r3, 800c588 <_fflush_r+0x10>
 800c582:	2500      	movs	r5, #0
 800c584:	4628      	mov	r0, r5
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	b118      	cbz	r0, 800c592 <_fflush_r+0x1a>
 800c58a:	6a03      	ldr	r3, [r0, #32]
 800c58c:	b90b      	cbnz	r3, 800c592 <_fflush_r+0x1a>
 800c58e:	f7fd f821 	bl	80095d4 <__sinit>
 800c592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0f3      	beq.n	800c582 <_fflush_r+0xa>
 800c59a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c59c:	07d0      	lsls	r0, r2, #31
 800c59e:	d404      	bmi.n	800c5aa <_fflush_r+0x32>
 800c5a0:	0599      	lsls	r1, r3, #22
 800c5a2:	d402      	bmi.n	800c5aa <_fflush_r+0x32>
 800c5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5a6:	f7fd fa30 	bl	8009a0a <__retarget_lock_acquire_recursive>
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	f7ff ff5f 	bl	800c470 <__sflush_r>
 800c5b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5b4:	07da      	lsls	r2, r3, #31
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	d4e4      	bmi.n	800c584 <_fflush_r+0xc>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	059b      	lsls	r3, r3, #22
 800c5be:	d4e1      	bmi.n	800c584 <_fflush_r+0xc>
 800c5c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5c2:	f7fd fa23 	bl	8009a0c <__retarget_lock_release_recursive>
 800c5c6:	e7dd      	b.n	800c584 <_fflush_r+0xc>

0800c5c8 <__swhatbuf_r>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d0:	2900      	cmp	r1, #0
 800c5d2:	b096      	sub	sp, #88	@ 0x58
 800c5d4:	4615      	mov	r5, r2
 800c5d6:	461e      	mov	r6, r3
 800c5d8:	da0d      	bge.n	800c5f6 <__swhatbuf_r+0x2e>
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5e0:	f04f 0100 	mov.w	r1, #0
 800c5e4:	bf14      	ite	ne
 800c5e6:	2340      	movne	r3, #64	@ 0x40
 800c5e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	6031      	str	r1, [r6, #0]
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	b016      	add	sp, #88	@ 0x58
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
 800c5f6:	466a      	mov	r2, sp
 800c5f8:	f000 f874 	bl	800c6e4 <_fstat_r>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	dbec      	blt.n	800c5da <__swhatbuf_r+0x12>
 800c600:	9901      	ldr	r1, [sp, #4]
 800c602:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c606:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c60a:	4259      	negs	r1, r3
 800c60c:	4159      	adcs	r1, r3
 800c60e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c612:	e7eb      	b.n	800c5ec <__swhatbuf_r+0x24>

0800c614 <__smakebuf_r>:
 800c614:	898b      	ldrh	r3, [r1, #12]
 800c616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c618:	079d      	lsls	r5, r3, #30
 800c61a:	4606      	mov	r6, r0
 800c61c:	460c      	mov	r4, r1
 800c61e:	d507      	bpl.n	800c630 <__smakebuf_r+0x1c>
 800c620:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	6123      	str	r3, [r4, #16]
 800c628:	2301      	movs	r3, #1
 800c62a:	6163      	str	r3, [r4, #20]
 800c62c:	b003      	add	sp, #12
 800c62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c630:	ab01      	add	r3, sp, #4
 800c632:	466a      	mov	r2, sp
 800c634:	f7ff ffc8 	bl	800c5c8 <__swhatbuf_r>
 800c638:	9f00      	ldr	r7, [sp, #0]
 800c63a:	4605      	mov	r5, r0
 800c63c:	4639      	mov	r1, r7
 800c63e:	4630      	mov	r0, r6
 800c640:	f7fe f8ba 	bl	800a7b8 <_malloc_r>
 800c644:	b948      	cbnz	r0, 800c65a <__smakebuf_r+0x46>
 800c646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64a:	059a      	lsls	r2, r3, #22
 800c64c:	d4ee      	bmi.n	800c62c <__smakebuf_r+0x18>
 800c64e:	f023 0303 	bic.w	r3, r3, #3
 800c652:	f043 0302 	orr.w	r3, r3, #2
 800c656:	81a3      	strh	r3, [r4, #12]
 800c658:	e7e2      	b.n	800c620 <__smakebuf_r+0xc>
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	6020      	str	r0, [r4, #0]
 800c65e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c662:	81a3      	strh	r3, [r4, #12]
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c66a:	b15b      	cbz	r3, 800c684 <__smakebuf_r+0x70>
 800c66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c670:	4630      	mov	r0, r6
 800c672:	f000 f849 	bl	800c708 <_isatty_r>
 800c676:	b128      	cbz	r0, 800c684 <__smakebuf_r+0x70>
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	f023 0303 	bic.w	r3, r3, #3
 800c67e:	f043 0301 	orr.w	r3, r3, #1
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	431d      	orrs	r5, r3
 800c688:	81a5      	strh	r5, [r4, #12]
 800c68a:	e7cf      	b.n	800c62c <__smakebuf_r+0x18>

0800c68c <memmove>:
 800c68c:	4288      	cmp	r0, r1
 800c68e:	b510      	push	{r4, lr}
 800c690:	eb01 0402 	add.w	r4, r1, r2
 800c694:	d902      	bls.n	800c69c <memmove+0x10>
 800c696:	4284      	cmp	r4, r0
 800c698:	4623      	mov	r3, r4
 800c69a:	d807      	bhi.n	800c6ac <memmove+0x20>
 800c69c:	1e43      	subs	r3, r0, #1
 800c69e:	42a1      	cmp	r1, r4
 800c6a0:	d008      	beq.n	800c6b4 <memmove+0x28>
 800c6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6aa:	e7f8      	b.n	800c69e <memmove+0x12>
 800c6ac:	4402      	add	r2, r0
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	428a      	cmp	r2, r1
 800c6b2:	d100      	bne.n	800c6b6 <memmove+0x2a>
 800c6b4:	bd10      	pop	{r4, pc}
 800c6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6be:	e7f7      	b.n	800c6b0 <memmove+0x24>

0800c6c0 <strncmp>:
 800c6c0:	b510      	push	{r4, lr}
 800c6c2:	b16a      	cbz	r2, 800c6e0 <strncmp+0x20>
 800c6c4:	3901      	subs	r1, #1
 800c6c6:	1884      	adds	r4, r0, r2
 800c6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d103      	bne.n	800c6dc <strncmp+0x1c>
 800c6d4:	42a0      	cmp	r0, r4
 800c6d6:	d001      	beq.n	800c6dc <strncmp+0x1c>
 800c6d8:	2a00      	cmp	r2, #0
 800c6da:	d1f5      	bne.n	800c6c8 <strncmp+0x8>
 800c6dc:	1ad0      	subs	r0, r2, r3
 800c6de:	bd10      	pop	{r4, pc}
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	e7fc      	b.n	800c6de <strncmp+0x1e>

0800c6e4 <_fstat_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4d07      	ldr	r5, [pc, #28]	@ (800c704 <_fstat_r+0x20>)
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	4608      	mov	r0, r1
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	602b      	str	r3, [r5, #0]
 800c6f2:	f7f7 f88b 	bl	800380c <_fstat>
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	d102      	bne.n	800c700 <_fstat_r+0x1c>
 800c6fa:	682b      	ldr	r3, [r5, #0]
 800c6fc:	b103      	cbz	r3, 800c700 <_fstat_r+0x1c>
 800c6fe:	6023      	str	r3, [r4, #0]
 800c700:	bd38      	pop	{r3, r4, r5, pc}
 800c702:	bf00      	nop
 800c704:	200007d0 	.word	0x200007d0

0800c708 <_isatty_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	4d06      	ldr	r5, [pc, #24]	@ (800c724 <_isatty_r+0x1c>)
 800c70c:	2300      	movs	r3, #0
 800c70e:	4604      	mov	r4, r0
 800c710:	4608      	mov	r0, r1
 800c712:	602b      	str	r3, [r5, #0]
 800c714:	f7f7 f88a 	bl	800382c <_isatty>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	d102      	bne.n	800c722 <_isatty_r+0x1a>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	b103      	cbz	r3, 800c722 <_isatty_r+0x1a>
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	bd38      	pop	{r3, r4, r5, pc}
 800c724:	200007d0 	.word	0x200007d0

0800c728 <_sbrk_r>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	4d06      	ldr	r5, [pc, #24]	@ (800c744 <_sbrk_r+0x1c>)
 800c72c:	2300      	movs	r3, #0
 800c72e:	4604      	mov	r4, r0
 800c730:	4608      	mov	r0, r1
 800c732:	602b      	str	r3, [r5, #0]
 800c734:	f7f7 f892 	bl	800385c <_sbrk>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	d102      	bne.n	800c742 <_sbrk_r+0x1a>
 800c73c:	682b      	ldr	r3, [r5, #0]
 800c73e:	b103      	cbz	r3, 800c742 <_sbrk_r+0x1a>
 800c740:	6023      	str	r3, [r4, #0]
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	200007d0 	.word	0x200007d0

0800c748 <nan>:
 800c748:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c750 <nan+0x8>
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	00000000 	.word	0x00000000
 800c754:	7ff80000 	.word	0x7ff80000

0800c758 <__assert_func>:
 800c758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c75a:	4614      	mov	r4, r2
 800c75c:	461a      	mov	r2, r3
 800c75e:	4b09      	ldr	r3, [pc, #36]	@ (800c784 <__assert_func+0x2c>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4605      	mov	r5, r0
 800c764:	68d8      	ldr	r0, [r3, #12]
 800c766:	b954      	cbnz	r4, 800c77e <__assert_func+0x26>
 800c768:	4b07      	ldr	r3, [pc, #28]	@ (800c788 <__assert_func+0x30>)
 800c76a:	461c      	mov	r4, r3
 800c76c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c770:	9100      	str	r1, [sp, #0]
 800c772:	462b      	mov	r3, r5
 800c774:	4905      	ldr	r1, [pc, #20]	@ (800c78c <__assert_func+0x34>)
 800c776:	f000 fba7 	bl	800cec8 <fiprintf>
 800c77a:	f000 fbb7 	bl	800ceec <abort>
 800c77e:	4b04      	ldr	r3, [pc, #16]	@ (800c790 <__assert_func+0x38>)
 800c780:	e7f4      	b.n	800c76c <__assert_func+0x14>
 800c782:	bf00      	nop
 800c784:	20000044 	.word	0x20000044
 800c788:	0800dae5 	.word	0x0800dae5
 800c78c:	0800dab7 	.word	0x0800dab7
 800c790:	0800daaa 	.word	0x0800daaa

0800c794 <_calloc_r>:
 800c794:	b570      	push	{r4, r5, r6, lr}
 800c796:	fba1 5402 	umull	r5, r4, r1, r2
 800c79a:	b93c      	cbnz	r4, 800c7ac <_calloc_r+0x18>
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7fe f80b 	bl	800a7b8 <_malloc_r>
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	b928      	cbnz	r0, 800c7b2 <_calloc_r+0x1e>
 800c7a6:	2600      	movs	r6, #0
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	bd70      	pop	{r4, r5, r6, pc}
 800c7ac:	220c      	movs	r2, #12
 800c7ae:	6002      	str	r2, [r0, #0]
 800c7b0:	e7f9      	b.n	800c7a6 <_calloc_r+0x12>
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	f7fd f8ab 	bl	8009910 <memset>
 800c7ba:	e7f5      	b.n	800c7a8 <_calloc_r+0x14>

0800c7bc <rshift>:
 800c7bc:	6903      	ldr	r3, [r0, #16]
 800c7be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7ca:	f100 0414 	add.w	r4, r0, #20
 800c7ce:	dd45      	ble.n	800c85c <rshift+0xa0>
 800c7d0:	f011 011f 	ands.w	r1, r1, #31
 800c7d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7dc:	d10c      	bne.n	800c7f8 <rshift+0x3c>
 800c7de:	f100 0710 	add.w	r7, r0, #16
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	42b1      	cmp	r1, r6
 800c7e6:	d334      	bcc.n	800c852 <rshift+0x96>
 800c7e8:	1a9b      	subs	r3, r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	1eea      	subs	r2, r5, #3
 800c7ee:	4296      	cmp	r6, r2
 800c7f0:	bf38      	it	cc
 800c7f2:	2300      	movcc	r3, #0
 800c7f4:	4423      	add	r3, r4
 800c7f6:	e015      	b.n	800c824 <rshift+0x68>
 800c7f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c7fc:	f1c1 0820 	rsb	r8, r1, #32
 800c800:	40cf      	lsrs	r7, r1
 800c802:	f105 0e04 	add.w	lr, r5, #4
 800c806:	46a1      	mov	r9, r4
 800c808:	4576      	cmp	r6, lr
 800c80a:	46f4      	mov	ip, lr
 800c80c:	d815      	bhi.n	800c83a <rshift+0x7e>
 800c80e:	1a9a      	subs	r2, r3, r2
 800c810:	0092      	lsls	r2, r2, #2
 800c812:	3a04      	subs	r2, #4
 800c814:	3501      	adds	r5, #1
 800c816:	42ae      	cmp	r6, r5
 800c818:	bf38      	it	cc
 800c81a:	2200      	movcc	r2, #0
 800c81c:	18a3      	adds	r3, r4, r2
 800c81e:	50a7      	str	r7, [r4, r2]
 800c820:	b107      	cbz	r7, 800c824 <rshift+0x68>
 800c822:	3304      	adds	r3, #4
 800c824:	1b1a      	subs	r2, r3, r4
 800c826:	42a3      	cmp	r3, r4
 800c828:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c82c:	bf08      	it	eq
 800c82e:	2300      	moveq	r3, #0
 800c830:	6102      	str	r2, [r0, #16]
 800c832:	bf08      	it	eq
 800c834:	6143      	streq	r3, [r0, #20]
 800c836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c83a:	f8dc c000 	ldr.w	ip, [ip]
 800c83e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c842:	ea4c 0707 	orr.w	r7, ip, r7
 800c846:	f849 7b04 	str.w	r7, [r9], #4
 800c84a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c84e:	40cf      	lsrs	r7, r1
 800c850:	e7da      	b.n	800c808 <rshift+0x4c>
 800c852:	f851 cb04 	ldr.w	ip, [r1], #4
 800c856:	f847 cf04 	str.w	ip, [r7, #4]!
 800c85a:	e7c3      	b.n	800c7e4 <rshift+0x28>
 800c85c:	4623      	mov	r3, r4
 800c85e:	e7e1      	b.n	800c824 <rshift+0x68>

0800c860 <__hexdig_fun>:
 800c860:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c864:	2b09      	cmp	r3, #9
 800c866:	d802      	bhi.n	800c86e <__hexdig_fun+0xe>
 800c868:	3820      	subs	r0, #32
 800c86a:	b2c0      	uxtb	r0, r0
 800c86c:	4770      	bx	lr
 800c86e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c872:	2b05      	cmp	r3, #5
 800c874:	d801      	bhi.n	800c87a <__hexdig_fun+0x1a>
 800c876:	3847      	subs	r0, #71	@ 0x47
 800c878:	e7f7      	b.n	800c86a <__hexdig_fun+0xa>
 800c87a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c87e:	2b05      	cmp	r3, #5
 800c880:	d801      	bhi.n	800c886 <__hexdig_fun+0x26>
 800c882:	3827      	subs	r0, #39	@ 0x27
 800c884:	e7f1      	b.n	800c86a <__hexdig_fun+0xa>
 800c886:	2000      	movs	r0, #0
 800c888:	4770      	bx	lr
	...

0800c88c <__gethex>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	b085      	sub	sp, #20
 800c892:	468a      	mov	sl, r1
 800c894:	9302      	str	r3, [sp, #8]
 800c896:	680b      	ldr	r3, [r1, #0]
 800c898:	9001      	str	r0, [sp, #4]
 800c89a:	4690      	mov	r8, r2
 800c89c:	1c9c      	adds	r4, r3, #2
 800c89e:	46a1      	mov	r9, r4
 800c8a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c8a4:	2830      	cmp	r0, #48	@ 0x30
 800c8a6:	d0fa      	beq.n	800c89e <__gethex+0x12>
 800c8a8:	eba9 0303 	sub.w	r3, r9, r3
 800c8ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800c8b0:	f7ff ffd6 	bl	800c860 <__hexdig_fun>
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d168      	bne.n	800c98c <__gethex+0x100>
 800c8ba:	49a0      	ldr	r1, [pc, #640]	@ (800cb3c <__gethex+0x2b0>)
 800c8bc:	2201      	movs	r2, #1
 800c8be:	4648      	mov	r0, r9
 800c8c0:	f7ff fefe 	bl	800c6c0 <strncmp>
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d167      	bne.n	800c99a <__gethex+0x10e>
 800c8ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c8ce:	4626      	mov	r6, r4
 800c8d0:	f7ff ffc6 	bl	800c860 <__hexdig_fun>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d062      	beq.n	800c99e <__gethex+0x112>
 800c8d8:	4623      	mov	r3, r4
 800c8da:	7818      	ldrb	r0, [r3, #0]
 800c8dc:	2830      	cmp	r0, #48	@ 0x30
 800c8de:	4699      	mov	r9, r3
 800c8e0:	f103 0301 	add.w	r3, r3, #1
 800c8e4:	d0f9      	beq.n	800c8da <__gethex+0x4e>
 800c8e6:	f7ff ffbb 	bl	800c860 <__hexdig_fun>
 800c8ea:	fab0 f580 	clz	r5, r0
 800c8ee:	096d      	lsrs	r5, r5, #5
 800c8f0:	f04f 0b01 	mov.w	fp, #1
 800c8f4:	464a      	mov	r2, r9
 800c8f6:	4616      	mov	r6, r2
 800c8f8:	3201      	adds	r2, #1
 800c8fa:	7830      	ldrb	r0, [r6, #0]
 800c8fc:	f7ff ffb0 	bl	800c860 <__hexdig_fun>
 800c900:	2800      	cmp	r0, #0
 800c902:	d1f8      	bne.n	800c8f6 <__gethex+0x6a>
 800c904:	498d      	ldr	r1, [pc, #564]	@ (800cb3c <__gethex+0x2b0>)
 800c906:	2201      	movs	r2, #1
 800c908:	4630      	mov	r0, r6
 800c90a:	f7ff fed9 	bl	800c6c0 <strncmp>
 800c90e:	2800      	cmp	r0, #0
 800c910:	d13f      	bne.n	800c992 <__gethex+0x106>
 800c912:	b944      	cbnz	r4, 800c926 <__gethex+0x9a>
 800c914:	1c74      	adds	r4, r6, #1
 800c916:	4622      	mov	r2, r4
 800c918:	4616      	mov	r6, r2
 800c91a:	3201      	adds	r2, #1
 800c91c:	7830      	ldrb	r0, [r6, #0]
 800c91e:	f7ff ff9f 	bl	800c860 <__hexdig_fun>
 800c922:	2800      	cmp	r0, #0
 800c924:	d1f8      	bne.n	800c918 <__gethex+0x8c>
 800c926:	1ba4      	subs	r4, r4, r6
 800c928:	00a7      	lsls	r7, r4, #2
 800c92a:	7833      	ldrb	r3, [r6, #0]
 800c92c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c930:	2b50      	cmp	r3, #80	@ 0x50
 800c932:	d13e      	bne.n	800c9b2 <__gethex+0x126>
 800c934:	7873      	ldrb	r3, [r6, #1]
 800c936:	2b2b      	cmp	r3, #43	@ 0x2b
 800c938:	d033      	beq.n	800c9a2 <__gethex+0x116>
 800c93a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c93c:	d034      	beq.n	800c9a8 <__gethex+0x11c>
 800c93e:	1c71      	adds	r1, r6, #1
 800c940:	2400      	movs	r4, #0
 800c942:	7808      	ldrb	r0, [r1, #0]
 800c944:	f7ff ff8c 	bl	800c860 <__hexdig_fun>
 800c948:	1e43      	subs	r3, r0, #1
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	2b18      	cmp	r3, #24
 800c94e:	d830      	bhi.n	800c9b2 <__gethex+0x126>
 800c950:	f1a0 0210 	sub.w	r2, r0, #16
 800c954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c958:	f7ff ff82 	bl	800c860 <__hexdig_fun>
 800c95c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c960:	fa5f fc8c 	uxtb.w	ip, ip
 800c964:	f1bc 0f18 	cmp.w	ip, #24
 800c968:	f04f 030a 	mov.w	r3, #10
 800c96c:	d91e      	bls.n	800c9ac <__gethex+0x120>
 800c96e:	b104      	cbz	r4, 800c972 <__gethex+0xe6>
 800c970:	4252      	negs	r2, r2
 800c972:	4417      	add	r7, r2
 800c974:	f8ca 1000 	str.w	r1, [sl]
 800c978:	b1ed      	cbz	r5, 800c9b6 <__gethex+0x12a>
 800c97a:	f1bb 0f00 	cmp.w	fp, #0
 800c97e:	bf0c      	ite	eq
 800c980:	2506      	moveq	r5, #6
 800c982:	2500      	movne	r5, #0
 800c984:	4628      	mov	r0, r5
 800c986:	b005      	add	sp, #20
 800c988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98c:	2500      	movs	r5, #0
 800c98e:	462c      	mov	r4, r5
 800c990:	e7b0      	b.n	800c8f4 <__gethex+0x68>
 800c992:	2c00      	cmp	r4, #0
 800c994:	d1c7      	bne.n	800c926 <__gethex+0x9a>
 800c996:	4627      	mov	r7, r4
 800c998:	e7c7      	b.n	800c92a <__gethex+0x9e>
 800c99a:	464e      	mov	r6, r9
 800c99c:	462f      	mov	r7, r5
 800c99e:	2501      	movs	r5, #1
 800c9a0:	e7c3      	b.n	800c92a <__gethex+0x9e>
 800c9a2:	2400      	movs	r4, #0
 800c9a4:	1cb1      	adds	r1, r6, #2
 800c9a6:	e7cc      	b.n	800c942 <__gethex+0xb6>
 800c9a8:	2401      	movs	r4, #1
 800c9aa:	e7fb      	b.n	800c9a4 <__gethex+0x118>
 800c9ac:	fb03 0002 	mla	r0, r3, r2, r0
 800c9b0:	e7ce      	b.n	800c950 <__gethex+0xc4>
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	e7de      	b.n	800c974 <__gethex+0xe8>
 800c9b6:	eba6 0309 	sub.w	r3, r6, r9
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	4629      	mov	r1, r5
 800c9be:	2b07      	cmp	r3, #7
 800c9c0:	dc0a      	bgt.n	800c9d8 <__gethex+0x14c>
 800c9c2:	9801      	ldr	r0, [sp, #4]
 800c9c4:	f7fd ff84 	bl	800a8d0 <_Balloc>
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	b940      	cbnz	r0, 800c9de <__gethex+0x152>
 800c9cc:	4b5c      	ldr	r3, [pc, #368]	@ (800cb40 <__gethex+0x2b4>)
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	21e4      	movs	r1, #228	@ 0xe4
 800c9d2:	485c      	ldr	r0, [pc, #368]	@ (800cb44 <__gethex+0x2b8>)
 800c9d4:	f7ff fec0 	bl	800c758 <__assert_func>
 800c9d8:	3101      	adds	r1, #1
 800c9da:	105b      	asrs	r3, r3, #1
 800c9dc:	e7ef      	b.n	800c9be <__gethex+0x132>
 800c9de:	f100 0a14 	add.w	sl, r0, #20
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	4655      	mov	r5, sl
 800c9e6:	469b      	mov	fp, r3
 800c9e8:	45b1      	cmp	r9, r6
 800c9ea:	d337      	bcc.n	800ca5c <__gethex+0x1d0>
 800c9ec:	f845 bb04 	str.w	fp, [r5], #4
 800c9f0:	eba5 050a 	sub.w	r5, r5, sl
 800c9f4:	10ad      	asrs	r5, r5, #2
 800c9f6:	6125      	str	r5, [r4, #16]
 800c9f8:	4658      	mov	r0, fp
 800c9fa:	f7fe f85b 	bl	800aab4 <__hi0bits>
 800c9fe:	016d      	lsls	r5, r5, #5
 800ca00:	f8d8 6000 	ldr.w	r6, [r8]
 800ca04:	1a2d      	subs	r5, r5, r0
 800ca06:	42b5      	cmp	r5, r6
 800ca08:	dd54      	ble.n	800cab4 <__gethex+0x228>
 800ca0a:	1bad      	subs	r5, r5, r6
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f7fe fbef 	bl	800b1f2 <__any_on>
 800ca14:	4681      	mov	r9, r0
 800ca16:	b178      	cbz	r0, 800ca38 <__gethex+0x1ac>
 800ca18:	1e6b      	subs	r3, r5, #1
 800ca1a:	1159      	asrs	r1, r3, #5
 800ca1c:	f003 021f 	and.w	r2, r3, #31
 800ca20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca24:	f04f 0901 	mov.w	r9, #1
 800ca28:	fa09 f202 	lsl.w	r2, r9, r2
 800ca2c:	420a      	tst	r2, r1
 800ca2e:	d003      	beq.n	800ca38 <__gethex+0x1ac>
 800ca30:	454b      	cmp	r3, r9
 800ca32:	dc36      	bgt.n	800caa2 <__gethex+0x216>
 800ca34:	f04f 0902 	mov.w	r9, #2
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f7ff febe 	bl	800c7bc <rshift>
 800ca40:	442f      	add	r7, r5
 800ca42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca46:	42bb      	cmp	r3, r7
 800ca48:	da42      	bge.n	800cad0 <__gethex+0x244>
 800ca4a:	9801      	ldr	r0, [sp, #4]
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	f7fd ff7f 	bl	800a950 <_Bfree>
 800ca52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca54:	2300      	movs	r3, #0
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	25a3      	movs	r5, #163	@ 0xa3
 800ca5a:	e793      	b.n	800c984 <__gethex+0xf8>
 800ca5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ca60:	2a2e      	cmp	r2, #46	@ 0x2e
 800ca62:	d012      	beq.n	800ca8a <__gethex+0x1fe>
 800ca64:	2b20      	cmp	r3, #32
 800ca66:	d104      	bne.n	800ca72 <__gethex+0x1e6>
 800ca68:	f845 bb04 	str.w	fp, [r5], #4
 800ca6c:	f04f 0b00 	mov.w	fp, #0
 800ca70:	465b      	mov	r3, fp
 800ca72:	7830      	ldrb	r0, [r6, #0]
 800ca74:	9303      	str	r3, [sp, #12]
 800ca76:	f7ff fef3 	bl	800c860 <__hexdig_fun>
 800ca7a:	9b03      	ldr	r3, [sp, #12]
 800ca7c:	f000 000f 	and.w	r0, r0, #15
 800ca80:	4098      	lsls	r0, r3
 800ca82:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca86:	3304      	adds	r3, #4
 800ca88:	e7ae      	b.n	800c9e8 <__gethex+0x15c>
 800ca8a:	45b1      	cmp	r9, r6
 800ca8c:	d8ea      	bhi.n	800ca64 <__gethex+0x1d8>
 800ca8e:	492b      	ldr	r1, [pc, #172]	@ (800cb3c <__gethex+0x2b0>)
 800ca90:	9303      	str	r3, [sp, #12]
 800ca92:	2201      	movs	r2, #1
 800ca94:	4630      	mov	r0, r6
 800ca96:	f7ff fe13 	bl	800c6c0 <strncmp>
 800ca9a:	9b03      	ldr	r3, [sp, #12]
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d1e1      	bne.n	800ca64 <__gethex+0x1d8>
 800caa0:	e7a2      	b.n	800c9e8 <__gethex+0x15c>
 800caa2:	1ea9      	subs	r1, r5, #2
 800caa4:	4620      	mov	r0, r4
 800caa6:	f7fe fba4 	bl	800b1f2 <__any_on>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0c2      	beq.n	800ca34 <__gethex+0x1a8>
 800caae:	f04f 0903 	mov.w	r9, #3
 800cab2:	e7c1      	b.n	800ca38 <__gethex+0x1ac>
 800cab4:	da09      	bge.n	800caca <__gethex+0x23e>
 800cab6:	1b75      	subs	r5, r6, r5
 800cab8:	4621      	mov	r1, r4
 800caba:	9801      	ldr	r0, [sp, #4]
 800cabc:	462a      	mov	r2, r5
 800cabe:	f7fe f95f 	bl	800ad80 <__lshift>
 800cac2:	1b7f      	subs	r7, r7, r5
 800cac4:	4604      	mov	r4, r0
 800cac6:	f100 0a14 	add.w	sl, r0, #20
 800caca:	f04f 0900 	mov.w	r9, #0
 800cace:	e7b8      	b.n	800ca42 <__gethex+0x1b6>
 800cad0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cad4:	42bd      	cmp	r5, r7
 800cad6:	dd6f      	ble.n	800cbb8 <__gethex+0x32c>
 800cad8:	1bed      	subs	r5, r5, r7
 800cada:	42ae      	cmp	r6, r5
 800cadc:	dc34      	bgt.n	800cb48 <__gethex+0x2bc>
 800cade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d022      	beq.n	800cb2c <__gethex+0x2a0>
 800cae6:	2b03      	cmp	r3, #3
 800cae8:	d024      	beq.n	800cb34 <__gethex+0x2a8>
 800caea:	2b01      	cmp	r3, #1
 800caec:	d115      	bne.n	800cb1a <__gethex+0x28e>
 800caee:	42ae      	cmp	r6, r5
 800caf0:	d113      	bne.n	800cb1a <__gethex+0x28e>
 800caf2:	2e01      	cmp	r6, #1
 800caf4:	d10b      	bne.n	800cb0e <__gethex+0x282>
 800caf6:	9a02      	ldr	r2, [sp, #8]
 800caf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	2301      	movs	r3, #1
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	f8ca 3000 	str.w	r3, [sl]
 800cb06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb08:	2562      	movs	r5, #98	@ 0x62
 800cb0a:	601c      	str	r4, [r3, #0]
 800cb0c:	e73a      	b.n	800c984 <__gethex+0xf8>
 800cb0e:	1e71      	subs	r1, r6, #1
 800cb10:	4620      	mov	r0, r4
 800cb12:	f7fe fb6e 	bl	800b1f2 <__any_on>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d1ed      	bne.n	800caf6 <__gethex+0x26a>
 800cb1a:	9801      	ldr	r0, [sp, #4]
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	f7fd ff17 	bl	800a950 <_Bfree>
 800cb22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb24:	2300      	movs	r3, #0
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	2550      	movs	r5, #80	@ 0x50
 800cb2a:	e72b      	b.n	800c984 <__gethex+0xf8>
 800cb2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1f3      	bne.n	800cb1a <__gethex+0x28e>
 800cb32:	e7e0      	b.n	800caf6 <__gethex+0x26a>
 800cb34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1dd      	bne.n	800caf6 <__gethex+0x26a>
 800cb3a:	e7ee      	b.n	800cb1a <__gethex+0x28e>
 800cb3c:	0800d938 	.word	0x0800d938
 800cb40:	0800d7d1 	.word	0x0800d7d1
 800cb44:	0800dae6 	.word	0x0800dae6
 800cb48:	1e6f      	subs	r7, r5, #1
 800cb4a:	f1b9 0f00 	cmp.w	r9, #0
 800cb4e:	d130      	bne.n	800cbb2 <__gethex+0x326>
 800cb50:	b127      	cbz	r7, 800cb5c <__gethex+0x2d0>
 800cb52:	4639      	mov	r1, r7
 800cb54:	4620      	mov	r0, r4
 800cb56:	f7fe fb4c 	bl	800b1f2 <__any_on>
 800cb5a:	4681      	mov	r9, r0
 800cb5c:	117a      	asrs	r2, r7, #5
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cb64:	f007 071f 	and.w	r7, r7, #31
 800cb68:	40bb      	lsls	r3, r7
 800cb6a:	4213      	tst	r3, r2
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4620      	mov	r0, r4
 800cb70:	bf18      	it	ne
 800cb72:	f049 0902 	orrne.w	r9, r9, #2
 800cb76:	f7ff fe21 	bl	800c7bc <rshift>
 800cb7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cb7e:	1b76      	subs	r6, r6, r5
 800cb80:	2502      	movs	r5, #2
 800cb82:	f1b9 0f00 	cmp.w	r9, #0
 800cb86:	d047      	beq.n	800cc18 <__gethex+0x38c>
 800cb88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d015      	beq.n	800cbbc <__gethex+0x330>
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d017      	beq.n	800cbc4 <__gethex+0x338>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d109      	bne.n	800cbac <__gethex+0x320>
 800cb98:	f019 0f02 	tst.w	r9, #2
 800cb9c:	d006      	beq.n	800cbac <__gethex+0x320>
 800cb9e:	f8da 3000 	ldr.w	r3, [sl]
 800cba2:	ea49 0903 	orr.w	r9, r9, r3
 800cba6:	f019 0f01 	tst.w	r9, #1
 800cbaa:	d10e      	bne.n	800cbca <__gethex+0x33e>
 800cbac:	f045 0510 	orr.w	r5, r5, #16
 800cbb0:	e032      	b.n	800cc18 <__gethex+0x38c>
 800cbb2:	f04f 0901 	mov.w	r9, #1
 800cbb6:	e7d1      	b.n	800cb5c <__gethex+0x2d0>
 800cbb8:	2501      	movs	r5, #1
 800cbba:	e7e2      	b.n	800cb82 <__gethex+0x2f6>
 800cbbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbbe:	f1c3 0301 	rsb	r3, r3, #1
 800cbc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d0f0      	beq.n	800cbac <__gethex+0x320>
 800cbca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbce:	f104 0314 	add.w	r3, r4, #20
 800cbd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cbd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cbda:	f04f 0c00 	mov.w	ip, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbe4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cbe8:	d01b      	beq.n	800cc22 <__gethex+0x396>
 800cbea:	3201      	adds	r2, #1
 800cbec:	6002      	str	r2, [r0, #0]
 800cbee:	2d02      	cmp	r5, #2
 800cbf0:	f104 0314 	add.w	r3, r4, #20
 800cbf4:	d13c      	bne.n	800cc70 <__gethex+0x3e4>
 800cbf6:	f8d8 2000 	ldr.w	r2, [r8]
 800cbfa:	3a01      	subs	r2, #1
 800cbfc:	42b2      	cmp	r2, r6
 800cbfe:	d109      	bne.n	800cc14 <__gethex+0x388>
 800cc00:	1171      	asrs	r1, r6, #5
 800cc02:	2201      	movs	r2, #1
 800cc04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc08:	f006 061f 	and.w	r6, r6, #31
 800cc0c:	fa02 f606 	lsl.w	r6, r2, r6
 800cc10:	421e      	tst	r6, r3
 800cc12:	d13a      	bne.n	800cc8a <__gethex+0x3fe>
 800cc14:	f045 0520 	orr.w	r5, r5, #32
 800cc18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc1a:	601c      	str	r4, [r3, #0]
 800cc1c:	9b02      	ldr	r3, [sp, #8]
 800cc1e:	601f      	str	r7, [r3, #0]
 800cc20:	e6b0      	b.n	800c984 <__gethex+0xf8>
 800cc22:	4299      	cmp	r1, r3
 800cc24:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc28:	d8d9      	bhi.n	800cbde <__gethex+0x352>
 800cc2a:	68a3      	ldr	r3, [r4, #8]
 800cc2c:	459b      	cmp	fp, r3
 800cc2e:	db17      	blt.n	800cc60 <__gethex+0x3d4>
 800cc30:	6861      	ldr	r1, [r4, #4]
 800cc32:	9801      	ldr	r0, [sp, #4]
 800cc34:	3101      	adds	r1, #1
 800cc36:	f7fd fe4b 	bl	800a8d0 <_Balloc>
 800cc3a:	4681      	mov	r9, r0
 800cc3c:	b918      	cbnz	r0, 800cc46 <__gethex+0x3ba>
 800cc3e:	4b1a      	ldr	r3, [pc, #104]	@ (800cca8 <__gethex+0x41c>)
 800cc40:	4602      	mov	r2, r0
 800cc42:	2184      	movs	r1, #132	@ 0x84
 800cc44:	e6c5      	b.n	800c9d2 <__gethex+0x146>
 800cc46:	6922      	ldr	r2, [r4, #16]
 800cc48:	3202      	adds	r2, #2
 800cc4a:	f104 010c 	add.w	r1, r4, #12
 800cc4e:	0092      	lsls	r2, r2, #2
 800cc50:	300c      	adds	r0, #12
 800cc52:	f7fc fedc 	bl	8009a0e <memcpy>
 800cc56:	4621      	mov	r1, r4
 800cc58:	9801      	ldr	r0, [sp, #4]
 800cc5a:	f7fd fe79 	bl	800a950 <_Bfree>
 800cc5e:	464c      	mov	r4, r9
 800cc60:	6923      	ldr	r3, [r4, #16]
 800cc62:	1c5a      	adds	r2, r3, #1
 800cc64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc68:	6122      	str	r2, [r4, #16]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	615a      	str	r2, [r3, #20]
 800cc6e:	e7be      	b.n	800cbee <__gethex+0x362>
 800cc70:	6922      	ldr	r2, [r4, #16]
 800cc72:	455a      	cmp	r2, fp
 800cc74:	dd0b      	ble.n	800cc8e <__gethex+0x402>
 800cc76:	2101      	movs	r1, #1
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f7ff fd9f 	bl	800c7bc <rshift>
 800cc7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc82:	3701      	adds	r7, #1
 800cc84:	42bb      	cmp	r3, r7
 800cc86:	f6ff aee0 	blt.w	800ca4a <__gethex+0x1be>
 800cc8a:	2501      	movs	r5, #1
 800cc8c:	e7c2      	b.n	800cc14 <__gethex+0x388>
 800cc8e:	f016 061f 	ands.w	r6, r6, #31
 800cc92:	d0fa      	beq.n	800cc8a <__gethex+0x3fe>
 800cc94:	4453      	add	r3, sl
 800cc96:	f1c6 0620 	rsb	r6, r6, #32
 800cc9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cc9e:	f7fd ff09 	bl	800aab4 <__hi0bits>
 800cca2:	42b0      	cmp	r0, r6
 800cca4:	dbe7      	blt.n	800cc76 <__gethex+0x3ea>
 800cca6:	e7f0      	b.n	800cc8a <__gethex+0x3fe>
 800cca8:	0800d7d1 	.word	0x0800d7d1

0800ccac <L_shift>:
 800ccac:	f1c2 0208 	rsb	r2, r2, #8
 800ccb0:	0092      	lsls	r2, r2, #2
 800ccb2:	b570      	push	{r4, r5, r6, lr}
 800ccb4:	f1c2 0620 	rsb	r6, r2, #32
 800ccb8:	6843      	ldr	r3, [r0, #4]
 800ccba:	6804      	ldr	r4, [r0, #0]
 800ccbc:	fa03 f506 	lsl.w	r5, r3, r6
 800ccc0:	432c      	orrs	r4, r5
 800ccc2:	40d3      	lsrs	r3, r2
 800ccc4:	6004      	str	r4, [r0, #0]
 800ccc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccca:	4288      	cmp	r0, r1
 800cccc:	d3f4      	bcc.n	800ccb8 <L_shift+0xc>
 800ccce:	bd70      	pop	{r4, r5, r6, pc}

0800ccd0 <__match>:
 800ccd0:	b530      	push	{r4, r5, lr}
 800ccd2:	6803      	ldr	r3, [r0, #0]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccda:	b914      	cbnz	r4, 800cce2 <__match+0x12>
 800ccdc:	6003      	str	r3, [r0, #0]
 800ccde:	2001      	movs	r0, #1
 800cce0:	bd30      	pop	{r4, r5, pc}
 800cce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cce6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ccea:	2d19      	cmp	r5, #25
 800ccec:	bf98      	it	ls
 800ccee:	3220      	addls	r2, #32
 800ccf0:	42a2      	cmp	r2, r4
 800ccf2:	d0f0      	beq.n	800ccd6 <__match+0x6>
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e7f3      	b.n	800cce0 <__match+0x10>

0800ccf8 <__hexnan>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	680b      	ldr	r3, [r1, #0]
 800ccfe:	6801      	ldr	r1, [r0, #0]
 800cd00:	115e      	asrs	r6, r3, #5
 800cd02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd06:	f013 031f 	ands.w	r3, r3, #31
 800cd0a:	b087      	sub	sp, #28
 800cd0c:	bf18      	it	ne
 800cd0e:	3604      	addne	r6, #4
 800cd10:	2500      	movs	r5, #0
 800cd12:	1f37      	subs	r7, r6, #4
 800cd14:	4682      	mov	sl, r0
 800cd16:	4690      	mov	r8, r2
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd1e:	46b9      	mov	r9, r7
 800cd20:	463c      	mov	r4, r7
 800cd22:	9502      	str	r5, [sp, #8]
 800cd24:	46ab      	mov	fp, r5
 800cd26:	784a      	ldrb	r2, [r1, #1]
 800cd28:	1c4b      	adds	r3, r1, #1
 800cd2a:	9303      	str	r3, [sp, #12]
 800cd2c:	b342      	cbz	r2, 800cd80 <__hexnan+0x88>
 800cd2e:	4610      	mov	r0, r2
 800cd30:	9105      	str	r1, [sp, #20]
 800cd32:	9204      	str	r2, [sp, #16]
 800cd34:	f7ff fd94 	bl	800c860 <__hexdig_fun>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d151      	bne.n	800cde0 <__hexnan+0xe8>
 800cd3c:	9a04      	ldr	r2, [sp, #16]
 800cd3e:	9905      	ldr	r1, [sp, #20]
 800cd40:	2a20      	cmp	r2, #32
 800cd42:	d818      	bhi.n	800cd76 <__hexnan+0x7e>
 800cd44:	9b02      	ldr	r3, [sp, #8]
 800cd46:	459b      	cmp	fp, r3
 800cd48:	dd13      	ble.n	800cd72 <__hexnan+0x7a>
 800cd4a:	454c      	cmp	r4, r9
 800cd4c:	d206      	bcs.n	800cd5c <__hexnan+0x64>
 800cd4e:	2d07      	cmp	r5, #7
 800cd50:	dc04      	bgt.n	800cd5c <__hexnan+0x64>
 800cd52:	462a      	mov	r2, r5
 800cd54:	4649      	mov	r1, r9
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7ff ffa8 	bl	800ccac <L_shift>
 800cd5c:	4544      	cmp	r4, r8
 800cd5e:	d952      	bls.n	800ce06 <__hexnan+0x10e>
 800cd60:	2300      	movs	r3, #0
 800cd62:	f1a4 0904 	sub.w	r9, r4, #4
 800cd66:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd6a:	f8cd b008 	str.w	fp, [sp, #8]
 800cd6e:	464c      	mov	r4, r9
 800cd70:	461d      	mov	r5, r3
 800cd72:	9903      	ldr	r1, [sp, #12]
 800cd74:	e7d7      	b.n	800cd26 <__hexnan+0x2e>
 800cd76:	2a29      	cmp	r2, #41	@ 0x29
 800cd78:	d157      	bne.n	800ce2a <__hexnan+0x132>
 800cd7a:	3102      	adds	r1, #2
 800cd7c:	f8ca 1000 	str.w	r1, [sl]
 800cd80:	f1bb 0f00 	cmp.w	fp, #0
 800cd84:	d051      	beq.n	800ce2a <__hexnan+0x132>
 800cd86:	454c      	cmp	r4, r9
 800cd88:	d206      	bcs.n	800cd98 <__hexnan+0xa0>
 800cd8a:	2d07      	cmp	r5, #7
 800cd8c:	dc04      	bgt.n	800cd98 <__hexnan+0xa0>
 800cd8e:	462a      	mov	r2, r5
 800cd90:	4649      	mov	r1, r9
 800cd92:	4620      	mov	r0, r4
 800cd94:	f7ff ff8a 	bl	800ccac <L_shift>
 800cd98:	4544      	cmp	r4, r8
 800cd9a:	d936      	bls.n	800ce0a <__hexnan+0x112>
 800cd9c:	f1a8 0204 	sub.w	r2, r8, #4
 800cda0:	4623      	mov	r3, r4
 800cda2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cda6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdaa:	429f      	cmp	r7, r3
 800cdac:	d2f9      	bcs.n	800cda2 <__hexnan+0xaa>
 800cdae:	1b3b      	subs	r3, r7, r4
 800cdb0:	f023 0303 	bic.w	r3, r3, #3
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	3401      	adds	r4, #1
 800cdb8:	3e03      	subs	r6, #3
 800cdba:	42b4      	cmp	r4, r6
 800cdbc:	bf88      	it	hi
 800cdbe:	2304      	movhi	r3, #4
 800cdc0:	4443      	add	r3, r8
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f843 2b04 	str.w	r2, [r3], #4
 800cdc8:	429f      	cmp	r7, r3
 800cdca:	d2fb      	bcs.n	800cdc4 <__hexnan+0xcc>
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	b91b      	cbnz	r3, 800cdd8 <__hexnan+0xe0>
 800cdd0:	4547      	cmp	r7, r8
 800cdd2:	d128      	bne.n	800ce26 <__hexnan+0x12e>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	603b      	str	r3, [r7, #0]
 800cdd8:	2005      	movs	r0, #5
 800cdda:	b007      	add	sp, #28
 800cddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde0:	3501      	adds	r5, #1
 800cde2:	2d08      	cmp	r5, #8
 800cde4:	f10b 0b01 	add.w	fp, fp, #1
 800cde8:	dd06      	ble.n	800cdf8 <__hexnan+0x100>
 800cdea:	4544      	cmp	r4, r8
 800cdec:	d9c1      	bls.n	800cd72 <__hexnan+0x7a>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdf4:	2501      	movs	r5, #1
 800cdf6:	3c04      	subs	r4, #4
 800cdf8:	6822      	ldr	r2, [r4, #0]
 800cdfa:	f000 000f 	and.w	r0, r0, #15
 800cdfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce02:	6020      	str	r0, [r4, #0]
 800ce04:	e7b5      	b.n	800cd72 <__hexnan+0x7a>
 800ce06:	2508      	movs	r5, #8
 800ce08:	e7b3      	b.n	800cd72 <__hexnan+0x7a>
 800ce0a:	9b01      	ldr	r3, [sp, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d0dd      	beq.n	800cdcc <__hexnan+0xd4>
 800ce10:	f1c3 0320 	rsb	r3, r3, #32
 800ce14:	f04f 32ff 	mov.w	r2, #4294967295
 800ce18:	40da      	lsrs	r2, r3
 800ce1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce1e:	4013      	ands	r3, r2
 800ce20:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce24:	e7d2      	b.n	800cdcc <__hexnan+0xd4>
 800ce26:	3f04      	subs	r7, #4
 800ce28:	e7d0      	b.n	800cdcc <__hexnan+0xd4>
 800ce2a:	2004      	movs	r0, #4
 800ce2c:	e7d5      	b.n	800cdda <__hexnan+0xe2>

0800ce2e <__ascii_mbtowc>:
 800ce2e:	b082      	sub	sp, #8
 800ce30:	b901      	cbnz	r1, 800ce34 <__ascii_mbtowc+0x6>
 800ce32:	a901      	add	r1, sp, #4
 800ce34:	b142      	cbz	r2, 800ce48 <__ascii_mbtowc+0x1a>
 800ce36:	b14b      	cbz	r3, 800ce4c <__ascii_mbtowc+0x1e>
 800ce38:	7813      	ldrb	r3, [r2, #0]
 800ce3a:	600b      	str	r3, [r1, #0]
 800ce3c:	7812      	ldrb	r2, [r2, #0]
 800ce3e:	1e10      	subs	r0, r2, #0
 800ce40:	bf18      	it	ne
 800ce42:	2001      	movne	r0, #1
 800ce44:	b002      	add	sp, #8
 800ce46:	4770      	bx	lr
 800ce48:	4610      	mov	r0, r2
 800ce4a:	e7fb      	b.n	800ce44 <__ascii_mbtowc+0x16>
 800ce4c:	f06f 0001 	mvn.w	r0, #1
 800ce50:	e7f8      	b.n	800ce44 <__ascii_mbtowc+0x16>

0800ce52 <_realloc_r>:
 800ce52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce56:	4680      	mov	r8, r0
 800ce58:	4615      	mov	r5, r2
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	b921      	cbnz	r1, 800ce68 <_realloc_r+0x16>
 800ce5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce62:	4611      	mov	r1, r2
 800ce64:	f7fd bca8 	b.w	800a7b8 <_malloc_r>
 800ce68:	b92a      	cbnz	r2, 800ce76 <_realloc_r+0x24>
 800ce6a:	f7fd fc31 	bl	800a6d0 <_free_r>
 800ce6e:	2400      	movs	r4, #0
 800ce70:	4620      	mov	r0, r4
 800ce72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce76:	f000 f840 	bl	800cefa <_malloc_usable_size_r>
 800ce7a:	4285      	cmp	r5, r0
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	d802      	bhi.n	800ce86 <_realloc_r+0x34>
 800ce80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce84:	d8f4      	bhi.n	800ce70 <_realloc_r+0x1e>
 800ce86:	4629      	mov	r1, r5
 800ce88:	4640      	mov	r0, r8
 800ce8a:	f7fd fc95 	bl	800a7b8 <_malloc_r>
 800ce8e:	4607      	mov	r7, r0
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d0ec      	beq.n	800ce6e <_realloc_r+0x1c>
 800ce94:	42b5      	cmp	r5, r6
 800ce96:	462a      	mov	r2, r5
 800ce98:	4621      	mov	r1, r4
 800ce9a:	bf28      	it	cs
 800ce9c:	4632      	movcs	r2, r6
 800ce9e:	f7fc fdb6 	bl	8009a0e <memcpy>
 800cea2:	4621      	mov	r1, r4
 800cea4:	4640      	mov	r0, r8
 800cea6:	f7fd fc13 	bl	800a6d0 <_free_r>
 800ceaa:	463c      	mov	r4, r7
 800ceac:	e7e0      	b.n	800ce70 <_realloc_r+0x1e>

0800ceae <__ascii_wctomb>:
 800ceae:	4603      	mov	r3, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	b141      	cbz	r1, 800cec6 <__ascii_wctomb+0x18>
 800ceb4:	2aff      	cmp	r2, #255	@ 0xff
 800ceb6:	d904      	bls.n	800cec2 <__ascii_wctomb+0x14>
 800ceb8:	228a      	movs	r2, #138	@ 0x8a
 800ceba:	601a      	str	r2, [r3, #0]
 800cebc:	f04f 30ff 	mov.w	r0, #4294967295
 800cec0:	4770      	bx	lr
 800cec2:	700a      	strb	r2, [r1, #0]
 800cec4:	2001      	movs	r0, #1
 800cec6:	4770      	bx	lr

0800cec8 <fiprintf>:
 800cec8:	b40e      	push	{r1, r2, r3}
 800ceca:	b503      	push	{r0, r1, lr}
 800cecc:	4601      	mov	r1, r0
 800cece:	ab03      	add	r3, sp, #12
 800ced0:	4805      	ldr	r0, [pc, #20]	@ (800cee8 <fiprintf+0x20>)
 800ced2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ced6:	6800      	ldr	r0, [r0, #0]
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	f7ff f9b1 	bl	800c240 <_vfiprintf_r>
 800cede:	b002      	add	sp, #8
 800cee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cee4:	b003      	add	sp, #12
 800cee6:	4770      	bx	lr
 800cee8:	20000044 	.word	0x20000044

0800ceec <abort>:
 800ceec:	b508      	push	{r3, lr}
 800ceee:	2006      	movs	r0, #6
 800cef0:	f000 f834 	bl	800cf5c <raise>
 800cef4:	2001      	movs	r0, #1
 800cef6:	f7f6 fc55 	bl	80037a4 <_exit>

0800cefa <_malloc_usable_size_r>:
 800cefa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cefe:	1f18      	subs	r0, r3, #4
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	bfbc      	itt	lt
 800cf04:	580b      	ldrlt	r3, [r1, r0]
 800cf06:	18c0      	addlt	r0, r0, r3
 800cf08:	4770      	bx	lr

0800cf0a <_raise_r>:
 800cf0a:	291f      	cmp	r1, #31
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	4605      	mov	r5, r0
 800cf10:	460c      	mov	r4, r1
 800cf12:	d904      	bls.n	800cf1e <_raise_r+0x14>
 800cf14:	2316      	movs	r3, #22
 800cf16:	6003      	str	r3, [r0, #0]
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1c:	bd38      	pop	{r3, r4, r5, pc}
 800cf1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf20:	b112      	cbz	r2, 800cf28 <_raise_r+0x1e>
 800cf22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf26:	b94b      	cbnz	r3, 800cf3c <_raise_r+0x32>
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f000 f831 	bl	800cf90 <_getpid_r>
 800cf2e:	4622      	mov	r2, r4
 800cf30:	4601      	mov	r1, r0
 800cf32:	4628      	mov	r0, r5
 800cf34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf38:	f000 b818 	b.w	800cf6c <_kill_r>
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d00a      	beq.n	800cf56 <_raise_r+0x4c>
 800cf40:	1c59      	adds	r1, r3, #1
 800cf42:	d103      	bne.n	800cf4c <_raise_r+0x42>
 800cf44:	2316      	movs	r3, #22
 800cf46:	6003      	str	r3, [r0, #0]
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e7e7      	b.n	800cf1c <_raise_r+0x12>
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf52:	4620      	mov	r0, r4
 800cf54:	4798      	blx	r3
 800cf56:	2000      	movs	r0, #0
 800cf58:	e7e0      	b.n	800cf1c <_raise_r+0x12>
	...

0800cf5c <raise>:
 800cf5c:	4b02      	ldr	r3, [pc, #8]	@ (800cf68 <raise+0xc>)
 800cf5e:	4601      	mov	r1, r0
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f7ff bfd2 	b.w	800cf0a <_raise_r>
 800cf66:	bf00      	nop
 800cf68:	20000044 	.word	0x20000044

0800cf6c <_kill_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d07      	ldr	r5, [pc, #28]	@ (800cf8c <_kill_r+0x20>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	4611      	mov	r1, r2
 800cf78:	602b      	str	r3, [r5, #0]
 800cf7a:	f7f6 fc03 	bl	8003784 <_kill>
 800cf7e:	1c43      	adds	r3, r0, #1
 800cf80:	d102      	bne.n	800cf88 <_kill_r+0x1c>
 800cf82:	682b      	ldr	r3, [r5, #0]
 800cf84:	b103      	cbz	r3, 800cf88 <_kill_r+0x1c>
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	bd38      	pop	{r3, r4, r5, pc}
 800cf8a:	bf00      	nop
 800cf8c:	200007d0 	.word	0x200007d0

0800cf90 <_getpid_r>:
 800cf90:	f7f6 bbf0 	b.w	8003774 <_getpid>

0800cf94 <atan2>:
 800cf94:	f000 b800 	b.w	800cf98 <__ieee754_atan2>

0800cf98 <__ieee754_atan2>:
 800cf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf9c:	ec57 6b11 	vmov	r6, r7, d1
 800cfa0:	4273      	negs	r3, r6
 800cfa2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d120 <__ieee754_atan2+0x188>
 800cfa6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800cfaa:	4333      	orrs	r3, r6
 800cfac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cfb0:	4543      	cmp	r3, r8
 800cfb2:	ec51 0b10 	vmov	r0, r1, d0
 800cfb6:	4635      	mov	r5, r6
 800cfb8:	d809      	bhi.n	800cfce <__ieee754_atan2+0x36>
 800cfba:	4244      	negs	r4, r0
 800cfbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cfc0:	4304      	orrs	r4, r0
 800cfc2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cfc6:	4544      	cmp	r4, r8
 800cfc8:	468e      	mov	lr, r1
 800cfca:	4681      	mov	r9, r0
 800cfcc:	d907      	bls.n	800cfde <__ieee754_atan2+0x46>
 800cfce:	4632      	mov	r2, r6
 800cfd0:	463b      	mov	r3, r7
 800cfd2:	f7f3 f97b 	bl	80002cc <__adddf3>
 800cfd6:	ec41 0b10 	vmov	d0, r0, r1
 800cfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfde:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800cfe2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800cfe6:	4334      	orrs	r4, r6
 800cfe8:	d103      	bne.n	800cff2 <__ieee754_atan2+0x5a>
 800cfea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfee:	f000 b89b 	b.w	800d128 <atan>
 800cff2:	17bc      	asrs	r4, r7, #30
 800cff4:	f004 0402 	and.w	r4, r4, #2
 800cff8:	ea53 0909 	orrs.w	r9, r3, r9
 800cffc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d000:	d107      	bne.n	800d012 <__ieee754_atan2+0x7a>
 800d002:	2c02      	cmp	r4, #2
 800d004:	d05f      	beq.n	800d0c6 <__ieee754_atan2+0x12e>
 800d006:	2c03      	cmp	r4, #3
 800d008:	d1e5      	bne.n	800cfd6 <__ieee754_atan2+0x3e>
 800d00a:	a141      	add	r1, pc, #260	@ (adr r1, 800d110 <__ieee754_atan2+0x178>)
 800d00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d010:	e7e1      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d012:	4315      	orrs	r5, r2
 800d014:	d106      	bne.n	800d024 <__ieee754_atan2+0x8c>
 800d016:	f1be 0f00 	cmp.w	lr, #0
 800d01a:	da5f      	bge.n	800d0dc <__ieee754_atan2+0x144>
 800d01c:	a13e      	add	r1, pc, #248	@ (adr r1, 800d118 <__ieee754_atan2+0x180>)
 800d01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d022:	e7d8      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d024:	4542      	cmp	r2, r8
 800d026:	d10f      	bne.n	800d048 <__ieee754_atan2+0xb0>
 800d028:	4293      	cmp	r3, r2
 800d02a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d02e:	d107      	bne.n	800d040 <__ieee754_atan2+0xa8>
 800d030:	2c02      	cmp	r4, #2
 800d032:	d84c      	bhi.n	800d0ce <__ieee754_atan2+0x136>
 800d034:	4b34      	ldr	r3, [pc, #208]	@ (800d108 <__ieee754_atan2+0x170>)
 800d036:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d03a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d03e:	e7ca      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d040:	2c02      	cmp	r4, #2
 800d042:	d848      	bhi.n	800d0d6 <__ieee754_atan2+0x13e>
 800d044:	4b31      	ldr	r3, [pc, #196]	@ (800d10c <__ieee754_atan2+0x174>)
 800d046:	e7f6      	b.n	800d036 <__ieee754_atan2+0x9e>
 800d048:	4543      	cmp	r3, r8
 800d04a:	d0e4      	beq.n	800d016 <__ieee754_atan2+0x7e>
 800d04c:	1a9b      	subs	r3, r3, r2
 800d04e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d052:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d056:	da1e      	bge.n	800d096 <__ieee754_atan2+0xfe>
 800d058:	2f00      	cmp	r7, #0
 800d05a:	da01      	bge.n	800d060 <__ieee754_atan2+0xc8>
 800d05c:	323c      	adds	r2, #60	@ 0x3c
 800d05e:	db1e      	blt.n	800d09e <__ieee754_atan2+0x106>
 800d060:	4632      	mov	r2, r6
 800d062:	463b      	mov	r3, r7
 800d064:	f7f3 fc12 	bl	800088c <__aeabi_ddiv>
 800d068:	ec41 0b10 	vmov	d0, r0, r1
 800d06c:	f000 f9f4 	bl	800d458 <fabs>
 800d070:	f000 f85a 	bl	800d128 <atan>
 800d074:	ec51 0b10 	vmov	r0, r1, d0
 800d078:	2c01      	cmp	r4, #1
 800d07a:	d013      	beq.n	800d0a4 <__ieee754_atan2+0x10c>
 800d07c:	2c02      	cmp	r4, #2
 800d07e:	d015      	beq.n	800d0ac <__ieee754_atan2+0x114>
 800d080:	2c00      	cmp	r4, #0
 800d082:	d0a8      	beq.n	800cfd6 <__ieee754_atan2+0x3e>
 800d084:	a318      	add	r3, pc, #96	@ (adr r3, 800d0e8 <__ieee754_atan2+0x150>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	f7f3 f91d 	bl	80002c8 <__aeabi_dsub>
 800d08e:	a318      	add	r3, pc, #96	@ (adr r3, 800d0f0 <__ieee754_atan2+0x158>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	e014      	b.n	800d0c0 <__ieee754_atan2+0x128>
 800d096:	a118      	add	r1, pc, #96	@ (adr r1, 800d0f8 <__ieee754_atan2+0x160>)
 800d098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d09c:	e7ec      	b.n	800d078 <__ieee754_atan2+0xe0>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	e7e9      	b.n	800d078 <__ieee754_atan2+0xe0>
 800d0a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	e794      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d0ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800d0e8 <__ieee754_atan2+0x150>)
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f7f3 f909 	bl	80002c8 <__aeabi_dsub>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	a10d      	add	r1, pc, #52	@ (adr r1, 800d0f0 <__ieee754_atan2+0x158>)
 800d0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0c0:	f7f3 f902 	bl	80002c8 <__aeabi_dsub>
 800d0c4:	e787      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d0c6:	a10a      	add	r1, pc, #40	@ (adr r1, 800d0f0 <__ieee754_atan2+0x158>)
 800d0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0cc:	e783      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d0ce:	a10c      	add	r1, pc, #48	@ (adr r1, 800d100 <__ieee754_atan2+0x168>)
 800d0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0d4:	e77f      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	2100      	movs	r1, #0
 800d0da:	e77c      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d0dc:	a106      	add	r1, pc, #24	@ (adr r1, 800d0f8 <__ieee754_atan2+0x160>)
 800d0de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0e2:	e778      	b.n	800cfd6 <__ieee754_atan2+0x3e>
 800d0e4:	f3af 8000 	nop.w
 800d0e8:	33145c07 	.word	0x33145c07
 800d0ec:	3ca1a626 	.word	0x3ca1a626
 800d0f0:	54442d18 	.word	0x54442d18
 800d0f4:	400921fb 	.word	0x400921fb
 800d0f8:	54442d18 	.word	0x54442d18
 800d0fc:	3ff921fb 	.word	0x3ff921fb
 800d100:	54442d18 	.word	0x54442d18
 800d104:	3fe921fb 	.word	0x3fe921fb
 800d108:	0800db60 	.word	0x0800db60
 800d10c:	0800db48 	.word	0x0800db48
 800d110:	54442d18 	.word	0x54442d18
 800d114:	c00921fb 	.word	0xc00921fb
 800d118:	54442d18 	.word	0x54442d18
 800d11c:	bff921fb 	.word	0xbff921fb
 800d120:	7ff00000 	.word	0x7ff00000
 800d124:	00000000 	.word	0x00000000

0800d128 <atan>:
 800d128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	ec55 4b10 	vmov	r4, r5, d0
 800d130:	4bbf      	ldr	r3, [pc, #764]	@ (800d430 <atan+0x308>)
 800d132:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d136:	429e      	cmp	r6, r3
 800d138:	46ab      	mov	fp, r5
 800d13a:	d918      	bls.n	800d16e <atan+0x46>
 800d13c:	4bbd      	ldr	r3, [pc, #756]	@ (800d434 <atan+0x30c>)
 800d13e:	429e      	cmp	r6, r3
 800d140:	d801      	bhi.n	800d146 <atan+0x1e>
 800d142:	d109      	bne.n	800d158 <atan+0x30>
 800d144:	b144      	cbz	r4, 800d158 <atan+0x30>
 800d146:	4622      	mov	r2, r4
 800d148:	462b      	mov	r3, r5
 800d14a:	4620      	mov	r0, r4
 800d14c:	4629      	mov	r1, r5
 800d14e:	f7f3 f8bd 	bl	80002cc <__adddf3>
 800d152:	4604      	mov	r4, r0
 800d154:	460d      	mov	r5, r1
 800d156:	e006      	b.n	800d166 <atan+0x3e>
 800d158:	f1bb 0f00 	cmp.w	fp, #0
 800d15c:	f340 812b 	ble.w	800d3b6 <atan+0x28e>
 800d160:	a597      	add	r5, pc, #604	@ (adr r5, 800d3c0 <atan+0x298>)
 800d162:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d166:	ec45 4b10 	vmov	d0, r4, r5
 800d16a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16e:	4bb2      	ldr	r3, [pc, #712]	@ (800d438 <atan+0x310>)
 800d170:	429e      	cmp	r6, r3
 800d172:	d813      	bhi.n	800d19c <atan+0x74>
 800d174:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d178:	429e      	cmp	r6, r3
 800d17a:	d80c      	bhi.n	800d196 <atan+0x6e>
 800d17c:	a392      	add	r3, pc, #584	@ (adr r3, 800d3c8 <atan+0x2a0>)
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	4620      	mov	r0, r4
 800d184:	4629      	mov	r1, r5
 800d186:	f7f3 f8a1 	bl	80002cc <__adddf3>
 800d18a:	4bac      	ldr	r3, [pc, #688]	@ (800d43c <atan+0x314>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	f7f3 fce3 	bl	8000b58 <__aeabi_dcmpgt>
 800d192:	2800      	cmp	r0, #0
 800d194:	d1e7      	bne.n	800d166 <atan+0x3e>
 800d196:	f04f 3aff 	mov.w	sl, #4294967295
 800d19a:	e029      	b.n	800d1f0 <atan+0xc8>
 800d19c:	f000 f95c 	bl	800d458 <fabs>
 800d1a0:	4ba7      	ldr	r3, [pc, #668]	@ (800d440 <atan+0x318>)
 800d1a2:	429e      	cmp	r6, r3
 800d1a4:	ec55 4b10 	vmov	r4, r5, d0
 800d1a8:	f200 80bc 	bhi.w	800d324 <atan+0x1fc>
 800d1ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d1b0:	429e      	cmp	r6, r3
 800d1b2:	f200 809e 	bhi.w	800d2f2 <atan+0x1ca>
 800d1b6:	4622      	mov	r2, r4
 800d1b8:	462b      	mov	r3, r5
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	4629      	mov	r1, r5
 800d1be:	f7f3 f885 	bl	80002cc <__adddf3>
 800d1c2:	4b9e      	ldr	r3, [pc, #632]	@ (800d43c <atan+0x314>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f7f3 f87f 	bl	80002c8 <__aeabi_dsub>
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	460f      	mov	r7, r1
 800d1d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	f7f3 f878 	bl	80002cc <__adddf3>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	4639      	mov	r1, r7
 800d1e4:	f7f3 fb52 	bl	800088c <__aeabi_ddiv>
 800d1e8:	f04f 0a00 	mov.w	sl, #0
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	462b      	mov	r3, r5
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f3 fa1e 	bl	8000638 <__aeabi_dmul>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4680      	mov	r8, r0
 800d202:	4689      	mov	r9, r1
 800d204:	f7f3 fa18 	bl	8000638 <__aeabi_dmul>
 800d208:	a371      	add	r3, pc, #452	@ (adr r3, 800d3d0 <atan+0x2a8>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	4606      	mov	r6, r0
 800d210:	460f      	mov	r7, r1
 800d212:	f7f3 fa11 	bl	8000638 <__aeabi_dmul>
 800d216:	a370      	add	r3, pc, #448	@ (adr r3, 800d3d8 <atan+0x2b0>)
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	f7f3 f856 	bl	80002cc <__adddf3>
 800d220:	4632      	mov	r2, r6
 800d222:	463b      	mov	r3, r7
 800d224:	f7f3 fa08 	bl	8000638 <__aeabi_dmul>
 800d228:	a36d      	add	r3, pc, #436	@ (adr r3, 800d3e0 <atan+0x2b8>)
 800d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22e:	f7f3 f84d 	bl	80002cc <__adddf3>
 800d232:	4632      	mov	r2, r6
 800d234:	463b      	mov	r3, r7
 800d236:	f7f3 f9ff 	bl	8000638 <__aeabi_dmul>
 800d23a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d3e8 <atan+0x2c0>)
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f7f3 f844 	bl	80002cc <__adddf3>
 800d244:	4632      	mov	r2, r6
 800d246:	463b      	mov	r3, r7
 800d248:	f7f3 f9f6 	bl	8000638 <__aeabi_dmul>
 800d24c:	a368      	add	r3, pc, #416	@ (adr r3, 800d3f0 <atan+0x2c8>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f7f3 f83b 	bl	80002cc <__adddf3>
 800d256:	4632      	mov	r2, r6
 800d258:	463b      	mov	r3, r7
 800d25a:	f7f3 f9ed 	bl	8000638 <__aeabi_dmul>
 800d25e:	a366      	add	r3, pc, #408	@ (adr r3, 800d3f8 <atan+0x2d0>)
 800d260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d264:	f7f3 f832 	bl	80002cc <__adddf3>
 800d268:	4642      	mov	r2, r8
 800d26a:	464b      	mov	r3, r9
 800d26c:	f7f3 f9e4 	bl	8000638 <__aeabi_dmul>
 800d270:	a363      	add	r3, pc, #396	@ (adr r3, 800d400 <atan+0x2d8>)
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	4680      	mov	r8, r0
 800d278:	4689      	mov	r9, r1
 800d27a:	4630      	mov	r0, r6
 800d27c:	4639      	mov	r1, r7
 800d27e:	f7f3 f9db 	bl	8000638 <__aeabi_dmul>
 800d282:	a361      	add	r3, pc, #388	@ (adr r3, 800d408 <atan+0x2e0>)
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	f7f3 f81e 	bl	80002c8 <__aeabi_dsub>
 800d28c:	4632      	mov	r2, r6
 800d28e:	463b      	mov	r3, r7
 800d290:	f7f3 f9d2 	bl	8000638 <__aeabi_dmul>
 800d294:	a35e      	add	r3, pc, #376	@ (adr r3, 800d410 <atan+0x2e8>)
 800d296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29a:	f7f3 f815 	bl	80002c8 <__aeabi_dsub>
 800d29e:	4632      	mov	r2, r6
 800d2a0:	463b      	mov	r3, r7
 800d2a2:	f7f3 f9c9 	bl	8000638 <__aeabi_dmul>
 800d2a6:	a35c      	add	r3, pc, #368	@ (adr r3, 800d418 <atan+0x2f0>)
 800d2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ac:	f7f3 f80c 	bl	80002c8 <__aeabi_dsub>
 800d2b0:	4632      	mov	r2, r6
 800d2b2:	463b      	mov	r3, r7
 800d2b4:	f7f3 f9c0 	bl	8000638 <__aeabi_dmul>
 800d2b8:	a359      	add	r3, pc, #356	@ (adr r3, 800d420 <atan+0x2f8>)
 800d2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2be:	f7f3 f803 	bl	80002c8 <__aeabi_dsub>
 800d2c2:	4632      	mov	r2, r6
 800d2c4:	463b      	mov	r3, r7
 800d2c6:	f7f3 f9b7 	bl	8000638 <__aeabi_dmul>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	4649      	mov	r1, r9
 800d2d2:	f7f2 fffb 	bl	80002cc <__adddf3>
 800d2d6:	4622      	mov	r2, r4
 800d2d8:	462b      	mov	r3, r5
 800d2da:	f7f3 f9ad 	bl	8000638 <__aeabi_dmul>
 800d2de:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	d148      	bne.n	800d37a <atan+0x252>
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	f7f2 ffec 	bl	80002c8 <__aeabi_dsub>
 800d2f0:	e72f      	b.n	800d152 <atan+0x2a>
 800d2f2:	4b52      	ldr	r3, [pc, #328]	@ (800d43c <atan+0x314>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f7f2 ffe5 	bl	80002c8 <__aeabi_dsub>
 800d2fe:	4b4f      	ldr	r3, [pc, #316]	@ (800d43c <atan+0x314>)
 800d300:	4606      	mov	r6, r0
 800d302:	460f      	mov	r7, r1
 800d304:	2200      	movs	r2, #0
 800d306:	4620      	mov	r0, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	f7f2 ffdf 	bl	80002cc <__adddf3>
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	4630      	mov	r0, r6
 800d314:	4639      	mov	r1, r7
 800d316:	f7f3 fab9 	bl	800088c <__aeabi_ddiv>
 800d31a:	f04f 0a01 	mov.w	sl, #1
 800d31e:	4604      	mov	r4, r0
 800d320:	460d      	mov	r5, r1
 800d322:	e765      	b.n	800d1f0 <atan+0xc8>
 800d324:	4b47      	ldr	r3, [pc, #284]	@ (800d444 <atan+0x31c>)
 800d326:	429e      	cmp	r6, r3
 800d328:	d21c      	bcs.n	800d364 <atan+0x23c>
 800d32a:	4b47      	ldr	r3, [pc, #284]	@ (800d448 <atan+0x320>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	4620      	mov	r0, r4
 800d330:	4629      	mov	r1, r5
 800d332:	f7f2 ffc9 	bl	80002c8 <__aeabi_dsub>
 800d336:	4b44      	ldr	r3, [pc, #272]	@ (800d448 <atan+0x320>)
 800d338:	4606      	mov	r6, r0
 800d33a:	460f      	mov	r7, r1
 800d33c:	2200      	movs	r2, #0
 800d33e:	4620      	mov	r0, r4
 800d340:	4629      	mov	r1, r5
 800d342:	f7f3 f979 	bl	8000638 <__aeabi_dmul>
 800d346:	4b3d      	ldr	r3, [pc, #244]	@ (800d43c <atan+0x314>)
 800d348:	2200      	movs	r2, #0
 800d34a:	f7f2 ffbf 	bl	80002cc <__adddf3>
 800d34e:	4602      	mov	r2, r0
 800d350:	460b      	mov	r3, r1
 800d352:	4630      	mov	r0, r6
 800d354:	4639      	mov	r1, r7
 800d356:	f7f3 fa99 	bl	800088c <__aeabi_ddiv>
 800d35a:	f04f 0a02 	mov.w	sl, #2
 800d35e:	4604      	mov	r4, r0
 800d360:	460d      	mov	r5, r1
 800d362:	e745      	b.n	800d1f0 <atan+0xc8>
 800d364:	4622      	mov	r2, r4
 800d366:	462b      	mov	r3, r5
 800d368:	4938      	ldr	r1, [pc, #224]	@ (800d44c <atan+0x324>)
 800d36a:	2000      	movs	r0, #0
 800d36c:	f7f3 fa8e 	bl	800088c <__aeabi_ddiv>
 800d370:	f04f 0a03 	mov.w	sl, #3
 800d374:	4604      	mov	r4, r0
 800d376:	460d      	mov	r5, r1
 800d378:	e73a      	b.n	800d1f0 <atan+0xc8>
 800d37a:	4b35      	ldr	r3, [pc, #212]	@ (800d450 <atan+0x328>)
 800d37c:	4e35      	ldr	r6, [pc, #212]	@ (800d454 <atan+0x32c>)
 800d37e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f2 ff9f 	bl	80002c8 <__aeabi_dsub>
 800d38a:	4622      	mov	r2, r4
 800d38c:	462b      	mov	r3, r5
 800d38e:	f7f2 ff9b 	bl	80002c8 <__aeabi_dsub>
 800d392:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d39e:	f7f2 ff93 	bl	80002c8 <__aeabi_dsub>
 800d3a2:	f1bb 0f00 	cmp.w	fp, #0
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	460d      	mov	r5, r1
 800d3aa:	f6bf aedc 	bge.w	800d166 <atan+0x3e>
 800d3ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d3b2:	461d      	mov	r5, r3
 800d3b4:	e6d7      	b.n	800d166 <atan+0x3e>
 800d3b6:	a51c      	add	r5, pc, #112	@ (adr r5, 800d428 <atan+0x300>)
 800d3b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d3bc:	e6d3      	b.n	800d166 <atan+0x3e>
 800d3be:	bf00      	nop
 800d3c0:	54442d18 	.word	0x54442d18
 800d3c4:	3ff921fb 	.word	0x3ff921fb
 800d3c8:	8800759c 	.word	0x8800759c
 800d3cc:	7e37e43c 	.word	0x7e37e43c
 800d3d0:	e322da11 	.word	0xe322da11
 800d3d4:	3f90ad3a 	.word	0x3f90ad3a
 800d3d8:	24760deb 	.word	0x24760deb
 800d3dc:	3fa97b4b 	.word	0x3fa97b4b
 800d3e0:	a0d03d51 	.word	0xa0d03d51
 800d3e4:	3fb10d66 	.word	0x3fb10d66
 800d3e8:	c54c206e 	.word	0xc54c206e
 800d3ec:	3fb745cd 	.word	0x3fb745cd
 800d3f0:	920083ff 	.word	0x920083ff
 800d3f4:	3fc24924 	.word	0x3fc24924
 800d3f8:	5555550d 	.word	0x5555550d
 800d3fc:	3fd55555 	.word	0x3fd55555
 800d400:	2c6a6c2f 	.word	0x2c6a6c2f
 800d404:	bfa2b444 	.word	0xbfa2b444
 800d408:	52defd9a 	.word	0x52defd9a
 800d40c:	3fadde2d 	.word	0x3fadde2d
 800d410:	af749a6d 	.word	0xaf749a6d
 800d414:	3fb3b0f2 	.word	0x3fb3b0f2
 800d418:	fe231671 	.word	0xfe231671
 800d41c:	3fbc71c6 	.word	0x3fbc71c6
 800d420:	9998ebc4 	.word	0x9998ebc4
 800d424:	3fc99999 	.word	0x3fc99999
 800d428:	54442d18 	.word	0x54442d18
 800d42c:	bff921fb 	.word	0xbff921fb
 800d430:	440fffff 	.word	0x440fffff
 800d434:	7ff00000 	.word	0x7ff00000
 800d438:	3fdbffff 	.word	0x3fdbffff
 800d43c:	3ff00000 	.word	0x3ff00000
 800d440:	3ff2ffff 	.word	0x3ff2ffff
 800d444:	40038000 	.word	0x40038000
 800d448:	3ff80000 	.word	0x3ff80000
 800d44c:	bff00000 	.word	0xbff00000
 800d450:	0800db78 	.word	0x0800db78
 800d454:	0800db98 	.word	0x0800db98

0800d458 <fabs>:
 800d458:	ec51 0b10 	vmov	r0, r1, d0
 800d45c:	4602      	mov	r2, r0
 800d45e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d462:	ec43 2b10 	vmov	d0, r2, r3
 800d466:	4770      	bx	lr

0800d468 <_init>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	bf00      	nop
 800d46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d46e:	bc08      	pop	{r3}
 800d470:	469e      	mov	lr, r3
 800d472:	4770      	bx	lr

0800d474 <_fini>:
 800d474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d476:	bf00      	nop
 800d478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47a:	bc08      	pop	{r3}
 800d47c:	469e      	mov	lr, r3
 800d47e:	4770      	bx	lr
