
Robot_Config_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cca8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800ce78  0800ce78  0000de78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d590  0800d590  0000f200  2**0
                  CONTENTS
  4 .ARM          00000008  0800d590  0800d590  0000e590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d598  0800d598  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d598  0800d598  0000e598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d59c  0800d59c  0000e59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800d5a0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000200  0800d7a0  0000f200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  0800d7a0  0000f770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125c4  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002835  00000000  00000000  000217f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00024030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e40  00000000  00000000  00025238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024112  00000000  00000000  00026078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ea7  00000000  00000000  0004a18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d843a  00000000  00000000  00060031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013846b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a4  00000000  00000000  001384b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce60 	.word	0x0800ce60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800ce60 	.word	0x0800ce60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4619      	mov	r1, r3
 8001032:	2007      	movs	r0, #7
 8001034:	f000 fa44 	bl	80014c0 <bno055_writeData>
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4619      	mov	r1, r3
 800104e:	203d      	movs	r0, #61	@ 0x3d
 8001050:	f000 fa36 	bl	80014c0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d103      	bne.n	8001062 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800105a:	2013      	movs	r0, #19
 800105c:	f000 fa24 	bl	80014a8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001060:	e002      	b.n	8001068 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001062:	2007      	movs	r0, #7
 8001064:	f000 fa20 	bl	80014a8 <bno055_delay>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ffe3 	bl	8001040 <bno055_setOperationMode>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001082:	200c      	movs	r0, #12
 8001084:	f7ff ffdc 	bl	8001040 <bno055_setOperationMode>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001090:	2120      	movs	r1, #32
 8001092:	203f      	movs	r0, #63	@ 0x3f
 8001094:	f000 fa14 	bl	80014c0 <bno055_writeData>
  bno055_delay(700);
 8001098:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800109c:	f000 fa04 	bl	80014a8 <bno055_delay>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  bno055_reset();
 80010aa:	f7ff ffef 	bl	800108c <bno055_reset>

  uint8_t id = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 faed 	bl	8001698 <bno055_readData>
  if (id != BNO055_ID) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80010c2:	d004      	beq.n	80010ce <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <bno055_setup+0x4c>)
 80010ca:	f007 ffb5 	bl	8009038 <iprintf>
  }
  bno055_setPage(0);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ffa8 	bl	8001024 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80010d4:	2100      	movs	r1, #0
 80010d6:	203f      	movs	r0, #63	@ 0x3f
 80010d8:	f000 f9f2 	bl	80014c0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80010dc:	f7ff ffc8 	bl	8001070 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 f9e1 	bl	80014a8 <bno055_delay>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800ce78 	.word	0x0800ce78

080010f4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80010f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010f8:	b09e      	sub	sp, #120	@ 0x78
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ff8e 	bl	8001024 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800110c:	2b20      	cmp	r3, #32
 800110e:	d108      	bne.n	8001122 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001110:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001118:	2208      	movs	r2, #8
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fabc 	bl	8001698 <bno055_readData>
 8001120:	e007      	b.n	8001132 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001122:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800112a:	2206      	movs	r2, #6
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fab3 	bl	8001698 <bno055_readData>

  double scale = 1;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b8b      	ldr	r3, [pc, #556]	@ (8001364 <bno055_getVector+0x270>)
 8001138:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800113c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001140:	2b0e      	cmp	r3, #14
 8001142:	d109      	bne.n	8001158 <bno055_getVector+0x64>
    scale = magScale;
 8001144:	4b88      	ldr	r3, [pc, #544]	@ (8001368 <bno055_getVector+0x274>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9fb 	bl	8000544 <__aeabi_ui2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001156:	e03e      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800115c:	2b08      	cmp	r3, #8
 800115e:	d007      	beq.n	8001170 <bno055_getVector+0x7c>
 8001160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001164:	2b28      	cmp	r3, #40	@ 0x28
 8001166:	d003      	beq.n	8001170 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800116c:	2b2e      	cmp	r3, #46	@ 0x2e
 800116e:	d109      	bne.n	8001184 <bno055_getVector+0x90>
    scale = accelScale;
 8001170:	4b7e      	ldr	r3, [pc, #504]	@ (800136c <bno055_getVector+0x278>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9e5 	bl	8000544 <__aeabi_ui2d>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001182:	e028      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001188:	2b14      	cmp	r3, #20
 800118a:	d109      	bne.n	80011a0 <bno055_getVector+0xac>
    scale = angularRateScale;
 800118c:	4b78      	ldr	r3, [pc, #480]	@ (8001370 <bno055_getVector+0x27c>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9d7 	bl	8000544 <__aeabi_ui2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800119e:	e01a      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011a4:	2b1a      	cmp	r3, #26
 80011a6:	d109      	bne.n	80011bc <bno055_getVector+0xc8>
    scale = eulerScale;
 80011a8:	4b72      	ldr	r3, [pc, #456]	@ (8001374 <bno055_getVector+0x280>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9c9 	bl	8000544 <__aeabi_ui2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80011ba:	e00c      	b.n	80011d6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80011bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	d108      	bne.n	80011d6 <bno055_getVector+0xe2>
    scale = quaScale;
 80011c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001378 <bno055_getVector+0x284>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9bb 	bl	8000544 <__aeabi_ui2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011da:	2220      	movs	r2, #32
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f008 f892 	bl	8009308 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80011e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011e8:	2b20      	cmp	r3, #32
 80011ea:	d150      	bne.n	800128e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011ec:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9b0 	bl	8000564 <__aeabi_i2d>
 8001204:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001208:	f7ff fb40 	bl	800088c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001214:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21b      	sxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f99c 	bl	8000564 <__aeabi_i2d>
 800122c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001230:	f7ff fb2c 	bl	800088c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800123c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f988 	bl	8000564 <__aeabi_i2d>
 8001254:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001258:	f7ff fb18 	bl	800088c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001264:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f974 	bl	8000564 <__aeabi_i2d>
 800127c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001280:	f7ff fb04 	bl	800088c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800128c:	e03b      	b.n	8001306 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800128e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95f 	bl	8000564 <__aeabi_i2d>
 80012a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012aa:	f7ff faef 	bl	800088c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80012b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f94b 	bl	8000564 <__aeabi_i2d>
 80012ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012d2:	f7ff fadb 	bl	800088c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80012de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f937 	bl	8000564 <__aeabi_i2d>
 80012f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012fa:	f7ff fac7 	bl	800088c <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001306:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800130a:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800131a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800131e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001322:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001326:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800132a:	ec49 8b14 	vmov	d4, r8, r9
 800132e:	ec45 4b15 	vmov	d5, r4, r5
 8001332:	ec41 0b16 	vmov	d6, r0, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
}
 800133a:	eeb0 0a44 	vmov.f32	s0, s8
 800133e:	eef0 0a64 	vmov.f32	s1, s9
 8001342:	eeb0 1a45 	vmov.f32	s2, s10
 8001346:	eef0 1a65 	vmov.f32	s3, s11
 800134a:	eeb0 2a46 	vmov.f32	s4, s12
 800134e:	eef0 2a66 	vmov.f32	s5, s13
 8001352:	eeb0 3a47 	vmov.f32	s6, s14
 8001356:	eef0 3a67 	vmov.f32	s7, s15
 800135a:	3778      	adds	r7, #120	@ 0x78
 800135c:	46bd      	mov	sp, r7
 800135e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001362:	bf00      	nop
 8001364:	3ff00000 	.word	0x3ff00000
 8001368:	20000006 	.word	0x20000006
 800136c:	20000000 	.word	0x20000000
 8001370:	20000002 	.word	0x20000002
 8001374:	20000004 	.word	0x20000004
 8001378:	20000008 	.word	0x20000008

0800137c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 800137c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001380:	b090      	sub	sp, #64	@ 0x40
 8001382:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001384:	201a      	movs	r0, #26
 8001386:	f7ff feb5 	bl	80010f4 <bno055_getVector>
 800138a:	eeb0 4a40 	vmov.f32	s8, s0
 800138e:	eef0 4a60 	vmov.f32	s9, s1
 8001392:	eeb0 5a41 	vmov.f32	s10, s2
 8001396:	eef0 5a61 	vmov.f32	s11, s3
 800139a:	eeb0 6a42 	vmov.f32	s12, s4
 800139e:	eef0 6a62 	vmov.f32	s13, s5
 80013a2:	eeb0 7a43 	vmov.f32	s14, s6
 80013a6:	eef0 7a63 	vmov.f32	s15, s7
 80013aa:	ed87 4b08 	vstr	d4, [r7, #32]
 80013ae:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80013b2:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80013b6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80013ba:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013be:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80013c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013ca:	ec49 8b14 	vmov	d4, r8, r9
 80013ce:	ec45 4b15 	vmov	d5, r4, r5
 80013d2:	ec41 0b16 	vmov	d6, r0, r1
 80013d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80013da:	eeb0 0a44 	vmov.f32	s0, s8
 80013de:	eef0 0a64 	vmov.f32	s1, s9
 80013e2:	eeb0 1a45 	vmov.f32	s2, s10
 80013e6:	eef0 1a65 	vmov.f32	s3, s11
 80013ea:	eeb0 2a46 	vmov.f32	s4, s12
 80013ee:	eef0 2a66 	vmov.f32	s5, s13
 80013f2:	eeb0 3a47 	vmov.f32	s6, s14
 80013f6:	eef0 3a67 	vmov.f32	s7, s15
 80013fa:	3740      	adds	r7, #64	@ 0x40
 80013fc:	46bd      	mov	sp, r7
 80013fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001402 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001402:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001406:	b090      	sub	sp, #64	@ 0x40
 8001408:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 800140a:	2020      	movs	r0, #32
 800140c:	f7ff fe72 	bl	80010f4 <bno055_getVector>
 8001410:	eeb0 4a40 	vmov.f32	s8, s0
 8001414:	eef0 4a60 	vmov.f32	s9, s1
 8001418:	eeb0 5a41 	vmov.f32	s10, s2
 800141c:	eef0 5a61 	vmov.f32	s11, s3
 8001420:	eeb0 6a42 	vmov.f32	s12, s4
 8001424:	eef0 6a62 	vmov.f32	s13, s5
 8001428:	eeb0 7a43 	vmov.f32	s14, s6
 800142c:	eef0 7a63 	vmov.f32	s15, s7
 8001430:	ed87 4b08 	vstr	d4, [r7, #32]
 8001434:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001438:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800143c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001444:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001448:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800144c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001450:	ec49 8b14 	vmov	d4, r8, r9
 8001454:	ec45 4b15 	vmov	d5, r4, r5
 8001458:	ec41 0b16 	vmov	d6, r0, r1
 800145c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001460:	eeb0 0a44 	vmov.f32	s0, s8
 8001464:	eef0 0a64 	vmov.f32	s1, s9
 8001468:	eeb0 1a45 	vmov.f32	s2, s10
 800146c:	eef0 1a65 	vmov.f32	s3, s11
 8001470:	eeb0 2a46 	vmov.f32	s4, s12
 8001474:	eef0 2a66 	vmov.f32	s5, s13
 8001478:	eeb0 3a47 	vmov.f32	s6, s14
 800147c:	eef0 3a67 	vmov.f32	s7, s15
 8001480:	3740      	adds	r7, #64	@ 0x40
 8001482:	46bd      	mov	sp, r7
 8001484:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001488 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <bno055_assignI2C+0x1c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000021c 	.word	0x2000021c

080014a8 <bno055_delay>:

void bno055_delay(int time) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 ffb2 	bl	800341c <HAL_Delay>
#endif
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	733b      	strb	r3, [r7, #12]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80014d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001644 <bno055_writeData+0x184>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f107 020c 	add.w	r2, r7, #12
 80014e0:	230a      	movs	r3, #10
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2302      	movs	r3, #2
 80014e6:	2150      	movs	r1, #80	@ 0x50
 80014e8:	f002 ffc2 	bl	8004470 <HAL_I2C_Master_Transmit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80a0 	beq.w	8001638 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d103      	bne.n	8001506 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80014fe:	4852      	ldr	r0, [pc, #328]	@ (8001648 <bno055_writeData+0x188>)
 8001500:	f007 fe02 	bl	8009108 <puts>
 8001504:	e012      	b.n	800152c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d103      	bne.n	8001514 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800150c:	484f      	ldr	r0, [pc, #316]	@ (800164c <bno055_writeData+0x18c>)
 800150e:	f007 fdfb 	bl	8009108 <puts>
 8001512:	e00b      	b.n	800152c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d103      	bne.n	8001522 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800151a:	484d      	ldr	r0, [pc, #308]	@ (8001650 <bno055_writeData+0x190>)
 800151c:	f007 fdf4 	bl	8009108 <puts>
 8001520:	e004      	b.n	800152c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	4619      	mov	r1, r3
 8001526:	484b      	ldr	r0, [pc, #300]	@ (8001654 <bno055_writeData+0x194>)
 8001528:	f007 fd86 	bl	8009038 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800152c:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <bno055_writeData+0x184>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fadb 	bl	8004aec <HAL_I2C_GetError>
 8001536:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d07e      	beq.n	800163c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d103      	bne.n	800154c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001544:	4844      	ldr	r0, [pc, #272]	@ (8001658 <bno055_writeData+0x198>)
 8001546:	f007 fddf 	bl	8009108 <puts>
 800154a:	e021      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d103      	bne.n	800155a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001552:	4842      	ldr	r0, [pc, #264]	@ (800165c <bno055_writeData+0x19c>)
 8001554:	f007 fdd8 	bl	8009108 <puts>
 8001558:	e01a      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d103      	bne.n	8001568 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001560:	483f      	ldr	r0, [pc, #252]	@ (8001660 <bno055_writeData+0x1a0>)
 8001562:	f007 fdd1 	bl	8009108 <puts>
 8001566:	e013      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d103      	bne.n	8001576 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800156e:	483d      	ldr	r0, [pc, #244]	@ (8001664 <bno055_writeData+0x1a4>)
 8001570:	f007 fdca 	bl	8009108 <puts>
 8001574:	e00c      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b10      	cmp	r3, #16
 800157a:	d103      	bne.n	8001584 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800157c:	483a      	ldr	r0, [pc, #232]	@ (8001668 <bno055_writeData+0x1a8>)
 800157e:	f007 fdc3 	bl	8009108 <puts>
 8001582:	e005      	b.n	8001590 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b20      	cmp	r3, #32
 8001588:	d102      	bne.n	8001590 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800158a:	4838      	ldr	r0, [pc, #224]	@ (800166c <bno055_writeData+0x1ac>)
 800158c:	f007 fdbc 	bl	8009108 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <bno055_writeData+0x184>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fa9b 	bl	8004ad0 <HAL_I2C_GetState>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80015a4:	4832      	ldr	r0, [pc, #200]	@ (8001670 <bno055_writeData+0x1b0>)
 80015a6:	f007 fdaf 	bl	8009108 <puts>
 80015aa:	e048      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d103      	bne.n	80015ba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80015b2:	482f      	ldr	r0, [pc, #188]	@ (8001670 <bno055_writeData+0x1b0>)
 80015b4:	f007 fda8 	bl	8009108 <puts>
 80015b8:	e041      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b24      	cmp	r3, #36	@ 0x24
 80015be:	d103      	bne.n	80015c8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80015c0:	482c      	ldr	r0, [pc, #176]	@ (8001674 <bno055_writeData+0x1b4>)
 80015c2:	f007 fda1 	bl	8009108 <puts>
 80015c6:	e03a      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b21      	cmp	r3, #33	@ 0x21
 80015cc:	d103      	bne.n	80015d6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80015ce:	482a      	ldr	r0, [pc, #168]	@ (8001678 <bno055_writeData+0x1b8>)
 80015d0:	f007 fd9a 	bl	8009108 <puts>
 80015d4:	e033      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b22      	cmp	r3, #34	@ 0x22
 80015da:	d103      	bne.n	80015e4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80015dc:	4827      	ldr	r0, [pc, #156]	@ (800167c <bno055_writeData+0x1bc>)
 80015de:	f007 fd93 	bl	8009108 <puts>
 80015e2:	e02c      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b28      	cmp	r3, #40	@ 0x28
 80015e8:	d103      	bne.n	80015f2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80015ea:	4825      	ldr	r0, [pc, #148]	@ (8001680 <bno055_writeData+0x1c0>)
 80015ec:	f007 fd8c 	bl	8009108 <puts>
 80015f0:	e025      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b29      	cmp	r3, #41	@ 0x29
 80015f6:	d103      	bne.n	8001600 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80015f8:	4822      	ldr	r0, [pc, #136]	@ (8001684 <bno055_writeData+0x1c4>)
 80015fa:	f007 fd85 	bl	8009108 <puts>
 80015fe:	e01e      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b2a      	cmp	r3, #42	@ 0x2a
 8001604:	d103      	bne.n	800160e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001606:	4820      	ldr	r0, [pc, #128]	@ (8001688 <bno055_writeData+0x1c8>)
 8001608:	f007 fd7e 	bl	8009108 <puts>
 800160c:	e017      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b60      	cmp	r3, #96	@ 0x60
 8001612:	d103      	bne.n	800161c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001614:	481d      	ldr	r0, [pc, #116]	@ (800168c <bno055_writeData+0x1cc>)
 8001616:	f007 fd77 	bl	8009108 <puts>
 800161a:	e010      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001620:	d103      	bne.n	800162a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001622:	481b      	ldr	r0, [pc, #108]	@ (8001690 <bno055_writeData+0x1d0>)
 8001624:	f007 fd70 	bl	8009108 <puts>
 8001628:	e009      	b.n	800163e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2be0      	cmp	r3, #224	@ 0xe0
 800162e:	d106      	bne.n	800163e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001630:	4818      	ldr	r0, [pc, #96]	@ (8001694 <bno055_writeData+0x1d4>)
 8001632:	f007 fd69 	bl	8009108 <puts>
 8001636:	e002      	b.n	800163e <bno055_writeData+0x17e>
    return;
 8001638:	bf00      	nop
 800163a:	e000      	b.n	800163e <bno055_writeData+0x17e>
    return;
 800163c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000021c 	.word	0x2000021c
 8001648:	0800ceb4 	.word	0x0800ceb4
 800164c:	0800ced8 	.word	0x0800ced8
 8001650:	0800cf00 	.word	0x0800cf00
 8001654:	0800cf24 	.word	0x0800cf24
 8001658:	0800cf3c 	.word	0x0800cf3c
 800165c:	0800cf50 	.word	0x0800cf50
 8001660:	0800cf64 	.word	0x0800cf64
 8001664:	0800cf78 	.word	0x0800cf78
 8001668:	0800cf8c 	.word	0x0800cf8c
 800166c:	0800cfa0 	.word	0x0800cfa0
 8001670:	0800cfb8 	.word	0x0800cfb8
 8001674:	0800cfd0 	.word	0x0800cfd0
 8001678:	0800cfe4 	.word	0x0800cfe4
 800167c:	0800cffc 	.word	0x0800cffc
 8001680:	0800d014 	.word	0x0800d014
 8001684:	0800d02c 	.word	0x0800d02c
 8001688:	0800d04c 	.word	0x0800d04c
 800168c:	0800d06c 	.word	0x0800d06c
 8001690:	0800d084 	.word	0x0800d084
 8001694:	0800d09c 	.word	0x0800d09c

08001698 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af02      	add	r7, sp, #8
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <bno055_readData+0x40>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	1dfa      	adds	r2, r7, #7
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2150      	movs	r1, #80	@ 0x50
 80016b6:	f002 fedb 	bl	8004470 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <bno055_readData+0x40>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2264      	movs	r2, #100	@ 0x64
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	2150      	movs	r1, #80	@ 0x50
 80016ca:	f002 ffcf 	bl	800466c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000021c 	.word	0x2000021c

080016dc <HAL_UART_RxCpltCallback>:
int deadzone = 50;
int l0 = 310;
//float cos30 = (sqrt(3)/2);
float cos30 = 0.5;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80016e4:	2210      	movs	r2, #16
 80016e6:	4904      	ldr	r1, [pc, #16]	@ (80016f8 <HAL_UART_RxCpltCallback+0x1c>)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <HAL_UART_RxCpltCallback+0x20>)
 80016ea:	f005 fc6a 	bl	8006fc2 <HAL_UART_Receive_DMA>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200005cc 	.word	0x200005cc
 80016fc:	200004b4 	.word	0x200004b4

08001700 <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	69b9      	ldr	r1, [r7, #24]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	1a8a      	subs	r2, r1, r2
 800171a:	fb03 f202 	mul.w	r2, r3, r2
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1acb      	subs	r3, r1, r3
 8001724:	fb92 f2f3 	sdiv	r2, r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4413      	add	r3, r2

}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800173c:	ed2d 8b02 	vpush	{d8}
 8001740:	b090      	sub	sp, #64	@ 0x40
 8001742:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001744:	f001 fdf8 	bl	8003338 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001748:	f000 fd2e 	bl	80021a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800174c:	f001 f8f0 	bl	8002930 <MX_GPIO_Init>
	MX_DMA_Init();
 8001750:	f001 f8ce 	bl	80028f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001754:	f001 f8a2 	bl	800289c <MX_USART2_UART_Init>
	MX_UART4_Init();
 8001758:	f001 f876 	bl	8002848 <MX_UART4_Init>
	MX_TIM1_Init();
 800175c:	f000 fdc4 	bl	80022e8 <MX_TIM1_Init>
	MX_TIM8_Init();
 8001760:	f000 ff38 	bl	80025d4 <MX_TIM8_Init>
	MX_I2C1_Init();
 8001764:	f000 fd92 	bl	800228c <MX_I2C1_Init>
	MX_TIM5_Init();
 8001768:	f000 febe 	bl	80024e8 <MX_TIM5_Init>
	MX_TIM10_Init();
 800176c:	f000 ff82 	bl	8002674 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001770:	f000 ffce 	bl	8002710 <MX_TIM11_Init>
	MX_TIM13_Init();
 8001774:	f001 f81a 	bl	80027ac <MX_TIM13_Init>
	MX_TIM2_Init();
 8001778:	f000 fe0e 	bl	8002398 <MX_TIM2_Init>
	MX_TIM3_Init();
 800177c:	f000 fe60 	bl	8002440 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8001780:	2210      	movs	r2, #16
 8001782:	4979      	ldr	r1, [pc, #484]	@ (8001968 <main+0x230>)
 8001784:	4879      	ldr	r0, [pc, #484]	@ (800196c <main+0x234>)
 8001786:	f005 fc1c 	bl	8006fc2 <HAL_UART_Receive_DMA>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800178a:	213c      	movs	r1, #60	@ 0x3c
 800178c:	4878      	ldr	r0, [pc, #480]	@ (8001970 <main+0x238>)
 800178e:	f004 fd8d 	bl	80062ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001792:	213c      	movs	r1, #60	@ 0x3c
 8001794:	4877      	ldr	r0, [pc, #476]	@ (8001974 <main+0x23c>)
 8001796:	f004 fd89 	bl	80062ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800179a:	213c      	movs	r1, #60	@ 0x3c
 800179c:	4876      	ldr	r0, [pc, #472]	@ (8001978 <main+0x240>)
 800179e:	f004 fd85 	bl	80062ac <HAL_TIM_Encoder_Start>
	bno055_assignI2C(&hi2c1);
 80017a2:	4876      	ldr	r0, [pc, #472]	@ (800197c <main+0x244>)
 80017a4:	f7ff fe70 	bl	8001488 <bno055_assignI2C>
	  bno055_setup();
 80017a8:	f7ff fc7c 	bl	80010a4 <bno055_setup>
	  bno055_setOperationModeNDOF();
 80017ac:	f7ff fc67 	bl	800107e <bno055_setOperationModeNDOF>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* ps5 controller */
		lx = (rxbuff[0] & 0x80) ?
 80017b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <main+0x230>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da04      	bge.n	80017c4 <main+0x8c>
 80017ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001968 <main+0x230>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017c2:	e001      	b.n	80017c8 <main+0x90>
 80017c4:	4b68      	ldr	r3, [pc, #416]	@ (8001968 <main+0x230>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 80017c8:	4a6d      	ldr	r2, [pc, #436]	@ (8001980 <main+0x248>)
 80017ca:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 80017cc:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <main+0x230>)
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da04      	bge.n	80017e0 <main+0xa8>
 80017d6:	4b64      	ldr	r3, [pc, #400]	@ (8001968 <main+0x230>)
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017de:	e001      	b.n	80017e4 <main+0xac>
 80017e0:	4b61      	ldr	r3, [pc, #388]	@ (8001968 <main+0x230>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 80017e4:	4a67      	ldr	r2, [pc, #412]	@ (8001984 <main+0x24c>)
 80017e6:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 80017e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <main+0x230>)
 80017ea:	789b      	ldrb	r3, [r3, #2]
 80017ec:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da04      	bge.n	80017fc <main+0xc4>
 80017f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001968 <main+0x230>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017fa:	e001      	b.n	8001800 <main+0xc8>
 80017fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001968 <main+0x230>)
 80017fe:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 8001800:	4a61      	ldr	r2, [pc, #388]	@ (8001988 <main+0x250>)
 8001802:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 8001804:	4b58      	ldr	r3, [pc, #352]	@ (8001968 <main+0x230>)
 8001806:	78db      	ldrb	r3, [r3, #3]
 8001808:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 800180a:	2b00      	cmp	r3, #0
 800180c:	da04      	bge.n	8001818 <main+0xe0>
 800180e:	4b56      	ldr	r3, [pc, #344]	@ (8001968 <main+0x230>)
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001816:	e001      	b.n	800181c <main+0xe4>
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <main+0x230>)
 800181a:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 800181c:	4a5b      	ldr	r2, [pc, #364]	@ (800198c <main+0x254>)
 800181e:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8001820:	4b51      	ldr	r3, [pc, #324]	@ (8001968 <main+0x230>)
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8001826:	2b00      	cmp	r3, #0
 8001828:	da04      	bge.n	8001834 <main+0xfc>
 800182a:	4b4f      	ldr	r3, [pc, #316]	@ (8001968 <main+0x230>)
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001832:	e001      	b.n	8001838 <main+0x100>
 8001834:	4b4c      	ldr	r3, [pc, #304]	@ (8001968 <main+0x230>)
 8001836:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 8001838:	4a55      	ldr	r2, [pc, #340]	@ (8001990 <main+0x258>)
 800183a:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 800183c:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <main+0x230>)
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001842:	2b00      	cmp	r3, #0
 8001844:	da04      	bge.n	8001850 <main+0x118>
 8001846:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <main+0x230>)
 8001848:	795b      	ldrb	r3, [r3, #5]
 800184a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800184e:	e001      	b.n	8001854 <main+0x11c>
 8001850:	4b45      	ldr	r3, [pc, #276]	@ (8001968 <main+0x230>)
 8001852:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 8001854:	4a4f      	ldr	r2, [pc, #316]	@ (8001994 <main+0x25c>)
 8001856:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 8001858:	4b43      	ldr	r3, [pc, #268]	@ (8001968 <main+0x230>)
 800185a:	799b      	ldrb	r3, [r3, #6]
 800185c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 800185e:	2b00      	cmp	r3, #0
 8001860:	da04      	bge.n	800186c <main+0x134>
 8001862:	4b41      	ldr	r3, [pc, #260]	@ (8001968 <main+0x230>)
 8001864:	799b      	ldrb	r3, [r3, #6]
 8001866:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800186a:	e001      	b.n	8001870 <main+0x138>
 800186c:	4b3e      	ldr	r3, [pc, #248]	@ (8001968 <main+0x230>)
 800186e:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 8001870:	4a49      	ldr	r2, [pc, #292]	@ (8001998 <main+0x260>)
 8001872:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 8001874:	4b3c      	ldr	r3, [pc, #240]	@ (8001968 <main+0x230>)
 8001876:	79db      	ldrb	r3, [r3, #7]
 8001878:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 800187a:	2b00      	cmp	r3, #0
 800187c:	da04      	bge.n	8001888 <main+0x150>
 800187e:	4b3a      	ldr	r3, [pc, #232]	@ (8001968 <main+0x230>)
 8001880:	79db      	ldrb	r3, [r3, #7]
 8001882:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001886:	e001      	b.n	800188c <main+0x154>
 8001888:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <main+0x230>)
 800188a:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 800188c:	4a43      	ldr	r2, [pc, #268]	@ (800199c <main+0x264>)
 800188e:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 8001890:	4b35      	ldr	r3, [pc, #212]	@ (8001968 <main+0x230>)
 8001892:	7a1b      	ldrb	r3, [r3, #8]
 8001894:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 8001896:	2b00      	cmp	r3, #0
 8001898:	da04      	bge.n	80018a4 <main+0x16c>
 800189a:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <main+0x230>)
 800189c:	7a1b      	ldrb	r3, [r3, #8]
 800189e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018a2:	e001      	b.n	80018a8 <main+0x170>
 80018a4:	4b30      	ldr	r3, [pc, #192]	@ (8001968 <main+0x230>)
 80018a6:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 80018a8:	4a3d      	ldr	r2, [pc, #244]	@ (80019a0 <main+0x268>)
 80018aa:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 80018ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <main+0x230>)
 80018ae:	7a5b      	ldrb	r3, [r3, #9]
 80018b0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da04      	bge.n	80018c0 <main+0x188>
 80018b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <main+0x230>)
 80018b8:	7a5b      	ldrb	r3, [r3, #9]
 80018ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018be:	e001      	b.n	80018c4 <main+0x18c>
 80018c0:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <main+0x230>)
 80018c2:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 80018c4:	4a37      	ldr	r2, [pc, #220]	@ (80019a4 <main+0x26c>)
 80018c6:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 80018c8:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <main+0x230>)
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da04      	bge.n	80018dc <main+0x1a4>
 80018d2:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <main+0x230>)
 80018d4:	7a9b      	ldrb	r3, [r3, #10]
 80018d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018da:	e001      	b.n	80018e0 <main+0x1a8>
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <main+0x230>)
 80018de:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 80018e0:	4a31      	ldr	r2, [pc, #196]	@ (80019a8 <main+0x270>)
 80018e2:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 80018e4:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <main+0x230>)
 80018e6:	7adb      	ldrb	r3, [r3, #11]
 80018e8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	da04      	bge.n	80018f8 <main+0x1c0>
 80018ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <main+0x230>)
 80018f0:	7adb      	ldrb	r3, [r3, #11]
 80018f2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018f6:	e001      	b.n	80018fc <main+0x1c4>
 80018f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <main+0x230>)
 80018fa:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 80018fc:	4a2b      	ldr	r2, [pc, #172]	@ (80019ac <main+0x274>)
 80018fe:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <main+0x230>)
 8001902:	7b1b      	ldrb	r3, [r3, #12]
 8001904:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8001906:	2b00      	cmp	r3, #0
 8001908:	da04      	bge.n	8001914 <main+0x1dc>
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <main+0x230>)
 800190c:	7b1b      	ldrb	r3, [r3, #12]
 800190e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001912:	e001      	b.n	8001918 <main+0x1e0>
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <main+0x230>)
 8001916:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 8001918:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <main+0x278>)
 800191a:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <main+0x230>)
 800191e:	7b5b      	ldrb	r3, [r3, #13]
 8001920:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001922:	2b00      	cmp	r3, #0
 8001924:	da04      	bge.n	8001930 <main+0x1f8>
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <main+0x230>)
 8001928:	7b5b      	ldrb	r3, [r3, #13]
 800192a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800192e:	e001      	b.n	8001934 <main+0x1fc>
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <main+0x230>)
 8001932:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 8001934:	4a1f      	ldr	r2, [pc, #124]	@ (80019b4 <main+0x27c>)
 8001936:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <main+0x230>)
 800193a:	7b9b      	ldrb	r3, [r3, #14]
 800193c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 800193e:	2b00      	cmp	r3, #0
 8001940:	da04      	bge.n	800194c <main+0x214>
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <main+0x230>)
 8001944:	7b9b      	ldrb	r3, [r3, #14]
 8001946:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800194a:	e001      	b.n	8001950 <main+0x218>
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <main+0x230>)
 800194e:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <main+0x280>)
 8001952:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <main+0x230>)
 8001956:	7bdb      	ldrb	r3, [r3, #15]
 8001958:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 800195a:	2b00      	cmp	r3, #0
 800195c:	da2e      	bge.n	80019bc <main+0x284>
 800195e:	4b02      	ldr	r3, [pc, #8]	@ (8001968 <main+0x230>)
 8001960:	7bdb      	ldrb	r3, [r3, #15]
 8001962:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001966:	e02b      	b.n	80019c0 <main+0x288>
 8001968:	200005cc 	.word	0x200005cc
 800196c:	200004b4 	.word	0x200004b4
 8001970:	20000274 	.word	0x20000274
 8001974:	200002bc 	.word	0x200002bc
 8001978:	20000304 	.word	0x20000304
 800197c:	20000220 	.word	0x20000220
 8001980:	200005dc 	.word	0x200005dc
 8001984:	200005e0 	.word	0x200005e0
 8001988:	200005e4 	.word	0x200005e4
 800198c:	200005e8 	.word	0x200005e8
 8001990:	200005ec 	.word	0x200005ec
 8001994:	200005f0 	.word	0x200005f0
 8001998:	200005f4 	.word	0x200005f4
 800199c:	200005f8 	.word	0x200005f8
 80019a0:	200005fc 	.word	0x200005fc
 80019a4:	20000600 	.word	0x20000600
 80019a8:	20000604 	.word	0x20000604
 80019ac:	20000608 	.word	0x20000608
 80019b0:	2000060c 	.word	0x2000060c
 80019b4:	20000614 	.word	0x20000614
 80019b8:	20000610 	.word	0x20000610
 80019bc:	4b91      	ldr	r3, [pc, #580]	@ (8001c04 <main+0x4cc>)
 80019be:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 80019c0:	4a91      	ldr	r2, [pc, #580]	@ (8001c08 <main+0x4d0>)
 80019c2:	6013      	str	r3, [r2, #0]
		//				lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1);
//		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly,
//				rx, ry, cro, squ, tri, cir);

		/* 3 encoders */
		uint16_t raw_counter1 = __HAL_TIM_GET_COUNTER(&htim1);
 80019c4:	4b91      	ldr	r3, [pc, #580]	@ (8001c0c <main+0x4d4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint32_t raw_counter2 = __HAL_TIM_GET_COUNTER(&htim2);
 80019cc:	4b90      	ldr	r3, [pc, #576]	@ (8001c10 <main+0x4d8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
		uint16_t raw_counter3 = __HAL_TIM_GET_COUNTER(&htim3);
 80019d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001c14 <main+0x4dc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	85fb      	strh	r3, [r7, #46]	@ 0x2e

		// Convert to signed values
		int16_t signed_counter1 =
 80019dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80019de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				(raw_counter1 < 32768) ?
						(int16_t) raw_counter1 :
						(int16_t) (raw_counter1 - 65536);
		int32_t signed_counter2 =
 80019e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
				(raw_counter2 < 2147483648) ?
						(int32_t) raw_counter2 :
						(int32_t) (raw_counter2 - 4294967296);
		int16_t signed_counter3 =
 80019e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80019e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
//				signed_counter2, signed_counter3);

		/* 3 wheel */
		uint16_t dutycycle;

		dutycycle = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

		//chassis

		//motors stop

		if (ly >= Buff2 && ly <= Buff1 && lx >= Buff2 && lx <= Buff1
 80019ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001c18 <main+0x4e0>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b8a      	ldr	r3, [pc, #552]	@ (8001c1c <main+0x4e4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	db35      	blt.n	8001a64 <main+0x32c>
 80019f8:	4b87      	ldr	r3, [pc, #540]	@ (8001c18 <main+0x4e0>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b88      	ldr	r3, [pc, #544]	@ (8001c20 <main+0x4e8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dc2f      	bgt.n	8001a64 <main+0x32c>
 8001a04:	4b87      	ldr	r3, [pc, #540]	@ (8001c24 <main+0x4ec>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <main+0x4e4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	db29      	blt.n	8001a64 <main+0x32c>
 8001a10:	4b84      	ldr	r3, [pc, #528]	@ (8001c24 <main+0x4ec>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b82      	ldr	r3, [pc, #520]	@ (8001c20 <main+0x4e8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dc23      	bgt.n	8001a64 <main+0x32c>
				&& rx >= Buff2 && rx <= Buff1) {
 8001a1c:	4b82      	ldr	r3, [pc, #520]	@ (8001c28 <main+0x4f0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b7e      	ldr	r3, [pc, #504]	@ (8001c1c <main+0x4e4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	db1d      	blt.n	8001a64 <main+0x32c>
 8001a28:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <main+0x4f0>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c20 <main+0x4e8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dc17      	bgt.n	8001a64 <main+0x32c>

			dutycycle = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM5->CCR1 = dutycycle;
 8001a38:	4a7c      	ldr	r2, [pc, #496]	@ (8001c2c <main+0x4f4>)
 8001a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a3c:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 8001a3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c30 <main+0x4f8>)
 8001a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a42:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001a44:	4a7b      	ldr	r2, [pc, #492]	@ (8001c34 <main+0x4fc>)
 8001a46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a48:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	487a      	ldr	r0, [pc, #488]	@ (8001c38 <main+0x500>)
 8001a4e:	f004 fabf 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001a52:	2100      	movs	r1, #0
 8001a54:	4879      	ldr	r0, [pc, #484]	@ (8001c3c <main+0x504>)
 8001a56:	f004 fabb 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4878      	ldr	r0, [pc, #480]	@ (8001c40 <main+0x508>)
 8001a5e:	f004 fab7 	bl	8005fd0 <HAL_TIM_PWM_Start>
 8001a62:	e200      	b.n	8001e66 <main+0x72e>

		}

		//	  	//forward

		else if (ly >= Buff1 && (lx <= BuffP && lx >= BuffN))
 8001a64:	4b6c      	ldr	r3, [pc, #432]	@ (8001c18 <main+0x4e0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b6d      	ldr	r3, [pc, #436]	@ (8001c20 <main+0x4e8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	db31      	blt.n	8001ad4 <main+0x39c>
 8001a70:	4b6c      	ldr	r3, [pc, #432]	@ (8001c24 <main+0x4ec>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b73      	ldr	r3, [pc, #460]	@ (8001c44 <main+0x50c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dc2b      	bgt.n	8001ad4 <main+0x39c>
 8001a7c:	4b69      	ldr	r3, [pc, #420]	@ (8001c24 <main+0x4ec>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b71      	ldr	r3, [pc, #452]	@ (8001c48 <main+0x510>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	db25      	blt.n	8001ad4 <main+0x39c>

		{

			dutycycle = map(ly, Buff1, 127, 0, fast);
 8001a88:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <main+0x4e0>)
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	4b64      	ldr	r3, [pc, #400]	@ (8001c20 <main+0x4e8>)
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	4b6e      	ldr	r3, [pc, #440]	@ (8001c4c <main+0x514>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	227f      	movs	r2, #127	@ 0x7f
 8001a9a:	f7ff fe31 	bl	8001700 <map>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM10->CCR1 = dutycycle;
 8001aa2:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <main+0x4f8>)
 8001aa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aa6:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001aa8:	4a62      	ldr	r2, [pc, #392]	@ (8001c34 <main+0x4fc>)
 8001aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aac:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4862      	ldr	r0, [pc, #392]	@ (8001c3c <main+0x504>)
 8001ab2:	f004 fa8d 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4861      	ldr	r0, [pc, #388]	@ (8001c40 <main+0x508>)
 8001aba:	f004 fa89 	bl	8005fd0 <HAL_TIM_PWM_Start>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4863      	ldr	r0, [pc, #396]	@ (8001c50 <main+0x518>)
 8001ac4:	f002 fb76 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2104      	movs	r1, #4
 8001acc:	4860      	ldr	r0, [pc, #384]	@ (8001c50 <main+0x518>)
 8001ace:	f002 fb71 	bl	80041b4 <HAL_GPIO_WritePin>
 8001ad2:	e1c8      	b.n	8001e66 <main+0x72e>

		}

		// backward

		else if (ly <= Buff2 && (lx <= BuffP && lx >= BuffN))
 8001ad4:	4b50      	ldr	r3, [pc, #320]	@ (8001c18 <main+0x4e0>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b50      	ldr	r3, [pc, #320]	@ (8001c1c <main+0x4e4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dc32      	bgt.n	8001b46 <main+0x40e>
 8001ae0:	4b50      	ldr	r3, [pc, #320]	@ (8001c24 <main+0x4ec>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b57      	ldr	r3, [pc, #348]	@ (8001c44 <main+0x50c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dc2c      	bgt.n	8001b46 <main+0x40e>
 8001aec:	4b4d      	ldr	r3, [pc, #308]	@ (8001c24 <main+0x4ec>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b55      	ldr	r3, [pc, #340]	@ (8001c48 <main+0x510>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	db26      	blt.n	8001b46 <main+0x40e>

		{

			dutycycle = map(ly, -128, Buff2, fast, 0);
 8001af8:	4b47      	ldr	r3, [pc, #284]	@ (8001c18 <main+0x4e0>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	4b47      	ldr	r3, [pc, #284]	@ (8001c1c <main+0x4e4>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b52      	ldr	r3, [pc, #328]	@ (8001c4c <main+0x514>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2100      	movs	r1, #0
 8001b06:	9100      	str	r1, [sp, #0]
 8001b08:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001b0c:	f7ff fdf8 	bl	8001700 <map>
 8001b10:	4603      	mov	r3, r0
 8001b12:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM10->CCR1 = dutycycle;
 8001b14:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <main+0x4f8>)
 8001b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b18:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001b1a:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <main+0x4fc>)
 8001b1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b1e:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001b20:	2100      	movs	r1, #0
 8001b22:	4846      	ldr	r0, [pc, #280]	@ (8001c3c <main+0x504>)
 8001b24:	f004 fa54 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4845      	ldr	r0, [pc, #276]	@ (8001c40 <main+0x508>)
 8001b2c:	f004 fa50 	bl	8005fd0 <HAL_TIM_PWM_Start>

//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	4846      	ldr	r0, [pc, #280]	@ (8001c50 <main+0x518>)
 8001b36:	f002 fb3d 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	4844      	ldr	r0, [pc, #272]	@ (8001c50 <main+0x518>)
 8001b40:	f002 fb38 	bl	80041b4 <HAL_GPIO_WritePin>
 8001b44:	e18f      	b.n	8001e66 <main+0x72e>

		}

		//	right

		else if (lx >= Buff1 && (ly <= BuffP && ly >= BuffN))
 8001b46:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <main+0x4ec>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b35      	ldr	r3, [pc, #212]	@ (8001c20 <main+0x4e8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	f2c0 8082 	blt.w	8001c58 <main+0x520>
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <main+0x4e0>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <main+0x50c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dc7b      	bgt.n	8001c58 <main+0x520>
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <main+0x4e0>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <main+0x510>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	db75      	blt.n	8001c58 <main+0x520>

		{

			dutycycle = map(lx, Buff1, 127, 0, fast);
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <main+0x4ec>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	4b2b      	ldr	r3, [pc, #172]	@ (8001c20 <main+0x4e8>)
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <main+0x514>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	227f      	movs	r2, #127	@ 0x7f
 8001b7e:	f7ff fdbf 	bl	8001700 <map>
 8001b82:	4603      	mov	r3, r0
 8001b84:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM5->CCR1 = dutycycle;
 8001b86:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <main+0x4f4>)
 8001b88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b8a:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = cos30 * dutycycle;
 8001b8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <main+0x51c>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <main+0x4f8>)
 8001ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba6:	ee17 2a90 	vmov	r2, s15
 8001baa:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM11->CCR1 = cos30 * dutycycle;
 8001bac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb6:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <main+0x51c>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <main+0x4fc>)
 8001bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc6:	ee17 2a90 	vmov	r2, s15
 8001bca:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	481a      	ldr	r0, [pc, #104]	@ (8001c38 <main+0x500>)
 8001bd0:	f004 f9fe 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4819      	ldr	r0, [pc, #100]	@ (8001c3c <main+0x504>)
 8001bd8:	f004 f9fa 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <main+0x508>)
 8001be0:	f004 f9f6 	bl	8005fd0 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2101      	movs	r1, #1
 8001be8:	4819      	ldr	r0, [pc, #100]	@ (8001c50 <main+0x518>)
 8001bea:	f002 fae3 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4817      	ldr	r0, [pc, #92]	@ (8001c50 <main+0x518>)
 8001bf4:	f002 fade 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	4814      	ldr	r0, [pc, #80]	@ (8001c50 <main+0x518>)
 8001bfe:	f002 fad9 	bl	80041b4 <HAL_GPIO_WritePin>
 8001c02:	e130      	b.n	8001e66 <main+0x72e>
 8001c04:	200005cc 	.word	0x200005cc
 8001c08:	20000618 	.word	0x20000618
 8001c0c:	20000274 	.word	0x20000274
 8001c10:	200002bc 	.word	0x200002bc
 8001c14:	20000304 	.word	0x20000304
 8001c18:	200005e0 	.word	0x200005e0
 8001c1c:	2000001c 	.word	0x2000001c
 8001c20:	20000018 	.word	0x20000018
 8001c24:	200005dc 	.word	0x200005dc
 8001c28:	200005e4 	.word	0x200005e4
 8001c2c:	40000c00 	.word	0x40000c00
 8001c30:	40014400 	.word	0x40014400
 8001c34:	40014800 	.word	0x40014800
 8001c38:	2000034c 	.word	0x2000034c
 8001c3c:	200003dc 	.word	0x200003dc
 8001c40:	20000424 	.word	0x20000424
 8001c44:	20000020 	.word	0x20000020
 8001c48:	20000024 	.word	0x20000024
 8001c4c:	20000014 	.word	0x20000014
 8001c50:	40020800 	.word	0x40020800
 8001c54:	20000028 	.word	0x20000028

		}

		// left

		else if (lx <= Buff2 && (ly <= BuffP && ly >= BuffN))
 8001c58:	4b50      	ldr	r3, [pc, #320]	@ (8001d9c <main+0x664>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b50      	ldr	r3, [pc, #320]	@ (8001da0 <main+0x668>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dc58      	bgt.n	8001d16 <main+0x5de>
 8001c64:	4b4f      	ldr	r3, [pc, #316]	@ (8001da4 <main+0x66c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b4f      	ldr	r3, [pc, #316]	@ (8001da8 <main+0x670>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dc52      	bgt.n	8001d16 <main+0x5de>
 8001c70:	4b4c      	ldr	r3, [pc, #304]	@ (8001da4 <main+0x66c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b4d      	ldr	r3, [pc, #308]	@ (8001dac <main+0x674>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	db4c      	blt.n	8001d16 <main+0x5de>

		{

			dutycycle = map(lx, -128, Buff2, fast, 0);
 8001c7c:	4b47      	ldr	r3, [pc, #284]	@ (8001d9c <main+0x664>)
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <main+0x668>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b4a      	ldr	r3, [pc, #296]	@ (8001db0 <main+0x678>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	9100      	str	r1, [sp, #0]
 8001c8c:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001c90:	f7ff fd36 	bl	8001700 <map>
 8001c94:	4603      	mov	r3, r0
 8001c96:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM5->CCR1 = dutycycle;
 8001c98:	4a46      	ldr	r2, [pc, #280]	@ (8001db4 <main+0x67c>)
 8001c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c9c:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = cos30 * dutycycle;
 8001c9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca8:	4b43      	ldr	r3, [pc, #268]	@ (8001db8 <main+0x680>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <main+0x684>)
 8001cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb8:	ee17 2a90 	vmov	r2, s15
 8001cbc:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM11->CCR1 = cos30 * dutycycle;
 8001cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <main+0x680>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <main+0x688>)
 8001cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd8:	ee17 2a90 	vmov	r2, s15
 8001cdc:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4838      	ldr	r0, [pc, #224]	@ (8001dc4 <main+0x68c>)
 8001ce2:	f004 f975 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4837      	ldr	r0, [pc, #220]	@ (8001dc8 <main+0x690>)
 8001cea:	f004 f971 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4836      	ldr	r0, [pc, #216]	@ (8001dcc <main+0x694>)
 8001cf2:	f004 f96d 	bl	8005fd0 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4835      	ldr	r0, [pc, #212]	@ (8001dd0 <main+0x698>)
 8001cfc:	f002 fa5a 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2102      	movs	r1, #2
 8001d04:	4832      	ldr	r0, [pc, #200]	@ (8001dd0 <main+0x698>)
 8001d06:	f002 fa55 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4830      	ldr	r0, [pc, #192]	@ (8001dd0 <main+0x698>)
 8001d10:	f002 fa50 	bl	80041b4 <HAL_GPIO_WritePin>
 8001d14:	e0a7      	b.n	8001e66 <main+0x72e>

		}

		//clockwise

		else if (rx >= Buff1 && (ry <= BuffP && ry >= BuffN)) {
 8001d16:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <main+0x69c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd8 <main+0x6a0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	db5e      	blt.n	8001de0 <main+0x6a8>
 8001d22:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <main+0x6a4>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <main+0x670>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dc58      	bgt.n	8001de0 <main+0x6a8>
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ddc <main+0x6a4>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <main+0x674>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	db52      	blt.n	8001de0 <main+0x6a8>

			dutycycle = map(rx, Buff1, 127, 0, 100);
 8001d3a:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <main+0x69c>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <main+0x6a0>)
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	2364      	movs	r3, #100	@ 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	227f      	movs	r2, #127	@ 0x7f
 8001d4a:	f7ff fcd9 	bl	8001700 <map>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM5->CCR1 = dutycycle;
 8001d52:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <main+0x67c>)
 8001d54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d56:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <main+0x684>)
 8001d5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d5c:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001d5e:	4a18      	ldr	r2, [pc, #96]	@ (8001dc0 <main+0x688>)
 8001d60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d62:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001d64:	2100      	movs	r1, #0
 8001d66:	4817      	ldr	r0, [pc, #92]	@ (8001dc4 <main+0x68c>)
 8001d68:	f004 f932 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4816      	ldr	r0, [pc, #88]	@ (8001dc8 <main+0x690>)
 8001d70:	f004 f92e 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001d74:	2100      	movs	r1, #0
 8001d76:	4815      	ldr	r0, [pc, #84]	@ (8001dcc <main+0x694>)
 8001d78:	f004 f92a 	bl	8005fd0 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <main+0x698>)
 8001d82:	f002 fa17 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4811      	ldr	r0, [pc, #68]	@ (8001dd0 <main+0x698>)
 8001d8c:	f002 fa12 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2104      	movs	r1, #4
 8001d94:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <main+0x698>)
 8001d96:	f002 fa0d 	bl	80041b4 <HAL_GPIO_WritePin>
 8001d9a:	e064      	b.n	8001e66 <main+0x72e>
 8001d9c:	200005dc 	.word	0x200005dc
 8001da0:	2000001c 	.word	0x2000001c
 8001da4:	200005e0 	.word	0x200005e0
 8001da8:	20000020 	.word	0x20000020
 8001dac:	20000024 	.word	0x20000024
 8001db0:	20000014 	.word	0x20000014
 8001db4:	40000c00 	.word	0x40000c00
 8001db8:	20000028 	.word	0x20000028
 8001dbc:	40014400 	.word	0x40014400
 8001dc0:	40014800 	.word	0x40014800
 8001dc4:	2000034c 	.word	0x2000034c
 8001dc8:	200003dc 	.word	0x200003dc
 8001dcc:	20000424 	.word	0x20000424
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	200005e4 	.word	0x200005e4
 8001dd8:	20000018 	.word	0x20000018
 8001ddc:	200005e8 	.word	0x200005e8

		}

		// anticlockwise

		else if (rx <= Buff2 && (ry <= BuffP && ry >= BuffN)) {
 8001de0:	4b50      	ldr	r3, [pc, #320]	@ (8001f24 <main+0x7ec>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <main+0x7f0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dc3c      	bgt.n	8001e66 <main+0x72e>
 8001dec:	4b4f      	ldr	r3, [pc, #316]	@ (8001f2c <main+0x7f4>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f30 <main+0x7f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dc36      	bgt.n	8001e66 <main+0x72e>
 8001df8:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <main+0x7f4>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <main+0x7fc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	db30      	blt.n	8001e66 <main+0x72e>

			dutycycle = map(rx, -128, Buff2, 100, 0);
 8001e04:	4b47      	ldr	r3, [pc, #284]	@ (8001f24 <main+0x7ec>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <main+0x7f0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2364      	movs	r3, #100	@ 0x64
 8001e12:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001e16:	f7ff fc73 	bl	8001700 <map>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	84bb      	strh	r3, [r7, #36]	@ 0x24

			TIM5->CCR1 = dutycycle;
 8001e1e:	4a46      	ldr	r2, [pc, #280]	@ (8001f38 <main+0x800>)
 8001e20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e22:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM10->CCR1 = dutycycle;
 8001e24:	4a45      	ldr	r2, [pc, #276]	@ (8001f3c <main+0x804>)
 8001e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e28:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM11->CCR1 = dutycycle;
 8001e2a:	4a45      	ldr	r2, [pc, #276]	@ (8001f40 <main+0x808>)
 8001e2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e2e:	6353      	str	r3, [r2, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001e30:	2100      	movs	r1, #0
 8001e32:	4844      	ldr	r0, [pc, #272]	@ (8001f44 <main+0x80c>)
 8001e34:	f004 f8cc 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4843      	ldr	r0, [pc, #268]	@ (8001f48 <main+0x810>)
 8001e3c:	f004 f8c8 	bl	8005fd0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001e40:	2100      	movs	r1, #0
 8001e42:	4842      	ldr	r0, [pc, #264]	@ (8001f4c <main+0x814>)
 8001e44:	f004 f8c4 	bl	8005fd0 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4840      	ldr	r0, [pc, #256]	@ (8001f50 <main+0x818>)
 8001e4e:	f002 f9b1 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	2102      	movs	r1, #2
 8001e56:	483e      	ldr	r0, [pc, #248]	@ (8001f50 <main+0x818>)
 8001e58:	f002 f9ac 	bl	80041b4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2104      	movs	r1, #4
 8001e60:	483b      	ldr	r0, [pc, #236]	@ (8001f50 <main+0x818>)
 8001e62:	f002 f9a7 	bl	80041b4 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);

		}

		/* Stepper */
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 8001e66:	4b3b      	ldr	r3, [pc, #236]	@ (8001f54 <main+0x81c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	2108      	movs	r1, #8
 8001e78:	4835      	ldr	r0, [pc, #212]	@ (8001f50 <main+0x818>)
 8001e7a:	f002 f99b 	bl	80041b4 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 8001e7e:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <main+0x820>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d109      	bne.n	8001e9a <main+0x762>
 8001e86:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <main+0x824>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <main+0x762>
			direction1 = 1;  // Set to Anti-clockwise
 8001e8e:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <main+0x81c>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <main+0x828>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8001e9a:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <main+0x82c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d109      	bne.n	8001eb6 <main+0x77e>
 8001ea2:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <main+0x830>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <main+0x77e>
			direction1 = 0;  // Set to Clockwise
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001f54 <main+0x81c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <main+0x828>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
		}
		if (cir == 1 && !prev_cir) {
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <main+0x834>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d106      	bne.n	8001ecc <main+0x794>
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <main+0x838>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <main+0x794>
			stepper_running1 = 0;
 8001ec6:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <main+0x828>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
		}
		prev_ll1 = ll1;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <main+0x820>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a22      	ldr	r2, [pc, #136]	@ (8001f5c <main+0x824>)
 8001ed2:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 8001ed4:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <main+0x82c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	@ (8001f68 <main+0x830>)
 8001eda:	6013      	str	r3, [r2, #0]
		prev_cir = cir;
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <main+0x834>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <main+0x838>)
 8001ee2:	6013      	str	r3, [r2, #0]
		if (stepper_running1
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <main+0x828>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d051      	beq.n	8001f90 <main+0x858>
				&& (HAL_GetTick() - last_step_time1) >= step_delay1) {
 8001eec:	f001 fa8a 	bl	8003404 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <main+0x83c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <main+0x840>)
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d347      	bcc.n	8001f90 <main+0x858>
			last_step_time1 = HAL_GetTick(); // Update last step time
 8001f00:	f001 fa80 	bl	8003404 <HAL_GetTick>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <main+0x83c>)
 8001f08:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <main+0x844>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d136      	bne.n	8001f80 <main+0x848>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 8001f12:	2201      	movs	r2, #1
 8001f14:	2120      	movs	r1, #32
 8001f16:	480e      	ldr	r0, [pc, #56]	@ (8001f50 <main+0x818>)
 8001f18:	f002 f94c 	bl	80041b4 <HAL_GPIO_WritePin>
				step_state1 = 1;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <main+0x844>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e035      	b.n	8001f90 <main+0x858>
 8001f24:	200005e4 	.word	0x200005e4
 8001f28:	2000001c 	.word	0x2000001c
 8001f2c:	200005e8 	.word	0x200005e8
 8001f30:	20000020 	.word	0x20000020
 8001f34:	20000024 	.word	0x20000024
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40014800 	.word	0x40014800
 8001f44:	2000034c 	.word	0x2000034c
 8001f48:	200003dc 	.word	0x200003dc
 8001f4c:	20000424 	.word	0x20000424
 8001f50:	40020800 	.word	0x40020800
 8001f54:	2000000c 	.word	0x2000000c
 8001f58:	2000060c 	.word	0x2000060c
 8001f5c:	200005c0 	.word	0x200005c0
 8001f60:	200005ac 	.word	0x200005ac
 8001f64:	20000610 	.word	0x20000610
 8001f68:	200005c4 	.word	0x200005c4
 8001f6c:	200005f8 	.word	0x200005f8
 8001f70:	200005b4 	.word	0x200005b4
 8001f74:	200005a4 	.word	0x200005a4
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	200005a8 	.word	0x200005a8
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 8001f80:	2200      	movs	r2, #0
 8001f82:	2120      	movs	r1, #32
 8001f84:	487a      	ldr	r0, [pc, #488]	@ (8002170 <main+0xa38>)
 8001f86:	f002 f915 	bl	80041b4 <HAL_GPIO_WritePin>
				step_state1 = 0;
 8001f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8002174 <main+0xa3c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
//			printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\r\n",
//					imu_data.euler_h, imu_data.euler_r, imu_data.euler_p);
////			printf("\n\n");
//		}
//		HAL_Delay(100); // Read at 10Hz
		bno055_vector_t v = bno055_getVectorEuler();
 8001f90:	f7ff f9f4 	bl	800137c <bno055_getVectorEuler>
 8001f94:	eeb0 4a40 	vmov.f32	s8, s0
 8001f98:	eef0 4a60 	vmov.f32	s9, s1
 8001f9c:	eeb0 5a41 	vmov.f32	s10, s2
 8001fa0:	eef0 5a61 	vmov.f32	s11, s3
 8001fa4:	eeb0 6a42 	vmov.f32	s12, s4
 8001fa8:	eef0 6a62 	vmov.f32	s13, s5
 8001fac:	eeb0 7a43 	vmov.f32	s14, s6
 8001fb0:	eef0 7a63 	vmov.f32	s15, s7
 8001fb4:	ed87 4b00 	vstr	d4, [r7]
 8001fb8:	ed87 5b02 	vstr	d5, [r7, #8]
 8001fbc:	ed87 6b04 	vstr	d6, [r7, #16]
 8001fc0:	ed87 7b06 	vstr	d7, [r7, #24]
//		printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
		v = bno055_getVectorQuaternion();
 8001fc4:	f7ff fa1d 	bl	8001402 <bno055_getVectorQuaternion>
 8001fc8:	eeb0 4a40 	vmov.f32	s8, s0
 8001fcc:	eef0 4a60 	vmov.f32	s9, s1
 8001fd0:	eeb0 5a41 	vmov.f32	s10, s2
 8001fd4:	eef0 5a61 	vmov.f32	s11, s3
 8001fd8:	eeb0 6a42 	vmov.f32	s12, s4
 8001fdc:	eef0 6a62 	vmov.f32	s13, s5
 8001fe0:	eeb0 7a43 	vmov.f32	s14, s6
 8001fe4:	eef0 7a63 	vmov.f32	s15, s7
 8001fe8:	ed87 4b00 	vstr	d4, [r7]
 8001fec:	ed87 5b02 	vstr	d5, [r7, #8]
 8001ff0:	ed87 6b04 	vstr	d6, [r7, #16]
 8001ff4:	ed87 7b06 	vstr	d7, [r7, #24]
//		printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
		yaw = -(atan2(2.0 * (v.w * v.z + v.x * v.y), 1.0 - 2.0 * (v.y * v.y + v.z * v.z))) * (180.0 / pi);
 8001ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002000:	f7fe fb1a 	bl	8000638 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4690      	mov	r8, r2
 800200a:	4699      	mov	r9, r3
 800200c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002010:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002014:	f7fe fb10 	bl	8000638 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4640      	mov	r0, r8
 800201e:	4649      	mov	r1, r9
 8002020:	f7fe f954 	bl	80002cc <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	f7fe f94c 	bl	80002cc <__adddf3>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b18 	vmov	d8, r2, r3
 800203c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002044:	f7fe faf8 	bl	8000638 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4690      	mov	r8, r2
 800204e:	4699      	mov	r9, r3
 8002050:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002058:	f7fe faee 	bl	8000638 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4640      	mov	r0, r8
 8002062:	4649      	mov	r1, r9
 8002064:	f7fe f932 	bl	80002cc <__adddf3>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	f7fe f92a 	bl	80002cc <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	f04f 0000 	mov.w	r0, #0
 8002080:	493d      	ldr	r1, [pc, #244]	@ (8002178 <main+0xa40>)
 8002082:	f7fe f921 	bl	80002c8 <__aeabi_dsub>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ec43 2b17 	vmov	d7, r2, r3
 800208e:	eeb0 1a47 	vmov.f32	s2, s14
 8002092:	eef0 1a67 	vmov.f32	s3, s15
 8002096:	eeb0 0a48 	vmov.f32	s0, s16
 800209a:	eef0 0a68 	vmov.f32	s1, s17
 800209e:	f00a fc75 	bl	800c98c <atan2>
 80020a2:	ec53 2b10 	vmov	r2, r3, d0
 80020a6:	4614      	mov	r4, r2
 80020a8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80020ac:	a32e      	add	r3, pc, #184	@ (adr r3, 8002168 <main+0xa30>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe fabf 	bl	8000638 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fdb1 	bl	8000c28 <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4a2c      	ldr	r2, [pc, #176]	@ (800217c <main+0xa44>)
 80020ca:	6013      	str	r3, [r2, #0]
		printf("Yaw: %.2f\r\n", yaw);
 80020cc:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <main+0xa44>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa59 	bl	8000588 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4829      	ldr	r0, [pc, #164]	@ (8002180 <main+0xa48>)
 80020dc:	f006 ffac 	bl	8009038 <iprintf>

		/* Dribbling */
		if (tri == 1 && !prev_tri) {
 80020e0:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <main+0xa4c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <main+0x9be>
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <main+0xa50>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <main+0x9be>
			ebike_running = 1;
 80020f0:	4b26      	ldr	r3, [pc, #152]	@ (800218c <main+0xa54>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
		}
		if (cro == 1 && !prev_cro) {  // cro button pressed
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <main+0xa58>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10c      	bne.n	8002118 <main+0x9e0>
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <main+0xa5c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <main+0x9e0>
			printf("cross pressed");
 8002106:	4824      	ldr	r0, [pc, #144]	@ (8002198 <main+0xa60>)
 8002108:	f006 ff96 	bl	8009038 <iprintf>
			direction1 = 0;  // Set to Clockwise
 800210c:	4b23      	ldr	r3, [pc, #140]	@ (800219c <main+0xa64>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
			ebike_running = 0;
 8002112:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <main+0xa54>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
		}
		prev_tri = tri;
 8002118:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <main+0xa4c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <main+0xa50>)
 800211e:	6013      	str	r3, [r2, #0]
		prev_cro = cro;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <main+0xa58>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <main+0xa5c>)
 8002126:	6013      	str	r3, [r2, #0]
		if (ebike_running) {
 8002128:	4b18      	ldr	r3, [pc, #96]	@ (800218c <main+0xa54>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00f      	beq.n	8002150 <main+0xa18>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002136:	480e      	ldr	r0, [pc, #56]	@ (8002170 <main+0xa38>)
 8002138:	f002 f83c 	bl	80041b4 <HAL_GPIO_WritePin>
			TIM13->CCR1 = (2000 * 999) / 3500;  //rpm 2000 test
 800213c:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <main+0xa68>)
 800213e:	f240 223a 	movw	r2, #570	@ 0x23a
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002144:	2100      	movs	r1, #0
 8002146:	4817      	ldr	r0, [pc, #92]	@ (80021a4 <main+0xa6c>)
 8002148:	f003 ff42 	bl	8005fd0 <HAL_TIM_PWM_Start>
 800214c:	f7ff bb30 	b.w	80017b0 <main+0x78>
		} else {
			//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
			TIM13->CCR1 = (0 * 999) / 3500;
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <main+0xa68>)
 8002152:	2200      	movs	r2, #0
 8002154:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002156:	2100      	movs	r1, #0
 8002158:	4812      	ldr	r0, [pc, #72]	@ (80021a4 <main+0xa6c>)
 800215a:	f003 ff39 	bl	8005fd0 <HAL_TIM_PWM_Start>
	while (1) {
 800215e:	f7ff bb27 	b.w	80017b0 <main+0x78>
 8002162:	bf00      	nop
 8002164:	f3af 8000 	nop.w
 8002168:	1a674644 	.word	0x1a674644
 800216c:	404ca5dc 	.word	0x404ca5dc
 8002170:	40020800 	.word	0x40020800
 8002174:	200005a8 	.word	0x200005a8
 8002178:	3ff00000 	.word	0x3ff00000
 800217c:	200005c8 	.word	0x200005c8
 8002180:	0800d0b4 	.word	0x0800d0b4
 8002184:	200005f4 	.word	0x200005f4
 8002188:	200005b8 	.word	0x200005b8
 800218c:	200005b0 	.word	0x200005b0
 8002190:	200005ec 	.word	0x200005ec
 8002194:	200005bc 	.word	0x200005bc
 8002198:	0800d0c0 	.word	0x0800d0c0
 800219c:	2000000c 	.word	0x2000000c
 80021a0:	40001c00 	.word	0x40001c00
 80021a4:	2000046c 	.word	0x2000046c

080021a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b094      	sub	sp, #80	@ 0x50
 80021ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	2234      	movs	r2, #52	@ 0x34
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f007 f8a6 	bl	8009308 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <SystemClock_Config+0xdc>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002284 <SystemClock_Config+0xdc>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021da:	6413      	str	r3, [r2, #64]	@ 0x40
 80021dc:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <SystemClock_Config+0xdc>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e8:	2300      	movs	r3, #0
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <SystemClock_Config+0xe0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	@ (8002288 <SystemClock_Config+0xe0>)
 80021f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <SystemClock_Config+0xe0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002204:	2302      	movs	r3, #2
 8002206:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002208:	2301      	movs	r3, #1
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800220c:	2310      	movs	r3, #16
 800220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002210:	2302      	movs	r3, #2
 8002212:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002214:	2300      	movs	r3, #0
 8002216:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002218:	2308      	movs	r3, #8
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 800221c:	23b4      	movs	r3, #180	@ 0xb4
 800221e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002220:	2302      	movs	r3, #2
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002224:	2302      	movs	r3, #2
 8002226:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002228:	2302      	movs	r3, #2
 800222a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fb87 	bl	8005944 <HAL_RCC_OscConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <SystemClock_Config+0x98>
		Error_Handler();
 800223c:	f000 fc28 	bl	8002a90 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002240:	f002 ffe6 	bl	8005210 <HAL_PWREx_EnableOverDrive>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xa6>
		Error_Handler();
 800224a:	f000 fc21 	bl	8002a90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800224e:	230f      	movs	r3, #15
 8002250:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002252:	2302      	movs	r3, #2
 8002254:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800225a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800225e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002264:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002266:	f107 0308 	add.w	r3, r7, #8
 800226a:	2105      	movs	r1, #5
 800226c:	4618      	mov	r0, r3
 800226e:	f003 f81f 	bl	80052b0 <HAL_RCC_ClockConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0xd4>
		Error_Handler();
 8002278:	f000 fc0a 	bl	8002a90 <Error_Handler>
	}
}
 800227c:	bf00      	nop
 800227e:	3750      	adds	r7, #80	@ 0x50
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000

0800228c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <MX_I2C1_Init+0x50>)
 8002292:	4a13      	ldr	r2, [pc, #76]	@ (80022e0 <MX_I2C1_Init+0x54>)
 8002294:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <MX_I2C1_Init+0x50>)
 8002298:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <MX_I2C1_Init+0x58>)
 800229a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800229c:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <MX_I2C1_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <MX_I2C1_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <MX_I2C1_Init+0x50>)
 80022aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <MX_I2C1_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022bc:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <MX_I2C1_Init+0x50>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <MX_I2C1_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_I2C1_Init+0x50>)
 80022ca:	f001 ff8d 	bl	80041e8 <HAL_I2C_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80022d4:	f000 fbdc 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000220 	.word	0x20000220
 80022e0:	40005400 	.word	0x40005400
 80022e4:	00061a80 	.word	0x00061a80

080022e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	@ 0x30
 80022ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	2224      	movs	r2, #36	@ 0x24
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f007 f806 	bl	8009308 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002304:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <MX_TIM1_Init+0xa8>)
 8002306:	4a23      	ldr	r2, [pc, #140]	@ (8002394 <MX_TIM1_Init+0xac>)
 8002308:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800230a:	4b21      	ldr	r3, [pc, #132]	@ (8002390 <MX_TIM1_Init+0xa8>)
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002310:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <MX_TIM1_Init+0xa8>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002316:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <MX_TIM1_Init+0xa8>)
 8002318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800231c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231e:	4b1c      	ldr	r3, [pc, #112]	@ (8002390 <MX_TIM1_Init+0xa8>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002324:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <MX_TIM1_Init+0xa8>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <MX_TIM1_Init+0xa8>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002330:	2301      	movs	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002338:	2301      	movs	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002348:	2301      	movs	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4619      	mov	r1, r3
 800235a:	480d      	ldr	r0, [pc, #52]	@ (8002390 <MX_TIM1_Init+0xa8>)
 800235c:	f003 ff00 	bl	8006160 <HAL_TIM_Encoder_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM1_Init+0x82>
		Error_Handler();
 8002366:	f000 fb93 	bl	8002a90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4806      	ldr	r0, [pc, #24]	@ (8002390 <MX_TIM1_Init+0xa8>)
 8002378:	f004 fccc 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002382:	f000 fb85 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	3730      	adds	r7, #48	@ 0x30
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000274 	.word	0x20000274
 8002394:	40010000 	.word	0x40010000

08002398 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	@ 0x30
 800239c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	2224      	movs	r2, #36	@ 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 ffae 	bl	8009308 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80023b4:	4b21      	ldr	r3, [pc, #132]	@ (800243c <MX_TIM2_Init+0xa4>)
 80023b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80023bc:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <MX_TIM2_Init+0xa4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <MX_TIM2_Init+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80023c8:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <MX_TIM2_Init+0xa4>)
 80023ca:	f04f 32ff 	mov.w	r2, #4294967295
 80023ce:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <MX_TIM2_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <MX_TIM2_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023dc:	2301      	movs	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e4:	2301      	movs	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f4:	2301      	movs	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	4619      	mov	r1, r3
 8002406:	480d      	ldr	r0, [pc, #52]	@ (800243c <MX_TIM2_Init+0xa4>)
 8002408:	f003 feaa 	bl	8006160 <HAL_TIM_Encoder_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002412:	f000 fb3d 	bl	8002a90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <MX_TIM2_Init+0xa4>)
 8002424:	f004 fc76 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800242e:	f000 fb2f 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3730      	adds	r7, #48	@ 0x30
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200002bc 	.word	0x200002bc

08002440 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	@ 0x30
 8002444:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	2224      	movs	r2, #36	@ 0x24
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f006 ff5a 	bl	8009308 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 800245e:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <MX_TIM3_Init+0xa4>)
 8002460:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002462:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 8002464:	2200      	movs	r2, #0
 8002466:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 8002470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002474:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002482:	2301      	movs	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800248a:	2301      	movs	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800249a:	2301      	movs	r3, #1
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800249e:	2300      	movs	r3, #0
 80024a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4619      	mov	r1, r3
 80024ac:	480c      	ldr	r0, [pc, #48]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 80024ae:	f003 fe57 	bl	8006160 <HAL_TIM_Encoder_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM3_Init+0x7c>
		Error_Handler();
 80024b8:	f000 faea 	bl	8002a90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <MX_TIM3_Init+0xa0>)
 80024ca:	f004 fc23 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80024d4:	f000 fadc 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	3730      	adds	r7, #48	@ 0x30
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000304 	.word	0x20000304
 80024e4:	40000400 	.word	0x40000400

080024e8 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	@ 0x38
 80024ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80024ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002518:	4b2c      	ldr	r3, [pc, #176]	@ (80025cc <MX_TIM5_Init+0xe4>)
 800251a:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <MX_TIM5_Init+0xe8>)
 800251c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 179;
 800251e:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <MX_TIM5_Init+0xe4>)
 8002520:	22b3      	movs	r2, #179	@ 0xb3
 8002522:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <MX_TIM5_Init+0xe4>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 999;
 800252a:	4b28      	ldr	r3, [pc, #160]	@ (80025cc <MX_TIM5_Init+0xe4>)
 800252c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002530:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002532:	4b26      	ldr	r3, [pc, #152]	@ (80025cc <MX_TIM5_Init+0xe4>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <MX_TIM5_Init+0xe4>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800253e:	4823      	ldr	r0, [pc, #140]	@ (80025cc <MX_TIM5_Init+0xe4>)
 8002540:	f003 fc9e 	bl	8005e80 <HAL_TIM_Base_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM5_Init+0x66>
		Error_Handler();
 800254a:	f000 faa1 	bl	8002a90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8002554:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002558:	4619      	mov	r1, r3
 800255a:	481c      	ldr	r0, [pc, #112]	@ (80025cc <MX_TIM5_Init+0xe4>)
 800255c:	f003 fff6 	bl	800654c <HAL_TIM_ConfigClockSource>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM5_Init+0x82>
		Error_Handler();
 8002566:	f000 fa93 	bl	8002a90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 800256a:	4818      	ldr	r0, [pc, #96]	@ (80025cc <MX_TIM5_Init+0xe4>)
 800256c:	f003 fcd7 	bl	8005f1e <HAL_TIM_PWM_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM5_Init+0x92>
		Error_Handler();
 8002576:	f000 fa8b 	bl	8002a90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002582:	f107 0320 	add.w	r3, r7, #32
 8002586:	4619      	mov	r1, r3
 8002588:	4810      	ldr	r0, [pc, #64]	@ (80025cc <MX_TIM5_Init+0xe4>)
 800258a:	f004 fbc3 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM5_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002594:	f000 fa7c 	bl	8002a90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002598:	2360      	movs	r3, #96	@ 0x60
 800259a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	2200      	movs	r2, #0
 80025ac:	4619      	mov	r1, r3
 80025ae:	4807      	ldr	r0, [pc, #28]	@ (80025cc <MX_TIM5_Init+0xe4>)
 80025b0:	f003 ff0a 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM5_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80025ba:	f000 fa69 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80025be:	4803      	ldr	r0, [pc, #12]	@ (80025cc <MX_TIM5_Init+0xe4>)
 80025c0:	f000 fc26 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 80025c4:	bf00      	nop
 80025c6:	3738      	adds	r7, #56	@ 0x38
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000034c 	.word	0x2000034c
 80025d0:	40000c00 	.word	0x40000c00

080025d4 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <MX_TIM8_Init+0x98>)
 80025f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <MX_TIM8_Init+0x9c>)
 80025f4:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 180 - 1;
 80025f6:	4b1d      	ldr	r3, [pc, #116]	@ (800266c <MX_TIM8_Init+0x98>)
 80025f8:	22b3      	movs	r2, #179	@ 0xb3
 80025fa:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <MX_TIM8_Init+0x98>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1000 - 1;
 8002602:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <MX_TIM8_Init+0x98>)
 8002604:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002608:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <MX_TIM8_Init+0x98>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <MX_TIM8_Init+0x98>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <MX_TIM8_Init+0x98>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800261c:	4813      	ldr	r0, [pc, #76]	@ (800266c <MX_TIM8_Init+0x98>)
 800261e:	f003 fc2f 	bl	8005e80 <HAL_TIM_Base_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM8_Init+0x58>
		Error_Handler();
 8002628:	f000 fa32 	bl	8002a90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002630:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	4619      	mov	r1, r3
 8002638:	480c      	ldr	r0, [pc, #48]	@ (800266c <MX_TIM8_Init+0x98>)
 800263a:	f003 ff87 	bl	800654c <HAL_TIM_ConfigClockSource>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM8_Init+0x74>
		Error_Handler();
 8002644:	f000 fa24 	bl	8002a90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8002650:	463b      	mov	r3, r7
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	@ (800266c <MX_TIM8_Init+0x98>)
 8002656:	f004 fb5d 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM8_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002660:	f000 fa16 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000394 	.word	0x20000394
 8002670:	40010400 	.word	0x40010400

08002674 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
 8002688:	615a      	str	r2, [r3, #20]
 800268a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 800268c:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <MX_TIM10_Init+0x94>)
 800268e:	4a1f      	ldr	r2, [pc, #124]	@ (800270c <MX_TIM10_Init+0x98>)
 8002690:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 179;
 8002692:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <MX_TIM10_Init+0x94>)
 8002694:	22b3      	movs	r2, #179	@ 0xb3
 8002696:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <MX_TIM10_Init+0x94>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 999;
 800269e:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <MX_TIM10_Init+0x94>)
 80026a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026a4:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <MX_TIM10_Init+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <MX_TIM10_Init+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80026b2:	4815      	ldr	r0, [pc, #84]	@ (8002708 <MX_TIM10_Init+0x94>)
 80026b4:	f003 fbe4 	bl	8005e80 <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM10_Init+0x4e>
		Error_Handler();
 80026be:	f000 f9e7 	bl	8002a90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 80026c2:	4811      	ldr	r0, [pc, #68]	@ (8002708 <MX_TIM10_Init+0x94>)
 80026c4:	f003 fc2b 	bl	8005f1e <HAL_TIM_PWM_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM10_Init+0x5e>
		Error_Handler();
 80026ce:	f000 f9df 	bl	8002a90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d2:	2360      	movs	r3, #96	@ 0x60
 80026d4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	4619      	mov	r1, r3
 80026e8:	4807      	ldr	r0, [pc, #28]	@ (8002708 <MX_TIM10_Init+0x94>)
 80026ea:	f003 fe6d 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80026f4:	f000 f9cc 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80026f8:	4803      	ldr	r0, [pc, #12]	@ (8002708 <MX_TIM10_Init+0x94>)
 80026fa:	f000 fb89 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 80026fe:	bf00      	nop
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200003dc 	.word	0x200003dc
 800270c:	40014400 	.word	0x40014400

08002710 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	615a      	str	r2, [r3, #20]
 8002726:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <MX_TIM11_Init+0x94>)
 800272a:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <MX_TIM11_Init+0x98>)
 800272c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 179;
 800272e:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <MX_TIM11_Init+0x94>)
 8002730:	22b3      	movs	r2, #179	@ 0xb3
 8002732:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <MX_TIM11_Init+0x94>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 999;
 800273a:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <MX_TIM11_Init+0x94>)
 800273c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002740:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <MX_TIM11_Init+0x94>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002748:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <MX_TIM11_Init+0x94>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800274e:	4815      	ldr	r0, [pc, #84]	@ (80027a4 <MX_TIM11_Init+0x94>)
 8002750:	f003 fb96 	bl	8005e80 <HAL_TIM_Base_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM11_Init+0x4e>
		Error_Handler();
 800275a:	f000 f999 	bl	8002a90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 800275e:	4811      	ldr	r0, [pc, #68]	@ (80027a4 <MX_TIM11_Init+0x94>)
 8002760:	f003 fbdd 	bl	8005f1e <HAL_TIM_PWM_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM11_Init+0x5e>
		Error_Handler();
 800276a:	f000 f991 	bl	8002a90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276e:	2360      	movs	r3, #96	@ 0x60
 8002770:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2200      	movs	r2, #0
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <MX_TIM11_Init+0x94>)
 8002786:	f003 fe1f 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM11_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002790:	f000 f97e 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8002794:	4803      	ldr	r0, [pc, #12]	@ (80027a4 <MX_TIM11_Init+0x94>)
 8002796:	f000 fb3b 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000424 	.word	0x20000424
 80027a8:	40014800 	.word	0x40014800

080027ac <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM13_Init 0 */

	/* USER CODE END TIM13_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	615a      	str	r2, [r3, #20]
 80027c2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 80027c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002844 <MX_TIM13_Init+0x98>)
 80027c8:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 179;
 80027ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027cc:	22b3      	movs	r2, #179	@ 0xb3
 80027ce:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027dc:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e4:	4b16      	ldr	r3, [pc, #88]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 80027ea:	4815      	ldr	r0, [pc, #84]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027ec:	f003 fb48 	bl	8005e80 <HAL_TIM_Base_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM13_Init+0x4e>
		Error_Handler();
 80027f6:	f000 f94b 	bl	8002a90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim13) != HAL_OK) {
 80027fa:	4811      	ldr	r0, [pc, #68]	@ (8002840 <MX_TIM13_Init+0x94>)
 80027fc:	f003 fb8f 	bl	8005f1e <HAL_TIM_PWM_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM13_Init+0x5e>
		Error_Handler();
 8002806:	f000 f943 	bl	8002a90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280a:	2360      	movs	r3, #96	@ 0x60
 800280c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	4807      	ldr	r0, [pc, #28]	@ (8002840 <MX_TIM13_Init+0x94>)
 8002822:	f003 fdd1 	bl	80063c8 <HAL_TIM_PWM_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM13_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 800282c:	f000 f930 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */
	HAL_TIM_MspPostInit(&htim13);
 8002830:	4803      	ldr	r0, [pc, #12]	@ (8002840 <MX_TIM13_Init+0x94>)
 8002832:	f000 faed 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 8002836:	bf00      	nop
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000046c 	.word	0x2000046c
 8002844:	40001c00 	.word	0x40001c00

08002848 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <MX_UART4_Init+0x4c>)
 800284e:	4a12      	ldr	r2, [pc, #72]	@ (8002898 <MX_UART4_Init+0x50>)
 8002850:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <MX_UART4_Init+0x4c>)
 8002854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002858:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <MX_UART4_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <MX_UART4_Init+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <MX_UART4_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <MX_UART4_Init+0x4c>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <MX_UART4_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <MX_UART4_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800287e:	4805      	ldr	r0, [pc, #20]	@ (8002894 <MX_UART4_Init+0x4c>)
 8002880:	f004 fac4 	bl	8006e0c <HAL_UART_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_UART4_Init+0x46>
		Error_Handler();
 800288a:	f000 f901 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200004b4 	.word	0x200004b4
 8002898:	40004c00 	.word	0x40004c00

0800289c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <MX_USART2_UART_Init+0x50>)
 80028a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028c2:	220c      	movs	r2, #12
 80028c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c6:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80028d2:	4805      	ldr	r0, [pc, #20]	@ (80028e8 <MX_USART2_UART_Init+0x4c>)
 80028d4:	f004 fa9a 	bl	8006e0c <HAL_UART_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80028de:	f000 f8d7 	bl	8002a90 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200004fc 	.word	0x200004fc
 80028ec:	40004400 	.word	0x40004400

080028f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <MX_DMA_Init+0x3c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a0b      	ldr	r2, [pc, #44]	@ (800292c <MX_DMA_Init+0x3c>)
 8002900:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <MX_DMA_Init+0x3c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	200d      	movs	r0, #13
 8002918:	f000 fe7f 	bl	800361a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800291c:	200d      	movs	r0, #13
 800291e:	f000 fe98 	bl	8003652 <HAL_NVIC_EnableIRQ>

}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	@ 0x28
 8002934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b42      	ldr	r3, [pc, #264]	@ (8002a54 <MX_GPIO_Init+0x124>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a41      	ldr	r2, [pc, #260]	@ (8002a54 <MX_GPIO_Init+0x124>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b3f      	ldr	r3, [pc, #252]	@ (8002a54 <MX_GPIO_Init+0x124>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <MX_GPIO_Init+0x124>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a54 <MX_GPIO_Init+0x124>)
 800296c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30
 8002972:	4b38      	ldr	r3, [pc, #224]	@ (8002a54 <MX_GPIO_Init+0x124>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	4b34      	ldr	r3, [pc, #208]	@ (8002a54 <MX_GPIO_Init+0x124>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a33      	ldr	r2, [pc, #204]	@ (8002a54 <MX_GPIO_Init+0x124>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b31      	ldr	r3, [pc, #196]	@ (8002a54 <MX_GPIO_Init+0x124>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a54 <MX_GPIO_Init+0x124>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a54 <MX_GPIO_Init+0x124>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <MX_GPIO_Init+0x124>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80029b6:	2200      	movs	r2, #0
 80029b8:	f248 31ef 	movw	r1, #33775	@ 0x83ef
 80029bc:	4826      	ldr	r0, [pc, #152]	@ (8002a58 <MX_GPIO_Init+0x128>)
 80029be:	f001 fbf9 	bl	80041b4 <HAL_GPIO_WritePin>
			GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
					| GPIO_PIN_5 | stepper_speed_Pin | motor1_Pin | motor2_Pin
					| motor3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2120      	movs	r1, #32
 80029c6:	4825      	ldr	r0, [pc, #148]	@ (8002a5c <MX_GPIO_Init+0x12c>)
 80029c8:	f001 fbf4 	bl	80041b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_10 | stepper_direction_Pin,
 80029cc:	2200      	movs	r2, #0
 80029ce:	f248 4104 	movw	r1, #33796	@ 0x8404
 80029d2:	4823      	ldr	r0, [pc, #140]	@ (8002a60 <MX_GPIO_Init+0x130>)
 80029d4:	f001 fbee 	bl	80041b4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80029d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80029e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	481a      	ldr	r0, [pc, #104]	@ (8002a58 <MX_GPIO_Init+0x128>)
 80029f0:	f001 fa4c 	bl	8003e8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC15 PC0 PC1 PC2
	 PC3 PC5 stepper_speed_Pin motor1_Pin
	 motor2_Pin motor3_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2
 80029f4:	f248 33ef 	movw	r3, #33775	@ 0x83ef
 80029f8:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_3 | GPIO_PIN_5 | stepper_speed_Pin | motor1_Pin
			| motor2_Pin | motor3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4812      	ldr	r0, [pc, #72]	@ (8002a58 <MX_GPIO_Init+0x128>)
 8002a0e:	f001 fa3d 	bl	8003e8c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8002a12:	2320      	movs	r3, #32
 8002a14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	480c      	ldr	r0, [pc, #48]	@ (8002a5c <MX_GPIO_Init+0x12c>)
 8002a2a:	f001 fa2f 	bl	8003e8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB10 stepper_direction_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_10 | stepper_direction_Pin;
 8002a2e:	f248 4304 	movw	r3, #33796	@ 0x8404
 8002a32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a34:	2301      	movs	r3, #1
 8002a36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	4806      	ldr	r0, [pc, #24]	@ (8002a60 <MX_GPIO_Init+0x130>)
 8002a48:	f001 fa20 	bl	8003e8c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002a4c:	bf00      	nop
 8002a4e:	3728      	adds	r7, #40	@ 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	40020400 	.word	0x40020400

08002a64 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	4804      	ldr	r0, [pc, #16]	@ (8002a8c <_write+0x28>)
 8002a7c:	f004 fa16 	bl	8006eac <HAL_UART_Transmit>
	return len;
 8002a80:	687b      	ldr	r3, [r7, #4]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200004fc 	.word	0x200004fc

08002a90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a94:	b672      	cpsid	i
}
 8002a96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <Error_Handler+0x8>

08002a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae8 <HAL_MspInit+0x4c>)
 8002aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <HAL_MspInit+0x4c>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <HAL_MspInit+0x4c>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <HAL_MspInit+0x4c>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ada:	2007      	movs	r0, #7
 8002adc:	f000 fd92 	bl	8003604 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	@ 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <HAL_I2C_MspInit+0x84>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12b      	bne.n	8002b66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	4a17      	ldr	r2, [pc, #92]	@ (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2e:	2312      	movs	r3, #18
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	480c      	ldr	r0, [pc, #48]	@ (8002b78 <HAL_I2C_MspInit+0x8c>)
 8002b46:	f001 f9a1 	bl	8003e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_I2C_MspInit+0x88>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b66:	bf00      	nop
 8002b68:	3728      	adds	r7, #40	@ 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40005400 	.word	0x40005400
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400

08002b7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	@ 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5b      	ldr	r2, [pc, #364]	@ (8002d08 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d12d      	bne.n	8002bfa <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	4a59      	ldr	r2, [pc, #356]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bae:	4b57      	ldr	r3, [pc, #348]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bca:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002be8:	2301      	movs	r3, #1
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4847      	ldr	r0, [pc, #284]	@ (8002d10 <HAL_TIM_Encoder_MspInit+0x194>)
 8002bf4:	f001 f94a 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bf8:	e081      	b.n	8002cfe <HAL_TIM_Encoder_MspInit+0x182>
  else if(htim_encoder->Instance==TIM2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c02:	d12d      	bne.n	8002c60 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	4b40      	ldr	r3, [pc, #256]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c14:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	4b39      	ldr	r3, [pc, #228]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	4a38      	ldr	r2, [pc, #224]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c30:	4b36      	ldr	r3, [pc, #216]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002c3c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c56:	4619      	mov	r1, r3
 8002c58:	482d      	ldr	r0, [pc, #180]	@ (8002d10 <HAL_TIM_Encoder_MspInit+0x194>)
 8002c5a:	f001 f917 	bl	8003e8c <HAL_GPIO_Init>
}
 8002c5e:	e04e      	b.n	8002cfe <HAL_TIM_Encoder_MspInit+0x182>
  else if(htim_encoder->Instance==TIM3)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2b      	ldr	r2, [pc, #172]	@ (8002d14 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d149      	bne.n	8002cfe <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b27      	ldr	r3, [pc, #156]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	4a26      	ldr	r2, [pc, #152]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7a:	4b24      	ldr	r3, [pc, #144]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	4a18      	ldr	r2, [pc, #96]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb2:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480d      	ldr	r0, [pc, #52]	@ (8002d10 <HAL_TIM_Encoder_MspInit+0x194>)
 8002cda:	f001 f8d7 	bl	8003e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cde:	2310      	movs	r3, #16
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4807      	ldr	r0, [pc, #28]	@ (8002d18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cfa:	f001 f8c7 	bl	8003e8c <HAL_GPIO_Init>
}
 8002cfe:	bf00      	nop
 8002d00:	3738      	adds	r7, #56	@ 0x38
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40020400 	.word	0x40020400

08002d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a33      	ldr	r2, [pc, #204]	@ (8002df8 <HAL_TIM_Base_MspInit+0xdc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	4a31      	ldr	r2, [pc, #196]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002d4a:	e04e      	b.n	8002dea <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM8)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2b      	ldr	r2, [pc, #172]	@ (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	4a27      	ldr	r2, [pc, #156]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d66:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]
}
 8002d72:	e03a      	b.n	8002dea <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a22      	ldr	r2, [pc, #136]	@ (8002e04 <HAL_TIM_Base_MspInit+0xe8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
}
 8002d9a:	e026      	b.n	8002dea <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM11)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a19      	ldr	r2, [pc, #100]	@ (8002e08 <HAL_TIM_Base_MspInit+0xec>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10e      	bne.n	8002dc4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	4a13      	ldr	r2, [pc, #76]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
}
 8002dc2:	e012      	b.n	8002dea <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM13)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <HAL_TIM_Base_MspInit+0xf0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10d      	bne.n	8002dea <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	bf00      	nop
 8002dec:	3724      	adds	r7, #36	@ 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40010400 	.word	0x40010400
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800
 8002e0c:	40001c00 	.word	0x40001c00

08002e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	@ 0x30
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 031c 	add.w	r3, r7, #28
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a49      	ldr	r2, [pc, #292]	@ (8002f54 <HAL_TIM_MspPostInit+0x144>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d11e      	bne.n	8002e70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	4b48      	ldr	r3, [pc, #288]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	4a47      	ldr	r2, [pc, #284]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e42:	4b45      	ldr	r3, [pc, #276]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	483c      	ldr	r0, [pc, #240]	@ (8002f5c <HAL_TIM_MspPostInit+0x14c>)
 8002e6a:	f001 f80f 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002e6e:	e06c      	b.n	8002f4a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3a      	ldr	r2, [pc, #232]	@ (8002f60 <HAL_TIM_MspPostInit+0x150>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d11f      	bne.n	8002eba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	4b36      	ldr	r3, [pc, #216]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	4a35      	ldr	r2, [pc, #212]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8a:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	482c      	ldr	r0, [pc, #176]	@ (8002f64 <HAL_TIM_MspPostInit+0x154>)
 8002eb4:	f000 ffea 	bl	8003e8c <HAL_GPIO_Init>
}
 8002eb8:	e047      	b.n	8002f4a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM11)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8002f68 <HAL_TIM_MspPostInit+0x158>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d11f      	bne.n	8002f04 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	4a22      	ldr	r2, [pc, #136]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002ece:	f043 0302 	orr.w	r3, r3, #2
 8002ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed4:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	4619      	mov	r1, r3
 8002efc:	4819      	ldr	r0, [pc, #100]	@ (8002f64 <HAL_TIM_MspPostInit+0x154>)
 8002efe:	f000 ffc5 	bl	8003e8c <HAL_GPIO_Init>
}
 8002f02:	e022      	b.n	8002f4a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM13)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <HAL_TIM_MspPostInit+0x15c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d11d      	bne.n	8002f4a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a10      	ldr	r2, [pc, #64]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_TIM_MspPostInit+0x148>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f2a:	2340      	movs	r3, #64	@ 0x40
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f3a:	2309      	movs	r3, #9
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3e:	f107 031c 	add.w	r3, r7, #28
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	@ (8002f5c <HAL_TIM_MspPostInit+0x14c>)
 8002f46:	f000 ffa1 	bl	8003e8c <HAL_GPIO_Init>
}
 8002f4a:	bf00      	nop
 8002f4c:	3730      	adds	r7, #48	@ 0x30
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40014800 	.word	0x40014800
 8002f6c:	40001c00 	.word	0x40001c00

08002f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08c      	sub	sp, #48	@ 0x30
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 031c 	add.w	r3, r7, #28
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80030c8 <HAL_UART_MspInit+0x158>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d164      	bne.n	800305c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	4b4d      	ldr	r3, [pc, #308]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a4c      	ldr	r2, [pc, #304]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8002f9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	4b46      	ldr	r3, [pc, #280]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a45      	ldr	r2, [pc, #276]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b43      	ldr	r3, [pc, #268]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	483a      	ldr	r0, [pc, #232]	@ (80030d0 <HAL_UART_MspInit+0x160>)
 8002fe8:	f000 ff50 	bl	8003e8c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002fec:	4b39      	ldr	r3, [pc, #228]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8002fee:	4a3a      	ldr	r2, [pc, #232]	@ (80030d8 <HAL_UART_MspInit+0x168>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002ff2:	4b38      	ldr	r3, [pc, #224]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8002ff4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ff8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ffa:	4b36      	ldr	r3, [pc, #216]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003000:	4b34      	ldr	r3, [pc, #208]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003006:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800300c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800300e:	4b31      	ldr	r3, [pc, #196]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003014:	4b2f      	ldr	r3, [pc, #188]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800301a:	4b2e      	ldr	r3, [pc, #184]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 800301c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003020:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003022:	4b2c      	ldr	r3, [pc, #176]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003028:	4b2a      	ldr	r3, [pc, #168]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800302e:	4829      	ldr	r0, [pc, #164]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003030:	f000 fb2a 	bl	8003688 <HAL_DMA_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800303a:	f7ff fd29 	bl	8002a90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a24      	ldr	r2, [pc, #144]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003044:	4a23      	ldr	r2, [pc, #140]	@ (80030d4 <HAL_UART_MspInit+0x164>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	2034      	movs	r0, #52	@ 0x34
 8003050:	f000 fae3 	bl	800361a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003054:	2034      	movs	r0, #52	@ 0x34
 8003056:	f000 fafc 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800305a:	e030      	b.n	80030be <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <HAL_UART_MspInit+0x16c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d12b      	bne.n	80030be <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003074:	6413      	str	r3, [r2, #64]	@ 0x40
 8003076:	4b15      	ldr	r3, [pc, #84]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	4a10      	ldr	r2, [pc, #64]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6313      	str	r3, [r2, #48]	@ 0x30
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <HAL_UART_MspInit+0x15c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800309e:	230c      	movs	r3, #12
 80030a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030aa:	2303      	movs	r3, #3
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030ae:	2307      	movs	r3, #7
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	4619      	mov	r1, r3
 80030b8:	4809      	ldr	r0, [pc, #36]	@ (80030e0 <HAL_UART_MspInit+0x170>)
 80030ba:	f000 fee7 	bl	8003e8c <HAL_GPIO_Init>
}
 80030be:	bf00      	nop
 80030c0:	3730      	adds	r7, #48	@ 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40004c00 	.word	0x40004c00
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020800 	.word	0x40020800
 80030d4:	20000544 	.word	0x20000544
 80030d8:	40026040 	.word	0x40026040
 80030dc:	40004400 	.word	0x40004400
 80030e0:	40020000 	.word	0x40020000

080030e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <NMI_Handler+0x4>

080030ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <HardFault_Handler+0x4>

080030f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <MemManage_Handler+0x4>

080030fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <BusFault_Handler+0x4>

08003104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <UsageFault_Handler+0x4>

0800310c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800313a:	f000 f94f 	bl	80033dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <DMA1_Stream2_IRQHandler+0x10>)
 800314a:	f000 fc35 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000544 	.word	0x20000544

08003158 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800315c:	4802      	ldr	r0, [pc, #8]	@ (8003168 <UART4_IRQHandler+0x10>)
 800315e:	f003 ff55 	bl	800700c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200004b4 	.word	0x200004b4

0800316c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return 1;
 8003170:	2301      	movs	r3, #1
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <_kill>:

int _kill(int pid, int sig)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003186:	f006 f911 	bl	80093ac <__errno>
 800318a:	4603      	mov	r3, r0
 800318c:	2216      	movs	r2, #22
 800318e:	601a      	str	r2, [r3, #0]
  return -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <_exit>:

void _exit (int status)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ffe7 	bl	800317c <_kill>
  while (1) {}    /* Make sure we hang here */
 80031ae:	bf00      	nop
 80031b0:	e7fd      	b.n	80031ae <_exit+0x12>

080031b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	e00a      	b.n	80031da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031c4:	f3af 8000 	nop.w
 80031c8:	4601      	mov	r1, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	60ba      	str	r2, [r7, #8]
 80031d0:	b2ca      	uxtb	r2, r1
 80031d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	dbf0      	blt.n	80031c4 <_read+0x12>
  }

  return len;
 80031e2:	687b      	ldr	r3, [r7, #4]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003214:	605a      	str	r2, [r3, #4]
  return 0;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <_isatty>:

int _isatty(int file)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800325c:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <_sbrk+0x5c>)
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <_sbrk+0x60>)
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003268:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <_sbrk+0x64>)
 8003272:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <_sbrk+0x68>)
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d207      	bcs.n	8003294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003284:	f006 f892 	bl	80093ac <__errno>
 8003288:	4603      	mov	r3, r0
 800328a:	220c      	movs	r2, #12
 800328c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e009      	b.n	80032a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003294:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <_sbrk+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <_sbrk+0x64>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <_sbrk+0x64>)
 80032a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20020000 	.word	0x20020000
 80032b4:	00000400 	.word	0x00000400
 80032b8:	2000061c 	.word	0x2000061c
 80032bc:	20000770 	.word	0x20000770

080032c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <SystemInit+0x20>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <SystemInit+0x20>)
 80032cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800331c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032e8:	f7ff ffea 	bl	80032c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032ec:	480c      	ldr	r0, [pc, #48]	@ (8003320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ee:	490d      	ldr	r1, [pc, #52]	@ (8003324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032f4:	e002      	b.n	80032fc <LoopCopyDataInit>

080032f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032fa:	3304      	adds	r3, #4

080032fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003300:	d3f9      	bcc.n	80032f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003304:	4c0a      	ldr	r4, [pc, #40]	@ (8003330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003308:	e001      	b.n	800330e <LoopFillZerobss>

0800330a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800330a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800330c:	3204      	adds	r2, #4

0800330e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800330e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003310:	d3fb      	bcc.n	800330a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003312:	f006 f851 	bl	80093b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003316:	f7fe fa0f 	bl	8001738 <main>
  bx  lr    
 800331a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800331c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003324:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003328:	0800d5a0 	.word	0x0800d5a0
  ldr r2, =_sbss
 800332c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003330:	20000770 	.word	0x20000770

08003334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003334:	e7fe      	b.n	8003334 <ADC_IRQHandler>
	...

08003338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <HAL_Init+0x40>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <HAL_Init+0x40>)
 8003342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_Init+0x40>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <HAL_Init+0x40>)
 800334e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003354:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <HAL_Init+0x40>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a07      	ldr	r2, [pc, #28]	@ (8003378 <HAL_Init+0x40>)
 800335a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003360:	2003      	movs	r0, #3
 8003362:	f000 f94f 	bl	8003604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003366:	2000      	movs	r0, #0
 8003368:	f000 f808 	bl	800337c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800336c:	f7ff fb96 	bl	8002a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00

0800337c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003384:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <HAL_InitTick+0x54>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b12      	ldr	r3, [pc, #72]	@ (80033d4 <HAL_InitTick+0x58>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	4619      	mov	r1, r3
 800338e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003392:	fbb3 f3f1 	udiv	r3, r3, r1
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f967 	bl	800366e <HAL_SYSTICK_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00e      	b.n	80033c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d80a      	bhi.n	80033c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b0:	2200      	movs	r2, #0
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	f000 f92f 	bl	800361a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033bc:	4a06      	ldr	r2, [pc, #24]	@ (80033d8 <HAL_InitTick+0x5c>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e000      	b.n	80033c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	2000002c 	.word	0x2000002c
 80033d4:	20000034 	.word	0x20000034
 80033d8:	20000030 	.word	0x20000030

080033dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_IncTick+0x20>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_IncTick+0x24>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4413      	add	r3, r2
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_IncTick+0x24>)
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000034 	.word	0x20000034
 8003400:	20000620 	.word	0x20000620

08003404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return uwTick;
 8003408:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <HAL_GetTick+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000620 	.word	0x20000620

0800341c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff ffee 	bl	8003404 <HAL_GetTick>
 8003428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d005      	beq.n	8003442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_Delay+0x44>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003442:	bf00      	nop
 8003444:	f7ff ffde 	bl	8003404 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	429a      	cmp	r2, r3
 8003452:	d8f7      	bhi.n	8003444 <HAL_Delay+0x28>
  {
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000034 	.word	0x20000034

08003464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003474:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003480:	4013      	ands	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800348c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003496:	4a04      	ldr	r2, [pc, #16]	@ (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	60d3      	str	r3, [r2, #12]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b0:	4b04      	ldr	r3, [pc, #16]	@ (80034c4 <__NVIC_GetPriorityGrouping+0x18>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 0307 	and.w	r3, r3, #7
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	db0b      	blt.n	80034f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	f003 021f 	and.w	r2, r3, #31
 80034e0:	4907      	ldr	r1, [pc, #28]	@ (8003500 <__NVIC_EnableIRQ+0x38>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2001      	movs	r0, #1
 80034ea:	fa00 f202 	lsl.w	r2, r0, r2
 80034ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e100 	.word	0xe000e100

08003504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	2b00      	cmp	r3, #0
 8003516:	db0a      	blt.n	800352e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	490c      	ldr	r1, [pc, #48]	@ (8003550 <__NVIC_SetPriority+0x4c>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	440b      	add	r3, r1
 8003528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800352c:	e00a      	b.n	8003544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4908      	ldr	r1, [pc, #32]	@ (8003554 <__NVIC_SetPriority+0x50>)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	3b04      	subs	r3, #4
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	440b      	add	r3, r1
 8003542:	761a      	strb	r2, [r3, #24]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000e100 	.word	0xe000e100
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	@ 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f1c3 0307 	rsb	r3, r3, #7
 8003572:	2b04      	cmp	r3, #4
 8003574:	bf28      	it	cs
 8003576:	2304      	movcs	r3, #4
 8003578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3304      	adds	r3, #4
 800357e:	2b06      	cmp	r3, #6
 8003580:	d902      	bls.n	8003588 <NVIC_EncodePriority+0x30>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3b03      	subs	r3, #3
 8003586:	e000      	b.n	800358a <NVIC_EncodePriority+0x32>
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	401a      	ands	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a0:	f04f 31ff 	mov.w	r1, #4294967295
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	43d9      	mvns	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	4313      	orrs	r3, r2
         );
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3724      	adds	r7, #36	@ 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035d0:	d301      	bcc.n	80035d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00f      	b.n	80035f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <SysTick_Config+0x40>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035de:	210f      	movs	r1, #15
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	f7ff ff8e 	bl	8003504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <SysTick_Config+0x40>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ee:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <SysTick_Config+0x40>)
 80035f0:	2207      	movs	r2, #7
 80035f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	e000e010 	.word	0xe000e010

08003604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff29 	bl	8003464 <__NVIC_SetPriorityGrouping>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800362c:	f7ff ff3e 	bl	80034ac <__NVIC_GetPriorityGrouping>
 8003630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7ff ff8e 	bl	8003558 <NVIC_EncodePriority>
 800363c:	4602      	mov	r2, r0
 800363e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff5d 	bl	8003504 <__NVIC_SetPriority>
}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff31 	bl	80034c8 <__NVIC_EnableIRQ>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ffa2 	bl	80035c0 <SysTick_Config>
 800367c:	4603      	mov	r3, r0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7ff feb6 	bl	8003404 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e099      	b.n	80037d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c4:	e00f      	b.n	80036e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036c6:	f7ff fe9d 	bl	8003404 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d908      	bls.n	80036e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2203      	movs	r2, #3
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e078      	b.n	80037d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e8      	bne.n	80036c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <HAL_DMA_Init+0x158>)
 8003700:	4013      	ands	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	2b04      	cmp	r3, #4
 800373e:	d107      	bne.n	8003750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	4313      	orrs	r3, r2
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0307 	bic.w	r3, r3, #7
 8003766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	2b04      	cmp	r3, #4
 8003778:	d117      	bne.n	80037aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00e      	beq.n	80037aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb01 	bl	8003d94 <DMA_CheckFifoParam>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2240      	movs	r2, #64	@ 0x40
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037a6:	2301      	movs	r3, #1
 80037a8:	e016      	b.n	80037d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fab8 	bl	8003d28 <DMA_CalcBaseAndBitshift>
 80037b8:	4603      	mov	r3, r0
 80037ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	223f      	movs	r2, #63	@ 0x3f
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	f010803f 	.word	0xf010803f

080037e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_DMA_Start_IT+0x26>
 8003806:	2302      	movs	r3, #2
 8003808:	e040      	b.n	800388c <HAL_DMA_Start_IT+0xa8>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d12f      	bne.n	800387e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fa4a 	bl	8003ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383c:	223f      	movs	r2, #63	@ 0x3f
 800383e:	409a      	lsls	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0216 	orr.w	r2, r2, #22
 8003852:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e005      	b.n	800388a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003886:	2302      	movs	r3, #2
 8003888:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038a2:	f7ff fdaf 	bl	8003404 <HAL_GetTick>
 80038a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d008      	beq.n	80038c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2280      	movs	r2, #128	@ 0x80
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e052      	b.n	800396c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0216 	bic.w	r2, r2, #22
 80038d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_DMA_Abort+0x62>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0208 	bic.w	r2, r2, #8
 8003904:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003916:	e013      	b.n	8003940 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003918:	f7ff fd74 	bl	8003404 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b05      	cmp	r3, #5
 8003924:	d90c      	bls.n	8003940 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2203      	movs	r2, #3
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e015      	b.n	800396c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e4      	bne.n	8003918 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003952:	223f      	movs	r2, #63	@ 0x3f
 8003954:	409a      	lsls	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d004      	beq.n	8003992 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2280      	movs	r2, #128	@ 0x80
 800398c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e00c      	b.n	80039ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2205      	movs	r2, #5
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003c00 <HAL_DMA_IRQHandler+0x248>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a8e      	ldr	r2, [pc, #568]	@ (8003c04 <HAL_DMA_IRQHandler+0x24c>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0a9b      	lsrs	r3, r3, #10
 80039d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	2208      	movs	r2, #8
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01a      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	2208      	movs	r2, #8
 8003a12:	409a      	lsls	r2, r3
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	2201      	movs	r2, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	2201      	movs	r2, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	f043 0202 	orr.w	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	2204      	movs	r2, #4
 8003a60:	409a      	lsls	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	f043 0204 	orr.w	r2, r3, #4
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	2210      	movs	r2, #16
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d043      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d03c      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d024      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e01f      	b.n	8003b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e016      	b.n	8003b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0208 	bic.w	r2, r2, #8
 8003b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 808f 	beq.w	8003c58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8087 	beq.w	8003c58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	2220      	movs	r2, #32
 8003b50:	409a      	lsls	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d136      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0216 	bic.w	r2, r2, #22
 8003b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_DMA_IRQHandler+0x1da>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0208 	bic.w	r2, r2, #8
 8003ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba6:	223f      	movs	r2, #63	@ 0x3f
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d07e      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
        }
        return;
 8003bce:	e079      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01d      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d031      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
 8003bfc:	e02c      	b.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
 8003bfe:	bf00      	nop
 8003c00:	2000002c 	.word	0x2000002c
 8003c04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d023      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
 8003c18:	e01e      	b.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10f      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0210 	bic.w	r2, r2, #16
 8003c36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d032      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2205      	movs	r2, #5
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d307      	bcc.n	8003ca0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f2      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x2cc>
 8003c9e:	e000      	b.n	8003ca2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ca0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e000      	b.n	8003cc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cc4:	bf00      	nop
    }
  }
}
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b40      	cmp	r3, #64	@ 0x40
 8003cf8:	d108      	bne.n	8003d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d0a:	e007      	b.n	8003d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	60da      	str	r2, [r3, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	3b10      	subs	r3, #16
 8003d38:	4a14      	ldr	r2, [pc, #80]	@ (8003d8c <DMA_CalcBaseAndBitshift+0x64>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d42:	4a13      	ldr	r2, [pc, #76]	@ (8003d90 <DMA_CalcBaseAndBitshift+0x68>)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d909      	bls.n	8003d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	1d1a      	adds	r2, r3, #4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d68:	e007      	b.n	8003d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	aaaaaaab 	.word	0xaaaaaaab
 8003d90:	0800d0e8 	.word	0x0800d0e8

08003d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11f      	bne.n	8003dee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d856      	bhi.n	8003e62 <DMA_CheckFifoParam+0xce>
 8003db4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <DMA_CheckFifoParam+0x28>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003ddf 	.word	0x08003ddf
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003e63 	.word	0x08003e63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d046      	beq.n	8003e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ddc:	e043      	b.n	8003e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003de6:	d140      	bne.n	8003e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dec:	e03d      	b.n	8003e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df6:	d121      	bne.n	8003e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d837      	bhi.n	8003e6e <DMA_CheckFifoParam+0xda>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <DMA_CheckFifoParam+0x70>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e15 	.word	0x08003e15
 8003e08:	08003e1b 	.word	0x08003e1b
 8003e0c:	08003e15 	.word	0x08003e15
 8003e10:	08003e2d 	.word	0x08003e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e030      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d025      	beq.n	8003e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2a:	e022      	b.n	8003e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e34:	d11f      	bne.n	8003e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e3a:	e01c      	b.n	8003e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d903      	bls.n	8003e4a <DMA_CheckFifoParam+0xb6>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d003      	beq.n	8003e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e48:	e018      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4e:	e015      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00e      	beq.n	8003e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e60:	e00b      	b.n	8003e7a <DMA_CheckFifoParam+0xe6>
      break;
 8003e62:	bf00      	nop
 8003e64:	e00a      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e008      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e006      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e004      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop

08003e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	@ 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	e165      	b.n	8004174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 8154 	bne.w	800416e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d130      	bne.n	8003f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80ae 	beq.w	800416e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b5d      	ldr	r3, [pc, #372]	@ (800418c <HAL_GPIO_Init+0x300>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	4a5c      	ldr	r2, [pc, #368]	@ (800418c <HAL_GPIO_Init+0x300>)
 800401c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004020:	6453      	str	r3, [r2, #68]	@ 0x44
 8004022:	4b5a      	ldr	r3, [pc, #360]	@ (800418c <HAL_GPIO_Init+0x300>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800402e:	4a58      	ldr	r2, [pc, #352]	@ (8004190 <HAL_GPIO_Init+0x304>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	220f      	movs	r2, #15
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	@ (8004194 <HAL_GPIO_Init+0x308>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x21a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <HAL_GPIO_Init+0x30c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x216>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4d      	ldr	r2, [pc, #308]	@ (800419c <HAL_GPIO_Init+0x310>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x212>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4c      	ldr	r2, [pc, #304]	@ (80041a0 <HAL_GPIO_Init+0x314>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x20e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <HAL_GPIO_Init+0x318>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x20a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4a      	ldr	r2, [pc, #296]	@ (80041a8 <HAL_GPIO_Init+0x31c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x206>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a49      	ldr	r2, [pc, #292]	@ (80041ac <HAL_GPIO_Init+0x320>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x202>
 800408a:	2306      	movs	r3, #6
 800408c:	e00c      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800408e:	2307      	movs	r3, #7
 8004090:	e00a      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 8004092:	2305      	movs	r3, #5
 8004094:	e008      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 8004096:	2304      	movs	r3, #4
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800409a:	2303      	movs	r3, #3
 800409c:	e004      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800409e:	2302      	movs	r3, #2
 80040a0:	e002      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 80040a6:	2300      	movs	r3, #0
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	f002 0203 	and.w	r2, r2, #3
 80040ae:	0092      	lsls	r2, r2, #2
 80040b0:	4093      	lsls	r3, r2
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b8:	4935      	ldr	r1, [pc, #212]	@ (8004190 <HAL_GPIO_Init+0x304>)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	3302      	adds	r3, #2
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040c6:	4b3a      	ldr	r3, [pc, #232]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ea:	4a31      	ldr	r2, [pc, #196]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f0:	4b2f      	ldr	r3, [pc, #188]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004114:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800411a:	4b25      	ldr	r3, [pc, #148]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800413e:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004144:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004168:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	f67f ae96 	bls.w	8003ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	@ 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	40013800 	.word	0x40013800
 8004194:	40020000 	.word	0x40020000
 8004198:	40020400 	.word	0x40020400
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40021400 	.word	0x40021400
 80041ac:	40021800 	.word	0x40021800
 80041b0:	40013c00 	.word	0x40013c00

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041d0:	e003      	b.n	80041da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041d2:	887b      	ldrh	r3, [r7, #2]
 80041d4:	041a      	lsls	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e12b      	b.n	8004452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe fc6c 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2224      	movs	r2, #36	@ 0x24
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800423a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800424a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800424c:	f001 f922 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8004250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4a81      	ldr	r2, [pc, #516]	@ (800445c <HAL_I2C_Init+0x274>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d807      	bhi.n	800426c <HAL_I2C_Init+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a80      	ldr	r2, [pc, #512]	@ (8004460 <HAL_I2C_Init+0x278>)
 8004260:	4293      	cmp	r3, r2
 8004262:	bf94      	ite	ls
 8004264:	2301      	movls	r3, #1
 8004266:	2300      	movhi	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e006      	b.n	800427a <HAL_I2C_Init+0x92>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a7d      	ldr	r2, [pc, #500]	@ (8004464 <HAL_I2C_Init+0x27c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	bf94      	ite	ls
 8004274:	2301      	movls	r3, #1
 8004276:	2300      	movhi	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0e7      	b.n	8004452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a78      	ldr	r2, [pc, #480]	@ (8004468 <HAL_I2C_Init+0x280>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0c9b      	lsrs	r3, r3, #18
 800428c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a6a      	ldr	r2, [pc, #424]	@ (800445c <HAL_I2C_Init+0x274>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d802      	bhi.n	80042bc <HAL_I2C_Init+0xd4>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3301      	adds	r3, #1
 80042ba:	e009      	b.n	80042d0 <HAL_I2C_Init+0xe8>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	4a69      	ldr	r2, [pc, #420]	@ (800446c <HAL_I2C_Init+0x284>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	3301      	adds	r3, #1
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	495c      	ldr	r1, [pc, #368]	@ (800445c <HAL_I2C_Init+0x274>)
 80042ec:	428b      	cmp	r3, r1
 80042ee:	d819      	bhi.n	8004324 <HAL_I2C_Init+0x13c>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1e59      	subs	r1, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80042fe:	1c59      	adds	r1, r3, #1
 8004300:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004304:	400b      	ands	r3, r1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_I2C_Init+0x138>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1e59      	subs	r1, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	fbb1 f3f3 	udiv	r3, r1, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431e:	e051      	b.n	80043c4 <HAL_I2C_Init+0x1dc>
 8004320:	2304      	movs	r3, #4
 8004322:	e04f      	b.n	80043c4 <HAL_I2C_Init+0x1dc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d111      	bne.n	8004350 <HAL_I2C_Init+0x168>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1e58      	subs	r0, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	440b      	add	r3, r1
 800433a:	fbb0 f3f3 	udiv	r3, r0, r3
 800433e:	3301      	adds	r3, #1
 8004340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e012      	b.n	8004376 <HAL_I2C_Init+0x18e>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1e58      	subs	r0, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	0099      	lsls	r1, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	fbb0 f3f3 	udiv	r3, r0, r3
 8004366:	3301      	adds	r3, #1
 8004368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Init+0x196>
 800437a:	2301      	movs	r3, #1
 800437c:	e022      	b.n	80043c4 <HAL_I2C_Init+0x1dc>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10e      	bne.n	80043a4 <HAL_I2C_Init+0x1bc>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1e58      	subs	r0, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	440b      	add	r3, r1
 8004394:	fbb0 f3f3 	udiv	r3, r0, r3
 8004398:	3301      	adds	r3, #1
 800439a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043a2:	e00f      	b.n	80043c4 <HAL_I2C_Init+0x1dc>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	0099      	lsls	r1, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ba:	3301      	adds	r3, #1
 80043bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	6809      	ldr	r1, [r1, #0]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6911      	ldr	r1, [r2, #16]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	4311      	orrs	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	430b      	orrs	r3, r1
 8004406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	000186a0 	.word	0x000186a0
 8004460:	001e847f 	.word	0x001e847f
 8004464:	003d08ff 	.word	0x003d08ff
 8004468:	431bde83 	.word	0x431bde83
 800446c:	10624dd3 	.word	0x10624dd3

08004470 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	461a      	mov	r2, r3
 800447c:	460b      	mov	r3, r1
 800447e:	817b      	strh	r3, [r7, #10]
 8004480:	4613      	mov	r3, r2
 8004482:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7fe ffbe 	bl	8003404 <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b20      	cmp	r3, #32
 8004494:	f040 80e0 	bne.w	8004658 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2319      	movs	r3, #25
 800449e:	2201      	movs	r2, #1
 80044a0:	4970      	ldr	r1, [pc, #448]	@ (8004664 <HAL_I2C_Master_Transmit+0x1f4>)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fc7e 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	e0d3      	b.n	800465a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_I2C_Master_Transmit+0x50>
 80044bc:	2302      	movs	r3, #2
 80044be:	e0cc      	b.n	800465a <HAL_I2C_Master_Transmit+0x1ea>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d007      	beq.n	80044e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2221      	movs	r2, #33	@ 0x21
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2210      	movs	r2, #16
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	893a      	ldrh	r2, [r7, #8]
 8004516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a50      	ldr	r2, [pc, #320]	@ (8004668 <HAL_I2C_Master_Transmit+0x1f8>)
 8004526:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004528:	8979      	ldrh	r1, [r7, #10]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fae8 	bl	8004b04 <I2C_MasterRequestWrite>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e08d      	b.n	800465a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004554:	e066      	b.n	8004624 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fd3c 	bl	8004fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	2b04      	cmp	r3, #4
 800456c:	d107      	bne.n	800457e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800457c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06b      	b.n	800465a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d11b      	bne.n	80045f8 <HAL_I2C_Master_Transmit+0x188>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	6a39      	ldr	r1, [r7, #32]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fd33 	bl	8005068 <I2C_WaitOnBTFFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	2b04      	cmp	r3, #4
 800460e:	d107      	bne.n	8004620 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e01a      	b.n	800465a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d194      	bne.n	8004556 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	00100002 	.word	0x00100002
 8004668:	ffff0000 	.word	0xffff0000

0800466c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	@ 0x30
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	461a      	mov	r2, r3
 8004678:	460b      	mov	r3, r1
 800467a:	817b      	strh	r3, [r7, #10]
 800467c:	4613      	mov	r3, r2
 800467e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004680:	f7fe fec0 	bl	8003404 <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b20      	cmp	r3, #32
 8004690:	f040 8217 	bne.w	8004ac2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2319      	movs	r3, #25
 800469a:	2201      	movs	r2, #1
 800469c:	497c      	ldr	r1, [pc, #496]	@ (8004890 <HAL_I2C_Master_Receive+0x224>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fb80 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
 80046ac:	e20a      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_I2C_Master_Receive+0x50>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e203      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d007      	beq.n	80046e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2222      	movs	r2, #34	@ 0x22
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2210      	movs	r2, #16
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	893a      	ldrh	r2, [r7, #8]
 8004712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a5c      	ldr	r2, [pc, #368]	@ (8004894 <HAL_I2C_Master_Receive+0x228>)
 8004722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004724:	8979      	ldrh	r1, [r7, #10]
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fa6c 	bl	8004c08 <I2C_MasterRequestRead>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e1c4      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d113      	bne.n	800476a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e198      	b.n	8004a9c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476e:	2b01      	cmp	r3, #1
 8004770:	d11b      	bne.n	80047aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e178      	b.n	8004a9c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d11b      	bne.n	80047ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	e158      	b.n	8004a9c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004810:	e144      	b.n	8004a9c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004816:	2b03      	cmp	r3, #3
 8004818:	f200 80f1 	bhi.w	80049fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004820:	2b01      	cmp	r3, #1
 8004822:	d123      	bne.n	800486c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fc65 	bl	80050f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e145      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800486a:	e117      	b.n	8004a9c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004870:	2b02      	cmp	r3, #2
 8004872:	d14e      	bne.n	8004912 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	2200      	movs	r2, #0
 800487c:	4906      	ldr	r1, [pc, #24]	@ (8004898 <HAL_I2C_Master_Receive+0x22c>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa90 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e11a      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
 800488e:	bf00      	nop
 8004890:	00100002 	.word	0x00100002
 8004894:	ffff0000 	.word	0xffff0000
 8004898:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004910:	e0c4      	b.n	8004a9c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	2200      	movs	r2, #0
 800491a:	496c      	ldr	r1, [pc, #432]	@ (8004acc <HAL_I2C_Master_Receive+0x460>)
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fa41 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0cb      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800493a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	2200      	movs	r2, #0
 8004976:	4955      	ldr	r1, [pc, #340]	@ (8004acc <HAL_I2C_Master_Receive+0x460>)
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fa13 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e09d      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049fc:	e04e      	b.n	8004a9c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fb78 	bl	80050f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e058      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d124      	bne.n	8004a9c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d107      	bne.n	8004a6a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a68:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f aeb6 	bne.w	8004812 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	@ 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	00010004 	.word	0x00010004

08004ad0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ade:	b2db      	uxtb	r3, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	460b      	mov	r3, r1
 8004b12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d006      	beq.n	8004b2e <I2C_MasterRequestWrite+0x2a>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d003      	beq.n	8004b2e <I2C_MasterRequestWrite+0x2a>
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b2c:	d108      	bne.n	8004b40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e00b      	b.n	8004b58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b44:	2b12      	cmp	r3, #18
 8004b46:	d107      	bne.n	8004b58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f91d 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7e:	d103      	bne.n	8004b88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e035      	b.n	8004bf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b94:	d108      	bne.n	8004ba8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b96:	897b      	ldrh	r3, [r7, #10]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ba4:	611a      	str	r2, [r3, #16]
 8004ba6:	e01b      	b.n	8004be0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ba8:	897b      	ldrh	r3, [r7, #10]
 8004baa:	11db      	asrs	r3, r3, #7
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0306 	and.w	r3, r3, #6
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f063 030f 	orn	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	490e      	ldr	r1, [pc, #56]	@ (8004c00 <I2C_MasterRequestWrite+0xfc>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f966 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e010      	b.n	8004bf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4907      	ldr	r1, [pc, #28]	@ (8004c04 <I2C_MasterRequestWrite+0x100>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f956 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	00010008 	.word	0x00010008
 8004c04:	00010002 	.word	0x00010002

08004c08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d006      	beq.n	8004c42 <I2C_MasterRequestRead+0x3a>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d003      	beq.n	8004c42 <I2C_MasterRequestRead+0x3a>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c40:	d108      	bne.n	8004c54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e00b      	b.n	8004c6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	2b11      	cmp	r3, #17
 8004c5a:	d107      	bne.n	8004c6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f893 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00d      	beq.n	8004ca0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c92:	d103      	bne.n	8004c9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e079      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ca8:	d108      	bne.n	8004cbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004caa:	897b      	ldrh	r3, [r7, #10]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]
 8004cba:	e05f      	b.n	8004d7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cbc:	897b      	ldrh	r3, [r7, #10]
 8004cbe:	11db      	asrs	r3, r3, #7
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 0306 	and.w	r3, r3, #6
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f063 030f 	orn	r3, r3, #15
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4930      	ldr	r1, [pc, #192]	@ (8004d9c <I2C_MasterRequestRead+0x194>)
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f8dc 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e054      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4929      	ldr	r1, [pc, #164]	@ (8004da0 <I2C_MasterRequestRead+0x198>)
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f8cc 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e044      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f831 	bl	8004da4 <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d56:	d103      	bne.n	8004d60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e017      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d64:	897b      	ldrh	r3, [r7, #10]
 8004d66:	11db      	asrs	r3, r3, #7
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0306 	and.w	r3, r3, #6
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f063 030e 	orn	r3, r3, #14
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4907      	ldr	r1, [pc, #28]	@ (8004da0 <I2C_MasterRequestRead+0x198>)
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f888 	bl	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	00010008 	.word	0x00010008
 8004da0:	00010002 	.word	0x00010002

08004da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db4:	e048      	b.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d044      	beq.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fe fb21 	bl	8003404 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d139      	bne.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	0c1b      	lsrs	r3, r3, #16
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10d      	bne.n	8004dfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	43da      	mvns	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4013      	ands	r3, r2
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	e00c      	b.n	8004e14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	43da      	mvns	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d116      	bne.n	8004e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e023      	b.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10d      	bne.n	8004e6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	e00c      	b.n	8004e88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	43da      	mvns	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d093      	beq.n	8004db6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ea6:	e071      	b.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb6:	d123      	bne.n	8004f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f043 0204 	orr.w	r2, r3, #4
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e067      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d041      	beq.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f08:	f7fe fa7c 	bl	8003404 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d136      	bne.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10c      	bne.n	8004f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	e00b      	b.n	8004f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	43da      	mvns	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d016      	beq.n	8004f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e021      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10c      	bne.n	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	43da      	mvns	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e00b      	b.n	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf14      	ite	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	2300      	moveq	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f af6d 	bne.w	8004ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe4:	e034      	b.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8e3 	bl	80051b2 <I2C_IsAcknowledgeFailed>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e034      	b.n	8005060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d028      	beq.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fe fa01 	bl	8003404 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11d      	bne.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	2b80      	cmp	r3, #128	@ 0x80
 8005020:	d016      	beq.n	8005050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e007      	b.n	8005060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505a:	2b80      	cmp	r3, #128	@ 0x80
 800505c:	d1c3      	bne.n	8004fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005074:	e034      	b.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f89b 	bl	80051b2 <I2C_IsAcknowledgeFailed>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e034      	b.n	80050f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d028      	beq.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fe f9b9 	bl	8003404 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d016      	beq.n	80050e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e007      	b.n	80050f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d1c3      	bne.n	8005076 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005104:	e049      	b.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b10      	cmp	r3, #16
 8005112:	d119      	bne.n	8005148 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0210 	mvn.w	r2, #16
 800511c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e030      	b.n	80051aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005148:	f7fe f95c 	bl	8003404 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11d      	bne.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005168:	2b40      	cmp	r3, #64	@ 0x40
 800516a:	d016      	beq.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e007      	b.n	80051aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a4:	2b40      	cmp	r3, #64	@ 0x40
 80051a6:	d1ae      	bne.n	8005106 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c8:	d11b      	bne.n	8005202 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	f043 0204 	orr.w	r2, r3, #4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	4b20      	ldr	r3, [pc, #128]	@ (80052a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	4a1f      	ldr	r2, [pc, #124]	@ (80052a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005228:	6413      	str	r3, [r2, #64]	@ 0x40
 800522a:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005236:	4b1b      	ldr	r3, [pc, #108]	@ (80052a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800523c:	f7fe f8e2 	bl	8003404 <HAL_GetTick>
 8005240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005242:	e009      	b.n	8005258 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005244:	f7fe f8de 	bl	8003404 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005252:	d901      	bls.n	8005258 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e01f      	b.n	8005298 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005258:	4b13      	ldr	r3, [pc, #76]	@ (80052a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005264:	d1ee      	bne.n	8005244 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005266:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800526c:	f7fe f8ca 	bl	8003404 <HAL_GetTick>
 8005270:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005272:	e009      	b.n	8005288 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005274:	f7fe f8c6 	bl	8003404 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005282:	d901      	bls.n	8005288 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e007      	b.n	8005298 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005288:	4b07      	ldr	r3, [pc, #28]	@ (80052a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005294:	d1ee      	bne.n	8005274 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40023800 	.word	0x40023800
 80052a4:	420e0040 	.word	0x420e0040
 80052a8:	40007000 	.word	0x40007000
 80052ac:	420e0044 	.word	0x420e0044

080052b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0cc      	b.n	800545e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052c4:	4b68      	ldr	r3, [pc, #416]	@ (8005468 <HAL_RCC_ClockConfig+0x1b8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d90c      	bls.n	80052ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d2:	4b65      	ldr	r3, [pc, #404]	@ (8005468 <HAL_RCC_ClockConfig+0x1b8>)
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052da:	4b63      	ldr	r3, [pc, #396]	@ (8005468 <HAL_RCC_ClockConfig+0x1b8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0b8      	b.n	800545e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d020      	beq.n	800533a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005304:	4b59      	ldr	r3, [pc, #356]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a58      	ldr	r2, [pc, #352]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800530e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800531c:	4b53      	ldr	r3, [pc, #332]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a52      	ldr	r2, [pc, #328]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005328:	4b50      	ldr	r3, [pc, #320]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	494d      	ldr	r1, [pc, #308]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d044      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d107      	bne.n	800535e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	4b47      	ldr	r3, [pc, #284]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d119      	bne.n	800538e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e07f      	b.n	800545e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d003      	beq.n	800536e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800536a:	2b03      	cmp	r3, #3
 800536c:	d107      	bne.n	800537e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536e:	4b3f      	ldr	r3, [pc, #252]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e06f      	b.n	800545e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537e:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e067      	b.n	800545e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800538e:	4b37      	ldr	r3, [pc, #220]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4934      	ldr	r1, [pc, #208]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053a0:	f7fe f830 	bl	8003404 <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	e00a      	b.n	80053be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a8:	f7fe f82c 	bl	8003404 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e04f      	b.n	800545e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	4b2b      	ldr	r3, [pc, #172]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 020c 	and.w	r2, r3, #12
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d1eb      	bne.n	80053a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053d0:	4b25      	ldr	r3, [pc, #148]	@ (8005468 <HAL_RCC_ClockConfig+0x1b8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d20c      	bcs.n	80053f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b22      	ldr	r3, [pc, #136]	@ (8005468 <HAL_RCC_ClockConfig+0x1b8>)
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	4b20      	ldr	r3, [pc, #128]	@ (8005468 <HAL_RCC_ClockConfig+0x1b8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e032      	b.n	800545e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005404:	4b19      	ldr	r3, [pc, #100]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4916      	ldr	r1, [pc, #88]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005422:	4b12      	ldr	r3, [pc, #72]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	490e      	ldr	r1, [pc, #56]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	4313      	orrs	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005436:	f000 f855 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 800543a:	4602      	mov	r2, r0
 800543c:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	091b      	lsrs	r3, r3, #4
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	490a      	ldr	r1, [pc, #40]	@ (8005470 <HAL_RCC_ClockConfig+0x1c0>)
 8005448:	5ccb      	ldrb	r3, [r1, r3]
 800544a:	fa22 f303 	lsr.w	r3, r2, r3
 800544e:	4a09      	ldr	r2, [pc, #36]	@ (8005474 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005452:	4b09      	ldr	r3, [pc, #36]	@ (8005478 <HAL_RCC_ClockConfig+0x1c8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd ff90 	bl	800337c <HAL_InitTick>

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40023c00 	.word	0x40023c00
 800546c:	40023800 	.word	0x40023800
 8005470:	0800d0d0 	.word	0x0800d0d0
 8005474:	2000002c 	.word	0x2000002c
 8005478:	20000030 	.word	0x20000030

0800547c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005480:	4b03      	ldr	r3, [pc, #12]	@ (8005490 <HAL_RCC_GetHCLKFreq+0x14>)
 8005482:	681b      	ldr	r3, [r3, #0]
}
 8005484:	4618      	mov	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2000002c 	.word	0x2000002c

08005494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005498:	f7ff fff0 	bl	800547c <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	0a9b      	lsrs	r3, r3, #10
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4903      	ldr	r1, [pc, #12]	@ (80054b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40023800 	.word	0x40023800
 80054b8:	0800d0e0 	.word	0x0800d0e0

080054bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054c0:	f7ff ffdc 	bl	800547c <HAL_RCC_GetHCLKFreq>
 80054c4:	4602      	mov	r2, r0
 80054c6:	4b05      	ldr	r3, [pc, #20]	@ (80054dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	0b5b      	lsrs	r3, r3, #13
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	4903      	ldr	r1, [pc, #12]	@ (80054e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d2:	5ccb      	ldrb	r3, [r1, r3]
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40023800 	.word	0x40023800
 80054e0:	0800d0e0 	.word	0x0800d0e0

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e8:	b0ae      	sub	sp, #184	@ 0xb8
 80054ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800550a:	4bcb      	ldr	r3, [pc, #812]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b0c      	cmp	r3, #12
 8005514:	f200 8206 	bhi.w	8005924 <HAL_RCC_GetSysClockFreq+0x440>
 8005518:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <HAL_RCC_GetSysClockFreq+0x3c>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005555 	.word	0x08005555
 8005524:	08005925 	.word	0x08005925
 8005528:	08005925 	.word	0x08005925
 800552c:	08005925 	.word	0x08005925
 8005530:	0800555d 	.word	0x0800555d
 8005534:	08005925 	.word	0x08005925
 8005538:	08005925 	.word	0x08005925
 800553c:	08005925 	.word	0x08005925
 8005540:	08005565 	.word	0x08005565
 8005544:	08005925 	.word	0x08005925
 8005548:	08005925 	.word	0x08005925
 800554c:	08005925 	.word	0x08005925
 8005550:	08005755 	.word	0x08005755
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005554:	4bb9      	ldr	r3, [pc, #740]	@ (800583c <HAL_RCC_GetSysClockFreq+0x358>)
 8005556:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800555a:	e1e7      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800555c:	4bb8      	ldr	r3, [pc, #736]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x35c>)
 800555e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005562:	e1e3      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005564:	4bb4      	ldr	r3, [pc, #720]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800556c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005570:	4bb1      	ldr	r3, [pc, #708]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d071      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800557c:	4bae      	ldr	r3, [pc, #696]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005588:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800558c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005598:	2300      	movs	r3, #0
 800559a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800559e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	f04f 0000 	mov.w	r0, #0
 80055aa:	f04f 0100 	mov.w	r1, #0
 80055ae:	0159      	lsls	r1, r3, #5
 80055b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055b4:	0150      	lsls	r0, r2, #5
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4621      	mov	r1, r4
 80055bc:	1a51      	subs	r1, r2, r1
 80055be:	6439      	str	r1, [r7, #64]	@ 0x40
 80055c0:	4629      	mov	r1, r5
 80055c2:	eb63 0301 	sbc.w	r3, r3, r1
 80055c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80055d4:	4649      	mov	r1, r9
 80055d6:	018b      	lsls	r3, r1, #6
 80055d8:	4641      	mov	r1, r8
 80055da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055de:	4641      	mov	r1, r8
 80055e0:	018a      	lsls	r2, r1, #6
 80055e2:	4641      	mov	r1, r8
 80055e4:	1a51      	subs	r1, r2, r1
 80055e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055e8:	4649      	mov	r1, r9
 80055ea:	eb63 0301 	sbc.w	r3, r3, r1
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80055fc:	4649      	mov	r1, r9
 80055fe:	00cb      	lsls	r3, r1, #3
 8005600:	4641      	mov	r1, r8
 8005602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005606:	4641      	mov	r1, r8
 8005608:	00ca      	lsls	r2, r1, #3
 800560a:	4610      	mov	r0, r2
 800560c:	4619      	mov	r1, r3
 800560e:	4603      	mov	r3, r0
 8005610:	4622      	mov	r2, r4
 8005612:	189b      	adds	r3, r3, r2
 8005614:	633b      	str	r3, [r7, #48]	@ 0x30
 8005616:	462b      	mov	r3, r5
 8005618:	460a      	mov	r2, r1
 800561a:	eb42 0303 	adc.w	r3, r2, r3
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800562c:	4629      	mov	r1, r5
 800562e:	024b      	lsls	r3, r1, #9
 8005630:	4621      	mov	r1, r4
 8005632:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005636:	4621      	mov	r1, r4
 8005638:	024a      	lsls	r2, r1, #9
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005642:	2200      	movs	r2, #0
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800564c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005650:	f7fb fb3a 	bl	8000cc8 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4613      	mov	r3, r2
 800565a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800565e:	e067      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005660:	4b75      	ldr	r3, [pc, #468]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	099b      	lsrs	r3, r3, #6
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800566c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005670:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800567a:	2300      	movs	r3, #0
 800567c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800567e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005682:	4622      	mov	r2, r4
 8005684:	462b      	mov	r3, r5
 8005686:	f04f 0000 	mov.w	r0, #0
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	0159      	lsls	r1, r3, #5
 8005690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005694:	0150      	lsls	r0, r2, #5
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4621      	mov	r1, r4
 800569c:	1a51      	subs	r1, r2, r1
 800569e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056a0:	4629      	mov	r1, r5
 80056a2:	eb63 0301 	sbc.w	r3, r3, r1
 80056a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80056b4:	4649      	mov	r1, r9
 80056b6:	018b      	lsls	r3, r1, #6
 80056b8:	4641      	mov	r1, r8
 80056ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056be:	4641      	mov	r1, r8
 80056c0:	018a      	lsls	r2, r1, #6
 80056c2:	4641      	mov	r1, r8
 80056c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80056c8:	4649      	mov	r1, r9
 80056ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056e2:	4692      	mov	sl, r2
 80056e4:	469b      	mov	fp, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	eb1a 0303 	adds.w	r3, sl, r3
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	462b      	mov	r3, r5
 80056f0:	eb4b 0303 	adc.w	r3, fp, r3
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005702:	4629      	mov	r1, r5
 8005704:	028b      	lsls	r3, r1, #10
 8005706:	4621      	mov	r1, r4
 8005708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800570c:	4621      	mov	r1, r4
 800570e:	028a      	lsls	r2, r1, #10
 8005710:	4610      	mov	r0, r2
 8005712:	4619      	mov	r1, r3
 8005714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005718:	2200      	movs	r2, #0
 800571a:	673b      	str	r3, [r7, #112]	@ 0x70
 800571c:	677a      	str	r2, [r7, #116]	@ 0x74
 800571e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005722:	f7fb fad1 	bl	8000cc8 <__aeabi_uldivmod>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4613      	mov	r3, r2
 800572c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005730:	4b41      	ldr	r3, [pc, #260]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	3301      	adds	r3, #1
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005752:	e0eb      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005754:	4b38      	ldr	r3, [pc, #224]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800575c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005760:	4b35      	ldr	r3, [pc, #212]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d06b      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800576c:	4b32      	ldr	r3, [pc, #200]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x354>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	099b      	lsrs	r3, r3, #6
 8005772:	2200      	movs	r2, #0
 8005774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005776:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005780:	2300      	movs	r3, #0
 8005782:	667b      	str	r3, [r7, #100]	@ 0x64
 8005784:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005788:	4622      	mov	r2, r4
 800578a:	462b      	mov	r3, r5
 800578c:	f04f 0000 	mov.w	r0, #0
 8005790:	f04f 0100 	mov.w	r1, #0
 8005794:	0159      	lsls	r1, r3, #5
 8005796:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800579a:	0150      	lsls	r0, r2, #5
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4621      	mov	r1, r4
 80057a2:	1a51      	subs	r1, r2, r1
 80057a4:	61b9      	str	r1, [r7, #24]
 80057a6:	4629      	mov	r1, r5
 80057a8:	eb63 0301 	sbc.w	r3, r3, r1
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80057ba:	4659      	mov	r1, fp
 80057bc:	018b      	lsls	r3, r1, #6
 80057be:	4651      	mov	r1, sl
 80057c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057c4:	4651      	mov	r1, sl
 80057c6:	018a      	lsls	r2, r1, #6
 80057c8:	4651      	mov	r1, sl
 80057ca:	ebb2 0801 	subs.w	r8, r2, r1
 80057ce:	4659      	mov	r1, fp
 80057d0:	eb63 0901 	sbc.w	r9, r3, r1
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057e8:	4690      	mov	r8, r2
 80057ea:	4699      	mov	r9, r3
 80057ec:	4623      	mov	r3, r4
 80057ee:	eb18 0303 	adds.w	r3, r8, r3
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	462b      	mov	r3, r5
 80057f6:	eb49 0303 	adc.w	r3, r9, r3
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005808:	4629      	mov	r1, r5
 800580a:	024b      	lsls	r3, r1, #9
 800580c:	4621      	mov	r1, r4
 800580e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005812:	4621      	mov	r1, r4
 8005814:	024a      	lsls	r2, r1, #9
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800581e:	2200      	movs	r2, #0
 8005820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005822:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005824:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005828:	f7fb fa4e 	bl	8000cc8 <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4613      	mov	r3, r2
 8005832:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005836:	e065      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x420>
 8005838:	40023800 	.word	0x40023800
 800583c:	00f42400 	.word	0x00f42400
 8005840:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005844:	4b3d      	ldr	r3, [pc, #244]	@ (800593c <HAL_RCC_GetSysClockFreq+0x458>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	099b      	lsrs	r3, r3, #6
 800584a:	2200      	movs	r2, #0
 800584c:	4618      	mov	r0, r3
 800584e:	4611      	mov	r1, r2
 8005850:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005854:	653b      	str	r3, [r7, #80]	@ 0x50
 8005856:	2300      	movs	r3, #0
 8005858:	657b      	str	r3, [r7, #84]	@ 0x54
 800585a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800585e:	4642      	mov	r2, r8
 8005860:	464b      	mov	r3, r9
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f04f 0100 	mov.w	r1, #0
 800586a:	0159      	lsls	r1, r3, #5
 800586c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005870:	0150      	lsls	r0, r2, #5
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4641      	mov	r1, r8
 8005878:	1a51      	subs	r1, r2, r1
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	4649      	mov	r1, r9
 800587e:	eb63 0301 	sbc.w	r3, r3, r1
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005890:	4659      	mov	r1, fp
 8005892:	018b      	lsls	r3, r1, #6
 8005894:	4651      	mov	r1, sl
 8005896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800589a:	4651      	mov	r1, sl
 800589c:	018a      	lsls	r2, r1, #6
 800589e:	4651      	mov	r1, sl
 80058a0:	1a54      	subs	r4, r2, r1
 80058a2:	4659      	mov	r1, fp
 80058a4:	eb63 0501 	sbc.w	r5, r3, r1
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	00eb      	lsls	r3, r5, #3
 80058b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b6:	00e2      	lsls	r2, r4, #3
 80058b8:	4614      	mov	r4, r2
 80058ba:	461d      	mov	r5, r3
 80058bc:	4643      	mov	r3, r8
 80058be:	18e3      	adds	r3, r4, r3
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	464b      	mov	r3, r9
 80058c4:	eb45 0303 	adc.w	r3, r5, r3
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058d6:	4629      	mov	r1, r5
 80058d8:	028b      	lsls	r3, r1, #10
 80058da:	4621      	mov	r1, r4
 80058dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058e0:	4621      	mov	r1, r4
 80058e2:	028a      	lsls	r2, r1, #10
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ec:	2200      	movs	r2, #0
 80058ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80058f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058f6:	f7fb f9e7 	bl	8000cc8 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4613      	mov	r3, r2
 8005900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005904:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <HAL_RCC_GetSysClockFreq+0x458>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	0f1b      	lsrs	r3, r3, #28
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005922:	e003      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800592a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800592c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005930:	4618      	mov	r0, r3
 8005932:	37b8      	adds	r7, #184	@ 0xb8
 8005934:	46bd      	mov	sp, r7
 8005936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800
 8005940:	00f42400 	.word	0x00f42400

08005944 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e28d      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8083 	beq.w	8005a6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005964:	4b94      	ldr	r3, [pc, #592]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	2b04      	cmp	r3, #4
 800596e:	d019      	beq.n	80059a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005970:	4b91      	ldr	r3, [pc, #580]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
        || \
 8005978:	2b08      	cmp	r3, #8
 800597a:	d106      	bne.n	800598a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800597c:	4b8e      	ldr	r3, [pc, #568]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005988:	d00c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800598a:	4b8b      	ldr	r3, [pc, #556]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005992:	2b0c      	cmp	r3, #12
 8005994:	d112      	bne.n	80059bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005996:	4b88      	ldr	r3, [pc, #544]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800599e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059a2:	d10b      	bne.n	80059bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a4:	4b84      	ldr	r3, [pc, #528]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d05b      	beq.n	8005a68 <HAL_RCC_OscConfig+0x124>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d157      	bne.n	8005a68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e25a      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059c4:	d106      	bne.n	80059d4 <HAL_RCC_OscConfig+0x90>
 80059c6:	4b7c      	ldr	r3, [pc, #496]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a7b      	ldr	r2, [pc, #492]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e01d      	b.n	8005a10 <HAL_RCC_OscConfig+0xcc>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCC_OscConfig+0xb4>
 80059de:	4b76      	ldr	r3, [pc, #472]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a75      	ldr	r2, [pc, #468]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	4b73      	ldr	r3, [pc, #460]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a72      	ldr	r2, [pc, #456]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e00b      	b.n	8005a10 <HAL_RCC_OscConfig+0xcc>
 80059f8:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a6e      	ldr	r2, [pc, #440]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	4b6c      	ldr	r3, [pc, #432]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a6b      	ldr	r2, [pc, #428]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d013      	beq.n	8005a40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a18:	f7fd fcf4 	bl	8003404 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fd fcf0 	bl	8003404 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	@ 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e21f      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a32:	4b61      	ldr	r3, [pc, #388]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0xdc>
 8005a3e:	e014      	b.n	8005a6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd fce0 	bl	8003404 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fd fcdc 	bl	8003404 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	@ 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e20b      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a5a:	4b57      	ldr	r3, [pc, #348]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x104>
 8005a66:	e000      	b.n	8005a6a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d06f      	beq.n	8005b56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a76:	4b50      	ldr	r3, [pc, #320]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d017      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a82:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d105      	bne.n	8005a9a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a9a:	4b47      	ldr	r3, [pc, #284]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d11c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa6:	4b44      	ldr	r3, [pc, #272]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d116      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	4b41      	ldr	r3, [pc, #260]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_RCC_OscConfig+0x186>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e1d3      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aca:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4937      	ldr	r1, [pc, #220]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ade:	e03a      	b.n	8005b56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ae8:	4b34      	ldr	r3, [pc, #208]	@ (8005bbc <HAL_RCC_OscConfig+0x278>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aee:	f7fd fc89 	bl	8003404 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af6:	f7fd fc85 	bl	8003404 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e1b4      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b08:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f0      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	4b28      	ldr	r3, [pc, #160]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4925      	ldr	r1, [pc, #148]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]
 8005b28:	e015      	b.n	8005b56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b2a:	4b24      	ldr	r3, [pc, #144]	@ (8005bbc <HAL_RCC_OscConfig+0x278>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fd fc68 	bl	8003404 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b38:	f7fd fc64 	bl	8003404 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e193      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f0      	bne.n	8005b38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d036      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b6a:	4b15      	ldr	r3, [pc, #84]	@ (8005bc0 <HAL_RCC_OscConfig+0x27c>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fd fc48 	bl	8003404 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fd fc44 	bl	8003404 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e173      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <HAL_RCC_OscConfig+0x274>)
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0x234>
 8005b96:	e01b      	b.n	8005bd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b98:	4b09      	ldr	r3, [pc, #36]	@ (8005bc0 <HAL_RCC_OscConfig+0x27c>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9e:	f7fd fc31 	bl	8003404 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	e00e      	b.n	8005bc4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba6:	f7fd fc2d 	bl	8003404 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d907      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e15c      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	42470000 	.word	0x42470000
 8005bc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ea      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8097 	beq.w	8005d0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be2:	4b83      	ldr	r3, [pc, #524]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0e:	4b79      	ldr	r3, [pc, #484]	@ (8005df4 <HAL_RCC_OscConfig+0x4b0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d118      	bne.n	8005c4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c1a:	4b76      	ldr	r3, [pc, #472]	@ (8005df4 <HAL_RCC_OscConfig+0x4b0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a75      	ldr	r2, [pc, #468]	@ (8005df4 <HAL_RCC_OscConfig+0x4b0>)
 8005c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c26:	f7fd fbed 	bl	8003404 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2e:	f7fd fbe9 	bl	8003404 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e118      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c40:	4b6c      	ldr	r3, [pc, #432]	@ (8005df4 <HAL_RCC_OscConfig+0x4b0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_OscConfig+0x31e>
 8005c54:	4b66      	ldr	r3, [pc, #408]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c58:	4a65      	ldr	r2, [pc, #404]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c60:	e01c      	b.n	8005c9c <HAL_RCC_OscConfig+0x358>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d10c      	bne.n	8005c84 <HAL_RCC_OscConfig+0x340>
 8005c6a:	4b61      	ldr	r3, [pc, #388]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6e:	4a60      	ldr	r2, [pc, #384]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c70:	f043 0304 	orr.w	r3, r3, #4
 8005c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c76:	4b5e      	ldr	r3, [pc, #376]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c82:	e00b      	b.n	8005c9c <HAL_RCC_OscConfig+0x358>
 8005c84:	4b5a      	ldr	r3, [pc, #360]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c88:	4a59      	ldr	r2, [pc, #356]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c90:	4b57      	ldr	r3, [pc, #348]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c94:	4a56      	ldr	r2, [pc, #344]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005c96:	f023 0304 	bic.w	r3, r3, #4
 8005c9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d015      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fd fbae 	bl	8003404 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cac:	f7fd fbaa 	bl	8003404 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0d7      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0ee      	beq.n	8005cac <HAL_RCC_OscConfig+0x368>
 8005cce:	e014      	b.n	8005cfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd0:	f7fd fb98 	bl	8003404 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd8:	f7fd fb94 	bl	8003404 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0c1      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cee:	4b40      	ldr	r3, [pc, #256]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1ee      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d105      	bne.n	8005d0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d00:	4b3b      	ldr	r3, [pc, #236]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	4a3a      	ldr	r2, [pc, #232]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80ad 	beq.w	8005e70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d16:	4b36      	ldr	r3, [pc, #216]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 030c 	and.w	r3, r3, #12
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d060      	beq.n	8005de4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d145      	bne.n	8005db6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d2a:	4b33      	ldr	r3, [pc, #204]	@ (8005df8 <HAL_RCC_OscConfig+0x4b4>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fd fb68 	bl	8003404 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d38:	f7fd fb64 	bl	8003404 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e093      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	4b29      	ldr	r3, [pc, #164]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d80:	071b      	lsls	r3, r3, #28
 8005d82:	491b      	ldr	r1, [pc, #108]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d88:	4b1b      	ldr	r3, [pc, #108]	@ (8005df8 <HAL_RCC_OscConfig+0x4b4>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fd fb39 	bl	8003404 <HAL_GetTick>
 8005d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d96:	f7fd fb35 	bl	8003404 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e064      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCC_OscConfig+0x452>
 8005db4:	e05c      	b.n	8005e70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db6:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <HAL_RCC_OscConfig+0x4b4>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fd fb22 	bl	8003404 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc4:	f7fd fb1e 	bl	8003404 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e04d      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd6:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <HAL_RCC_OscConfig+0x4ac>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x480>
 8005de2:	e045      	b.n	8005e70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d107      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e040      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
 8005df0:	40023800 	.word	0x40023800
 8005df4:	40007000 	.word	0x40007000
 8005df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <HAL_RCC_OscConfig+0x538>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d030      	beq.n	8005e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d129      	bne.n	8005e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d122      	bne.n	8005e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d119      	bne.n	8005e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	3b01      	subs	r3, #1
 8005e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d10f      	bne.n	8005e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d107      	bne.n	8005e6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800

08005e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e041      	b.n	8005f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc ff38 	bl	8002d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f000 fc0c 	bl	80066dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e041      	b.n	8005fb4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f839 	bl	8005fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f000 fbbd 	bl	80066dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <HAL_TIM_PWM_Start+0x24>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e022      	b.n	800603a <HAL_TIM_PWM_Start+0x6a>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d109      	bne.n	800600e <HAL_TIM_PWM_Start+0x3e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	bf14      	ite	ne
 8006006:	2301      	movne	r3, #1
 8006008:	2300      	moveq	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e015      	b.n	800603a <HAL_TIM_PWM_Start+0x6a>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d109      	bne.n	8006028 <HAL_TIM_PWM_Start+0x58>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	e008      	b.n	800603a <HAL_TIM_PWM_Start+0x6a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	bf14      	ite	ne
 8006034:	2301      	movne	r3, #1
 8006036:	2300      	moveq	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e07c      	b.n	800613c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <HAL_TIM_PWM_Start+0x82>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006050:	e013      	b.n	800607a <HAL_TIM_PWM_Start+0xaa>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b04      	cmp	r3, #4
 8006056:	d104      	bne.n	8006062 <HAL_TIM_PWM_Start+0x92>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006060:	e00b      	b.n	800607a <HAL_TIM_PWM_Start+0xaa>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d104      	bne.n	8006072 <HAL_TIM_PWM_Start+0xa2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006070:	e003      	b.n	800607a <HAL_TIM_PWM_Start+0xaa>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2201      	movs	r2, #1
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fe20 	bl	8006cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2d      	ldr	r2, [pc, #180]	@ (8006144 <HAL_TIM_PWM_Start+0x174>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_TIM_PWM_Start+0xcc>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2c      	ldr	r2, [pc, #176]	@ (8006148 <HAL_TIM_PWM_Start+0x178>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d101      	bne.n	80060a0 <HAL_TIM_PWM_Start+0xd0>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <HAL_TIM_PWM_Start+0xd2>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a22      	ldr	r2, [pc, #136]	@ (8006144 <HAL_TIM_PWM_Start+0x174>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d022      	beq.n	8006106 <HAL_TIM_PWM_Start+0x136>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c8:	d01d      	beq.n	8006106 <HAL_TIM_PWM_Start+0x136>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1f      	ldr	r2, [pc, #124]	@ (800614c <HAL_TIM_PWM_Start+0x17c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <HAL_TIM_PWM_Start+0x136>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006150 <HAL_TIM_PWM_Start+0x180>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_TIM_PWM_Start+0x136>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006154 <HAL_TIM_PWM_Start+0x184>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <HAL_TIM_PWM_Start+0x136>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a16      	ldr	r2, [pc, #88]	@ (8006148 <HAL_TIM_PWM_Start+0x178>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIM_PWM_Start+0x136>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <HAL_TIM_PWM_Start+0x188>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIM_PWM_Start+0x136>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a16      	ldr	r2, [pc, #88]	@ (800615c <HAL_TIM_PWM_Start+0x18c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d111      	bne.n	800612a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b06      	cmp	r3, #6
 8006116:	d010      	beq.n	800613a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006128:	e007      	b.n	800613a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0201 	orr.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40010000 	.word	0x40010000
 8006148:	40010400 	.word	0x40010400
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40014000 	.word	0x40014000
 800615c:	40001800 	.word	0x40001800

08006160 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e097      	b.n	80062a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7fc fcf7 	bl	8002b7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2202      	movs	r2, #2
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061a4:	f023 0307 	bic.w	r3, r3, #7
 80061a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f000 fa91 	bl	80066dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e2:	f023 0303 	bic.w	r3, r3, #3
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	4313      	orrs	r3, r2
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006200:	f023 030c 	bic.w	r3, r3, #12
 8006204:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800620c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	4313      	orrs	r3, r2
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	011a      	lsls	r2, r3, #4
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	031b      	lsls	r3, r3, #12
 8006230:	4313      	orrs	r3, r2
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	4313      	orrs	r3, r2
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d110      	bne.n	80062fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d102      	bne.n	80062e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062e2:	7b7b      	ldrb	r3, [r7, #13]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d001      	beq.n	80062ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e069      	b.n	80063c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062fc:	e031      	b.n	8006362 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b04      	cmp	r3, #4
 8006302:	d110      	bne.n	8006326 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d102      	bne.n	8006310 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800630a:	7b3b      	ldrb	r3, [r7, #12]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d001      	beq.n	8006314 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e055      	b.n	80063c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006324:	e01d      	b.n	8006362 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d108      	bne.n	800633e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d105      	bne.n	800633e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006332:	7b7b      	ldrb	r3, [r7, #13]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d102      	bne.n	800633e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006338:	7b3b      	ldrb	r3, [r7, #12]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d001      	beq.n	8006342 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e03e      	b.n	80063c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2202      	movs	r2, #2
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_TIM_Encoder_Start+0xc4>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b04      	cmp	r3, #4
 800636c:	d008      	beq.n	8006380 <HAL_TIM_Encoder_Start+0xd4>
 800636e:	e00f      	b.n	8006390 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2201      	movs	r2, #1
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fca5 	bl	8006cc8 <TIM_CCxChannelCmd>
      break;
 800637e:	e016      	b.n	80063ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2201      	movs	r2, #1
 8006386:	2104      	movs	r1, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fc9d 	bl	8006cc8 <TIM_CCxChannelCmd>
      break;
 800638e:	e00e      	b.n	80063ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2201      	movs	r2, #1
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fc95 	bl	8006cc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2201      	movs	r2, #1
 80063a4:	2104      	movs	r1, #4
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fc8e 	bl	8006cc8 <TIM_CCxChannelCmd>
      break;
 80063ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0201 	orr.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e0ae      	b.n	8006544 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b0c      	cmp	r3, #12
 80063f2:	f200 809f 	bhi.w	8006534 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063f6:	a201      	add	r2, pc, #4	@ (adr r2, 80063fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006431 	.word	0x08006431
 8006400:	08006535 	.word	0x08006535
 8006404:	08006535 	.word	0x08006535
 8006408:	08006535 	.word	0x08006535
 800640c:	08006471 	.word	0x08006471
 8006410:	08006535 	.word	0x08006535
 8006414:	08006535 	.word	0x08006535
 8006418:	08006535 	.word	0x08006535
 800641c:	080064b3 	.word	0x080064b3
 8006420:	08006535 	.word	0x08006535
 8006424:	08006535 	.word	0x08006535
 8006428:	08006535 	.word	0x08006535
 800642c:	080064f3 	.word	0x080064f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f9fc 	bl	8006834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0204 	bic.w	r2, r2, #4
 800645a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6999      	ldr	r1, [r3, #24]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	619a      	str	r2, [r3, #24]
      break;
 800646e:	e064      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fa4c 	bl	8006914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800648a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800649a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6999      	ldr	r1, [r3, #24]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	619a      	str	r2, [r3, #24]
      break;
 80064b0:	e043      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 faa1 	bl	8006a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0208 	orr.w	r2, r2, #8
 80064cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69da      	ldr	r2, [r3, #28]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0204 	bic.w	r2, r2, #4
 80064dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69d9      	ldr	r1, [r3, #28]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	61da      	str	r2, [r3, #28]
      break;
 80064f0:	e023      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 faf5 	bl	8006ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800650c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800651c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69d9      	ldr	r1, [r3, #28]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	021a      	lsls	r2, r3, #8
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	61da      	str	r2, [r3, #28]
      break;
 8006532:	e002      	b.n	800653a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	75fb      	strb	r3, [r7, #23]
      break;
 8006538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_TIM_ConfigClockSource+0x1c>
 8006564:	2302      	movs	r3, #2
 8006566:	e0b4      	b.n	80066d2 <HAL_TIM_ConfigClockSource+0x186>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800658e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a0:	d03e      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065a6:	f200 8087 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ae:	f000 8086 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x172>
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b6:	d87f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b70      	cmp	r3, #112	@ 0x70
 80065ba:	d01a      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0xa6>
 80065bc:	2b70      	cmp	r3, #112	@ 0x70
 80065be:	d87b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c0:	2b60      	cmp	r3, #96	@ 0x60
 80065c2:	d050      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x11a>
 80065c4:	2b60      	cmp	r3, #96	@ 0x60
 80065c6:	d877      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b50      	cmp	r3, #80	@ 0x50
 80065ca:	d03c      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0xfa>
 80065cc:	2b50      	cmp	r3, #80	@ 0x50
 80065ce:	d873      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b40      	cmp	r3, #64	@ 0x40
 80065d2:	d058      	beq.n	8006686 <HAL_TIM_ConfigClockSource+0x13a>
 80065d4:	2b40      	cmp	r3, #64	@ 0x40
 80065d6:	d86f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b30      	cmp	r3, #48	@ 0x30
 80065da:	d064      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065dc:	2b30      	cmp	r3, #48	@ 0x30
 80065de:	d86b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d060      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d867      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d05c      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d05a      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	e062      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006602:	f000 fb41 	bl	8006c88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	609a      	str	r2, [r3, #8]
      break;
 800661e:	e04f      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006630:	f000 fb2a 	bl	8006c88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006642:	609a      	str	r2, [r3, #8]
      break;
 8006644:	e03c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006652:	461a      	mov	r2, r3
 8006654:	f000 fa9e 	bl	8006b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2150      	movs	r1, #80	@ 0x50
 800665e:	4618      	mov	r0, r3
 8006660:	f000 faf7 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 8006664:	e02c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006672:	461a      	mov	r2, r3
 8006674:	f000 fabd 	bl	8006bf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2160      	movs	r1, #96	@ 0x60
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fae7 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 8006684:	e01c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	461a      	mov	r2, r3
 8006694:	f000 fa7e 	bl	8006b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2140      	movs	r1, #64	@ 0x40
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fad7 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 80066a4:	e00c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 face 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 80066b6:	e003      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e000      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a46      	ldr	r2, [pc, #280]	@ (8006808 <TIM_Base_SetConfig+0x12c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d013      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066fa:	d00f      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a43      	ldr	r2, [pc, #268]	@ (800680c <TIM_Base_SetConfig+0x130>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00b      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a42      	ldr	r2, [pc, #264]	@ (8006810 <TIM_Base_SetConfig+0x134>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d007      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a41      	ldr	r2, [pc, #260]	@ (8006814 <TIM_Base_SetConfig+0x138>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a40      	ldr	r2, [pc, #256]	@ (8006818 <TIM_Base_SetConfig+0x13c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d108      	bne.n	800672e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a35      	ldr	r2, [pc, #212]	@ (8006808 <TIM_Base_SetConfig+0x12c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d02b      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673c:	d027      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a32      	ldr	r2, [pc, #200]	@ (800680c <TIM_Base_SetConfig+0x130>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d023      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a31      	ldr	r2, [pc, #196]	@ (8006810 <TIM_Base_SetConfig+0x134>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d01f      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a30      	ldr	r2, [pc, #192]	@ (8006814 <TIM_Base_SetConfig+0x138>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01b      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a2f      	ldr	r2, [pc, #188]	@ (8006818 <TIM_Base_SetConfig+0x13c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d017      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2e      	ldr	r2, [pc, #184]	@ (800681c <TIM_Base_SetConfig+0x140>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d013      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2d      	ldr	r2, [pc, #180]	@ (8006820 <TIM_Base_SetConfig+0x144>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00f      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2c      	ldr	r2, [pc, #176]	@ (8006824 <TIM_Base_SetConfig+0x148>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00b      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2b      	ldr	r2, [pc, #172]	@ (8006828 <TIM_Base_SetConfig+0x14c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d007      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2a      	ldr	r2, [pc, #168]	@ (800682c <TIM_Base_SetConfig+0x150>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d003      	beq.n	800678e <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a29      	ldr	r2, [pc, #164]	@ (8006830 <TIM_Base_SetConfig+0x154>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d108      	bne.n	80067a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a10      	ldr	r2, [pc, #64]	@ (8006808 <TIM_Base_SetConfig+0x12c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_Base_SetConfig+0xf8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a12      	ldr	r2, [pc, #72]	@ (8006818 <TIM_Base_SetConfig+0x13c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d103      	bne.n	80067dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d105      	bne.n	80067fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f023 0201 	bic.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	611a      	str	r2, [r3, #16]
  }
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40010000 	.word	0x40010000
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40010400 	.word	0x40010400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800
 8006828:	40001800 	.word	0x40001800
 800682c:	40001c00 	.word	0x40001c00
 8006830:	40002000 	.word	0x40002000

08006834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	f023 0201 	bic.w	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 0302 	bic.w	r3, r3, #2
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a20      	ldr	r2, [pc, #128]	@ (800690c <TIM_OC1_SetConfig+0xd8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC1_SetConfig+0x64>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1f      	ldr	r2, [pc, #124]	@ (8006910 <TIM_OC1_SetConfig+0xdc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10c      	bne.n	80068b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0308 	bic.w	r3, r3, #8
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a15      	ldr	r2, [pc, #84]	@ (800690c <TIM_OC1_SetConfig+0xd8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d003      	beq.n	80068c2 <TIM_OC1_SetConfig+0x8e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a14      	ldr	r2, [pc, #80]	@ (8006910 <TIM_OC1_SetConfig+0xdc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d111      	bne.n	80068e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	621a      	str	r2, [r3, #32]
}
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	40010000 	.word	0x40010000
 8006910:	40010400 	.word	0x40010400

08006914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	f023 0210 	bic.w	r2, r3, #16
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800694a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0320 	bic.w	r3, r3, #32
 800695e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a22      	ldr	r2, [pc, #136]	@ (80069f8 <TIM_OC2_SetConfig+0xe4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC2_SetConfig+0x68>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a21      	ldr	r2, [pc, #132]	@ (80069fc <TIM_OC2_SetConfig+0xe8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10d      	bne.n	8006998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a17      	ldr	r2, [pc, #92]	@ (80069f8 <TIM_OC2_SetConfig+0xe4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_OC2_SetConfig+0x94>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a16      	ldr	r2, [pc, #88]	@ (80069fc <TIM_OC2_SetConfig+0xe8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d113      	bne.n	80069d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	621a      	str	r2, [r3, #32]
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40010400 	.word	0x40010400

08006a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a21      	ldr	r2, [pc, #132]	@ (8006ae0 <TIM_OC3_SetConfig+0xe0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_OC3_SetConfig+0x66>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a20      	ldr	r2, [pc, #128]	@ (8006ae4 <TIM_OC3_SetConfig+0xe4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10d      	bne.n	8006a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a16      	ldr	r2, [pc, #88]	@ (8006ae0 <TIM_OC3_SetConfig+0xe0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d003      	beq.n	8006a92 <TIM_OC3_SetConfig+0x92>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a15      	ldr	r2, [pc, #84]	@ (8006ae4 <TIM_OC3_SetConfig+0xe4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d113      	bne.n	8006aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40010400 	.word	0x40010400

08006ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	031b      	lsls	r3, r3, #12
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a12      	ldr	r2, [pc, #72]	@ (8006b8c <TIM_OC4_SetConfig+0xa4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_OC4_SetConfig+0x68>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a11      	ldr	r2, [pc, #68]	@ (8006b90 <TIM_OC4_SetConfig+0xa8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d109      	bne.n	8006b64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	019b      	lsls	r3, r3, #6
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	621a      	str	r2, [r3, #32]
}
 8006b7e:	bf00      	nop
 8006b80:	371c      	adds	r7, #28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40010400 	.word	0x40010400

08006b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 030a 	bic.w	r3, r3, #10
 8006bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b087      	sub	sp, #28
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f023 0210 	bic.w	r2, r3, #16
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	031b      	lsls	r3, r3, #12
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f043 0307 	orr.w	r3, r3, #7
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	609a      	str	r2, [r3, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2201      	movs	r2, #1
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	401a      	ands	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1a      	ldr	r2, [r3, #32]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006d00:	431a      	orrs	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
	...

08006d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e05a      	b.n	8006de2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a21      	ldr	r2, [pc, #132]	@ (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d022      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d78:	d01d      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d018      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1b      	ldr	r2, [pc, #108]	@ (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1a      	ldr	r2, [pc, #104]	@ (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00e      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a18      	ldr	r2, [pc, #96]	@ (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d009      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a17      	ldr	r2, [pc, #92]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a15      	ldr	r2, [pc, #84]	@ (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d10c      	bne.n	8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40000400 	.word	0x40000400
 8006df8:	40000800 	.word	0x40000800
 8006dfc:	40000c00 	.word	0x40000c00
 8006e00:	40010400 	.word	0x40010400
 8006e04:	40014000 	.word	0x40014000
 8006e08:	40001800 	.word	0x40001800

08006e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e042      	b.n	8006ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fc f89c 	bl	8002f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	@ 0x24
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 ff4f 	bl	8007cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	@ 0x28
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d175      	bne.n	8006fb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_UART_Transmit+0x2c>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e06e      	b.n	8006fba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2221      	movs	r2, #33	@ 0x21
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eea:	f7fc fa8b 	bl	8003404 <HAL_GetTick>
 8006eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f04:	d108      	bne.n	8006f18 <HAL_UART_Transmit+0x6c>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e003      	b.n	8006f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f20:	e02e      	b.n	8006f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	@ 0x80
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fc27 	bl	8007780 <UART_WaitOnFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e03a      	b.n	8006fba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	3302      	adds	r3, #2
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	e007      	b.n	8006f72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1cb      	bne.n	8006f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2140      	movs	r1, #64	@ 0x40
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fbf3 	bl	8007780 <UART_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e006      	b.n	8006fba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d112      	bne.n	8007002 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_UART_Receive_DMA+0x26>
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e00b      	b.n	8007004 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fc1b 	bl	8007834 <UART_Start_Receive_DMA>
 8006ffe:	4603      	mov	r3, r0
 8007000:	e000      	b.n	8007004 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0ba      	sub	sp, #232	@ 0xe8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007032:	2300      	movs	r3, #0
 8007034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007038:	2300      	movs	r3, #0
 800703a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800703e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800704a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10f      	bne.n	8007072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_UART_IRQHandler+0x66>
 800705e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fd83 	bl	8007b76 <UART_Receive_IT>
      return;
 8007070:	e25b      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80de 	beq.w	8007238 <HAL_UART_IRQHandler+0x22c>
 800707c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80d1 	beq.w	8007238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <HAL_UART_IRQHandler+0xae>
 80070a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	f043 0201 	orr.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <HAL_UART_IRQHandler+0xd2>
 80070c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	f043 0202 	orr.w	r2, r3, #2
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <HAL_UART_IRQHandler+0xf6>
 80070ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fa:	f043 0204 	orr.w	r2, r3, #4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d011      	beq.n	8007132 <HAL_UART_IRQHandler+0x126>
 800710e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800711a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712a:	f043 0208 	orr.w	r2, r3, #8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 81f2 	beq.w	8007520 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800713c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <HAL_UART_IRQHandler+0x14e>
 8007148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd0e 	bl	8007b76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007164:	2b40      	cmp	r3, #64	@ 0x40
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <HAL_UART_IRQHandler+0x17a>
 800717e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d04f      	beq.n	8007226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fc16 	bl	80079b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007196:	2b40      	cmp	r3, #64	@ 0x40
 8007198:	d141      	bne.n	800721e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80071de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1d9      	bne.n	800719a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d013      	beq.n	8007216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f2:	4a7e      	ldr	r2, [pc, #504]	@ (80073ec <HAL_UART_IRQHandler+0x3e0>)
 80071f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fc fbba 	bl	8003974 <HAL_DMA_Abort_IT>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800720a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007214:	e00e      	b.n	8007234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f99e 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	e00a      	b.n	8007234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f99a 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	e006      	b.n	8007234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f996 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007232:	e175      	b.n	8007520 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007234:	bf00      	nop
    return;
 8007236:	e173      	b.n	8007520 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723c:	2b01      	cmp	r3, #1
 800723e:	f040 814f 	bne.w	80074e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8148 	beq.w	80074e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8141 	beq.w	80074e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727e:	2b40      	cmp	r3, #64	@ 0x40
 8007280:	f040 80b6 	bne.w	80073f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8145 	beq.w	8007524 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800729e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072a2:	429a      	cmp	r2, r3
 80072a4:	f080 813e 	bcs.w	8007524 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ba:	f000 8088 	beq.w	80073ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80072ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1d9      	bne.n	80072be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3314      	adds	r3, #20
 8007310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800731a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800731c:	f023 0301 	bic.w	r3, r3, #1
 8007320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3314      	adds	r3, #20
 800732a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800732e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e1      	bne.n	800730a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800736a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800736c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e3      	bne.n	8007346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800739c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800739e:	f023 0310 	bic.w	r3, r3, #16
 80073a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	330c      	adds	r3, #12
 80073ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e3      	bne.n	800738c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fc fa63 	bl	8003894 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2202      	movs	r2, #2
 80073d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f8c1 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073ea:	e09b      	b.n	8007524 <HAL_UART_IRQHandler+0x518>
 80073ec:	08007a7f 	.word	0x08007a7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 808e 	beq.w	8007528 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800740c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8089 	beq.w	8007528 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800742c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800743a:	647a      	str	r2, [r7, #68]	@ 0x44
 800743c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e3      	bne.n	8007416 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3314      	adds	r3, #20
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	623b      	str	r3, [r7, #32]
   return(result);
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3314      	adds	r3, #20
 800746e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007472:	633a      	str	r2, [r7, #48]	@ 0x30
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0310 	bic.w	r3, r3, #16
 80074aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	330c      	adds	r3, #12
 80074b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80074b8:	61fa      	str	r2, [r7, #28]
 80074ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	69b9      	ldr	r1, [r7, #24]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	617b      	str	r3, [r7, #20]
   return(result);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e3      	bne.n	8007494 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f847 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074de:	e023      	b.n	8007528 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <HAL_UART_IRQHandler+0x4f4>
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fad4 	bl	8007aa6 <UART_Transmit_IT>
    return;
 80074fe:	e014      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00e      	beq.n	800752a <HAL_UART_IRQHandler+0x51e>
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb14 	bl	8007b46 <UART_EndTransmit_IT>
    return;
 800751e:	e004      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
    return;
 8007520:	bf00      	nop
 8007522:	e002      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
      return;
 8007524:	bf00      	nop
 8007526:	e000      	b.n	800752a <HAL_UART_IRQHandler+0x51e>
      return;
 8007528:	bf00      	nop
  }
}
 800752a:	37e8      	adds	r7, #232	@ 0xe8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b09c      	sub	sp, #112	@ 0x70
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007590:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800759c:	2b00      	cmp	r3, #0
 800759e:	d172      	bne.n	8007686 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80075a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075a2:	2200      	movs	r2, #0
 80075a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80075c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80075c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e5      	bne.n	80075a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3314      	adds	r3, #20
 80075f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80075fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e5      	bne.n	80075da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800760e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3314      	adds	r3, #20
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	623b      	str	r3, [r7, #32]
   return(result);
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007624:	663b      	str	r3, [r7, #96]	@ 0x60
 8007626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3314      	adds	r3, #20
 800762c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800762e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007630:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007644:	2220      	movs	r2, #32
 8007646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800764c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764e:	2b01      	cmp	r3, #1
 8007650:	d119      	bne.n	8007686 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	60fb      	str	r3, [r7, #12]
   return(result);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f023 0310 	bic.w	r3, r3, #16
 8007668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800766a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007672:	61fa      	str	r2, [r7, #28]
 8007674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	69b9      	ldr	r1, [r7, #24]
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	617b      	str	r3, [r7, #20]
   return(result);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007688:	2200      	movs	r2, #0
 800768a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	2b01      	cmp	r3, #1
 8007692:	d106      	bne.n	80076a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007696:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007698:	4619      	mov	r1, r3
 800769a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800769c:	f7ff ff66 	bl	800756c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076a0:	e002      	b.n	80076a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80076a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076a4:	f7fa f81a 	bl	80016dc <HAL_UART_RxCpltCallback>
}
 80076a8:	bf00      	nop
 80076aa:	3770      	adds	r7, #112	@ 0x70
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d108      	bne.n	80076de <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4619      	mov	r1, r3
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff ff48 	bl	800756c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076dc:	e002      	b.n	80076e4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff ff30 	bl	8007544 <HAL_UART_RxHalfCpltCallback>
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007708:	2b80      	cmp	r3, #128	@ 0x80
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b21      	cmp	r3, #33	@ 0x21
 800771e:	d108      	bne.n	8007732 <UART_DMAError+0x46>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800772c:	68b8      	ldr	r0, [r7, #8]
 800772e:	f000 f91b 	bl	8007968 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773c:	2b40      	cmp	r3, #64	@ 0x40
 800773e:	bf0c      	ite	eq
 8007740:	2301      	moveq	r3, #1
 8007742:	2300      	movne	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b22      	cmp	r3, #34	@ 0x22
 8007752:	d108      	bne.n	8007766 <UART_DMAError+0x7a>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	f000 f929 	bl	80079b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776a:	f043 0210 	orr.w	r2, r3, #16
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007772:	68b8      	ldr	r0, [r7, #8]
 8007774:	f7ff fef0 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007790:	e03b      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d037      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fb fe33 	bl	8003404 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	6a3a      	ldr	r2, [r7, #32]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e03a      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d023      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x8a>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b80      	cmp	r3, #128	@ 0x80
 80077c6:	d020      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x8a>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b40      	cmp	r3, #64	@ 0x40
 80077cc:	d01d      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d116      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f8e0 	bl	80079b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2208      	movs	r2, #8
 80077fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e00f      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4013      	ands	r3, r2
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	429a      	cmp	r2, r3
 8007818:	bf0c      	ite	eq
 800781a:	2301      	moveq	r3, #1
 800781c:	2300      	movne	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	461a      	mov	r2, r3
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	429a      	cmp	r2, r3
 8007826:	d0b4      	beq.n	8007792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b098      	sub	sp, #96	@ 0x60
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2222      	movs	r2, #34	@ 0x22
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	4a3e      	ldr	r2, [pc, #248]	@ (800795c <UART_Start_Receive_DMA+0x128>)
 8007862:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007868:	4a3d      	ldr	r2, [pc, #244]	@ (8007960 <UART_Start_Receive_DMA+0x12c>)
 800786a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007870:	4a3c      	ldr	r2, [pc, #240]	@ (8007964 <UART_Start_Receive_DMA+0x130>)
 8007872:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007878:	2200      	movs	r2, #0
 800787a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800787c:	f107 0308 	add.w	r3, r7, #8
 8007880:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	f7fb ffa6 	bl	80037e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d019      	beq.n	80078ea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	330c      	adds	r3, #12
 80078d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80078d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80078dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e5      	bne.n	80078b6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3314      	adds	r3, #20
 80078f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fc:	f043 0301 	orr.w	r3, r3, #1
 8007900:	657b      	str	r3, [r7, #84]	@ 0x54
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3314      	adds	r3, #20
 8007908:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800790a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800790c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007910:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e5      	bne.n	80078ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3314      	adds	r3, #20
 8007924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	617b      	str	r3, [r7, #20]
   return(result);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007934:	653b      	str	r3, [r7, #80]	@ 0x50
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800793e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6a39      	ldr	r1, [r7, #32]
 8007944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	61fb      	str	r3, [r7, #28]
   return(result);
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e5      	bne.n	800791e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3760      	adds	r7, #96	@ 0x60
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	08007585 	.word	0x08007585
 8007960:	080076b1 	.word	0x080076b1
 8007964:	080076ed 	.word	0x080076ed

08007968 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	@ 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	61ba      	str	r2, [r7, #24]
 8007992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6979      	ldr	r1, [r7, #20]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	613b      	str	r3, [r7, #16]
   return(result);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80079ac:	bf00      	nop
 80079ae:	3724      	adds	r7, #36	@ 0x24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b095      	sub	sp, #84	@ 0x54
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80079e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e5      	bne.n	80079c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3314      	adds	r3, #20
 80079fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f023 0301 	bic.w	r3, r3, #1
 8007a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3314      	adds	r3, #20
 8007a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d119      	bne.n	8007a64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a50:	61ba      	str	r2, [r7, #24]
 8007a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6979      	ldr	r1, [r7, #20]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e5      	bne.n	8007a30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a72:	bf00      	nop
 8007a74:	3754      	adds	r7, #84	@ 0x54
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7ff fd5d 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b21      	cmp	r3, #33	@ 0x21
 8007ab8:	d13e      	bne.n	8007b38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac2:	d114      	bne.n	8007aee <UART_Transmit_IT+0x48>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d110      	bne.n	8007aee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ae0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	1c9a      	adds	r2, r3, #2
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	621a      	str	r2, [r3, #32]
 8007aec:	e008      	b.n	8007b00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	1c59      	adds	r1, r3, #1
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6211      	str	r1, [r2, #32]
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	3b01      	subs	r3, #1
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10f      	bne.n	8007b34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	e000      	b.n	8007b3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b38:	2302      	movs	r3, #2
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fce2 	bl	8007530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b08c      	sub	sp, #48	@ 0x30
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b22      	cmp	r3, #34	@ 0x22
 8007b88:	f040 80ae 	bne.w	8007ce8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b94:	d117      	bne.n	8007bc6 <UART_Receive_IT+0x50>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d113      	bne.n	8007bc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbe:	1c9a      	adds	r2, r3, #2
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bc4:	e026      	b.n	8007c14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd8:	d007      	beq.n	8007bea <UART_Receive_IT+0x74>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <UART_Receive_IT+0x82>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d106      	bne.n	8007bf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e008      	b.n	8007c0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4619      	mov	r1, r3
 8007c22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d15d      	bne.n	8007ce4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0220 	bic.w	r2, r2, #32
 8007c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0201 	bic.w	r2, r2, #1
 8007c56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d135      	bne.n	8007cda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	613b      	str	r3, [r7, #16]
   return(result);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f023 0310 	bic.w	r3, r3, #16
 8007c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c94:	623a      	str	r2, [r7, #32]
 8007c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	69f9      	ldr	r1, [r7, #28]
 8007c9a:	6a3a      	ldr	r2, [r7, #32]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d10a      	bne.n	8007ccc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff fc4a 	bl	800756c <HAL_UARTEx_RxEventCallback>
 8007cd8:	e002      	b.n	8007ce0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7f9 fcfe 	bl	80016dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e002      	b.n	8007cea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e000      	b.n	8007cea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ce8:	2302      	movs	r3, #2
  }
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3730      	adds	r7, #48	@ 0x30
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cf8:	b0c0      	sub	sp, #256	@ 0x100
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d10:	68d9      	ldr	r1, [r3, #12]
 8007d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	ea40 0301 	orr.w	r3, r0, r1
 8007d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d4c:	f021 010c 	bic.w	r1, r1, #12
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d5a:	430b      	orrs	r3, r1
 8007d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6e:	6999      	ldr	r1, [r3, #24]
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	ea40 0301 	orr.w	r3, r0, r1
 8007d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b8f      	ldr	r3, [pc, #572]	@ (8007fc0 <UART_SetConfig+0x2cc>)
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d005      	beq.n	8007d94 <UART_SetConfig+0xa0>
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8007fc4 <UART_SetConfig+0x2d0>)
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d104      	bne.n	8007d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d94:	f7fd fb92 	bl	80054bc <HAL_RCC_GetPCLK2Freq>
 8007d98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d9c:	e003      	b.n	8007da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d9e:	f7fd fb79 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8007da2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007db0:	f040 810c 	bne.w	8007fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	462b      	mov	r3, r5
 8007dca:	1891      	adds	r1, r2, r2
 8007dcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007dce:	415b      	adcs	r3, r3
 8007dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	eb12 0801 	adds.w	r8, r2, r1
 8007ddc:	4629      	mov	r1, r5
 8007dde:	eb43 0901 	adc.w	r9, r3, r1
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	f04f 0300 	mov.w	r3, #0
 8007dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007df6:	4690      	mov	r8, r2
 8007df8:	4699      	mov	r9, r3
 8007dfa:	4623      	mov	r3, r4
 8007dfc:	eb18 0303 	adds.w	r3, r8, r3
 8007e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e04:	462b      	mov	r3, r5
 8007e06:	eb49 0303 	adc.w	r3, r9, r3
 8007e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e22:	460b      	mov	r3, r1
 8007e24:	18db      	adds	r3, r3, r3
 8007e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e28:	4613      	mov	r3, r2
 8007e2a:	eb42 0303 	adc.w	r3, r2, r3
 8007e2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e38:	f7f8 ff46 	bl	8000cc8 <__aeabi_uldivmod>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4b61      	ldr	r3, [pc, #388]	@ (8007fc8 <UART_SetConfig+0x2d4>)
 8007e42:	fba3 2302 	umull	r2, r3, r3, r2
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	011c      	lsls	r4, r3, #4
 8007e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	464b      	mov	r3, r9
 8007e60:	1891      	adds	r1, r2, r2
 8007e62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e64:	415b      	adcs	r3, r3
 8007e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e72:	4649      	mov	r1, r9
 8007e74:	eb43 0b01 	adc.w	fp, r3, r1
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e8c:	4692      	mov	sl, r2
 8007e8e:	469b      	mov	fp, r3
 8007e90:	4643      	mov	r3, r8
 8007e92:	eb1a 0303 	adds.w	r3, sl, r3
 8007e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8007ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	18db      	adds	r3, r3, r3
 8007ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	eb42 0303 	adc.w	r3, r2, r3
 8007ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ece:	f7f8 fefb 	bl	8000cc8 <__aeabi_uldivmod>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc8 <UART_SetConfig+0x2d4>)
 8007eda:	fba3 2301 	umull	r2, r3, r3, r1
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	2264      	movs	r2, #100	@ 0x64
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	1acb      	subs	r3, r1, r3
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007eee:	4b36      	ldr	r3, [pc, #216]	@ (8007fc8 <UART_SetConfig+0x2d4>)
 8007ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ef4:	095b      	lsrs	r3, r3, #5
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007efc:	441c      	add	r4, r3
 8007efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	1891      	adds	r1, r2, r2
 8007f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f18:	415b      	adcs	r3, r3
 8007f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f20:	4641      	mov	r1, r8
 8007f22:	1851      	adds	r1, r2, r1
 8007f24:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f26:	4649      	mov	r1, r9
 8007f28:	414b      	adcs	r3, r1
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f38:	4659      	mov	r1, fp
 8007f3a:	00cb      	lsls	r3, r1, #3
 8007f3c:	4651      	mov	r1, sl
 8007f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f42:	4651      	mov	r1, sl
 8007f44:	00ca      	lsls	r2, r1, #3
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	189b      	adds	r3, r3, r2
 8007f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f54:	464b      	mov	r3, r9
 8007f56:	460a      	mov	r2, r1
 8007f58:	eb42 0303 	adc.w	r3, r2, r3
 8007f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f74:	460b      	mov	r3, r1
 8007f76:	18db      	adds	r3, r3, r3
 8007f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	eb42 0303 	adc.w	r3, r2, r3
 8007f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f8a:	f7f8 fe9d 	bl	8000cc8 <__aeabi_uldivmod>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc8 <UART_SetConfig+0x2d4>)
 8007f94:	fba3 1302 	umull	r1, r3, r3, r2
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	2164      	movs	r1, #100	@ 0x64
 8007f9c:	fb01 f303 	mul.w	r3, r1, r3
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	3332      	adds	r3, #50	@ 0x32
 8007fa6:	4a08      	ldr	r2, [pc, #32]	@ (8007fc8 <UART_SetConfig+0x2d4>)
 8007fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	f003 0207 	and.w	r2, r3, #7
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4422      	add	r2, r4
 8007fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fbc:	e106      	b.n	80081cc <UART_SetConfig+0x4d8>
 8007fbe:	bf00      	nop
 8007fc0:	40011000 	.word	0x40011000
 8007fc4:	40011400 	.word	0x40011400
 8007fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007fde:	4642      	mov	r2, r8
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	1891      	adds	r1, r2, r2
 8007fe4:	6239      	str	r1, [r7, #32]
 8007fe6:	415b      	adcs	r3, r3
 8007fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fee:	4641      	mov	r1, r8
 8007ff0:	1854      	adds	r4, r2, r1
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	eb43 0501 	adc.w	r5, r3, r1
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	00eb      	lsls	r3, r5, #3
 8008002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008006:	00e2      	lsls	r2, r4, #3
 8008008:	4614      	mov	r4, r2
 800800a:	461d      	mov	r5, r3
 800800c:	4643      	mov	r3, r8
 800800e:	18e3      	adds	r3, r4, r3
 8008010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008014:	464b      	mov	r3, r9
 8008016:	eb45 0303 	adc.w	r3, r5, r3
 800801a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800801e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800802a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800803a:	4629      	mov	r1, r5
 800803c:	008b      	lsls	r3, r1, #2
 800803e:	4621      	mov	r1, r4
 8008040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008044:	4621      	mov	r1, r4
 8008046:	008a      	lsls	r2, r1, #2
 8008048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800804c:	f7f8 fe3c 	bl	8000cc8 <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4b60      	ldr	r3, [pc, #384]	@ (80081d8 <UART_SetConfig+0x4e4>)
 8008056:	fba3 2302 	umull	r2, r3, r3, r2
 800805a:	095b      	lsrs	r3, r3, #5
 800805c:	011c      	lsls	r4, r3, #4
 800805e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008062:	2200      	movs	r2, #0
 8008064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800806c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008070:	4642      	mov	r2, r8
 8008072:	464b      	mov	r3, r9
 8008074:	1891      	adds	r1, r2, r2
 8008076:	61b9      	str	r1, [r7, #24]
 8008078:	415b      	adcs	r3, r3
 800807a:	61fb      	str	r3, [r7, #28]
 800807c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008080:	4641      	mov	r1, r8
 8008082:	1851      	adds	r1, r2, r1
 8008084:	6139      	str	r1, [r7, #16]
 8008086:	4649      	mov	r1, r9
 8008088:	414b      	adcs	r3, r1
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008098:	4659      	mov	r1, fp
 800809a:	00cb      	lsls	r3, r1, #3
 800809c:	4651      	mov	r1, sl
 800809e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080a2:	4651      	mov	r1, sl
 80080a4:	00ca      	lsls	r2, r1, #3
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	4642      	mov	r2, r8
 80080ae:	189b      	adds	r3, r3, r2
 80080b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080b4:	464b      	mov	r3, r9
 80080b6:	460a      	mov	r2, r1
 80080b8:	eb42 0303 	adc.w	r3, r2, r3
 80080bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080d8:	4649      	mov	r1, r9
 80080da:	008b      	lsls	r3, r1, #2
 80080dc:	4641      	mov	r1, r8
 80080de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080e2:	4641      	mov	r1, r8
 80080e4:	008a      	lsls	r2, r1, #2
 80080e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80080ea:	f7f8 fded 	bl	8000cc8 <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	4b38      	ldr	r3, [pc, #224]	@ (80081d8 <UART_SetConfig+0x4e4>)
 80080f6:	fba3 2301 	umull	r2, r3, r3, r1
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	2264      	movs	r2, #100	@ 0x64
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
 8008102:	1acb      	subs	r3, r1, r3
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	3332      	adds	r3, #50	@ 0x32
 8008108:	4a33      	ldr	r2, [pc, #204]	@ (80081d8 <UART_SetConfig+0x4e4>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008114:	441c      	add	r4, r3
 8008116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800811a:	2200      	movs	r2, #0
 800811c:	673b      	str	r3, [r7, #112]	@ 0x70
 800811e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008120:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	1891      	adds	r1, r2, r2
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	415b      	adcs	r3, r3
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008134:	4641      	mov	r1, r8
 8008136:	1851      	adds	r1, r2, r1
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	4649      	mov	r1, r9
 800813c:	414b      	adcs	r3, r1
 800813e:	607b      	str	r3, [r7, #4]
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	f04f 0300 	mov.w	r3, #0
 8008148:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800814c:	4659      	mov	r1, fp
 800814e:	00cb      	lsls	r3, r1, #3
 8008150:	4651      	mov	r1, sl
 8008152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008156:	4651      	mov	r1, sl
 8008158:	00ca      	lsls	r2, r1, #3
 800815a:	4610      	mov	r0, r2
 800815c:	4619      	mov	r1, r3
 800815e:	4603      	mov	r3, r0
 8008160:	4642      	mov	r2, r8
 8008162:	189b      	adds	r3, r3, r2
 8008164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008166:	464b      	mov	r3, r9
 8008168:	460a      	mov	r2, r1
 800816a:	eb42 0303 	adc.w	r3, r2, r3
 800816e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	663b      	str	r3, [r7, #96]	@ 0x60
 800817a:	667a      	str	r2, [r7, #100]	@ 0x64
 800817c:	f04f 0200 	mov.w	r2, #0
 8008180:	f04f 0300 	mov.w	r3, #0
 8008184:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008188:	4649      	mov	r1, r9
 800818a:	008b      	lsls	r3, r1, #2
 800818c:	4641      	mov	r1, r8
 800818e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008192:	4641      	mov	r1, r8
 8008194:	008a      	lsls	r2, r1, #2
 8008196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800819a:	f7f8 fd95 	bl	8000cc8 <__aeabi_uldivmod>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <UART_SetConfig+0x4e4>)
 80081a4:	fba3 1302 	umull	r1, r3, r3, r2
 80081a8:	095b      	lsrs	r3, r3, #5
 80081aa:	2164      	movs	r1, #100	@ 0x64
 80081ac:	fb01 f303 	mul.w	r3, r1, r3
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	3332      	adds	r3, #50	@ 0x32
 80081b6:	4a08      	ldr	r2, [pc, #32]	@ (80081d8 <UART_SetConfig+0x4e4>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	f003 020f 	and.w	r2, r3, #15
 80081c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4422      	add	r2, r4
 80081ca:	609a      	str	r2, [r3, #8]
}
 80081cc:	bf00      	nop
 80081ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081d2:	46bd      	mov	sp, r7
 80081d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081d8:	51eb851f 	.word	0x51eb851f

080081dc <__cvt>:
 80081dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	ec57 6b10 	vmov	r6, r7, d0
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	460c      	mov	r4, r1
 80081e8:	4619      	mov	r1, r3
 80081ea:	463b      	mov	r3, r7
 80081ec:	bfbb      	ittet	lt
 80081ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081f2:	461f      	movlt	r7, r3
 80081f4:	2300      	movge	r3, #0
 80081f6:	232d      	movlt	r3, #45	@ 0x2d
 80081f8:	700b      	strb	r3, [r1, #0]
 80081fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008200:	4691      	mov	r9, r2
 8008202:	f023 0820 	bic.w	r8, r3, #32
 8008206:	bfbc      	itt	lt
 8008208:	4632      	movlt	r2, r6
 800820a:	4616      	movlt	r6, r2
 800820c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008210:	d005      	beq.n	800821e <__cvt+0x42>
 8008212:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008216:	d100      	bne.n	800821a <__cvt+0x3e>
 8008218:	3401      	adds	r4, #1
 800821a:	2102      	movs	r1, #2
 800821c:	e000      	b.n	8008220 <__cvt+0x44>
 800821e:	2103      	movs	r1, #3
 8008220:	ab03      	add	r3, sp, #12
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	ab02      	add	r3, sp, #8
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	ec47 6b10 	vmov	d0, r6, r7
 800822c:	4653      	mov	r3, sl
 800822e:	4622      	mov	r2, r4
 8008230:	f001 f986 	bl	8009540 <_dtoa_r>
 8008234:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008238:	4605      	mov	r5, r0
 800823a:	d119      	bne.n	8008270 <__cvt+0x94>
 800823c:	f019 0f01 	tst.w	r9, #1
 8008240:	d00e      	beq.n	8008260 <__cvt+0x84>
 8008242:	eb00 0904 	add.w	r9, r0, r4
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	4630      	mov	r0, r6
 800824c:	4639      	mov	r1, r7
 800824e:	f7f8 fc5b 	bl	8000b08 <__aeabi_dcmpeq>
 8008252:	b108      	cbz	r0, 8008258 <__cvt+0x7c>
 8008254:	f8cd 900c 	str.w	r9, [sp, #12]
 8008258:	2230      	movs	r2, #48	@ 0x30
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	454b      	cmp	r3, r9
 800825e:	d31e      	bcc.n	800829e <__cvt+0xc2>
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008264:	1b5b      	subs	r3, r3, r5
 8008266:	4628      	mov	r0, r5
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	b004      	add	sp, #16
 800826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008274:	eb00 0904 	add.w	r9, r0, r4
 8008278:	d1e5      	bne.n	8008246 <__cvt+0x6a>
 800827a:	7803      	ldrb	r3, [r0, #0]
 800827c:	2b30      	cmp	r3, #48	@ 0x30
 800827e:	d10a      	bne.n	8008296 <__cvt+0xba>
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f8 fc3e 	bl	8000b08 <__aeabi_dcmpeq>
 800828c:	b918      	cbnz	r0, 8008296 <__cvt+0xba>
 800828e:	f1c4 0401 	rsb	r4, r4, #1
 8008292:	f8ca 4000 	str.w	r4, [sl]
 8008296:	f8da 3000 	ldr.w	r3, [sl]
 800829a:	4499      	add	r9, r3
 800829c:	e7d3      	b.n	8008246 <__cvt+0x6a>
 800829e:	1c59      	adds	r1, r3, #1
 80082a0:	9103      	str	r1, [sp, #12]
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e7d9      	b.n	800825a <__cvt+0x7e>

080082a6 <__exponent>:
 80082a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082a8:	2900      	cmp	r1, #0
 80082aa:	bfba      	itte	lt
 80082ac:	4249      	neglt	r1, r1
 80082ae:	232d      	movlt	r3, #45	@ 0x2d
 80082b0:	232b      	movge	r3, #43	@ 0x2b
 80082b2:	2909      	cmp	r1, #9
 80082b4:	7002      	strb	r2, [r0, #0]
 80082b6:	7043      	strb	r3, [r0, #1]
 80082b8:	dd29      	ble.n	800830e <__exponent+0x68>
 80082ba:	f10d 0307 	add.w	r3, sp, #7
 80082be:	461d      	mov	r5, r3
 80082c0:	270a      	movs	r7, #10
 80082c2:	461a      	mov	r2, r3
 80082c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80082c8:	fb07 1416 	mls	r4, r7, r6, r1
 80082cc:	3430      	adds	r4, #48	@ 0x30
 80082ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082d2:	460c      	mov	r4, r1
 80082d4:	2c63      	cmp	r4, #99	@ 0x63
 80082d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80082da:	4631      	mov	r1, r6
 80082dc:	dcf1      	bgt.n	80082c2 <__exponent+0x1c>
 80082de:	3130      	adds	r1, #48	@ 0x30
 80082e0:	1e94      	subs	r4, r2, #2
 80082e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082e6:	1c41      	adds	r1, r0, #1
 80082e8:	4623      	mov	r3, r4
 80082ea:	42ab      	cmp	r3, r5
 80082ec:	d30a      	bcc.n	8008304 <__exponent+0x5e>
 80082ee:	f10d 0309 	add.w	r3, sp, #9
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ac      	cmp	r4, r5
 80082f6:	bf88      	it	hi
 80082f8:	2300      	movhi	r3, #0
 80082fa:	3302      	adds	r3, #2
 80082fc:	4403      	add	r3, r0
 80082fe:	1a18      	subs	r0, r3, r0
 8008300:	b003      	add	sp, #12
 8008302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008304:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008308:	f801 6f01 	strb.w	r6, [r1, #1]!
 800830c:	e7ed      	b.n	80082ea <__exponent+0x44>
 800830e:	2330      	movs	r3, #48	@ 0x30
 8008310:	3130      	adds	r1, #48	@ 0x30
 8008312:	7083      	strb	r3, [r0, #2]
 8008314:	70c1      	strb	r1, [r0, #3]
 8008316:	1d03      	adds	r3, r0, #4
 8008318:	e7f1      	b.n	80082fe <__exponent+0x58>
	...

0800831c <_printf_float>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	b08d      	sub	sp, #52	@ 0x34
 8008322:	460c      	mov	r4, r1
 8008324:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008328:	4616      	mov	r6, r2
 800832a:	461f      	mov	r7, r3
 800832c:	4605      	mov	r5, r0
 800832e:	f000 fff3 	bl	8009318 <_localeconv_r>
 8008332:	6803      	ldr	r3, [r0, #0]
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	4618      	mov	r0, r3
 8008338:	f7f7 ffba 	bl	80002b0 <strlen>
 800833c:	2300      	movs	r3, #0
 800833e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008340:	f8d8 3000 	ldr.w	r3, [r8]
 8008344:	9005      	str	r0, [sp, #20]
 8008346:	3307      	adds	r3, #7
 8008348:	f023 0307 	bic.w	r3, r3, #7
 800834c:	f103 0208 	add.w	r2, r3, #8
 8008350:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008354:	f8d4 b000 	ldr.w	fp, [r4]
 8008358:	f8c8 2000 	str.w	r2, [r8]
 800835c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008360:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008364:	9307      	str	r3, [sp, #28]
 8008366:	f8cd 8018 	str.w	r8, [sp, #24]
 800836a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800836e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008372:	4b9c      	ldr	r3, [pc, #624]	@ (80085e4 <_printf_float+0x2c8>)
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	f7f8 fbf8 	bl	8000b6c <__aeabi_dcmpun>
 800837c:	bb70      	cbnz	r0, 80083dc <_printf_float+0xc0>
 800837e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008382:	4b98      	ldr	r3, [pc, #608]	@ (80085e4 <_printf_float+0x2c8>)
 8008384:	f04f 32ff 	mov.w	r2, #4294967295
 8008388:	f7f8 fbd2 	bl	8000b30 <__aeabi_dcmple>
 800838c:	bb30      	cbnz	r0, 80083dc <_printf_float+0xc0>
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	4640      	mov	r0, r8
 8008394:	4649      	mov	r1, r9
 8008396:	f7f8 fbc1 	bl	8000b1c <__aeabi_dcmplt>
 800839a:	b110      	cbz	r0, 80083a2 <_printf_float+0x86>
 800839c:	232d      	movs	r3, #45	@ 0x2d
 800839e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083a2:	4a91      	ldr	r2, [pc, #580]	@ (80085e8 <_printf_float+0x2cc>)
 80083a4:	4b91      	ldr	r3, [pc, #580]	@ (80085ec <_printf_float+0x2d0>)
 80083a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083aa:	bf94      	ite	ls
 80083ac:	4690      	movls	r8, r2
 80083ae:	4698      	movhi	r8, r3
 80083b0:	2303      	movs	r3, #3
 80083b2:	6123      	str	r3, [r4, #16]
 80083b4:	f02b 0304 	bic.w	r3, fp, #4
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	f04f 0900 	mov.w	r9, #0
 80083be:	9700      	str	r7, [sp, #0]
 80083c0:	4633      	mov	r3, r6
 80083c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083c4:	4621      	mov	r1, r4
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 f9d2 	bl	8008770 <_printf_common>
 80083cc:	3001      	adds	r0, #1
 80083ce:	f040 808d 	bne.w	80084ec <_printf_float+0x1d0>
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295
 80083d6:	b00d      	add	sp, #52	@ 0x34
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	f7f8 fbc2 	bl	8000b6c <__aeabi_dcmpun>
 80083e8:	b140      	cbz	r0, 80083fc <_printf_float+0xe0>
 80083ea:	464b      	mov	r3, r9
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bfbc      	itt	lt
 80083f0:	232d      	movlt	r3, #45	@ 0x2d
 80083f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083f6:	4a7e      	ldr	r2, [pc, #504]	@ (80085f0 <_printf_float+0x2d4>)
 80083f8:	4b7e      	ldr	r3, [pc, #504]	@ (80085f4 <_printf_float+0x2d8>)
 80083fa:	e7d4      	b.n	80083a6 <_printf_float+0x8a>
 80083fc:	6863      	ldr	r3, [r4, #4]
 80083fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008402:	9206      	str	r2, [sp, #24]
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	d13b      	bne.n	8008480 <_printf_float+0x164>
 8008408:	2306      	movs	r3, #6
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008410:	2300      	movs	r3, #0
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	ab0a      	add	r3, sp, #40	@ 0x28
 8008418:	e9cd a301 	strd	sl, r3, [sp, #4]
 800841c:	ab09      	add	r3, sp, #36	@ 0x24
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	6861      	ldr	r1, [r4, #4]
 8008422:	ec49 8b10 	vmov	d0, r8, r9
 8008426:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800842a:	4628      	mov	r0, r5
 800842c:	f7ff fed6 	bl	80081dc <__cvt>
 8008430:	9b06      	ldr	r3, [sp, #24]
 8008432:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008434:	2b47      	cmp	r3, #71	@ 0x47
 8008436:	4680      	mov	r8, r0
 8008438:	d129      	bne.n	800848e <_printf_float+0x172>
 800843a:	1cc8      	adds	r0, r1, #3
 800843c:	db02      	blt.n	8008444 <_printf_float+0x128>
 800843e:	6863      	ldr	r3, [r4, #4]
 8008440:	4299      	cmp	r1, r3
 8008442:	dd41      	ble.n	80084c8 <_printf_float+0x1ac>
 8008444:	f1aa 0a02 	sub.w	sl, sl, #2
 8008448:	fa5f fa8a 	uxtb.w	sl, sl
 800844c:	3901      	subs	r1, #1
 800844e:	4652      	mov	r2, sl
 8008450:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008454:	9109      	str	r1, [sp, #36]	@ 0x24
 8008456:	f7ff ff26 	bl	80082a6 <__exponent>
 800845a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800845c:	1813      	adds	r3, r2, r0
 800845e:	2a01      	cmp	r2, #1
 8008460:	4681      	mov	r9, r0
 8008462:	6123      	str	r3, [r4, #16]
 8008464:	dc02      	bgt.n	800846c <_printf_float+0x150>
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	07d2      	lsls	r2, r2, #31
 800846a:	d501      	bpl.n	8008470 <_printf_float+0x154>
 800846c:	3301      	adds	r3, #1
 800846e:	6123      	str	r3, [r4, #16]
 8008470:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0a2      	beq.n	80083be <_printf_float+0xa2>
 8008478:	232d      	movs	r3, #45	@ 0x2d
 800847a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800847e:	e79e      	b.n	80083be <_printf_float+0xa2>
 8008480:	9a06      	ldr	r2, [sp, #24]
 8008482:	2a47      	cmp	r2, #71	@ 0x47
 8008484:	d1c2      	bne.n	800840c <_printf_float+0xf0>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1c0      	bne.n	800840c <_printf_float+0xf0>
 800848a:	2301      	movs	r3, #1
 800848c:	e7bd      	b.n	800840a <_printf_float+0xee>
 800848e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008492:	d9db      	bls.n	800844c <_printf_float+0x130>
 8008494:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008498:	d118      	bne.n	80084cc <_printf_float+0x1b0>
 800849a:	2900      	cmp	r1, #0
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	dd0b      	ble.n	80084b8 <_printf_float+0x19c>
 80084a0:	6121      	str	r1, [r4, #16]
 80084a2:	b913      	cbnz	r3, 80084aa <_printf_float+0x18e>
 80084a4:	6822      	ldr	r2, [r4, #0]
 80084a6:	07d0      	lsls	r0, r2, #31
 80084a8:	d502      	bpl.n	80084b0 <_printf_float+0x194>
 80084aa:	3301      	adds	r3, #1
 80084ac:	440b      	add	r3, r1
 80084ae:	6123      	str	r3, [r4, #16]
 80084b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084b2:	f04f 0900 	mov.w	r9, #0
 80084b6:	e7db      	b.n	8008470 <_printf_float+0x154>
 80084b8:	b913      	cbnz	r3, 80084c0 <_printf_float+0x1a4>
 80084ba:	6822      	ldr	r2, [r4, #0]
 80084bc:	07d2      	lsls	r2, r2, #31
 80084be:	d501      	bpl.n	80084c4 <_printf_float+0x1a8>
 80084c0:	3302      	adds	r3, #2
 80084c2:	e7f4      	b.n	80084ae <_printf_float+0x192>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e7f2      	b.n	80084ae <_printf_float+0x192>
 80084c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ce:	4299      	cmp	r1, r3
 80084d0:	db05      	blt.n	80084de <_printf_float+0x1c2>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	6121      	str	r1, [r4, #16]
 80084d6:	07d8      	lsls	r0, r3, #31
 80084d8:	d5ea      	bpl.n	80084b0 <_printf_float+0x194>
 80084da:	1c4b      	adds	r3, r1, #1
 80084dc:	e7e7      	b.n	80084ae <_printf_float+0x192>
 80084de:	2900      	cmp	r1, #0
 80084e0:	bfd4      	ite	le
 80084e2:	f1c1 0202 	rsble	r2, r1, #2
 80084e6:	2201      	movgt	r2, #1
 80084e8:	4413      	add	r3, r2
 80084ea:	e7e0      	b.n	80084ae <_printf_float+0x192>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	055a      	lsls	r2, r3, #21
 80084f0:	d407      	bmi.n	8008502 <_printf_float+0x1e6>
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	4642      	mov	r2, r8
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	d12b      	bne.n	8008558 <_printf_float+0x23c>
 8008500:	e767      	b.n	80083d2 <_printf_float+0xb6>
 8008502:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008506:	f240 80dd 	bls.w	80086c4 <_printf_float+0x3a8>
 800850a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800850e:	2200      	movs	r2, #0
 8008510:	2300      	movs	r3, #0
 8008512:	f7f8 faf9 	bl	8000b08 <__aeabi_dcmpeq>
 8008516:	2800      	cmp	r0, #0
 8008518:	d033      	beq.n	8008582 <_printf_float+0x266>
 800851a:	4a37      	ldr	r2, [pc, #220]	@ (80085f8 <_printf_float+0x2dc>)
 800851c:	2301      	movs	r3, #1
 800851e:	4631      	mov	r1, r6
 8008520:	4628      	mov	r0, r5
 8008522:	47b8      	blx	r7
 8008524:	3001      	adds	r0, #1
 8008526:	f43f af54 	beq.w	80083d2 <_printf_float+0xb6>
 800852a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800852e:	4543      	cmp	r3, r8
 8008530:	db02      	blt.n	8008538 <_printf_float+0x21c>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	07d8      	lsls	r0, r3, #31
 8008536:	d50f      	bpl.n	8008558 <_printf_float+0x23c>
 8008538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800853c:	4631      	mov	r1, r6
 800853e:	4628      	mov	r0, r5
 8008540:	47b8      	blx	r7
 8008542:	3001      	adds	r0, #1
 8008544:	f43f af45 	beq.w	80083d2 <_printf_float+0xb6>
 8008548:	f04f 0900 	mov.w	r9, #0
 800854c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008550:	f104 0a1a 	add.w	sl, r4, #26
 8008554:	45c8      	cmp	r8, r9
 8008556:	dc09      	bgt.n	800856c <_printf_float+0x250>
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	079b      	lsls	r3, r3, #30
 800855c:	f100 8103 	bmi.w	8008766 <_printf_float+0x44a>
 8008560:	68e0      	ldr	r0, [r4, #12]
 8008562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008564:	4298      	cmp	r0, r3
 8008566:	bfb8      	it	lt
 8008568:	4618      	movlt	r0, r3
 800856a:	e734      	b.n	80083d6 <_printf_float+0xba>
 800856c:	2301      	movs	r3, #1
 800856e:	4652      	mov	r2, sl
 8008570:	4631      	mov	r1, r6
 8008572:	4628      	mov	r0, r5
 8008574:	47b8      	blx	r7
 8008576:	3001      	adds	r0, #1
 8008578:	f43f af2b 	beq.w	80083d2 <_printf_float+0xb6>
 800857c:	f109 0901 	add.w	r9, r9, #1
 8008580:	e7e8      	b.n	8008554 <_printf_float+0x238>
 8008582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008584:	2b00      	cmp	r3, #0
 8008586:	dc39      	bgt.n	80085fc <_printf_float+0x2e0>
 8008588:	4a1b      	ldr	r2, [pc, #108]	@ (80085f8 <_printf_float+0x2dc>)
 800858a:	2301      	movs	r3, #1
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f af1d 	beq.w	80083d2 <_printf_float+0xb6>
 8008598:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800859c:	ea59 0303 	orrs.w	r3, r9, r3
 80085a0:	d102      	bne.n	80085a8 <_printf_float+0x28c>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	07d9      	lsls	r1, r3, #31
 80085a6:	d5d7      	bpl.n	8008558 <_printf_float+0x23c>
 80085a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b8      	blx	r7
 80085b2:	3001      	adds	r0, #1
 80085b4:	f43f af0d 	beq.w	80083d2 <_printf_float+0xb6>
 80085b8:	f04f 0a00 	mov.w	sl, #0
 80085bc:	f104 0b1a 	add.w	fp, r4, #26
 80085c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c2:	425b      	negs	r3, r3
 80085c4:	4553      	cmp	r3, sl
 80085c6:	dc01      	bgt.n	80085cc <_printf_float+0x2b0>
 80085c8:	464b      	mov	r3, r9
 80085ca:	e793      	b.n	80084f4 <_printf_float+0x1d8>
 80085cc:	2301      	movs	r3, #1
 80085ce:	465a      	mov	r2, fp
 80085d0:	4631      	mov	r1, r6
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b8      	blx	r7
 80085d6:	3001      	adds	r0, #1
 80085d8:	f43f aefb 	beq.w	80083d2 <_printf_float+0xb6>
 80085dc:	f10a 0a01 	add.w	sl, sl, #1
 80085e0:	e7ee      	b.n	80085c0 <_printf_float+0x2a4>
 80085e2:	bf00      	nop
 80085e4:	7fefffff 	.word	0x7fefffff
 80085e8:	0800d0f0 	.word	0x0800d0f0
 80085ec:	0800d0f4 	.word	0x0800d0f4
 80085f0:	0800d0f8 	.word	0x0800d0f8
 80085f4:	0800d0fc 	.word	0x0800d0fc
 80085f8:	0800d100 	.word	0x0800d100
 80085fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008602:	4553      	cmp	r3, sl
 8008604:	bfa8      	it	ge
 8008606:	4653      	movge	r3, sl
 8008608:	2b00      	cmp	r3, #0
 800860a:	4699      	mov	r9, r3
 800860c:	dc36      	bgt.n	800867c <_printf_float+0x360>
 800860e:	f04f 0b00 	mov.w	fp, #0
 8008612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008616:	f104 021a 	add.w	r2, r4, #26
 800861a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800861c:	9306      	str	r3, [sp, #24]
 800861e:	eba3 0309 	sub.w	r3, r3, r9
 8008622:	455b      	cmp	r3, fp
 8008624:	dc31      	bgt.n	800868a <_printf_float+0x36e>
 8008626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008628:	459a      	cmp	sl, r3
 800862a:	dc3a      	bgt.n	80086a2 <_printf_float+0x386>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	07da      	lsls	r2, r3, #31
 8008630:	d437      	bmi.n	80086a2 <_printf_float+0x386>
 8008632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008634:	ebaa 0903 	sub.w	r9, sl, r3
 8008638:	9b06      	ldr	r3, [sp, #24]
 800863a:	ebaa 0303 	sub.w	r3, sl, r3
 800863e:	4599      	cmp	r9, r3
 8008640:	bfa8      	it	ge
 8008642:	4699      	movge	r9, r3
 8008644:	f1b9 0f00 	cmp.w	r9, #0
 8008648:	dc33      	bgt.n	80086b2 <_printf_float+0x396>
 800864a:	f04f 0800 	mov.w	r8, #0
 800864e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008652:	f104 0b1a 	add.w	fp, r4, #26
 8008656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008658:	ebaa 0303 	sub.w	r3, sl, r3
 800865c:	eba3 0309 	sub.w	r3, r3, r9
 8008660:	4543      	cmp	r3, r8
 8008662:	f77f af79 	ble.w	8008558 <_printf_float+0x23c>
 8008666:	2301      	movs	r3, #1
 8008668:	465a      	mov	r2, fp
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	47b8      	blx	r7
 8008670:	3001      	adds	r0, #1
 8008672:	f43f aeae 	beq.w	80083d2 <_printf_float+0xb6>
 8008676:	f108 0801 	add.w	r8, r8, #1
 800867a:	e7ec      	b.n	8008656 <_printf_float+0x33a>
 800867c:	4642      	mov	r2, r8
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	d1c2      	bne.n	800860e <_printf_float+0x2f2>
 8008688:	e6a3      	b.n	80083d2 <_printf_float+0xb6>
 800868a:	2301      	movs	r3, #1
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	9206      	str	r2, [sp, #24]
 8008692:	47b8      	blx	r7
 8008694:	3001      	adds	r0, #1
 8008696:	f43f ae9c 	beq.w	80083d2 <_printf_float+0xb6>
 800869a:	9a06      	ldr	r2, [sp, #24]
 800869c:	f10b 0b01 	add.w	fp, fp, #1
 80086a0:	e7bb      	b.n	800861a <_printf_float+0x2fe>
 80086a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	d1c0      	bne.n	8008632 <_printf_float+0x316>
 80086b0:	e68f      	b.n	80083d2 <_printf_float+0xb6>
 80086b2:	9a06      	ldr	r2, [sp, #24]
 80086b4:	464b      	mov	r3, r9
 80086b6:	4442      	add	r2, r8
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	d1c3      	bne.n	800864a <_printf_float+0x32e>
 80086c2:	e686      	b.n	80083d2 <_printf_float+0xb6>
 80086c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086c8:	f1ba 0f01 	cmp.w	sl, #1
 80086cc:	dc01      	bgt.n	80086d2 <_printf_float+0x3b6>
 80086ce:	07db      	lsls	r3, r3, #31
 80086d0:	d536      	bpl.n	8008740 <_printf_float+0x424>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4642      	mov	r2, r8
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	f43f ae78 	beq.w	80083d2 <_printf_float+0xb6>
 80086e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	f43f ae70 	beq.w	80083d2 <_printf_float+0xb6>
 80086f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086f6:	2200      	movs	r2, #0
 80086f8:	2300      	movs	r3, #0
 80086fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086fe:	f7f8 fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8008702:	b9c0      	cbnz	r0, 8008736 <_printf_float+0x41a>
 8008704:	4653      	mov	r3, sl
 8008706:	f108 0201 	add.w	r2, r8, #1
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	d10c      	bne.n	800872e <_printf_float+0x412>
 8008714:	e65d      	b.n	80083d2 <_printf_float+0xb6>
 8008716:	2301      	movs	r3, #1
 8008718:	465a      	mov	r2, fp
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	f43f ae56 	beq.w	80083d2 <_printf_float+0xb6>
 8008726:	f108 0801 	add.w	r8, r8, #1
 800872a:	45d0      	cmp	r8, sl
 800872c:	dbf3      	blt.n	8008716 <_printf_float+0x3fa>
 800872e:	464b      	mov	r3, r9
 8008730:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008734:	e6df      	b.n	80084f6 <_printf_float+0x1da>
 8008736:	f04f 0800 	mov.w	r8, #0
 800873a:	f104 0b1a 	add.w	fp, r4, #26
 800873e:	e7f4      	b.n	800872a <_printf_float+0x40e>
 8008740:	2301      	movs	r3, #1
 8008742:	4642      	mov	r2, r8
 8008744:	e7e1      	b.n	800870a <_printf_float+0x3ee>
 8008746:	2301      	movs	r3, #1
 8008748:	464a      	mov	r2, r9
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	f43f ae3e 	beq.w	80083d2 <_printf_float+0xb6>
 8008756:	f108 0801 	add.w	r8, r8, #1
 800875a:	68e3      	ldr	r3, [r4, #12]
 800875c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800875e:	1a5b      	subs	r3, r3, r1
 8008760:	4543      	cmp	r3, r8
 8008762:	dcf0      	bgt.n	8008746 <_printf_float+0x42a>
 8008764:	e6fc      	b.n	8008560 <_printf_float+0x244>
 8008766:	f04f 0800 	mov.w	r8, #0
 800876a:	f104 0919 	add.w	r9, r4, #25
 800876e:	e7f4      	b.n	800875a <_printf_float+0x43e>

08008770 <_printf_common>:
 8008770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	4616      	mov	r6, r2
 8008776:	4698      	mov	r8, r3
 8008778:	688a      	ldr	r2, [r1, #8]
 800877a:	690b      	ldr	r3, [r1, #16]
 800877c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008780:	4293      	cmp	r3, r2
 8008782:	bfb8      	it	lt
 8008784:	4613      	movlt	r3, r2
 8008786:	6033      	str	r3, [r6, #0]
 8008788:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800878c:	4607      	mov	r7, r0
 800878e:	460c      	mov	r4, r1
 8008790:	b10a      	cbz	r2, 8008796 <_printf_common+0x26>
 8008792:	3301      	adds	r3, #1
 8008794:	6033      	str	r3, [r6, #0]
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	0699      	lsls	r1, r3, #26
 800879a:	bf42      	ittt	mi
 800879c:	6833      	ldrmi	r3, [r6, #0]
 800879e:	3302      	addmi	r3, #2
 80087a0:	6033      	strmi	r3, [r6, #0]
 80087a2:	6825      	ldr	r5, [r4, #0]
 80087a4:	f015 0506 	ands.w	r5, r5, #6
 80087a8:	d106      	bne.n	80087b8 <_printf_common+0x48>
 80087aa:	f104 0a19 	add.w	sl, r4, #25
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	6832      	ldr	r2, [r6, #0]
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	42ab      	cmp	r3, r5
 80087b6:	dc26      	bgt.n	8008806 <_printf_common+0x96>
 80087b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	3b00      	subs	r3, #0
 80087c0:	bf18      	it	ne
 80087c2:	2301      	movne	r3, #1
 80087c4:	0692      	lsls	r2, r2, #26
 80087c6:	d42b      	bmi.n	8008820 <_printf_common+0xb0>
 80087c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087cc:	4641      	mov	r1, r8
 80087ce:	4638      	mov	r0, r7
 80087d0:	47c8      	blx	r9
 80087d2:	3001      	adds	r0, #1
 80087d4:	d01e      	beq.n	8008814 <_printf_common+0xa4>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	6922      	ldr	r2, [r4, #16]
 80087da:	f003 0306 	and.w	r3, r3, #6
 80087de:	2b04      	cmp	r3, #4
 80087e0:	bf02      	ittt	eq
 80087e2:	68e5      	ldreq	r5, [r4, #12]
 80087e4:	6833      	ldreq	r3, [r6, #0]
 80087e6:	1aed      	subeq	r5, r5, r3
 80087e8:	68a3      	ldr	r3, [r4, #8]
 80087ea:	bf0c      	ite	eq
 80087ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f0:	2500      	movne	r5, #0
 80087f2:	4293      	cmp	r3, r2
 80087f4:	bfc4      	itt	gt
 80087f6:	1a9b      	subgt	r3, r3, r2
 80087f8:	18ed      	addgt	r5, r5, r3
 80087fa:	2600      	movs	r6, #0
 80087fc:	341a      	adds	r4, #26
 80087fe:	42b5      	cmp	r5, r6
 8008800:	d11a      	bne.n	8008838 <_printf_common+0xc8>
 8008802:	2000      	movs	r0, #0
 8008804:	e008      	b.n	8008818 <_printf_common+0xa8>
 8008806:	2301      	movs	r3, #1
 8008808:	4652      	mov	r2, sl
 800880a:	4641      	mov	r1, r8
 800880c:	4638      	mov	r0, r7
 800880e:	47c8      	blx	r9
 8008810:	3001      	adds	r0, #1
 8008812:	d103      	bne.n	800881c <_printf_common+0xac>
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881c:	3501      	adds	r5, #1
 800881e:	e7c6      	b.n	80087ae <_printf_common+0x3e>
 8008820:	18e1      	adds	r1, r4, r3
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	2030      	movs	r0, #48	@ 0x30
 8008826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800882a:	4422      	add	r2, r4
 800882c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008834:	3302      	adds	r3, #2
 8008836:	e7c7      	b.n	80087c8 <_printf_common+0x58>
 8008838:	2301      	movs	r3, #1
 800883a:	4622      	mov	r2, r4
 800883c:	4641      	mov	r1, r8
 800883e:	4638      	mov	r0, r7
 8008840:	47c8      	blx	r9
 8008842:	3001      	adds	r0, #1
 8008844:	d0e6      	beq.n	8008814 <_printf_common+0xa4>
 8008846:	3601      	adds	r6, #1
 8008848:	e7d9      	b.n	80087fe <_printf_common+0x8e>
	...

0800884c <_printf_i>:
 800884c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008850:	7e0f      	ldrb	r7, [r1, #24]
 8008852:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008854:	2f78      	cmp	r7, #120	@ 0x78
 8008856:	4691      	mov	r9, r2
 8008858:	4680      	mov	r8, r0
 800885a:	460c      	mov	r4, r1
 800885c:	469a      	mov	sl, r3
 800885e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008862:	d807      	bhi.n	8008874 <_printf_i+0x28>
 8008864:	2f62      	cmp	r7, #98	@ 0x62
 8008866:	d80a      	bhi.n	800887e <_printf_i+0x32>
 8008868:	2f00      	cmp	r7, #0
 800886a:	f000 80d2 	beq.w	8008a12 <_printf_i+0x1c6>
 800886e:	2f58      	cmp	r7, #88	@ 0x58
 8008870:	f000 80b9 	beq.w	80089e6 <_printf_i+0x19a>
 8008874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800887c:	e03a      	b.n	80088f4 <_printf_i+0xa8>
 800887e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008882:	2b15      	cmp	r3, #21
 8008884:	d8f6      	bhi.n	8008874 <_printf_i+0x28>
 8008886:	a101      	add	r1, pc, #4	@ (adr r1, 800888c <_printf_i+0x40>)
 8008888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800888c:	080088e5 	.word	0x080088e5
 8008890:	080088f9 	.word	0x080088f9
 8008894:	08008875 	.word	0x08008875
 8008898:	08008875 	.word	0x08008875
 800889c:	08008875 	.word	0x08008875
 80088a0:	08008875 	.word	0x08008875
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	08008875 	.word	0x08008875
 80088ac:	08008875 	.word	0x08008875
 80088b0:	08008875 	.word	0x08008875
 80088b4:	08008875 	.word	0x08008875
 80088b8:	080089f9 	.word	0x080089f9
 80088bc:	08008923 	.word	0x08008923
 80088c0:	080089b3 	.word	0x080089b3
 80088c4:	08008875 	.word	0x08008875
 80088c8:	08008875 	.word	0x08008875
 80088cc:	08008a1b 	.word	0x08008a1b
 80088d0:	08008875 	.word	0x08008875
 80088d4:	08008923 	.word	0x08008923
 80088d8:	08008875 	.word	0x08008875
 80088dc:	08008875 	.word	0x08008875
 80088e0:	080089bb 	.word	0x080089bb
 80088e4:	6833      	ldr	r3, [r6, #0]
 80088e6:	1d1a      	adds	r2, r3, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6032      	str	r2, [r6, #0]
 80088ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088f4:	2301      	movs	r3, #1
 80088f6:	e09d      	b.n	8008a34 <_printf_i+0x1e8>
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	6820      	ldr	r0, [r4, #0]
 80088fc:	1d19      	adds	r1, r3, #4
 80088fe:	6031      	str	r1, [r6, #0]
 8008900:	0606      	lsls	r6, r0, #24
 8008902:	d501      	bpl.n	8008908 <_printf_i+0xbc>
 8008904:	681d      	ldr	r5, [r3, #0]
 8008906:	e003      	b.n	8008910 <_printf_i+0xc4>
 8008908:	0645      	lsls	r5, r0, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0xb8>
 800890c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008910:	2d00      	cmp	r5, #0
 8008912:	da03      	bge.n	800891c <_printf_i+0xd0>
 8008914:	232d      	movs	r3, #45	@ 0x2d
 8008916:	426d      	negs	r5, r5
 8008918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800891c:	4859      	ldr	r0, [pc, #356]	@ (8008a84 <_printf_i+0x238>)
 800891e:	230a      	movs	r3, #10
 8008920:	e011      	b.n	8008946 <_printf_i+0xfa>
 8008922:	6821      	ldr	r1, [r4, #0]
 8008924:	6833      	ldr	r3, [r6, #0]
 8008926:	0608      	lsls	r0, r1, #24
 8008928:	f853 5b04 	ldr.w	r5, [r3], #4
 800892c:	d402      	bmi.n	8008934 <_printf_i+0xe8>
 800892e:	0649      	lsls	r1, r1, #25
 8008930:	bf48      	it	mi
 8008932:	b2ad      	uxthmi	r5, r5
 8008934:	2f6f      	cmp	r7, #111	@ 0x6f
 8008936:	4853      	ldr	r0, [pc, #332]	@ (8008a84 <_printf_i+0x238>)
 8008938:	6033      	str	r3, [r6, #0]
 800893a:	bf14      	ite	ne
 800893c:	230a      	movne	r3, #10
 800893e:	2308      	moveq	r3, #8
 8008940:	2100      	movs	r1, #0
 8008942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008946:	6866      	ldr	r6, [r4, #4]
 8008948:	60a6      	str	r6, [r4, #8]
 800894a:	2e00      	cmp	r6, #0
 800894c:	bfa2      	ittt	ge
 800894e:	6821      	ldrge	r1, [r4, #0]
 8008950:	f021 0104 	bicge.w	r1, r1, #4
 8008954:	6021      	strge	r1, [r4, #0]
 8008956:	b90d      	cbnz	r5, 800895c <_printf_i+0x110>
 8008958:	2e00      	cmp	r6, #0
 800895a:	d04b      	beq.n	80089f4 <_printf_i+0x1a8>
 800895c:	4616      	mov	r6, r2
 800895e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008962:	fb03 5711 	mls	r7, r3, r1, r5
 8008966:	5dc7      	ldrb	r7, [r0, r7]
 8008968:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800896c:	462f      	mov	r7, r5
 800896e:	42bb      	cmp	r3, r7
 8008970:	460d      	mov	r5, r1
 8008972:	d9f4      	bls.n	800895e <_printf_i+0x112>
 8008974:	2b08      	cmp	r3, #8
 8008976:	d10b      	bne.n	8008990 <_printf_i+0x144>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	07df      	lsls	r7, r3, #31
 800897c:	d508      	bpl.n	8008990 <_printf_i+0x144>
 800897e:	6923      	ldr	r3, [r4, #16]
 8008980:	6861      	ldr	r1, [r4, #4]
 8008982:	4299      	cmp	r1, r3
 8008984:	bfde      	ittt	le
 8008986:	2330      	movle	r3, #48	@ 0x30
 8008988:	f806 3c01 	strble.w	r3, [r6, #-1]
 800898c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008990:	1b92      	subs	r2, r2, r6
 8008992:	6122      	str	r2, [r4, #16]
 8008994:	f8cd a000 	str.w	sl, [sp]
 8008998:	464b      	mov	r3, r9
 800899a:	aa03      	add	r2, sp, #12
 800899c:	4621      	mov	r1, r4
 800899e:	4640      	mov	r0, r8
 80089a0:	f7ff fee6 	bl	8008770 <_printf_common>
 80089a4:	3001      	adds	r0, #1
 80089a6:	d14a      	bne.n	8008a3e <_printf_i+0x1f2>
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ac:	b004      	add	sp, #16
 80089ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	f043 0320 	orr.w	r3, r3, #32
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	4833      	ldr	r0, [pc, #204]	@ (8008a88 <_printf_i+0x23c>)
 80089bc:	2778      	movs	r7, #120	@ 0x78
 80089be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6831      	ldr	r1, [r6, #0]
 80089c6:	061f      	lsls	r7, r3, #24
 80089c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80089cc:	d402      	bmi.n	80089d4 <_printf_i+0x188>
 80089ce:	065f      	lsls	r7, r3, #25
 80089d0:	bf48      	it	mi
 80089d2:	b2ad      	uxthmi	r5, r5
 80089d4:	6031      	str	r1, [r6, #0]
 80089d6:	07d9      	lsls	r1, r3, #31
 80089d8:	bf44      	itt	mi
 80089da:	f043 0320 	orrmi.w	r3, r3, #32
 80089de:	6023      	strmi	r3, [r4, #0]
 80089e0:	b11d      	cbz	r5, 80089ea <_printf_i+0x19e>
 80089e2:	2310      	movs	r3, #16
 80089e4:	e7ac      	b.n	8008940 <_printf_i+0xf4>
 80089e6:	4827      	ldr	r0, [pc, #156]	@ (8008a84 <_printf_i+0x238>)
 80089e8:	e7e9      	b.n	80089be <_printf_i+0x172>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	f023 0320 	bic.w	r3, r3, #32
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	e7f6      	b.n	80089e2 <_printf_i+0x196>
 80089f4:	4616      	mov	r6, r2
 80089f6:	e7bd      	b.n	8008974 <_printf_i+0x128>
 80089f8:	6833      	ldr	r3, [r6, #0]
 80089fa:	6825      	ldr	r5, [r4, #0]
 80089fc:	6961      	ldr	r1, [r4, #20]
 80089fe:	1d18      	adds	r0, r3, #4
 8008a00:	6030      	str	r0, [r6, #0]
 8008a02:	062e      	lsls	r6, r5, #24
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	d501      	bpl.n	8008a0c <_printf_i+0x1c0>
 8008a08:	6019      	str	r1, [r3, #0]
 8008a0a:	e002      	b.n	8008a12 <_printf_i+0x1c6>
 8008a0c:	0668      	lsls	r0, r5, #25
 8008a0e:	d5fb      	bpl.n	8008a08 <_printf_i+0x1bc>
 8008a10:	8019      	strh	r1, [r3, #0]
 8008a12:	2300      	movs	r3, #0
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	4616      	mov	r6, r2
 8008a18:	e7bc      	b.n	8008994 <_printf_i+0x148>
 8008a1a:	6833      	ldr	r3, [r6, #0]
 8008a1c:	1d1a      	adds	r2, r3, #4
 8008a1e:	6032      	str	r2, [r6, #0]
 8008a20:	681e      	ldr	r6, [r3, #0]
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	2100      	movs	r1, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7f7 fbf2 	bl	8000210 <memchr>
 8008a2c:	b108      	cbz	r0, 8008a32 <_printf_i+0x1e6>
 8008a2e:	1b80      	subs	r0, r0, r6
 8008a30:	6060      	str	r0, [r4, #4]
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	2300      	movs	r3, #0
 8008a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a3c:	e7aa      	b.n	8008994 <_printf_i+0x148>
 8008a3e:	6923      	ldr	r3, [r4, #16]
 8008a40:	4632      	mov	r2, r6
 8008a42:	4649      	mov	r1, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	47d0      	blx	sl
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d0ad      	beq.n	80089a8 <_printf_i+0x15c>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	079b      	lsls	r3, r3, #30
 8008a50:	d413      	bmi.n	8008a7a <_printf_i+0x22e>
 8008a52:	68e0      	ldr	r0, [r4, #12]
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	4298      	cmp	r0, r3
 8008a58:	bfb8      	it	lt
 8008a5a:	4618      	movlt	r0, r3
 8008a5c:	e7a6      	b.n	80089ac <_printf_i+0x160>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4632      	mov	r2, r6
 8008a62:	4649      	mov	r1, r9
 8008a64:	4640      	mov	r0, r8
 8008a66:	47d0      	blx	sl
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d09d      	beq.n	80089a8 <_printf_i+0x15c>
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	9903      	ldr	r1, [sp, #12]
 8008a72:	1a5b      	subs	r3, r3, r1
 8008a74:	42ab      	cmp	r3, r5
 8008a76:	dcf2      	bgt.n	8008a5e <_printf_i+0x212>
 8008a78:	e7eb      	b.n	8008a52 <_printf_i+0x206>
 8008a7a:	2500      	movs	r5, #0
 8008a7c:	f104 0619 	add.w	r6, r4, #25
 8008a80:	e7f5      	b.n	8008a6e <_printf_i+0x222>
 8008a82:	bf00      	nop
 8008a84:	0800d102 	.word	0x0800d102
 8008a88:	0800d113 	.word	0x0800d113

08008a8c <_scanf_float>:
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	b087      	sub	sp, #28
 8008a92:	4617      	mov	r7, r2
 8008a94:	9303      	str	r3, [sp, #12]
 8008a96:	688b      	ldr	r3, [r1, #8]
 8008a98:	1e5a      	subs	r2, r3, #1
 8008a9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a9e:	bf81      	itttt	hi
 8008aa0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008aa4:	eb03 0b05 	addhi.w	fp, r3, r5
 8008aa8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008aac:	608b      	strhi	r3, [r1, #8]
 8008aae:	680b      	ldr	r3, [r1, #0]
 8008ab0:	460a      	mov	r2, r1
 8008ab2:	f04f 0500 	mov.w	r5, #0
 8008ab6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008aba:	f842 3b1c 	str.w	r3, [r2], #28
 8008abe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ac2:	4680      	mov	r8, r0
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	bf98      	it	ls
 8008ac8:	f04f 0b00 	movls.w	fp, #0
 8008acc:	9201      	str	r2, [sp, #4]
 8008ace:	4616      	mov	r6, r2
 8008ad0:	46aa      	mov	sl, r5
 8008ad2:	46a9      	mov	r9, r5
 8008ad4:	9502      	str	r5, [sp, #8]
 8008ad6:	68a2      	ldr	r2, [r4, #8]
 8008ad8:	b152      	cbz	r2, 8008af0 <_scanf_float+0x64>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ae0:	d864      	bhi.n	8008bac <_scanf_float+0x120>
 8008ae2:	2b40      	cmp	r3, #64	@ 0x40
 8008ae4:	d83c      	bhi.n	8008b60 <_scanf_float+0xd4>
 8008ae6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008aea:	b2c8      	uxtb	r0, r1
 8008aec:	280e      	cmp	r0, #14
 8008aee:	d93a      	bls.n	8008b66 <_scanf_float+0xda>
 8008af0:	f1b9 0f00 	cmp.w	r9, #0
 8008af4:	d003      	beq.n	8008afe <_scanf_float+0x72>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b02:	f1ba 0f01 	cmp.w	sl, #1
 8008b06:	f200 8117 	bhi.w	8008d38 <_scanf_float+0x2ac>
 8008b0a:	9b01      	ldr	r3, [sp, #4]
 8008b0c:	429e      	cmp	r6, r3
 8008b0e:	f200 8108 	bhi.w	8008d22 <_scanf_float+0x296>
 8008b12:	2001      	movs	r0, #1
 8008b14:	b007      	add	sp, #28
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b1e:	2a0d      	cmp	r2, #13
 8008b20:	d8e6      	bhi.n	8008af0 <_scanf_float+0x64>
 8008b22:	a101      	add	r1, pc, #4	@ (adr r1, 8008b28 <_scanf_float+0x9c>)
 8008b24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b28:	08008c6f 	.word	0x08008c6f
 8008b2c:	08008af1 	.word	0x08008af1
 8008b30:	08008af1 	.word	0x08008af1
 8008b34:	08008af1 	.word	0x08008af1
 8008b38:	08008ccf 	.word	0x08008ccf
 8008b3c:	08008ca7 	.word	0x08008ca7
 8008b40:	08008af1 	.word	0x08008af1
 8008b44:	08008af1 	.word	0x08008af1
 8008b48:	08008c7d 	.word	0x08008c7d
 8008b4c:	08008af1 	.word	0x08008af1
 8008b50:	08008af1 	.word	0x08008af1
 8008b54:	08008af1 	.word	0x08008af1
 8008b58:	08008af1 	.word	0x08008af1
 8008b5c:	08008c35 	.word	0x08008c35
 8008b60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b64:	e7db      	b.n	8008b1e <_scanf_float+0x92>
 8008b66:	290e      	cmp	r1, #14
 8008b68:	d8c2      	bhi.n	8008af0 <_scanf_float+0x64>
 8008b6a:	a001      	add	r0, pc, #4	@ (adr r0, 8008b70 <_scanf_float+0xe4>)
 8008b6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b70:	08008c25 	.word	0x08008c25
 8008b74:	08008af1 	.word	0x08008af1
 8008b78:	08008c25 	.word	0x08008c25
 8008b7c:	08008cbb 	.word	0x08008cbb
 8008b80:	08008af1 	.word	0x08008af1
 8008b84:	08008bcd 	.word	0x08008bcd
 8008b88:	08008c0b 	.word	0x08008c0b
 8008b8c:	08008c0b 	.word	0x08008c0b
 8008b90:	08008c0b 	.word	0x08008c0b
 8008b94:	08008c0b 	.word	0x08008c0b
 8008b98:	08008c0b 	.word	0x08008c0b
 8008b9c:	08008c0b 	.word	0x08008c0b
 8008ba0:	08008c0b 	.word	0x08008c0b
 8008ba4:	08008c0b 	.word	0x08008c0b
 8008ba8:	08008c0b 	.word	0x08008c0b
 8008bac:	2b6e      	cmp	r3, #110	@ 0x6e
 8008bae:	d809      	bhi.n	8008bc4 <_scanf_float+0x138>
 8008bb0:	2b60      	cmp	r3, #96	@ 0x60
 8008bb2:	d8b2      	bhi.n	8008b1a <_scanf_float+0x8e>
 8008bb4:	2b54      	cmp	r3, #84	@ 0x54
 8008bb6:	d07b      	beq.n	8008cb0 <_scanf_float+0x224>
 8008bb8:	2b59      	cmp	r3, #89	@ 0x59
 8008bba:	d199      	bne.n	8008af0 <_scanf_float+0x64>
 8008bbc:	2d07      	cmp	r5, #7
 8008bbe:	d197      	bne.n	8008af0 <_scanf_float+0x64>
 8008bc0:	2508      	movs	r5, #8
 8008bc2:	e02c      	b.n	8008c1e <_scanf_float+0x192>
 8008bc4:	2b74      	cmp	r3, #116	@ 0x74
 8008bc6:	d073      	beq.n	8008cb0 <_scanf_float+0x224>
 8008bc8:	2b79      	cmp	r3, #121	@ 0x79
 8008bca:	e7f6      	b.n	8008bba <_scanf_float+0x12e>
 8008bcc:	6821      	ldr	r1, [r4, #0]
 8008bce:	05c8      	lsls	r0, r1, #23
 8008bd0:	d51b      	bpl.n	8008c0a <_scanf_float+0x17e>
 8008bd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008bd6:	6021      	str	r1, [r4, #0]
 8008bd8:	f109 0901 	add.w	r9, r9, #1
 8008bdc:	f1bb 0f00 	cmp.w	fp, #0
 8008be0:	d003      	beq.n	8008bea <_scanf_float+0x15e>
 8008be2:	3201      	adds	r2, #1
 8008be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008be8:	60a2      	str	r2, [r4, #8]
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	60a3      	str	r3, [r4, #8]
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	607b      	str	r3, [r7, #4]
 8008bfe:	f340 8087 	ble.w	8008d10 <_scanf_float+0x284>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	e765      	b.n	8008ad6 <_scanf_float+0x4a>
 8008c0a:	eb1a 0105 	adds.w	r1, sl, r5
 8008c0e:	f47f af6f 	bne.w	8008af0 <_scanf_float+0x64>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	460d      	mov	r5, r1
 8008c1c:	468a      	mov	sl, r1
 8008c1e:	f806 3b01 	strb.w	r3, [r6], #1
 8008c22:	e7e2      	b.n	8008bea <_scanf_float+0x15e>
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	0610      	lsls	r0, r2, #24
 8008c28:	f57f af62 	bpl.w	8008af0 <_scanf_float+0x64>
 8008c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c30:	6022      	str	r2, [r4, #0]
 8008c32:	e7f4      	b.n	8008c1e <_scanf_float+0x192>
 8008c34:	f1ba 0f00 	cmp.w	sl, #0
 8008c38:	d10e      	bne.n	8008c58 <_scanf_float+0x1cc>
 8008c3a:	f1b9 0f00 	cmp.w	r9, #0
 8008c3e:	d10e      	bne.n	8008c5e <_scanf_float+0x1d2>
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c46:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c4a:	d108      	bne.n	8008c5e <_scanf_float+0x1d2>
 8008c4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c50:	6022      	str	r2, [r4, #0]
 8008c52:	f04f 0a01 	mov.w	sl, #1
 8008c56:	e7e2      	b.n	8008c1e <_scanf_float+0x192>
 8008c58:	f1ba 0f02 	cmp.w	sl, #2
 8008c5c:	d055      	beq.n	8008d0a <_scanf_float+0x27e>
 8008c5e:	2d01      	cmp	r5, #1
 8008c60:	d002      	beq.n	8008c68 <_scanf_float+0x1dc>
 8008c62:	2d04      	cmp	r5, #4
 8008c64:	f47f af44 	bne.w	8008af0 <_scanf_float+0x64>
 8008c68:	3501      	adds	r5, #1
 8008c6a:	b2ed      	uxtb	r5, r5
 8008c6c:	e7d7      	b.n	8008c1e <_scanf_float+0x192>
 8008c6e:	f1ba 0f01 	cmp.w	sl, #1
 8008c72:	f47f af3d 	bne.w	8008af0 <_scanf_float+0x64>
 8008c76:	f04f 0a02 	mov.w	sl, #2
 8008c7a:	e7d0      	b.n	8008c1e <_scanf_float+0x192>
 8008c7c:	b97d      	cbnz	r5, 8008c9e <_scanf_float+0x212>
 8008c7e:	f1b9 0f00 	cmp.w	r9, #0
 8008c82:	f47f af38 	bne.w	8008af6 <_scanf_float+0x6a>
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c90:	f040 8108 	bne.w	8008ea4 <_scanf_float+0x418>
 8008c94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	2501      	movs	r5, #1
 8008c9c:	e7bf      	b.n	8008c1e <_scanf_float+0x192>
 8008c9e:	2d03      	cmp	r5, #3
 8008ca0:	d0e2      	beq.n	8008c68 <_scanf_float+0x1dc>
 8008ca2:	2d05      	cmp	r5, #5
 8008ca4:	e7de      	b.n	8008c64 <_scanf_float+0x1d8>
 8008ca6:	2d02      	cmp	r5, #2
 8008ca8:	f47f af22 	bne.w	8008af0 <_scanf_float+0x64>
 8008cac:	2503      	movs	r5, #3
 8008cae:	e7b6      	b.n	8008c1e <_scanf_float+0x192>
 8008cb0:	2d06      	cmp	r5, #6
 8008cb2:	f47f af1d 	bne.w	8008af0 <_scanf_float+0x64>
 8008cb6:	2507      	movs	r5, #7
 8008cb8:	e7b1      	b.n	8008c1e <_scanf_float+0x192>
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	0591      	lsls	r1, r2, #22
 8008cbe:	f57f af17 	bpl.w	8008af0 <_scanf_float+0x64>
 8008cc2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008cc6:	6022      	str	r2, [r4, #0]
 8008cc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ccc:	e7a7      	b.n	8008c1e <_scanf_float+0x192>
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008cd4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008cd8:	d006      	beq.n	8008ce8 <_scanf_float+0x25c>
 8008cda:	0550      	lsls	r0, r2, #21
 8008cdc:	f57f af08 	bpl.w	8008af0 <_scanf_float+0x64>
 8008ce0:	f1b9 0f00 	cmp.w	r9, #0
 8008ce4:	f000 80de 	beq.w	8008ea4 <_scanf_float+0x418>
 8008ce8:	0591      	lsls	r1, r2, #22
 8008cea:	bf58      	it	pl
 8008cec:	9902      	ldrpl	r1, [sp, #8]
 8008cee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cf2:	bf58      	it	pl
 8008cf4:	eba9 0101 	subpl.w	r1, r9, r1
 8008cf8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008cfc:	bf58      	it	pl
 8008cfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d02:	6022      	str	r2, [r4, #0]
 8008d04:	f04f 0900 	mov.w	r9, #0
 8008d08:	e789      	b.n	8008c1e <_scanf_float+0x192>
 8008d0a:	f04f 0a03 	mov.w	sl, #3
 8008d0e:	e786      	b.n	8008c1e <_scanf_float+0x192>
 8008d10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d14:	4639      	mov	r1, r7
 8008d16:	4640      	mov	r0, r8
 8008d18:	4798      	blx	r3
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f43f aedb 	beq.w	8008ad6 <_scanf_float+0x4a>
 8008d20:	e6e6      	b.n	8008af0 <_scanf_float+0x64>
 8008d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d2a:	463a      	mov	r2, r7
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	4798      	blx	r3
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	e6e8      	b.n	8008b0a <_scanf_float+0x7e>
 8008d38:	1e6b      	subs	r3, r5, #1
 8008d3a:	2b06      	cmp	r3, #6
 8008d3c:	d824      	bhi.n	8008d88 <_scanf_float+0x2fc>
 8008d3e:	2d02      	cmp	r5, #2
 8008d40:	d836      	bhi.n	8008db0 <_scanf_float+0x324>
 8008d42:	9b01      	ldr	r3, [sp, #4]
 8008d44:	429e      	cmp	r6, r3
 8008d46:	f67f aee4 	bls.w	8008b12 <_scanf_float+0x86>
 8008d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d52:	463a      	mov	r2, r7
 8008d54:	4640      	mov	r0, r8
 8008d56:	4798      	blx	r3
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	e7f0      	b.n	8008d42 <_scanf_float+0x2b6>
 8008d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d68:	463a      	mov	r2, r7
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4798      	blx	r3
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d78:	fa5f fa8a 	uxtb.w	sl, sl
 8008d7c:	f1ba 0f02 	cmp.w	sl, #2
 8008d80:	d1ee      	bne.n	8008d60 <_scanf_float+0x2d4>
 8008d82:	3d03      	subs	r5, #3
 8008d84:	b2ed      	uxtb	r5, r5
 8008d86:	1b76      	subs	r6, r6, r5
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	05da      	lsls	r2, r3, #23
 8008d8c:	d530      	bpl.n	8008df0 <_scanf_float+0x364>
 8008d8e:	055b      	lsls	r3, r3, #21
 8008d90:	d511      	bpl.n	8008db6 <_scanf_float+0x32a>
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	429e      	cmp	r6, r3
 8008d96:	f67f aebc 	bls.w	8008b12 <_scanf_float+0x86>
 8008d9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008da2:	463a      	mov	r2, r7
 8008da4:	4640      	mov	r0, r8
 8008da6:	4798      	blx	r3
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	e7f0      	b.n	8008d92 <_scanf_float+0x306>
 8008db0:	46aa      	mov	sl, r5
 8008db2:	46b3      	mov	fp, r6
 8008db4:	e7de      	b.n	8008d74 <_scanf_float+0x2e8>
 8008db6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	2965      	cmp	r1, #101	@ 0x65
 8008dbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dc2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	d00c      	beq.n	8008de4 <_scanf_float+0x358>
 8008dca:	2945      	cmp	r1, #69	@ 0x45
 8008dcc:	d00a      	beq.n	8008de4 <_scanf_float+0x358>
 8008dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dd2:	463a      	mov	r2, r7
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4798      	blx	r3
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	1eb5      	subs	r5, r6, #2
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008de8:	463a      	mov	r2, r7
 8008dea:	4640      	mov	r0, r8
 8008dec:	4798      	blx	r3
 8008dee:	462e      	mov	r6, r5
 8008df0:	6822      	ldr	r2, [r4, #0]
 8008df2:	f012 0210 	ands.w	r2, r2, #16
 8008df6:	d001      	beq.n	8008dfc <_scanf_float+0x370>
 8008df8:	2000      	movs	r0, #0
 8008dfa:	e68b      	b.n	8008b14 <_scanf_float+0x88>
 8008dfc:	7032      	strb	r2, [r6, #0]
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e08:	d11c      	bne.n	8008e44 <_scanf_float+0x3b8>
 8008e0a:	9b02      	ldr	r3, [sp, #8]
 8008e0c:	454b      	cmp	r3, r9
 8008e0e:	eba3 0209 	sub.w	r2, r3, r9
 8008e12:	d123      	bne.n	8008e5c <_scanf_float+0x3d0>
 8008e14:	9901      	ldr	r1, [sp, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	4640      	mov	r0, r8
 8008e1a:	f002 fd09 	bl	800b830 <_strtod_r>
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	6821      	ldr	r1, [r4, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f011 0f02 	tst.w	r1, #2
 8008e28:	ec57 6b10 	vmov	r6, r7, d0
 8008e2c:	f103 0204 	add.w	r2, r3, #4
 8008e30:	d01f      	beq.n	8008e72 <_scanf_float+0x3e6>
 8008e32:	9903      	ldr	r1, [sp, #12]
 8008e34:	600a      	str	r2, [r1, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	e9c3 6700 	strd	r6, r7, [r3]
 8008e3c:	68e3      	ldr	r3, [r4, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60e3      	str	r3, [r4, #12]
 8008e42:	e7d9      	b.n	8008df8 <_scanf_float+0x36c>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0e4      	beq.n	8008e14 <_scanf_float+0x388>
 8008e4a:	9905      	ldr	r1, [sp, #20]
 8008e4c:	230a      	movs	r3, #10
 8008e4e:	3101      	adds	r1, #1
 8008e50:	4640      	mov	r0, r8
 8008e52:	f002 fd6d 	bl	800b930 <_strtol_r>
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	9e05      	ldr	r6, [sp, #20]
 8008e5a:	1ac2      	subs	r2, r0, r3
 8008e5c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e60:	429e      	cmp	r6, r3
 8008e62:	bf28      	it	cs
 8008e64:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e68:	4910      	ldr	r1, [pc, #64]	@ (8008eac <_scanf_float+0x420>)
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f000 f954 	bl	8009118 <siprintf>
 8008e70:	e7d0      	b.n	8008e14 <_scanf_float+0x388>
 8008e72:	f011 0f04 	tst.w	r1, #4
 8008e76:	9903      	ldr	r1, [sp, #12]
 8008e78:	600a      	str	r2, [r1, #0]
 8008e7a:	d1dc      	bne.n	8008e36 <_scanf_float+0x3aa>
 8008e7c:	681d      	ldr	r5, [r3, #0]
 8008e7e:	4632      	mov	r2, r6
 8008e80:	463b      	mov	r3, r7
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 fe71 	bl	8000b6c <__aeabi_dcmpun>
 8008e8a:	b128      	cbz	r0, 8008e98 <_scanf_float+0x40c>
 8008e8c:	4808      	ldr	r0, [pc, #32]	@ (8008eb0 <_scanf_float+0x424>)
 8008e8e:	f000 fac9 	bl	8009424 <nanf>
 8008e92:	ed85 0a00 	vstr	s0, [r5]
 8008e96:	e7d1      	b.n	8008e3c <_scanf_float+0x3b0>
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	f7f7 fec4 	bl	8000c28 <__aeabi_d2f>
 8008ea0:	6028      	str	r0, [r5, #0]
 8008ea2:	e7cb      	b.n	8008e3c <_scanf_float+0x3b0>
 8008ea4:	f04f 0900 	mov.w	r9, #0
 8008ea8:	e629      	b.n	8008afe <_scanf_float+0x72>
 8008eaa:	bf00      	nop
 8008eac:	0800d124 	.word	0x0800d124
 8008eb0:	0800d4bd 	.word	0x0800d4bd

08008eb4 <std>:
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	4604      	mov	r4, r0
 8008eba:	e9c0 3300 	strd	r3, r3, [r0]
 8008ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ec2:	6083      	str	r3, [r0, #8]
 8008ec4:	8181      	strh	r1, [r0, #12]
 8008ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ec8:	81c2      	strh	r2, [r0, #14]
 8008eca:	6183      	str	r3, [r0, #24]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	2208      	movs	r2, #8
 8008ed0:	305c      	adds	r0, #92	@ 0x5c
 8008ed2:	f000 fa19 	bl	8009308 <memset>
 8008ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <std+0x58>)
 8008ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eda:	4b0d      	ldr	r3, [pc, #52]	@ (8008f10 <std+0x5c>)
 8008edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ede:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <std+0x60>)
 8008ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <std+0x64>)
 8008ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <std+0x68>)
 8008ee8:	6224      	str	r4, [r4, #32]
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d006      	beq.n	8008efc <std+0x48>
 8008eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ef2:	4294      	cmp	r4, r2
 8008ef4:	d002      	beq.n	8008efc <std+0x48>
 8008ef6:	33d0      	adds	r3, #208	@ 0xd0
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	d105      	bne.n	8008f08 <std+0x54>
 8008efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f04:	f000 ba7c 	b.w	8009400 <__retarget_lock_init_recursive>
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	08009159 	.word	0x08009159
 8008f10:	0800917b 	.word	0x0800917b
 8008f14:	080091b3 	.word	0x080091b3
 8008f18:	080091d7 	.word	0x080091d7
 8008f1c:	20000624 	.word	0x20000624

08008f20 <stdio_exit_handler>:
 8008f20:	4a02      	ldr	r2, [pc, #8]	@ (8008f2c <stdio_exit_handler+0xc>)
 8008f22:	4903      	ldr	r1, [pc, #12]	@ (8008f30 <stdio_exit_handler+0x10>)
 8008f24:	4803      	ldr	r0, [pc, #12]	@ (8008f34 <stdio_exit_handler+0x14>)
 8008f26:	f000 b869 	b.w	8008ffc <_fwalk_sglue>
 8008f2a:	bf00      	nop
 8008f2c:	20000038 	.word	0x20000038
 8008f30:	0800bf71 	.word	0x0800bf71
 8008f34:	20000048 	.word	0x20000048

08008f38 <cleanup_stdio>:
 8008f38:	6841      	ldr	r1, [r0, #4]
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f6c <cleanup_stdio+0x34>)
 8008f3c:	4299      	cmp	r1, r3
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	4604      	mov	r4, r0
 8008f42:	d001      	beq.n	8008f48 <cleanup_stdio+0x10>
 8008f44:	f003 f814 	bl	800bf70 <_fflush_r>
 8008f48:	68a1      	ldr	r1, [r4, #8]
 8008f4a:	4b09      	ldr	r3, [pc, #36]	@ (8008f70 <cleanup_stdio+0x38>)
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	d002      	beq.n	8008f56 <cleanup_stdio+0x1e>
 8008f50:	4620      	mov	r0, r4
 8008f52:	f003 f80d 	bl	800bf70 <_fflush_r>
 8008f56:	68e1      	ldr	r1, [r4, #12]
 8008f58:	4b06      	ldr	r3, [pc, #24]	@ (8008f74 <cleanup_stdio+0x3c>)
 8008f5a:	4299      	cmp	r1, r3
 8008f5c:	d004      	beq.n	8008f68 <cleanup_stdio+0x30>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f64:	f003 b804 	b.w	800bf70 <_fflush_r>
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000624 	.word	0x20000624
 8008f70:	2000068c 	.word	0x2000068c
 8008f74:	200006f4 	.word	0x200006f4

08008f78 <global_stdio_init.part.0>:
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa8 <global_stdio_init.part.0+0x30>)
 8008f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8008fac <global_stdio_init.part.0+0x34>)
 8008f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8008fb0 <global_stdio_init.part.0+0x38>)
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	4620      	mov	r0, r4
 8008f84:	2200      	movs	r2, #0
 8008f86:	2104      	movs	r1, #4
 8008f88:	f7ff ff94 	bl	8008eb4 <std>
 8008f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f90:	2201      	movs	r2, #1
 8008f92:	2109      	movs	r1, #9
 8008f94:	f7ff ff8e 	bl	8008eb4 <std>
 8008f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa2:	2112      	movs	r1, #18
 8008fa4:	f7ff bf86 	b.w	8008eb4 <std>
 8008fa8:	2000075c 	.word	0x2000075c
 8008fac:	20000624 	.word	0x20000624
 8008fb0:	08008f21 	.word	0x08008f21

08008fb4 <__sfp_lock_acquire>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	@ (8008fbc <__sfp_lock_acquire+0x8>)
 8008fb6:	f000 ba24 	b.w	8009402 <__retarget_lock_acquire_recursive>
 8008fba:	bf00      	nop
 8008fbc:	20000765 	.word	0x20000765

08008fc0 <__sfp_lock_release>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	@ (8008fc8 <__sfp_lock_release+0x8>)
 8008fc2:	f000 ba1f 	b.w	8009404 <__retarget_lock_release_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	20000765 	.word	0x20000765

08008fcc <__sinit>:
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	4604      	mov	r4, r0
 8008fd0:	f7ff fff0 	bl	8008fb4 <__sfp_lock_acquire>
 8008fd4:	6a23      	ldr	r3, [r4, #32]
 8008fd6:	b11b      	cbz	r3, 8008fe0 <__sinit+0x14>
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	f7ff bff0 	b.w	8008fc0 <__sfp_lock_release>
 8008fe0:	4b04      	ldr	r3, [pc, #16]	@ (8008ff4 <__sinit+0x28>)
 8008fe2:	6223      	str	r3, [r4, #32]
 8008fe4:	4b04      	ldr	r3, [pc, #16]	@ (8008ff8 <__sinit+0x2c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1f5      	bne.n	8008fd8 <__sinit+0xc>
 8008fec:	f7ff ffc4 	bl	8008f78 <global_stdio_init.part.0>
 8008ff0:	e7f2      	b.n	8008fd8 <__sinit+0xc>
 8008ff2:	bf00      	nop
 8008ff4:	08008f39 	.word	0x08008f39
 8008ff8:	2000075c 	.word	0x2000075c

08008ffc <_fwalk_sglue>:
 8008ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009000:	4607      	mov	r7, r0
 8009002:	4688      	mov	r8, r1
 8009004:	4614      	mov	r4, r2
 8009006:	2600      	movs	r6, #0
 8009008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800900c:	f1b9 0901 	subs.w	r9, r9, #1
 8009010:	d505      	bpl.n	800901e <_fwalk_sglue+0x22>
 8009012:	6824      	ldr	r4, [r4, #0]
 8009014:	2c00      	cmp	r4, #0
 8009016:	d1f7      	bne.n	8009008 <_fwalk_sglue+0xc>
 8009018:	4630      	mov	r0, r6
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d907      	bls.n	8009034 <_fwalk_sglue+0x38>
 8009024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009028:	3301      	adds	r3, #1
 800902a:	d003      	beq.n	8009034 <_fwalk_sglue+0x38>
 800902c:	4629      	mov	r1, r5
 800902e:	4638      	mov	r0, r7
 8009030:	47c0      	blx	r8
 8009032:	4306      	orrs	r6, r0
 8009034:	3568      	adds	r5, #104	@ 0x68
 8009036:	e7e9      	b.n	800900c <_fwalk_sglue+0x10>

08009038 <iprintf>:
 8009038:	b40f      	push	{r0, r1, r2, r3}
 800903a:	b507      	push	{r0, r1, r2, lr}
 800903c:	4906      	ldr	r1, [pc, #24]	@ (8009058 <iprintf+0x20>)
 800903e:	ab04      	add	r3, sp, #16
 8009040:	6808      	ldr	r0, [r1, #0]
 8009042:	f853 2b04 	ldr.w	r2, [r3], #4
 8009046:	6881      	ldr	r1, [r0, #8]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	f002 fdf5 	bl	800bc38 <_vfiprintf_r>
 800904e:	b003      	add	sp, #12
 8009050:	f85d eb04 	ldr.w	lr, [sp], #4
 8009054:	b004      	add	sp, #16
 8009056:	4770      	bx	lr
 8009058:	20000044 	.word	0x20000044

0800905c <_puts_r>:
 800905c:	6a03      	ldr	r3, [r0, #32]
 800905e:	b570      	push	{r4, r5, r6, lr}
 8009060:	6884      	ldr	r4, [r0, #8]
 8009062:	4605      	mov	r5, r0
 8009064:	460e      	mov	r6, r1
 8009066:	b90b      	cbnz	r3, 800906c <_puts_r+0x10>
 8009068:	f7ff ffb0 	bl	8008fcc <__sinit>
 800906c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800906e:	07db      	lsls	r3, r3, #31
 8009070:	d405      	bmi.n	800907e <_puts_r+0x22>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	0598      	lsls	r0, r3, #22
 8009076:	d402      	bmi.n	800907e <_puts_r+0x22>
 8009078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800907a:	f000 f9c2 	bl	8009402 <__retarget_lock_acquire_recursive>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	0719      	lsls	r1, r3, #28
 8009082:	d502      	bpl.n	800908a <_puts_r+0x2e>
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d135      	bne.n	80090f6 <_puts_r+0x9a>
 800908a:	4621      	mov	r1, r4
 800908c:	4628      	mov	r0, r5
 800908e:	f000 f8e5 	bl	800925c <__swsetup_r>
 8009092:	b380      	cbz	r0, 80090f6 <_puts_r+0x9a>
 8009094:	f04f 35ff 	mov.w	r5, #4294967295
 8009098:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800909a:	07da      	lsls	r2, r3, #31
 800909c:	d405      	bmi.n	80090aa <_puts_r+0x4e>
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	059b      	lsls	r3, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_puts_r+0x4e>
 80090a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090a6:	f000 f9ad 	bl	8009404 <__retarget_lock_release_recursive>
 80090aa:	4628      	mov	r0, r5
 80090ac:	bd70      	pop	{r4, r5, r6, pc}
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da04      	bge.n	80090bc <_puts_r+0x60>
 80090b2:	69a2      	ldr	r2, [r4, #24]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	dc17      	bgt.n	80090e8 <_puts_r+0x8c>
 80090b8:	290a      	cmp	r1, #10
 80090ba:	d015      	beq.n	80090e8 <_puts_r+0x8c>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	6022      	str	r2, [r4, #0]
 80090c2:	7019      	strb	r1, [r3, #0]
 80090c4:	68a3      	ldr	r3, [r4, #8]
 80090c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090ca:	3b01      	subs	r3, #1
 80090cc:	60a3      	str	r3, [r4, #8]
 80090ce:	2900      	cmp	r1, #0
 80090d0:	d1ed      	bne.n	80090ae <_puts_r+0x52>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da11      	bge.n	80090fa <_puts_r+0x9e>
 80090d6:	4622      	mov	r2, r4
 80090d8:	210a      	movs	r1, #10
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f87f 	bl	80091de <__swbuf_r>
 80090e0:	3001      	adds	r0, #1
 80090e2:	d0d7      	beq.n	8009094 <_puts_r+0x38>
 80090e4:	250a      	movs	r5, #10
 80090e6:	e7d7      	b.n	8009098 <_puts_r+0x3c>
 80090e8:	4622      	mov	r2, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 f877 	bl	80091de <__swbuf_r>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d1e7      	bne.n	80090c4 <_puts_r+0x68>
 80090f4:	e7ce      	b.n	8009094 <_puts_r+0x38>
 80090f6:	3e01      	subs	r6, #1
 80090f8:	e7e4      	b.n	80090c4 <_puts_r+0x68>
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	6022      	str	r2, [r4, #0]
 8009100:	220a      	movs	r2, #10
 8009102:	701a      	strb	r2, [r3, #0]
 8009104:	e7ee      	b.n	80090e4 <_puts_r+0x88>
	...

08009108 <puts>:
 8009108:	4b02      	ldr	r3, [pc, #8]	@ (8009114 <puts+0xc>)
 800910a:	4601      	mov	r1, r0
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	f7ff bfa5 	b.w	800905c <_puts_r>
 8009112:	bf00      	nop
 8009114:	20000044 	.word	0x20000044

08009118 <siprintf>:
 8009118:	b40e      	push	{r1, r2, r3}
 800911a:	b500      	push	{lr}
 800911c:	b09c      	sub	sp, #112	@ 0x70
 800911e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009120:	9002      	str	r0, [sp, #8]
 8009122:	9006      	str	r0, [sp, #24]
 8009124:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009128:	4809      	ldr	r0, [pc, #36]	@ (8009150 <siprintf+0x38>)
 800912a:	9107      	str	r1, [sp, #28]
 800912c:	9104      	str	r1, [sp, #16]
 800912e:	4909      	ldr	r1, [pc, #36]	@ (8009154 <siprintf+0x3c>)
 8009130:	f853 2b04 	ldr.w	r2, [r3], #4
 8009134:	9105      	str	r1, [sp, #20]
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	a902      	add	r1, sp, #8
 800913c:	f002 fc56 	bl	800b9ec <_svfiprintf_r>
 8009140:	9b02      	ldr	r3, [sp, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	b01c      	add	sp, #112	@ 0x70
 8009148:	f85d eb04 	ldr.w	lr, [sp], #4
 800914c:	b003      	add	sp, #12
 800914e:	4770      	bx	lr
 8009150:	20000044 	.word	0x20000044
 8009154:	ffff0208 	.word	0xffff0208

08009158 <__sread>:
 8009158:	b510      	push	{r4, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009160:	f000 f900 	bl	8009364 <_read_r>
 8009164:	2800      	cmp	r0, #0
 8009166:	bfab      	itete	ge
 8009168:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800916a:	89a3      	ldrhlt	r3, [r4, #12]
 800916c:	181b      	addge	r3, r3, r0
 800916e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009172:	bfac      	ite	ge
 8009174:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009176:	81a3      	strhlt	r3, [r4, #12]
 8009178:	bd10      	pop	{r4, pc}

0800917a <__swrite>:
 800917a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917e:	461f      	mov	r7, r3
 8009180:	898b      	ldrh	r3, [r1, #12]
 8009182:	05db      	lsls	r3, r3, #23
 8009184:	4605      	mov	r5, r0
 8009186:	460c      	mov	r4, r1
 8009188:	4616      	mov	r6, r2
 800918a:	d505      	bpl.n	8009198 <__swrite+0x1e>
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	2302      	movs	r3, #2
 8009192:	2200      	movs	r2, #0
 8009194:	f000 f8d4 	bl	8009340 <_lseek_r>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	4632      	mov	r2, r6
 80091a6:	463b      	mov	r3, r7
 80091a8:	4628      	mov	r0, r5
 80091aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ae:	f000 b8eb 	b.w	8009388 <_write_r>

080091b2 <__sseek>:
 80091b2:	b510      	push	{r4, lr}
 80091b4:	460c      	mov	r4, r1
 80091b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ba:	f000 f8c1 	bl	8009340 <_lseek_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	bf15      	itete	ne
 80091c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091ce:	81a3      	strheq	r3, [r4, #12]
 80091d0:	bf18      	it	ne
 80091d2:	81a3      	strhne	r3, [r4, #12]
 80091d4:	bd10      	pop	{r4, pc}

080091d6 <__sclose>:
 80091d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091da:	f000 b8a1 	b.w	8009320 <_close_r>

080091de <__swbuf_r>:
 80091de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e0:	460e      	mov	r6, r1
 80091e2:	4614      	mov	r4, r2
 80091e4:	4605      	mov	r5, r0
 80091e6:	b118      	cbz	r0, 80091f0 <__swbuf_r+0x12>
 80091e8:	6a03      	ldr	r3, [r0, #32]
 80091ea:	b90b      	cbnz	r3, 80091f0 <__swbuf_r+0x12>
 80091ec:	f7ff feee 	bl	8008fcc <__sinit>
 80091f0:	69a3      	ldr	r3, [r4, #24]
 80091f2:	60a3      	str	r3, [r4, #8]
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	071a      	lsls	r2, r3, #28
 80091f8:	d501      	bpl.n	80091fe <__swbuf_r+0x20>
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	b943      	cbnz	r3, 8009210 <__swbuf_r+0x32>
 80091fe:	4621      	mov	r1, r4
 8009200:	4628      	mov	r0, r5
 8009202:	f000 f82b 	bl	800925c <__swsetup_r>
 8009206:	b118      	cbz	r0, 8009210 <__swbuf_r+0x32>
 8009208:	f04f 37ff 	mov.w	r7, #4294967295
 800920c:	4638      	mov	r0, r7
 800920e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	6922      	ldr	r2, [r4, #16]
 8009214:	1a98      	subs	r0, r3, r2
 8009216:	6963      	ldr	r3, [r4, #20]
 8009218:	b2f6      	uxtb	r6, r6
 800921a:	4283      	cmp	r3, r0
 800921c:	4637      	mov	r7, r6
 800921e:	dc05      	bgt.n	800922c <__swbuf_r+0x4e>
 8009220:	4621      	mov	r1, r4
 8009222:	4628      	mov	r0, r5
 8009224:	f002 fea4 	bl	800bf70 <_fflush_r>
 8009228:	2800      	cmp	r0, #0
 800922a:	d1ed      	bne.n	8009208 <__swbuf_r+0x2a>
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	3b01      	subs	r3, #1
 8009230:	60a3      	str	r3, [r4, #8]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	6022      	str	r2, [r4, #0]
 8009238:	701e      	strb	r6, [r3, #0]
 800923a:	6962      	ldr	r2, [r4, #20]
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	429a      	cmp	r2, r3
 8009240:	d004      	beq.n	800924c <__swbuf_r+0x6e>
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	07db      	lsls	r3, r3, #31
 8009246:	d5e1      	bpl.n	800920c <__swbuf_r+0x2e>
 8009248:	2e0a      	cmp	r6, #10
 800924a:	d1df      	bne.n	800920c <__swbuf_r+0x2e>
 800924c:	4621      	mov	r1, r4
 800924e:	4628      	mov	r0, r5
 8009250:	f002 fe8e 	bl	800bf70 <_fflush_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	d0d9      	beq.n	800920c <__swbuf_r+0x2e>
 8009258:	e7d6      	b.n	8009208 <__swbuf_r+0x2a>
	...

0800925c <__swsetup_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4b29      	ldr	r3, [pc, #164]	@ (8009304 <__swsetup_r+0xa8>)
 8009260:	4605      	mov	r5, r0
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	460c      	mov	r4, r1
 8009266:	b118      	cbz	r0, 8009270 <__swsetup_r+0x14>
 8009268:	6a03      	ldr	r3, [r0, #32]
 800926a:	b90b      	cbnz	r3, 8009270 <__swsetup_r+0x14>
 800926c:	f7ff feae 	bl	8008fcc <__sinit>
 8009270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009274:	0719      	lsls	r1, r3, #28
 8009276:	d422      	bmi.n	80092be <__swsetup_r+0x62>
 8009278:	06da      	lsls	r2, r3, #27
 800927a:	d407      	bmi.n	800928c <__swsetup_r+0x30>
 800927c:	2209      	movs	r2, #9
 800927e:	602a      	str	r2, [r5, #0]
 8009280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	f04f 30ff 	mov.w	r0, #4294967295
 800928a:	e033      	b.n	80092f4 <__swsetup_r+0x98>
 800928c:	0758      	lsls	r0, r3, #29
 800928e:	d512      	bpl.n	80092b6 <__swsetup_r+0x5a>
 8009290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009292:	b141      	cbz	r1, 80092a6 <__swsetup_r+0x4a>
 8009294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009298:	4299      	cmp	r1, r3
 800929a:	d002      	beq.n	80092a2 <__swsetup_r+0x46>
 800929c:	4628      	mov	r0, r5
 800929e:	f000 ff13 	bl	800a0c8 <_free_r>
 80092a2:	2300      	movs	r3, #0
 80092a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	2300      	movs	r3, #0
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f043 0308 	orr.w	r3, r3, #8
 80092bc:	81a3      	strh	r3, [r4, #12]
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	b94b      	cbnz	r3, 80092d6 <__swsetup_r+0x7a>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092cc:	d003      	beq.n	80092d6 <__swsetup_r+0x7a>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f002 fe9b 	bl	800c00c <__smakebuf_r>
 80092d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092da:	f013 0201 	ands.w	r2, r3, #1
 80092de:	d00a      	beq.n	80092f6 <__swsetup_r+0x9a>
 80092e0:	2200      	movs	r2, #0
 80092e2:	60a2      	str	r2, [r4, #8]
 80092e4:	6962      	ldr	r2, [r4, #20]
 80092e6:	4252      	negs	r2, r2
 80092e8:	61a2      	str	r2, [r4, #24]
 80092ea:	6922      	ldr	r2, [r4, #16]
 80092ec:	b942      	cbnz	r2, 8009300 <__swsetup_r+0xa4>
 80092ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092f2:	d1c5      	bne.n	8009280 <__swsetup_r+0x24>
 80092f4:	bd38      	pop	{r3, r4, r5, pc}
 80092f6:	0799      	lsls	r1, r3, #30
 80092f8:	bf58      	it	pl
 80092fa:	6962      	ldrpl	r2, [r4, #20]
 80092fc:	60a2      	str	r2, [r4, #8]
 80092fe:	e7f4      	b.n	80092ea <__swsetup_r+0x8e>
 8009300:	2000      	movs	r0, #0
 8009302:	e7f7      	b.n	80092f4 <__swsetup_r+0x98>
 8009304:	20000044 	.word	0x20000044

08009308 <memset>:
 8009308:	4402      	add	r2, r0
 800930a:	4603      	mov	r3, r0
 800930c:	4293      	cmp	r3, r2
 800930e:	d100      	bne.n	8009312 <memset+0xa>
 8009310:	4770      	bx	lr
 8009312:	f803 1b01 	strb.w	r1, [r3], #1
 8009316:	e7f9      	b.n	800930c <memset+0x4>

08009318 <_localeconv_r>:
 8009318:	4800      	ldr	r0, [pc, #0]	@ (800931c <_localeconv_r+0x4>)
 800931a:	4770      	bx	lr
 800931c:	20000184 	.word	0x20000184

08009320 <_close_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d06      	ldr	r5, [pc, #24]	@ (800933c <_close_r+0x1c>)
 8009324:	2300      	movs	r3, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	602b      	str	r3, [r5, #0]
 800932c:	f7f9 ff5e 	bl	80031ec <_close>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_close_r+0x1a>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_close_r+0x1a>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	20000760 	.word	0x20000760

08009340 <_lseek_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d07      	ldr	r5, [pc, #28]	@ (8009360 <_lseek_r+0x20>)
 8009344:	4604      	mov	r4, r0
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	2200      	movs	r2, #0
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f7f9 ff73 	bl	800323a <_lseek>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_lseek_r+0x1e>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_lseek_r+0x1e>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	20000760 	.word	0x20000760

08009364 <_read_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	@ (8009384 <_read_r+0x20>)
 8009368:	4604      	mov	r4, r0
 800936a:	4608      	mov	r0, r1
 800936c:	4611      	mov	r1, r2
 800936e:	2200      	movs	r2, #0
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f7f9 ff1d 	bl	80031b2 <_read>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_read_r+0x1e>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_read_r+0x1e>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000760 	.word	0x20000760

08009388 <_write_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d07      	ldr	r5, [pc, #28]	@ (80093a8 <_write_r+0x20>)
 800938c:	4604      	mov	r4, r0
 800938e:	4608      	mov	r0, r1
 8009390:	4611      	mov	r1, r2
 8009392:	2200      	movs	r2, #0
 8009394:	602a      	str	r2, [r5, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	f7f9 fb64 	bl	8002a64 <_write>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d102      	bne.n	80093a6 <_write_r+0x1e>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	b103      	cbz	r3, 80093a6 <_write_r+0x1e>
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	20000760 	.word	0x20000760

080093ac <__errno>:
 80093ac:	4b01      	ldr	r3, [pc, #4]	@ (80093b4 <__errno+0x8>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000044 	.word	0x20000044

080093b8 <__libc_init_array>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	4d0d      	ldr	r5, [pc, #52]	@ (80093f0 <__libc_init_array+0x38>)
 80093bc:	4c0d      	ldr	r4, [pc, #52]	@ (80093f4 <__libc_init_array+0x3c>)
 80093be:	1b64      	subs	r4, r4, r5
 80093c0:	10a4      	asrs	r4, r4, #2
 80093c2:	2600      	movs	r6, #0
 80093c4:	42a6      	cmp	r6, r4
 80093c6:	d109      	bne.n	80093dc <__libc_init_array+0x24>
 80093c8:	4d0b      	ldr	r5, [pc, #44]	@ (80093f8 <__libc_init_array+0x40>)
 80093ca:	4c0c      	ldr	r4, [pc, #48]	@ (80093fc <__libc_init_array+0x44>)
 80093cc:	f003 fd48 	bl	800ce60 <_init>
 80093d0:	1b64      	subs	r4, r4, r5
 80093d2:	10a4      	asrs	r4, r4, #2
 80093d4:	2600      	movs	r6, #0
 80093d6:	42a6      	cmp	r6, r4
 80093d8:	d105      	bne.n	80093e6 <__libc_init_array+0x2e>
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e0:	4798      	blx	r3
 80093e2:	3601      	adds	r6, #1
 80093e4:	e7ee      	b.n	80093c4 <__libc_init_array+0xc>
 80093e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ea:	4798      	blx	r3
 80093ec:	3601      	adds	r6, #1
 80093ee:	e7f2      	b.n	80093d6 <__libc_init_array+0x1e>
 80093f0:	0800d598 	.word	0x0800d598
 80093f4:	0800d598 	.word	0x0800d598
 80093f8:	0800d598 	.word	0x0800d598
 80093fc:	0800d59c 	.word	0x0800d59c

08009400 <__retarget_lock_init_recursive>:
 8009400:	4770      	bx	lr

08009402 <__retarget_lock_acquire_recursive>:
 8009402:	4770      	bx	lr

08009404 <__retarget_lock_release_recursive>:
 8009404:	4770      	bx	lr

08009406 <memcpy>:
 8009406:	440a      	add	r2, r1
 8009408:	4291      	cmp	r1, r2
 800940a:	f100 33ff 	add.w	r3, r0, #4294967295
 800940e:	d100      	bne.n	8009412 <memcpy+0xc>
 8009410:	4770      	bx	lr
 8009412:	b510      	push	{r4, lr}
 8009414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800941c:	4291      	cmp	r1, r2
 800941e:	d1f9      	bne.n	8009414 <memcpy+0xe>
 8009420:	bd10      	pop	{r4, pc}
	...

08009424 <nanf>:
 8009424:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800942c <nanf+0x8>
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	7fc00000 	.word	0x7fc00000

08009430 <quorem>:
 8009430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	6903      	ldr	r3, [r0, #16]
 8009436:	690c      	ldr	r4, [r1, #16]
 8009438:	42a3      	cmp	r3, r4
 800943a:	4607      	mov	r7, r0
 800943c:	db7e      	blt.n	800953c <quorem+0x10c>
 800943e:	3c01      	subs	r4, #1
 8009440:	f101 0814 	add.w	r8, r1, #20
 8009444:	00a3      	lsls	r3, r4, #2
 8009446:	f100 0514 	add.w	r5, r0, #20
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800945a:	3301      	adds	r3, #1
 800945c:	429a      	cmp	r2, r3
 800945e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009462:	fbb2 f6f3 	udiv	r6, r2, r3
 8009466:	d32e      	bcc.n	80094c6 <quorem+0x96>
 8009468:	f04f 0a00 	mov.w	sl, #0
 800946c:	46c4      	mov	ip, r8
 800946e:	46ae      	mov	lr, r5
 8009470:	46d3      	mov	fp, sl
 8009472:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009476:	b298      	uxth	r0, r3
 8009478:	fb06 a000 	mla	r0, r6, r0, sl
 800947c:	0c02      	lsrs	r2, r0, #16
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	fb06 2303 	mla	r3, r6, r3, r2
 8009484:	f8de 2000 	ldr.w	r2, [lr]
 8009488:	b280      	uxth	r0, r0
 800948a:	b292      	uxth	r2, r2
 800948c:	1a12      	subs	r2, r2, r0
 800948e:	445a      	add	r2, fp
 8009490:	f8de 0000 	ldr.w	r0, [lr]
 8009494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009498:	b29b      	uxth	r3, r3
 800949a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800949e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80094a2:	b292      	uxth	r2, r2
 80094a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094a8:	45e1      	cmp	r9, ip
 80094aa:	f84e 2b04 	str.w	r2, [lr], #4
 80094ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094b2:	d2de      	bcs.n	8009472 <quorem+0x42>
 80094b4:	9b00      	ldr	r3, [sp, #0]
 80094b6:	58eb      	ldr	r3, [r5, r3]
 80094b8:	b92b      	cbnz	r3, 80094c6 <quorem+0x96>
 80094ba:	9b01      	ldr	r3, [sp, #4]
 80094bc:	3b04      	subs	r3, #4
 80094be:	429d      	cmp	r5, r3
 80094c0:	461a      	mov	r2, r3
 80094c2:	d32f      	bcc.n	8009524 <quorem+0xf4>
 80094c4:	613c      	str	r4, [r7, #16]
 80094c6:	4638      	mov	r0, r7
 80094c8:	f001 f9c2 	bl	800a850 <__mcmp>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	db25      	blt.n	800951c <quorem+0xec>
 80094d0:	4629      	mov	r1, r5
 80094d2:	2000      	movs	r0, #0
 80094d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80094d8:	f8d1 c000 	ldr.w	ip, [r1]
 80094dc:	fa1f fe82 	uxth.w	lr, r2
 80094e0:	fa1f f38c 	uxth.w	r3, ip
 80094e4:	eba3 030e 	sub.w	r3, r3, lr
 80094e8:	4403      	add	r3, r0
 80094ea:	0c12      	lsrs	r2, r2, #16
 80094ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094fa:	45c1      	cmp	r9, r8
 80094fc:	f841 3b04 	str.w	r3, [r1], #4
 8009500:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009504:	d2e6      	bcs.n	80094d4 <quorem+0xa4>
 8009506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800950a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800950e:	b922      	cbnz	r2, 800951a <quorem+0xea>
 8009510:	3b04      	subs	r3, #4
 8009512:	429d      	cmp	r5, r3
 8009514:	461a      	mov	r2, r3
 8009516:	d30b      	bcc.n	8009530 <quorem+0x100>
 8009518:	613c      	str	r4, [r7, #16]
 800951a:	3601      	adds	r6, #1
 800951c:	4630      	mov	r0, r6
 800951e:	b003      	add	sp, #12
 8009520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	3b04      	subs	r3, #4
 8009528:	2a00      	cmp	r2, #0
 800952a:	d1cb      	bne.n	80094c4 <quorem+0x94>
 800952c:	3c01      	subs	r4, #1
 800952e:	e7c6      	b.n	80094be <quorem+0x8e>
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	3b04      	subs	r3, #4
 8009534:	2a00      	cmp	r2, #0
 8009536:	d1ef      	bne.n	8009518 <quorem+0xe8>
 8009538:	3c01      	subs	r4, #1
 800953a:	e7ea      	b.n	8009512 <quorem+0xe2>
 800953c:	2000      	movs	r0, #0
 800953e:	e7ee      	b.n	800951e <quorem+0xee>

08009540 <_dtoa_r>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	69c7      	ldr	r7, [r0, #28]
 8009546:	b099      	sub	sp, #100	@ 0x64
 8009548:	ed8d 0b02 	vstr	d0, [sp, #8]
 800954c:	ec55 4b10 	vmov	r4, r5, d0
 8009550:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009552:	9109      	str	r1, [sp, #36]	@ 0x24
 8009554:	4683      	mov	fp, r0
 8009556:	920e      	str	r2, [sp, #56]	@ 0x38
 8009558:	9313      	str	r3, [sp, #76]	@ 0x4c
 800955a:	b97f      	cbnz	r7, 800957c <_dtoa_r+0x3c>
 800955c:	2010      	movs	r0, #16
 800955e:	f000 fdfd 	bl	800a15c <malloc>
 8009562:	4602      	mov	r2, r0
 8009564:	f8cb 001c 	str.w	r0, [fp, #28]
 8009568:	b920      	cbnz	r0, 8009574 <_dtoa_r+0x34>
 800956a:	4ba7      	ldr	r3, [pc, #668]	@ (8009808 <_dtoa_r+0x2c8>)
 800956c:	21ef      	movs	r1, #239	@ 0xef
 800956e:	48a7      	ldr	r0, [pc, #668]	@ (800980c <_dtoa_r+0x2cc>)
 8009570:	f002 fdee 	bl	800c150 <__assert_func>
 8009574:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009578:	6007      	str	r7, [r0, #0]
 800957a:	60c7      	str	r7, [r0, #12]
 800957c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009580:	6819      	ldr	r1, [r3, #0]
 8009582:	b159      	cbz	r1, 800959c <_dtoa_r+0x5c>
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	604a      	str	r2, [r1, #4]
 8009588:	2301      	movs	r3, #1
 800958a:	4093      	lsls	r3, r2
 800958c:	608b      	str	r3, [r1, #8]
 800958e:	4658      	mov	r0, fp
 8009590:	f000 feda 	bl	800a348 <_Bfree>
 8009594:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	1e2b      	subs	r3, r5, #0
 800959e:	bfb9      	ittee	lt
 80095a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80095a4:	9303      	strlt	r3, [sp, #12]
 80095a6:	2300      	movge	r3, #0
 80095a8:	6033      	strge	r3, [r6, #0]
 80095aa:	9f03      	ldr	r7, [sp, #12]
 80095ac:	4b98      	ldr	r3, [pc, #608]	@ (8009810 <_dtoa_r+0x2d0>)
 80095ae:	bfbc      	itt	lt
 80095b0:	2201      	movlt	r2, #1
 80095b2:	6032      	strlt	r2, [r6, #0]
 80095b4:	43bb      	bics	r3, r7
 80095b6:	d112      	bne.n	80095de <_dtoa_r+0x9e>
 80095b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095c4:	4323      	orrs	r3, r4
 80095c6:	f000 854d 	beq.w	800a064 <_dtoa_r+0xb24>
 80095ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009824 <_dtoa_r+0x2e4>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 854f 	beq.w	800a074 <_dtoa_r+0xb34>
 80095d6:	f10a 0303 	add.w	r3, sl, #3
 80095da:	f000 bd49 	b.w	800a070 <_dtoa_r+0xb30>
 80095de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	ec51 0b17 	vmov	r0, r1, d7
 80095e8:	2300      	movs	r3, #0
 80095ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80095ee:	f7f7 fa8b 	bl	8000b08 <__aeabi_dcmpeq>
 80095f2:	4680      	mov	r8, r0
 80095f4:	b158      	cbz	r0, 800960e <_dtoa_r+0xce>
 80095f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80095f8:	2301      	movs	r3, #1
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095fe:	b113      	cbz	r3, 8009606 <_dtoa_r+0xc6>
 8009600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009602:	4b84      	ldr	r3, [pc, #528]	@ (8009814 <_dtoa_r+0x2d4>)
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009828 <_dtoa_r+0x2e8>
 800960a:	f000 bd33 	b.w	800a074 <_dtoa_r+0xb34>
 800960e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009612:	aa16      	add	r2, sp, #88	@ 0x58
 8009614:	a917      	add	r1, sp, #92	@ 0x5c
 8009616:	4658      	mov	r0, fp
 8009618:	f001 fa3a 	bl	800aa90 <__d2b>
 800961c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009620:	4681      	mov	r9, r0
 8009622:	2e00      	cmp	r6, #0
 8009624:	d077      	beq.n	8009716 <_dtoa_r+0x1d6>
 8009626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009628:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800962c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009634:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009638:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800963c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009640:	4619      	mov	r1, r3
 8009642:	2200      	movs	r2, #0
 8009644:	4b74      	ldr	r3, [pc, #464]	@ (8009818 <_dtoa_r+0x2d8>)
 8009646:	f7f6 fe3f 	bl	80002c8 <__aeabi_dsub>
 800964a:	a369      	add	r3, pc, #420	@ (adr r3, 80097f0 <_dtoa_r+0x2b0>)
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f7f6 fff2 	bl	8000638 <__aeabi_dmul>
 8009654:	a368      	add	r3, pc, #416	@ (adr r3, 80097f8 <_dtoa_r+0x2b8>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 fe37 	bl	80002cc <__adddf3>
 800965e:	4604      	mov	r4, r0
 8009660:	4630      	mov	r0, r6
 8009662:	460d      	mov	r5, r1
 8009664:	f7f6 ff7e 	bl	8000564 <__aeabi_i2d>
 8009668:	a365      	add	r3, pc, #404	@ (adr r3, 8009800 <_dtoa_r+0x2c0>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7f6 ffe3 	bl	8000638 <__aeabi_dmul>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4620      	mov	r0, r4
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 fe27 	bl	80002cc <__adddf3>
 800967e:	4604      	mov	r4, r0
 8009680:	460d      	mov	r5, r1
 8009682:	f7f7 fa89 	bl	8000b98 <__aeabi_d2iz>
 8009686:	2200      	movs	r2, #0
 8009688:	4607      	mov	r7, r0
 800968a:	2300      	movs	r3, #0
 800968c:	4620      	mov	r0, r4
 800968e:	4629      	mov	r1, r5
 8009690:	f7f7 fa44 	bl	8000b1c <__aeabi_dcmplt>
 8009694:	b140      	cbz	r0, 80096a8 <_dtoa_r+0x168>
 8009696:	4638      	mov	r0, r7
 8009698:	f7f6 ff64 	bl	8000564 <__aeabi_i2d>
 800969c:	4622      	mov	r2, r4
 800969e:	462b      	mov	r3, r5
 80096a0:	f7f7 fa32 	bl	8000b08 <__aeabi_dcmpeq>
 80096a4:	b900      	cbnz	r0, 80096a8 <_dtoa_r+0x168>
 80096a6:	3f01      	subs	r7, #1
 80096a8:	2f16      	cmp	r7, #22
 80096aa:	d851      	bhi.n	8009750 <_dtoa_r+0x210>
 80096ac:	4b5b      	ldr	r3, [pc, #364]	@ (800981c <_dtoa_r+0x2dc>)
 80096ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ba:	f7f7 fa2f 	bl	8000b1c <__aeabi_dcmplt>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d048      	beq.n	8009754 <_dtoa_r+0x214>
 80096c2:	3f01      	subs	r7, #1
 80096c4:	2300      	movs	r3, #0
 80096c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80096c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096ca:	1b9b      	subs	r3, r3, r6
 80096cc:	1e5a      	subs	r2, r3, #1
 80096ce:	bf44      	itt	mi
 80096d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80096d4:	2300      	movmi	r3, #0
 80096d6:	9208      	str	r2, [sp, #32]
 80096d8:	bf54      	ite	pl
 80096da:	f04f 0800 	movpl.w	r8, #0
 80096de:	9308      	strmi	r3, [sp, #32]
 80096e0:	2f00      	cmp	r7, #0
 80096e2:	db39      	blt.n	8009758 <_dtoa_r+0x218>
 80096e4:	9b08      	ldr	r3, [sp, #32]
 80096e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80096e8:	443b      	add	r3, r7
 80096ea:	9308      	str	r3, [sp, #32]
 80096ec:	2300      	movs	r3, #0
 80096ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	d864      	bhi.n	80097c0 <_dtoa_r+0x280>
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	bfc4      	itt	gt
 80096fa:	3b04      	subgt	r3, #4
 80096fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80096fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009700:	f1a3 0302 	sub.w	r3, r3, #2
 8009704:	bfcc      	ite	gt
 8009706:	2400      	movgt	r4, #0
 8009708:	2401      	movle	r4, #1
 800970a:	2b03      	cmp	r3, #3
 800970c:	d863      	bhi.n	80097d6 <_dtoa_r+0x296>
 800970e:	e8df f003 	tbb	[pc, r3]
 8009712:	372a      	.short	0x372a
 8009714:	5535      	.short	0x5535
 8009716:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800971a:	441e      	add	r6, r3
 800971c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009720:	2b20      	cmp	r3, #32
 8009722:	bfc1      	itttt	gt
 8009724:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009728:	409f      	lslgt	r7, r3
 800972a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800972e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009732:	bfd6      	itet	le
 8009734:	f1c3 0320 	rsble	r3, r3, #32
 8009738:	ea47 0003 	orrgt.w	r0, r7, r3
 800973c:	fa04 f003 	lslle.w	r0, r4, r3
 8009740:	f7f6 ff00 	bl	8000544 <__aeabi_ui2d>
 8009744:	2201      	movs	r2, #1
 8009746:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800974a:	3e01      	subs	r6, #1
 800974c:	9214      	str	r2, [sp, #80]	@ 0x50
 800974e:	e777      	b.n	8009640 <_dtoa_r+0x100>
 8009750:	2301      	movs	r3, #1
 8009752:	e7b8      	b.n	80096c6 <_dtoa_r+0x186>
 8009754:	9012      	str	r0, [sp, #72]	@ 0x48
 8009756:	e7b7      	b.n	80096c8 <_dtoa_r+0x188>
 8009758:	427b      	negs	r3, r7
 800975a:	930a      	str	r3, [sp, #40]	@ 0x28
 800975c:	2300      	movs	r3, #0
 800975e:	eba8 0807 	sub.w	r8, r8, r7
 8009762:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009764:	e7c4      	b.n	80096f0 <_dtoa_r+0x1b0>
 8009766:	2300      	movs	r3, #0
 8009768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800976a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	dc35      	bgt.n	80097dc <_dtoa_r+0x29c>
 8009770:	2301      	movs	r3, #1
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	9307      	str	r3, [sp, #28]
 8009776:	461a      	mov	r2, r3
 8009778:	920e      	str	r2, [sp, #56]	@ 0x38
 800977a:	e00b      	b.n	8009794 <_dtoa_r+0x254>
 800977c:	2301      	movs	r3, #1
 800977e:	e7f3      	b.n	8009768 <_dtoa_r+0x228>
 8009780:	2300      	movs	r3, #0
 8009782:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	2b01      	cmp	r3, #1
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	bfb8      	it	lt
 8009792:	2301      	movlt	r3, #1
 8009794:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009798:	2100      	movs	r1, #0
 800979a:	2204      	movs	r2, #4
 800979c:	f102 0514 	add.w	r5, r2, #20
 80097a0:	429d      	cmp	r5, r3
 80097a2:	d91f      	bls.n	80097e4 <_dtoa_r+0x2a4>
 80097a4:	6041      	str	r1, [r0, #4]
 80097a6:	4658      	mov	r0, fp
 80097a8:	f000 fd8e 	bl	800a2c8 <_Balloc>
 80097ac:	4682      	mov	sl, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d13c      	bne.n	800982c <_dtoa_r+0x2ec>
 80097b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009820 <_dtoa_r+0x2e0>)
 80097b4:	4602      	mov	r2, r0
 80097b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80097ba:	e6d8      	b.n	800956e <_dtoa_r+0x2e>
 80097bc:	2301      	movs	r3, #1
 80097be:	e7e0      	b.n	8009782 <_dtoa_r+0x242>
 80097c0:	2401      	movs	r4, #1
 80097c2:	2300      	movs	r3, #0
 80097c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097c8:	f04f 33ff 	mov.w	r3, #4294967295
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	9307      	str	r3, [sp, #28]
 80097d0:	2200      	movs	r2, #0
 80097d2:	2312      	movs	r3, #18
 80097d4:	e7d0      	b.n	8009778 <_dtoa_r+0x238>
 80097d6:	2301      	movs	r3, #1
 80097d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097da:	e7f5      	b.n	80097c8 <_dtoa_r+0x288>
 80097dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	9307      	str	r3, [sp, #28]
 80097e2:	e7d7      	b.n	8009794 <_dtoa_r+0x254>
 80097e4:	3101      	adds	r1, #1
 80097e6:	0052      	lsls	r2, r2, #1
 80097e8:	e7d8      	b.n	800979c <_dtoa_r+0x25c>
 80097ea:	bf00      	nop
 80097ec:	f3af 8000 	nop.w
 80097f0:	636f4361 	.word	0x636f4361
 80097f4:	3fd287a7 	.word	0x3fd287a7
 80097f8:	8b60c8b3 	.word	0x8b60c8b3
 80097fc:	3fc68a28 	.word	0x3fc68a28
 8009800:	509f79fb 	.word	0x509f79fb
 8009804:	3fd34413 	.word	0x3fd34413
 8009808:	0800d136 	.word	0x0800d136
 800980c:	0800d14d 	.word	0x0800d14d
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800d101 	.word	0x0800d101
 8009818:	3ff80000 	.word	0x3ff80000
 800981c:	0800d248 	.word	0x0800d248
 8009820:	0800d1a5 	.word	0x0800d1a5
 8009824:	0800d132 	.word	0x0800d132
 8009828:	0800d100 	.word	0x0800d100
 800982c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009830:	6018      	str	r0, [r3, #0]
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	2b0e      	cmp	r3, #14
 8009836:	f200 80a4 	bhi.w	8009982 <_dtoa_r+0x442>
 800983a:	2c00      	cmp	r4, #0
 800983c:	f000 80a1 	beq.w	8009982 <_dtoa_r+0x442>
 8009840:	2f00      	cmp	r7, #0
 8009842:	dd33      	ble.n	80098ac <_dtoa_r+0x36c>
 8009844:	4bad      	ldr	r3, [pc, #692]	@ (8009afc <_dtoa_r+0x5bc>)
 8009846:	f007 020f 	and.w	r2, r7, #15
 800984a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800984e:	ed93 7b00 	vldr	d7, [r3]
 8009852:	05f8      	lsls	r0, r7, #23
 8009854:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800985c:	d516      	bpl.n	800988c <_dtoa_r+0x34c>
 800985e:	4ba8      	ldr	r3, [pc, #672]	@ (8009b00 <_dtoa_r+0x5c0>)
 8009860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009868:	f7f7 f810 	bl	800088c <__aeabi_ddiv>
 800986c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009870:	f004 040f 	and.w	r4, r4, #15
 8009874:	2603      	movs	r6, #3
 8009876:	4da2      	ldr	r5, [pc, #648]	@ (8009b00 <_dtoa_r+0x5c0>)
 8009878:	b954      	cbnz	r4, 8009890 <_dtoa_r+0x350>
 800987a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800987e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009882:	f7f7 f803 	bl	800088c <__aeabi_ddiv>
 8009886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800988a:	e028      	b.n	80098de <_dtoa_r+0x39e>
 800988c:	2602      	movs	r6, #2
 800988e:	e7f2      	b.n	8009876 <_dtoa_r+0x336>
 8009890:	07e1      	lsls	r1, r4, #31
 8009892:	d508      	bpl.n	80098a6 <_dtoa_r+0x366>
 8009894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800989c:	f7f6 fecc 	bl	8000638 <__aeabi_dmul>
 80098a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a4:	3601      	adds	r6, #1
 80098a6:	1064      	asrs	r4, r4, #1
 80098a8:	3508      	adds	r5, #8
 80098aa:	e7e5      	b.n	8009878 <_dtoa_r+0x338>
 80098ac:	f000 80d2 	beq.w	8009a54 <_dtoa_r+0x514>
 80098b0:	427c      	negs	r4, r7
 80098b2:	4b92      	ldr	r3, [pc, #584]	@ (8009afc <_dtoa_r+0x5bc>)
 80098b4:	4d92      	ldr	r5, [pc, #584]	@ (8009b00 <_dtoa_r+0x5c0>)
 80098b6:	f004 020f 	and.w	r2, r4, #15
 80098ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098c6:	f7f6 feb7 	bl	8000638 <__aeabi_dmul>
 80098ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ce:	1124      	asrs	r4, r4, #4
 80098d0:	2300      	movs	r3, #0
 80098d2:	2602      	movs	r6, #2
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	f040 80b2 	bne.w	8009a3e <_dtoa_r+0x4fe>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1d3      	bne.n	8009886 <_dtoa_r+0x346>
 80098de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 80b7 	beq.w	8009a58 <_dtoa_r+0x518>
 80098ea:	4b86      	ldr	r3, [pc, #536]	@ (8009b04 <_dtoa_r+0x5c4>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4620      	mov	r0, r4
 80098f0:	4629      	mov	r1, r5
 80098f2:	f7f7 f913 	bl	8000b1c <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f000 80ae 	beq.w	8009a58 <_dtoa_r+0x518>
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80aa 	beq.w	8009a58 <_dtoa_r+0x518>
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	dd37      	ble.n	800997a <_dtoa_r+0x43a>
 800990a:	1e7b      	subs	r3, r7, #1
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	4620      	mov	r0, r4
 8009910:	4b7d      	ldr	r3, [pc, #500]	@ (8009b08 <_dtoa_r+0x5c8>)
 8009912:	2200      	movs	r2, #0
 8009914:	4629      	mov	r1, r5
 8009916:	f7f6 fe8f 	bl	8000638 <__aeabi_dmul>
 800991a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800991e:	9c00      	ldr	r4, [sp, #0]
 8009920:	3601      	adds	r6, #1
 8009922:	4630      	mov	r0, r6
 8009924:	f7f6 fe1e 	bl	8000564 <__aeabi_i2d>
 8009928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800992c:	f7f6 fe84 	bl	8000638 <__aeabi_dmul>
 8009930:	4b76      	ldr	r3, [pc, #472]	@ (8009b0c <_dtoa_r+0x5cc>)
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fcca 	bl	80002cc <__adddf3>
 8009938:	4605      	mov	r5, r0
 800993a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800993e:	2c00      	cmp	r4, #0
 8009940:	f040 808d 	bne.w	8009a5e <_dtoa_r+0x51e>
 8009944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009948:	4b71      	ldr	r3, [pc, #452]	@ (8009b10 <_dtoa_r+0x5d0>)
 800994a:	2200      	movs	r2, #0
 800994c:	f7f6 fcbc 	bl	80002c8 <__aeabi_dsub>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009958:	462a      	mov	r2, r5
 800995a:	4633      	mov	r3, r6
 800995c:	f7f7 f8fc 	bl	8000b58 <__aeabi_dcmpgt>
 8009960:	2800      	cmp	r0, #0
 8009962:	f040 828b 	bne.w	8009e7c <_dtoa_r+0x93c>
 8009966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800996a:	462a      	mov	r2, r5
 800996c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009970:	f7f7 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8009974:	2800      	cmp	r0, #0
 8009976:	f040 8128 	bne.w	8009bca <_dtoa_r+0x68a>
 800997a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800997e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009984:	2b00      	cmp	r3, #0
 8009986:	f2c0 815a 	blt.w	8009c3e <_dtoa_r+0x6fe>
 800998a:	2f0e      	cmp	r7, #14
 800998c:	f300 8157 	bgt.w	8009c3e <_dtoa_r+0x6fe>
 8009990:	4b5a      	ldr	r3, [pc, #360]	@ (8009afc <_dtoa_r+0x5bc>)
 8009992:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009996:	ed93 7b00 	vldr	d7, [r3]
 800999a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800999c:	2b00      	cmp	r3, #0
 800999e:	ed8d 7b00 	vstr	d7, [sp]
 80099a2:	da03      	bge.n	80099ac <_dtoa_r+0x46c>
 80099a4:	9b07      	ldr	r3, [sp, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f340 8101 	ble.w	8009bae <_dtoa_r+0x66e>
 80099ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099b0:	4656      	mov	r6, sl
 80099b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f6 ff67 	bl	800088c <__aeabi_ddiv>
 80099be:	f7f7 f8eb 	bl	8000b98 <__aeabi_d2iz>
 80099c2:	4680      	mov	r8, r0
 80099c4:	f7f6 fdce 	bl	8000564 <__aeabi_i2d>
 80099c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099cc:	f7f6 fe34 	bl	8000638 <__aeabi_dmul>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099dc:	f7f6 fc74 	bl	80002c8 <__aeabi_dsub>
 80099e0:	f806 4b01 	strb.w	r4, [r6], #1
 80099e4:	9d07      	ldr	r5, [sp, #28]
 80099e6:	eba6 040a 	sub.w	r4, r6, sl
 80099ea:	42a5      	cmp	r5, r4
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	f040 8117 	bne.w	8009c22 <_dtoa_r+0x6e2>
 80099f4:	f7f6 fc6a 	bl	80002cc <__adddf3>
 80099f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099fc:	4604      	mov	r4, r0
 80099fe:	460d      	mov	r5, r1
 8009a00:	f7f7 f8aa 	bl	8000b58 <__aeabi_dcmpgt>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f040 80f9 	bne.w	8009bfc <_dtoa_r+0x6bc>
 8009a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f7 f879 	bl	8000b08 <__aeabi_dcmpeq>
 8009a16:	b118      	cbz	r0, 8009a20 <_dtoa_r+0x4e0>
 8009a18:	f018 0f01 	tst.w	r8, #1
 8009a1c:	f040 80ee 	bne.w	8009bfc <_dtoa_r+0x6bc>
 8009a20:	4649      	mov	r1, r9
 8009a22:	4658      	mov	r0, fp
 8009a24:	f000 fc90 	bl	800a348 <_Bfree>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	7033      	strb	r3, [r6, #0]
 8009a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a2e:	3701      	adds	r7, #1
 8009a30:	601f      	str	r7, [r3, #0]
 8009a32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 831d 	beq.w	800a074 <_dtoa_r+0xb34>
 8009a3a:	601e      	str	r6, [r3, #0]
 8009a3c:	e31a      	b.n	800a074 <_dtoa_r+0xb34>
 8009a3e:	07e2      	lsls	r2, r4, #31
 8009a40:	d505      	bpl.n	8009a4e <_dtoa_r+0x50e>
 8009a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a46:	f7f6 fdf7 	bl	8000638 <__aeabi_dmul>
 8009a4a:	3601      	adds	r6, #1
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	1064      	asrs	r4, r4, #1
 8009a50:	3508      	adds	r5, #8
 8009a52:	e73f      	b.n	80098d4 <_dtoa_r+0x394>
 8009a54:	2602      	movs	r6, #2
 8009a56:	e742      	b.n	80098de <_dtoa_r+0x39e>
 8009a58:	9c07      	ldr	r4, [sp, #28]
 8009a5a:	9704      	str	r7, [sp, #16]
 8009a5c:	e761      	b.n	8009922 <_dtoa_r+0x3e2>
 8009a5e:	4b27      	ldr	r3, [pc, #156]	@ (8009afc <_dtoa_r+0x5bc>)
 8009a60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a6a:	4454      	add	r4, sl
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d053      	beq.n	8009b18 <_dtoa_r+0x5d8>
 8009a70:	4928      	ldr	r1, [pc, #160]	@ (8009b14 <_dtoa_r+0x5d4>)
 8009a72:	2000      	movs	r0, #0
 8009a74:	f7f6 ff0a 	bl	800088c <__aeabi_ddiv>
 8009a78:	4633      	mov	r3, r6
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	f7f6 fc24 	bl	80002c8 <__aeabi_dsub>
 8009a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a84:	4656      	mov	r6, sl
 8009a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8a:	f7f7 f885 	bl	8000b98 <__aeabi_d2iz>
 8009a8e:	4605      	mov	r5, r0
 8009a90:	f7f6 fd68 	bl	8000564 <__aeabi_i2d>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a9c:	f7f6 fc14 	bl	80002c8 <__aeabi_dsub>
 8009aa0:	3530      	adds	r5, #48	@ 0x30
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aaa:	f806 5b01 	strb.w	r5, [r6], #1
 8009aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ab2:	f7f7 f833 	bl	8000b1c <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d171      	bne.n	8009b9e <_dtoa_r+0x65e>
 8009aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009abe:	4911      	ldr	r1, [pc, #68]	@ (8009b04 <_dtoa_r+0x5c4>)
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f7f6 fc01 	bl	80002c8 <__aeabi_dsub>
 8009ac6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009aca:	f7f7 f827 	bl	8000b1c <__aeabi_dcmplt>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f040 8095 	bne.w	8009bfe <_dtoa_r+0x6be>
 8009ad4:	42a6      	cmp	r6, r4
 8009ad6:	f43f af50 	beq.w	800997a <_dtoa_r+0x43a>
 8009ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ade:	4b0a      	ldr	r3, [pc, #40]	@ (8009b08 <_dtoa_r+0x5c8>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f7f6 fda9 	bl	8000638 <__aeabi_dmul>
 8009ae6:	4b08      	ldr	r3, [pc, #32]	@ (8009b08 <_dtoa_r+0x5c8>)
 8009ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009aec:	2200      	movs	r2, #0
 8009aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af2:	f7f6 fda1 	bl	8000638 <__aeabi_dmul>
 8009af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009afa:	e7c4      	b.n	8009a86 <_dtoa_r+0x546>
 8009afc:	0800d248 	.word	0x0800d248
 8009b00:	0800d220 	.word	0x0800d220
 8009b04:	3ff00000 	.word	0x3ff00000
 8009b08:	40240000 	.word	0x40240000
 8009b0c:	401c0000 	.word	0x401c0000
 8009b10:	40140000 	.word	0x40140000
 8009b14:	3fe00000 	.word	0x3fe00000
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7f6 fd8c 	bl	8000638 <__aeabi_dmul>
 8009b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b24:	9415      	str	r4, [sp, #84]	@ 0x54
 8009b26:	4656      	mov	r6, sl
 8009b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b2c:	f7f7 f834 	bl	8000b98 <__aeabi_d2iz>
 8009b30:	4605      	mov	r5, r0
 8009b32:	f7f6 fd17 	bl	8000564 <__aeabi_i2d>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b3e:	f7f6 fbc3 	bl	80002c8 <__aeabi_dsub>
 8009b42:	3530      	adds	r5, #48	@ 0x30
 8009b44:	f806 5b01 	strb.w	r5, [r6], #1
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	42a6      	cmp	r6, r4
 8009b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	d124      	bne.n	8009ba2 <_dtoa_r+0x662>
 8009b58:	4bac      	ldr	r3, [pc, #688]	@ (8009e0c <_dtoa_r+0x8cc>)
 8009b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b5e:	f7f6 fbb5 	bl	80002cc <__adddf3>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6a:	f7f6 fff5 	bl	8000b58 <__aeabi_dcmpgt>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d145      	bne.n	8009bfe <_dtoa_r+0x6be>
 8009b72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b76:	49a5      	ldr	r1, [pc, #660]	@ (8009e0c <_dtoa_r+0x8cc>)
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f7f6 fba5 	bl	80002c8 <__aeabi_dsub>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b86:	f7f6 ffc9 	bl	8000b1c <__aeabi_dcmplt>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f43f aef5 	beq.w	800997a <_dtoa_r+0x43a>
 8009b90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b92:	1e73      	subs	r3, r6, #1
 8009b94:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b9a:	2b30      	cmp	r3, #48	@ 0x30
 8009b9c:	d0f8      	beq.n	8009b90 <_dtoa_r+0x650>
 8009b9e:	9f04      	ldr	r7, [sp, #16]
 8009ba0:	e73e      	b.n	8009a20 <_dtoa_r+0x4e0>
 8009ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8009e10 <_dtoa_r+0x8d0>)
 8009ba4:	f7f6 fd48 	bl	8000638 <__aeabi_dmul>
 8009ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bac:	e7bc      	b.n	8009b28 <_dtoa_r+0x5e8>
 8009bae:	d10c      	bne.n	8009bca <_dtoa_r+0x68a>
 8009bb0:	4b98      	ldr	r3, [pc, #608]	@ (8009e14 <_dtoa_r+0x8d4>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bb8:	f7f6 fd3e 	bl	8000638 <__aeabi_dmul>
 8009bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bc0:	f7f6 ffc0 	bl	8000b44 <__aeabi_dcmpge>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f000 8157 	beq.w	8009e78 <_dtoa_r+0x938>
 8009bca:	2400      	movs	r4, #0
 8009bcc:	4625      	mov	r5, r4
 8009bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	4656      	mov	r6, sl
 8009bd6:	2700      	movs	r7, #0
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f000 fbb4 	bl	800a348 <_Bfree>
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	d0dc      	beq.n	8009b9e <_dtoa_r+0x65e>
 8009be4:	b12f      	cbz	r7, 8009bf2 <_dtoa_r+0x6b2>
 8009be6:	42af      	cmp	r7, r5
 8009be8:	d003      	beq.n	8009bf2 <_dtoa_r+0x6b2>
 8009bea:	4639      	mov	r1, r7
 8009bec:	4658      	mov	r0, fp
 8009bee:	f000 fbab 	bl	800a348 <_Bfree>
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4658      	mov	r0, fp
 8009bf6:	f000 fba7 	bl	800a348 <_Bfree>
 8009bfa:	e7d0      	b.n	8009b9e <_dtoa_r+0x65e>
 8009bfc:	9704      	str	r7, [sp, #16]
 8009bfe:	4633      	mov	r3, r6
 8009c00:	461e      	mov	r6, r3
 8009c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c06:	2a39      	cmp	r2, #57	@ 0x39
 8009c08:	d107      	bne.n	8009c1a <_dtoa_r+0x6da>
 8009c0a:	459a      	cmp	sl, r3
 8009c0c:	d1f8      	bne.n	8009c00 <_dtoa_r+0x6c0>
 8009c0e:	9a04      	ldr	r2, [sp, #16]
 8009c10:	3201      	adds	r2, #1
 8009c12:	9204      	str	r2, [sp, #16]
 8009c14:	2230      	movs	r2, #48	@ 0x30
 8009c16:	f88a 2000 	strb.w	r2, [sl]
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	3201      	adds	r2, #1
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	e7bd      	b.n	8009b9e <_dtoa_r+0x65e>
 8009c22:	4b7b      	ldr	r3, [pc, #492]	@ (8009e10 <_dtoa_r+0x8d0>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	460d      	mov	r5, r1
 8009c32:	f7f6 ff69 	bl	8000b08 <__aeabi_dcmpeq>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f aebb 	beq.w	80099b2 <_dtoa_r+0x472>
 8009c3c:	e6f0      	b.n	8009a20 <_dtoa_r+0x4e0>
 8009c3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	f000 80db 	beq.w	8009dfc <_dtoa_r+0x8bc>
 8009c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c48:	2a01      	cmp	r2, #1
 8009c4a:	f300 80bf 	bgt.w	8009dcc <_dtoa_r+0x88c>
 8009c4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	f000 80b7 	beq.w	8009dc4 <_dtoa_r+0x884>
 8009c56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c5c:	4646      	mov	r6, r8
 8009c5e:	9a08      	ldr	r2, [sp, #32]
 8009c60:	2101      	movs	r1, #1
 8009c62:	441a      	add	r2, r3
 8009c64:	4658      	mov	r0, fp
 8009c66:	4498      	add	r8, r3
 8009c68:	9208      	str	r2, [sp, #32]
 8009c6a:	f000 fc6b 	bl	800a544 <__i2b>
 8009c6e:	4605      	mov	r5, r0
 8009c70:	b15e      	cbz	r6, 8009c8a <_dtoa_r+0x74a>
 8009c72:	9b08      	ldr	r3, [sp, #32]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dd08      	ble.n	8009c8a <_dtoa_r+0x74a>
 8009c78:	42b3      	cmp	r3, r6
 8009c7a:	9a08      	ldr	r2, [sp, #32]
 8009c7c:	bfa8      	it	ge
 8009c7e:	4633      	movge	r3, r6
 8009c80:	eba8 0803 	sub.w	r8, r8, r3
 8009c84:	1af6      	subs	r6, r6, r3
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	9308      	str	r3, [sp, #32]
 8009c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c8c:	b1f3      	cbz	r3, 8009ccc <_dtoa_r+0x78c>
 8009c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80b7 	beq.w	8009e04 <_dtoa_r+0x8c4>
 8009c96:	b18c      	cbz	r4, 8009cbc <_dtoa_r+0x77c>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4658      	mov	r0, fp
 8009c9e:	f000 fd11 	bl	800a6c4 <__pow5mult>
 8009ca2:	464a      	mov	r2, r9
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	4658      	mov	r0, fp
 8009caa:	f000 fc61 	bl	800a570 <__multiply>
 8009cae:	4649      	mov	r1, r9
 8009cb0:	9004      	str	r0, [sp, #16]
 8009cb2:	4658      	mov	r0, fp
 8009cb4:	f000 fb48 	bl	800a348 <_Bfree>
 8009cb8:	9b04      	ldr	r3, [sp, #16]
 8009cba:	4699      	mov	r9, r3
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cbe:	1b1a      	subs	r2, r3, r4
 8009cc0:	d004      	beq.n	8009ccc <_dtoa_r+0x78c>
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	4658      	mov	r0, fp
 8009cc6:	f000 fcfd 	bl	800a6c4 <__pow5mult>
 8009cca:	4681      	mov	r9, r0
 8009ccc:	2101      	movs	r1, #1
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 fc38 	bl	800a544 <__i2b>
 8009cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 81cf 	beq.w	800a07c <_dtoa_r+0xb3c>
 8009cde:	461a      	mov	r2, r3
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f000 fcee 	bl	800a6c4 <__pow5mult>
 8009ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	4604      	mov	r4, r0
 8009cee:	f300 8095 	bgt.w	8009e1c <_dtoa_r+0x8dc>
 8009cf2:	9b02      	ldr	r3, [sp, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 8087 	bne.w	8009e08 <_dtoa_r+0x8c8>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 8089 	bne.w	8009e18 <_dtoa_r+0x8d8>
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d0c:	0d1b      	lsrs	r3, r3, #20
 8009d0e:	051b      	lsls	r3, r3, #20
 8009d10:	b12b      	cbz	r3, 8009d1e <_dtoa_r+0x7de>
 8009d12:	9b08      	ldr	r3, [sp, #32]
 8009d14:	3301      	adds	r3, #1
 8009d16:	9308      	str	r3, [sp, #32]
 8009d18:	f108 0801 	add.w	r8, r8, #1
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 81b0 	beq.w	800a088 <_dtoa_r+0xb48>
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d2e:	6918      	ldr	r0, [r3, #16]
 8009d30:	f000 fbbc 	bl	800a4ac <__hi0bits>
 8009d34:	f1c0 0020 	rsb	r0, r0, #32
 8009d38:	9b08      	ldr	r3, [sp, #32]
 8009d3a:	4418      	add	r0, r3
 8009d3c:	f010 001f 	ands.w	r0, r0, #31
 8009d40:	d077      	beq.n	8009e32 <_dtoa_r+0x8f2>
 8009d42:	f1c0 0320 	rsb	r3, r0, #32
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	dd6b      	ble.n	8009e22 <_dtoa_r+0x8e2>
 8009d4a:	9b08      	ldr	r3, [sp, #32]
 8009d4c:	f1c0 001c 	rsb	r0, r0, #28
 8009d50:	4403      	add	r3, r0
 8009d52:	4480      	add	r8, r0
 8009d54:	4406      	add	r6, r0
 8009d56:	9308      	str	r3, [sp, #32]
 8009d58:	f1b8 0f00 	cmp.w	r8, #0
 8009d5c:	dd05      	ble.n	8009d6a <_dtoa_r+0x82a>
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4642      	mov	r2, r8
 8009d62:	4658      	mov	r0, fp
 8009d64:	f000 fd08 	bl	800a778 <__lshift>
 8009d68:	4681      	mov	r9, r0
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dd05      	ble.n	8009d7c <_dtoa_r+0x83c>
 8009d70:	4621      	mov	r1, r4
 8009d72:	461a      	mov	r2, r3
 8009d74:	4658      	mov	r0, fp
 8009d76:	f000 fcff 	bl	800a778 <__lshift>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d059      	beq.n	8009e36 <_dtoa_r+0x8f6>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4648      	mov	r0, r9
 8009d86:	f000 fd63 	bl	800a850 <__mcmp>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	da53      	bge.n	8009e36 <_dtoa_r+0x8f6>
 8009d8e:	1e7b      	subs	r3, r7, #1
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	4649      	mov	r1, r9
 8009d94:	2300      	movs	r3, #0
 8009d96:	220a      	movs	r2, #10
 8009d98:	4658      	mov	r0, fp
 8009d9a:	f000 faf7 	bl	800a38c <__multadd>
 8009d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009da0:	4681      	mov	r9, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 8172 	beq.w	800a08c <_dtoa_r+0xb4c>
 8009da8:	2300      	movs	r3, #0
 8009daa:	4629      	mov	r1, r5
 8009dac:	220a      	movs	r2, #10
 8009dae:	4658      	mov	r0, fp
 8009db0:	f000 faec 	bl	800a38c <__multadd>
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	4605      	mov	r5, r0
 8009dba:	dc67      	bgt.n	8009e8c <_dtoa_r+0x94c>
 8009dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	dc41      	bgt.n	8009e46 <_dtoa_r+0x906>
 8009dc2:	e063      	b.n	8009e8c <_dtoa_r+0x94c>
 8009dc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009dc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009dca:	e746      	b.n	8009c5a <_dtoa_r+0x71a>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	1e5c      	subs	r4, r3, #1
 8009dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	bfbf      	itttt	lt
 8009dd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009dd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009dda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ddc:	1ae3      	sublt	r3, r4, r3
 8009dde:	bfb4      	ite	lt
 8009de0:	18d2      	addlt	r2, r2, r3
 8009de2:	1b1c      	subge	r4, r3, r4
 8009de4:	9b07      	ldr	r3, [sp, #28]
 8009de6:	bfbc      	itt	lt
 8009de8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009dea:	2400      	movlt	r4, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	bfb5      	itete	lt
 8009df0:	eba8 0603 	sublt.w	r6, r8, r3
 8009df4:	9b07      	ldrge	r3, [sp, #28]
 8009df6:	2300      	movlt	r3, #0
 8009df8:	4646      	movge	r6, r8
 8009dfa:	e730      	b.n	8009c5e <_dtoa_r+0x71e>
 8009dfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009dfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e00:	4646      	mov	r6, r8
 8009e02:	e735      	b.n	8009c70 <_dtoa_r+0x730>
 8009e04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e06:	e75c      	b.n	8009cc2 <_dtoa_r+0x782>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e788      	b.n	8009d1e <_dtoa_r+0x7de>
 8009e0c:	3fe00000 	.word	0x3fe00000
 8009e10:	40240000 	.word	0x40240000
 8009e14:	40140000 	.word	0x40140000
 8009e18:	9b02      	ldr	r3, [sp, #8]
 8009e1a:	e780      	b.n	8009d1e <_dtoa_r+0x7de>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e20:	e782      	b.n	8009d28 <_dtoa_r+0x7e8>
 8009e22:	d099      	beq.n	8009d58 <_dtoa_r+0x818>
 8009e24:	9a08      	ldr	r2, [sp, #32]
 8009e26:	331c      	adds	r3, #28
 8009e28:	441a      	add	r2, r3
 8009e2a:	4498      	add	r8, r3
 8009e2c:	441e      	add	r6, r3
 8009e2e:	9208      	str	r2, [sp, #32]
 8009e30:	e792      	b.n	8009d58 <_dtoa_r+0x818>
 8009e32:	4603      	mov	r3, r0
 8009e34:	e7f6      	b.n	8009e24 <_dtoa_r+0x8e4>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	9704      	str	r7, [sp, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	dc20      	bgt.n	8009e80 <_dtoa_r+0x940>
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	dd1e      	ble.n	8009e84 <_dtoa_r+0x944>
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f47f aec0 	bne.w	8009bce <_dtoa_r+0x68e>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	2205      	movs	r2, #5
 8009e52:	4658      	mov	r0, fp
 8009e54:	f000 fa9a 	bl	800a38c <__multadd>
 8009e58:	4601      	mov	r1, r0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	f000 fcf7 	bl	800a850 <__mcmp>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f77f aeb3 	ble.w	8009bce <_dtoa_r+0x68e>
 8009e68:	4656      	mov	r6, sl
 8009e6a:	2331      	movs	r3, #49	@ 0x31
 8009e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e70:	9b04      	ldr	r3, [sp, #16]
 8009e72:	3301      	adds	r3, #1
 8009e74:	9304      	str	r3, [sp, #16]
 8009e76:	e6ae      	b.n	8009bd6 <_dtoa_r+0x696>
 8009e78:	9c07      	ldr	r4, [sp, #28]
 8009e7a:	9704      	str	r7, [sp, #16]
 8009e7c:	4625      	mov	r5, r4
 8009e7e:	e7f3      	b.n	8009e68 <_dtoa_r+0x928>
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 8104 	beq.w	800a094 <_dtoa_r+0xb54>
 8009e8c:	2e00      	cmp	r6, #0
 8009e8e:	dd05      	ble.n	8009e9c <_dtoa_r+0x95c>
 8009e90:	4629      	mov	r1, r5
 8009e92:	4632      	mov	r2, r6
 8009e94:	4658      	mov	r0, fp
 8009e96:	f000 fc6f 	bl	800a778 <__lshift>
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d05a      	beq.n	8009f58 <_dtoa_r+0xa18>
 8009ea2:	6869      	ldr	r1, [r5, #4]
 8009ea4:	4658      	mov	r0, fp
 8009ea6:	f000 fa0f 	bl	800a2c8 <_Balloc>
 8009eaa:	4606      	mov	r6, r0
 8009eac:	b928      	cbnz	r0, 8009eba <_dtoa_r+0x97a>
 8009eae:	4b84      	ldr	r3, [pc, #528]	@ (800a0c0 <_dtoa_r+0xb80>)
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009eb6:	f7ff bb5a 	b.w	800956e <_dtoa_r+0x2e>
 8009eba:	692a      	ldr	r2, [r5, #16]
 8009ebc:	3202      	adds	r2, #2
 8009ebe:	0092      	lsls	r2, r2, #2
 8009ec0:	f105 010c 	add.w	r1, r5, #12
 8009ec4:	300c      	adds	r0, #12
 8009ec6:	f7ff fa9e 	bl	8009406 <memcpy>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4658      	mov	r0, fp
 8009ed0:	f000 fc52 	bl	800a778 <__lshift>
 8009ed4:	f10a 0301 	add.w	r3, sl, #1
 8009ed8:	9307      	str	r3, [sp, #28]
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	4453      	add	r3, sl
 8009ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ee0:	9b02      	ldr	r3, [sp, #8]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	462f      	mov	r7, r5
 8009ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009eea:	4605      	mov	r5, r0
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	4621      	mov	r1, r4
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4648      	mov	r0, r9
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	f7ff fa9b 	bl	8009430 <quorem>
 8009efa:	4639      	mov	r1, r7
 8009efc:	9002      	str	r0, [sp, #8]
 8009efe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f02:	4648      	mov	r0, r9
 8009f04:	f000 fca4 	bl	800a850 <__mcmp>
 8009f08:	462a      	mov	r2, r5
 8009f0a:	9008      	str	r0, [sp, #32]
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4658      	mov	r0, fp
 8009f10:	f000 fcba 	bl	800a888 <__mdiff>
 8009f14:	68c2      	ldr	r2, [r0, #12]
 8009f16:	4606      	mov	r6, r0
 8009f18:	bb02      	cbnz	r2, 8009f5c <_dtoa_r+0xa1c>
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	f000 fc97 	bl	800a850 <__mcmp>
 8009f22:	4602      	mov	r2, r0
 8009f24:	4631      	mov	r1, r6
 8009f26:	4658      	mov	r0, fp
 8009f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f2a:	f000 fa0d 	bl	800a348 <_Bfree>
 8009f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f32:	9e07      	ldr	r6, [sp, #28]
 8009f34:	ea43 0102 	orr.w	r1, r3, r2
 8009f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f3a:	4319      	orrs	r1, r3
 8009f3c:	d110      	bne.n	8009f60 <_dtoa_r+0xa20>
 8009f3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f42:	d029      	beq.n	8009f98 <_dtoa_r+0xa58>
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dd02      	ble.n	8009f50 <_dtoa_r+0xa10>
 8009f4a:	9b02      	ldr	r3, [sp, #8]
 8009f4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009f50:	9b00      	ldr	r3, [sp, #0]
 8009f52:	f883 8000 	strb.w	r8, [r3]
 8009f56:	e63f      	b.n	8009bd8 <_dtoa_r+0x698>
 8009f58:	4628      	mov	r0, r5
 8009f5a:	e7bb      	b.n	8009ed4 <_dtoa_r+0x994>
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	e7e1      	b.n	8009f24 <_dtoa_r+0x9e4>
 8009f60:	9b08      	ldr	r3, [sp, #32]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	db04      	blt.n	8009f70 <_dtoa_r+0xa30>
 8009f66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	d120      	bne.n	8009fb2 <_dtoa_r+0xa72>
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	dded      	ble.n	8009f50 <_dtoa_r+0xa10>
 8009f74:	4649      	mov	r1, r9
 8009f76:	2201      	movs	r2, #1
 8009f78:	4658      	mov	r0, fp
 8009f7a:	f000 fbfd 	bl	800a778 <__lshift>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4681      	mov	r9, r0
 8009f82:	f000 fc65 	bl	800a850 <__mcmp>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	dc03      	bgt.n	8009f92 <_dtoa_r+0xa52>
 8009f8a:	d1e1      	bne.n	8009f50 <_dtoa_r+0xa10>
 8009f8c:	f018 0f01 	tst.w	r8, #1
 8009f90:	d0de      	beq.n	8009f50 <_dtoa_r+0xa10>
 8009f92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f96:	d1d8      	bne.n	8009f4a <_dtoa_r+0xa0a>
 8009f98:	9a00      	ldr	r2, [sp, #0]
 8009f9a:	2339      	movs	r3, #57	@ 0x39
 8009f9c:	7013      	strb	r3, [r2, #0]
 8009f9e:	4633      	mov	r3, r6
 8009fa0:	461e      	mov	r6, r3
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fa8:	2a39      	cmp	r2, #57	@ 0x39
 8009faa:	d052      	beq.n	800a052 <_dtoa_r+0xb12>
 8009fac:	3201      	adds	r2, #1
 8009fae:	701a      	strb	r2, [r3, #0]
 8009fb0:	e612      	b.n	8009bd8 <_dtoa_r+0x698>
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	dd07      	ble.n	8009fc6 <_dtoa_r+0xa86>
 8009fb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fba:	d0ed      	beq.n	8009f98 <_dtoa_r+0xa58>
 8009fbc:	9a00      	ldr	r2, [sp, #0]
 8009fbe:	f108 0301 	add.w	r3, r8, #1
 8009fc2:	7013      	strb	r3, [r2, #0]
 8009fc4:	e608      	b.n	8009bd8 <_dtoa_r+0x698>
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	9a07      	ldr	r2, [sp, #28]
 8009fca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d028      	beq.n	800a026 <_dtoa_r+0xae6>
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	220a      	movs	r2, #10
 8009fda:	4658      	mov	r0, fp
 8009fdc:	f000 f9d6 	bl	800a38c <__multadd>
 8009fe0:	42af      	cmp	r7, r5
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	f04f 020a 	mov.w	r2, #10
 8009fec:	4639      	mov	r1, r7
 8009fee:	4658      	mov	r0, fp
 8009ff0:	d107      	bne.n	800a002 <_dtoa_r+0xac2>
 8009ff2:	f000 f9cb 	bl	800a38c <__multadd>
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	9307      	str	r3, [sp, #28]
 800a000:	e774      	b.n	8009eec <_dtoa_r+0x9ac>
 800a002:	f000 f9c3 	bl	800a38c <__multadd>
 800a006:	4629      	mov	r1, r5
 800a008:	4607      	mov	r7, r0
 800a00a:	2300      	movs	r3, #0
 800a00c:	220a      	movs	r2, #10
 800a00e:	4658      	mov	r0, fp
 800a010:	f000 f9bc 	bl	800a38c <__multadd>
 800a014:	4605      	mov	r5, r0
 800a016:	e7f0      	b.n	8009ffa <_dtoa_r+0xaba>
 800a018:	9b00      	ldr	r3, [sp, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfcc      	ite	gt
 800a01e:	461e      	movgt	r6, r3
 800a020:	2601      	movle	r6, #1
 800a022:	4456      	add	r6, sl
 800a024:	2700      	movs	r7, #0
 800a026:	4649      	mov	r1, r9
 800a028:	2201      	movs	r2, #1
 800a02a:	4658      	mov	r0, fp
 800a02c:	f000 fba4 	bl	800a778 <__lshift>
 800a030:	4621      	mov	r1, r4
 800a032:	4681      	mov	r9, r0
 800a034:	f000 fc0c 	bl	800a850 <__mcmp>
 800a038:	2800      	cmp	r0, #0
 800a03a:	dcb0      	bgt.n	8009f9e <_dtoa_r+0xa5e>
 800a03c:	d102      	bne.n	800a044 <_dtoa_r+0xb04>
 800a03e:	f018 0f01 	tst.w	r8, #1
 800a042:	d1ac      	bne.n	8009f9e <_dtoa_r+0xa5e>
 800a044:	4633      	mov	r3, r6
 800a046:	461e      	mov	r6, r3
 800a048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a04c:	2a30      	cmp	r2, #48	@ 0x30
 800a04e:	d0fa      	beq.n	800a046 <_dtoa_r+0xb06>
 800a050:	e5c2      	b.n	8009bd8 <_dtoa_r+0x698>
 800a052:	459a      	cmp	sl, r3
 800a054:	d1a4      	bne.n	8009fa0 <_dtoa_r+0xa60>
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	3301      	adds	r3, #1
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	2331      	movs	r3, #49	@ 0x31
 800a05e:	f88a 3000 	strb.w	r3, [sl]
 800a062:	e5b9      	b.n	8009bd8 <_dtoa_r+0x698>
 800a064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a066:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a0c4 <_dtoa_r+0xb84>
 800a06a:	b11b      	cbz	r3, 800a074 <_dtoa_r+0xb34>
 800a06c:	f10a 0308 	add.w	r3, sl, #8
 800a070:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	4650      	mov	r0, sl
 800a076:	b019      	add	sp, #100	@ 0x64
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07e:	2b01      	cmp	r3, #1
 800a080:	f77f ae37 	ble.w	8009cf2 <_dtoa_r+0x7b2>
 800a084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a086:	930a      	str	r3, [sp, #40]	@ 0x28
 800a088:	2001      	movs	r0, #1
 800a08a:	e655      	b.n	8009d38 <_dtoa_r+0x7f8>
 800a08c:	9b00      	ldr	r3, [sp, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f77f aed6 	ble.w	8009e40 <_dtoa_r+0x900>
 800a094:	4656      	mov	r6, sl
 800a096:	4621      	mov	r1, r4
 800a098:	4648      	mov	r0, r9
 800a09a:	f7ff f9c9 	bl	8009430 <quorem>
 800a09e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0a2:	f806 8b01 	strb.w	r8, [r6], #1
 800a0a6:	9b00      	ldr	r3, [sp, #0]
 800a0a8:	eba6 020a 	sub.w	r2, r6, sl
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	ddb3      	ble.n	800a018 <_dtoa_r+0xad8>
 800a0b0:	4649      	mov	r1, r9
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	f000 f968 	bl	800a38c <__multadd>
 800a0bc:	4681      	mov	r9, r0
 800a0be:	e7ea      	b.n	800a096 <_dtoa_r+0xb56>
 800a0c0:	0800d1a5 	.word	0x0800d1a5
 800a0c4:	0800d129 	.word	0x0800d129

0800a0c8 <_free_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d041      	beq.n	800a154 <_free_r+0x8c>
 800a0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d4:	1f0c      	subs	r4, r1, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bfb8      	it	lt
 800a0da:	18e4      	addlt	r4, r4, r3
 800a0dc:	f000 f8e8 	bl	800a2b0 <__malloc_lock>
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a158 <_free_r+0x90>)
 800a0e2:	6813      	ldr	r3, [r2, #0]
 800a0e4:	b933      	cbnz	r3, 800a0f4 <_free_r+0x2c>
 800a0e6:	6063      	str	r3, [r4, #4]
 800a0e8:	6014      	str	r4, [r2, #0]
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f0:	f000 b8e4 	b.w	800a2bc <__malloc_unlock>
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d908      	bls.n	800a10a <_free_r+0x42>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	1821      	adds	r1, r4, r0
 800a0fc:	428b      	cmp	r3, r1
 800a0fe:	bf01      	itttt	eq
 800a100:	6819      	ldreq	r1, [r3, #0]
 800a102:	685b      	ldreq	r3, [r3, #4]
 800a104:	1809      	addeq	r1, r1, r0
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	e7ed      	b.n	800a0e6 <_free_r+0x1e>
 800a10a:	461a      	mov	r2, r3
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	b10b      	cbz	r3, 800a114 <_free_r+0x4c>
 800a110:	42a3      	cmp	r3, r4
 800a112:	d9fa      	bls.n	800a10a <_free_r+0x42>
 800a114:	6811      	ldr	r1, [r2, #0]
 800a116:	1850      	adds	r0, r2, r1
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d10b      	bne.n	800a134 <_free_r+0x6c>
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	4401      	add	r1, r0
 800a120:	1850      	adds	r0, r2, r1
 800a122:	4283      	cmp	r3, r0
 800a124:	6011      	str	r1, [r2, #0]
 800a126:	d1e0      	bne.n	800a0ea <_free_r+0x22>
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	6053      	str	r3, [r2, #4]
 800a12e:	4408      	add	r0, r1
 800a130:	6010      	str	r0, [r2, #0]
 800a132:	e7da      	b.n	800a0ea <_free_r+0x22>
 800a134:	d902      	bls.n	800a13c <_free_r+0x74>
 800a136:	230c      	movs	r3, #12
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	e7d6      	b.n	800a0ea <_free_r+0x22>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	1821      	adds	r1, r4, r0
 800a140:	428b      	cmp	r3, r1
 800a142:	bf04      	itt	eq
 800a144:	6819      	ldreq	r1, [r3, #0]
 800a146:	685b      	ldreq	r3, [r3, #4]
 800a148:	6063      	str	r3, [r4, #4]
 800a14a:	bf04      	itt	eq
 800a14c:	1809      	addeq	r1, r1, r0
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	6054      	str	r4, [r2, #4]
 800a152:	e7ca      	b.n	800a0ea <_free_r+0x22>
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	2000076c 	.word	0x2000076c

0800a15c <malloc>:
 800a15c:	4b02      	ldr	r3, [pc, #8]	@ (800a168 <malloc+0xc>)
 800a15e:	4601      	mov	r1, r0
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	f000 b825 	b.w	800a1b0 <_malloc_r>
 800a166:	bf00      	nop
 800a168:	20000044 	.word	0x20000044

0800a16c <sbrk_aligned>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	4e0f      	ldr	r6, [pc, #60]	@ (800a1ac <sbrk_aligned+0x40>)
 800a170:	460c      	mov	r4, r1
 800a172:	6831      	ldr	r1, [r6, #0]
 800a174:	4605      	mov	r5, r0
 800a176:	b911      	cbnz	r1, 800a17e <sbrk_aligned+0x12>
 800a178:	f001 ffd2 	bl	800c120 <_sbrk_r>
 800a17c:	6030      	str	r0, [r6, #0]
 800a17e:	4621      	mov	r1, r4
 800a180:	4628      	mov	r0, r5
 800a182:	f001 ffcd 	bl	800c120 <_sbrk_r>
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	d103      	bne.n	800a192 <sbrk_aligned+0x26>
 800a18a:	f04f 34ff 	mov.w	r4, #4294967295
 800a18e:	4620      	mov	r0, r4
 800a190:	bd70      	pop	{r4, r5, r6, pc}
 800a192:	1cc4      	adds	r4, r0, #3
 800a194:	f024 0403 	bic.w	r4, r4, #3
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d0f8      	beq.n	800a18e <sbrk_aligned+0x22>
 800a19c:	1a21      	subs	r1, r4, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f001 ffbe 	bl	800c120 <_sbrk_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d1f2      	bne.n	800a18e <sbrk_aligned+0x22>
 800a1a8:	e7ef      	b.n	800a18a <sbrk_aligned+0x1e>
 800a1aa:	bf00      	nop
 800a1ac:	20000768 	.word	0x20000768

0800a1b0 <_malloc_r>:
 800a1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b4:	1ccd      	adds	r5, r1, #3
 800a1b6:	f025 0503 	bic.w	r5, r5, #3
 800a1ba:	3508      	adds	r5, #8
 800a1bc:	2d0c      	cmp	r5, #12
 800a1be:	bf38      	it	cc
 800a1c0:	250c      	movcc	r5, #12
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	db01      	blt.n	800a1cc <_malloc_r+0x1c>
 800a1c8:	42a9      	cmp	r1, r5
 800a1ca:	d904      	bls.n	800a1d6 <_malloc_r+0x26>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	6033      	str	r3, [r6, #0]
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2ac <_malloc_r+0xfc>
 800a1da:	f000 f869 	bl	800a2b0 <__malloc_lock>
 800a1de:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e2:	461c      	mov	r4, r3
 800a1e4:	bb44      	cbnz	r4, 800a238 <_malloc_r+0x88>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f7ff ffbf 	bl	800a16c <sbrk_aligned>
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	d158      	bne.n	800a2a6 <_malloc_r+0xf6>
 800a1f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a1f8:	4627      	mov	r7, r4
 800a1fa:	2f00      	cmp	r7, #0
 800a1fc:	d143      	bne.n	800a286 <_malloc_r+0xd6>
 800a1fe:	2c00      	cmp	r4, #0
 800a200:	d04b      	beq.n	800a29a <_malloc_r+0xea>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	4639      	mov	r1, r7
 800a206:	4630      	mov	r0, r6
 800a208:	eb04 0903 	add.w	r9, r4, r3
 800a20c:	f001 ff88 	bl	800c120 <_sbrk_r>
 800a210:	4581      	cmp	r9, r0
 800a212:	d142      	bne.n	800a29a <_malloc_r+0xea>
 800a214:	6821      	ldr	r1, [r4, #0]
 800a216:	1a6d      	subs	r5, r5, r1
 800a218:	4629      	mov	r1, r5
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffa6 	bl	800a16c <sbrk_aligned>
 800a220:	3001      	adds	r0, #1
 800a222:	d03a      	beq.n	800a29a <_malloc_r+0xea>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	442b      	add	r3, r5
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	f8d8 3000 	ldr.w	r3, [r8]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	bb62      	cbnz	r2, 800a28c <_malloc_r+0xdc>
 800a232:	f8c8 7000 	str.w	r7, [r8]
 800a236:	e00f      	b.n	800a258 <_malloc_r+0xa8>
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	1b52      	subs	r2, r2, r5
 800a23c:	d420      	bmi.n	800a280 <_malloc_r+0xd0>
 800a23e:	2a0b      	cmp	r2, #11
 800a240:	d917      	bls.n	800a272 <_malloc_r+0xc2>
 800a242:	1961      	adds	r1, r4, r5
 800a244:	42a3      	cmp	r3, r4
 800a246:	6025      	str	r5, [r4, #0]
 800a248:	bf18      	it	ne
 800a24a:	6059      	strne	r1, [r3, #4]
 800a24c:	6863      	ldr	r3, [r4, #4]
 800a24e:	bf08      	it	eq
 800a250:	f8c8 1000 	streq.w	r1, [r8]
 800a254:	5162      	str	r2, [r4, r5]
 800a256:	604b      	str	r3, [r1, #4]
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 f82f 	bl	800a2bc <__malloc_unlock>
 800a25e:	f104 000b 	add.w	r0, r4, #11
 800a262:	1d23      	adds	r3, r4, #4
 800a264:	f020 0007 	bic.w	r0, r0, #7
 800a268:	1ac2      	subs	r2, r0, r3
 800a26a:	bf1c      	itt	ne
 800a26c:	1a1b      	subne	r3, r3, r0
 800a26e:	50a3      	strne	r3, [r4, r2]
 800a270:	e7af      	b.n	800a1d2 <_malloc_r+0x22>
 800a272:	6862      	ldr	r2, [r4, #4]
 800a274:	42a3      	cmp	r3, r4
 800a276:	bf0c      	ite	eq
 800a278:	f8c8 2000 	streq.w	r2, [r8]
 800a27c:	605a      	strne	r2, [r3, #4]
 800a27e:	e7eb      	b.n	800a258 <_malloc_r+0xa8>
 800a280:	4623      	mov	r3, r4
 800a282:	6864      	ldr	r4, [r4, #4]
 800a284:	e7ae      	b.n	800a1e4 <_malloc_r+0x34>
 800a286:	463c      	mov	r4, r7
 800a288:	687f      	ldr	r7, [r7, #4]
 800a28a:	e7b6      	b.n	800a1fa <_malloc_r+0x4a>
 800a28c:	461a      	mov	r2, r3
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	42a3      	cmp	r3, r4
 800a292:	d1fb      	bne.n	800a28c <_malloc_r+0xdc>
 800a294:	2300      	movs	r3, #0
 800a296:	6053      	str	r3, [r2, #4]
 800a298:	e7de      	b.n	800a258 <_malloc_r+0xa8>
 800a29a:	230c      	movs	r3, #12
 800a29c:	6033      	str	r3, [r6, #0]
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f000 f80c 	bl	800a2bc <__malloc_unlock>
 800a2a4:	e794      	b.n	800a1d0 <_malloc_r+0x20>
 800a2a6:	6005      	str	r5, [r0, #0]
 800a2a8:	e7d6      	b.n	800a258 <_malloc_r+0xa8>
 800a2aa:	bf00      	nop
 800a2ac:	2000076c 	.word	0x2000076c

0800a2b0 <__malloc_lock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	@ (800a2b8 <__malloc_lock+0x8>)
 800a2b2:	f7ff b8a6 	b.w	8009402 <__retarget_lock_acquire_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	20000764 	.word	0x20000764

0800a2bc <__malloc_unlock>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	@ (800a2c4 <__malloc_unlock+0x8>)
 800a2be:	f7ff b8a1 	b.w	8009404 <__retarget_lock_release_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	20000764 	.word	0x20000764

0800a2c8 <_Balloc>:
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	69c6      	ldr	r6, [r0, #28]
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	b976      	cbnz	r6, 800a2f0 <_Balloc+0x28>
 800a2d2:	2010      	movs	r0, #16
 800a2d4:	f7ff ff42 	bl	800a15c <malloc>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	61e0      	str	r0, [r4, #28]
 800a2dc:	b920      	cbnz	r0, 800a2e8 <_Balloc+0x20>
 800a2de:	4b18      	ldr	r3, [pc, #96]	@ (800a340 <_Balloc+0x78>)
 800a2e0:	4818      	ldr	r0, [pc, #96]	@ (800a344 <_Balloc+0x7c>)
 800a2e2:	216b      	movs	r1, #107	@ 0x6b
 800a2e4:	f001 ff34 	bl	800c150 <__assert_func>
 800a2e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2ec:	6006      	str	r6, [r0, #0]
 800a2ee:	60c6      	str	r6, [r0, #12]
 800a2f0:	69e6      	ldr	r6, [r4, #28]
 800a2f2:	68f3      	ldr	r3, [r6, #12]
 800a2f4:	b183      	cbz	r3, 800a318 <_Balloc+0x50>
 800a2f6:	69e3      	ldr	r3, [r4, #28]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2fe:	b9b8      	cbnz	r0, 800a330 <_Balloc+0x68>
 800a300:	2101      	movs	r1, #1
 800a302:	fa01 f605 	lsl.w	r6, r1, r5
 800a306:	1d72      	adds	r2, r6, #5
 800a308:	0092      	lsls	r2, r2, #2
 800a30a:	4620      	mov	r0, r4
 800a30c:	f001 ff3e 	bl	800c18c <_calloc_r>
 800a310:	b160      	cbz	r0, 800a32c <_Balloc+0x64>
 800a312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a316:	e00e      	b.n	800a336 <_Balloc+0x6e>
 800a318:	2221      	movs	r2, #33	@ 0x21
 800a31a:	2104      	movs	r1, #4
 800a31c:	4620      	mov	r0, r4
 800a31e:	f001 ff35 	bl	800c18c <_calloc_r>
 800a322:	69e3      	ldr	r3, [r4, #28]
 800a324:	60f0      	str	r0, [r6, #12]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1e4      	bne.n	800a2f6 <_Balloc+0x2e>
 800a32c:	2000      	movs	r0, #0
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	6802      	ldr	r2, [r0, #0]
 800a332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a336:	2300      	movs	r3, #0
 800a338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a33c:	e7f7      	b.n	800a32e <_Balloc+0x66>
 800a33e:	bf00      	nop
 800a340:	0800d136 	.word	0x0800d136
 800a344:	0800d1b6 	.word	0x0800d1b6

0800a348 <_Bfree>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	69c6      	ldr	r6, [r0, #28]
 800a34c:	4605      	mov	r5, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	b976      	cbnz	r6, 800a370 <_Bfree+0x28>
 800a352:	2010      	movs	r0, #16
 800a354:	f7ff ff02 	bl	800a15c <malloc>
 800a358:	4602      	mov	r2, r0
 800a35a:	61e8      	str	r0, [r5, #28]
 800a35c:	b920      	cbnz	r0, 800a368 <_Bfree+0x20>
 800a35e:	4b09      	ldr	r3, [pc, #36]	@ (800a384 <_Bfree+0x3c>)
 800a360:	4809      	ldr	r0, [pc, #36]	@ (800a388 <_Bfree+0x40>)
 800a362:	218f      	movs	r1, #143	@ 0x8f
 800a364:	f001 fef4 	bl	800c150 <__assert_func>
 800a368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a36c:	6006      	str	r6, [r0, #0]
 800a36e:	60c6      	str	r6, [r0, #12]
 800a370:	b13c      	cbz	r4, 800a382 <_Bfree+0x3a>
 800a372:	69eb      	ldr	r3, [r5, #28]
 800a374:	6862      	ldr	r2, [r4, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a37c:	6021      	str	r1, [r4, #0]
 800a37e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	0800d136 	.word	0x0800d136
 800a388:	0800d1b6 	.word	0x0800d1b6

0800a38c <__multadd>:
 800a38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a390:	690d      	ldr	r5, [r1, #16]
 800a392:	4607      	mov	r7, r0
 800a394:	460c      	mov	r4, r1
 800a396:	461e      	mov	r6, r3
 800a398:	f101 0c14 	add.w	ip, r1, #20
 800a39c:	2000      	movs	r0, #0
 800a39e:	f8dc 3000 	ldr.w	r3, [ip]
 800a3a2:	b299      	uxth	r1, r3
 800a3a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a3a8:	0c1e      	lsrs	r6, r3, #16
 800a3aa:	0c0b      	lsrs	r3, r1, #16
 800a3ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a3b0:	b289      	uxth	r1, r1
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3b8:	4285      	cmp	r5, r0
 800a3ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a3be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3c2:	dcec      	bgt.n	800a39e <__multadd+0x12>
 800a3c4:	b30e      	cbz	r6, 800a40a <__multadd+0x7e>
 800a3c6:	68a3      	ldr	r3, [r4, #8]
 800a3c8:	42ab      	cmp	r3, r5
 800a3ca:	dc19      	bgt.n	800a400 <__multadd+0x74>
 800a3cc:	6861      	ldr	r1, [r4, #4]
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	3101      	adds	r1, #1
 800a3d2:	f7ff ff79 	bl	800a2c8 <_Balloc>
 800a3d6:	4680      	mov	r8, r0
 800a3d8:	b928      	cbnz	r0, 800a3e6 <__multadd+0x5a>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a410 <__multadd+0x84>)
 800a3de:	480d      	ldr	r0, [pc, #52]	@ (800a414 <__multadd+0x88>)
 800a3e0:	21ba      	movs	r1, #186	@ 0xba
 800a3e2:	f001 feb5 	bl	800c150 <__assert_func>
 800a3e6:	6922      	ldr	r2, [r4, #16]
 800a3e8:	3202      	adds	r2, #2
 800a3ea:	f104 010c 	add.w	r1, r4, #12
 800a3ee:	0092      	lsls	r2, r2, #2
 800a3f0:	300c      	adds	r0, #12
 800a3f2:	f7ff f808 	bl	8009406 <memcpy>
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	f7ff ffa5 	bl	800a348 <_Bfree>
 800a3fe:	4644      	mov	r4, r8
 800a400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a404:	3501      	adds	r5, #1
 800a406:	615e      	str	r6, [r3, #20]
 800a408:	6125      	str	r5, [r4, #16]
 800a40a:	4620      	mov	r0, r4
 800a40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a410:	0800d1a5 	.word	0x0800d1a5
 800a414:	0800d1b6 	.word	0x0800d1b6

0800a418 <__s2b>:
 800a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a41c:	460c      	mov	r4, r1
 800a41e:	4615      	mov	r5, r2
 800a420:	461f      	mov	r7, r3
 800a422:	2209      	movs	r2, #9
 800a424:	3308      	adds	r3, #8
 800a426:	4606      	mov	r6, r0
 800a428:	fb93 f3f2 	sdiv	r3, r3, r2
 800a42c:	2100      	movs	r1, #0
 800a42e:	2201      	movs	r2, #1
 800a430:	429a      	cmp	r2, r3
 800a432:	db09      	blt.n	800a448 <__s2b+0x30>
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ff47 	bl	800a2c8 <_Balloc>
 800a43a:	b940      	cbnz	r0, 800a44e <__s2b+0x36>
 800a43c:	4602      	mov	r2, r0
 800a43e:	4b19      	ldr	r3, [pc, #100]	@ (800a4a4 <__s2b+0x8c>)
 800a440:	4819      	ldr	r0, [pc, #100]	@ (800a4a8 <__s2b+0x90>)
 800a442:	21d3      	movs	r1, #211	@ 0xd3
 800a444:	f001 fe84 	bl	800c150 <__assert_func>
 800a448:	0052      	lsls	r2, r2, #1
 800a44a:	3101      	adds	r1, #1
 800a44c:	e7f0      	b.n	800a430 <__s2b+0x18>
 800a44e:	9b08      	ldr	r3, [sp, #32]
 800a450:	6143      	str	r3, [r0, #20]
 800a452:	2d09      	cmp	r5, #9
 800a454:	f04f 0301 	mov.w	r3, #1
 800a458:	6103      	str	r3, [r0, #16]
 800a45a:	dd16      	ble.n	800a48a <__s2b+0x72>
 800a45c:	f104 0909 	add.w	r9, r4, #9
 800a460:	46c8      	mov	r8, r9
 800a462:	442c      	add	r4, r5
 800a464:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a468:	4601      	mov	r1, r0
 800a46a:	3b30      	subs	r3, #48	@ 0x30
 800a46c:	220a      	movs	r2, #10
 800a46e:	4630      	mov	r0, r6
 800a470:	f7ff ff8c 	bl	800a38c <__multadd>
 800a474:	45a0      	cmp	r8, r4
 800a476:	d1f5      	bne.n	800a464 <__s2b+0x4c>
 800a478:	f1a5 0408 	sub.w	r4, r5, #8
 800a47c:	444c      	add	r4, r9
 800a47e:	1b2d      	subs	r5, r5, r4
 800a480:	1963      	adds	r3, r4, r5
 800a482:	42bb      	cmp	r3, r7
 800a484:	db04      	blt.n	800a490 <__s2b+0x78>
 800a486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48a:	340a      	adds	r4, #10
 800a48c:	2509      	movs	r5, #9
 800a48e:	e7f6      	b.n	800a47e <__s2b+0x66>
 800a490:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a494:	4601      	mov	r1, r0
 800a496:	3b30      	subs	r3, #48	@ 0x30
 800a498:	220a      	movs	r2, #10
 800a49a:	4630      	mov	r0, r6
 800a49c:	f7ff ff76 	bl	800a38c <__multadd>
 800a4a0:	e7ee      	b.n	800a480 <__s2b+0x68>
 800a4a2:	bf00      	nop
 800a4a4:	0800d1a5 	.word	0x0800d1a5
 800a4a8:	0800d1b6 	.word	0x0800d1b6

0800a4ac <__hi0bits>:
 800a4ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	bf36      	itet	cc
 800a4b4:	0403      	lslcc	r3, r0, #16
 800a4b6:	2000      	movcs	r0, #0
 800a4b8:	2010      	movcc	r0, #16
 800a4ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4be:	bf3c      	itt	cc
 800a4c0:	021b      	lslcc	r3, r3, #8
 800a4c2:	3008      	addcc	r0, #8
 800a4c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4c8:	bf3c      	itt	cc
 800a4ca:	011b      	lslcc	r3, r3, #4
 800a4cc:	3004      	addcc	r0, #4
 800a4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d2:	bf3c      	itt	cc
 800a4d4:	009b      	lslcc	r3, r3, #2
 800a4d6:	3002      	addcc	r0, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	db05      	blt.n	800a4e8 <__hi0bits+0x3c>
 800a4dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a4e0:	f100 0001 	add.w	r0, r0, #1
 800a4e4:	bf08      	it	eq
 800a4e6:	2020      	moveq	r0, #32
 800a4e8:	4770      	bx	lr

0800a4ea <__lo0bits>:
 800a4ea:	6803      	ldr	r3, [r0, #0]
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	f013 0007 	ands.w	r0, r3, #7
 800a4f2:	d00b      	beq.n	800a50c <__lo0bits+0x22>
 800a4f4:	07d9      	lsls	r1, r3, #31
 800a4f6:	d421      	bmi.n	800a53c <__lo0bits+0x52>
 800a4f8:	0798      	lsls	r0, r3, #30
 800a4fa:	bf49      	itett	mi
 800a4fc:	085b      	lsrmi	r3, r3, #1
 800a4fe:	089b      	lsrpl	r3, r3, #2
 800a500:	2001      	movmi	r0, #1
 800a502:	6013      	strmi	r3, [r2, #0]
 800a504:	bf5c      	itt	pl
 800a506:	6013      	strpl	r3, [r2, #0]
 800a508:	2002      	movpl	r0, #2
 800a50a:	4770      	bx	lr
 800a50c:	b299      	uxth	r1, r3
 800a50e:	b909      	cbnz	r1, 800a514 <__lo0bits+0x2a>
 800a510:	0c1b      	lsrs	r3, r3, #16
 800a512:	2010      	movs	r0, #16
 800a514:	b2d9      	uxtb	r1, r3
 800a516:	b909      	cbnz	r1, 800a51c <__lo0bits+0x32>
 800a518:	3008      	adds	r0, #8
 800a51a:	0a1b      	lsrs	r3, r3, #8
 800a51c:	0719      	lsls	r1, r3, #28
 800a51e:	bf04      	itt	eq
 800a520:	091b      	lsreq	r3, r3, #4
 800a522:	3004      	addeq	r0, #4
 800a524:	0799      	lsls	r1, r3, #30
 800a526:	bf04      	itt	eq
 800a528:	089b      	lsreq	r3, r3, #2
 800a52a:	3002      	addeq	r0, #2
 800a52c:	07d9      	lsls	r1, r3, #31
 800a52e:	d403      	bmi.n	800a538 <__lo0bits+0x4e>
 800a530:	085b      	lsrs	r3, r3, #1
 800a532:	f100 0001 	add.w	r0, r0, #1
 800a536:	d003      	beq.n	800a540 <__lo0bits+0x56>
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	4770      	bx	lr
 800a53c:	2000      	movs	r0, #0
 800a53e:	4770      	bx	lr
 800a540:	2020      	movs	r0, #32
 800a542:	4770      	bx	lr

0800a544 <__i2b>:
 800a544:	b510      	push	{r4, lr}
 800a546:	460c      	mov	r4, r1
 800a548:	2101      	movs	r1, #1
 800a54a:	f7ff febd 	bl	800a2c8 <_Balloc>
 800a54e:	4602      	mov	r2, r0
 800a550:	b928      	cbnz	r0, 800a55e <__i2b+0x1a>
 800a552:	4b05      	ldr	r3, [pc, #20]	@ (800a568 <__i2b+0x24>)
 800a554:	4805      	ldr	r0, [pc, #20]	@ (800a56c <__i2b+0x28>)
 800a556:	f240 1145 	movw	r1, #325	@ 0x145
 800a55a:	f001 fdf9 	bl	800c150 <__assert_func>
 800a55e:	2301      	movs	r3, #1
 800a560:	6144      	str	r4, [r0, #20]
 800a562:	6103      	str	r3, [r0, #16]
 800a564:	bd10      	pop	{r4, pc}
 800a566:	bf00      	nop
 800a568:	0800d1a5 	.word	0x0800d1a5
 800a56c:	0800d1b6 	.word	0x0800d1b6

0800a570 <__multiply>:
 800a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	4614      	mov	r4, r2
 800a576:	690a      	ldr	r2, [r1, #16]
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	bfa8      	it	ge
 800a57e:	4623      	movge	r3, r4
 800a580:	460f      	mov	r7, r1
 800a582:	bfa4      	itt	ge
 800a584:	460c      	movge	r4, r1
 800a586:	461f      	movge	r7, r3
 800a588:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a58c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	6861      	ldr	r1, [r4, #4]
 800a594:	eb0a 0609 	add.w	r6, sl, r9
 800a598:	42b3      	cmp	r3, r6
 800a59a:	b085      	sub	sp, #20
 800a59c:	bfb8      	it	lt
 800a59e:	3101      	addlt	r1, #1
 800a5a0:	f7ff fe92 	bl	800a2c8 <_Balloc>
 800a5a4:	b930      	cbnz	r0, 800a5b4 <__multiply+0x44>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	4b44      	ldr	r3, [pc, #272]	@ (800a6bc <__multiply+0x14c>)
 800a5aa:	4845      	ldr	r0, [pc, #276]	@ (800a6c0 <__multiply+0x150>)
 800a5ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a5b0:	f001 fdce 	bl	800c150 <__assert_func>
 800a5b4:	f100 0514 	add.w	r5, r0, #20
 800a5b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5bc:	462b      	mov	r3, r5
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4543      	cmp	r3, r8
 800a5c2:	d321      	bcc.n	800a608 <__multiply+0x98>
 800a5c4:	f107 0114 	add.w	r1, r7, #20
 800a5c8:	f104 0214 	add.w	r2, r4, #20
 800a5cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a5d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a5d4:	9302      	str	r3, [sp, #8]
 800a5d6:	1b13      	subs	r3, r2, r4
 800a5d8:	3b15      	subs	r3, #21
 800a5da:	f023 0303 	bic.w	r3, r3, #3
 800a5de:	3304      	adds	r3, #4
 800a5e0:	f104 0715 	add.w	r7, r4, #21
 800a5e4:	42ba      	cmp	r2, r7
 800a5e6:	bf38      	it	cc
 800a5e8:	2304      	movcc	r3, #4
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	9b02      	ldr	r3, [sp, #8]
 800a5ee:	9103      	str	r1, [sp, #12]
 800a5f0:	428b      	cmp	r3, r1
 800a5f2:	d80c      	bhi.n	800a60e <__multiply+0x9e>
 800a5f4:	2e00      	cmp	r6, #0
 800a5f6:	dd03      	ble.n	800a600 <__multiply+0x90>
 800a5f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d05b      	beq.n	800a6b8 <__multiply+0x148>
 800a600:	6106      	str	r6, [r0, #16]
 800a602:	b005      	add	sp, #20
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a608:	f843 2b04 	str.w	r2, [r3], #4
 800a60c:	e7d8      	b.n	800a5c0 <__multiply+0x50>
 800a60e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a612:	f1ba 0f00 	cmp.w	sl, #0
 800a616:	d024      	beq.n	800a662 <__multiply+0xf2>
 800a618:	f104 0e14 	add.w	lr, r4, #20
 800a61c:	46a9      	mov	r9, r5
 800a61e:	f04f 0c00 	mov.w	ip, #0
 800a622:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a626:	f8d9 3000 	ldr.w	r3, [r9]
 800a62a:	fa1f fb87 	uxth.w	fp, r7
 800a62e:	b29b      	uxth	r3, r3
 800a630:	fb0a 330b 	mla	r3, sl, fp, r3
 800a634:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a638:	f8d9 7000 	ldr.w	r7, [r9]
 800a63c:	4463      	add	r3, ip
 800a63e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a642:	fb0a c70b 	mla	r7, sl, fp, ip
 800a646:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a650:	4572      	cmp	r2, lr
 800a652:	f849 3b04 	str.w	r3, [r9], #4
 800a656:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a65a:	d8e2      	bhi.n	800a622 <__multiply+0xb2>
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	f845 c003 	str.w	ip, [r5, r3]
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a668:	3104      	adds	r1, #4
 800a66a:	f1b9 0f00 	cmp.w	r9, #0
 800a66e:	d021      	beq.n	800a6b4 <__multiply+0x144>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	f104 0c14 	add.w	ip, r4, #20
 800a676:	46ae      	mov	lr, r5
 800a678:	f04f 0a00 	mov.w	sl, #0
 800a67c:	f8bc b000 	ldrh.w	fp, [ip]
 800a680:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a684:	fb09 770b 	mla	r7, r9, fp, r7
 800a688:	4457      	add	r7, sl
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a690:	f84e 3b04 	str.w	r3, [lr], #4
 800a694:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a698:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a69c:	f8be 3000 	ldrh.w	r3, [lr]
 800a6a0:	fb09 330a 	mla	r3, r9, sl, r3
 800a6a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a6a8:	4562      	cmp	r2, ip
 800a6aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6ae:	d8e5      	bhi.n	800a67c <__multiply+0x10c>
 800a6b0:	9f01      	ldr	r7, [sp, #4]
 800a6b2:	51eb      	str	r3, [r5, r7]
 800a6b4:	3504      	adds	r5, #4
 800a6b6:	e799      	b.n	800a5ec <__multiply+0x7c>
 800a6b8:	3e01      	subs	r6, #1
 800a6ba:	e79b      	b.n	800a5f4 <__multiply+0x84>
 800a6bc:	0800d1a5 	.word	0x0800d1a5
 800a6c0:	0800d1b6 	.word	0x0800d1b6

0800a6c4 <__pow5mult>:
 800a6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c8:	4615      	mov	r5, r2
 800a6ca:	f012 0203 	ands.w	r2, r2, #3
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	460e      	mov	r6, r1
 800a6d2:	d007      	beq.n	800a6e4 <__pow5mult+0x20>
 800a6d4:	4c25      	ldr	r4, [pc, #148]	@ (800a76c <__pow5mult+0xa8>)
 800a6d6:	3a01      	subs	r2, #1
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6de:	f7ff fe55 	bl	800a38c <__multadd>
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	10ad      	asrs	r5, r5, #2
 800a6e6:	d03d      	beq.n	800a764 <__pow5mult+0xa0>
 800a6e8:	69fc      	ldr	r4, [r7, #28]
 800a6ea:	b97c      	cbnz	r4, 800a70c <__pow5mult+0x48>
 800a6ec:	2010      	movs	r0, #16
 800a6ee:	f7ff fd35 	bl	800a15c <malloc>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	61f8      	str	r0, [r7, #28]
 800a6f6:	b928      	cbnz	r0, 800a704 <__pow5mult+0x40>
 800a6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a770 <__pow5mult+0xac>)
 800a6fa:	481e      	ldr	r0, [pc, #120]	@ (800a774 <__pow5mult+0xb0>)
 800a6fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a700:	f001 fd26 	bl	800c150 <__assert_func>
 800a704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a708:	6004      	str	r4, [r0, #0]
 800a70a:	60c4      	str	r4, [r0, #12]
 800a70c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a714:	b94c      	cbnz	r4, 800a72a <__pow5mult+0x66>
 800a716:	f240 2171 	movw	r1, #625	@ 0x271
 800a71a:	4638      	mov	r0, r7
 800a71c:	f7ff ff12 	bl	800a544 <__i2b>
 800a720:	2300      	movs	r3, #0
 800a722:	f8c8 0008 	str.w	r0, [r8, #8]
 800a726:	4604      	mov	r4, r0
 800a728:	6003      	str	r3, [r0, #0]
 800a72a:	f04f 0900 	mov.w	r9, #0
 800a72e:	07eb      	lsls	r3, r5, #31
 800a730:	d50a      	bpl.n	800a748 <__pow5mult+0x84>
 800a732:	4631      	mov	r1, r6
 800a734:	4622      	mov	r2, r4
 800a736:	4638      	mov	r0, r7
 800a738:	f7ff ff1a 	bl	800a570 <__multiply>
 800a73c:	4631      	mov	r1, r6
 800a73e:	4680      	mov	r8, r0
 800a740:	4638      	mov	r0, r7
 800a742:	f7ff fe01 	bl	800a348 <_Bfree>
 800a746:	4646      	mov	r6, r8
 800a748:	106d      	asrs	r5, r5, #1
 800a74a:	d00b      	beq.n	800a764 <__pow5mult+0xa0>
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	b938      	cbnz	r0, 800a760 <__pow5mult+0x9c>
 800a750:	4622      	mov	r2, r4
 800a752:	4621      	mov	r1, r4
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff ff0b 	bl	800a570 <__multiply>
 800a75a:	6020      	str	r0, [r4, #0]
 800a75c:	f8c0 9000 	str.w	r9, [r0]
 800a760:	4604      	mov	r4, r0
 800a762:	e7e4      	b.n	800a72e <__pow5mult+0x6a>
 800a764:	4630      	mov	r0, r6
 800a766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a76a:	bf00      	nop
 800a76c:	0800d210 	.word	0x0800d210
 800a770:	0800d136 	.word	0x0800d136
 800a774:	0800d1b6 	.word	0x0800d1b6

0800a778 <__lshift>:
 800a778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a77c:	460c      	mov	r4, r1
 800a77e:	6849      	ldr	r1, [r1, #4]
 800a780:	6923      	ldr	r3, [r4, #16]
 800a782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	4607      	mov	r7, r0
 800a78a:	4691      	mov	r9, r2
 800a78c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a790:	f108 0601 	add.w	r6, r8, #1
 800a794:	42b3      	cmp	r3, r6
 800a796:	db0b      	blt.n	800a7b0 <__lshift+0x38>
 800a798:	4638      	mov	r0, r7
 800a79a:	f7ff fd95 	bl	800a2c8 <_Balloc>
 800a79e:	4605      	mov	r5, r0
 800a7a0:	b948      	cbnz	r0, 800a7b6 <__lshift+0x3e>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	4b28      	ldr	r3, [pc, #160]	@ (800a848 <__lshift+0xd0>)
 800a7a6:	4829      	ldr	r0, [pc, #164]	@ (800a84c <__lshift+0xd4>)
 800a7a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7ac:	f001 fcd0 	bl	800c150 <__assert_func>
 800a7b0:	3101      	adds	r1, #1
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	e7ee      	b.n	800a794 <__lshift+0x1c>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f100 0114 	add.w	r1, r0, #20
 800a7bc:	f100 0210 	add.w	r2, r0, #16
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	4553      	cmp	r3, sl
 800a7c4:	db33      	blt.n	800a82e <__lshift+0xb6>
 800a7c6:	6920      	ldr	r0, [r4, #16]
 800a7c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7cc:	f104 0314 	add.w	r3, r4, #20
 800a7d0:	f019 091f 	ands.w	r9, r9, #31
 800a7d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7dc:	d02b      	beq.n	800a836 <__lshift+0xbe>
 800a7de:	f1c9 0e20 	rsb	lr, r9, #32
 800a7e2:	468a      	mov	sl, r1
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	fa00 f009 	lsl.w	r0, r0, r9
 800a7ec:	4310      	orrs	r0, r2
 800a7ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f6:	459c      	cmp	ip, r3
 800a7f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7fc:	d8f3      	bhi.n	800a7e6 <__lshift+0x6e>
 800a7fe:	ebac 0304 	sub.w	r3, ip, r4
 800a802:	3b15      	subs	r3, #21
 800a804:	f023 0303 	bic.w	r3, r3, #3
 800a808:	3304      	adds	r3, #4
 800a80a:	f104 0015 	add.w	r0, r4, #21
 800a80e:	4584      	cmp	ip, r0
 800a810:	bf38      	it	cc
 800a812:	2304      	movcc	r3, #4
 800a814:	50ca      	str	r2, [r1, r3]
 800a816:	b10a      	cbz	r2, 800a81c <__lshift+0xa4>
 800a818:	f108 0602 	add.w	r6, r8, #2
 800a81c:	3e01      	subs	r6, #1
 800a81e:	4638      	mov	r0, r7
 800a820:	612e      	str	r6, [r5, #16]
 800a822:	4621      	mov	r1, r4
 800a824:	f7ff fd90 	bl	800a348 <_Bfree>
 800a828:	4628      	mov	r0, r5
 800a82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a82e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a832:	3301      	adds	r3, #1
 800a834:	e7c5      	b.n	800a7c2 <__lshift+0x4a>
 800a836:	3904      	subs	r1, #4
 800a838:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a840:	459c      	cmp	ip, r3
 800a842:	d8f9      	bhi.n	800a838 <__lshift+0xc0>
 800a844:	e7ea      	b.n	800a81c <__lshift+0xa4>
 800a846:	bf00      	nop
 800a848:	0800d1a5 	.word	0x0800d1a5
 800a84c:	0800d1b6 	.word	0x0800d1b6

0800a850 <__mcmp>:
 800a850:	690a      	ldr	r2, [r1, #16]
 800a852:	4603      	mov	r3, r0
 800a854:	6900      	ldr	r0, [r0, #16]
 800a856:	1a80      	subs	r0, r0, r2
 800a858:	b530      	push	{r4, r5, lr}
 800a85a:	d10e      	bne.n	800a87a <__mcmp+0x2a>
 800a85c:	3314      	adds	r3, #20
 800a85e:	3114      	adds	r1, #20
 800a860:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a864:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a868:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a86c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a870:	4295      	cmp	r5, r2
 800a872:	d003      	beq.n	800a87c <__mcmp+0x2c>
 800a874:	d205      	bcs.n	800a882 <__mcmp+0x32>
 800a876:	f04f 30ff 	mov.w	r0, #4294967295
 800a87a:	bd30      	pop	{r4, r5, pc}
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d3f3      	bcc.n	800a868 <__mcmp+0x18>
 800a880:	e7fb      	b.n	800a87a <__mcmp+0x2a>
 800a882:	2001      	movs	r0, #1
 800a884:	e7f9      	b.n	800a87a <__mcmp+0x2a>
	...

0800a888 <__mdiff>:
 800a888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	4689      	mov	r9, r1
 800a88e:	4606      	mov	r6, r0
 800a890:	4611      	mov	r1, r2
 800a892:	4648      	mov	r0, r9
 800a894:	4614      	mov	r4, r2
 800a896:	f7ff ffdb 	bl	800a850 <__mcmp>
 800a89a:	1e05      	subs	r5, r0, #0
 800a89c:	d112      	bne.n	800a8c4 <__mdiff+0x3c>
 800a89e:	4629      	mov	r1, r5
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7ff fd11 	bl	800a2c8 <_Balloc>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	b928      	cbnz	r0, 800a8b6 <__mdiff+0x2e>
 800a8aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a9a8 <__mdiff+0x120>)
 800a8ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a8b0:	483e      	ldr	r0, [pc, #248]	@ (800a9ac <__mdiff+0x124>)
 800a8b2:	f001 fc4d 	bl	800c150 <__assert_func>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8bc:	4610      	mov	r0, r2
 800a8be:	b003      	add	sp, #12
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c4:	bfbc      	itt	lt
 800a8c6:	464b      	movlt	r3, r9
 800a8c8:	46a1      	movlt	r9, r4
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a8d0:	bfba      	itte	lt
 800a8d2:	461c      	movlt	r4, r3
 800a8d4:	2501      	movlt	r5, #1
 800a8d6:	2500      	movge	r5, #0
 800a8d8:	f7ff fcf6 	bl	800a2c8 <_Balloc>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	b918      	cbnz	r0, 800a8e8 <__mdiff+0x60>
 800a8e0:	4b31      	ldr	r3, [pc, #196]	@ (800a9a8 <__mdiff+0x120>)
 800a8e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a8e6:	e7e3      	b.n	800a8b0 <__mdiff+0x28>
 800a8e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a8ec:	6926      	ldr	r6, [r4, #16]
 800a8ee:	60c5      	str	r5, [r0, #12]
 800a8f0:	f109 0310 	add.w	r3, r9, #16
 800a8f4:	f109 0514 	add.w	r5, r9, #20
 800a8f8:	f104 0e14 	add.w	lr, r4, #20
 800a8fc:	f100 0b14 	add.w	fp, r0, #20
 800a900:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a904:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	46d9      	mov	r9, fp
 800a90c:	f04f 0c00 	mov.w	ip, #0
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a916:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a91a:	9301      	str	r3, [sp, #4]
 800a91c:	fa1f f38a 	uxth.w	r3, sl
 800a920:	4619      	mov	r1, r3
 800a922:	b283      	uxth	r3, r0
 800a924:	1acb      	subs	r3, r1, r3
 800a926:	0c00      	lsrs	r0, r0, #16
 800a928:	4463      	add	r3, ip
 800a92a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a92e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a932:	b29b      	uxth	r3, r3
 800a934:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a938:	4576      	cmp	r6, lr
 800a93a:	f849 3b04 	str.w	r3, [r9], #4
 800a93e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a942:	d8e5      	bhi.n	800a910 <__mdiff+0x88>
 800a944:	1b33      	subs	r3, r6, r4
 800a946:	3b15      	subs	r3, #21
 800a948:	f023 0303 	bic.w	r3, r3, #3
 800a94c:	3415      	adds	r4, #21
 800a94e:	3304      	adds	r3, #4
 800a950:	42a6      	cmp	r6, r4
 800a952:	bf38      	it	cc
 800a954:	2304      	movcc	r3, #4
 800a956:	441d      	add	r5, r3
 800a958:	445b      	add	r3, fp
 800a95a:	461e      	mov	r6, r3
 800a95c:	462c      	mov	r4, r5
 800a95e:	4544      	cmp	r4, r8
 800a960:	d30e      	bcc.n	800a980 <__mdiff+0xf8>
 800a962:	f108 0103 	add.w	r1, r8, #3
 800a966:	1b49      	subs	r1, r1, r5
 800a968:	f021 0103 	bic.w	r1, r1, #3
 800a96c:	3d03      	subs	r5, #3
 800a96e:	45a8      	cmp	r8, r5
 800a970:	bf38      	it	cc
 800a972:	2100      	movcc	r1, #0
 800a974:	440b      	add	r3, r1
 800a976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a97a:	b191      	cbz	r1, 800a9a2 <__mdiff+0x11a>
 800a97c:	6117      	str	r7, [r2, #16]
 800a97e:	e79d      	b.n	800a8bc <__mdiff+0x34>
 800a980:	f854 1b04 	ldr.w	r1, [r4], #4
 800a984:	46e6      	mov	lr, ip
 800a986:	0c08      	lsrs	r0, r1, #16
 800a988:	fa1c fc81 	uxtah	ip, ip, r1
 800a98c:	4471      	add	r1, lr
 800a98e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a992:	b289      	uxth	r1, r1
 800a994:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a998:	f846 1b04 	str.w	r1, [r6], #4
 800a99c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9a0:	e7dd      	b.n	800a95e <__mdiff+0xd6>
 800a9a2:	3f01      	subs	r7, #1
 800a9a4:	e7e7      	b.n	800a976 <__mdiff+0xee>
 800a9a6:	bf00      	nop
 800a9a8:	0800d1a5 	.word	0x0800d1a5
 800a9ac:	0800d1b6 	.word	0x0800d1b6

0800a9b0 <__ulp>:
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	ed8d 0b00 	vstr	d0, [sp]
 800a9b6:	9a01      	ldr	r2, [sp, #4]
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f8 <__ulp+0x48>)
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc08      	bgt.n	800a9d6 <__ulp+0x26>
 800a9c4:	425b      	negs	r3, r3
 800a9c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a9ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9ce:	da04      	bge.n	800a9da <__ulp+0x2a>
 800a9d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a9d4:	4113      	asrs	r3, r2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	e008      	b.n	800a9ec <__ulp+0x3c>
 800a9da:	f1a2 0314 	sub.w	r3, r2, #20
 800a9de:	2b1e      	cmp	r3, #30
 800a9e0:	bfda      	itte	le
 800a9e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a9e6:	40da      	lsrle	r2, r3
 800a9e8:	2201      	movgt	r2, #1
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	ec41 0b10 	vmov	d0, r0, r1
 800a9f4:	b002      	add	sp, #8
 800a9f6:	4770      	bx	lr
 800a9f8:	7ff00000 	.word	0x7ff00000

0800a9fc <__b2d>:
 800a9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa00:	6906      	ldr	r6, [r0, #16]
 800aa02:	f100 0814 	add.w	r8, r0, #20
 800aa06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa0a:	1f37      	subs	r7, r6, #4
 800aa0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa10:	4610      	mov	r0, r2
 800aa12:	f7ff fd4b 	bl	800a4ac <__hi0bits>
 800aa16:	f1c0 0320 	rsb	r3, r0, #32
 800aa1a:	280a      	cmp	r0, #10
 800aa1c:	600b      	str	r3, [r1, #0]
 800aa1e:	491b      	ldr	r1, [pc, #108]	@ (800aa8c <__b2d+0x90>)
 800aa20:	dc15      	bgt.n	800aa4e <__b2d+0x52>
 800aa22:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa26:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa2a:	45b8      	cmp	r8, r7
 800aa2c:	ea43 0501 	orr.w	r5, r3, r1
 800aa30:	bf34      	ite	cc
 800aa32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa36:	2300      	movcs	r3, #0
 800aa38:	3015      	adds	r0, #21
 800aa3a:	fa02 f000 	lsl.w	r0, r2, r0
 800aa3e:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa42:	4303      	orrs	r3, r0
 800aa44:	461c      	mov	r4, r3
 800aa46:	ec45 4b10 	vmov	d0, r4, r5
 800aa4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa4e:	45b8      	cmp	r8, r7
 800aa50:	bf3a      	itte	cc
 800aa52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa56:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa5a:	2300      	movcs	r3, #0
 800aa5c:	380b      	subs	r0, #11
 800aa5e:	d012      	beq.n	800aa86 <__b2d+0x8a>
 800aa60:	f1c0 0120 	rsb	r1, r0, #32
 800aa64:	fa23 f401 	lsr.w	r4, r3, r1
 800aa68:	4082      	lsls	r2, r0
 800aa6a:	4322      	orrs	r2, r4
 800aa6c:	4547      	cmp	r7, r8
 800aa6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aa72:	bf8c      	ite	hi
 800aa74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa78:	2200      	movls	r2, #0
 800aa7a:	4083      	lsls	r3, r0
 800aa7c:	40ca      	lsrs	r2, r1
 800aa7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aa82:	4313      	orrs	r3, r2
 800aa84:	e7de      	b.n	800aa44 <__b2d+0x48>
 800aa86:	ea42 0501 	orr.w	r5, r2, r1
 800aa8a:	e7db      	b.n	800aa44 <__b2d+0x48>
 800aa8c:	3ff00000 	.word	0x3ff00000

0800aa90 <__d2b>:
 800aa90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	460f      	mov	r7, r1
 800aa96:	2101      	movs	r1, #1
 800aa98:	ec59 8b10 	vmov	r8, r9, d0
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	f7ff fc13 	bl	800a2c8 <_Balloc>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	b930      	cbnz	r0, 800aab4 <__d2b+0x24>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	4b23      	ldr	r3, [pc, #140]	@ (800ab38 <__d2b+0xa8>)
 800aaaa:	4824      	ldr	r0, [pc, #144]	@ (800ab3c <__d2b+0xac>)
 800aaac:	f240 310f 	movw	r1, #783	@ 0x30f
 800aab0:	f001 fb4e 	bl	800c150 <__assert_func>
 800aab4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aabc:	b10d      	cbz	r5, 800aac2 <__d2b+0x32>
 800aabe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	f1b8 0300 	subs.w	r3, r8, #0
 800aac8:	d023      	beq.n	800ab12 <__d2b+0x82>
 800aaca:	4668      	mov	r0, sp
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	f7ff fd0c 	bl	800a4ea <__lo0bits>
 800aad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aad6:	b1d0      	cbz	r0, 800ab0e <__d2b+0x7e>
 800aad8:	f1c0 0320 	rsb	r3, r0, #32
 800aadc:	fa02 f303 	lsl.w	r3, r2, r3
 800aae0:	430b      	orrs	r3, r1
 800aae2:	40c2      	lsrs	r2, r0
 800aae4:	6163      	str	r3, [r4, #20]
 800aae6:	9201      	str	r2, [sp, #4]
 800aae8:	9b01      	ldr	r3, [sp, #4]
 800aaea:	61a3      	str	r3, [r4, #24]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bf0c      	ite	eq
 800aaf0:	2201      	moveq	r2, #1
 800aaf2:	2202      	movne	r2, #2
 800aaf4:	6122      	str	r2, [r4, #16]
 800aaf6:	b1a5      	cbz	r5, 800ab22 <__d2b+0x92>
 800aaf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aafc:	4405      	add	r5, r0
 800aafe:	603d      	str	r5, [r7, #0]
 800ab00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab04:	6030      	str	r0, [r6, #0]
 800ab06:	4620      	mov	r0, r4
 800ab08:	b003      	add	sp, #12
 800ab0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab0e:	6161      	str	r1, [r4, #20]
 800ab10:	e7ea      	b.n	800aae8 <__d2b+0x58>
 800ab12:	a801      	add	r0, sp, #4
 800ab14:	f7ff fce9 	bl	800a4ea <__lo0bits>
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	6163      	str	r3, [r4, #20]
 800ab1c:	3020      	adds	r0, #32
 800ab1e:	2201      	movs	r2, #1
 800ab20:	e7e8      	b.n	800aaf4 <__d2b+0x64>
 800ab22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab2a:	6038      	str	r0, [r7, #0]
 800ab2c:	6918      	ldr	r0, [r3, #16]
 800ab2e:	f7ff fcbd 	bl	800a4ac <__hi0bits>
 800ab32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab36:	e7e5      	b.n	800ab04 <__d2b+0x74>
 800ab38:	0800d1a5 	.word	0x0800d1a5
 800ab3c:	0800d1b6 	.word	0x0800d1b6

0800ab40 <__ratio>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	b085      	sub	sp, #20
 800ab46:	e9cd 1000 	strd	r1, r0, [sp]
 800ab4a:	a902      	add	r1, sp, #8
 800ab4c:	f7ff ff56 	bl	800a9fc <__b2d>
 800ab50:	9800      	ldr	r0, [sp, #0]
 800ab52:	a903      	add	r1, sp, #12
 800ab54:	ec55 4b10 	vmov	r4, r5, d0
 800ab58:	f7ff ff50 	bl	800a9fc <__b2d>
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	6919      	ldr	r1, [r3, #16]
 800ab60:	9b00      	ldr	r3, [sp, #0]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	1ac9      	subs	r1, r1, r3
 800ab66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab6a:	1a9b      	subs	r3, r3, r2
 800ab6c:	ec5b ab10 	vmov	sl, fp, d0
 800ab70:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bfce      	itee	gt
 800ab78:	462a      	movgt	r2, r5
 800ab7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab7e:	465a      	movle	r2, fp
 800ab80:	462f      	mov	r7, r5
 800ab82:	46d9      	mov	r9, fp
 800ab84:	bfcc      	ite	gt
 800ab86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab8a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ab8e:	464b      	mov	r3, r9
 800ab90:	4652      	mov	r2, sl
 800ab92:	4620      	mov	r0, r4
 800ab94:	4639      	mov	r1, r7
 800ab96:	f7f5 fe79 	bl	800088c <__aeabi_ddiv>
 800ab9a:	ec41 0b10 	vmov	d0, r0, r1
 800ab9e:	b005      	add	sp, #20
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aba4 <__copybits>:
 800aba4:	3901      	subs	r1, #1
 800aba6:	b570      	push	{r4, r5, r6, lr}
 800aba8:	1149      	asrs	r1, r1, #5
 800abaa:	6914      	ldr	r4, [r2, #16]
 800abac:	3101      	adds	r1, #1
 800abae:	f102 0314 	add.w	r3, r2, #20
 800abb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abba:	1f05      	subs	r5, r0, #4
 800abbc:	42a3      	cmp	r3, r4
 800abbe:	d30c      	bcc.n	800abda <__copybits+0x36>
 800abc0:	1aa3      	subs	r3, r4, r2
 800abc2:	3b11      	subs	r3, #17
 800abc4:	f023 0303 	bic.w	r3, r3, #3
 800abc8:	3211      	adds	r2, #17
 800abca:	42a2      	cmp	r2, r4
 800abcc:	bf88      	it	hi
 800abce:	2300      	movhi	r3, #0
 800abd0:	4418      	add	r0, r3
 800abd2:	2300      	movs	r3, #0
 800abd4:	4288      	cmp	r0, r1
 800abd6:	d305      	bcc.n	800abe4 <__copybits+0x40>
 800abd8:	bd70      	pop	{r4, r5, r6, pc}
 800abda:	f853 6b04 	ldr.w	r6, [r3], #4
 800abde:	f845 6f04 	str.w	r6, [r5, #4]!
 800abe2:	e7eb      	b.n	800abbc <__copybits+0x18>
 800abe4:	f840 3b04 	str.w	r3, [r0], #4
 800abe8:	e7f4      	b.n	800abd4 <__copybits+0x30>

0800abea <__any_on>:
 800abea:	f100 0214 	add.w	r2, r0, #20
 800abee:	6900      	ldr	r0, [r0, #16]
 800abf0:	114b      	asrs	r3, r1, #5
 800abf2:	4298      	cmp	r0, r3
 800abf4:	b510      	push	{r4, lr}
 800abf6:	db11      	blt.n	800ac1c <__any_on+0x32>
 800abf8:	dd0a      	ble.n	800ac10 <__any_on+0x26>
 800abfa:	f011 011f 	ands.w	r1, r1, #31
 800abfe:	d007      	beq.n	800ac10 <__any_on+0x26>
 800ac00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac04:	fa24 f001 	lsr.w	r0, r4, r1
 800ac08:	fa00 f101 	lsl.w	r1, r0, r1
 800ac0c:	428c      	cmp	r4, r1
 800ac0e:	d10b      	bne.n	800ac28 <__any_on+0x3e>
 800ac10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d803      	bhi.n	800ac20 <__any_on+0x36>
 800ac18:	2000      	movs	r0, #0
 800ac1a:	bd10      	pop	{r4, pc}
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	e7f7      	b.n	800ac10 <__any_on+0x26>
 800ac20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac24:	2900      	cmp	r1, #0
 800ac26:	d0f5      	beq.n	800ac14 <__any_on+0x2a>
 800ac28:	2001      	movs	r0, #1
 800ac2a:	e7f6      	b.n	800ac1a <__any_on+0x30>

0800ac2c <sulp>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	4604      	mov	r4, r0
 800ac30:	460d      	mov	r5, r1
 800ac32:	ec45 4b10 	vmov	d0, r4, r5
 800ac36:	4616      	mov	r6, r2
 800ac38:	f7ff feba 	bl	800a9b0 <__ulp>
 800ac3c:	ec51 0b10 	vmov	r0, r1, d0
 800ac40:	b17e      	cbz	r6, 800ac62 <sulp+0x36>
 800ac42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac46:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	dd09      	ble.n	800ac62 <sulp+0x36>
 800ac4e:	051b      	lsls	r3, r3, #20
 800ac50:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ac54:	2400      	movs	r4, #0
 800ac56:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ac5a:	4622      	mov	r2, r4
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	f7f5 fceb 	bl	8000638 <__aeabi_dmul>
 800ac62:	ec41 0b10 	vmov	d0, r0, r1
 800ac66:	bd70      	pop	{r4, r5, r6, pc}

0800ac68 <_strtod_l>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	b09f      	sub	sp, #124	@ 0x7c
 800ac6e:	460c      	mov	r4, r1
 800ac70:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ac72:	2200      	movs	r2, #0
 800ac74:	921a      	str	r2, [sp, #104]	@ 0x68
 800ac76:	9005      	str	r0, [sp, #20]
 800ac78:	f04f 0a00 	mov.w	sl, #0
 800ac7c:	f04f 0b00 	mov.w	fp, #0
 800ac80:	460a      	mov	r2, r1
 800ac82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac84:	7811      	ldrb	r1, [r2, #0]
 800ac86:	292b      	cmp	r1, #43	@ 0x2b
 800ac88:	d04a      	beq.n	800ad20 <_strtod_l+0xb8>
 800ac8a:	d838      	bhi.n	800acfe <_strtod_l+0x96>
 800ac8c:	290d      	cmp	r1, #13
 800ac8e:	d832      	bhi.n	800acf6 <_strtod_l+0x8e>
 800ac90:	2908      	cmp	r1, #8
 800ac92:	d832      	bhi.n	800acfa <_strtod_l+0x92>
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d03b      	beq.n	800ad10 <_strtod_l+0xa8>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ac9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ac9e:	782a      	ldrb	r2, [r5, #0]
 800aca0:	2a30      	cmp	r2, #48	@ 0x30
 800aca2:	f040 80b3 	bne.w	800ae0c <_strtod_l+0x1a4>
 800aca6:	786a      	ldrb	r2, [r5, #1]
 800aca8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acac:	2a58      	cmp	r2, #88	@ 0x58
 800acae:	d16e      	bne.n	800ad8e <_strtod_l+0x126>
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	ab1a      	add	r3, sp, #104	@ 0x68
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	4a8e      	ldr	r2, [pc, #568]	@ (800aef4 <_strtod_l+0x28c>)
 800acbc:	9805      	ldr	r0, [sp, #20]
 800acbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800acc0:	a919      	add	r1, sp, #100	@ 0x64
 800acc2:	f001 fadf 	bl	800c284 <__gethex>
 800acc6:	f010 060f 	ands.w	r6, r0, #15
 800acca:	4604      	mov	r4, r0
 800accc:	d005      	beq.n	800acda <_strtod_l+0x72>
 800acce:	2e06      	cmp	r6, #6
 800acd0:	d128      	bne.n	800ad24 <_strtod_l+0xbc>
 800acd2:	3501      	adds	r5, #1
 800acd4:	2300      	movs	r3, #0
 800acd6:	9519      	str	r5, [sp, #100]	@ 0x64
 800acd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f040 858e 	bne.w	800b7fe <_strtod_l+0xb96>
 800ace2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace4:	b1cb      	cbz	r3, 800ad1a <_strtod_l+0xb2>
 800ace6:	4652      	mov	r2, sl
 800ace8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800acec:	ec43 2b10 	vmov	d0, r2, r3
 800acf0:	b01f      	add	sp, #124	@ 0x7c
 800acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf6:	2920      	cmp	r1, #32
 800acf8:	d1ce      	bne.n	800ac98 <_strtod_l+0x30>
 800acfa:	3201      	adds	r2, #1
 800acfc:	e7c1      	b.n	800ac82 <_strtod_l+0x1a>
 800acfe:	292d      	cmp	r1, #45	@ 0x2d
 800ad00:	d1ca      	bne.n	800ac98 <_strtod_l+0x30>
 800ad02:	2101      	movs	r1, #1
 800ad04:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad06:	1c51      	adds	r1, r2, #1
 800ad08:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad0a:	7852      	ldrb	r2, [r2, #1]
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	d1c5      	bne.n	800ac9c <_strtod_l+0x34>
 800ad10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad12:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f040 8570 	bne.w	800b7fa <_strtod_l+0xb92>
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	e7e5      	b.n	800acec <_strtod_l+0x84>
 800ad20:	2100      	movs	r1, #0
 800ad22:	e7ef      	b.n	800ad04 <_strtod_l+0x9c>
 800ad24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad26:	b13a      	cbz	r2, 800ad38 <_strtod_l+0xd0>
 800ad28:	2135      	movs	r1, #53	@ 0x35
 800ad2a:	a81c      	add	r0, sp, #112	@ 0x70
 800ad2c:	f7ff ff3a 	bl	800aba4 <__copybits>
 800ad30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad32:	9805      	ldr	r0, [sp, #20]
 800ad34:	f7ff fb08 	bl	800a348 <_Bfree>
 800ad38:	3e01      	subs	r6, #1
 800ad3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ad3c:	2e04      	cmp	r6, #4
 800ad3e:	d806      	bhi.n	800ad4e <_strtod_l+0xe6>
 800ad40:	e8df f006 	tbb	[pc, r6]
 800ad44:	201d0314 	.word	0x201d0314
 800ad48:	14          	.byte	0x14
 800ad49:	00          	.byte	0x00
 800ad4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ad4e:	05e1      	lsls	r1, r4, #23
 800ad50:	bf48      	it	mi
 800ad52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ad56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad5a:	0d1b      	lsrs	r3, r3, #20
 800ad5c:	051b      	lsls	r3, r3, #20
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1bb      	bne.n	800acda <_strtod_l+0x72>
 800ad62:	f7fe fb23 	bl	80093ac <__errno>
 800ad66:	2322      	movs	r3, #34	@ 0x22
 800ad68:	6003      	str	r3, [r0, #0]
 800ad6a:	e7b6      	b.n	800acda <_strtod_l+0x72>
 800ad6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ad70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ad74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ad78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ad7c:	e7e7      	b.n	800ad4e <_strtod_l+0xe6>
 800ad7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800aefc <_strtod_l+0x294>
 800ad82:	e7e4      	b.n	800ad4e <_strtod_l+0xe6>
 800ad84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ad88:	f04f 3aff 	mov.w	sl, #4294967295
 800ad8c:	e7df      	b.n	800ad4e <_strtod_l+0xe6>
 800ad8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	2b30      	cmp	r3, #48	@ 0x30
 800ad98:	d0f9      	beq.n	800ad8e <_strtod_l+0x126>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d09d      	beq.n	800acda <_strtod_l+0x72>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ada2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ada4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ada6:	2300      	movs	r3, #0
 800ada8:	9308      	str	r3, [sp, #32]
 800adaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800adac:	461f      	mov	r7, r3
 800adae:	220a      	movs	r2, #10
 800adb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800adb2:	7805      	ldrb	r5, [r0, #0]
 800adb4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800adb8:	b2d9      	uxtb	r1, r3
 800adba:	2909      	cmp	r1, #9
 800adbc:	d928      	bls.n	800ae10 <_strtod_l+0x1a8>
 800adbe:	494e      	ldr	r1, [pc, #312]	@ (800aef8 <_strtod_l+0x290>)
 800adc0:	2201      	movs	r2, #1
 800adc2:	f001 f979 	bl	800c0b8 <strncmp>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d032      	beq.n	800ae30 <_strtod_l+0x1c8>
 800adca:	2000      	movs	r0, #0
 800adcc:	462a      	mov	r2, r5
 800adce:	4681      	mov	r9, r0
 800add0:	463d      	mov	r5, r7
 800add2:	4603      	mov	r3, r0
 800add4:	2a65      	cmp	r2, #101	@ 0x65
 800add6:	d001      	beq.n	800addc <_strtod_l+0x174>
 800add8:	2a45      	cmp	r2, #69	@ 0x45
 800adda:	d114      	bne.n	800ae06 <_strtod_l+0x19e>
 800addc:	b91d      	cbnz	r5, 800ade6 <_strtod_l+0x17e>
 800adde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade0:	4302      	orrs	r2, r0
 800ade2:	d095      	beq.n	800ad10 <_strtod_l+0xa8>
 800ade4:	2500      	movs	r5, #0
 800ade6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ade8:	1c62      	adds	r2, r4, #1
 800adea:	9219      	str	r2, [sp, #100]	@ 0x64
 800adec:	7862      	ldrb	r2, [r4, #1]
 800adee:	2a2b      	cmp	r2, #43	@ 0x2b
 800adf0:	d077      	beq.n	800aee2 <_strtod_l+0x27a>
 800adf2:	2a2d      	cmp	r2, #45	@ 0x2d
 800adf4:	d07b      	beq.n	800aeee <_strtod_l+0x286>
 800adf6:	f04f 0c00 	mov.w	ip, #0
 800adfa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800adfe:	2909      	cmp	r1, #9
 800ae00:	f240 8082 	bls.w	800af08 <_strtod_l+0x2a0>
 800ae04:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae06:	f04f 0800 	mov.w	r8, #0
 800ae0a:	e0a2      	b.n	800af52 <_strtod_l+0x2ea>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e7c7      	b.n	800ada0 <_strtod_l+0x138>
 800ae10:	2f08      	cmp	r7, #8
 800ae12:	bfd5      	itete	le
 800ae14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ae16:	9908      	ldrgt	r1, [sp, #32]
 800ae18:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ae20:	f100 0001 	add.w	r0, r0, #1
 800ae24:	bfd4      	ite	le
 800ae26:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ae28:	9308      	strgt	r3, [sp, #32]
 800ae2a:	3701      	adds	r7, #1
 800ae2c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae2e:	e7bf      	b.n	800adb0 <_strtod_l+0x148>
 800ae30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae36:	785a      	ldrb	r2, [r3, #1]
 800ae38:	b37f      	cbz	r7, 800ae9a <_strtod_l+0x232>
 800ae3a:	4681      	mov	r9, r0
 800ae3c:	463d      	mov	r5, r7
 800ae3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d912      	bls.n	800ae6c <_strtod_l+0x204>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e7c4      	b.n	800add4 <_strtod_l+0x16c>
 800ae4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae50:	785a      	ldrb	r2, [r3, #1]
 800ae52:	3001      	adds	r0, #1
 800ae54:	2a30      	cmp	r2, #48	@ 0x30
 800ae56:	d0f8      	beq.n	800ae4a <_strtod_l+0x1e2>
 800ae58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	f200 84d3 	bhi.w	800b808 <_strtod_l+0xba0>
 800ae62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae64:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae66:	4681      	mov	r9, r0
 800ae68:	2000      	movs	r0, #0
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	3a30      	subs	r2, #48	@ 0x30
 800ae6e:	f100 0301 	add.w	r3, r0, #1
 800ae72:	d02a      	beq.n	800aeca <_strtod_l+0x262>
 800ae74:	4499      	add	r9, r3
 800ae76:	eb00 0c05 	add.w	ip, r0, r5
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	210a      	movs	r1, #10
 800ae7e:	4563      	cmp	r3, ip
 800ae80:	d10d      	bne.n	800ae9e <_strtod_l+0x236>
 800ae82:	1c69      	adds	r1, r5, #1
 800ae84:	4401      	add	r1, r0
 800ae86:	4428      	add	r0, r5
 800ae88:	2808      	cmp	r0, #8
 800ae8a:	dc16      	bgt.n	800aeba <_strtod_l+0x252>
 800ae8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ae8e:	230a      	movs	r3, #10
 800ae90:	fb03 2300 	mla	r3, r3, r0, r2
 800ae94:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae96:	2300      	movs	r3, #0
 800ae98:	e018      	b.n	800aecc <_strtod_l+0x264>
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	e7da      	b.n	800ae54 <_strtod_l+0x1ec>
 800ae9e:	2b08      	cmp	r3, #8
 800aea0:	f103 0301 	add.w	r3, r3, #1
 800aea4:	dc03      	bgt.n	800aeae <_strtod_l+0x246>
 800aea6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aea8:	434e      	muls	r6, r1
 800aeaa:	960a      	str	r6, [sp, #40]	@ 0x28
 800aeac:	e7e7      	b.n	800ae7e <_strtod_l+0x216>
 800aeae:	2b10      	cmp	r3, #16
 800aeb0:	bfde      	ittt	le
 800aeb2:	9e08      	ldrle	r6, [sp, #32]
 800aeb4:	434e      	mulle	r6, r1
 800aeb6:	9608      	strle	r6, [sp, #32]
 800aeb8:	e7e1      	b.n	800ae7e <_strtod_l+0x216>
 800aeba:	280f      	cmp	r0, #15
 800aebc:	dceb      	bgt.n	800ae96 <_strtod_l+0x22e>
 800aebe:	9808      	ldr	r0, [sp, #32]
 800aec0:	230a      	movs	r3, #10
 800aec2:	fb03 2300 	mla	r3, r3, r0, r2
 800aec6:	9308      	str	r3, [sp, #32]
 800aec8:	e7e5      	b.n	800ae96 <_strtod_l+0x22e>
 800aeca:	4629      	mov	r1, r5
 800aecc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aece:	1c50      	adds	r0, r2, #1
 800aed0:	9019      	str	r0, [sp, #100]	@ 0x64
 800aed2:	7852      	ldrb	r2, [r2, #1]
 800aed4:	4618      	mov	r0, r3
 800aed6:	460d      	mov	r5, r1
 800aed8:	e7b1      	b.n	800ae3e <_strtod_l+0x1d6>
 800aeda:	f04f 0900 	mov.w	r9, #0
 800aede:	2301      	movs	r3, #1
 800aee0:	e77d      	b.n	800adde <_strtod_l+0x176>
 800aee2:	f04f 0c00 	mov.w	ip, #0
 800aee6:	1ca2      	adds	r2, r4, #2
 800aee8:	9219      	str	r2, [sp, #100]	@ 0x64
 800aeea:	78a2      	ldrb	r2, [r4, #2]
 800aeec:	e785      	b.n	800adfa <_strtod_l+0x192>
 800aeee:	f04f 0c01 	mov.w	ip, #1
 800aef2:	e7f8      	b.n	800aee6 <_strtod_l+0x27e>
 800aef4:	0800d328 	.word	0x0800d328
 800aef8:	0800d310 	.word	0x0800d310
 800aefc:	7ff00000 	.word	0x7ff00000
 800af00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af02:	1c51      	adds	r1, r2, #1
 800af04:	9119      	str	r1, [sp, #100]	@ 0x64
 800af06:	7852      	ldrb	r2, [r2, #1]
 800af08:	2a30      	cmp	r2, #48	@ 0x30
 800af0a:	d0f9      	beq.n	800af00 <_strtod_l+0x298>
 800af0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800af10:	2908      	cmp	r1, #8
 800af12:	f63f af78 	bhi.w	800ae06 <_strtod_l+0x19e>
 800af16:	3a30      	subs	r2, #48	@ 0x30
 800af18:	920e      	str	r2, [sp, #56]	@ 0x38
 800af1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af1e:	f04f 080a 	mov.w	r8, #10
 800af22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af24:	1c56      	adds	r6, r2, #1
 800af26:	9619      	str	r6, [sp, #100]	@ 0x64
 800af28:	7852      	ldrb	r2, [r2, #1]
 800af2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800af2e:	f1be 0f09 	cmp.w	lr, #9
 800af32:	d939      	bls.n	800afa8 <_strtod_l+0x340>
 800af34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800af36:	1a76      	subs	r6, r6, r1
 800af38:	2e08      	cmp	r6, #8
 800af3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800af3e:	dc03      	bgt.n	800af48 <_strtod_l+0x2e0>
 800af40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af42:	4588      	cmp	r8, r1
 800af44:	bfa8      	it	ge
 800af46:	4688      	movge	r8, r1
 800af48:	f1bc 0f00 	cmp.w	ip, #0
 800af4c:	d001      	beq.n	800af52 <_strtod_l+0x2ea>
 800af4e:	f1c8 0800 	rsb	r8, r8, #0
 800af52:	2d00      	cmp	r5, #0
 800af54:	d14e      	bne.n	800aff4 <_strtod_l+0x38c>
 800af56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af58:	4308      	orrs	r0, r1
 800af5a:	f47f aebe 	bne.w	800acda <_strtod_l+0x72>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f47f aed6 	bne.w	800ad10 <_strtod_l+0xa8>
 800af64:	2a69      	cmp	r2, #105	@ 0x69
 800af66:	d028      	beq.n	800afba <_strtod_l+0x352>
 800af68:	dc25      	bgt.n	800afb6 <_strtod_l+0x34e>
 800af6a:	2a49      	cmp	r2, #73	@ 0x49
 800af6c:	d025      	beq.n	800afba <_strtod_l+0x352>
 800af6e:	2a4e      	cmp	r2, #78	@ 0x4e
 800af70:	f47f aece 	bne.w	800ad10 <_strtod_l+0xa8>
 800af74:	499b      	ldr	r1, [pc, #620]	@ (800b1e4 <_strtod_l+0x57c>)
 800af76:	a819      	add	r0, sp, #100	@ 0x64
 800af78:	f001 fba6 	bl	800c6c8 <__match>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	f43f aec7 	beq.w	800ad10 <_strtod_l+0xa8>
 800af82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2b28      	cmp	r3, #40	@ 0x28
 800af88:	d12e      	bne.n	800afe8 <_strtod_l+0x380>
 800af8a:	4997      	ldr	r1, [pc, #604]	@ (800b1e8 <_strtod_l+0x580>)
 800af8c:	aa1c      	add	r2, sp, #112	@ 0x70
 800af8e:	a819      	add	r0, sp, #100	@ 0x64
 800af90:	f001 fbae 	bl	800c6f0 <__hexnan>
 800af94:	2805      	cmp	r0, #5
 800af96:	d127      	bne.n	800afe8 <_strtod_l+0x380>
 800af98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800af9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800af9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800afa2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800afa6:	e698      	b.n	800acda <_strtod_l+0x72>
 800afa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800afaa:	fb08 2101 	mla	r1, r8, r1, r2
 800afae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800afb2:	920e      	str	r2, [sp, #56]	@ 0x38
 800afb4:	e7b5      	b.n	800af22 <_strtod_l+0x2ba>
 800afb6:	2a6e      	cmp	r2, #110	@ 0x6e
 800afb8:	e7da      	b.n	800af70 <_strtod_l+0x308>
 800afba:	498c      	ldr	r1, [pc, #560]	@ (800b1ec <_strtod_l+0x584>)
 800afbc:	a819      	add	r0, sp, #100	@ 0x64
 800afbe:	f001 fb83 	bl	800c6c8 <__match>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	f43f aea4 	beq.w	800ad10 <_strtod_l+0xa8>
 800afc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afca:	4989      	ldr	r1, [pc, #548]	@ (800b1f0 <_strtod_l+0x588>)
 800afcc:	3b01      	subs	r3, #1
 800afce:	a819      	add	r0, sp, #100	@ 0x64
 800afd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800afd2:	f001 fb79 	bl	800c6c8 <__match>
 800afd6:	b910      	cbnz	r0, 800afde <_strtod_l+0x376>
 800afd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afda:	3301      	adds	r3, #1
 800afdc:	9319      	str	r3, [sp, #100]	@ 0x64
 800afde:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b200 <_strtod_l+0x598>
 800afe2:	f04f 0a00 	mov.w	sl, #0
 800afe6:	e678      	b.n	800acda <_strtod_l+0x72>
 800afe8:	4882      	ldr	r0, [pc, #520]	@ (800b1f4 <_strtod_l+0x58c>)
 800afea:	f001 f8a9 	bl	800c140 <nan>
 800afee:	ec5b ab10 	vmov	sl, fp, d0
 800aff2:	e672      	b.n	800acda <_strtod_l+0x72>
 800aff4:	eba8 0309 	sub.w	r3, r8, r9
 800aff8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800affa:	9309      	str	r3, [sp, #36]	@ 0x24
 800affc:	2f00      	cmp	r7, #0
 800affe:	bf08      	it	eq
 800b000:	462f      	moveq	r7, r5
 800b002:	2d10      	cmp	r5, #16
 800b004:	462c      	mov	r4, r5
 800b006:	bfa8      	it	ge
 800b008:	2410      	movge	r4, #16
 800b00a:	f7f5 fa9b 	bl	8000544 <__aeabi_ui2d>
 800b00e:	2d09      	cmp	r5, #9
 800b010:	4682      	mov	sl, r0
 800b012:	468b      	mov	fp, r1
 800b014:	dc13      	bgt.n	800b03e <_strtod_l+0x3d6>
 800b016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f43f ae5e 	beq.w	800acda <_strtod_l+0x72>
 800b01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b020:	dd78      	ble.n	800b114 <_strtod_l+0x4ac>
 800b022:	2b16      	cmp	r3, #22
 800b024:	dc5f      	bgt.n	800b0e6 <_strtod_l+0x47e>
 800b026:	4974      	ldr	r1, [pc, #464]	@ (800b1f8 <_strtod_l+0x590>)
 800b028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b02c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b030:	4652      	mov	r2, sl
 800b032:	465b      	mov	r3, fp
 800b034:	f7f5 fb00 	bl	8000638 <__aeabi_dmul>
 800b038:	4682      	mov	sl, r0
 800b03a:	468b      	mov	fp, r1
 800b03c:	e64d      	b.n	800acda <_strtod_l+0x72>
 800b03e:	4b6e      	ldr	r3, [pc, #440]	@ (800b1f8 <_strtod_l+0x590>)
 800b040:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b044:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b048:	f7f5 faf6 	bl	8000638 <__aeabi_dmul>
 800b04c:	4682      	mov	sl, r0
 800b04e:	9808      	ldr	r0, [sp, #32]
 800b050:	468b      	mov	fp, r1
 800b052:	f7f5 fa77 	bl	8000544 <__aeabi_ui2d>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4650      	mov	r0, sl
 800b05c:	4659      	mov	r1, fp
 800b05e:	f7f5 f935 	bl	80002cc <__adddf3>
 800b062:	2d0f      	cmp	r5, #15
 800b064:	4682      	mov	sl, r0
 800b066:	468b      	mov	fp, r1
 800b068:	ddd5      	ble.n	800b016 <_strtod_l+0x3ae>
 800b06a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06c:	1b2c      	subs	r4, r5, r4
 800b06e:	441c      	add	r4, r3
 800b070:	2c00      	cmp	r4, #0
 800b072:	f340 8096 	ble.w	800b1a2 <_strtod_l+0x53a>
 800b076:	f014 030f 	ands.w	r3, r4, #15
 800b07a:	d00a      	beq.n	800b092 <_strtod_l+0x42a>
 800b07c:	495e      	ldr	r1, [pc, #376]	@ (800b1f8 <_strtod_l+0x590>)
 800b07e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b082:	4652      	mov	r2, sl
 800b084:	465b      	mov	r3, fp
 800b086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08a:	f7f5 fad5 	bl	8000638 <__aeabi_dmul>
 800b08e:	4682      	mov	sl, r0
 800b090:	468b      	mov	fp, r1
 800b092:	f034 040f 	bics.w	r4, r4, #15
 800b096:	d073      	beq.n	800b180 <_strtod_l+0x518>
 800b098:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b09c:	dd48      	ble.n	800b130 <_strtod_l+0x4c8>
 800b09e:	2400      	movs	r4, #0
 800b0a0:	46a0      	mov	r8, r4
 800b0a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0a4:	46a1      	mov	r9, r4
 800b0a6:	9a05      	ldr	r2, [sp, #20]
 800b0a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b200 <_strtod_l+0x598>
 800b0ac:	2322      	movs	r3, #34	@ 0x22
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	f04f 0a00 	mov.w	sl, #0
 800b0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f43f ae0f 	beq.w	800acda <_strtod_l+0x72>
 800b0bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0be:	9805      	ldr	r0, [sp, #20]
 800b0c0:	f7ff f942 	bl	800a348 <_Bfree>
 800b0c4:	9805      	ldr	r0, [sp, #20]
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	f7ff f93e 	bl	800a348 <_Bfree>
 800b0cc:	9805      	ldr	r0, [sp, #20]
 800b0ce:	4641      	mov	r1, r8
 800b0d0:	f7ff f93a 	bl	800a348 <_Bfree>
 800b0d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0d6:	9805      	ldr	r0, [sp, #20]
 800b0d8:	f7ff f936 	bl	800a348 <_Bfree>
 800b0dc:	9805      	ldr	r0, [sp, #20]
 800b0de:	4621      	mov	r1, r4
 800b0e0:	f7ff f932 	bl	800a348 <_Bfree>
 800b0e4:	e5f9      	b.n	800acda <_strtod_l+0x72>
 800b0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	dbbc      	blt.n	800b06a <_strtod_l+0x402>
 800b0f0:	4c41      	ldr	r4, [pc, #260]	@ (800b1f8 <_strtod_l+0x590>)
 800b0f2:	f1c5 050f 	rsb	r5, r5, #15
 800b0f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b0fa:	4652      	mov	r2, sl
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b102:	f7f5 fa99 	bl	8000638 <__aeabi_dmul>
 800b106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b108:	1b5d      	subs	r5, r3, r5
 800b10a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b10e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b112:	e78f      	b.n	800b034 <_strtod_l+0x3cc>
 800b114:	3316      	adds	r3, #22
 800b116:	dba8      	blt.n	800b06a <_strtod_l+0x402>
 800b118:	4b37      	ldr	r3, [pc, #220]	@ (800b1f8 <_strtod_l+0x590>)
 800b11a:	eba9 0808 	sub.w	r8, r9, r8
 800b11e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b122:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b126:	4650      	mov	r0, sl
 800b128:	4659      	mov	r1, fp
 800b12a:	f7f5 fbaf 	bl	800088c <__aeabi_ddiv>
 800b12e:	e783      	b.n	800b038 <_strtod_l+0x3d0>
 800b130:	4b32      	ldr	r3, [pc, #200]	@ (800b1fc <_strtod_l+0x594>)
 800b132:	9308      	str	r3, [sp, #32]
 800b134:	2300      	movs	r3, #0
 800b136:	1124      	asrs	r4, r4, #4
 800b138:	4650      	mov	r0, sl
 800b13a:	4659      	mov	r1, fp
 800b13c:	461e      	mov	r6, r3
 800b13e:	2c01      	cmp	r4, #1
 800b140:	dc21      	bgt.n	800b186 <_strtod_l+0x51e>
 800b142:	b10b      	cbz	r3, 800b148 <_strtod_l+0x4e0>
 800b144:	4682      	mov	sl, r0
 800b146:	468b      	mov	fp, r1
 800b148:	492c      	ldr	r1, [pc, #176]	@ (800b1fc <_strtod_l+0x594>)
 800b14a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b14e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b152:	4652      	mov	r2, sl
 800b154:	465b      	mov	r3, fp
 800b156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b15a:	f7f5 fa6d 	bl	8000638 <__aeabi_dmul>
 800b15e:	4b28      	ldr	r3, [pc, #160]	@ (800b200 <_strtod_l+0x598>)
 800b160:	460a      	mov	r2, r1
 800b162:	400b      	ands	r3, r1
 800b164:	4927      	ldr	r1, [pc, #156]	@ (800b204 <_strtod_l+0x59c>)
 800b166:	428b      	cmp	r3, r1
 800b168:	4682      	mov	sl, r0
 800b16a:	d898      	bhi.n	800b09e <_strtod_l+0x436>
 800b16c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b170:	428b      	cmp	r3, r1
 800b172:	bf86      	itte	hi
 800b174:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b208 <_strtod_l+0x5a0>
 800b178:	f04f 3aff 	movhi.w	sl, #4294967295
 800b17c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b180:	2300      	movs	r3, #0
 800b182:	9308      	str	r3, [sp, #32]
 800b184:	e07a      	b.n	800b27c <_strtod_l+0x614>
 800b186:	07e2      	lsls	r2, r4, #31
 800b188:	d505      	bpl.n	800b196 <_strtod_l+0x52e>
 800b18a:	9b08      	ldr	r3, [sp, #32]
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f7f5 fa52 	bl	8000638 <__aeabi_dmul>
 800b194:	2301      	movs	r3, #1
 800b196:	9a08      	ldr	r2, [sp, #32]
 800b198:	3208      	adds	r2, #8
 800b19a:	3601      	adds	r6, #1
 800b19c:	1064      	asrs	r4, r4, #1
 800b19e:	9208      	str	r2, [sp, #32]
 800b1a0:	e7cd      	b.n	800b13e <_strtod_l+0x4d6>
 800b1a2:	d0ed      	beq.n	800b180 <_strtod_l+0x518>
 800b1a4:	4264      	negs	r4, r4
 800b1a6:	f014 020f 	ands.w	r2, r4, #15
 800b1aa:	d00a      	beq.n	800b1c2 <_strtod_l+0x55a>
 800b1ac:	4b12      	ldr	r3, [pc, #72]	@ (800b1f8 <_strtod_l+0x590>)
 800b1ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1b2:	4650      	mov	r0, sl
 800b1b4:	4659      	mov	r1, fp
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f7f5 fb67 	bl	800088c <__aeabi_ddiv>
 800b1be:	4682      	mov	sl, r0
 800b1c0:	468b      	mov	fp, r1
 800b1c2:	1124      	asrs	r4, r4, #4
 800b1c4:	d0dc      	beq.n	800b180 <_strtod_l+0x518>
 800b1c6:	2c1f      	cmp	r4, #31
 800b1c8:	dd20      	ble.n	800b20c <_strtod_l+0x5a4>
 800b1ca:	2400      	movs	r4, #0
 800b1cc:	46a0      	mov	r8, r4
 800b1ce:	940a      	str	r4, [sp, #40]	@ 0x28
 800b1d0:	46a1      	mov	r9, r4
 800b1d2:	9a05      	ldr	r2, [sp, #20]
 800b1d4:	2322      	movs	r3, #34	@ 0x22
 800b1d6:	f04f 0a00 	mov.w	sl, #0
 800b1da:	f04f 0b00 	mov.w	fp, #0
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	e768      	b.n	800b0b4 <_strtod_l+0x44c>
 800b1e2:	bf00      	nop
 800b1e4:	0800d0fd 	.word	0x0800d0fd
 800b1e8:	0800d314 	.word	0x0800d314
 800b1ec:	0800d0f5 	.word	0x0800d0f5
 800b1f0:	0800d12c 	.word	0x0800d12c
 800b1f4:	0800d4bd 	.word	0x0800d4bd
 800b1f8:	0800d248 	.word	0x0800d248
 800b1fc:	0800d220 	.word	0x0800d220
 800b200:	7ff00000 	.word	0x7ff00000
 800b204:	7ca00000 	.word	0x7ca00000
 800b208:	7fefffff 	.word	0x7fefffff
 800b20c:	f014 0310 	ands.w	r3, r4, #16
 800b210:	bf18      	it	ne
 800b212:	236a      	movne	r3, #106	@ 0x6a
 800b214:	4ea9      	ldr	r6, [pc, #676]	@ (800b4bc <_strtod_l+0x854>)
 800b216:	9308      	str	r3, [sp, #32]
 800b218:	4650      	mov	r0, sl
 800b21a:	4659      	mov	r1, fp
 800b21c:	2300      	movs	r3, #0
 800b21e:	07e2      	lsls	r2, r4, #31
 800b220:	d504      	bpl.n	800b22c <_strtod_l+0x5c4>
 800b222:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b226:	f7f5 fa07 	bl	8000638 <__aeabi_dmul>
 800b22a:	2301      	movs	r3, #1
 800b22c:	1064      	asrs	r4, r4, #1
 800b22e:	f106 0608 	add.w	r6, r6, #8
 800b232:	d1f4      	bne.n	800b21e <_strtod_l+0x5b6>
 800b234:	b10b      	cbz	r3, 800b23a <_strtod_l+0x5d2>
 800b236:	4682      	mov	sl, r0
 800b238:	468b      	mov	fp, r1
 800b23a:	9b08      	ldr	r3, [sp, #32]
 800b23c:	b1b3      	cbz	r3, 800b26c <_strtod_l+0x604>
 800b23e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b242:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b246:	2b00      	cmp	r3, #0
 800b248:	4659      	mov	r1, fp
 800b24a:	dd0f      	ble.n	800b26c <_strtod_l+0x604>
 800b24c:	2b1f      	cmp	r3, #31
 800b24e:	dd55      	ble.n	800b2fc <_strtod_l+0x694>
 800b250:	2b34      	cmp	r3, #52	@ 0x34
 800b252:	bfde      	ittt	le
 800b254:	f04f 33ff 	movle.w	r3, #4294967295
 800b258:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b25c:	4093      	lslle	r3, r2
 800b25e:	f04f 0a00 	mov.w	sl, #0
 800b262:	bfcc      	ite	gt
 800b264:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b268:	ea03 0b01 	andle.w	fp, r3, r1
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	4650      	mov	r0, sl
 800b272:	4659      	mov	r1, fp
 800b274:	f7f5 fc48 	bl	8000b08 <__aeabi_dcmpeq>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d1a6      	bne.n	800b1ca <_strtod_l+0x562>
 800b27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b282:	9805      	ldr	r0, [sp, #20]
 800b284:	462b      	mov	r3, r5
 800b286:	463a      	mov	r2, r7
 800b288:	f7ff f8c6 	bl	800a418 <__s2b>
 800b28c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b28e:	2800      	cmp	r0, #0
 800b290:	f43f af05 	beq.w	800b09e <_strtod_l+0x436>
 800b294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b296:	2a00      	cmp	r2, #0
 800b298:	eba9 0308 	sub.w	r3, r9, r8
 800b29c:	bfa8      	it	ge
 800b29e:	2300      	movge	r3, #0
 800b2a0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2a2:	2400      	movs	r4, #0
 800b2a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2a8:	9316      	str	r3, [sp, #88]	@ 0x58
 800b2aa:	46a0      	mov	r8, r4
 800b2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ae:	9805      	ldr	r0, [sp, #20]
 800b2b0:	6859      	ldr	r1, [r3, #4]
 800b2b2:	f7ff f809 	bl	800a2c8 <_Balloc>
 800b2b6:	4681      	mov	r9, r0
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f43f aef4 	beq.w	800b0a6 <_strtod_l+0x43e>
 800b2be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c0:	691a      	ldr	r2, [r3, #16]
 800b2c2:	3202      	adds	r2, #2
 800b2c4:	f103 010c 	add.w	r1, r3, #12
 800b2c8:	0092      	lsls	r2, r2, #2
 800b2ca:	300c      	adds	r0, #12
 800b2cc:	f7fe f89b 	bl	8009406 <memcpy>
 800b2d0:	ec4b ab10 	vmov	d0, sl, fp
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	aa1c      	add	r2, sp, #112	@ 0x70
 800b2d8:	a91b      	add	r1, sp, #108	@ 0x6c
 800b2da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b2de:	f7ff fbd7 	bl	800aa90 <__d2b>
 800b2e2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	f43f aede 	beq.w	800b0a6 <_strtod_l+0x43e>
 800b2ea:	9805      	ldr	r0, [sp, #20]
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	f7ff f929 	bl	800a544 <__i2b>
 800b2f2:	4680      	mov	r8, r0
 800b2f4:	b948      	cbnz	r0, 800b30a <_strtod_l+0x6a2>
 800b2f6:	f04f 0800 	mov.w	r8, #0
 800b2fa:	e6d4      	b.n	800b0a6 <_strtod_l+0x43e>
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	fa02 f303 	lsl.w	r3, r2, r3
 800b304:	ea03 0a0a 	and.w	sl, r3, sl
 800b308:	e7b0      	b.n	800b26c <_strtod_l+0x604>
 800b30a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b30c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b30e:	2d00      	cmp	r5, #0
 800b310:	bfab      	itete	ge
 800b312:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b314:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b316:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b318:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b31a:	bfac      	ite	ge
 800b31c:	18ef      	addge	r7, r5, r3
 800b31e:	1b5e      	sublt	r6, r3, r5
 800b320:	9b08      	ldr	r3, [sp, #32]
 800b322:	1aed      	subs	r5, r5, r3
 800b324:	4415      	add	r5, r2
 800b326:	4b66      	ldr	r3, [pc, #408]	@ (800b4c0 <_strtod_l+0x858>)
 800b328:	3d01      	subs	r5, #1
 800b32a:	429d      	cmp	r5, r3
 800b32c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b330:	da50      	bge.n	800b3d4 <_strtod_l+0x76c>
 800b332:	1b5b      	subs	r3, r3, r5
 800b334:	2b1f      	cmp	r3, #31
 800b336:	eba2 0203 	sub.w	r2, r2, r3
 800b33a:	f04f 0101 	mov.w	r1, #1
 800b33e:	dc3d      	bgt.n	800b3bc <_strtod_l+0x754>
 800b340:	fa01 f303 	lsl.w	r3, r1, r3
 800b344:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b346:	2300      	movs	r3, #0
 800b348:	9310      	str	r3, [sp, #64]	@ 0x40
 800b34a:	18bd      	adds	r5, r7, r2
 800b34c:	9b08      	ldr	r3, [sp, #32]
 800b34e:	42af      	cmp	r7, r5
 800b350:	4416      	add	r6, r2
 800b352:	441e      	add	r6, r3
 800b354:	463b      	mov	r3, r7
 800b356:	bfa8      	it	ge
 800b358:	462b      	movge	r3, r5
 800b35a:	42b3      	cmp	r3, r6
 800b35c:	bfa8      	it	ge
 800b35e:	4633      	movge	r3, r6
 800b360:	2b00      	cmp	r3, #0
 800b362:	bfc2      	ittt	gt
 800b364:	1aed      	subgt	r5, r5, r3
 800b366:	1af6      	subgt	r6, r6, r3
 800b368:	1aff      	subgt	r7, r7, r3
 800b36a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dd16      	ble.n	800b39e <_strtod_l+0x736>
 800b370:	4641      	mov	r1, r8
 800b372:	9805      	ldr	r0, [sp, #20]
 800b374:	461a      	mov	r2, r3
 800b376:	f7ff f9a5 	bl	800a6c4 <__pow5mult>
 800b37a:	4680      	mov	r8, r0
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d0ba      	beq.n	800b2f6 <_strtod_l+0x68e>
 800b380:	4601      	mov	r1, r0
 800b382:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b384:	9805      	ldr	r0, [sp, #20]
 800b386:	f7ff f8f3 	bl	800a570 <__multiply>
 800b38a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f43f ae8a 	beq.w	800b0a6 <_strtod_l+0x43e>
 800b392:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b394:	9805      	ldr	r0, [sp, #20]
 800b396:	f7fe ffd7 	bl	800a348 <_Bfree>
 800b39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b39c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b39e:	2d00      	cmp	r5, #0
 800b3a0:	dc1d      	bgt.n	800b3de <_strtod_l+0x776>
 800b3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd23      	ble.n	800b3f0 <_strtod_l+0x788>
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b3ac:	9805      	ldr	r0, [sp, #20]
 800b3ae:	f7ff f989 	bl	800a6c4 <__pow5mult>
 800b3b2:	4681      	mov	r9, r0
 800b3b4:	b9e0      	cbnz	r0, 800b3f0 <_strtod_l+0x788>
 800b3b6:	f04f 0900 	mov.w	r9, #0
 800b3ba:	e674      	b.n	800b0a6 <_strtod_l+0x43e>
 800b3bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b3c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b3c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b3c8:	35e2      	adds	r5, #226	@ 0xe2
 800b3ca:	fa01 f305 	lsl.w	r3, r1, r5
 800b3ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b3d2:	e7ba      	b.n	800b34a <_strtod_l+0x6e2>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3d8:	2301      	movs	r3, #1
 800b3da:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3dc:	e7b5      	b.n	800b34a <_strtod_l+0x6e2>
 800b3de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3e0:	9805      	ldr	r0, [sp, #20]
 800b3e2:	462a      	mov	r2, r5
 800b3e4:	f7ff f9c8 	bl	800a778 <__lshift>
 800b3e8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d1d9      	bne.n	800b3a2 <_strtod_l+0x73a>
 800b3ee:	e65a      	b.n	800b0a6 <_strtod_l+0x43e>
 800b3f0:	2e00      	cmp	r6, #0
 800b3f2:	dd07      	ble.n	800b404 <_strtod_l+0x79c>
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	9805      	ldr	r0, [sp, #20]
 800b3f8:	4632      	mov	r2, r6
 800b3fa:	f7ff f9bd 	bl	800a778 <__lshift>
 800b3fe:	4681      	mov	r9, r0
 800b400:	2800      	cmp	r0, #0
 800b402:	d0d8      	beq.n	800b3b6 <_strtod_l+0x74e>
 800b404:	2f00      	cmp	r7, #0
 800b406:	dd08      	ble.n	800b41a <_strtod_l+0x7b2>
 800b408:	4641      	mov	r1, r8
 800b40a:	9805      	ldr	r0, [sp, #20]
 800b40c:	463a      	mov	r2, r7
 800b40e:	f7ff f9b3 	bl	800a778 <__lshift>
 800b412:	4680      	mov	r8, r0
 800b414:	2800      	cmp	r0, #0
 800b416:	f43f ae46 	beq.w	800b0a6 <_strtod_l+0x43e>
 800b41a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b41c:	9805      	ldr	r0, [sp, #20]
 800b41e:	464a      	mov	r2, r9
 800b420:	f7ff fa32 	bl	800a888 <__mdiff>
 800b424:	4604      	mov	r4, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	f43f ae3d 	beq.w	800b0a6 <_strtod_l+0x43e>
 800b42c:	68c3      	ldr	r3, [r0, #12]
 800b42e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b430:	2300      	movs	r3, #0
 800b432:	60c3      	str	r3, [r0, #12]
 800b434:	4641      	mov	r1, r8
 800b436:	f7ff fa0b 	bl	800a850 <__mcmp>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	da46      	bge.n	800b4cc <_strtod_l+0x864>
 800b43e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b440:	ea53 030a 	orrs.w	r3, r3, sl
 800b444:	d16c      	bne.n	800b520 <_strtod_l+0x8b8>
 800b446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d168      	bne.n	800b520 <_strtod_l+0x8b8>
 800b44e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b452:	0d1b      	lsrs	r3, r3, #20
 800b454:	051b      	lsls	r3, r3, #20
 800b456:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b45a:	d961      	bls.n	800b520 <_strtod_l+0x8b8>
 800b45c:	6963      	ldr	r3, [r4, #20]
 800b45e:	b913      	cbnz	r3, 800b466 <_strtod_l+0x7fe>
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	2b01      	cmp	r3, #1
 800b464:	dd5c      	ble.n	800b520 <_strtod_l+0x8b8>
 800b466:	4621      	mov	r1, r4
 800b468:	2201      	movs	r2, #1
 800b46a:	9805      	ldr	r0, [sp, #20]
 800b46c:	f7ff f984 	bl	800a778 <__lshift>
 800b470:	4641      	mov	r1, r8
 800b472:	4604      	mov	r4, r0
 800b474:	f7ff f9ec 	bl	800a850 <__mcmp>
 800b478:	2800      	cmp	r0, #0
 800b47a:	dd51      	ble.n	800b520 <_strtod_l+0x8b8>
 800b47c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b480:	9a08      	ldr	r2, [sp, #32]
 800b482:	0d1b      	lsrs	r3, r3, #20
 800b484:	051b      	lsls	r3, r3, #20
 800b486:	2a00      	cmp	r2, #0
 800b488:	d06b      	beq.n	800b562 <_strtod_l+0x8fa>
 800b48a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b48e:	d868      	bhi.n	800b562 <_strtod_l+0x8fa>
 800b490:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b494:	f67f ae9d 	bls.w	800b1d2 <_strtod_l+0x56a>
 800b498:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c4 <_strtod_l+0x85c>)
 800b49a:	4650      	mov	r0, sl
 800b49c:	4659      	mov	r1, fp
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f7f5 f8ca 	bl	8000638 <__aeabi_dmul>
 800b4a4:	4b08      	ldr	r3, [pc, #32]	@ (800b4c8 <_strtod_l+0x860>)
 800b4a6:	400b      	ands	r3, r1
 800b4a8:	4682      	mov	sl, r0
 800b4aa:	468b      	mov	fp, r1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f47f ae05 	bne.w	800b0bc <_strtod_l+0x454>
 800b4b2:	9a05      	ldr	r2, [sp, #20]
 800b4b4:	2322      	movs	r3, #34	@ 0x22
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	e600      	b.n	800b0bc <_strtod_l+0x454>
 800b4ba:	bf00      	nop
 800b4bc:	0800d340 	.word	0x0800d340
 800b4c0:	fffffc02 	.word	0xfffffc02
 800b4c4:	39500000 	.word	0x39500000
 800b4c8:	7ff00000 	.word	0x7ff00000
 800b4cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b4d0:	d165      	bne.n	800b59e <_strtod_l+0x936>
 800b4d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b4d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4d8:	b35a      	cbz	r2, 800b532 <_strtod_l+0x8ca>
 800b4da:	4a9f      	ldr	r2, [pc, #636]	@ (800b758 <_strtod_l+0xaf0>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d12b      	bne.n	800b538 <_strtod_l+0x8d0>
 800b4e0:	9b08      	ldr	r3, [sp, #32]
 800b4e2:	4651      	mov	r1, sl
 800b4e4:	b303      	cbz	r3, 800b528 <_strtod_l+0x8c0>
 800b4e6:	4b9d      	ldr	r3, [pc, #628]	@ (800b75c <_strtod_l+0xaf4>)
 800b4e8:	465a      	mov	r2, fp
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f4:	d81b      	bhi.n	800b52e <_strtod_l+0x8c6>
 800b4f6:	0d1b      	lsrs	r3, r3, #20
 800b4f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b500:	4299      	cmp	r1, r3
 800b502:	d119      	bne.n	800b538 <_strtod_l+0x8d0>
 800b504:	4b96      	ldr	r3, [pc, #600]	@ (800b760 <_strtod_l+0xaf8>)
 800b506:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b508:	429a      	cmp	r2, r3
 800b50a:	d102      	bne.n	800b512 <_strtod_l+0x8aa>
 800b50c:	3101      	adds	r1, #1
 800b50e:	f43f adca 	beq.w	800b0a6 <_strtod_l+0x43e>
 800b512:	4b92      	ldr	r3, [pc, #584]	@ (800b75c <_strtod_l+0xaf4>)
 800b514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b516:	401a      	ands	r2, r3
 800b518:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b51c:	f04f 0a00 	mov.w	sl, #0
 800b520:	9b08      	ldr	r3, [sp, #32]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1b8      	bne.n	800b498 <_strtod_l+0x830>
 800b526:	e5c9      	b.n	800b0bc <_strtod_l+0x454>
 800b528:	f04f 33ff 	mov.w	r3, #4294967295
 800b52c:	e7e8      	b.n	800b500 <_strtod_l+0x898>
 800b52e:	4613      	mov	r3, r2
 800b530:	e7e6      	b.n	800b500 <_strtod_l+0x898>
 800b532:	ea53 030a 	orrs.w	r3, r3, sl
 800b536:	d0a1      	beq.n	800b47c <_strtod_l+0x814>
 800b538:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b53a:	b1db      	cbz	r3, 800b574 <_strtod_l+0x90c>
 800b53c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b53e:	4213      	tst	r3, r2
 800b540:	d0ee      	beq.n	800b520 <_strtod_l+0x8b8>
 800b542:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b544:	9a08      	ldr	r2, [sp, #32]
 800b546:	4650      	mov	r0, sl
 800b548:	4659      	mov	r1, fp
 800b54a:	b1bb      	cbz	r3, 800b57c <_strtod_l+0x914>
 800b54c:	f7ff fb6e 	bl	800ac2c <sulp>
 800b550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b554:	ec53 2b10 	vmov	r2, r3, d0
 800b558:	f7f4 feb8 	bl	80002cc <__adddf3>
 800b55c:	4682      	mov	sl, r0
 800b55e:	468b      	mov	fp, r1
 800b560:	e7de      	b.n	800b520 <_strtod_l+0x8b8>
 800b562:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b566:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b56a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b56e:	f04f 3aff 	mov.w	sl, #4294967295
 800b572:	e7d5      	b.n	800b520 <_strtod_l+0x8b8>
 800b574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b576:	ea13 0f0a 	tst.w	r3, sl
 800b57a:	e7e1      	b.n	800b540 <_strtod_l+0x8d8>
 800b57c:	f7ff fb56 	bl	800ac2c <sulp>
 800b580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b584:	ec53 2b10 	vmov	r2, r3, d0
 800b588:	f7f4 fe9e 	bl	80002c8 <__aeabi_dsub>
 800b58c:	2200      	movs	r2, #0
 800b58e:	2300      	movs	r3, #0
 800b590:	4682      	mov	sl, r0
 800b592:	468b      	mov	fp, r1
 800b594:	f7f5 fab8 	bl	8000b08 <__aeabi_dcmpeq>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d0c1      	beq.n	800b520 <_strtod_l+0x8b8>
 800b59c:	e619      	b.n	800b1d2 <_strtod_l+0x56a>
 800b59e:	4641      	mov	r1, r8
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7ff facd 	bl	800ab40 <__ratio>
 800b5a6:	ec57 6b10 	vmov	r6, r7, d0
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	4639      	mov	r1, r7
 800b5b4:	f7f5 fabc 	bl	8000b30 <__aeabi_dcmple>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d06f      	beq.n	800b69c <_strtod_l+0xa34>
 800b5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d17a      	bne.n	800b6b8 <_strtod_l+0xa50>
 800b5c2:	f1ba 0f00 	cmp.w	sl, #0
 800b5c6:	d158      	bne.n	800b67a <_strtod_l+0xa12>
 800b5c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d15a      	bne.n	800b688 <_strtod_l+0xa20>
 800b5d2:	4b64      	ldr	r3, [pc, #400]	@ (800b764 <_strtod_l+0xafc>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	4639      	mov	r1, r7
 800b5da:	f7f5 fa9f 	bl	8000b1c <__aeabi_dcmplt>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d159      	bne.n	800b696 <_strtod_l+0xa2e>
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	4b60      	ldr	r3, [pc, #384]	@ (800b768 <_strtod_l+0xb00>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f7f5 f825 	bl	8000638 <__aeabi_dmul>
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b5f6:	9606      	str	r6, [sp, #24]
 800b5f8:	9307      	str	r3, [sp, #28]
 800b5fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5fe:	4d57      	ldr	r5, [pc, #348]	@ (800b75c <_strtod_l+0xaf4>)
 800b600:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b606:	401d      	ands	r5, r3
 800b608:	4b58      	ldr	r3, [pc, #352]	@ (800b76c <_strtod_l+0xb04>)
 800b60a:	429d      	cmp	r5, r3
 800b60c:	f040 80b2 	bne.w	800b774 <_strtod_l+0xb0c>
 800b610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b612:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b616:	ec4b ab10 	vmov	d0, sl, fp
 800b61a:	f7ff f9c9 	bl	800a9b0 <__ulp>
 800b61e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b622:	ec51 0b10 	vmov	r0, r1, d0
 800b626:	f7f5 f807 	bl	8000638 <__aeabi_dmul>
 800b62a:	4652      	mov	r2, sl
 800b62c:	465b      	mov	r3, fp
 800b62e:	f7f4 fe4d 	bl	80002cc <__adddf3>
 800b632:	460b      	mov	r3, r1
 800b634:	4949      	ldr	r1, [pc, #292]	@ (800b75c <_strtod_l+0xaf4>)
 800b636:	4a4e      	ldr	r2, [pc, #312]	@ (800b770 <_strtod_l+0xb08>)
 800b638:	4019      	ands	r1, r3
 800b63a:	4291      	cmp	r1, r2
 800b63c:	4682      	mov	sl, r0
 800b63e:	d942      	bls.n	800b6c6 <_strtod_l+0xa5e>
 800b640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b642:	4b47      	ldr	r3, [pc, #284]	@ (800b760 <_strtod_l+0xaf8>)
 800b644:	429a      	cmp	r2, r3
 800b646:	d103      	bne.n	800b650 <_strtod_l+0x9e8>
 800b648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b64a:	3301      	adds	r3, #1
 800b64c:	f43f ad2b 	beq.w	800b0a6 <_strtod_l+0x43e>
 800b650:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b760 <_strtod_l+0xaf8>
 800b654:	f04f 3aff 	mov.w	sl, #4294967295
 800b658:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b65a:	9805      	ldr	r0, [sp, #20]
 800b65c:	f7fe fe74 	bl	800a348 <_Bfree>
 800b660:	9805      	ldr	r0, [sp, #20]
 800b662:	4649      	mov	r1, r9
 800b664:	f7fe fe70 	bl	800a348 <_Bfree>
 800b668:	9805      	ldr	r0, [sp, #20]
 800b66a:	4641      	mov	r1, r8
 800b66c:	f7fe fe6c 	bl	800a348 <_Bfree>
 800b670:	9805      	ldr	r0, [sp, #20]
 800b672:	4621      	mov	r1, r4
 800b674:	f7fe fe68 	bl	800a348 <_Bfree>
 800b678:	e618      	b.n	800b2ac <_strtod_l+0x644>
 800b67a:	f1ba 0f01 	cmp.w	sl, #1
 800b67e:	d103      	bne.n	800b688 <_strtod_l+0xa20>
 800b680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b682:	2b00      	cmp	r3, #0
 800b684:	f43f ada5 	beq.w	800b1d2 <_strtod_l+0x56a>
 800b688:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b738 <_strtod_l+0xad0>
 800b68c:	4f35      	ldr	r7, [pc, #212]	@ (800b764 <_strtod_l+0xafc>)
 800b68e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b692:	2600      	movs	r6, #0
 800b694:	e7b1      	b.n	800b5fa <_strtod_l+0x992>
 800b696:	4f34      	ldr	r7, [pc, #208]	@ (800b768 <_strtod_l+0xb00>)
 800b698:	2600      	movs	r6, #0
 800b69a:	e7aa      	b.n	800b5f2 <_strtod_l+0x98a>
 800b69c:	4b32      	ldr	r3, [pc, #200]	@ (800b768 <_strtod_l+0xb00>)
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f7f4 ffc8 	bl	8000638 <__aeabi_dmul>
 800b6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d09f      	beq.n	800b5f2 <_strtod_l+0x98a>
 800b6b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b6b6:	e7a0      	b.n	800b5fa <_strtod_l+0x992>
 800b6b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b740 <_strtod_l+0xad8>
 800b6bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6c0:	ec57 6b17 	vmov	r6, r7, d7
 800b6c4:	e799      	b.n	800b5fa <_strtod_l+0x992>
 800b6c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b6ca:	9b08      	ldr	r3, [sp, #32]
 800b6cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1c1      	bne.n	800b658 <_strtod_l+0x9f0>
 800b6d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6d8:	0d1b      	lsrs	r3, r3, #20
 800b6da:	051b      	lsls	r3, r3, #20
 800b6dc:	429d      	cmp	r5, r3
 800b6de:	d1bb      	bne.n	800b658 <_strtod_l+0x9f0>
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	f7f5 fb08 	bl	8000cf8 <__aeabi_d2lz>
 800b6e8:	f7f4 ff78 	bl	80005dc <__aeabi_l2d>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f4 fde8 	bl	80002c8 <__aeabi_dsub>
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b700:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b706:	ea46 060a 	orr.w	r6, r6, sl
 800b70a:	431e      	orrs	r6, r3
 800b70c:	d06f      	beq.n	800b7ee <_strtod_l+0xb86>
 800b70e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b748 <_strtod_l+0xae0>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f7f5 fa02 	bl	8000b1c <__aeabi_dcmplt>
 800b718:	2800      	cmp	r0, #0
 800b71a:	f47f accf 	bne.w	800b0bc <_strtod_l+0x454>
 800b71e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b750 <_strtod_l+0xae8>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b728:	f7f5 fa16 	bl	8000b58 <__aeabi_dcmpgt>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d093      	beq.n	800b658 <_strtod_l+0x9f0>
 800b730:	e4c4      	b.n	800b0bc <_strtod_l+0x454>
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
 800b738:	00000000 	.word	0x00000000
 800b73c:	bff00000 	.word	0xbff00000
 800b740:	00000000 	.word	0x00000000
 800b744:	3ff00000 	.word	0x3ff00000
 800b748:	94a03595 	.word	0x94a03595
 800b74c:	3fdfffff 	.word	0x3fdfffff
 800b750:	35afe535 	.word	0x35afe535
 800b754:	3fe00000 	.word	0x3fe00000
 800b758:	000fffff 	.word	0x000fffff
 800b75c:	7ff00000 	.word	0x7ff00000
 800b760:	7fefffff 	.word	0x7fefffff
 800b764:	3ff00000 	.word	0x3ff00000
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	7fe00000 	.word	0x7fe00000
 800b770:	7c9fffff 	.word	0x7c9fffff
 800b774:	9b08      	ldr	r3, [sp, #32]
 800b776:	b323      	cbz	r3, 800b7c2 <_strtod_l+0xb5a>
 800b778:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b77c:	d821      	bhi.n	800b7c2 <_strtod_l+0xb5a>
 800b77e:	a328      	add	r3, pc, #160	@ (adr r3, 800b820 <_strtod_l+0xbb8>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	4630      	mov	r0, r6
 800b786:	4639      	mov	r1, r7
 800b788:	f7f5 f9d2 	bl	8000b30 <__aeabi_dcmple>
 800b78c:	b1a0      	cbz	r0, 800b7b8 <_strtod_l+0xb50>
 800b78e:	4639      	mov	r1, r7
 800b790:	4630      	mov	r0, r6
 800b792:	f7f5 fa29 	bl	8000be8 <__aeabi_d2uiz>
 800b796:	2801      	cmp	r0, #1
 800b798:	bf38      	it	cc
 800b79a:	2001      	movcc	r0, #1
 800b79c:	f7f4 fed2 	bl	8000544 <__aeabi_ui2d>
 800b7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	b9fb      	cbnz	r3, 800b7e8 <_strtod_l+0xb80>
 800b7a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800b7ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b7b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b7b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b7be:	1b5b      	subs	r3, r3, r5
 800b7c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b7c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b7ca:	f7ff f8f1 	bl	800a9b0 <__ulp>
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	ec53 2b10 	vmov	r2, r3, d0
 800b7d4:	4659      	mov	r1, fp
 800b7d6:	f7f4 ff2f 	bl	8000638 <__aeabi_dmul>
 800b7da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b7de:	f7f4 fd75 	bl	80002cc <__adddf3>
 800b7e2:	4682      	mov	sl, r0
 800b7e4:	468b      	mov	fp, r1
 800b7e6:	e770      	b.n	800b6ca <_strtod_l+0xa62>
 800b7e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b7ec:	e7e0      	b.n	800b7b0 <_strtod_l+0xb48>
 800b7ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800b828 <_strtod_l+0xbc0>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f7f5 f992 	bl	8000b1c <__aeabi_dcmplt>
 800b7f8:	e798      	b.n	800b72c <_strtod_l+0xac4>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	f7ff ba6d 	b.w	800ace2 <_strtod_l+0x7a>
 800b808:	2a65      	cmp	r2, #101	@ 0x65
 800b80a:	f43f ab66 	beq.w	800aeda <_strtod_l+0x272>
 800b80e:	2a45      	cmp	r2, #69	@ 0x45
 800b810:	f43f ab63 	beq.w	800aeda <_strtod_l+0x272>
 800b814:	2301      	movs	r3, #1
 800b816:	f7ff bb9e 	b.w	800af56 <_strtod_l+0x2ee>
 800b81a:	bf00      	nop
 800b81c:	f3af 8000 	nop.w
 800b820:	ffc00000 	.word	0xffc00000
 800b824:	41dfffff 	.word	0x41dfffff
 800b828:	94a03595 	.word	0x94a03595
 800b82c:	3fcfffff 	.word	0x3fcfffff

0800b830 <_strtod_r>:
 800b830:	4b01      	ldr	r3, [pc, #4]	@ (800b838 <_strtod_r+0x8>)
 800b832:	f7ff ba19 	b.w	800ac68 <_strtod_l>
 800b836:	bf00      	nop
 800b838:	20000094 	.word	0x20000094

0800b83c <_strtol_l.constprop.0>:
 800b83c:	2b24      	cmp	r3, #36	@ 0x24
 800b83e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b842:	4686      	mov	lr, r0
 800b844:	4690      	mov	r8, r2
 800b846:	d801      	bhi.n	800b84c <_strtol_l.constprop.0+0x10>
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d106      	bne.n	800b85a <_strtol_l.constprop.0+0x1e>
 800b84c:	f7fd fdae 	bl	80093ac <__errno>
 800b850:	2316      	movs	r3, #22
 800b852:	6003      	str	r3, [r0, #0]
 800b854:	2000      	movs	r0, #0
 800b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85a:	4834      	ldr	r0, [pc, #208]	@ (800b92c <_strtol_l.constprop.0+0xf0>)
 800b85c:	460d      	mov	r5, r1
 800b85e:	462a      	mov	r2, r5
 800b860:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b864:	5d06      	ldrb	r6, [r0, r4]
 800b866:	f016 0608 	ands.w	r6, r6, #8
 800b86a:	d1f8      	bne.n	800b85e <_strtol_l.constprop.0+0x22>
 800b86c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b86e:	d12d      	bne.n	800b8cc <_strtol_l.constprop.0+0x90>
 800b870:	782c      	ldrb	r4, [r5, #0]
 800b872:	2601      	movs	r6, #1
 800b874:	1c95      	adds	r5, r2, #2
 800b876:	f033 0210 	bics.w	r2, r3, #16
 800b87a:	d109      	bne.n	800b890 <_strtol_l.constprop.0+0x54>
 800b87c:	2c30      	cmp	r4, #48	@ 0x30
 800b87e:	d12a      	bne.n	800b8d6 <_strtol_l.constprop.0+0x9a>
 800b880:	782a      	ldrb	r2, [r5, #0]
 800b882:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b886:	2a58      	cmp	r2, #88	@ 0x58
 800b888:	d125      	bne.n	800b8d6 <_strtol_l.constprop.0+0x9a>
 800b88a:	786c      	ldrb	r4, [r5, #1]
 800b88c:	2310      	movs	r3, #16
 800b88e:	3502      	adds	r5, #2
 800b890:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b894:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b898:	2200      	movs	r2, #0
 800b89a:	fbbc f9f3 	udiv	r9, ip, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b8a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b8a8:	2f09      	cmp	r7, #9
 800b8aa:	d81b      	bhi.n	800b8e4 <_strtol_l.constprop.0+0xa8>
 800b8ac:	463c      	mov	r4, r7
 800b8ae:	42a3      	cmp	r3, r4
 800b8b0:	dd27      	ble.n	800b902 <_strtol_l.constprop.0+0xc6>
 800b8b2:	1c57      	adds	r7, r2, #1
 800b8b4:	d007      	beq.n	800b8c6 <_strtol_l.constprop.0+0x8a>
 800b8b6:	4581      	cmp	r9, r0
 800b8b8:	d320      	bcc.n	800b8fc <_strtol_l.constprop.0+0xc0>
 800b8ba:	d101      	bne.n	800b8c0 <_strtol_l.constprop.0+0x84>
 800b8bc:	45a2      	cmp	sl, r4
 800b8be:	db1d      	blt.n	800b8fc <_strtol_l.constprop.0+0xc0>
 800b8c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8ca:	e7eb      	b.n	800b8a4 <_strtol_l.constprop.0+0x68>
 800b8cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b8ce:	bf04      	itt	eq
 800b8d0:	782c      	ldrbeq	r4, [r5, #0]
 800b8d2:	1c95      	addeq	r5, r2, #2
 800b8d4:	e7cf      	b.n	800b876 <_strtol_l.constprop.0+0x3a>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1da      	bne.n	800b890 <_strtol_l.constprop.0+0x54>
 800b8da:	2c30      	cmp	r4, #48	@ 0x30
 800b8dc:	bf0c      	ite	eq
 800b8de:	2308      	moveq	r3, #8
 800b8e0:	230a      	movne	r3, #10
 800b8e2:	e7d5      	b.n	800b890 <_strtol_l.constprop.0+0x54>
 800b8e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b8e8:	2f19      	cmp	r7, #25
 800b8ea:	d801      	bhi.n	800b8f0 <_strtol_l.constprop.0+0xb4>
 800b8ec:	3c37      	subs	r4, #55	@ 0x37
 800b8ee:	e7de      	b.n	800b8ae <_strtol_l.constprop.0+0x72>
 800b8f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b8f4:	2f19      	cmp	r7, #25
 800b8f6:	d804      	bhi.n	800b902 <_strtol_l.constprop.0+0xc6>
 800b8f8:	3c57      	subs	r4, #87	@ 0x57
 800b8fa:	e7d8      	b.n	800b8ae <_strtol_l.constprop.0+0x72>
 800b8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b900:	e7e1      	b.n	800b8c6 <_strtol_l.constprop.0+0x8a>
 800b902:	1c53      	adds	r3, r2, #1
 800b904:	d108      	bne.n	800b918 <_strtol_l.constprop.0+0xdc>
 800b906:	2322      	movs	r3, #34	@ 0x22
 800b908:	f8ce 3000 	str.w	r3, [lr]
 800b90c:	4660      	mov	r0, ip
 800b90e:	f1b8 0f00 	cmp.w	r8, #0
 800b912:	d0a0      	beq.n	800b856 <_strtol_l.constprop.0+0x1a>
 800b914:	1e69      	subs	r1, r5, #1
 800b916:	e006      	b.n	800b926 <_strtol_l.constprop.0+0xea>
 800b918:	b106      	cbz	r6, 800b91c <_strtol_l.constprop.0+0xe0>
 800b91a:	4240      	negs	r0, r0
 800b91c:	f1b8 0f00 	cmp.w	r8, #0
 800b920:	d099      	beq.n	800b856 <_strtol_l.constprop.0+0x1a>
 800b922:	2a00      	cmp	r2, #0
 800b924:	d1f6      	bne.n	800b914 <_strtol_l.constprop.0+0xd8>
 800b926:	f8c8 1000 	str.w	r1, [r8]
 800b92a:	e794      	b.n	800b856 <_strtol_l.constprop.0+0x1a>
 800b92c:	0800d369 	.word	0x0800d369

0800b930 <_strtol_r>:
 800b930:	f7ff bf84 	b.w	800b83c <_strtol_l.constprop.0>

0800b934 <__ssputs_r>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	688e      	ldr	r6, [r1, #8]
 800b93a:	461f      	mov	r7, r3
 800b93c:	42be      	cmp	r6, r7
 800b93e:	680b      	ldr	r3, [r1, #0]
 800b940:	4682      	mov	sl, r0
 800b942:	460c      	mov	r4, r1
 800b944:	4690      	mov	r8, r2
 800b946:	d82d      	bhi.n	800b9a4 <__ssputs_r+0x70>
 800b948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b94c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b950:	d026      	beq.n	800b9a0 <__ssputs_r+0x6c>
 800b952:	6965      	ldr	r5, [r4, #20]
 800b954:	6909      	ldr	r1, [r1, #16]
 800b956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b95a:	eba3 0901 	sub.w	r9, r3, r1
 800b95e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b962:	1c7b      	adds	r3, r7, #1
 800b964:	444b      	add	r3, r9
 800b966:	106d      	asrs	r5, r5, #1
 800b968:	429d      	cmp	r5, r3
 800b96a:	bf38      	it	cc
 800b96c:	461d      	movcc	r5, r3
 800b96e:	0553      	lsls	r3, r2, #21
 800b970:	d527      	bpl.n	800b9c2 <__ssputs_r+0x8e>
 800b972:	4629      	mov	r1, r5
 800b974:	f7fe fc1c 	bl	800a1b0 <_malloc_r>
 800b978:	4606      	mov	r6, r0
 800b97a:	b360      	cbz	r0, 800b9d6 <__ssputs_r+0xa2>
 800b97c:	6921      	ldr	r1, [r4, #16]
 800b97e:	464a      	mov	r2, r9
 800b980:	f7fd fd41 	bl	8009406 <memcpy>
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b98e:	81a3      	strh	r3, [r4, #12]
 800b990:	6126      	str	r6, [r4, #16]
 800b992:	6165      	str	r5, [r4, #20]
 800b994:	444e      	add	r6, r9
 800b996:	eba5 0509 	sub.w	r5, r5, r9
 800b99a:	6026      	str	r6, [r4, #0]
 800b99c:	60a5      	str	r5, [r4, #8]
 800b99e:	463e      	mov	r6, r7
 800b9a0:	42be      	cmp	r6, r7
 800b9a2:	d900      	bls.n	800b9a6 <__ssputs_r+0x72>
 800b9a4:	463e      	mov	r6, r7
 800b9a6:	6820      	ldr	r0, [r4, #0]
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	4641      	mov	r1, r8
 800b9ac:	f000 fb6a 	bl	800c084 <memmove>
 800b9b0:	68a3      	ldr	r3, [r4, #8]
 800b9b2:	1b9b      	subs	r3, r3, r6
 800b9b4:	60a3      	str	r3, [r4, #8]
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	4433      	add	r3, r6
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c2:	462a      	mov	r2, r5
 800b9c4:	f000 ff41 	bl	800c84a <_realloc_r>
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d1e0      	bne.n	800b990 <__ssputs_r+0x5c>
 800b9ce:	6921      	ldr	r1, [r4, #16]
 800b9d0:	4650      	mov	r0, sl
 800b9d2:	f7fe fb79 	bl	800a0c8 <_free_r>
 800b9d6:	230c      	movs	r3, #12
 800b9d8:	f8ca 3000 	str.w	r3, [sl]
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9e2:	81a3      	strh	r3, [r4, #12]
 800b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e8:	e7e9      	b.n	800b9be <__ssputs_r+0x8a>
	...

0800b9ec <_svfiprintf_r>:
 800b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f0:	4698      	mov	r8, r3
 800b9f2:	898b      	ldrh	r3, [r1, #12]
 800b9f4:	061b      	lsls	r3, r3, #24
 800b9f6:	b09d      	sub	sp, #116	@ 0x74
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	d510      	bpl.n	800ba22 <_svfiprintf_r+0x36>
 800ba00:	690b      	ldr	r3, [r1, #16]
 800ba02:	b973      	cbnz	r3, 800ba22 <_svfiprintf_r+0x36>
 800ba04:	2140      	movs	r1, #64	@ 0x40
 800ba06:	f7fe fbd3 	bl	800a1b0 <_malloc_r>
 800ba0a:	6028      	str	r0, [r5, #0]
 800ba0c:	6128      	str	r0, [r5, #16]
 800ba0e:	b930      	cbnz	r0, 800ba1e <_svfiprintf_r+0x32>
 800ba10:	230c      	movs	r3, #12
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	b01d      	add	sp, #116	@ 0x74
 800ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1e:	2340      	movs	r3, #64	@ 0x40
 800ba20:	616b      	str	r3, [r5, #20]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba26:	2320      	movs	r3, #32
 800ba28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba30:	2330      	movs	r3, #48	@ 0x30
 800ba32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bbd0 <_svfiprintf_r+0x1e4>
 800ba36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba3a:	f04f 0901 	mov.w	r9, #1
 800ba3e:	4623      	mov	r3, r4
 800ba40:	469a      	mov	sl, r3
 800ba42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba46:	b10a      	cbz	r2, 800ba4c <_svfiprintf_r+0x60>
 800ba48:	2a25      	cmp	r2, #37	@ 0x25
 800ba4a:	d1f9      	bne.n	800ba40 <_svfiprintf_r+0x54>
 800ba4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba50:	d00b      	beq.n	800ba6a <_svfiprintf_r+0x7e>
 800ba52:	465b      	mov	r3, fp
 800ba54:	4622      	mov	r2, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7ff ff6b 	bl	800b934 <__ssputs_r>
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f000 80a7 	beq.w	800bbb2 <_svfiprintf_r+0x1c6>
 800ba64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba66:	445a      	add	r2, fp
 800ba68:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 809f 	beq.w	800bbb2 <_svfiprintf_r+0x1c6>
 800ba74:	2300      	movs	r3, #0
 800ba76:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba7e:	f10a 0a01 	add.w	sl, sl, #1
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	9307      	str	r3, [sp, #28]
 800ba86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba8c:	4654      	mov	r4, sl
 800ba8e:	2205      	movs	r2, #5
 800ba90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba94:	484e      	ldr	r0, [pc, #312]	@ (800bbd0 <_svfiprintf_r+0x1e4>)
 800ba96:	f7f4 fbbb 	bl	8000210 <memchr>
 800ba9a:	9a04      	ldr	r2, [sp, #16]
 800ba9c:	b9d8      	cbnz	r0, 800bad6 <_svfiprintf_r+0xea>
 800ba9e:	06d0      	lsls	r0, r2, #27
 800baa0:	bf44      	itt	mi
 800baa2:	2320      	movmi	r3, #32
 800baa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baa8:	0711      	lsls	r1, r2, #28
 800baaa:	bf44      	itt	mi
 800baac:	232b      	movmi	r3, #43	@ 0x2b
 800baae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bab2:	f89a 3000 	ldrb.w	r3, [sl]
 800bab6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bab8:	d015      	beq.n	800bae6 <_svfiprintf_r+0xfa>
 800baba:	9a07      	ldr	r2, [sp, #28]
 800babc:	4654      	mov	r4, sl
 800babe:	2000      	movs	r0, #0
 800bac0:	f04f 0c0a 	mov.w	ip, #10
 800bac4:	4621      	mov	r1, r4
 800bac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baca:	3b30      	subs	r3, #48	@ 0x30
 800bacc:	2b09      	cmp	r3, #9
 800bace:	d94b      	bls.n	800bb68 <_svfiprintf_r+0x17c>
 800bad0:	b1b0      	cbz	r0, 800bb00 <_svfiprintf_r+0x114>
 800bad2:	9207      	str	r2, [sp, #28]
 800bad4:	e014      	b.n	800bb00 <_svfiprintf_r+0x114>
 800bad6:	eba0 0308 	sub.w	r3, r0, r8
 800bada:	fa09 f303 	lsl.w	r3, r9, r3
 800bade:	4313      	orrs	r3, r2
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	46a2      	mov	sl, r4
 800bae4:	e7d2      	b.n	800ba8c <_svfiprintf_r+0xa0>
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	1d19      	adds	r1, r3, #4
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	9103      	str	r1, [sp, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfbb      	ittet	lt
 800baf2:	425b      	neglt	r3, r3
 800baf4:	f042 0202 	orrlt.w	r2, r2, #2
 800baf8:	9307      	strge	r3, [sp, #28]
 800bafa:	9307      	strlt	r3, [sp, #28]
 800bafc:	bfb8      	it	lt
 800bafe:	9204      	strlt	r2, [sp, #16]
 800bb00:	7823      	ldrb	r3, [r4, #0]
 800bb02:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb04:	d10a      	bne.n	800bb1c <_svfiprintf_r+0x130>
 800bb06:	7863      	ldrb	r3, [r4, #1]
 800bb08:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb0a:	d132      	bne.n	800bb72 <_svfiprintf_r+0x186>
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	1d1a      	adds	r2, r3, #4
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	9203      	str	r2, [sp, #12]
 800bb14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb18:	3402      	adds	r4, #2
 800bb1a:	9305      	str	r3, [sp, #20]
 800bb1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bbe0 <_svfiprintf_r+0x1f4>
 800bb20:	7821      	ldrb	r1, [r4, #0]
 800bb22:	2203      	movs	r2, #3
 800bb24:	4650      	mov	r0, sl
 800bb26:	f7f4 fb73 	bl	8000210 <memchr>
 800bb2a:	b138      	cbz	r0, 800bb3c <_svfiprintf_r+0x150>
 800bb2c:	9b04      	ldr	r3, [sp, #16]
 800bb2e:	eba0 000a 	sub.w	r0, r0, sl
 800bb32:	2240      	movs	r2, #64	@ 0x40
 800bb34:	4082      	lsls	r2, r0
 800bb36:	4313      	orrs	r3, r2
 800bb38:	3401      	adds	r4, #1
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb40:	4824      	ldr	r0, [pc, #144]	@ (800bbd4 <_svfiprintf_r+0x1e8>)
 800bb42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb46:	2206      	movs	r2, #6
 800bb48:	f7f4 fb62 	bl	8000210 <memchr>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d036      	beq.n	800bbbe <_svfiprintf_r+0x1d2>
 800bb50:	4b21      	ldr	r3, [pc, #132]	@ (800bbd8 <_svfiprintf_r+0x1ec>)
 800bb52:	bb1b      	cbnz	r3, 800bb9c <_svfiprintf_r+0x1b0>
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	3307      	adds	r3, #7
 800bb58:	f023 0307 	bic.w	r3, r3, #7
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	9303      	str	r3, [sp, #12]
 800bb60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb62:	4433      	add	r3, r6
 800bb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb66:	e76a      	b.n	800ba3e <_svfiprintf_r+0x52>
 800bb68:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	2001      	movs	r0, #1
 800bb70:	e7a8      	b.n	800bac4 <_svfiprintf_r+0xd8>
 800bb72:	2300      	movs	r3, #0
 800bb74:	3401      	adds	r4, #1
 800bb76:	9305      	str	r3, [sp, #20]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	f04f 0c0a 	mov.w	ip, #10
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb84:	3a30      	subs	r2, #48	@ 0x30
 800bb86:	2a09      	cmp	r2, #9
 800bb88:	d903      	bls.n	800bb92 <_svfiprintf_r+0x1a6>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0c6      	beq.n	800bb1c <_svfiprintf_r+0x130>
 800bb8e:	9105      	str	r1, [sp, #20]
 800bb90:	e7c4      	b.n	800bb1c <_svfiprintf_r+0x130>
 800bb92:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb96:	4604      	mov	r4, r0
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e7f0      	b.n	800bb7e <_svfiprintf_r+0x192>
 800bb9c:	ab03      	add	r3, sp, #12
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	462a      	mov	r2, r5
 800bba2:	4b0e      	ldr	r3, [pc, #56]	@ (800bbdc <_svfiprintf_r+0x1f0>)
 800bba4:	a904      	add	r1, sp, #16
 800bba6:	4638      	mov	r0, r7
 800bba8:	f7fc fbb8 	bl	800831c <_printf_float>
 800bbac:	1c42      	adds	r2, r0, #1
 800bbae:	4606      	mov	r6, r0
 800bbb0:	d1d6      	bne.n	800bb60 <_svfiprintf_r+0x174>
 800bbb2:	89ab      	ldrh	r3, [r5, #12]
 800bbb4:	065b      	lsls	r3, r3, #25
 800bbb6:	f53f af2d 	bmi.w	800ba14 <_svfiprintf_r+0x28>
 800bbba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbbc:	e72c      	b.n	800ba18 <_svfiprintf_r+0x2c>
 800bbbe:	ab03      	add	r3, sp, #12
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4b05      	ldr	r3, [pc, #20]	@ (800bbdc <_svfiprintf_r+0x1f0>)
 800bbc6:	a904      	add	r1, sp, #16
 800bbc8:	4638      	mov	r0, r7
 800bbca:	f7fc fe3f 	bl	800884c <_printf_i>
 800bbce:	e7ed      	b.n	800bbac <_svfiprintf_r+0x1c0>
 800bbd0:	0800d469 	.word	0x0800d469
 800bbd4:	0800d473 	.word	0x0800d473
 800bbd8:	0800831d 	.word	0x0800831d
 800bbdc:	0800b935 	.word	0x0800b935
 800bbe0:	0800d46f 	.word	0x0800d46f

0800bbe4 <__sfputc_r>:
 800bbe4:	6893      	ldr	r3, [r2, #8]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	b410      	push	{r4}
 800bbec:	6093      	str	r3, [r2, #8]
 800bbee:	da08      	bge.n	800bc02 <__sfputc_r+0x1e>
 800bbf0:	6994      	ldr	r4, [r2, #24]
 800bbf2:	42a3      	cmp	r3, r4
 800bbf4:	db01      	blt.n	800bbfa <__sfputc_r+0x16>
 800bbf6:	290a      	cmp	r1, #10
 800bbf8:	d103      	bne.n	800bc02 <__sfputc_r+0x1e>
 800bbfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbfe:	f7fd baee 	b.w	80091de <__swbuf_r>
 800bc02:	6813      	ldr	r3, [r2, #0]
 800bc04:	1c58      	adds	r0, r3, #1
 800bc06:	6010      	str	r0, [r2, #0]
 800bc08:	7019      	strb	r1, [r3, #0]
 800bc0a:	4608      	mov	r0, r1
 800bc0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <__sfputs_r>:
 800bc12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc14:	4606      	mov	r6, r0
 800bc16:	460f      	mov	r7, r1
 800bc18:	4614      	mov	r4, r2
 800bc1a:	18d5      	adds	r5, r2, r3
 800bc1c:	42ac      	cmp	r4, r5
 800bc1e:	d101      	bne.n	800bc24 <__sfputs_r+0x12>
 800bc20:	2000      	movs	r0, #0
 800bc22:	e007      	b.n	800bc34 <__sfputs_r+0x22>
 800bc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc28:	463a      	mov	r2, r7
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f7ff ffda 	bl	800bbe4 <__sfputc_r>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d1f3      	bne.n	800bc1c <__sfputs_r+0xa>
 800bc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc38 <_vfiprintf_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	b09d      	sub	sp, #116	@ 0x74
 800bc40:	4614      	mov	r4, r2
 800bc42:	4698      	mov	r8, r3
 800bc44:	4606      	mov	r6, r0
 800bc46:	b118      	cbz	r0, 800bc50 <_vfiprintf_r+0x18>
 800bc48:	6a03      	ldr	r3, [r0, #32]
 800bc4a:	b90b      	cbnz	r3, 800bc50 <_vfiprintf_r+0x18>
 800bc4c:	f7fd f9be 	bl	8008fcc <__sinit>
 800bc50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc52:	07d9      	lsls	r1, r3, #31
 800bc54:	d405      	bmi.n	800bc62 <_vfiprintf_r+0x2a>
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	059a      	lsls	r2, r3, #22
 800bc5a:	d402      	bmi.n	800bc62 <_vfiprintf_r+0x2a>
 800bc5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc5e:	f7fd fbd0 	bl	8009402 <__retarget_lock_acquire_recursive>
 800bc62:	89ab      	ldrh	r3, [r5, #12]
 800bc64:	071b      	lsls	r3, r3, #28
 800bc66:	d501      	bpl.n	800bc6c <_vfiprintf_r+0x34>
 800bc68:	692b      	ldr	r3, [r5, #16]
 800bc6a:	b99b      	cbnz	r3, 800bc94 <_vfiprintf_r+0x5c>
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7fd faf4 	bl	800925c <__swsetup_r>
 800bc74:	b170      	cbz	r0, 800bc94 <_vfiprintf_r+0x5c>
 800bc76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc78:	07dc      	lsls	r4, r3, #31
 800bc7a:	d504      	bpl.n	800bc86 <_vfiprintf_r+0x4e>
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	b01d      	add	sp, #116	@ 0x74
 800bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc86:	89ab      	ldrh	r3, [r5, #12]
 800bc88:	0598      	lsls	r0, r3, #22
 800bc8a:	d4f7      	bmi.n	800bc7c <_vfiprintf_r+0x44>
 800bc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc8e:	f7fd fbb9 	bl	8009404 <__retarget_lock_release_recursive>
 800bc92:	e7f3      	b.n	800bc7c <_vfiprintf_r+0x44>
 800bc94:	2300      	movs	r3, #0
 800bc96:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc98:	2320      	movs	r3, #32
 800bc9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bca2:	2330      	movs	r3, #48	@ 0x30
 800bca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be54 <_vfiprintf_r+0x21c>
 800bca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcac:	f04f 0901 	mov.w	r9, #1
 800bcb0:	4623      	mov	r3, r4
 800bcb2:	469a      	mov	sl, r3
 800bcb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcb8:	b10a      	cbz	r2, 800bcbe <_vfiprintf_r+0x86>
 800bcba:	2a25      	cmp	r2, #37	@ 0x25
 800bcbc:	d1f9      	bne.n	800bcb2 <_vfiprintf_r+0x7a>
 800bcbe:	ebba 0b04 	subs.w	fp, sl, r4
 800bcc2:	d00b      	beq.n	800bcdc <_vfiprintf_r+0xa4>
 800bcc4:	465b      	mov	r3, fp
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4630      	mov	r0, r6
 800bccc:	f7ff ffa1 	bl	800bc12 <__sfputs_r>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	f000 80a7 	beq.w	800be24 <_vfiprintf_r+0x1ec>
 800bcd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcd8:	445a      	add	r2, fp
 800bcda:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcdc:	f89a 3000 	ldrb.w	r3, [sl]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 809f 	beq.w	800be24 <_vfiprintf_r+0x1ec>
 800bce6:	2300      	movs	r3, #0
 800bce8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcf0:	f10a 0a01 	add.w	sl, sl, #1
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcfe:	4654      	mov	r4, sl
 800bd00:	2205      	movs	r2, #5
 800bd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd06:	4853      	ldr	r0, [pc, #332]	@ (800be54 <_vfiprintf_r+0x21c>)
 800bd08:	f7f4 fa82 	bl	8000210 <memchr>
 800bd0c:	9a04      	ldr	r2, [sp, #16]
 800bd0e:	b9d8      	cbnz	r0, 800bd48 <_vfiprintf_r+0x110>
 800bd10:	06d1      	lsls	r1, r2, #27
 800bd12:	bf44      	itt	mi
 800bd14:	2320      	movmi	r3, #32
 800bd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd1a:	0713      	lsls	r3, r2, #28
 800bd1c:	bf44      	itt	mi
 800bd1e:	232b      	movmi	r3, #43	@ 0x2b
 800bd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd24:	f89a 3000 	ldrb.w	r3, [sl]
 800bd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd2a:	d015      	beq.n	800bd58 <_vfiprintf_r+0x120>
 800bd2c:	9a07      	ldr	r2, [sp, #28]
 800bd2e:	4654      	mov	r4, sl
 800bd30:	2000      	movs	r0, #0
 800bd32:	f04f 0c0a 	mov.w	ip, #10
 800bd36:	4621      	mov	r1, r4
 800bd38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd3c:	3b30      	subs	r3, #48	@ 0x30
 800bd3e:	2b09      	cmp	r3, #9
 800bd40:	d94b      	bls.n	800bdda <_vfiprintf_r+0x1a2>
 800bd42:	b1b0      	cbz	r0, 800bd72 <_vfiprintf_r+0x13a>
 800bd44:	9207      	str	r2, [sp, #28]
 800bd46:	e014      	b.n	800bd72 <_vfiprintf_r+0x13a>
 800bd48:	eba0 0308 	sub.w	r3, r0, r8
 800bd4c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd50:	4313      	orrs	r3, r2
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	46a2      	mov	sl, r4
 800bd56:	e7d2      	b.n	800bcfe <_vfiprintf_r+0xc6>
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	1d19      	adds	r1, r3, #4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	9103      	str	r1, [sp, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	bfbb      	ittet	lt
 800bd64:	425b      	neglt	r3, r3
 800bd66:	f042 0202 	orrlt.w	r2, r2, #2
 800bd6a:	9307      	strge	r3, [sp, #28]
 800bd6c:	9307      	strlt	r3, [sp, #28]
 800bd6e:	bfb8      	it	lt
 800bd70:	9204      	strlt	r2, [sp, #16]
 800bd72:	7823      	ldrb	r3, [r4, #0]
 800bd74:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd76:	d10a      	bne.n	800bd8e <_vfiprintf_r+0x156>
 800bd78:	7863      	ldrb	r3, [r4, #1]
 800bd7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd7c:	d132      	bne.n	800bde4 <_vfiprintf_r+0x1ac>
 800bd7e:	9b03      	ldr	r3, [sp, #12]
 800bd80:	1d1a      	adds	r2, r3, #4
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	9203      	str	r2, [sp, #12]
 800bd86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd8a:	3402      	adds	r4, #2
 800bd8c:	9305      	str	r3, [sp, #20]
 800bd8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be64 <_vfiprintf_r+0x22c>
 800bd92:	7821      	ldrb	r1, [r4, #0]
 800bd94:	2203      	movs	r2, #3
 800bd96:	4650      	mov	r0, sl
 800bd98:	f7f4 fa3a 	bl	8000210 <memchr>
 800bd9c:	b138      	cbz	r0, 800bdae <_vfiprintf_r+0x176>
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	eba0 000a 	sub.w	r0, r0, sl
 800bda4:	2240      	movs	r2, #64	@ 0x40
 800bda6:	4082      	lsls	r2, r0
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	3401      	adds	r4, #1
 800bdac:	9304      	str	r3, [sp, #16]
 800bdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb2:	4829      	ldr	r0, [pc, #164]	@ (800be58 <_vfiprintf_r+0x220>)
 800bdb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdb8:	2206      	movs	r2, #6
 800bdba:	f7f4 fa29 	bl	8000210 <memchr>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d03f      	beq.n	800be42 <_vfiprintf_r+0x20a>
 800bdc2:	4b26      	ldr	r3, [pc, #152]	@ (800be5c <_vfiprintf_r+0x224>)
 800bdc4:	bb1b      	cbnz	r3, 800be0e <_vfiprintf_r+0x1d6>
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	3307      	adds	r3, #7
 800bdca:	f023 0307 	bic.w	r3, r3, #7
 800bdce:	3308      	adds	r3, #8
 800bdd0:	9303      	str	r3, [sp, #12]
 800bdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd4:	443b      	add	r3, r7
 800bdd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdd8:	e76a      	b.n	800bcb0 <_vfiprintf_r+0x78>
 800bdda:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdde:	460c      	mov	r4, r1
 800bde0:	2001      	movs	r0, #1
 800bde2:	e7a8      	b.n	800bd36 <_vfiprintf_r+0xfe>
 800bde4:	2300      	movs	r3, #0
 800bde6:	3401      	adds	r4, #1
 800bde8:	9305      	str	r3, [sp, #20]
 800bdea:	4619      	mov	r1, r3
 800bdec:	f04f 0c0a 	mov.w	ip, #10
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf6:	3a30      	subs	r2, #48	@ 0x30
 800bdf8:	2a09      	cmp	r2, #9
 800bdfa:	d903      	bls.n	800be04 <_vfiprintf_r+0x1cc>
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d0c6      	beq.n	800bd8e <_vfiprintf_r+0x156>
 800be00:	9105      	str	r1, [sp, #20]
 800be02:	e7c4      	b.n	800bd8e <_vfiprintf_r+0x156>
 800be04:	fb0c 2101 	mla	r1, ip, r1, r2
 800be08:	4604      	mov	r4, r0
 800be0a:	2301      	movs	r3, #1
 800be0c:	e7f0      	b.n	800bdf0 <_vfiprintf_r+0x1b8>
 800be0e:	ab03      	add	r3, sp, #12
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	462a      	mov	r2, r5
 800be14:	4b12      	ldr	r3, [pc, #72]	@ (800be60 <_vfiprintf_r+0x228>)
 800be16:	a904      	add	r1, sp, #16
 800be18:	4630      	mov	r0, r6
 800be1a:	f7fc fa7f 	bl	800831c <_printf_float>
 800be1e:	4607      	mov	r7, r0
 800be20:	1c78      	adds	r0, r7, #1
 800be22:	d1d6      	bne.n	800bdd2 <_vfiprintf_r+0x19a>
 800be24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be26:	07d9      	lsls	r1, r3, #31
 800be28:	d405      	bmi.n	800be36 <_vfiprintf_r+0x1fe>
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	059a      	lsls	r2, r3, #22
 800be2e:	d402      	bmi.n	800be36 <_vfiprintf_r+0x1fe>
 800be30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be32:	f7fd fae7 	bl	8009404 <__retarget_lock_release_recursive>
 800be36:	89ab      	ldrh	r3, [r5, #12]
 800be38:	065b      	lsls	r3, r3, #25
 800be3a:	f53f af1f 	bmi.w	800bc7c <_vfiprintf_r+0x44>
 800be3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be40:	e71e      	b.n	800bc80 <_vfiprintf_r+0x48>
 800be42:	ab03      	add	r3, sp, #12
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	462a      	mov	r2, r5
 800be48:	4b05      	ldr	r3, [pc, #20]	@ (800be60 <_vfiprintf_r+0x228>)
 800be4a:	a904      	add	r1, sp, #16
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7fc fcfd 	bl	800884c <_printf_i>
 800be52:	e7e4      	b.n	800be1e <_vfiprintf_r+0x1e6>
 800be54:	0800d469 	.word	0x0800d469
 800be58:	0800d473 	.word	0x0800d473
 800be5c:	0800831d 	.word	0x0800831d
 800be60:	0800bc13 	.word	0x0800bc13
 800be64:	0800d46f 	.word	0x0800d46f

0800be68 <__sflush_r>:
 800be68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be70:	0716      	lsls	r6, r2, #28
 800be72:	4605      	mov	r5, r0
 800be74:	460c      	mov	r4, r1
 800be76:	d454      	bmi.n	800bf22 <__sflush_r+0xba>
 800be78:	684b      	ldr	r3, [r1, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc02      	bgt.n	800be84 <__sflush_r+0x1c>
 800be7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	dd48      	ble.n	800bf16 <__sflush_r+0xae>
 800be84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be86:	2e00      	cmp	r6, #0
 800be88:	d045      	beq.n	800bf16 <__sflush_r+0xae>
 800be8a:	2300      	movs	r3, #0
 800be8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be90:	682f      	ldr	r7, [r5, #0]
 800be92:	6a21      	ldr	r1, [r4, #32]
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	d030      	beq.n	800befa <__sflush_r+0x92>
 800be98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	0759      	lsls	r1, r3, #29
 800be9e:	d505      	bpl.n	800beac <__sflush_r+0x44>
 800bea0:	6863      	ldr	r3, [r4, #4]
 800bea2:	1ad2      	subs	r2, r2, r3
 800bea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bea6:	b10b      	cbz	r3, 800beac <__sflush_r+0x44>
 800bea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800beaa:	1ad2      	subs	r2, r2, r3
 800beac:	2300      	movs	r3, #0
 800beae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beb0:	6a21      	ldr	r1, [r4, #32]
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b0      	blx	r6
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	d106      	bne.n	800beca <__sflush_r+0x62>
 800bebc:	6829      	ldr	r1, [r5, #0]
 800bebe:	291d      	cmp	r1, #29
 800bec0:	d82b      	bhi.n	800bf1a <__sflush_r+0xb2>
 800bec2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf6c <__sflush_r+0x104>)
 800bec4:	410a      	asrs	r2, r1
 800bec6:	07d6      	lsls	r6, r2, #31
 800bec8:	d427      	bmi.n	800bf1a <__sflush_r+0xb2>
 800beca:	2200      	movs	r2, #0
 800becc:	6062      	str	r2, [r4, #4]
 800bece:	04d9      	lsls	r1, r3, #19
 800bed0:	6922      	ldr	r2, [r4, #16]
 800bed2:	6022      	str	r2, [r4, #0]
 800bed4:	d504      	bpl.n	800bee0 <__sflush_r+0x78>
 800bed6:	1c42      	adds	r2, r0, #1
 800bed8:	d101      	bne.n	800bede <__sflush_r+0x76>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	b903      	cbnz	r3, 800bee0 <__sflush_r+0x78>
 800bede:	6560      	str	r0, [r4, #84]	@ 0x54
 800bee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bee2:	602f      	str	r7, [r5, #0]
 800bee4:	b1b9      	cbz	r1, 800bf16 <__sflush_r+0xae>
 800bee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beea:	4299      	cmp	r1, r3
 800beec:	d002      	beq.n	800bef4 <__sflush_r+0x8c>
 800beee:	4628      	mov	r0, r5
 800bef0:	f7fe f8ea 	bl	800a0c8 <_free_r>
 800bef4:	2300      	movs	r3, #0
 800bef6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bef8:	e00d      	b.n	800bf16 <__sflush_r+0xae>
 800befa:	2301      	movs	r3, #1
 800befc:	4628      	mov	r0, r5
 800befe:	47b0      	blx	r6
 800bf00:	4602      	mov	r2, r0
 800bf02:	1c50      	adds	r0, r2, #1
 800bf04:	d1c9      	bne.n	800be9a <__sflush_r+0x32>
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0c6      	beq.n	800be9a <__sflush_r+0x32>
 800bf0c:	2b1d      	cmp	r3, #29
 800bf0e:	d001      	beq.n	800bf14 <__sflush_r+0xac>
 800bf10:	2b16      	cmp	r3, #22
 800bf12:	d11e      	bne.n	800bf52 <__sflush_r+0xea>
 800bf14:	602f      	str	r7, [r5, #0]
 800bf16:	2000      	movs	r0, #0
 800bf18:	e022      	b.n	800bf60 <__sflush_r+0xf8>
 800bf1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf1e:	b21b      	sxth	r3, r3
 800bf20:	e01b      	b.n	800bf5a <__sflush_r+0xf2>
 800bf22:	690f      	ldr	r7, [r1, #16]
 800bf24:	2f00      	cmp	r7, #0
 800bf26:	d0f6      	beq.n	800bf16 <__sflush_r+0xae>
 800bf28:	0793      	lsls	r3, r2, #30
 800bf2a:	680e      	ldr	r6, [r1, #0]
 800bf2c:	bf08      	it	eq
 800bf2e:	694b      	ldreq	r3, [r1, #20]
 800bf30:	600f      	str	r7, [r1, #0]
 800bf32:	bf18      	it	ne
 800bf34:	2300      	movne	r3, #0
 800bf36:	eba6 0807 	sub.w	r8, r6, r7
 800bf3a:	608b      	str	r3, [r1, #8]
 800bf3c:	f1b8 0f00 	cmp.w	r8, #0
 800bf40:	dde9      	ble.n	800bf16 <__sflush_r+0xae>
 800bf42:	6a21      	ldr	r1, [r4, #32]
 800bf44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf46:	4643      	mov	r3, r8
 800bf48:	463a      	mov	r2, r7
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	47b0      	blx	r6
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	dc08      	bgt.n	800bf64 <__sflush_r+0xfc>
 800bf52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf64:	4407      	add	r7, r0
 800bf66:	eba8 0800 	sub.w	r8, r8, r0
 800bf6a:	e7e7      	b.n	800bf3c <__sflush_r+0xd4>
 800bf6c:	dfbffffe 	.word	0xdfbffffe

0800bf70 <_fflush_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	690b      	ldr	r3, [r1, #16]
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b913      	cbnz	r3, 800bf80 <_fflush_r+0x10>
 800bf7a:	2500      	movs	r5, #0
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	b118      	cbz	r0, 800bf8a <_fflush_r+0x1a>
 800bf82:	6a03      	ldr	r3, [r0, #32]
 800bf84:	b90b      	cbnz	r3, 800bf8a <_fflush_r+0x1a>
 800bf86:	f7fd f821 	bl	8008fcc <__sinit>
 800bf8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0f3      	beq.n	800bf7a <_fflush_r+0xa>
 800bf92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf94:	07d0      	lsls	r0, r2, #31
 800bf96:	d404      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf98:	0599      	lsls	r1, r3, #22
 800bf9a:	d402      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf9e:	f7fd fa30 	bl	8009402 <__retarget_lock_acquire_recursive>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	f7ff ff5f 	bl	800be68 <__sflush_r>
 800bfaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfac:	07da      	lsls	r2, r3, #31
 800bfae:	4605      	mov	r5, r0
 800bfb0:	d4e4      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	059b      	lsls	r3, r3, #22
 800bfb6:	d4e1      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfba:	f7fd fa23 	bl	8009404 <__retarget_lock_release_recursive>
 800bfbe:	e7dd      	b.n	800bf7c <_fflush_r+0xc>

0800bfc0 <__swhatbuf_r>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	b096      	sub	sp, #88	@ 0x58
 800bfcc:	4615      	mov	r5, r2
 800bfce:	461e      	mov	r6, r3
 800bfd0:	da0d      	bge.n	800bfee <__swhatbuf_r+0x2e>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfd8:	f04f 0100 	mov.w	r1, #0
 800bfdc:	bf14      	ite	ne
 800bfde:	2340      	movne	r3, #64	@ 0x40
 800bfe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	6031      	str	r1, [r6, #0]
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	b016      	add	sp, #88	@ 0x58
 800bfec:	bd70      	pop	{r4, r5, r6, pc}
 800bfee:	466a      	mov	r2, sp
 800bff0:	f000 f874 	bl	800c0dc <_fstat_r>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	dbec      	blt.n	800bfd2 <__swhatbuf_r+0x12>
 800bff8:	9901      	ldr	r1, [sp, #4]
 800bffa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bffe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c002:	4259      	negs	r1, r3
 800c004:	4159      	adcs	r1, r3
 800c006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c00a:	e7eb      	b.n	800bfe4 <__swhatbuf_r+0x24>

0800c00c <__smakebuf_r>:
 800c00c:	898b      	ldrh	r3, [r1, #12]
 800c00e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c010:	079d      	lsls	r5, r3, #30
 800c012:	4606      	mov	r6, r0
 800c014:	460c      	mov	r4, r1
 800c016:	d507      	bpl.n	800c028 <__smakebuf_r+0x1c>
 800c018:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	2301      	movs	r3, #1
 800c022:	6163      	str	r3, [r4, #20]
 800c024:	b003      	add	sp, #12
 800c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c028:	ab01      	add	r3, sp, #4
 800c02a:	466a      	mov	r2, sp
 800c02c:	f7ff ffc8 	bl	800bfc0 <__swhatbuf_r>
 800c030:	9f00      	ldr	r7, [sp, #0]
 800c032:	4605      	mov	r5, r0
 800c034:	4639      	mov	r1, r7
 800c036:	4630      	mov	r0, r6
 800c038:	f7fe f8ba 	bl	800a1b0 <_malloc_r>
 800c03c:	b948      	cbnz	r0, 800c052 <__smakebuf_r+0x46>
 800c03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c042:	059a      	lsls	r2, r3, #22
 800c044:	d4ee      	bmi.n	800c024 <__smakebuf_r+0x18>
 800c046:	f023 0303 	bic.w	r3, r3, #3
 800c04a:	f043 0302 	orr.w	r3, r3, #2
 800c04e:	81a3      	strh	r3, [r4, #12]
 800c050:	e7e2      	b.n	800c018 <__smakebuf_r+0xc>
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	6020      	str	r0, [r4, #0]
 800c056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c05a:	81a3      	strh	r3, [r4, #12]
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c062:	b15b      	cbz	r3, 800c07c <__smakebuf_r+0x70>
 800c064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c068:	4630      	mov	r0, r6
 800c06a:	f000 f849 	bl	800c100 <_isatty_r>
 800c06e:	b128      	cbz	r0, 800c07c <__smakebuf_r+0x70>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	431d      	orrs	r5, r3
 800c080:	81a5      	strh	r5, [r4, #12]
 800c082:	e7cf      	b.n	800c024 <__smakebuf_r+0x18>

0800c084 <memmove>:
 800c084:	4288      	cmp	r0, r1
 800c086:	b510      	push	{r4, lr}
 800c088:	eb01 0402 	add.w	r4, r1, r2
 800c08c:	d902      	bls.n	800c094 <memmove+0x10>
 800c08e:	4284      	cmp	r4, r0
 800c090:	4623      	mov	r3, r4
 800c092:	d807      	bhi.n	800c0a4 <memmove+0x20>
 800c094:	1e43      	subs	r3, r0, #1
 800c096:	42a1      	cmp	r1, r4
 800c098:	d008      	beq.n	800c0ac <memmove+0x28>
 800c09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0a2:	e7f8      	b.n	800c096 <memmove+0x12>
 800c0a4:	4402      	add	r2, r0
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	428a      	cmp	r2, r1
 800c0aa:	d100      	bne.n	800c0ae <memmove+0x2a>
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0b6:	e7f7      	b.n	800c0a8 <memmove+0x24>

0800c0b8 <strncmp>:
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	b16a      	cbz	r2, 800c0d8 <strncmp+0x20>
 800c0bc:	3901      	subs	r1, #1
 800c0be:	1884      	adds	r4, r0, r2
 800c0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d103      	bne.n	800c0d4 <strncmp+0x1c>
 800c0cc:	42a0      	cmp	r0, r4
 800c0ce:	d001      	beq.n	800c0d4 <strncmp+0x1c>
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	d1f5      	bne.n	800c0c0 <strncmp+0x8>
 800c0d4:	1ad0      	subs	r0, r2, r3
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	4610      	mov	r0, r2
 800c0da:	e7fc      	b.n	800c0d6 <strncmp+0x1e>

0800c0dc <_fstat_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d07      	ldr	r5, [pc, #28]	@ (800c0fc <_fstat_r+0x20>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	602b      	str	r3, [r5, #0]
 800c0ea:	f7f7 f88b 	bl	8003204 <_fstat>
 800c0ee:	1c43      	adds	r3, r0, #1
 800c0f0:	d102      	bne.n	800c0f8 <_fstat_r+0x1c>
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	b103      	cbz	r3, 800c0f8 <_fstat_r+0x1c>
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	bd38      	pop	{r3, r4, r5, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20000760 	.word	0x20000760

0800c100 <_isatty_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d06      	ldr	r5, [pc, #24]	@ (800c11c <_isatty_r+0x1c>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	f7f7 f88a 	bl	8003224 <_isatty>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d102      	bne.n	800c11a <_isatty_r+0x1a>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	b103      	cbz	r3, 800c11a <_isatty_r+0x1a>
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	20000760 	.word	0x20000760

0800c120 <_sbrk_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d06      	ldr	r5, [pc, #24]	@ (800c13c <_sbrk_r+0x1c>)
 800c124:	2300      	movs	r3, #0
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	602b      	str	r3, [r5, #0]
 800c12c:	f7f7 f892 	bl	8003254 <_sbrk>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_sbrk_r+0x1a>
 800c134:	682b      	ldr	r3, [r5, #0]
 800c136:	b103      	cbz	r3, 800c13a <_sbrk_r+0x1a>
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	20000760 	.word	0x20000760

0800c140 <nan>:
 800c140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c148 <nan+0x8>
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	00000000 	.word	0x00000000
 800c14c:	7ff80000 	.word	0x7ff80000

0800c150 <__assert_func>:
 800c150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c152:	4614      	mov	r4, r2
 800c154:	461a      	mov	r2, r3
 800c156:	4b09      	ldr	r3, [pc, #36]	@ (800c17c <__assert_func+0x2c>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4605      	mov	r5, r0
 800c15c:	68d8      	ldr	r0, [r3, #12]
 800c15e:	b954      	cbnz	r4, 800c176 <__assert_func+0x26>
 800c160:	4b07      	ldr	r3, [pc, #28]	@ (800c180 <__assert_func+0x30>)
 800c162:	461c      	mov	r4, r3
 800c164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c168:	9100      	str	r1, [sp, #0]
 800c16a:	462b      	mov	r3, r5
 800c16c:	4905      	ldr	r1, [pc, #20]	@ (800c184 <__assert_func+0x34>)
 800c16e:	f000 fba7 	bl	800c8c0 <fiprintf>
 800c172:	f000 fbb7 	bl	800c8e4 <abort>
 800c176:	4b04      	ldr	r3, [pc, #16]	@ (800c188 <__assert_func+0x38>)
 800c178:	e7f4      	b.n	800c164 <__assert_func+0x14>
 800c17a:	bf00      	nop
 800c17c:	20000044 	.word	0x20000044
 800c180:	0800d4bd 	.word	0x0800d4bd
 800c184:	0800d48f 	.word	0x0800d48f
 800c188:	0800d482 	.word	0x0800d482

0800c18c <_calloc_r>:
 800c18c:	b570      	push	{r4, r5, r6, lr}
 800c18e:	fba1 5402 	umull	r5, r4, r1, r2
 800c192:	b93c      	cbnz	r4, 800c1a4 <_calloc_r+0x18>
 800c194:	4629      	mov	r1, r5
 800c196:	f7fe f80b 	bl	800a1b0 <_malloc_r>
 800c19a:	4606      	mov	r6, r0
 800c19c:	b928      	cbnz	r0, 800c1aa <_calloc_r+0x1e>
 800c19e:	2600      	movs	r6, #0
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	220c      	movs	r2, #12
 800c1a6:	6002      	str	r2, [r0, #0]
 800c1a8:	e7f9      	b.n	800c19e <_calloc_r+0x12>
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	f7fd f8ab 	bl	8009308 <memset>
 800c1b2:	e7f5      	b.n	800c1a0 <_calloc_r+0x14>

0800c1b4 <rshift>:
 800c1b4:	6903      	ldr	r3, [r0, #16]
 800c1b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c1ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c1c2:	f100 0414 	add.w	r4, r0, #20
 800c1c6:	dd45      	ble.n	800c254 <rshift+0xa0>
 800c1c8:	f011 011f 	ands.w	r1, r1, #31
 800c1cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c1d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c1d4:	d10c      	bne.n	800c1f0 <rshift+0x3c>
 800c1d6:	f100 0710 	add.w	r7, r0, #16
 800c1da:	4629      	mov	r1, r5
 800c1dc:	42b1      	cmp	r1, r6
 800c1de:	d334      	bcc.n	800c24a <rshift+0x96>
 800c1e0:	1a9b      	subs	r3, r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	1eea      	subs	r2, r5, #3
 800c1e6:	4296      	cmp	r6, r2
 800c1e8:	bf38      	it	cc
 800c1ea:	2300      	movcc	r3, #0
 800c1ec:	4423      	add	r3, r4
 800c1ee:	e015      	b.n	800c21c <rshift+0x68>
 800c1f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c1f4:	f1c1 0820 	rsb	r8, r1, #32
 800c1f8:	40cf      	lsrs	r7, r1
 800c1fa:	f105 0e04 	add.w	lr, r5, #4
 800c1fe:	46a1      	mov	r9, r4
 800c200:	4576      	cmp	r6, lr
 800c202:	46f4      	mov	ip, lr
 800c204:	d815      	bhi.n	800c232 <rshift+0x7e>
 800c206:	1a9a      	subs	r2, r3, r2
 800c208:	0092      	lsls	r2, r2, #2
 800c20a:	3a04      	subs	r2, #4
 800c20c:	3501      	adds	r5, #1
 800c20e:	42ae      	cmp	r6, r5
 800c210:	bf38      	it	cc
 800c212:	2200      	movcc	r2, #0
 800c214:	18a3      	adds	r3, r4, r2
 800c216:	50a7      	str	r7, [r4, r2]
 800c218:	b107      	cbz	r7, 800c21c <rshift+0x68>
 800c21a:	3304      	adds	r3, #4
 800c21c:	1b1a      	subs	r2, r3, r4
 800c21e:	42a3      	cmp	r3, r4
 800c220:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c224:	bf08      	it	eq
 800c226:	2300      	moveq	r3, #0
 800c228:	6102      	str	r2, [r0, #16]
 800c22a:	bf08      	it	eq
 800c22c:	6143      	streq	r3, [r0, #20]
 800c22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c232:	f8dc c000 	ldr.w	ip, [ip]
 800c236:	fa0c fc08 	lsl.w	ip, ip, r8
 800c23a:	ea4c 0707 	orr.w	r7, ip, r7
 800c23e:	f849 7b04 	str.w	r7, [r9], #4
 800c242:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c246:	40cf      	lsrs	r7, r1
 800c248:	e7da      	b.n	800c200 <rshift+0x4c>
 800c24a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c24e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c252:	e7c3      	b.n	800c1dc <rshift+0x28>
 800c254:	4623      	mov	r3, r4
 800c256:	e7e1      	b.n	800c21c <rshift+0x68>

0800c258 <__hexdig_fun>:
 800c258:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d802      	bhi.n	800c266 <__hexdig_fun+0xe>
 800c260:	3820      	subs	r0, #32
 800c262:	b2c0      	uxtb	r0, r0
 800c264:	4770      	bx	lr
 800c266:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c26a:	2b05      	cmp	r3, #5
 800c26c:	d801      	bhi.n	800c272 <__hexdig_fun+0x1a>
 800c26e:	3847      	subs	r0, #71	@ 0x47
 800c270:	e7f7      	b.n	800c262 <__hexdig_fun+0xa>
 800c272:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c276:	2b05      	cmp	r3, #5
 800c278:	d801      	bhi.n	800c27e <__hexdig_fun+0x26>
 800c27a:	3827      	subs	r0, #39	@ 0x27
 800c27c:	e7f1      	b.n	800c262 <__hexdig_fun+0xa>
 800c27e:	2000      	movs	r0, #0
 800c280:	4770      	bx	lr
	...

0800c284 <__gethex>:
 800c284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c288:	b085      	sub	sp, #20
 800c28a:	468a      	mov	sl, r1
 800c28c:	9302      	str	r3, [sp, #8]
 800c28e:	680b      	ldr	r3, [r1, #0]
 800c290:	9001      	str	r0, [sp, #4]
 800c292:	4690      	mov	r8, r2
 800c294:	1c9c      	adds	r4, r3, #2
 800c296:	46a1      	mov	r9, r4
 800c298:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c29c:	2830      	cmp	r0, #48	@ 0x30
 800c29e:	d0fa      	beq.n	800c296 <__gethex+0x12>
 800c2a0:	eba9 0303 	sub.w	r3, r9, r3
 800c2a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c2a8:	f7ff ffd6 	bl	800c258 <__hexdig_fun>
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d168      	bne.n	800c384 <__gethex+0x100>
 800c2b2:	49a0      	ldr	r1, [pc, #640]	@ (800c534 <__gethex+0x2b0>)
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	4648      	mov	r0, r9
 800c2b8:	f7ff fefe 	bl	800c0b8 <strncmp>
 800c2bc:	4607      	mov	r7, r0
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d167      	bne.n	800c392 <__gethex+0x10e>
 800c2c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c2c6:	4626      	mov	r6, r4
 800c2c8:	f7ff ffc6 	bl	800c258 <__hexdig_fun>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d062      	beq.n	800c396 <__gethex+0x112>
 800c2d0:	4623      	mov	r3, r4
 800c2d2:	7818      	ldrb	r0, [r3, #0]
 800c2d4:	2830      	cmp	r0, #48	@ 0x30
 800c2d6:	4699      	mov	r9, r3
 800c2d8:	f103 0301 	add.w	r3, r3, #1
 800c2dc:	d0f9      	beq.n	800c2d2 <__gethex+0x4e>
 800c2de:	f7ff ffbb 	bl	800c258 <__hexdig_fun>
 800c2e2:	fab0 f580 	clz	r5, r0
 800c2e6:	096d      	lsrs	r5, r5, #5
 800c2e8:	f04f 0b01 	mov.w	fp, #1
 800c2ec:	464a      	mov	r2, r9
 800c2ee:	4616      	mov	r6, r2
 800c2f0:	3201      	adds	r2, #1
 800c2f2:	7830      	ldrb	r0, [r6, #0]
 800c2f4:	f7ff ffb0 	bl	800c258 <__hexdig_fun>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d1f8      	bne.n	800c2ee <__gethex+0x6a>
 800c2fc:	498d      	ldr	r1, [pc, #564]	@ (800c534 <__gethex+0x2b0>)
 800c2fe:	2201      	movs	r2, #1
 800c300:	4630      	mov	r0, r6
 800c302:	f7ff fed9 	bl	800c0b8 <strncmp>
 800c306:	2800      	cmp	r0, #0
 800c308:	d13f      	bne.n	800c38a <__gethex+0x106>
 800c30a:	b944      	cbnz	r4, 800c31e <__gethex+0x9a>
 800c30c:	1c74      	adds	r4, r6, #1
 800c30e:	4622      	mov	r2, r4
 800c310:	4616      	mov	r6, r2
 800c312:	3201      	adds	r2, #1
 800c314:	7830      	ldrb	r0, [r6, #0]
 800c316:	f7ff ff9f 	bl	800c258 <__hexdig_fun>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d1f8      	bne.n	800c310 <__gethex+0x8c>
 800c31e:	1ba4      	subs	r4, r4, r6
 800c320:	00a7      	lsls	r7, r4, #2
 800c322:	7833      	ldrb	r3, [r6, #0]
 800c324:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c328:	2b50      	cmp	r3, #80	@ 0x50
 800c32a:	d13e      	bne.n	800c3aa <__gethex+0x126>
 800c32c:	7873      	ldrb	r3, [r6, #1]
 800c32e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c330:	d033      	beq.n	800c39a <__gethex+0x116>
 800c332:	2b2d      	cmp	r3, #45	@ 0x2d
 800c334:	d034      	beq.n	800c3a0 <__gethex+0x11c>
 800c336:	1c71      	adds	r1, r6, #1
 800c338:	2400      	movs	r4, #0
 800c33a:	7808      	ldrb	r0, [r1, #0]
 800c33c:	f7ff ff8c 	bl	800c258 <__hexdig_fun>
 800c340:	1e43      	subs	r3, r0, #1
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b18      	cmp	r3, #24
 800c346:	d830      	bhi.n	800c3aa <__gethex+0x126>
 800c348:	f1a0 0210 	sub.w	r2, r0, #16
 800c34c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c350:	f7ff ff82 	bl	800c258 <__hexdig_fun>
 800c354:	f100 3cff 	add.w	ip, r0, #4294967295
 800c358:	fa5f fc8c 	uxtb.w	ip, ip
 800c35c:	f1bc 0f18 	cmp.w	ip, #24
 800c360:	f04f 030a 	mov.w	r3, #10
 800c364:	d91e      	bls.n	800c3a4 <__gethex+0x120>
 800c366:	b104      	cbz	r4, 800c36a <__gethex+0xe6>
 800c368:	4252      	negs	r2, r2
 800c36a:	4417      	add	r7, r2
 800c36c:	f8ca 1000 	str.w	r1, [sl]
 800c370:	b1ed      	cbz	r5, 800c3ae <__gethex+0x12a>
 800c372:	f1bb 0f00 	cmp.w	fp, #0
 800c376:	bf0c      	ite	eq
 800c378:	2506      	moveq	r5, #6
 800c37a:	2500      	movne	r5, #0
 800c37c:	4628      	mov	r0, r5
 800c37e:	b005      	add	sp, #20
 800c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c384:	2500      	movs	r5, #0
 800c386:	462c      	mov	r4, r5
 800c388:	e7b0      	b.n	800c2ec <__gethex+0x68>
 800c38a:	2c00      	cmp	r4, #0
 800c38c:	d1c7      	bne.n	800c31e <__gethex+0x9a>
 800c38e:	4627      	mov	r7, r4
 800c390:	e7c7      	b.n	800c322 <__gethex+0x9e>
 800c392:	464e      	mov	r6, r9
 800c394:	462f      	mov	r7, r5
 800c396:	2501      	movs	r5, #1
 800c398:	e7c3      	b.n	800c322 <__gethex+0x9e>
 800c39a:	2400      	movs	r4, #0
 800c39c:	1cb1      	adds	r1, r6, #2
 800c39e:	e7cc      	b.n	800c33a <__gethex+0xb6>
 800c3a0:	2401      	movs	r4, #1
 800c3a2:	e7fb      	b.n	800c39c <__gethex+0x118>
 800c3a4:	fb03 0002 	mla	r0, r3, r2, r0
 800c3a8:	e7ce      	b.n	800c348 <__gethex+0xc4>
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	e7de      	b.n	800c36c <__gethex+0xe8>
 800c3ae:	eba6 0309 	sub.w	r3, r6, r9
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	2b07      	cmp	r3, #7
 800c3b8:	dc0a      	bgt.n	800c3d0 <__gethex+0x14c>
 800c3ba:	9801      	ldr	r0, [sp, #4]
 800c3bc:	f7fd ff84 	bl	800a2c8 <_Balloc>
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	b940      	cbnz	r0, 800c3d6 <__gethex+0x152>
 800c3c4:	4b5c      	ldr	r3, [pc, #368]	@ (800c538 <__gethex+0x2b4>)
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	21e4      	movs	r1, #228	@ 0xe4
 800c3ca:	485c      	ldr	r0, [pc, #368]	@ (800c53c <__gethex+0x2b8>)
 800c3cc:	f7ff fec0 	bl	800c150 <__assert_func>
 800c3d0:	3101      	adds	r1, #1
 800c3d2:	105b      	asrs	r3, r3, #1
 800c3d4:	e7ef      	b.n	800c3b6 <__gethex+0x132>
 800c3d6:	f100 0a14 	add.w	sl, r0, #20
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4655      	mov	r5, sl
 800c3de:	469b      	mov	fp, r3
 800c3e0:	45b1      	cmp	r9, r6
 800c3e2:	d337      	bcc.n	800c454 <__gethex+0x1d0>
 800c3e4:	f845 bb04 	str.w	fp, [r5], #4
 800c3e8:	eba5 050a 	sub.w	r5, r5, sl
 800c3ec:	10ad      	asrs	r5, r5, #2
 800c3ee:	6125      	str	r5, [r4, #16]
 800c3f0:	4658      	mov	r0, fp
 800c3f2:	f7fe f85b 	bl	800a4ac <__hi0bits>
 800c3f6:	016d      	lsls	r5, r5, #5
 800c3f8:	f8d8 6000 	ldr.w	r6, [r8]
 800c3fc:	1a2d      	subs	r5, r5, r0
 800c3fe:	42b5      	cmp	r5, r6
 800c400:	dd54      	ble.n	800c4ac <__gethex+0x228>
 800c402:	1bad      	subs	r5, r5, r6
 800c404:	4629      	mov	r1, r5
 800c406:	4620      	mov	r0, r4
 800c408:	f7fe fbef 	bl	800abea <__any_on>
 800c40c:	4681      	mov	r9, r0
 800c40e:	b178      	cbz	r0, 800c430 <__gethex+0x1ac>
 800c410:	1e6b      	subs	r3, r5, #1
 800c412:	1159      	asrs	r1, r3, #5
 800c414:	f003 021f 	and.w	r2, r3, #31
 800c418:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c41c:	f04f 0901 	mov.w	r9, #1
 800c420:	fa09 f202 	lsl.w	r2, r9, r2
 800c424:	420a      	tst	r2, r1
 800c426:	d003      	beq.n	800c430 <__gethex+0x1ac>
 800c428:	454b      	cmp	r3, r9
 800c42a:	dc36      	bgt.n	800c49a <__gethex+0x216>
 800c42c:	f04f 0902 	mov.w	r9, #2
 800c430:	4629      	mov	r1, r5
 800c432:	4620      	mov	r0, r4
 800c434:	f7ff febe 	bl	800c1b4 <rshift>
 800c438:	442f      	add	r7, r5
 800c43a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c43e:	42bb      	cmp	r3, r7
 800c440:	da42      	bge.n	800c4c8 <__gethex+0x244>
 800c442:	9801      	ldr	r0, [sp, #4]
 800c444:	4621      	mov	r1, r4
 800c446:	f7fd ff7f 	bl	800a348 <_Bfree>
 800c44a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c44c:	2300      	movs	r3, #0
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	25a3      	movs	r5, #163	@ 0xa3
 800c452:	e793      	b.n	800c37c <__gethex+0xf8>
 800c454:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c458:	2a2e      	cmp	r2, #46	@ 0x2e
 800c45a:	d012      	beq.n	800c482 <__gethex+0x1fe>
 800c45c:	2b20      	cmp	r3, #32
 800c45e:	d104      	bne.n	800c46a <__gethex+0x1e6>
 800c460:	f845 bb04 	str.w	fp, [r5], #4
 800c464:	f04f 0b00 	mov.w	fp, #0
 800c468:	465b      	mov	r3, fp
 800c46a:	7830      	ldrb	r0, [r6, #0]
 800c46c:	9303      	str	r3, [sp, #12]
 800c46e:	f7ff fef3 	bl	800c258 <__hexdig_fun>
 800c472:	9b03      	ldr	r3, [sp, #12]
 800c474:	f000 000f 	and.w	r0, r0, #15
 800c478:	4098      	lsls	r0, r3
 800c47a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c47e:	3304      	adds	r3, #4
 800c480:	e7ae      	b.n	800c3e0 <__gethex+0x15c>
 800c482:	45b1      	cmp	r9, r6
 800c484:	d8ea      	bhi.n	800c45c <__gethex+0x1d8>
 800c486:	492b      	ldr	r1, [pc, #172]	@ (800c534 <__gethex+0x2b0>)
 800c488:	9303      	str	r3, [sp, #12]
 800c48a:	2201      	movs	r2, #1
 800c48c:	4630      	mov	r0, r6
 800c48e:	f7ff fe13 	bl	800c0b8 <strncmp>
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	2800      	cmp	r0, #0
 800c496:	d1e1      	bne.n	800c45c <__gethex+0x1d8>
 800c498:	e7a2      	b.n	800c3e0 <__gethex+0x15c>
 800c49a:	1ea9      	subs	r1, r5, #2
 800c49c:	4620      	mov	r0, r4
 800c49e:	f7fe fba4 	bl	800abea <__any_on>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d0c2      	beq.n	800c42c <__gethex+0x1a8>
 800c4a6:	f04f 0903 	mov.w	r9, #3
 800c4aa:	e7c1      	b.n	800c430 <__gethex+0x1ac>
 800c4ac:	da09      	bge.n	800c4c2 <__gethex+0x23e>
 800c4ae:	1b75      	subs	r5, r6, r5
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	9801      	ldr	r0, [sp, #4]
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	f7fe f95f 	bl	800a778 <__lshift>
 800c4ba:	1b7f      	subs	r7, r7, r5
 800c4bc:	4604      	mov	r4, r0
 800c4be:	f100 0a14 	add.w	sl, r0, #20
 800c4c2:	f04f 0900 	mov.w	r9, #0
 800c4c6:	e7b8      	b.n	800c43a <__gethex+0x1b6>
 800c4c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c4cc:	42bd      	cmp	r5, r7
 800c4ce:	dd6f      	ble.n	800c5b0 <__gethex+0x32c>
 800c4d0:	1bed      	subs	r5, r5, r7
 800c4d2:	42ae      	cmp	r6, r5
 800c4d4:	dc34      	bgt.n	800c540 <__gethex+0x2bc>
 800c4d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d022      	beq.n	800c524 <__gethex+0x2a0>
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	d024      	beq.n	800c52c <__gethex+0x2a8>
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d115      	bne.n	800c512 <__gethex+0x28e>
 800c4e6:	42ae      	cmp	r6, r5
 800c4e8:	d113      	bne.n	800c512 <__gethex+0x28e>
 800c4ea:	2e01      	cmp	r6, #1
 800c4ec:	d10b      	bne.n	800c506 <__gethex+0x282>
 800c4ee:	9a02      	ldr	r2, [sp, #8]
 800c4f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c4f4:	6013      	str	r3, [r2, #0]
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	6123      	str	r3, [r4, #16]
 800c4fa:	f8ca 3000 	str.w	r3, [sl]
 800c4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c500:	2562      	movs	r5, #98	@ 0x62
 800c502:	601c      	str	r4, [r3, #0]
 800c504:	e73a      	b.n	800c37c <__gethex+0xf8>
 800c506:	1e71      	subs	r1, r6, #1
 800c508:	4620      	mov	r0, r4
 800c50a:	f7fe fb6e 	bl	800abea <__any_on>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d1ed      	bne.n	800c4ee <__gethex+0x26a>
 800c512:	9801      	ldr	r0, [sp, #4]
 800c514:	4621      	mov	r1, r4
 800c516:	f7fd ff17 	bl	800a348 <_Bfree>
 800c51a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c51c:	2300      	movs	r3, #0
 800c51e:	6013      	str	r3, [r2, #0]
 800c520:	2550      	movs	r5, #80	@ 0x50
 800c522:	e72b      	b.n	800c37c <__gethex+0xf8>
 800c524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1f3      	bne.n	800c512 <__gethex+0x28e>
 800c52a:	e7e0      	b.n	800c4ee <__gethex+0x26a>
 800c52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1dd      	bne.n	800c4ee <__gethex+0x26a>
 800c532:	e7ee      	b.n	800c512 <__gethex+0x28e>
 800c534:	0800d310 	.word	0x0800d310
 800c538:	0800d1a5 	.word	0x0800d1a5
 800c53c:	0800d4be 	.word	0x0800d4be
 800c540:	1e6f      	subs	r7, r5, #1
 800c542:	f1b9 0f00 	cmp.w	r9, #0
 800c546:	d130      	bne.n	800c5aa <__gethex+0x326>
 800c548:	b127      	cbz	r7, 800c554 <__gethex+0x2d0>
 800c54a:	4639      	mov	r1, r7
 800c54c:	4620      	mov	r0, r4
 800c54e:	f7fe fb4c 	bl	800abea <__any_on>
 800c552:	4681      	mov	r9, r0
 800c554:	117a      	asrs	r2, r7, #5
 800c556:	2301      	movs	r3, #1
 800c558:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c55c:	f007 071f 	and.w	r7, r7, #31
 800c560:	40bb      	lsls	r3, r7
 800c562:	4213      	tst	r3, r2
 800c564:	4629      	mov	r1, r5
 800c566:	4620      	mov	r0, r4
 800c568:	bf18      	it	ne
 800c56a:	f049 0902 	orrne.w	r9, r9, #2
 800c56e:	f7ff fe21 	bl	800c1b4 <rshift>
 800c572:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c576:	1b76      	subs	r6, r6, r5
 800c578:	2502      	movs	r5, #2
 800c57a:	f1b9 0f00 	cmp.w	r9, #0
 800c57e:	d047      	beq.n	800c610 <__gethex+0x38c>
 800c580:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d015      	beq.n	800c5b4 <__gethex+0x330>
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d017      	beq.n	800c5bc <__gethex+0x338>
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d109      	bne.n	800c5a4 <__gethex+0x320>
 800c590:	f019 0f02 	tst.w	r9, #2
 800c594:	d006      	beq.n	800c5a4 <__gethex+0x320>
 800c596:	f8da 3000 	ldr.w	r3, [sl]
 800c59a:	ea49 0903 	orr.w	r9, r9, r3
 800c59e:	f019 0f01 	tst.w	r9, #1
 800c5a2:	d10e      	bne.n	800c5c2 <__gethex+0x33e>
 800c5a4:	f045 0510 	orr.w	r5, r5, #16
 800c5a8:	e032      	b.n	800c610 <__gethex+0x38c>
 800c5aa:	f04f 0901 	mov.w	r9, #1
 800c5ae:	e7d1      	b.n	800c554 <__gethex+0x2d0>
 800c5b0:	2501      	movs	r5, #1
 800c5b2:	e7e2      	b.n	800c57a <__gethex+0x2f6>
 800c5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5b6:	f1c3 0301 	rsb	r3, r3, #1
 800c5ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0f0      	beq.n	800c5a4 <__gethex+0x320>
 800c5c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5c6:	f104 0314 	add.w	r3, r4, #20
 800c5ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5d2:	f04f 0c00 	mov.w	ip, #0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c5e0:	d01b      	beq.n	800c61a <__gethex+0x396>
 800c5e2:	3201      	adds	r2, #1
 800c5e4:	6002      	str	r2, [r0, #0]
 800c5e6:	2d02      	cmp	r5, #2
 800c5e8:	f104 0314 	add.w	r3, r4, #20
 800c5ec:	d13c      	bne.n	800c668 <__gethex+0x3e4>
 800c5ee:	f8d8 2000 	ldr.w	r2, [r8]
 800c5f2:	3a01      	subs	r2, #1
 800c5f4:	42b2      	cmp	r2, r6
 800c5f6:	d109      	bne.n	800c60c <__gethex+0x388>
 800c5f8:	1171      	asrs	r1, r6, #5
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c600:	f006 061f 	and.w	r6, r6, #31
 800c604:	fa02 f606 	lsl.w	r6, r2, r6
 800c608:	421e      	tst	r6, r3
 800c60a:	d13a      	bne.n	800c682 <__gethex+0x3fe>
 800c60c:	f045 0520 	orr.w	r5, r5, #32
 800c610:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c612:	601c      	str	r4, [r3, #0]
 800c614:	9b02      	ldr	r3, [sp, #8]
 800c616:	601f      	str	r7, [r3, #0]
 800c618:	e6b0      	b.n	800c37c <__gethex+0xf8>
 800c61a:	4299      	cmp	r1, r3
 800c61c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c620:	d8d9      	bhi.n	800c5d6 <__gethex+0x352>
 800c622:	68a3      	ldr	r3, [r4, #8]
 800c624:	459b      	cmp	fp, r3
 800c626:	db17      	blt.n	800c658 <__gethex+0x3d4>
 800c628:	6861      	ldr	r1, [r4, #4]
 800c62a:	9801      	ldr	r0, [sp, #4]
 800c62c:	3101      	adds	r1, #1
 800c62e:	f7fd fe4b 	bl	800a2c8 <_Balloc>
 800c632:	4681      	mov	r9, r0
 800c634:	b918      	cbnz	r0, 800c63e <__gethex+0x3ba>
 800c636:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a0 <__gethex+0x41c>)
 800c638:	4602      	mov	r2, r0
 800c63a:	2184      	movs	r1, #132	@ 0x84
 800c63c:	e6c5      	b.n	800c3ca <__gethex+0x146>
 800c63e:	6922      	ldr	r2, [r4, #16]
 800c640:	3202      	adds	r2, #2
 800c642:	f104 010c 	add.w	r1, r4, #12
 800c646:	0092      	lsls	r2, r2, #2
 800c648:	300c      	adds	r0, #12
 800c64a:	f7fc fedc 	bl	8009406 <memcpy>
 800c64e:	4621      	mov	r1, r4
 800c650:	9801      	ldr	r0, [sp, #4]
 800c652:	f7fd fe79 	bl	800a348 <_Bfree>
 800c656:	464c      	mov	r4, r9
 800c658:	6923      	ldr	r3, [r4, #16]
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c660:	6122      	str	r2, [r4, #16]
 800c662:	2201      	movs	r2, #1
 800c664:	615a      	str	r2, [r3, #20]
 800c666:	e7be      	b.n	800c5e6 <__gethex+0x362>
 800c668:	6922      	ldr	r2, [r4, #16]
 800c66a:	455a      	cmp	r2, fp
 800c66c:	dd0b      	ble.n	800c686 <__gethex+0x402>
 800c66e:	2101      	movs	r1, #1
 800c670:	4620      	mov	r0, r4
 800c672:	f7ff fd9f 	bl	800c1b4 <rshift>
 800c676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c67a:	3701      	adds	r7, #1
 800c67c:	42bb      	cmp	r3, r7
 800c67e:	f6ff aee0 	blt.w	800c442 <__gethex+0x1be>
 800c682:	2501      	movs	r5, #1
 800c684:	e7c2      	b.n	800c60c <__gethex+0x388>
 800c686:	f016 061f 	ands.w	r6, r6, #31
 800c68a:	d0fa      	beq.n	800c682 <__gethex+0x3fe>
 800c68c:	4453      	add	r3, sl
 800c68e:	f1c6 0620 	rsb	r6, r6, #32
 800c692:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c696:	f7fd ff09 	bl	800a4ac <__hi0bits>
 800c69a:	42b0      	cmp	r0, r6
 800c69c:	dbe7      	blt.n	800c66e <__gethex+0x3ea>
 800c69e:	e7f0      	b.n	800c682 <__gethex+0x3fe>
 800c6a0:	0800d1a5 	.word	0x0800d1a5

0800c6a4 <L_shift>:
 800c6a4:	f1c2 0208 	rsb	r2, r2, #8
 800c6a8:	0092      	lsls	r2, r2, #2
 800c6aa:	b570      	push	{r4, r5, r6, lr}
 800c6ac:	f1c2 0620 	rsb	r6, r2, #32
 800c6b0:	6843      	ldr	r3, [r0, #4]
 800c6b2:	6804      	ldr	r4, [r0, #0]
 800c6b4:	fa03 f506 	lsl.w	r5, r3, r6
 800c6b8:	432c      	orrs	r4, r5
 800c6ba:	40d3      	lsrs	r3, r2
 800c6bc:	6004      	str	r4, [r0, #0]
 800c6be:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6c2:	4288      	cmp	r0, r1
 800c6c4:	d3f4      	bcc.n	800c6b0 <L_shift+0xc>
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}

0800c6c8 <__match>:
 800c6c8:	b530      	push	{r4, r5, lr}
 800c6ca:	6803      	ldr	r3, [r0, #0]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6d2:	b914      	cbnz	r4, 800c6da <__match+0x12>
 800c6d4:	6003      	str	r3, [r0, #0]
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	bd30      	pop	{r4, r5, pc}
 800c6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c6e2:	2d19      	cmp	r5, #25
 800c6e4:	bf98      	it	ls
 800c6e6:	3220      	addls	r2, #32
 800c6e8:	42a2      	cmp	r2, r4
 800c6ea:	d0f0      	beq.n	800c6ce <__match+0x6>
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e7f3      	b.n	800c6d8 <__match+0x10>

0800c6f0 <__hexnan>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	680b      	ldr	r3, [r1, #0]
 800c6f6:	6801      	ldr	r1, [r0, #0]
 800c6f8:	115e      	asrs	r6, r3, #5
 800c6fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c6fe:	f013 031f 	ands.w	r3, r3, #31
 800c702:	b087      	sub	sp, #28
 800c704:	bf18      	it	ne
 800c706:	3604      	addne	r6, #4
 800c708:	2500      	movs	r5, #0
 800c70a:	1f37      	subs	r7, r6, #4
 800c70c:	4682      	mov	sl, r0
 800c70e:	4690      	mov	r8, r2
 800c710:	9301      	str	r3, [sp, #4]
 800c712:	f846 5c04 	str.w	r5, [r6, #-4]
 800c716:	46b9      	mov	r9, r7
 800c718:	463c      	mov	r4, r7
 800c71a:	9502      	str	r5, [sp, #8]
 800c71c:	46ab      	mov	fp, r5
 800c71e:	784a      	ldrb	r2, [r1, #1]
 800c720:	1c4b      	adds	r3, r1, #1
 800c722:	9303      	str	r3, [sp, #12]
 800c724:	b342      	cbz	r2, 800c778 <__hexnan+0x88>
 800c726:	4610      	mov	r0, r2
 800c728:	9105      	str	r1, [sp, #20]
 800c72a:	9204      	str	r2, [sp, #16]
 800c72c:	f7ff fd94 	bl	800c258 <__hexdig_fun>
 800c730:	2800      	cmp	r0, #0
 800c732:	d151      	bne.n	800c7d8 <__hexnan+0xe8>
 800c734:	9a04      	ldr	r2, [sp, #16]
 800c736:	9905      	ldr	r1, [sp, #20]
 800c738:	2a20      	cmp	r2, #32
 800c73a:	d818      	bhi.n	800c76e <__hexnan+0x7e>
 800c73c:	9b02      	ldr	r3, [sp, #8]
 800c73e:	459b      	cmp	fp, r3
 800c740:	dd13      	ble.n	800c76a <__hexnan+0x7a>
 800c742:	454c      	cmp	r4, r9
 800c744:	d206      	bcs.n	800c754 <__hexnan+0x64>
 800c746:	2d07      	cmp	r5, #7
 800c748:	dc04      	bgt.n	800c754 <__hexnan+0x64>
 800c74a:	462a      	mov	r2, r5
 800c74c:	4649      	mov	r1, r9
 800c74e:	4620      	mov	r0, r4
 800c750:	f7ff ffa8 	bl	800c6a4 <L_shift>
 800c754:	4544      	cmp	r4, r8
 800c756:	d952      	bls.n	800c7fe <__hexnan+0x10e>
 800c758:	2300      	movs	r3, #0
 800c75a:	f1a4 0904 	sub.w	r9, r4, #4
 800c75e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c762:	f8cd b008 	str.w	fp, [sp, #8]
 800c766:	464c      	mov	r4, r9
 800c768:	461d      	mov	r5, r3
 800c76a:	9903      	ldr	r1, [sp, #12]
 800c76c:	e7d7      	b.n	800c71e <__hexnan+0x2e>
 800c76e:	2a29      	cmp	r2, #41	@ 0x29
 800c770:	d157      	bne.n	800c822 <__hexnan+0x132>
 800c772:	3102      	adds	r1, #2
 800c774:	f8ca 1000 	str.w	r1, [sl]
 800c778:	f1bb 0f00 	cmp.w	fp, #0
 800c77c:	d051      	beq.n	800c822 <__hexnan+0x132>
 800c77e:	454c      	cmp	r4, r9
 800c780:	d206      	bcs.n	800c790 <__hexnan+0xa0>
 800c782:	2d07      	cmp	r5, #7
 800c784:	dc04      	bgt.n	800c790 <__hexnan+0xa0>
 800c786:	462a      	mov	r2, r5
 800c788:	4649      	mov	r1, r9
 800c78a:	4620      	mov	r0, r4
 800c78c:	f7ff ff8a 	bl	800c6a4 <L_shift>
 800c790:	4544      	cmp	r4, r8
 800c792:	d936      	bls.n	800c802 <__hexnan+0x112>
 800c794:	f1a8 0204 	sub.w	r2, r8, #4
 800c798:	4623      	mov	r3, r4
 800c79a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c79e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7a2:	429f      	cmp	r7, r3
 800c7a4:	d2f9      	bcs.n	800c79a <__hexnan+0xaa>
 800c7a6:	1b3b      	subs	r3, r7, r4
 800c7a8:	f023 0303 	bic.w	r3, r3, #3
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	3401      	adds	r4, #1
 800c7b0:	3e03      	subs	r6, #3
 800c7b2:	42b4      	cmp	r4, r6
 800c7b4:	bf88      	it	hi
 800c7b6:	2304      	movhi	r3, #4
 800c7b8:	4443      	add	r3, r8
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f843 2b04 	str.w	r2, [r3], #4
 800c7c0:	429f      	cmp	r7, r3
 800c7c2:	d2fb      	bcs.n	800c7bc <__hexnan+0xcc>
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	b91b      	cbnz	r3, 800c7d0 <__hexnan+0xe0>
 800c7c8:	4547      	cmp	r7, r8
 800c7ca:	d128      	bne.n	800c81e <__hexnan+0x12e>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	603b      	str	r3, [r7, #0]
 800c7d0:	2005      	movs	r0, #5
 800c7d2:	b007      	add	sp, #28
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d8:	3501      	adds	r5, #1
 800c7da:	2d08      	cmp	r5, #8
 800c7dc:	f10b 0b01 	add.w	fp, fp, #1
 800c7e0:	dd06      	ble.n	800c7f0 <__hexnan+0x100>
 800c7e2:	4544      	cmp	r4, r8
 800c7e4:	d9c1      	bls.n	800c76a <__hexnan+0x7a>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7ec:	2501      	movs	r5, #1
 800c7ee:	3c04      	subs	r4, #4
 800c7f0:	6822      	ldr	r2, [r4, #0]
 800c7f2:	f000 000f 	and.w	r0, r0, #15
 800c7f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c7fa:	6020      	str	r0, [r4, #0]
 800c7fc:	e7b5      	b.n	800c76a <__hexnan+0x7a>
 800c7fe:	2508      	movs	r5, #8
 800c800:	e7b3      	b.n	800c76a <__hexnan+0x7a>
 800c802:	9b01      	ldr	r3, [sp, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d0dd      	beq.n	800c7c4 <__hexnan+0xd4>
 800c808:	f1c3 0320 	rsb	r3, r3, #32
 800c80c:	f04f 32ff 	mov.w	r2, #4294967295
 800c810:	40da      	lsrs	r2, r3
 800c812:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c816:	4013      	ands	r3, r2
 800c818:	f846 3c04 	str.w	r3, [r6, #-4]
 800c81c:	e7d2      	b.n	800c7c4 <__hexnan+0xd4>
 800c81e:	3f04      	subs	r7, #4
 800c820:	e7d0      	b.n	800c7c4 <__hexnan+0xd4>
 800c822:	2004      	movs	r0, #4
 800c824:	e7d5      	b.n	800c7d2 <__hexnan+0xe2>

0800c826 <__ascii_mbtowc>:
 800c826:	b082      	sub	sp, #8
 800c828:	b901      	cbnz	r1, 800c82c <__ascii_mbtowc+0x6>
 800c82a:	a901      	add	r1, sp, #4
 800c82c:	b142      	cbz	r2, 800c840 <__ascii_mbtowc+0x1a>
 800c82e:	b14b      	cbz	r3, 800c844 <__ascii_mbtowc+0x1e>
 800c830:	7813      	ldrb	r3, [r2, #0]
 800c832:	600b      	str	r3, [r1, #0]
 800c834:	7812      	ldrb	r2, [r2, #0]
 800c836:	1e10      	subs	r0, r2, #0
 800c838:	bf18      	it	ne
 800c83a:	2001      	movne	r0, #1
 800c83c:	b002      	add	sp, #8
 800c83e:	4770      	bx	lr
 800c840:	4610      	mov	r0, r2
 800c842:	e7fb      	b.n	800c83c <__ascii_mbtowc+0x16>
 800c844:	f06f 0001 	mvn.w	r0, #1
 800c848:	e7f8      	b.n	800c83c <__ascii_mbtowc+0x16>

0800c84a <_realloc_r>:
 800c84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84e:	4680      	mov	r8, r0
 800c850:	4615      	mov	r5, r2
 800c852:	460c      	mov	r4, r1
 800c854:	b921      	cbnz	r1, 800c860 <_realloc_r+0x16>
 800c856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c85a:	4611      	mov	r1, r2
 800c85c:	f7fd bca8 	b.w	800a1b0 <_malloc_r>
 800c860:	b92a      	cbnz	r2, 800c86e <_realloc_r+0x24>
 800c862:	f7fd fc31 	bl	800a0c8 <_free_r>
 800c866:	2400      	movs	r4, #0
 800c868:	4620      	mov	r0, r4
 800c86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c86e:	f000 f840 	bl	800c8f2 <_malloc_usable_size_r>
 800c872:	4285      	cmp	r5, r0
 800c874:	4606      	mov	r6, r0
 800c876:	d802      	bhi.n	800c87e <_realloc_r+0x34>
 800c878:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c87c:	d8f4      	bhi.n	800c868 <_realloc_r+0x1e>
 800c87e:	4629      	mov	r1, r5
 800c880:	4640      	mov	r0, r8
 800c882:	f7fd fc95 	bl	800a1b0 <_malloc_r>
 800c886:	4607      	mov	r7, r0
 800c888:	2800      	cmp	r0, #0
 800c88a:	d0ec      	beq.n	800c866 <_realloc_r+0x1c>
 800c88c:	42b5      	cmp	r5, r6
 800c88e:	462a      	mov	r2, r5
 800c890:	4621      	mov	r1, r4
 800c892:	bf28      	it	cs
 800c894:	4632      	movcs	r2, r6
 800c896:	f7fc fdb6 	bl	8009406 <memcpy>
 800c89a:	4621      	mov	r1, r4
 800c89c:	4640      	mov	r0, r8
 800c89e:	f7fd fc13 	bl	800a0c8 <_free_r>
 800c8a2:	463c      	mov	r4, r7
 800c8a4:	e7e0      	b.n	800c868 <_realloc_r+0x1e>

0800c8a6 <__ascii_wctomb>:
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	b141      	cbz	r1, 800c8be <__ascii_wctomb+0x18>
 800c8ac:	2aff      	cmp	r2, #255	@ 0xff
 800c8ae:	d904      	bls.n	800c8ba <__ascii_wctomb+0x14>
 800c8b0:	228a      	movs	r2, #138	@ 0x8a
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b8:	4770      	bx	lr
 800c8ba:	700a      	strb	r2, [r1, #0]
 800c8bc:	2001      	movs	r0, #1
 800c8be:	4770      	bx	lr

0800c8c0 <fiprintf>:
 800c8c0:	b40e      	push	{r1, r2, r3}
 800c8c2:	b503      	push	{r0, r1, lr}
 800c8c4:	4601      	mov	r1, r0
 800c8c6:	ab03      	add	r3, sp, #12
 800c8c8:	4805      	ldr	r0, [pc, #20]	@ (800c8e0 <fiprintf+0x20>)
 800c8ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ce:	6800      	ldr	r0, [r0, #0]
 800c8d0:	9301      	str	r3, [sp, #4]
 800c8d2:	f7ff f9b1 	bl	800bc38 <_vfiprintf_r>
 800c8d6:	b002      	add	sp, #8
 800c8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8dc:	b003      	add	sp, #12
 800c8de:	4770      	bx	lr
 800c8e0:	20000044 	.word	0x20000044

0800c8e4 <abort>:
 800c8e4:	b508      	push	{r3, lr}
 800c8e6:	2006      	movs	r0, #6
 800c8e8:	f000 f834 	bl	800c954 <raise>
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	f7f6 fc55 	bl	800319c <_exit>

0800c8f2 <_malloc_usable_size_r>:
 800c8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8f6:	1f18      	subs	r0, r3, #4
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bfbc      	itt	lt
 800c8fc:	580b      	ldrlt	r3, [r1, r0]
 800c8fe:	18c0      	addlt	r0, r0, r3
 800c900:	4770      	bx	lr

0800c902 <_raise_r>:
 800c902:	291f      	cmp	r1, #31
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4605      	mov	r5, r0
 800c908:	460c      	mov	r4, r1
 800c90a:	d904      	bls.n	800c916 <_raise_r+0x14>
 800c90c:	2316      	movs	r3, #22
 800c90e:	6003      	str	r3, [r0, #0]
 800c910:	f04f 30ff 	mov.w	r0, #4294967295
 800c914:	bd38      	pop	{r3, r4, r5, pc}
 800c916:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c918:	b112      	cbz	r2, 800c920 <_raise_r+0x1e>
 800c91a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c91e:	b94b      	cbnz	r3, 800c934 <_raise_r+0x32>
 800c920:	4628      	mov	r0, r5
 800c922:	f000 f831 	bl	800c988 <_getpid_r>
 800c926:	4622      	mov	r2, r4
 800c928:	4601      	mov	r1, r0
 800c92a:	4628      	mov	r0, r5
 800c92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c930:	f000 b818 	b.w	800c964 <_kill_r>
 800c934:	2b01      	cmp	r3, #1
 800c936:	d00a      	beq.n	800c94e <_raise_r+0x4c>
 800c938:	1c59      	adds	r1, r3, #1
 800c93a:	d103      	bne.n	800c944 <_raise_r+0x42>
 800c93c:	2316      	movs	r3, #22
 800c93e:	6003      	str	r3, [r0, #0]
 800c940:	2001      	movs	r0, #1
 800c942:	e7e7      	b.n	800c914 <_raise_r+0x12>
 800c944:	2100      	movs	r1, #0
 800c946:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c94a:	4620      	mov	r0, r4
 800c94c:	4798      	blx	r3
 800c94e:	2000      	movs	r0, #0
 800c950:	e7e0      	b.n	800c914 <_raise_r+0x12>
	...

0800c954 <raise>:
 800c954:	4b02      	ldr	r3, [pc, #8]	@ (800c960 <raise+0xc>)
 800c956:	4601      	mov	r1, r0
 800c958:	6818      	ldr	r0, [r3, #0]
 800c95a:	f7ff bfd2 	b.w	800c902 <_raise_r>
 800c95e:	bf00      	nop
 800c960:	20000044 	.word	0x20000044

0800c964 <_kill_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d07      	ldr	r5, [pc, #28]	@ (800c984 <_kill_r+0x20>)
 800c968:	2300      	movs	r3, #0
 800c96a:	4604      	mov	r4, r0
 800c96c:	4608      	mov	r0, r1
 800c96e:	4611      	mov	r1, r2
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	f7f6 fc03 	bl	800317c <_kill>
 800c976:	1c43      	adds	r3, r0, #1
 800c978:	d102      	bne.n	800c980 <_kill_r+0x1c>
 800c97a:	682b      	ldr	r3, [r5, #0]
 800c97c:	b103      	cbz	r3, 800c980 <_kill_r+0x1c>
 800c97e:	6023      	str	r3, [r4, #0]
 800c980:	bd38      	pop	{r3, r4, r5, pc}
 800c982:	bf00      	nop
 800c984:	20000760 	.word	0x20000760

0800c988 <_getpid_r>:
 800c988:	f7f6 bbf0 	b.w	800316c <_getpid>

0800c98c <atan2>:
 800c98c:	f000 b800 	b.w	800c990 <__ieee754_atan2>

0800c990 <__ieee754_atan2>:
 800c990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c994:	ec57 6b11 	vmov	r6, r7, d1
 800c998:	4273      	negs	r3, r6
 800c99a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800cb18 <__ieee754_atan2+0x188>
 800c99e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c9a2:	4333      	orrs	r3, r6
 800c9a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c9a8:	4543      	cmp	r3, r8
 800c9aa:	ec51 0b10 	vmov	r0, r1, d0
 800c9ae:	4635      	mov	r5, r6
 800c9b0:	d809      	bhi.n	800c9c6 <__ieee754_atan2+0x36>
 800c9b2:	4244      	negs	r4, r0
 800c9b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c9b8:	4304      	orrs	r4, r0
 800c9ba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c9be:	4544      	cmp	r4, r8
 800c9c0:	468e      	mov	lr, r1
 800c9c2:	4681      	mov	r9, r0
 800c9c4:	d907      	bls.n	800c9d6 <__ieee754_atan2+0x46>
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	f7f3 fc7f 	bl	80002cc <__adddf3>
 800c9ce:	ec41 0b10 	vmov	d0, r0, r1
 800c9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9d6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c9da:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c9de:	4334      	orrs	r4, r6
 800c9e0:	d103      	bne.n	800c9ea <__ieee754_atan2+0x5a>
 800c9e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e6:	f000 b89b 	b.w	800cb20 <atan>
 800c9ea:	17bc      	asrs	r4, r7, #30
 800c9ec:	f004 0402 	and.w	r4, r4, #2
 800c9f0:	ea53 0909 	orrs.w	r9, r3, r9
 800c9f4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c9f8:	d107      	bne.n	800ca0a <__ieee754_atan2+0x7a>
 800c9fa:	2c02      	cmp	r4, #2
 800c9fc:	d05f      	beq.n	800cabe <__ieee754_atan2+0x12e>
 800c9fe:	2c03      	cmp	r4, #3
 800ca00:	d1e5      	bne.n	800c9ce <__ieee754_atan2+0x3e>
 800ca02:	a141      	add	r1, pc, #260	@ (adr r1, 800cb08 <__ieee754_atan2+0x178>)
 800ca04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca08:	e7e1      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800ca0a:	4315      	orrs	r5, r2
 800ca0c:	d106      	bne.n	800ca1c <__ieee754_atan2+0x8c>
 800ca0e:	f1be 0f00 	cmp.w	lr, #0
 800ca12:	da5f      	bge.n	800cad4 <__ieee754_atan2+0x144>
 800ca14:	a13e      	add	r1, pc, #248	@ (adr r1, 800cb10 <__ieee754_atan2+0x180>)
 800ca16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca1a:	e7d8      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800ca1c:	4542      	cmp	r2, r8
 800ca1e:	d10f      	bne.n	800ca40 <__ieee754_atan2+0xb0>
 800ca20:	4293      	cmp	r3, r2
 800ca22:	f104 34ff 	add.w	r4, r4, #4294967295
 800ca26:	d107      	bne.n	800ca38 <__ieee754_atan2+0xa8>
 800ca28:	2c02      	cmp	r4, #2
 800ca2a:	d84c      	bhi.n	800cac6 <__ieee754_atan2+0x136>
 800ca2c:	4b34      	ldr	r3, [pc, #208]	@ (800cb00 <__ieee754_atan2+0x170>)
 800ca2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca36:	e7ca      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800ca38:	2c02      	cmp	r4, #2
 800ca3a:	d848      	bhi.n	800cace <__ieee754_atan2+0x13e>
 800ca3c:	4b31      	ldr	r3, [pc, #196]	@ (800cb04 <__ieee754_atan2+0x174>)
 800ca3e:	e7f6      	b.n	800ca2e <__ieee754_atan2+0x9e>
 800ca40:	4543      	cmp	r3, r8
 800ca42:	d0e4      	beq.n	800ca0e <__ieee754_atan2+0x7e>
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ca4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca4e:	da1e      	bge.n	800ca8e <__ieee754_atan2+0xfe>
 800ca50:	2f00      	cmp	r7, #0
 800ca52:	da01      	bge.n	800ca58 <__ieee754_atan2+0xc8>
 800ca54:	323c      	adds	r2, #60	@ 0x3c
 800ca56:	db1e      	blt.n	800ca96 <__ieee754_atan2+0x106>
 800ca58:	4632      	mov	r2, r6
 800ca5a:	463b      	mov	r3, r7
 800ca5c:	f7f3 ff16 	bl	800088c <__aeabi_ddiv>
 800ca60:	ec41 0b10 	vmov	d0, r0, r1
 800ca64:	f000 f9f4 	bl	800ce50 <fabs>
 800ca68:	f000 f85a 	bl	800cb20 <atan>
 800ca6c:	ec51 0b10 	vmov	r0, r1, d0
 800ca70:	2c01      	cmp	r4, #1
 800ca72:	d013      	beq.n	800ca9c <__ieee754_atan2+0x10c>
 800ca74:	2c02      	cmp	r4, #2
 800ca76:	d015      	beq.n	800caa4 <__ieee754_atan2+0x114>
 800ca78:	2c00      	cmp	r4, #0
 800ca7a:	d0a8      	beq.n	800c9ce <__ieee754_atan2+0x3e>
 800ca7c:	a318      	add	r3, pc, #96	@ (adr r3, 800cae0 <__ieee754_atan2+0x150>)
 800ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca82:	f7f3 fc21 	bl	80002c8 <__aeabi_dsub>
 800ca86:	a318      	add	r3, pc, #96	@ (adr r3, 800cae8 <__ieee754_atan2+0x158>)
 800ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8c:	e014      	b.n	800cab8 <__ieee754_atan2+0x128>
 800ca8e:	a118      	add	r1, pc, #96	@ (adr r1, 800caf0 <__ieee754_atan2+0x160>)
 800ca90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca94:	e7ec      	b.n	800ca70 <__ieee754_atan2+0xe0>
 800ca96:	2000      	movs	r0, #0
 800ca98:	2100      	movs	r1, #0
 800ca9a:	e7e9      	b.n	800ca70 <__ieee754_atan2+0xe0>
 800ca9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800caa0:	4619      	mov	r1, r3
 800caa2:	e794      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800caa4:	a30e      	add	r3, pc, #56	@ (adr r3, 800cae0 <__ieee754_atan2+0x150>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fc0d 	bl	80002c8 <__aeabi_dsub>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	a10d      	add	r1, pc, #52	@ (adr r1, 800cae8 <__ieee754_atan2+0x158>)
 800cab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cab8:	f7f3 fc06 	bl	80002c8 <__aeabi_dsub>
 800cabc:	e787      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800cabe:	a10a      	add	r1, pc, #40	@ (adr r1, 800cae8 <__ieee754_atan2+0x158>)
 800cac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac4:	e783      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800cac6:	a10c      	add	r1, pc, #48	@ (adr r1, 800caf8 <__ieee754_atan2+0x168>)
 800cac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cacc:	e77f      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800cace:	2000      	movs	r0, #0
 800cad0:	2100      	movs	r1, #0
 800cad2:	e77c      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800cad4:	a106      	add	r1, pc, #24	@ (adr r1, 800caf0 <__ieee754_atan2+0x160>)
 800cad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cada:	e778      	b.n	800c9ce <__ieee754_atan2+0x3e>
 800cadc:	f3af 8000 	nop.w
 800cae0:	33145c07 	.word	0x33145c07
 800cae4:	3ca1a626 	.word	0x3ca1a626
 800cae8:	54442d18 	.word	0x54442d18
 800caec:	400921fb 	.word	0x400921fb
 800caf0:	54442d18 	.word	0x54442d18
 800caf4:	3ff921fb 	.word	0x3ff921fb
 800caf8:	54442d18 	.word	0x54442d18
 800cafc:	3fe921fb 	.word	0x3fe921fb
 800cb00:	0800d538 	.word	0x0800d538
 800cb04:	0800d520 	.word	0x0800d520
 800cb08:	54442d18 	.word	0x54442d18
 800cb0c:	c00921fb 	.word	0xc00921fb
 800cb10:	54442d18 	.word	0x54442d18
 800cb14:	bff921fb 	.word	0xbff921fb
 800cb18:	7ff00000 	.word	0x7ff00000
 800cb1c:	00000000 	.word	0x00000000

0800cb20 <atan>:
 800cb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	ec55 4b10 	vmov	r4, r5, d0
 800cb28:	4bbf      	ldr	r3, [pc, #764]	@ (800ce28 <atan+0x308>)
 800cb2a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800cb2e:	429e      	cmp	r6, r3
 800cb30:	46ab      	mov	fp, r5
 800cb32:	d918      	bls.n	800cb66 <atan+0x46>
 800cb34:	4bbd      	ldr	r3, [pc, #756]	@ (800ce2c <atan+0x30c>)
 800cb36:	429e      	cmp	r6, r3
 800cb38:	d801      	bhi.n	800cb3e <atan+0x1e>
 800cb3a:	d109      	bne.n	800cb50 <atan+0x30>
 800cb3c:	b144      	cbz	r4, 800cb50 <atan+0x30>
 800cb3e:	4622      	mov	r2, r4
 800cb40:	462b      	mov	r3, r5
 800cb42:	4620      	mov	r0, r4
 800cb44:	4629      	mov	r1, r5
 800cb46:	f7f3 fbc1 	bl	80002cc <__adddf3>
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	e006      	b.n	800cb5e <atan+0x3e>
 800cb50:	f1bb 0f00 	cmp.w	fp, #0
 800cb54:	f340 812b 	ble.w	800cdae <atan+0x28e>
 800cb58:	a597      	add	r5, pc, #604	@ (adr r5, 800cdb8 <atan+0x298>)
 800cb5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb5e:	ec45 4b10 	vmov	d0, r4, r5
 800cb62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb66:	4bb2      	ldr	r3, [pc, #712]	@ (800ce30 <atan+0x310>)
 800cb68:	429e      	cmp	r6, r3
 800cb6a:	d813      	bhi.n	800cb94 <atan+0x74>
 800cb6c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800cb70:	429e      	cmp	r6, r3
 800cb72:	d80c      	bhi.n	800cb8e <atan+0x6e>
 800cb74:	a392      	add	r3, pc, #584	@ (adr r3, 800cdc0 <atan+0x2a0>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7f3 fba5 	bl	80002cc <__adddf3>
 800cb82:	4bac      	ldr	r3, [pc, #688]	@ (800ce34 <atan+0x314>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	f7f3 ffe7 	bl	8000b58 <__aeabi_dcmpgt>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d1e7      	bne.n	800cb5e <atan+0x3e>
 800cb8e:	f04f 3aff 	mov.w	sl, #4294967295
 800cb92:	e029      	b.n	800cbe8 <atan+0xc8>
 800cb94:	f000 f95c 	bl	800ce50 <fabs>
 800cb98:	4ba7      	ldr	r3, [pc, #668]	@ (800ce38 <atan+0x318>)
 800cb9a:	429e      	cmp	r6, r3
 800cb9c:	ec55 4b10 	vmov	r4, r5, d0
 800cba0:	f200 80bc 	bhi.w	800cd1c <atan+0x1fc>
 800cba4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800cba8:	429e      	cmp	r6, r3
 800cbaa:	f200 809e 	bhi.w	800ccea <atan+0x1ca>
 800cbae:	4622      	mov	r2, r4
 800cbb0:	462b      	mov	r3, r5
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	f7f3 fb89 	bl	80002cc <__adddf3>
 800cbba:	4b9e      	ldr	r3, [pc, #632]	@ (800ce34 <atan+0x314>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f7f3 fb83 	bl	80002c8 <__aeabi_dsub>
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cbcc:	4620      	mov	r0, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f7f3 fb7c 	bl	80002cc <__adddf3>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4639      	mov	r1, r7
 800cbdc:	f7f3 fe56 	bl	800088c <__aeabi_ddiv>
 800cbe0:	f04f 0a00 	mov.w	sl, #0
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	4622      	mov	r2, r4
 800cbea:	462b      	mov	r3, r5
 800cbec:	4620      	mov	r0, r4
 800cbee:	4629      	mov	r1, r5
 800cbf0:	f7f3 fd22 	bl	8000638 <__aeabi_dmul>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4680      	mov	r8, r0
 800cbfa:	4689      	mov	r9, r1
 800cbfc:	f7f3 fd1c 	bl	8000638 <__aeabi_dmul>
 800cc00:	a371      	add	r3, pc, #452	@ (adr r3, 800cdc8 <atan+0x2a8>)
 800cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc06:	4606      	mov	r6, r0
 800cc08:	460f      	mov	r7, r1
 800cc0a:	f7f3 fd15 	bl	8000638 <__aeabi_dmul>
 800cc0e:	a370      	add	r3, pc, #448	@ (adr r3, 800cdd0 <atan+0x2b0>)
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	f7f3 fb5a 	bl	80002cc <__adddf3>
 800cc18:	4632      	mov	r2, r6
 800cc1a:	463b      	mov	r3, r7
 800cc1c:	f7f3 fd0c 	bl	8000638 <__aeabi_dmul>
 800cc20:	a36d      	add	r3, pc, #436	@ (adr r3, 800cdd8 <atan+0x2b8>)
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f7f3 fb51 	bl	80002cc <__adddf3>
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	463b      	mov	r3, r7
 800cc2e:	f7f3 fd03 	bl	8000638 <__aeabi_dmul>
 800cc32:	a36b      	add	r3, pc, #428	@ (adr r3, 800cde0 <atan+0x2c0>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	f7f3 fb48 	bl	80002cc <__adddf3>
 800cc3c:	4632      	mov	r2, r6
 800cc3e:	463b      	mov	r3, r7
 800cc40:	f7f3 fcfa 	bl	8000638 <__aeabi_dmul>
 800cc44:	a368      	add	r3, pc, #416	@ (adr r3, 800cde8 <atan+0x2c8>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	f7f3 fb3f 	bl	80002cc <__adddf3>
 800cc4e:	4632      	mov	r2, r6
 800cc50:	463b      	mov	r3, r7
 800cc52:	f7f3 fcf1 	bl	8000638 <__aeabi_dmul>
 800cc56:	a366      	add	r3, pc, #408	@ (adr r3, 800cdf0 <atan+0x2d0>)
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	f7f3 fb36 	bl	80002cc <__adddf3>
 800cc60:	4642      	mov	r2, r8
 800cc62:	464b      	mov	r3, r9
 800cc64:	f7f3 fce8 	bl	8000638 <__aeabi_dmul>
 800cc68:	a363      	add	r3, pc, #396	@ (adr r3, 800cdf8 <atan+0x2d8>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	4680      	mov	r8, r0
 800cc70:	4689      	mov	r9, r1
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f3 fcdf 	bl	8000638 <__aeabi_dmul>
 800cc7a:	a361      	add	r3, pc, #388	@ (adr r3, 800ce00 <atan+0x2e0>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	f7f3 fb22 	bl	80002c8 <__aeabi_dsub>
 800cc84:	4632      	mov	r2, r6
 800cc86:	463b      	mov	r3, r7
 800cc88:	f7f3 fcd6 	bl	8000638 <__aeabi_dmul>
 800cc8c:	a35e      	add	r3, pc, #376	@ (adr r3, 800ce08 <atan+0x2e8>)
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f7f3 fb19 	bl	80002c8 <__aeabi_dsub>
 800cc96:	4632      	mov	r2, r6
 800cc98:	463b      	mov	r3, r7
 800cc9a:	f7f3 fccd 	bl	8000638 <__aeabi_dmul>
 800cc9e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ce10 <atan+0x2f0>)
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	f7f3 fb10 	bl	80002c8 <__aeabi_dsub>
 800cca8:	4632      	mov	r2, r6
 800ccaa:	463b      	mov	r3, r7
 800ccac:	f7f3 fcc4 	bl	8000638 <__aeabi_dmul>
 800ccb0:	a359      	add	r3, pc, #356	@ (adr r3, 800ce18 <atan+0x2f8>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	f7f3 fb07 	bl	80002c8 <__aeabi_dsub>
 800ccba:	4632      	mov	r2, r6
 800ccbc:	463b      	mov	r3, r7
 800ccbe:	f7f3 fcbb 	bl	8000638 <__aeabi_dmul>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	4649      	mov	r1, r9
 800ccca:	f7f3 faff 	bl	80002cc <__adddf3>
 800ccce:	4622      	mov	r2, r4
 800ccd0:	462b      	mov	r3, r5
 800ccd2:	f7f3 fcb1 	bl	8000638 <__aeabi_dmul>
 800ccd6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	d148      	bne.n	800cd72 <atan+0x252>
 800cce0:	4620      	mov	r0, r4
 800cce2:	4629      	mov	r1, r5
 800cce4:	f7f3 faf0 	bl	80002c8 <__aeabi_dsub>
 800cce8:	e72f      	b.n	800cb4a <atan+0x2a>
 800ccea:	4b52      	ldr	r3, [pc, #328]	@ (800ce34 <atan+0x314>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 fae9 	bl	80002c8 <__aeabi_dsub>
 800ccf6:	4b4f      	ldr	r3, [pc, #316]	@ (800ce34 <atan+0x314>)
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	460f      	mov	r7, r1
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4620      	mov	r0, r4
 800cd00:	4629      	mov	r1, r5
 800cd02:	f7f3 fae3 	bl	80002cc <__adddf3>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	f7f3 fdbd 	bl	800088c <__aeabi_ddiv>
 800cd12:	f04f 0a01 	mov.w	sl, #1
 800cd16:	4604      	mov	r4, r0
 800cd18:	460d      	mov	r5, r1
 800cd1a:	e765      	b.n	800cbe8 <atan+0xc8>
 800cd1c:	4b47      	ldr	r3, [pc, #284]	@ (800ce3c <atan+0x31c>)
 800cd1e:	429e      	cmp	r6, r3
 800cd20:	d21c      	bcs.n	800cd5c <atan+0x23c>
 800cd22:	4b47      	ldr	r3, [pc, #284]	@ (800ce40 <atan+0x320>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 facd 	bl	80002c8 <__aeabi_dsub>
 800cd2e:	4b44      	ldr	r3, [pc, #272]	@ (800ce40 <atan+0x320>)
 800cd30:	4606      	mov	r6, r0
 800cd32:	460f      	mov	r7, r1
 800cd34:	2200      	movs	r2, #0
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fc7d 	bl	8000638 <__aeabi_dmul>
 800cd3e:	4b3d      	ldr	r3, [pc, #244]	@ (800ce34 <atan+0x314>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	f7f3 fac3 	bl	80002cc <__adddf3>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	f7f3 fd9d 	bl	800088c <__aeabi_ddiv>
 800cd52:	f04f 0a02 	mov.w	sl, #2
 800cd56:	4604      	mov	r4, r0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	e745      	b.n	800cbe8 <atan+0xc8>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	462b      	mov	r3, r5
 800cd60:	4938      	ldr	r1, [pc, #224]	@ (800ce44 <atan+0x324>)
 800cd62:	2000      	movs	r0, #0
 800cd64:	f7f3 fd92 	bl	800088c <__aeabi_ddiv>
 800cd68:	f04f 0a03 	mov.w	sl, #3
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	460d      	mov	r5, r1
 800cd70:	e73a      	b.n	800cbe8 <atan+0xc8>
 800cd72:	4b35      	ldr	r3, [pc, #212]	@ (800ce48 <atan+0x328>)
 800cd74:	4e35      	ldr	r6, [pc, #212]	@ (800ce4c <atan+0x32c>)
 800cd76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f7f3 faa3 	bl	80002c8 <__aeabi_dsub>
 800cd82:	4622      	mov	r2, r4
 800cd84:	462b      	mov	r3, r5
 800cd86:	f7f3 fa9f 	bl	80002c8 <__aeabi_dsub>
 800cd8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cd96:	f7f3 fa97 	bl	80002c8 <__aeabi_dsub>
 800cd9a:	f1bb 0f00 	cmp.w	fp, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	460d      	mov	r5, r1
 800cda2:	f6bf aedc 	bge.w	800cb5e <atan+0x3e>
 800cda6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cdaa:	461d      	mov	r5, r3
 800cdac:	e6d7      	b.n	800cb5e <atan+0x3e>
 800cdae:	a51c      	add	r5, pc, #112	@ (adr r5, 800ce20 <atan+0x300>)
 800cdb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdb4:	e6d3      	b.n	800cb5e <atan+0x3e>
 800cdb6:	bf00      	nop
 800cdb8:	54442d18 	.word	0x54442d18
 800cdbc:	3ff921fb 	.word	0x3ff921fb
 800cdc0:	8800759c 	.word	0x8800759c
 800cdc4:	7e37e43c 	.word	0x7e37e43c
 800cdc8:	e322da11 	.word	0xe322da11
 800cdcc:	3f90ad3a 	.word	0x3f90ad3a
 800cdd0:	24760deb 	.word	0x24760deb
 800cdd4:	3fa97b4b 	.word	0x3fa97b4b
 800cdd8:	a0d03d51 	.word	0xa0d03d51
 800cddc:	3fb10d66 	.word	0x3fb10d66
 800cde0:	c54c206e 	.word	0xc54c206e
 800cde4:	3fb745cd 	.word	0x3fb745cd
 800cde8:	920083ff 	.word	0x920083ff
 800cdec:	3fc24924 	.word	0x3fc24924
 800cdf0:	5555550d 	.word	0x5555550d
 800cdf4:	3fd55555 	.word	0x3fd55555
 800cdf8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cdfc:	bfa2b444 	.word	0xbfa2b444
 800ce00:	52defd9a 	.word	0x52defd9a
 800ce04:	3fadde2d 	.word	0x3fadde2d
 800ce08:	af749a6d 	.word	0xaf749a6d
 800ce0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ce10:	fe231671 	.word	0xfe231671
 800ce14:	3fbc71c6 	.word	0x3fbc71c6
 800ce18:	9998ebc4 	.word	0x9998ebc4
 800ce1c:	3fc99999 	.word	0x3fc99999
 800ce20:	54442d18 	.word	0x54442d18
 800ce24:	bff921fb 	.word	0xbff921fb
 800ce28:	440fffff 	.word	0x440fffff
 800ce2c:	7ff00000 	.word	0x7ff00000
 800ce30:	3fdbffff 	.word	0x3fdbffff
 800ce34:	3ff00000 	.word	0x3ff00000
 800ce38:	3ff2ffff 	.word	0x3ff2ffff
 800ce3c:	40038000 	.word	0x40038000
 800ce40:	3ff80000 	.word	0x3ff80000
 800ce44:	bff00000 	.word	0xbff00000
 800ce48:	0800d550 	.word	0x0800d550
 800ce4c:	0800d570 	.word	0x0800d570

0800ce50 <fabs>:
 800ce50:	ec51 0b10 	vmov	r0, r1, d0
 800ce54:	4602      	mov	r2, r0
 800ce56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ce5a:	ec43 2b10 	vmov	d0, r2, r3
 800ce5e:	4770      	bx	lr

0800ce60 <_init>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	bf00      	nop
 800ce64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce66:	bc08      	pop	{r3}
 800ce68:	469e      	mov	lr, r3
 800ce6a:	4770      	bx	lr

0800ce6c <_fini>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	bf00      	nop
 800ce70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce72:	bc08      	pop	{r3}
 800ce74:	469e      	mov	lr, r3
 800ce76:	4770      	bx	lr
