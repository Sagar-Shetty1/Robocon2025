
Robot_Config_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800e3b0  0800e3b0  0000f3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eac8  0800eac8  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eac8  0800eac8  0000fac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ead0  0800ead0  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ead0  0800ead0  0000fad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ead4  0800ead4  0000fad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800ead8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001f8  0800ecd0  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  0800ecd0  00010840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001203c  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  00022264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00024860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dca  00000000  00000000  000259c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b59  00000000  00000000  00026792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015778  00000000  00000000  0004a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7540  00000000  00000000  0005fa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000633c  00000000  00000000  00136fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013d324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e398 	.word	0x0800e398

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800e398 	.word	0x0800e398

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <init_i2c_slave>:
volatile uint8_t i2c_data_ready = 0;
uint32_t last_i2c_reception = 0;
#define I2C_TIMEOUT_MS 1000  // 1 second timeout for I2C communication

// Initialize I2C communication
void init_i2c_slave(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	// Clear the receive buffer initially
	memset(rxbuff, 0, I2C_BUFFER_SIZE);
 8001028:	2210      	movs	r2, #16
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	@ (8001054 <init_i2c_slave+0x30>)
 800102e:	f008 fa81 	bl	8009534 <memset>

	// Start the slave receiver in interrupt mode
	if (HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE) != HAL_OK) {
 8001032:	2210      	movs	r2, #16
 8001034:	4907      	ldr	r1, [pc, #28]	@ (8001054 <init_i2c_slave+0x30>)
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <init_i2c_slave+0x34>)
 8001038:	f003 f97a 	bl	8004330 <HAL_I2C_Slave_Receive_IT>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <init_i2c_slave+0x22>
		// Handle initialization error
		Error_Handler();
 8001042:	f001 fe07 	bl	8002c54 <Error_Handler>
	}

	// Record the initialization time
	last_i2c_reception = HAL_GetTick();
 8001046:	f002 fbc9 	bl	80037dc <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	4a03      	ldr	r2, [pc, #12]	@ (800105c <init_i2c_slave+0x38>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000690 	.word	0x20000690
 8001058:	20000268 	.word	0x20000268
 800105c:	200006e8 	.word	0x200006e8

08001060 <HAL_I2C_SlaveRxCpltCallback>:

// I2C Slave receive complete callback
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c2.Instance) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d111      	bne.n	8001098 <HAL_I2C_SlaveRxCpltCallback+0x38>
		// Set flag to indicate data received
		i2c_data_ready = 1;
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]

		// Update the reception timestamp
		last_i2c_reception = HAL_GetTick();
 800107a:	f002 fbaf 	bl	80037dc <HAL_GetTick>
 800107e:	4603      	mov	r3, r0
 8001080:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8001082:	6013      	str	r3, [r2, #0]

		// Restart the slave receive in interrupt mode
		if (HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE)
 8001084:	2210      	movs	r2, #16
 8001086:	4909      	ldr	r1, [pc, #36]	@ (80010ac <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800108a:	f003 f951 	bl	8004330 <HAL_I2C_Slave_Receive_IT>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_SlaveRxCpltCallback+0x38>
				!= HAL_OK) {
			// If restarting receive fails, handle the error
			Error_Handler();
 8001094:	f001 fdde 	bl	8002c54 <Error_Handler>
		}
	}
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000268 	.word	0x20000268
 80010a4:	200006e4 	.word	0x200006e4
 80010a8:	200006e8 	.word	0x200006e8
 80010ac:	20000690 	.word	0x20000690

080010b0 <HAL_I2C_ErrorCallback>:

// I2C Error callback
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c2.Instance) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_I2C_ErrorCallback+0x54>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d11b      	bne.n	80010fc <HAL_I2C_ErrorCallback+0x4c>
		// Clear the receive buffer on error
		memset(rxbuff, 0, I2C_BUFFER_SIZE);
 80010c4:	2210      	movs	r2, #16
 80010c6:	2100      	movs	r1, #0
 80010c8:	480f      	ldr	r0, [pc, #60]	@ (8001108 <HAL_I2C_ErrorCallback+0x58>)
 80010ca:	f008 fa33 	bl	8009534 <memset>

		// Reset the ready flag
		i2c_data_ready = 0;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_I2C_ErrorCallback+0x5c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]

		// Clear all error flags
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	641a      	str	r2, [r3, #64]	@ 0x40

		// Re-enable the I2C peripheral if it was disabled due to error
		if (hi2c->State == HAL_I2C_STATE_READY) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d105      	bne.n	80010f2 <HAL_I2C_ErrorCallback+0x42>
			// Reset the I2C peripheral
			HAL_I2C_DeInit(hi2c);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f003 f8de 	bl	80042a8 <HAL_I2C_DeInit>
			HAL_I2C_Init(hi2c);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f002 ff97 	bl	8004020 <HAL_I2C_Init>
		}

		// Restart reception
		HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE);
 80010f2:	2210      	movs	r2, #16
 80010f4:	4904      	ldr	r1, [pc, #16]	@ (8001108 <HAL_I2C_ErrorCallback+0x58>)
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <HAL_I2C_ErrorCallback+0x54>)
 80010f8:	f003 f91a 	bl	8004330 <HAL_I2C_Slave_Receive_IT>
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000268 	.word	0x20000268
 8001108:	20000690 	.word	0x20000690
 800110c:	200006e4 	.word	0x200006e4

08001110 <check_i2c_communication>:

// Check I2C communication status
uint8_t check_i2c_communication(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001116:	f002 fb61 	bl	80037dc <HAL_GetTick>
 800111a:	6078      	str	r0, [r7, #4]

	// Check for timeout
	if (current_time - last_i2c_reception > I2C_TIMEOUT_MS) {
 800111c:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <check_i2c_communication+0x50>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001128:	d915      	bls.n	8001156 <check_i2c_communication+0x46>
		// No communication for too long, restart I2C
		memset(rxbuff, 0, I2C_BUFFER_SIZE);
 800112a:	2210      	movs	r2, #16
 800112c:	2100      	movs	r1, #0
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <check_i2c_communication+0x54>)
 8001130:	f008 fa00 	bl	8009534 <memset>
		i2c_data_ready = 0;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <check_i2c_communication+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

		// Abort any ongoing transfer
		HAL_I2C_Master_Abort_IT(&hi2c2, I2C_SLAVE_ADDRESS);
 800113a:	2108      	movs	r1, #8
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <check_i2c_communication+0x5c>)
 800113e:	f003 f967 	bl	8004410 <HAL_I2C_Master_Abort_IT>

		// Restart reception
		HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE);
 8001142:	2210      	movs	r2, #16
 8001144:	4907      	ldr	r1, [pc, #28]	@ (8001164 <check_i2c_communication+0x54>)
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <check_i2c_communication+0x5c>)
 8001148:	f003 f8f2 	bl	8004330 <HAL_I2C_Slave_Receive_IT>

		// Update the timestamp
		last_i2c_reception = current_time;
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <check_i2c_communication+0x50>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]

		return 0; // Communication failed
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <check_i2c_communication+0x48>
	}

	return 1; // Communication OK
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200006e8 	.word	0x200006e8
 8001164:	20000690 	.word	0x20000690
 8001168:	200006e4 	.word	0x200006e4
 800116c:	20000268 	.word	0x20000268

08001170 <process_i2c_data>:

// Process I2C data - call this in your main loop
void process_i2c_data(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	// Check if I2C communication is working
	if (!check_i2c_communication()) {
 8001174:	f7ff ffcc 	bl	8001110 <check_i2c_communication>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <process_i2c_data+0x16>
		// Handle communication failure
		printf("I2C communication failure\r\n");
 800117e:	4877      	ldr	r0, [pc, #476]	@ (800135c <process_i2c_data+0x1ec>)
 8001180:	f008 f8d8 	bl	8009334 <puts>
		return;
 8001184:	e140      	b.n	8001408 <process_i2c_data+0x298>
	}

	// Process data only if new data is available
	if (i2c_data_ready) {
 8001186:	4b76      	ldr	r3, [pc, #472]	@ (8001360 <process_i2c_data+0x1f0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 810b 	beq.w	80013a8 <process_i2c_data+0x238>
		// Parse the received data
		lx = (rxbuff[0] & 0x80) ?
 8001192:	4b74      	ldr	r3, [pc, #464]	@ (8001364 <process_i2c_data+0x1f4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 8001198:	2b00      	cmp	r3, #0
 800119a:	da04      	bge.n	80011a6 <process_i2c_data+0x36>
 800119c:	4b71      	ldr	r3, [pc, #452]	@ (8001364 <process_i2c_data+0x1f4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011a4:	e001      	b.n	80011aa <process_i2c_data+0x3a>
 80011a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001364 <process_i2c_data+0x1f4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 80011aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001368 <process_i2c_data+0x1f8>)
 80011ac:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 80011ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001364 <process_i2c_data+0x1f4>)
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da04      	bge.n	80011c2 <process_i2c_data+0x52>
 80011b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001364 <process_i2c_data+0x1f4>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011c0:	e001      	b.n	80011c6 <process_i2c_data+0x56>
 80011c2:	4b68      	ldr	r3, [pc, #416]	@ (8001364 <process_i2c_data+0x1f4>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 80011c6:	4a69      	ldr	r2, [pc, #420]	@ (800136c <process_i2c_data+0x1fc>)
 80011c8:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 80011ca:	4b66      	ldr	r3, [pc, #408]	@ (8001364 <process_i2c_data+0x1f4>)
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da04      	bge.n	80011de <process_i2c_data+0x6e>
 80011d4:	4b63      	ldr	r3, [pc, #396]	@ (8001364 <process_i2c_data+0x1f4>)
 80011d6:	789b      	ldrb	r3, [r3, #2]
 80011d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011dc:	e001      	b.n	80011e2 <process_i2c_data+0x72>
 80011de:	4b61      	ldr	r3, [pc, #388]	@ (8001364 <process_i2c_data+0x1f4>)
 80011e0:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 80011e2:	4a63      	ldr	r2, [pc, #396]	@ (8001370 <process_i2c_data+0x200>)
 80011e4:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 80011e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001364 <process_i2c_data+0x1f4>)
 80011e8:	78db      	ldrb	r3, [r3, #3]
 80011ea:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	da04      	bge.n	80011fa <process_i2c_data+0x8a>
 80011f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001364 <process_i2c_data+0x1f4>)
 80011f2:	78db      	ldrb	r3, [r3, #3]
 80011f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011f8:	e001      	b.n	80011fe <process_i2c_data+0x8e>
 80011fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001364 <process_i2c_data+0x1f4>)
 80011fc:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 80011fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <process_i2c_data+0x204>)
 8001200:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[4] & 0x80) ?
 8001202:	4b58      	ldr	r3, [pc, #352]	@ (8001364 <process_i2c_data+0x1f4>)
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8001208:	2b00      	cmp	r3, #0
 800120a:	da04      	bge.n	8001216 <process_i2c_data+0xa6>
 800120c:	4b55      	ldr	r3, [pc, #340]	@ (8001364 <process_i2c_data+0x1f4>)
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001214:	e001      	b.n	800121a <process_i2c_data+0xaa>
 8001216:	4b53      	ldr	r3, [pc, #332]	@ (8001364 <process_i2c_data+0x1f4>)
 8001218:	791b      	ldrb	r3, [r3, #4]
		tri = (rxbuff[4] & 0x80) ?
 800121a:	4a57      	ldr	r2, [pc, #348]	@ (8001378 <process_i2c_data+0x208>)
 800121c:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[5] & 0x80) ?
 800121e:	4b51      	ldr	r3, [pc, #324]	@ (8001364 <process_i2c_data+0x1f4>)
 8001220:	795b      	ldrb	r3, [r3, #5]
 8001222:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001224:	2b00      	cmp	r3, #0
 8001226:	da04      	bge.n	8001232 <process_i2c_data+0xc2>
 8001228:	4b4e      	ldr	r3, [pc, #312]	@ (8001364 <process_i2c_data+0x1f4>)
 800122a:	795b      	ldrb	r3, [r3, #5]
 800122c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001230:	e001      	b.n	8001236 <process_i2c_data+0xc6>
 8001232:	4b4c      	ldr	r3, [pc, #304]	@ (8001364 <process_i2c_data+0x1f4>)
 8001234:	795b      	ldrb	r3, [r3, #5]
		cir = (rxbuff[5] & 0x80) ?
 8001236:	4a51      	ldr	r2, [pc, #324]	@ (800137c <process_i2c_data+0x20c>)
 8001238:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[6] & 0x80) ?
 800123a:	4b4a      	ldr	r3, [pc, #296]	@ (8001364 <process_i2c_data+0x1f4>)
 800123c:	799b      	ldrb	r3, [r3, #6]
 800123e:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 8001240:	2b00      	cmp	r3, #0
 8001242:	da04      	bge.n	800124e <process_i2c_data+0xde>
 8001244:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <process_i2c_data+0x1f4>)
 8001246:	799b      	ldrb	r3, [r3, #6]
 8001248:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800124c:	e001      	b.n	8001252 <process_i2c_data+0xe2>
 800124e:	4b45      	ldr	r3, [pc, #276]	@ (8001364 <process_i2c_data+0x1f4>)
 8001250:	799b      	ldrb	r3, [r3, #6]
		cro = (rxbuff[6] & 0x80) ?
 8001252:	4a4b      	ldr	r2, [pc, #300]	@ (8001380 <process_i2c_data+0x210>)
 8001254:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[7] & 0x80) ?
 8001256:	4b43      	ldr	r3, [pc, #268]	@ (8001364 <process_i2c_data+0x1f4>)
 8001258:	79db      	ldrb	r3, [r3, #7]
 800125a:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 800125c:	2b00      	cmp	r3, #0
 800125e:	da04      	bge.n	800126a <process_i2c_data+0xfa>
 8001260:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <process_i2c_data+0x1f4>)
 8001262:	79db      	ldrb	r3, [r3, #7]
 8001264:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001268:	e001      	b.n	800126e <process_i2c_data+0xfe>
 800126a:	4b3e      	ldr	r3, [pc, #248]	@ (8001364 <process_i2c_data+0x1f4>)
 800126c:	79db      	ldrb	r3, [r3, #7]
		squ = (rxbuff[7] & 0x80) ?
 800126e:	4a45      	ldr	r2, [pc, #276]	@ (8001384 <process_i2c_data+0x214>)
 8001270:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[8] & 0x80) ?
 8001272:	4b3c      	ldr	r3, [pc, #240]	@ (8001364 <process_i2c_data+0x1f4>)
 8001274:	7a1b      	ldrb	r3, [r3, #8]
 8001276:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 8001278:	2b00      	cmp	r3, #0
 800127a:	da04      	bge.n	8001286 <process_i2c_data+0x116>
 800127c:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <process_i2c_data+0x1f4>)
 800127e:	7a1b      	ldrb	r3, [r3, #8]
 8001280:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001284:	e001      	b.n	800128a <process_i2c_data+0x11a>
 8001286:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <process_i2c_data+0x1f4>)
 8001288:	7a1b      	ldrb	r3, [r3, #8]
		ll1 = (rxbuff[8] & 0x80) ?
 800128a:	4a3f      	ldr	r2, [pc, #252]	@ (8001388 <process_i2c_data+0x218>)
 800128c:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[9] & 0x80) ?
 800128e:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <process_i2c_data+0x1f4>)
 8001290:	7a5b      	ldrb	r3, [r3, #9]
 8001292:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 8001294:	2b00      	cmp	r3, #0
 8001296:	da04      	bge.n	80012a2 <process_i2c_data+0x132>
 8001298:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <process_i2c_data+0x1f4>)
 800129a:	7a5b      	ldrb	r3, [r3, #9]
 800129c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012a0:	e001      	b.n	80012a6 <process_i2c_data+0x136>
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <process_i2c_data+0x1f4>)
 80012a4:	7a5b      	ldrb	r3, [r3, #9]
		rr1 = (rxbuff[9] & 0x80) ?
 80012a6:	4a39      	ldr	r2, [pc, #228]	@ (800138c <process_i2c_data+0x21c>)
 80012a8:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[10] & 0x80) ?
 80012aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001364 <process_i2c_data+0x1f4>)
 80012ac:	7a9b      	ldrb	r3, [r3, #10]
 80012ae:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da04      	bge.n	80012be <process_i2c_data+0x14e>
 80012b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <process_i2c_data+0x1f4>)
 80012b6:	7a9b      	ldrb	r3, [r3, #10]
 80012b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012bc:	e001      	b.n	80012c2 <process_i2c_data+0x152>
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <process_i2c_data+0x1f4>)
 80012c0:	7a9b      	ldrb	r3, [r3, #10]
		ll2 = (rxbuff[10] & 0x80) ?
 80012c2:	4a33      	ldr	r2, [pc, #204]	@ (8001390 <process_i2c_data+0x220>)
 80012c4:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[11] & 0x80) ?
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <process_i2c_data+0x1f4>)
 80012c8:	7adb      	ldrb	r3, [r3, #11]
 80012ca:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da04      	bge.n	80012da <process_i2c_data+0x16a>
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <process_i2c_data+0x1f4>)
 80012d2:	7adb      	ldrb	r3, [r3, #11]
 80012d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012d8:	e001      	b.n	80012de <process_i2c_data+0x16e>
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <process_i2c_data+0x1f4>)
 80012dc:	7adb      	ldrb	r3, [r3, #11]
		rr2 = (rxbuff[11] & 0x80) ?
 80012de:	4a2d      	ldr	r2, [pc, #180]	@ (8001394 <process_i2c_data+0x224>)
 80012e0:	6013      	str	r3, [r2, #0]
		up = (rxbuff[12] & 0x80) ?
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <process_i2c_data+0x1f4>)
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da04      	bge.n	80012f6 <process_i2c_data+0x186>
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <process_i2c_data+0x1f4>)
 80012ee:	7b1b      	ldrb	r3, [r3, #12]
 80012f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012f4:	e001      	b.n	80012fa <process_i2c_data+0x18a>
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <process_i2c_data+0x1f4>)
 80012f8:	7b1b      	ldrb	r3, [r3, #12]
		up = (rxbuff[12] & 0x80) ?
 80012fa:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <process_i2c_data+0x228>)
 80012fc:	6013      	str	r3, [r2, #0]
		down = (rxbuff[13] & 0x80) ?
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <process_i2c_data+0x1f4>)
 8001300:	7b5b      	ldrb	r3, [r3, #13]
 8001302:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001304:	2b00      	cmp	r3, #0
 8001306:	da04      	bge.n	8001312 <process_i2c_data+0x1a2>
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <process_i2c_data+0x1f4>)
 800130a:	7b5b      	ldrb	r3, [r3, #13]
 800130c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001310:	e001      	b.n	8001316 <process_i2c_data+0x1a6>
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <process_i2c_data+0x1f4>)
 8001314:	7b5b      	ldrb	r3, [r3, #13]
		down = (rxbuff[13] & 0x80) ?
 8001316:	4a21      	ldr	r2, [pc, #132]	@ (800139c <process_i2c_data+0x22c>)
 8001318:	6013      	str	r3, [r2, #0]
		right = (rxbuff[14] & 0x80) ?
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <process_i2c_data+0x1f4>)
 800131c:	7b9b      	ldrb	r3, [r3, #14]
 800131e:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8001320:	2b00      	cmp	r3, #0
 8001322:	da04      	bge.n	800132e <process_i2c_data+0x1be>
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <process_i2c_data+0x1f4>)
 8001326:	7b9b      	ldrb	r3, [r3, #14]
 8001328:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800132c:	e001      	b.n	8001332 <process_i2c_data+0x1c2>
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <process_i2c_data+0x1f4>)
 8001330:	7b9b      	ldrb	r3, [r3, #14]
		right = (rxbuff[14] & 0x80) ?
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <process_i2c_data+0x230>)
 8001334:	6013      	str	r3, [r2, #0]
		left = (rxbuff[15] & 0x80) ?
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <process_i2c_data+0x1f4>)
 8001338:	7bdb      	ldrb	r3, [r3, #15]
 800133a:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 800133c:	2b00      	cmp	r3, #0
 800133e:	da04      	bge.n	800134a <process_i2c_data+0x1da>
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <process_i2c_data+0x1f4>)
 8001342:	7bdb      	ldrb	r3, [r3, #15]
 8001344:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001348:	e001      	b.n	800134e <process_i2c_data+0x1de>
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <process_i2c_data+0x1f4>)
 800134c:	7bdb      	ldrb	r3, [r3, #15]
		left = (rxbuff[15] & 0x80) ?
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <process_i2c_data+0x234>)
 8001350:	6013      	str	r3, [r2, #0]
//				"Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %d %d\r\n",
//				lx, ly, rx, ry, tri, cir, cro, squ, ll1, rr1, ll2, rr2, up,
//				down, right, left, ebike_running, drib_speed);

		// Reset the data ready flag
		i2c_data_ready = 0;
 8001352:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <process_i2c_data+0x1f0>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e056      	b.n	8001408 <process_i2c_data+0x298>
 800135a:	bf00      	nop
 800135c:	0800e3b0 	.word	0x0800e3b0
 8001360:	200006e4 	.word	0x200006e4
 8001364:	20000690 	.word	0x20000690
 8001368:	200006a0 	.word	0x200006a0
 800136c:	200006a4 	.word	0x200006a4
 8001370:	200006a8 	.word	0x200006a8
 8001374:	200006ac 	.word	0x200006ac
 8001378:	200006b8 	.word	0x200006b8
 800137c:	200006bc 	.word	0x200006bc
 8001380:	200006b0 	.word	0x200006b0
 8001384:	200006b4 	.word	0x200006b4
 8001388:	200006d0 	.word	0x200006d0
 800138c:	200006d4 	.word	0x200006d4
 8001390:	200006d8 	.word	0x200006d8
 8001394:	200006dc 	.word	0x200006dc
 8001398:	200006c0 	.word	0x200006c0
 800139c:	200006c4 	.word	0x200006c4
 80013a0:	200006cc 	.word	0x200006cc
 80013a4:	200006c8 	.word	0x200006c8
	} else {
		lx = 0, ly = 0, rx = 0, ry = 0, cro = 0, squ = 0, tri = 0, cir = 0, up = 0, down = 0, left = 0, right = 0, ll1 = 0, rr1 = 0, ll2 = 0, rr2 = 0;
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <process_i2c_data+0x29c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <process_i2c_data+0x2a0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <process_i2c_data+0x2a4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <process_i2c_data+0x2a8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <process_i2c_data+0x2ac>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <process_i2c_data+0x2b0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <process_i2c_data+0x2b4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <process_i2c_data+0x2b8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <process_i2c_data+0x2bc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <process_i2c_data+0x2c0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <process_i2c_data+0x2c4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <process_i2c_data+0x2c8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <process_i2c_data+0x2cc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <process_i2c_data+0x2d0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <process_i2c_data+0x2d4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <process_i2c_data+0x2d8>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	}
}
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200006a0 	.word	0x200006a0
 8001410:	200006a4 	.word	0x200006a4
 8001414:	200006a8 	.word	0x200006a8
 8001418:	200006ac 	.word	0x200006ac
 800141c:	200006b0 	.word	0x200006b0
 8001420:	200006b4 	.word	0x200006b4
 8001424:	200006b8 	.word	0x200006b8
 8001428:	200006bc 	.word	0x200006bc
 800142c:	200006c0 	.word	0x200006c0
 8001430:	200006c4 	.word	0x200006c4
 8001434:	200006c8 	.word	0x200006c8
 8001438:	200006cc 	.word	0x200006cc
 800143c:	200006d0 	.word	0x200006d0
 8001440:	200006d4 	.word	0x200006d4
 8001444:	200006d8 	.word	0x200006d8
 8001448:	200006dc 	.word	0x200006dc

0800144c <stopEncoders>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
}

void stopEncoders() {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001450:	213c      	movs	r1, #60	@ 0x3c
 8001452:	4806      	ldr	r0, [pc, #24]	@ (800146c <stopEncoders+0x20>)
 8001454:	f005 fdc0 	bl	8006fd8 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8001458:	213c      	movs	r1, #60	@ 0x3c
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <stopEncoders+0x24>)
 800145c:	f005 fdbc 	bl	8006fd8 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001460:	213c      	movs	r1, #60	@ 0x3c
 8001462:	4804      	ldr	r0, [pc, #16]	@ (8001474 <stopEncoders+0x28>)
 8001464:	f005 fdb8 	bl	8006fd8 <HAL_TIM_Encoder_Stop>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002bc 	.word	0x200002bc
 8001470:	20000304 	.word	0x20000304
 8001474:	2000034c 	.word	0x2000034c

08001478 <startEncoders>:

void startEncoders() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800147c:	213c      	movs	r1, #60	@ 0x3c
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <startEncoders+0x20>)
 8001480:	f005 fd1c 	bl	8006ebc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001484:	213c      	movs	r1, #60	@ 0x3c
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <startEncoders+0x24>)
 8001488:	f005 fd18 	bl	8006ebc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800148c:	213c      	movs	r1, #60	@ 0x3c
 800148e:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <startEncoders+0x28>)
 8001490:	f005 fd14 	bl	8006ebc <HAL_TIM_Encoder_Start>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200002bc 	.word	0x200002bc
 800149c:	20000304 	.word	0x20000304
 80014a0:	2000034c 	.word	0x2000034c

080014a4 <rectToPolar>:
	} else {
		return val;
	}
}

void rectToPolar() {
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	wz = rx;
 80014a8:	4b53      	ldr	r3, [pc, #332]	@ (80015f8 <rectToPolar+0x154>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f859 	bl	8000564 <__aeabi_i2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4951      	ldr	r1, [pc, #324]	@ (80015fc <rectToPolar+0x158>)
 80014b8:	e9c1 2300 	strd	r2, r3, [r1]
	if (abs(lx) < deadzone)
 80014bc:	4b50      	ldr	r3, [pc, #320]	@ (8001600 <rectToPolar+0x15c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bfb8      	it	lt
 80014c4:	425b      	neglt	r3, r3
 80014c6:	2228      	movs	r2, #40	@ 0x28
 80014c8:	4293      	cmp	r3, r2
 80014ca:	da02      	bge.n	80014d2 <rectToPolar+0x2e>
		lx = 0;
 80014cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001600 <rectToPolar+0x15c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
	// else lx = (lx > 0) ? lx - deadzone : lx + deadzone;

	if (abs(ly) < deadzone)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001604 <rectToPolar+0x160>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bfb8      	it	lt
 80014da:	425b      	neglt	r3, r3
 80014dc:	2228      	movs	r2, #40	@ 0x28
 80014de:	4293      	cmp	r3, r2
 80014e0:	da02      	bge.n	80014e8 <rectToPolar+0x44>
		ly = 0;
 80014e2:	4b48      	ldr	r3, [pc, #288]	@ (8001604 <rectToPolar+0x160>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
	// else ly = (ly > 0) ? ly - deadzone : ly + deadzone;

	if (abs(rx) < deadzone)
 80014e8:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <rectToPolar+0x154>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bfb8      	it	lt
 80014f0:	425b      	neglt	r3, r3
 80014f2:	2228      	movs	r2, #40	@ 0x28
 80014f4:	4293      	cmp	r3, r2
 80014f6:	da02      	bge.n	80014fe <rectToPolar+0x5a>
		rx = 0;
 80014f8:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <rectToPolar+0x154>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
	// else rx = (rx > 0) ? rx - deadzone : rx + deadzone;

	if (abs(ry) < deadzone)
 80014fe:	4b42      	ldr	r3, [pc, #264]	@ (8001608 <rectToPolar+0x164>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	bfb8      	it	lt
 8001506:	425b      	neglt	r3, r3
 8001508:	2228      	movs	r2, #40	@ 0x28
 800150a:	4293      	cmp	r3, r2
 800150c:	da02      	bge.n	8001514 <rectToPolar+0x70>
		ry = 0;
 800150e:	4b3e      	ldr	r3, [pc, #248]	@ (8001608 <rectToPolar+0x164>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
	// else ry = (ry > 0) ? ry - deadzone : ry + deadzone;
	rL = sqrt(lx * lx + ly * ly);
 8001514:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <rectToPolar+0x15c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <rectToPolar+0x15c>)
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	fb03 f202 	mul.w	r2, r3, r2
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <rectToPolar+0x160>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4937      	ldr	r1, [pc, #220]	@ (8001604 <rectToPolar+0x160>)
 8001526:	6809      	ldr	r1, [r1, #0]
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f818 	bl	8000564 <__aeabi_i2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b10 	vmov	d0, r2, r3
 800153c:	f00b fb40 	bl	800cbc0 <sqrt>
 8001540:	eeb0 7a40 	vmov.f32	s14, s0
 8001544:	eef0 7a60 	vmov.f32	s15, s1
 8001548:	4b30      	ldr	r3, [pc, #192]	@ (800160c <rectToPolar+0x168>)
 800154a:	ed83 7b00 	vstr	d7, [r3]
	thetaL = atan2(lx, ly);
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <rectToPolar+0x15c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f806 	bl	8000564 <__aeabi_i2d>
 8001558:	4604      	mov	r4, r0
 800155a:	460d      	mov	r5, r1
 800155c:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <rectToPolar+0x160>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffff 	bl	8000564 <__aeabi_i2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	ec43 2b11 	vmov	d1, r2, r3
 800156e:	ec45 4b10 	vmov	d0, r4, r5
 8001572:	f00b fb23 	bl	800cbbc <atan2>
 8001576:	eeb0 7a40 	vmov.f32	s14, s0
 800157a:	eef0 7a60 	vmov.f32	s15, s1
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <rectToPolar+0x16c>)
 8001580:	ed83 7b00 	vstr	d7, [r3]
	rR = sqrt(rx * rx + ry * ry);
 8001584:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <rectToPolar+0x154>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <rectToPolar+0x154>)
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	fb03 f202 	mul.w	r2, r3, r2
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <rectToPolar+0x164>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	491c      	ldr	r1, [pc, #112]	@ (8001608 <rectToPolar+0x164>)
 8001596:	6809      	ldr	r1, [r1, #0]
 8001598:	fb01 f303 	mul.w	r3, r1, r3
 800159c:	4413      	add	r3, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffe0 	bl	8000564 <__aeabi_i2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	ec43 2b10 	vmov	d0, r2, r3
 80015ac:	f00b fb08 	bl	800cbc0 <sqrt>
 80015b0:	eeb0 7a40 	vmov.f32	s14, s0
 80015b4:	eef0 7a60 	vmov.f32	s15, s1
 80015b8:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <rectToPolar+0x170>)
 80015ba:	ed83 7b00 	vstr	d7, [r3]
	thetaR = atan2(ry, rx);
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <rectToPolar+0x164>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffce 	bl	8000564 <__aeabi_i2d>
 80015c8:	4604      	mov	r4, r0
 80015ca:	460d      	mov	r5, r1
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <rectToPolar+0x154>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffc7 	bl	8000564 <__aeabi_i2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b11 	vmov	d1, r2, r3
 80015de:	ec45 4b10 	vmov	d0, r4, r5
 80015e2:	f00b faeb 	bl	800cbbc <atan2>
 80015e6:	eeb0 7a40 	vmov.f32	s14, s0
 80015ea:	eef0 7a60 	vmov.f32	s15, s1
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <rectToPolar+0x174>)
 80015f0:	ed83 7b00 	vstr	d7, [r3]
}
 80015f4:	bf00      	nop
 80015f6:	bdb0      	pop	{r4, r5, r7, pc}
 80015f8:	200006a8 	.word	0x200006a8
 80015fc:	200005d8 	.word	0x200005d8
 8001600:	200006a0 	.word	0x200006a0
 8001604:	200006a4 	.word	0x200006a4
 8001608:	200006ac 	.word	0x200006ac
 800160c:	20000618 	.word	0x20000618
 8001610:	20000620 	.word	0x20000620
 8001614:	20000628 	.word	0x20000628
 8001618:	20000630 	.word	0x20000630
 800161c:	00000000 	.word	0x00000000

08001620 <compute3wheel>:

void compute3wheel() {
 8001620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001624:	b08c      	sub	sp, #48	@ 0x30
 8001626:	af00      	add	r7, sp, #0
	// Calculate joystick-based velocities
	const double theta = -30 * pi / 180;
 8001628:	a3b1      	add	r3, pc, #708	@ (adr r3, 80018f0 <compute3wheel+0x2d0>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double lx_rotated = lx * cos(theta) - ly * sin(theta);
 8001632:	4ba3      	ldr	r3, [pc, #652]	@ (80018c0 <compute3wheel+0x2a0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff94 	bl	8000564 <__aeabi_i2d>
 800163c:	4604      	mov	r4, r0
 800163e:	460d      	mov	r5, r1
 8001640:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001644:	f00b fae8 	bl	800cc18 <cos>
 8001648:	ec53 2b10 	vmov	r2, r3, d0
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fff2 	bl	8000638 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4690      	mov	r8, r2
 800165a:	4699      	mov	r9, r3
 800165c:	4b99      	ldr	r3, [pc, #612]	@ (80018c4 <compute3wheel+0x2a4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff7f 	bl	8000564 <__aeabi_i2d>
 8001666:	4604      	mov	r4, r0
 8001668:	460d      	mov	r5, r1
 800166a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800166e:	f00b fb27 	bl	800ccc0 <sin>
 8001672:	ec53 2b10 	vmov	r2, r3, d0
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe ffdd 	bl	8000638 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4640      	mov	r0, r8
 8001684:	4649      	mov	r1, r9
 8001686:	f7fe fe1f 	bl	80002c8 <__aeabi_dsub>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double ly_rotated = lx * sin(theta) + ly * cos(theta);
 8001692:	4b8b      	ldr	r3, [pc, #556]	@ (80018c0 <compute3wheel+0x2a0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff64 	bl	8000564 <__aeabi_i2d>
 800169c:	4604      	mov	r4, r0
 800169e:	460d      	mov	r5, r1
 80016a0:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80016a4:	f00b fb0c 	bl	800ccc0 <sin>
 80016a8:	ec53 2b10 	vmov	r2, r3, d0
 80016ac:	4620      	mov	r0, r4
 80016ae:	4629      	mov	r1, r5
 80016b0:	f7fe ffc2 	bl	8000638 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4690      	mov	r8, r2
 80016ba:	4699      	mov	r9, r3
 80016bc:	4b81      	ldr	r3, [pc, #516]	@ (80018c4 <compute3wheel+0x2a4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff4f 	bl	8000564 <__aeabi_i2d>
 80016c6:	4604      	mov	r4, r0
 80016c8:	460d      	mov	r5, r1
 80016ca:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80016ce:	f00b faa3 	bl	800cc18 <cos>
 80016d2:	ec53 2b10 	vmov	r2, r3, d0
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7fe ffad 	bl	8000638 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4640      	mov	r0, r8
 80016e4:	4649      	mov	r1, r9
 80016e6:	f7fe fdf1 	bl	80002cc <__adddf3>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double vx = ly_rotated;
 80016f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double vy = lx_rotated;
 80016fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	w = rx * 2.5;
 8001702:	4b71      	ldr	r3, [pc, #452]	@ (80018c8 <compute3wheel+0x2a8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff2c 	bl	8000564 <__aeabi_i2d>
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b6e      	ldr	r3, [pc, #440]	@ (80018cc <compute3wheel+0x2ac>)
 8001712:	f7fe ff91 	bl	8000638 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	496d      	ldr	r1, [pc, #436]	@ (80018d0 <compute3wheel+0x2b0>)
 800171c:	e9c1 2300 	strd	r2, r3, [r1]
	double speedFactorL = 15 * (rL / 127 + rR / 127) / 2;
 8001720:	4b6c      	ldr	r3, [pc, #432]	@ (80018d4 <compute3wheel+0x2b4>)
 8001722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001726:	a360      	add	r3, pc, #384	@ (adr r3, 80018a8 <compute3wheel+0x288>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7ff f8ae 	bl	800088c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4614      	mov	r4, r2
 8001736:	461d      	mov	r5, r3
 8001738:	4b67      	ldr	r3, [pc, #412]	@ (80018d8 <compute3wheel+0x2b8>)
 800173a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173e:	a35a      	add	r3, pc, #360	@ (adr r3, 80018a8 <compute3wheel+0x288>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f8a2 	bl	800088c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4620      	mov	r0, r4
 800174e:	4629      	mov	r1, r5
 8001750:	f7fe fdbc 	bl	80002cc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b5e      	ldr	r3, [pc, #376]	@ (80018dc <compute3wheel+0x2bc>)
 8001762:	f7fe ff69 	bl	8000638 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001776:	f7ff f889 	bl	800088c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 2300 	strd	r2, r3, [r7]
	// Modify wheel velocities to include yaw correction
	target_wf = ((-0.5 * vx) + (sqrt(3) / 2) * vy + l0 * w) * speedFactorL;
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b56      	ldr	r3, [pc, #344]	@ (80018e0 <compute3wheel+0x2c0>)
 8001788:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178c:	f7fe ff54 	bl	8000638 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4614      	mov	r4, r2
 8001796:	461d      	mov	r5, r3
 8001798:	a345      	add	r3, pc, #276	@ (adr r3, 80018b0 <compute3wheel+0x290>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017a2:	f7fe ff49 	bl	8000638 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7fe fd8d 	bl	80002cc <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	461d      	mov	r5, r3
 80017ba:	4b45      	ldr	r3, [pc, #276]	@ (80018d0 <compute3wheel+0x2b0>)
 80017bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c0:	a33d      	add	r3, pc, #244	@ (adr r3, 80018b8 <compute3wheel+0x298>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe ff37 	bl	8000638 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe fd7b 	bl	80002cc <__adddf3>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017e2:	f7fe ff29 	bl	8000638 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	493e      	ldr	r1, [pc, #248]	@ (80018e4 <compute3wheel+0x2c4>)
 80017ec:	e9c1 2300 	strd	r2, r3, [r1]
	target_wrr = ((-0.5 * vx) - (sqrt(3) / 2) * vy + l0 * w) * speedFactorL;
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <compute3wheel+0x2c0>)
 80017f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017fa:	f7fe ff1d 	bl	8000638 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4614      	mov	r4, r2
 8001804:	461d      	mov	r5, r3
 8001806:	a32a      	add	r3, pc, #168	@ (adr r3, 80018b0 <compute3wheel+0x290>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001810:	f7fe ff12 	bl	8000638 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fd54 	bl	80002c8 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4614      	mov	r4, r2
 8001826:	461d      	mov	r5, r3
 8001828:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <compute3wheel+0x2b0>)
 800182a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182e:	a322      	add	r3, pc, #136	@ (adr r3, 80018b8 <compute3wheel+0x298>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe ff00 	bl	8000638 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4620      	mov	r0, r4
 800183e:	4629      	mov	r1, r5
 8001840:	f7fe fd44 	bl	80002cc <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001850:	f7fe fef2 	bl	8000638 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4923      	ldr	r1, [pc, #140]	@ (80018e8 <compute3wheel+0x2c8>)
 800185a:	e9c1 2300 	strd	r2, r3, [r1]
	target_wrl = (vx + l0 * w) * speedFactorL;
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <compute3wheel+0x2b0>)
 8001860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001864:	a314      	add	r3, pc, #80	@ (adr r3, 80018b8 <compute3wheel+0x298>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fee5 	bl	8000638 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800187a:	f7fe fd27 	bl	80002cc <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800188a:	f7fe fed5 	bl	8000638 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4916      	ldr	r1, [pc, #88]	@ (80018ec <compute3wheel+0x2cc>)
 8001894:	e9c1 2300 	strd	r2, r3, [r1]
	// target_wrl = (-vx + l0*w)*speedFactorL;
	// Constrain target wheel speeds
//	target_wf = constrain(target_wf, -950, 950);
//	target_wrr = constrain(target_wrr, -950, 950);
//	target_wrl = constrain(target_wrl, -950, 950);
}
 8001898:	bf00      	nop
 800189a:	3730      	adds	r7, #48	@ 0x30
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018a2:	bf00      	nop
 80018a4:	f3af 8000 	nop.w
 80018a8:	00000000 	.word	0x00000000
 80018ac:	405fc000 	.word	0x405fc000
 80018b0:	e8584caa 	.word	0xe8584caa
 80018b4:	3febb67a 	.word	0x3febb67a
 80018b8:	33333333 	.word	0x33333333
 80018bc:	3fd33333 	.word	0x3fd33333
 80018c0:	200006a0 	.word	0x200006a0
 80018c4:	200006a4 	.word	0x200006a4
 80018c8:	200006a8 	.word	0x200006a8
 80018cc:	40040000 	.word	0x40040000
 80018d0:	20000610 	.word	0x20000610
 80018d4:	20000618 	.word	0x20000618
 80018d8:	20000628 	.word	0x20000628
 80018dc:	402e0000 	.word	0x402e0000
 80018e0:	bfe00000 	.word	0xbfe00000
 80018e4:	200005e0 	.word	0x200005e0
 80018e8:	200005f0 	.word	0x200005f0
 80018ec:	200005e8 	.word	0x200005e8
 80018f0:	382b64d8 	.word	0x382b64d8
 80018f4:	bfe0c152 	.word	0xbfe0c152

080018f8 <applyDeceleration>:

void applyDeceleration() {
 80018f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018fc:	af00      	add	r7, sp, #0
	// Gradually approach target speeds for each wheel
	current_wf += (target_wf - current_wf) / decelerationRate;
 80018fe:	4b79      	ldr	r3, [pc, #484]	@ (8001ae4 <applyDeceleration+0x1ec>)
 8001900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001904:	4b78      	ldr	r3, [pc, #480]	@ (8001ae8 <applyDeceleration+0x1f0>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fcdd 	bl	80002c8 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b74      	ldr	r3, [pc, #464]	@ (8001aec <applyDeceleration+0x1f4>)
 800191c:	f7fe ffb6 	bl	800088c <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae8 <applyDeceleration+0x1f0>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fccd 	bl	80002cc <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	496c      	ldr	r1, [pc, #432]	@ (8001ae8 <applyDeceleration+0x1f0>)
 8001938:	e9c1 2300 	strd	r2, r3, [r1]
	current_wrl += (target_wrl - current_wrl) / decelerationRate;
 800193c:	4b6c      	ldr	r3, [pc, #432]	@ (8001af0 <applyDeceleration+0x1f8>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <applyDeceleration+0x1fc>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fcbe 	bl	80002c8 <__aeabi_dsub>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b64      	ldr	r3, [pc, #400]	@ (8001aec <applyDeceleration+0x1f4>)
 800195a:	f7fe ff97 	bl	800088c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <applyDeceleration+0x1fc>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fcae 	bl	80002cc <__adddf3>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	495f      	ldr	r1, [pc, #380]	@ (8001af4 <applyDeceleration+0x1fc>)
 8001976:	e9c1 2300 	strd	r2, r3, [r1]
	current_wrr += (target_wrr - current_wrr) / decelerationRate;
 800197a:	4b5f      	ldr	r3, [pc, #380]	@ (8001af8 <applyDeceleration+0x200>)
 800197c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001980:	4b5e      	ldr	r3, [pc, #376]	@ (8001afc <applyDeceleration+0x204>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fc9f 	bl	80002c8 <__aeabi_dsub>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <applyDeceleration+0x1f4>)
 8001998:	f7fe ff78 	bl	800088c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	4b55      	ldr	r3, [pc, #340]	@ (8001afc <applyDeceleration+0x204>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fc8f 	bl	80002cc <__adddf3>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4952      	ldr	r1, [pc, #328]	@ (8001afc <applyDeceleration+0x204>)
 80019b4:	e9c1 2300 	strd	r2, r3, [r1]
	// Serial.print(current_wrr);
	// Serial.print("wrl =");
	// Serial.println(current_wrl);

	// Update motor directions and speeds based on decelerated values
	if (current_wf >= 0) {
 80019b8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <applyDeceleration+0x1f0>)
 80019ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f7ff f8bd 	bl	8000b44 <__aeabi_dcmpge>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d010      	beq.n	80019f2 <applyDeceleration+0xfa>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	484a      	ldr	r0, [pc, #296]	@ (8001b00 <applyDeceleration+0x208>)
 80019d6:	f002 fb09 	bl	8003fec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, current_wf);
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <applyDeceleration+0x1f0>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	4948      	ldr	r1, [pc, #288]	@ (8001b04 <applyDeceleration+0x20c>)
 80019e2:	680e      	ldr	r6, [r1, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f8fe 	bl	8000be8 <__aeabi_d2uiz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	6373      	str	r3, [r6, #52]	@ 0x34
 80019f0:	e012      	b.n	8001a18 <applyDeceleration+0x120>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	2101      	movs	r1, #1
 80019f6:	4842      	ldr	r0, [pc, #264]	@ (8001b00 <applyDeceleration+0x208>)
 80019f8:	f002 faf8 	bl	8003fec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, -current_wf);
 80019fc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <applyDeceleration+0x1f0>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	4692      	mov	sl, r2
 8001a04:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001a08:	4b3e      	ldr	r3, [pc, #248]	@ (8001b04 <applyDeceleration+0x20c>)
 8001a0a:	681e      	ldr	r6, [r3, #0]
 8001a0c:	4650      	mov	r0, sl
 8001a0e:	4659      	mov	r1, fp
 8001a10:	f7ff f8ea 	bl	8000be8 <__aeabi_d2uiz>
 8001a14:	4603      	mov	r3, r0
 8001a16:	6373      	str	r3, [r6, #52]	@ 0x34
	}

	if (current_wrl >= 0) {
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <applyDeceleration+0x1fc>)
 8001a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f7ff f88d 	bl	8000b44 <__aeabi_dcmpge>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <applyDeceleration+0x15a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2102      	movs	r1, #2
 8001a34:	4832      	ldr	r0, [pc, #200]	@ (8001b00 <applyDeceleration+0x208>)
 8001a36:	f002 fad9 	bl	8003fec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, current_wrl);
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <applyDeceleration+0x1fc>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	4931      	ldr	r1, [pc, #196]	@ (8001b08 <applyDeceleration+0x210>)
 8001a42:	680e      	ldr	r6, [r1, #0]
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f8ce 	bl	8000be8 <__aeabi_d2uiz>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	6373      	str	r3, [r6, #52]	@ 0x34
 8001a50:	e012      	b.n	8001a78 <applyDeceleration+0x180>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2102      	movs	r1, #2
 8001a56:	482a      	ldr	r0, [pc, #168]	@ (8001b00 <applyDeceleration+0x208>)
 8001a58:	f002 fac8 	bl	8003fec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, -current_wrl);
 8001a5c:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <applyDeceleration+0x1fc>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	4690      	mov	r8, r2
 8001a64:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001a68:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <applyDeceleration+0x210>)
 8001a6a:	681e      	ldr	r6, [r3, #0]
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	4649      	mov	r1, r9
 8001a70:	f7ff f8ba 	bl	8000be8 <__aeabi_d2uiz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	6373      	str	r3, [r6, #52]	@ 0x34
	}

	if (current_wrr >= 0) {
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <applyDeceleration+0x204>)
 8001a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	f7ff f85d 	bl	8000b44 <__aeabi_dcmpge>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d011      	beq.n	8001ab4 <applyDeceleration+0x1bc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a96:	481d      	ldr	r0, [pc, #116]	@ (8001b0c <applyDeceleration+0x214>)
 8001a98:	f002 faa8 	bl	8003fec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, current_wrr);
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <applyDeceleration+0x204>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	491b      	ldr	r1, [pc, #108]	@ (8001b10 <applyDeceleration+0x218>)
 8001aa4:	680c      	ldr	r4, [r1, #0]
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f89d 	bl	8000be8 <__aeabi_d2uiz>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6363      	str	r3, [r4, #52]	@ 0x34
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, -current_wrr);
	}
}
 8001ab2:	e013      	b.n	8001adc <applyDeceleration+0x1e4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aba:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <applyDeceleration+0x214>)
 8001abc:	f002 fa96 	bl	8003fec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, -current_wrr);
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <applyDeceleration+0x204>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	4614      	mov	r4, r2
 8001ac8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001acc:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <applyDeceleration+0x218>)
 8001ace:	681e      	ldr	r6, [r3, #0]
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7ff f888 	bl	8000be8 <__aeabi_d2uiz>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	6373      	str	r3, [r6, #52]	@ 0x34
}
 8001adc:	bf00      	nop
 8001ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200005e0 	.word	0x200005e0
 8001ae8:	200005f8 	.word	0x200005f8
 8001aec:	403e0000 	.word	0x403e0000
 8001af0:	200005e8 	.word	0x200005e8
 8001af4:	20000600 	.word	0x20000600
 8001af8:	200005f0 	.word	0x200005f0
 8001afc:	20000608 	.word	0x20000608
 8001b00:	40020800 	.word	0x40020800
 8001b04:	20000424 	.word	0x20000424
 8001b08:	2000046c 	.word	0x2000046c
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	200004b4 	.word	0x200004b4

08001b14 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b0a1      	sub	sp, #132	@ 0x84
 8001b18:	af10      	add	r7, sp, #64	@ 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b1a:	f001 fdf9 	bl	8003710 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b1e:	f000 fb1d 	bl	800215c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b22:	f000 ffe5 	bl	8002af0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001b26:	f000 ffb9 	bl	8002a9c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001b2a:	f000 fbe5 	bl	80022f8 <MX_TIM1_Init>
	MX_TIM8_Init();
 8001b2e:	f000 fdc3 	bl	80026b8 <MX_TIM8_Init>
	MX_I2C1_Init();
 8001b32:	f000 fb85 	bl	8002240 <MX_I2C1_Init>
	MX_TIM5_Init();
 8001b36:	f000 fd6b 	bl	8002610 <MX_TIM5_Init>
	MX_TIM10_Init();
 8001b3a:	f000 fe15 	bl	8002768 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001b3e:	f000 fe61 	bl	8002804 <MX_TIM11_Init>
	MX_TIM13_Init();
 8001b42:	f000 ff0f 	bl	8002964 <MX_TIM13_Init>
	MX_TIM2_Init();
 8001b46:	f000 fc91 	bl	800246c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001b4a:	f000 fce3 	bl	8002514 <MX_TIM3_Init>
	MX_TIM12_Init();
 8001b4e:	f000 fea7 	bl	80028a0 <MX_TIM12_Init>
	MX_TIM14_Init();
 8001b52:	f000 ff55 	bl	8002a00 <MX_TIM14_Init>
	MX_I2C2_Init();
 8001b56:	f000 fba1 	bl	800229c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
//	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
//	HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, 16);
//
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b5a:	213c      	movs	r1, #60	@ 0x3c
 8001b5c:	4847      	ldr	r0, [pc, #284]	@ (8001c7c <main+0x168>)
 8001b5e:	f005 f9ad 	bl	8006ebc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b62:	213c      	movs	r1, #60	@ 0x3c
 8001b64:	4846      	ldr	r0, [pc, #280]	@ (8001c80 <main+0x16c>)
 8001b66:	f005 f9a9 	bl	8006ebc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b6a:	213c      	movs	r1, #60	@ 0x3c
 8001b6c:	4845      	ldr	r0, [pc, #276]	@ (8001c84 <main+0x170>)
 8001b6e:	f005 f9a5 	bl	8006ebc <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b72:	2100      	movs	r1, #0
 8001b74:	4841      	ldr	r0, [pc, #260]	@ (8001c7c <main+0x168>)
 8001b76:	f005 f833 	bl	8006be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	483f      	ldr	r0, [pc, #252]	@ (8001c7c <main+0x168>)
 8001b7e:	f005 f82f 	bl	8006be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b82:	2108      	movs	r1, #8
 8001b84:	483f      	ldr	r0, [pc, #252]	@ (8001c84 <main+0x170>)
 8001b86:	f005 f82b 	bl	8006be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	483e      	ldr	r0, [pc, #248]	@ (8001c88 <main+0x174>)
 8001b8e:	f005 f827 	bl	8006be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001b92:	2100      	movs	r1, #0
 8001b94:	483d      	ldr	r0, [pc, #244]	@ (8001c8c <main+0x178>)
 8001b96:	f005 f823 	bl	8006be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	483c      	ldr	r0, [pc, #240]	@ (8001c90 <main+0x17c>)
 8001b9e:	f005 f81f 	bl	8006be0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	483b      	ldr	r0, [pc, #236]	@ (8001c94 <main+0x180>)
 8001ba6:	f005 f81b 	bl	8006be0 <HAL_TIM_PWM_Start>

	// Initialize I2C slave communication
	init_i2c_slave();
 8001baa:	f7ff fa3b 	bl	8001024 <init_i2c_slave>

	// Set default values
	memset(rxbuff, 0, I2C_BUFFER_SIZE);
 8001bae:	2210      	movs	r2, #16
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4839      	ldr	r0, [pc, #228]	@ (8001c98 <main+0x184>)
 8001bb4:	f007 fcbe 	bl	8009534 <memset>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* ps5 controller */
		process_i2c_data();
 8001bb8:	f7ff fada 	bl	8001170 <process_i2c_data>
//		right = (rxbuff[14] & 0x80) ?
//				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
//		left = (rxbuff[15] & 0x80) ?
//				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
//
		printf(
 8001bbc:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <main+0x188>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ca0 <main+0x18c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bc8:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <main+0x190>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bce:	4b36      	ldr	r3, [pc, #216]	@ (8001ca8 <main+0x194>)
 8001bd0:	681d      	ldr	r5, [r3, #0]
 8001bd2:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <main+0x198>)
 8001bd4:	681e      	ldr	r6, [r3, #0]
 8001bd6:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <main+0x19c>)
 8001bd8:	681c      	ldr	r4, [r3, #0]
 8001bda:	623c      	str	r4, [r7, #32]
 8001bdc:	4b35      	ldr	r3, [pc, #212]	@ (8001cb4 <main+0x1a0>)
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	61f9      	str	r1, [r7, #28]
 8001be2:	4b35      	ldr	r3, [pc, #212]	@ (8001cb8 <main+0x1a4>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	61b8      	str	r0, [r7, #24]
 8001be8:	4b34      	ldr	r3, [pc, #208]	@ (8001cbc <main+0x1a8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <main+0x1ac>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	613a      	str	r2, [r7, #16]
 8001bf4:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <main+0x1b0>)
 8001bf6:	681c      	ldr	r4, [r3, #0]
 8001bf8:	60fc      	str	r4, [r7, #12]
 8001bfa:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <main+0x1b4>)
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <main+0x1b8>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <main+0x1bc>)
 8001c08:	681c      	ldr	r4, [r3, #0]
 8001c0a:	4b32      	ldr	r3, [pc, #200]	@ (8001cd4 <main+0x1c0>)
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <main+0x1c4>)
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	4b32      	ldr	r3, [pc, #200]	@ (8001cdc <main+0x1c8>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b32      	ldr	r3, [pc, #200]	@ (8001ce0 <main+0x1cc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8001c1c:	920d      	str	r2, [sp, #52]	@ 0x34
 8001c1e:	910c      	str	r1, [sp, #48]	@ 0x30
 8001c20:	900b      	str	r0, [sp, #44]	@ 0x2c
 8001c22:	940a      	str	r4, [sp, #40]	@ 0x28
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	9009      	str	r0, [sp, #36]	@ 0x24
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	9108      	str	r1, [sp, #32]
 8001c2c:	68fc      	ldr	r4, [r7, #12]
 8001c2e:	9407      	str	r4, [sp, #28]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	9206      	str	r2, [sp, #24]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	9305      	str	r3, [sp, #20]
 8001c38:	69b8      	ldr	r0, [r7, #24]
 8001c3a:	9004      	str	r0, [sp, #16]
 8001c3c:	69f9      	ldr	r1, [r7, #28]
 8001c3e:	9103      	str	r1, [sp, #12]
 8001c40:	6a3c      	ldr	r4, [r7, #32]
 8001c42:	9402      	str	r4, [sp, #8]
 8001c44:	9601      	str	r6, [sp, #4]
 8001c46:	9500      	str	r5, [sp, #0]
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c4e:	4825      	ldr	r0, [pc, #148]	@ (8001ce4 <main+0x1d0>)
 8001c50:	f007 fb08 	bl	8009264 <iprintf>
//				down, right, left, target_wf, target_wrl, target_wrr, ebike_running);

//			HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, 16);

		/* 3 wheel */
		MovementState current_state = STOP;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		rectToPolar();
 8001c5a:	f7ff fc23 	bl	80014a4 <rectToPolar>
		compute3wheel();
 8001c5e:	f7ff fcdf 	bl	8001620 <compute3wheel>
		applyDeceleration();
 8001c62:	f7ff fe49 	bl	80018f8 <applyDeceleration>

		if (current_state == CLOCKWISE || current_state == ANTICLOCKWISE) {
 8001c66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d003      	beq.n	8001c76 <main+0x162>
 8001c6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d138      	bne.n	8001ce8 <main+0x1d4>
			stopEncoders();
 8001c76:	f7ff fbe9 	bl	800144c <stopEncoders>
 8001c7a:	e037      	b.n	8001cec <main+0x1d8>
 8001c7c:	200002bc 	.word	0x200002bc
 8001c80:	20000304 	.word	0x20000304
 8001c84:	2000034c 	.word	0x2000034c
 8001c88:	20000394 	.word	0x20000394
 8001c8c:	20000424 	.word	0x20000424
 8001c90:	2000046c 	.word	0x2000046c
 8001c94:	200004b4 	.word	0x200004b4
 8001c98:	20000690 	.word	0x20000690
 8001c9c:	200006a0 	.word	0x200006a0
 8001ca0:	200006a4 	.word	0x200006a4
 8001ca4:	200006a8 	.word	0x200006a8
 8001ca8:	200006ac 	.word	0x200006ac
 8001cac:	200006b8 	.word	0x200006b8
 8001cb0:	200006bc 	.word	0x200006bc
 8001cb4:	200006b0 	.word	0x200006b0
 8001cb8:	200006b4 	.word	0x200006b4
 8001cbc:	200006d0 	.word	0x200006d0
 8001cc0:	200006d4 	.word	0x200006d4
 8001cc4:	200006d8 	.word	0x200006d8
 8001cc8:	200006dc 	.word	0x200006dc
 8001ccc:	200006c0 	.word	0x200006c0
 8001cd0:	200006c4 	.word	0x200006c4
 8001cd4:	200006cc 	.word	0x200006cc
 8001cd8:	200006c8 	.word	0x200006c8
 8001cdc:	20000650 	.word	0x20000650
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	0800e3cc 	.word	0x0800e3cc
		} else {
			startEncoders();
 8001ce8:	f7ff fbc6 	bl	8001478 <startEncoders>
		}

		/* 3 encoders */
		uint16_t raw_counter1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001cec:	4b75      	ldr	r3, [pc, #468]	@ (8001ec4 <main+0x3b0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		uint32_t raw_counter2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001cf4:	4b74      	ldr	r3, [pc, #464]	@ (8001ec8 <main+0x3b4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
		uint16_t raw_counter3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001cfc:	4b73      	ldr	r3, [pc, #460]	@ (8001ecc <main+0x3b8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	86fb      	strh	r3, [r7, #54]	@ 0x36

		// Convert to signed values
		signed_counter1 =
				(raw_counter1 < 32768) ?
						(int16_t) raw_counter1 :
 8001d04:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
		signed_counter1 =
 8001d08:	4b71      	ldr	r3, [pc, #452]	@ (8001ed0 <main+0x3bc>)
 8001d0a:	801a      	strh	r2, [r3, #0]
						(int16_t) (raw_counter1 - 65536);
		signed_counter2 =
				(raw_counter2 < 2147483648) ?
						(int32_t) raw_counter2 :
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
		signed_counter2 =
 8001d0e:	4a71      	ldr	r2, [pc, #452]	@ (8001ed4 <main+0x3c0>)
 8001d10:	6013      	str	r3, [r2, #0]
						(int32_t) (raw_counter2 - 4294967296);
		signed_counter3 =
				(raw_counter3 < 32768) ?
						(int16_t) raw_counter3 :
 8001d12:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
		signed_counter3 =
 8001d16:	4b70      	ldr	r3, [pc, #448]	@ (8001ed8 <main+0x3c4>)
 8001d18:	801a      	strh	r2, [r3, #0]
		////				printf("Yaw: %.2f\r\n", yaw);
		//		printf("Encoder position: %d %d %d X: %.2f Y: %.2f\r\n",
		//				signed_counter1, signed_counter2, signed_counter3, x, y);
		/* Stepper */
		//		stepper_running1 = 1;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 8001d1a:	4b70      	ldr	r3, [pc, #448]	@ (8001edc <main+0x3c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	486c      	ldr	r0, [pc, #432]	@ (8001ee0 <main+0x3cc>)
 8001d2e:	f002 f95d 	bl	8003fec <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,
 8001d32:	4b6a      	ldr	r3, [pc, #424]	@ (8001edc <main+0x3c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	2140      	movs	r1, #64	@ 0x40
 8001d44:	4866      	ldr	r0, [pc, #408]	@ (8001ee0 <main+0x3cc>)
 8001d46:	f002 f951 	bl	8003fec <HAL_GPIO_WritePin>
				!direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 8001d4a:	4b66      	ldr	r3, [pc, #408]	@ (8001ee4 <main+0x3d0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d117      	bne.n	8001d82 <main+0x26e>
 8001d52:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <main+0x3d4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d113      	bne.n	8001d82 <main+0x26e>
			direction1 = 1;  // Set to Anti-clockwise
 8001d5a:	4b60      	ldr	r3, [pc, #384]	@ (8001edc <main+0x3c8>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8001d60:	4b62      	ldr	r3, [pc, #392]	@ (8001eec <main+0x3d8>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8001d66:	4b62      	ldr	r3, [pc, #392]	@ (8001ef0 <main+0x3dc>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
			target_steps = STEPS;
 8001d6c:	4b61      	ldr	r3, [pc, #388]	@ (8001ef4 <main+0x3e0>)
 8001d6e:	22f0      	movs	r2, #240	@ 0xf0
 8001d70:	601a      	str	r2, [r3, #0]
			target_steps1 = STEPS;
 8001d72:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <main+0x3e4>)
 8001d74:	22f0      	movs	r2, #240	@ 0xf0
 8001d76:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2180      	movs	r1, #128	@ 0x80
 8001d7c:	4858      	ldr	r0, [pc, #352]	@ (8001ee0 <main+0x3cc>)
 8001d7e:	f002 f935 	bl	8003fec <HAL_GPIO_WritePin>
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8001d82:	4b5e      	ldr	r3, [pc, #376]	@ (8001efc <main+0x3e8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d117      	bne.n	8001dba <main+0x2a6>
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f00 <main+0x3ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d113      	bne.n	8001dba <main+0x2a6>
			direction1 = 0;  // Set to Clockwise
 8001d92:	4b52      	ldr	r3, [pc, #328]	@ (8001edc <main+0x3c8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8001d98:	4b54      	ldr	r3, [pc, #336]	@ (8001eec <main+0x3d8>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8001d9e:	4b54      	ldr	r3, [pc, #336]	@ (8001ef0 <main+0x3dc>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
			target_steps = STEPS;
 8001da4:	4b53      	ldr	r3, [pc, #332]	@ (8001ef4 <main+0x3e0>)
 8001da6:	22f0      	movs	r2, #240	@ 0xf0
 8001da8:	601a      	str	r2, [r3, #0]
			target_steps1 = STEPS;
 8001daa:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <main+0x3e4>)
 8001dac:	22f0      	movs	r2, #240	@ 0xf0
 8001dae:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2180      	movs	r1, #128	@ 0x80
 8001db4:	484a      	ldr	r0, [pc, #296]	@ (8001ee0 <main+0x3cc>)
 8001db6:	f002 f919 	bl	8003fec <HAL_GPIO_WritePin>
		}
		if (cir == 1 && !prev_cir) {
 8001dba:	4b52      	ldr	r3, [pc, #328]	@ (8001f04 <main+0x3f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d114      	bne.n	8001dec <main+0x2d8>
 8001dc2:	4b51      	ldr	r3, [pc, #324]	@ (8001f08 <main+0x3f4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d110      	bne.n	8001dec <main+0x2d8>
			stepper_running = 0;
 8001dca:	4b48      	ldr	r3, [pc, #288]	@ (8001eec <main+0x3d8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
			stepper_running1 = 0;
 8001dd0:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <main+0x3dc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
			current_steps = 0;
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <main+0x3f8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
			current_steps1 = 0;
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8001f10 <main+0x3fc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	483e      	ldr	r0, [pc, #248]	@ (8001ee0 <main+0x3cc>)
 8001de8:	f002 f900 	bl	8003fec <HAL_GPIO_WritePin>
		}
		prev_ll1 = ll1;
 8001dec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee4 <main+0x3d0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee8 <main+0x3d4>)
 8001df2:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 8001df4:	4b41      	ldr	r3, [pc, #260]	@ (8001efc <main+0x3e8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a41      	ldr	r2, [pc, #260]	@ (8001f00 <main+0x3ec>)
 8001dfa:	6013      	str	r3, [r2, #0]
		prev_cir = cir;
 8001dfc:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <main+0x3f0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <main+0x3f4>)
 8001e02:	6013      	str	r3, [r2, #0]
		if (stepper_running && (HAL_GetTick() - last_step_time) >= step_delay
 8001e04:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <main+0x3d8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d02e      	beq.n	8001e6a <main+0x356>
 8001e0c:	f001 fce6 	bl	80037dc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <main+0x400>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a3f      	ldr	r2, [pc, #252]	@ (8001f18 <main+0x404>)
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d324      	bcc.n	8001e6a <main+0x356>
				&& current_steps < target_steps) {
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <main+0x3f8>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b33      	ldr	r3, [pc, #204]	@ (8001ef4 <main+0x3e0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d21e      	bcs.n	8001e6a <main+0x356>
			last_step_time = HAL_GetTick(); // Update last step time
 8001e2c:	f001 fcd6 	bl	80037dc <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a38      	ldr	r2, [pc, #224]	@ (8001f14 <main+0x400>)
 8001e34:	6013      	str	r3, [r2, #0]

			if (step_state == 0) {
 8001e36:	4b39      	ldr	r3, [pc, #228]	@ (8001f1c <main+0x408>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <main+0x346>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2120      	movs	r1, #32
 8001e42:	4827      	ldr	r0, [pc, #156]	@ (8001ee0 <main+0x3cc>)
 8001e44:	f002 f8d2 	bl	8003fec <HAL_GPIO_WritePin>
				step_state = 1;
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <main+0x408>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
				current_steps++;
 8001e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <main+0x3f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <main+0x3f8>)
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e007      	b.n	8001e6a <main+0x356>
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	4820      	ldr	r0, [pc, #128]	@ (8001ee0 <main+0x3cc>)
 8001e60:	f002 f8c4 	bl	8003fec <HAL_GPIO_WritePin>
				step_state = 0;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <main+0x408>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
			}
		}
		if (stepper_running1 && (HAL_GetTick() - last_step_time1) >= step_delay1
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <main+0x3dc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d067      	beq.n	8001f42 <main+0x42e>
 8001e72:	f001 fcb3 	bl	80037dc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <main+0x40c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	4a29      	ldr	r2, [pc, #164]	@ (8001f24 <main+0x410>)
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d35d      	bcc.n	8001f42 <main+0x42e>
				&& current_steps1 < target_steps1) {
 8001e86:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <main+0x3fc>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <main+0x3e4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d257      	bcs.n	8001f42 <main+0x42e>
			last_step_time1 = HAL_GetTick(); // Update last step time
 8001e92:	f001 fca3 	bl	80037dc <HAL_GetTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a21      	ldr	r2, [pc, #132]	@ (8001f20 <main+0x40c>)
 8001e9a:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <main+0x414>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d145      	bne.n	8001f30 <main+0x41c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Step HIGH
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eaa:	4820      	ldr	r0, [pc, #128]	@ (8001f2c <main+0x418>)
 8001eac:	f002 f89e 	bl	8003fec <HAL_GPIO_WritePin>
				step_state1 = 1;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <main+0x414>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
				current_steps1++;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <main+0x3fc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <main+0x3fc>)
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e03f      	b.n	8001f42 <main+0x42e>
 8001ec2:	bf00      	nop
 8001ec4:	200002bc 	.word	0x200002bc
 8001ec8:	20000304 	.word	0x20000304
 8001ecc:	2000034c 	.word	0x2000034c
 8001ed0:	20000684 	.word	0x20000684
 8001ed4:	20000688 	.word	0x20000688
 8001ed8:	2000068c 	.word	0x2000068c
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	200006d0 	.word	0x200006d0
 8001ee8:	20000664 	.word	0x20000664
 8001eec:	20000648 	.word	0x20000648
 8001ef0:	2000064c 	.word	0x2000064c
 8001ef4:	20000674 	.word	0x20000674
 8001ef8:	2000067c 	.word	0x2000067c
 8001efc:	200006d4 	.word	0x200006d4
 8001f00:	20000668 	.word	0x20000668
 8001f04:	200006bc 	.word	0x200006bc
 8001f08:	20000654 	.word	0x20000654
 8001f0c:	20000678 	.word	0x20000678
 8001f10:	20000680 	.word	0x20000680
 8001f14:	20000638 	.word	0x20000638
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	20000640 	.word	0x20000640
 8001f20:	2000063c 	.word	0x2000063c
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000644 	.word	0x20000644
 8001f2c:	40020400 	.word	0x40020400
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
 8001f30:	2200      	movs	r2, #0
 8001f32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f36:	486c      	ldr	r0, [pc, #432]	@ (80020e8 <main+0x5d4>)
 8001f38:	f002 f858 	bl	8003fec <HAL_GPIO_WritePin>
				step_state1 = 0;
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80020ec <main+0x5d8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
			}
		}
		// Stop when target steps are reached
		if (current_steps >= target_steps) {
 8001f42:	4b6b      	ldr	r3, [pc, #428]	@ (80020f0 <main+0x5dc>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b6b      	ldr	r3, [pc, #428]	@ (80020f4 <main+0x5e0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d30a      	bcc.n	8001f64 <main+0x450>
			stepper_running = 0;
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80020f8 <main+0x5e4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
			current_steps = 0;
 8001f54:	4b66      	ldr	r3, [pc, #408]	@ (80020f0 <main+0x5dc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2180      	movs	r1, #128	@ 0x80
 8001f5e:	4867      	ldr	r0, [pc, #412]	@ (80020fc <main+0x5e8>)
 8001f60:	f002 f844 	bl	8003fec <HAL_GPIO_WritePin>
		}
		if (current_steps1 >= target_steps1) {
 8001f64:	4b66      	ldr	r3, [pc, #408]	@ (8002100 <main+0x5ec>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b66      	ldr	r3, [pc, #408]	@ (8002104 <main+0x5f0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d30a      	bcc.n	8001f86 <main+0x472>
			stepper_running1 = 0;
 8001f70:	4b65      	ldr	r3, [pc, #404]	@ (8002108 <main+0x5f4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
			current_steps1 = 0;
 8001f76:	4b62      	ldr	r3, [pc, #392]	@ (8002100 <main+0x5ec>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2180      	movs	r1, #128	@ 0x80
 8001f80:	485e      	ldr	r0, [pc, #376]	@ (80020fc <main+0x5e8>)
 8001f82:	f002 f833 	bl	8003fec <HAL_GPIO_WritePin>
		}

		/* Dribbling */
		if (tri == 1 && !prev_tri) {
 8001f86:	4b61      	ldr	r3, [pc, #388]	@ (800210c <main+0x5f8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d106      	bne.n	8001f9c <main+0x488>
 8001f8e:	4b60      	ldr	r3, [pc, #384]	@ (8002110 <main+0x5fc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <main+0x488>
			ebike_running = 1;
 8001f96:	4b5f      	ldr	r3, [pc, #380]	@ (8002114 <main+0x600>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
		}
		if (cro == 1 && !prev_cro) {  // cro button pressed
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002118 <main+0x604>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d109      	bne.n	8001fb8 <main+0x4a4>
 8001fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <main+0x608>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <main+0x4a4>
			printf("cross pressed");
 8001fac:	485c      	ldr	r0, [pc, #368]	@ (8002120 <main+0x60c>)
 8001fae:	f007 f959 	bl	8009264 <iprintf>
			//			direction1 = 0;  // Set to Clockwise
			ebike_running = 0;
 8001fb2:	4b58      	ldr	r3, [pc, #352]	@ (8002114 <main+0x600>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
		}
		if (ll2 == 1 && !prev_ll2) {
 8001fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8002124 <main+0x610>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <main+0x4be>
 8001fc0:	4b59      	ldr	r3, [pc, #356]	@ (8002128 <main+0x614>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d104      	bne.n	8001fd2 <main+0x4be>
			drib_speed = drib_speed - 2;
 8001fc8:	4b58      	ldr	r3, [pc, #352]	@ (800212c <main+0x618>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3b02      	subs	r3, #2
 8001fce:	4a57      	ldr	r2, [pc, #348]	@ (800212c <main+0x618>)
 8001fd0:	6013      	str	r3, [r2, #0]
		}
		if (rr2 == 1 && !prev_rr2) {
 8001fd2:	4b57      	ldr	r3, [pc, #348]	@ (8002130 <main+0x61c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <main+0x4d8>
 8001fda:	4b56      	ldr	r3, [pc, #344]	@ (8002134 <main+0x620>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d104      	bne.n	8001fec <main+0x4d8>
			drib_speed = drib_speed + 2; //62 speed for passing 50 for dribbling
 8001fe2:	4b52      	ldr	r3, [pc, #328]	@ (800212c <main+0x618>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	4a50      	ldr	r2, [pc, #320]	@ (800212c <main+0x618>)
 8001fea:	6013      	str	r3, [r2, #0]
		}
		if (down == 1 && !prev_down) {
 8001fec:	4b52      	ldr	r3, [pc, #328]	@ (8002138 <main+0x624>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d106      	bne.n	8002002 <main+0x4ee>
 8001ff4:	4b51      	ldr	r3, [pc, #324]	@ (800213c <main+0x628>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <main+0x4ee>
			drib_speed = 70;
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800212c <main+0x618>)
 8001ffe:	2246      	movs	r2, #70	@ 0x46
 8002000:	601a      	str	r2, [r3, #0]
		}
		if (drib_speed < 0) {
			drib_speed = 0;
		}
		if (drib_speed > 100) {
 8002002:	4b4a      	ldr	r3, [pc, #296]	@ (800212c <main+0x618>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b64      	cmp	r3, #100	@ 0x64
 8002008:	d902      	bls.n	8002010 <main+0x4fc>
			drib_speed = 100;
 800200a:	4b48      	ldr	r3, [pc, #288]	@ (800212c <main+0x618>)
 800200c:	2264      	movs	r2, #100	@ 0x64
 800200e:	601a      	str	r2, [r3, #0]
		}
		prev_ll2 = ll2;
 8002010:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <main+0x610>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a44      	ldr	r2, [pc, #272]	@ (8002128 <main+0x614>)
 8002016:	6013      	str	r3, [r2, #0]
		prev_rr2 = rr2;
 8002018:	4b45      	ldr	r3, [pc, #276]	@ (8002130 <main+0x61c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a45      	ldr	r2, [pc, #276]	@ (8002134 <main+0x620>)
 800201e:	6013      	str	r3, [r2, #0]
		prev_tri = tri;
 8002020:	4b3a      	ldr	r3, [pc, #232]	@ (800210c <main+0x5f8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a3a      	ldr	r2, [pc, #232]	@ (8002110 <main+0x5fc>)
 8002026:	6013      	str	r3, [r2, #0]
		prev_cro = cro;
 8002028:	4b3b      	ldr	r3, [pc, #236]	@ (8002118 <main+0x604>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a3b      	ldr	r2, [pc, #236]	@ (800211c <main+0x608>)
 800202e:	6013      	str	r3, [r2, #0]
		prev_down = down;
 8002030:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <main+0x624>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a41      	ldr	r2, [pc, #260]	@ (800213c <main+0x628>)
 8002036:	6013      	str	r3, [r2, #0]
		if (ebike_running) {
 8002038:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <main+0x600>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d012      	beq.n	8002066 <main+0x552>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002040:	2201      	movs	r2, #1
 8002042:	2110      	movs	r1, #16
 8002044:	483e      	ldr	r0, [pc, #248]	@ (8002140 <main+0x62c>)
 8002046:	f001 ffd1 	bl	8003fec <HAL_GPIO_WritePin>
//			TIM1->CCR3 = (drib_speed * 999) / 100;  //rpm 2000 test
//			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,
 800204a:	4b38      	ldr	r3, [pc, #224]	@ (800212c <main+0x618>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002052:	fb03 f202 	mul.w	r2, r3, r2
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <main+0x630>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	493b      	ldr	r1, [pc, #236]	@ (8002148 <main+0x634>)
 800205c:	fba1 1202 	umull	r1, r2, r1, r2
 8002060:	0952      	lsrs	r2, r2, #5
 8002062:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002064:	e003      	b.n	800206e <main+0x55a>
					((drib_speed * 999) / 100));
		} else {
			//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
//			TIM1->CCR3 = (0 * 999) / 100;
//			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ((0 * 999) / 100));
 8002066:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <main+0x630>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	63da      	str	r2, [r3, #60]	@ 0x3c
		}

		// pneumatics
		if (squ == 1) {
 800206e:	4b37      	ldr	r3, [pc, #220]	@ (800214c <main+0x638>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d103      	bne.n	800207e <main+0x56a>
			pneumatic_open = 1;
 8002076:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <main+0x63c>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e002      	b.n	8002084 <main+0x570>
		} else {
			pneumatic_open = 0;
 800207e:	4b34      	ldr	r3, [pc, #208]	@ (8002150 <main+0x63c>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
		}
		//		prev_squ = squ;
		if (pneumatic_open) {
 8002084:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <main+0x63c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <main+0x584>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800208c:	2201      	movs	r2, #1
 800208e:	2104      	movs	r1, #4
 8002090:	4815      	ldr	r0, [pc, #84]	@ (80020e8 <main+0x5d4>)
 8002092:	f001 ffab 	bl	8003fec <HAL_GPIO_WritePin>
 8002096:	e004      	b.n	80020a2 <main+0x58e>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2104      	movs	r1, #4
 800209c:	4812      	ldr	r0, [pc, #72]	@ (80020e8 <main+0x5d4>)
 800209e:	f001 ffa5 	bl	8003fec <HAL_GPIO_WritePin>
//		} else if (right == 1) {
//
//			htim3.Instance->CCR3 = 125; // duty cycle is 2 ms (180 degrees)
//
//		}
		if (left == 1) {
 80020a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002154 <main+0x640>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10c      	bne.n	80020c4 <main+0x5b0>
//			Set_Servo_Angle(&htim5, TIM_CHANNEL_1, 180);
			htim1.Instance->CCR1 = 75; // 90 degree
 80020aa:	4b26      	ldr	r3, [pc, #152]	@ (8002144 <main+0x630>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	224b      	movs	r2, #75	@ 0x4b
 80020b0:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2 = 75;
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <main+0x630>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	224b      	movs	r2, #75	@ 0x4b
 80020b8:	639a      	str	r2, [r3, #56]	@ 0x38
			htim1.Instance->CCR3 = 75;
 80020ba:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <main+0x630>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	224b      	movs	r2, #75	@ 0x4b
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020c2:	e579      	b.n	8001bb8 <main+0xa4>
		} else if (right == 1) {
 80020c4:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <main+0x644>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f47f ad75 	bne.w	8001bb8 <main+0xa4>
//			Set_Servo_Angle(&htim5, TIM_CHANNEL_1, 90); // duty cycle is 2 ms (180 degrees)
			htim1.Instance->CCR1 = 125; // 180 degree
 80020ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <main+0x630>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	227d      	movs	r2, #125	@ 0x7d
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2 = 125;
 80020d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <main+0x630>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	227d      	movs	r2, #125	@ 0x7d
 80020dc:	639a      	str	r2, [r3, #56]	@ 0x38
			htim1.Instance->CCR3 = 125;
 80020de:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <main+0x630>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	227d      	movs	r2, #125	@ 0x7d
 80020e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	while (1) {
 80020e6:	e567      	b.n	8001bb8 <main+0xa4>
 80020e8:	40020400 	.word	0x40020400
 80020ec:	20000644 	.word	0x20000644
 80020f0:	20000678 	.word	0x20000678
 80020f4:	20000674 	.word	0x20000674
 80020f8:	20000648 	.word	0x20000648
 80020fc:	40020800 	.word	0x40020800
 8002100:	20000680 	.word	0x20000680
 8002104:	2000067c 	.word	0x2000067c
 8002108:	2000064c 	.word	0x2000064c
 800210c:	200006b8 	.word	0x200006b8
 8002110:	20000658 	.word	0x20000658
 8002114:	20000650 	.word	0x20000650
 8002118:	200006b0 	.word	0x200006b0
 800211c:	2000065c 	.word	0x2000065c
 8002120:	0800e428 	.word	0x0800e428
 8002124:	200006d8 	.word	0x200006d8
 8002128:	2000066c 	.word	0x2000066c
 800212c:	2000000c 	.word	0x2000000c
 8002130:	200006dc 	.word	0x200006dc
 8002134:	20000670 	.word	0x20000670
 8002138:	200006c4 	.word	0x200006c4
 800213c:	20000660 	.word	0x20000660
 8002140:	40020000 	.word	0x40020000
 8002144:	200002bc 	.word	0x200002bc
 8002148:	51eb851f 	.word	0x51eb851f
 800214c:	200006b4 	.word	0x200006b4
 8002150:	200006e0 	.word	0x200006e0
 8002154:	200006c8 	.word	0x200006c8
 8002158:	200006cc 	.word	0x200006cc

0800215c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b094      	sub	sp, #80	@ 0x50
 8002160:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	2234      	movs	r2, #52	@ 0x34
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f007 f9e2 	bl	8009534 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <SystemClock_Config+0xdc>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <SystemClock_Config+0xdc>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <SystemClock_Config+0xdc>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4b26      	ldr	r3, [pc, #152]	@ (800223c <SystemClock_Config+0xe0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a25      	ldr	r2, [pc, #148]	@ (800223c <SystemClock_Config+0xe0>)
 80021a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b23      	ldr	r3, [pc, #140]	@ (800223c <SystemClock_Config+0xe0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c0:	2310      	movs	r3, #16
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80021cc:	2308      	movs	r3, #8
 80021ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80021d0:	23b4      	movs	r3, #180	@ 0xb4
 80021d2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80021d8:	2302      	movs	r3, #2
 80021da:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80021dc:	2302      	movs	r3, #2
 80021de:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 f9bf 	bl	8006568 <HAL_RCC_OscConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <SystemClock_Config+0x98>
		Error_Handler();
 80021f0:	f000 fd30 	bl	8002c54 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80021f4:	f003 fe1e 	bl	8005e34 <HAL_PWREx_EnableOverDrive>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0xa6>
		Error_Handler();
 80021fe:	f000 fd29 	bl	8002c54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002202:	230f      	movs	r3, #15
 8002204:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002206:	2302      	movs	r3, #2
 8002208:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800220e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002212:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002214:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002218:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	2105      	movs	r1, #5
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fe57 	bl	8005ed4 <HAL_RCC_ClockConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <SystemClock_Config+0xd4>
		Error_Handler();
 800222c:	f000 fd12 	bl	8002c54 <Error_Handler>
	}
}
 8002230:	bf00      	nop
 8002232:	3750      	adds	r7, #80	@ 0x50
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	40007000 	.word	0x40007000

08002240 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <MX_I2C1_Init+0x50>)
 8002246:	4a13      	ldr	r2, [pc, #76]	@ (8002294 <MX_I2C1_Init+0x54>)
 8002248:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <MX_I2C1_Init+0x50>)
 800224c:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <MX_I2C1_Init+0x58>)
 800224e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <MX_I2C1_Init+0x50>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002256:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <MX_I2C1_Init+0x50>)
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <MX_I2C1_Init+0x50>)
 800225e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002262:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002264:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <MX_I2C1_Init+0x50>)
 8002266:	2200      	movs	r2, #0
 8002268:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <MX_I2C1_Init+0x50>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <MX_I2C1_Init+0x50>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <MX_I2C1_Init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800227c:	4804      	ldr	r0, [pc, #16]	@ (8002290 <MX_I2C1_Init+0x50>)
 800227e:	f001 fecf 	bl	8004020 <HAL_I2C_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002288:	f000 fce4 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000214 	.word	0x20000214
 8002294:	40005400 	.word	0x40005400
 8002298:	000186a0 	.word	0x000186a0

0800229c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022a2:	4a13      	ldr	r2, [pc, #76]	@ (80022f0 <MX_I2C2_Init+0x54>)
 80022a4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022a8:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <MX_I2C2_Init+0x58>)
 80022aa:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 32;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022b4:	2220      	movs	r2, #32
 80022b6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022be:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022cc:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80022d8:	4804      	ldr	r0, [pc, #16]	@ (80022ec <MX_I2C2_Init+0x50>)
 80022da:	f001 fea1 	bl	8004020 <HAL_I2C_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80022e4:	f000 fcb6 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000268 	.word	0x20000268
 80022f0:	40005800 	.word	0x40005800
 80022f4:	000186a0 	.word	0x000186a0

080022f8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b096      	sub	sp, #88	@ 0x58
 80022fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80022fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800230c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]
 8002326:	615a      	str	r2, [r3, #20]
 8002328:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2220      	movs	r2, #32
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f007 f8ff 	bl	8009534 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002336:	4b4b      	ldr	r3, [pc, #300]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002338:	4a4b      	ldr	r2, [pc, #300]	@ (8002468 <MX_TIM1_Init+0x170>)
 800233a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 899;
 800233c:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <MX_TIM1_Init+0x16c>)
 800233e:	f240 3283 	movw	r2, #899	@ 0x383
 8002342:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 800234a:	4b46      	ldr	r3, [pc, #280]	@ (8002464 <MX_TIM1_Init+0x16c>)
 800234c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002350:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002358:	4b42      	ldr	r3, [pc, #264]	@ (8002464 <MX_TIM1_Init+0x16c>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002364:	483f      	ldr	r0, [pc, #252]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002366:	f004 fb9d 	bl	8006aa4 <HAL_TIM_Base_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002370:	f000 fc70 	bl	8002c54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002378:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800237a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800237e:	4619      	mov	r1, r3
 8002380:	4838      	ldr	r0, [pc, #224]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002382:	f004 ff83 	bl	800728c <HAL_TIM_ConfigClockSource>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM1_Init+0x98>
		Error_Handler();
 800238c:	f000 fc62 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002390:	4834      	ldr	r0, [pc, #208]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002392:	f004 fbd6 	bl	8006b42 <HAL_TIM_PWM_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800239c:	f000 fc5a 	bl	8002c54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80023a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023ac:	4619      	mov	r1, r3
 80023ae:	482d      	ldr	r0, [pc, #180]	@ (8002464 <MX_TIM1_Init+0x16c>)
 80023b0:	f005 fb50 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 80023ba:	f000 fc4b 	bl	8002c54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023be:	2360      	movs	r3, #96	@ 0x60
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023ca:	2300      	movs	r3, #0
 80023cc:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80023da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023de:	2200      	movs	r2, #0
 80023e0:	4619      	mov	r1, r3
 80023e2:	4820      	ldr	r0, [pc, #128]	@ (8002464 <MX_TIM1_Init+0x16c>)
 80023e4:	f004 fe90 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80023ee:	f000 fc31 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	2204      	movs	r2, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	481a      	ldr	r0, [pc, #104]	@ (8002464 <MX_TIM1_Init+0x16c>)
 80023fc:	f004 fe84 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 8002406:	f000 fc25 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 800240a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800240e:	2208      	movs	r2, #8
 8002410:	4619      	mov	r1, r3
 8002412:	4814      	ldr	r0, [pc, #80]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002414:	f004 fe78 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 800241e:	f000 fc19 	bl	8002c54 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002436:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800243a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4807      	ldr	r0, [pc, #28]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002446:	f005 fb81 	bl	8007b4c <HAL_TIMEx_ConfigBreakDeadTime>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM1_Init+0x15c>
			!= HAL_OK) {
		Error_Handler();
 8002450:	f000 fc00 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002454:	4803      	ldr	r0, [pc, #12]	@ (8002464 <MX_TIM1_Init+0x16c>)
 8002456:	f000 fec3 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 800245a:	bf00      	nop
 800245c:	3758      	adds	r7, #88	@ 0x58
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200002bc 	.word	0x200002bc
 8002468:	40010000 	.word	0x40010000

0800246c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	@ 0x30
 8002470:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	2224      	movs	r2, #36	@ 0x24
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f007 f85a 	bl	8009534 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002488:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <MX_TIM2_Init+0xa4>)
 800248a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800248e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002490:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <MX_TIM2_Init+0xa4>)
 8002492:	2200      	movs	r2, #0
 8002494:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002496:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <MX_TIM2_Init+0xa4>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800249c:	4b1c      	ldr	r3, [pc, #112]	@ (8002510 <MX_TIM2_Init+0xa4>)
 800249e:	f04f 32ff 	mov.w	r2, #4294967295
 80024a2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024aa:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024b8:	2301      	movs	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024c8:	2301      	movs	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	4619      	mov	r1, r3
 80024da:	480d      	ldr	r0, [pc, #52]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024dc:	f004 fc48 	bl	8006d70 <HAL_TIM_Encoder_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0x7e>
		Error_Handler();
 80024e6:	f000 fbb5 	bl	8002c54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4806      	ldr	r0, [pc, #24]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024f8:	f005 faac 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8002502:	f000 fba7 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	3730      	adds	r7, #48	@ 0x30
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000304 	.word	0x20000304

08002514 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b092      	sub	sp, #72	@ 0x48
 8002518:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800251a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800251e:	2224      	movs	r2, #36	@ 0x24
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f007 f806 	bl	8009534 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002532:	463b      	mov	r3, r7
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	615a      	str	r2, [r3, #20]
 8002542:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <MX_TIM3_Init+0xf4>)
 8002546:	4a31      	ldr	r2, [pc, #196]	@ (800260c <MX_TIM3_Init+0xf8>)
 8002548:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 900 - 1;
 800254a:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <MX_TIM3_Init+0xf4>)
 800254c:	f240 3283 	movw	r2, #899	@ 0x383
 8002550:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <MX_TIM3_Init+0xf4>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8002558:	4b2b      	ldr	r3, [pc, #172]	@ (8002608 <MX_TIM3_Init+0xf4>)
 800255a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800255e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <MX_TIM3_Init+0xf4>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002566:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <MX_TIM3_Init+0xf4>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800256c:	4826      	ldr	r0, [pc, #152]	@ (8002608 <MX_TIM3_Init+0xf4>)
 800256e:	f004 fae8 	bl	8006b42 <HAL_TIM_PWM_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM3_Init+0x68>
		Error_Handler();
 8002578:	f000 fb6c 	bl	8002c54 <Error_Handler>
	}
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800257c:	2301      	movs	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002588:	2300      	movs	r3, #0
 800258a:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfig.IC1Filter = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002590:	2300      	movs	r3, #0
 8002592:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002594:	2301      	movs	r3, #1
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002598:	2300      	movs	r3, #0
 800259a:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfig.IC2Filter = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80025a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a4:	4619      	mov	r1, r3
 80025a6:	4818      	ldr	r0, [pc, #96]	@ (8002608 <MX_TIM3_Init+0xf4>)
 80025a8:	f004 fbe2 	bl	8006d70 <HAL_TIM_Encoder_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM3_Init+0xa2>
		Error_Handler();
 80025b2:	f000 fb4f 	bl	8002c54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	4810      	ldr	r0, [pc, #64]	@ (8002608 <MX_TIM3_Init+0xf4>)
 80025c6:	f005 fa45 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM3_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 80025d0:	f000 fb40 	bl	8002c54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d4:	2360      	movs	r3, #96	@ 0x60
 80025d6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80025e4:	463b      	mov	r3, r7
 80025e6:	2208      	movs	r2, #8
 80025e8:	4619      	mov	r1, r3
 80025ea:	4807      	ldr	r0, [pc, #28]	@ (8002608 <MX_TIM3_Init+0xf4>)
 80025ec:	f004 fd8c 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 80025f6:	f000 fb2d 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80025fa:	4803      	ldr	r0, [pc, #12]	@ (8002608 <MX_TIM3_Init+0xf4>)
 80025fc:	f000 fdf0 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 8002600:	bf00      	nop
 8002602:	3748      	adds	r7, #72	@ 0x48
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000034c 	.word	0x2000034c
 800260c:	40000400 	.word	0x40000400

08002610 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	2224      	movs	r2, #36	@ 0x24
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f006 ff88 	bl	8009534 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 800262e:	4a21      	ldr	r2, [pc, #132]	@ (80026b4 <MX_TIM5_Init+0xa4>)
 8002630:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 179;
 8002632:	4b1f      	ldr	r3, [pc, #124]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 8002634:	22b3      	movs	r2, #179	@ 0xb3
 8002636:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 999;
 800263e:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 8002640:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002644:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264c:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002652:	2301      	movs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800265a:	2301      	movs	r3, #1
 800265c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800266a:	2301      	movs	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4619      	mov	r1, r3
 800267c:	480c      	ldr	r0, [pc, #48]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 800267e:	f004 fb77 	bl	8006d70 <HAL_TIM_Encoder_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM5_Init+0x7c>
		Error_Handler();
 8002688:	f000 fae4 	bl	8002c54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_TIM5_Init+0xa0>)
 800269a:	f005 f9db 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80026a4:	f000 fad6 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	3730      	adds	r7, #48	@ 0x30
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000394 	.word	0x20000394
 80026b4:	40000c00 	.word	0x40000c00

080026b8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	@ 0x30
 80026bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	2224      	movs	r2, #36	@ 0x24
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f006 ff34 	bl	8009534 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80026d4:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <MX_TIM8_Init+0xa8>)
 80026d6:	4a23      	ldr	r2, [pc, #140]	@ (8002764 <MX_TIM8_Init+0xac>)
 80026d8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 180 - 1;
 80026da:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <MX_TIM8_Init+0xa8>)
 80026dc:	22b3      	movs	r2, #179	@ 0xb3
 80026de:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002760 <MX_TIM8_Init+0xa8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1000 - 1;
 80026e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <MX_TIM8_Init+0xa8>)
 80026e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026ec:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002760 <MX_TIM8_Init+0xa8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <MX_TIM8_Init+0xa8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fa:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <MX_TIM8_Init+0xa8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002700:	2301      	movs	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002708:	2301      	movs	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002714:	2300      	movs	r3, #0
 8002716:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002718:	2301      	movs	r3, #1
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4619      	mov	r1, r3
 800272a:	480d      	ldr	r0, [pc, #52]	@ (8002760 <MX_TIM8_Init+0xa8>)
 800272c:	f004 fb20 	bl	8006d70 <HAL_TIM_Encoder_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM8_Init+0x82>
		Error_Handler();
 8002736:	f000 fa8d 	bl	8002c54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	4619      	mov	r1, r3
 8002746:	4806      	ldr	r0, [pc, #24]	@ (8002760 <MX_TIM8_Init+0xa8>)
 8002748:	f005 f984 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM8_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002752:	f000 fa7f 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	3730      	adds	r7, #48	@ 0x30
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200003dc 	.word	0x200003dc
 8002764:	40010400 	.word	0x40010400

08002768 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
 800277c:	615a      	str	r2, [r3, #20]
 800277e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002780:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <MX_TIM10_Init+0x94>)
 8002782:	4a1f      	ldr	r2, [pc, #124]	@ (8002800 <MX_TIM10_Init+0x98>)
 8002784:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 179;
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <MX_TIM10_Init+0x94>)
 8002788:	22b3      	movs	r2, #179	@ 0xb3
 800278a:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <MX_TIM10_Init+0x94>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 999;
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <MX_TIM10_Init+0x94>)
 8002794:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002798:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279a:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <MX_TIM10_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a0:	4b16      	ldr	r3, [pc, #88]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80027a6:	4815      	ldr	r0, [pc, #84]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027a8:	f004 f97c 	bl	8006aa4 <HAL_TIM_Base_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM10_Init+0x4e>
		Error_Handler();
 80027b2:	f000 fa4f 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 80027b6:	4811      	ldr	r0, [pc, #68]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027b8:	f004 f9c3 	bl	8006b42 <HAL_TIM_PWM_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM10_Init+0x5e>
		Error_Handler();
 80027c2:	f000 fa47 	bl	8002c54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c6:	2360      	movs	r3, #96	@ 0x60
 80027c8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	4619      	mov	r1, r3
 80027dc:	4807      	ldr	r0, [pc, #28]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027de:	f004 fc93 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80027e8:	f000 fa34 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80027ec:	4803      	ldr	r0, [pc, #12]	@ (80027fc <MX_TIM10_Init+0x94>)
 80027ee:	f000 fcf7 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 80027f2:	bf00      	nop
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000424 	.word	0x20000424
 8002800:	40014400 	.word	0x40014400

08002804 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
 8002818:	615a      	str	r2, [r3, #20]
 800281a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <MX_TIM11_Init+0x94>)
 800281e:	4a1f      	ldr	r2, [pc, #124]	@ (800289c <MX_TIM11_Init+0x98>)
 8002820:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 179;
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <MX_TIM11_Init+0x94>)
 8002824:	22b3      	movs	r2, #179	@ 0xb3
 8002826:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <MX_TIM11_Init+0x94>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 999;
 800282e:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <MX_TIM11_Init+0x94>)
 8002830:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002834:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002836:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <MX_TIM11_Init+0x94>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <MX_TIM11_Init+0x94>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8002842:	4815      	ldr	r0, [pc, #84]	@ (8002898 <MX_TIM11_Init+0x94>)
 8002844:	f004 f92e 	bl	8006aa4 <HAL_TIM_Base_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM11_Init+0x4e>
		Error_Handler();
 800284e:	f000 fa01 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 8002852:	4811      	ldr	r0, [pc, #68]	@ (8002898 <MX_TIM11_Init+0x94>)
 8002854:	f004 f975 	bl	8006b42 <HAL_TIM_PWM_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM11_Init+0x5e>
		Error_Handler();
 800285e:	f000 f9f9 	bl	8002c54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002862:	2360      	movs	r3, #96	@ 0x60
 8002864:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	4619      	mov	r1, r3
 8002878:	4807      	ldr	r0, [pc, #28]	@ (8002898 <MX_TIM11_Init+0x94>)
 800287a:	f004 fc45 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM11_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002884:	f000 f9e6 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8002888:	4803      	ldr	r0, [pc, #12]	@ (8002898 <MX_TIM11_Init+0x94>)
 800288a:	f000 fca9 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000046c 	.word	0x2000046c
 800289c:	40014800 	.word	0x40014800

080028a0 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	@ 0x30
 80028a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80028a6:	f107 0320 	add.w	r3, r7, #32
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
 80028c0:	611a      	str	r2, [r3, #16]
 80028c2:	615a      	str	r2, [r3, #20]
 80028c4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80028c6:	4b25      	ldr	r3, [pc, #148]	@ (800295c <MX_TIM12_Init+0xbc>)
 80028c8:	4a25      	ldr	r2, [pc, #148]	@ (8002960 <MX_TIM12_Init+0xc0>)
 80028ca:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 179;
 80028cc:	4b23      	ldr	r3, [pc, #140]	@ (800295c <MX_TIM12_Init+0xbc>)
 80028ce:	22b3      	movs	r2, #179	@ 0xb3
 80028d0:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d2:	4b22      	ldr	r3, [pc, #136]	@ (800295c <MX_TIM12_Init+0xbc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 999;
 80028d8:	4b20      	ldr	r3, [pc, #128]	@ (800295c <MX_TIM12_Init+0xbc>)
 80028da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028de:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e0:	4b1e      	ldr	r3, [pc, #120]	@ (800295c <MX_TIM12_Init+0xbc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e6:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <MX_TIM12_Init+0xbc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 80028ec:	481b      	ldr	r0, [pc, #108]	@ (800295c <MX_TIM12_Init+0xbc>)
 80028ee:	f004 f8d9 	bl	8006aa4 <HAL_TIM_Base_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM12_Init+0x5c>
		Error_Handler();
 80028f8:	f000 f9ac 	bl	8002c54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002900:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 8002902:	f107 0320 	add.w	r3, r7, #32
 8002906:	4619      	mov	r1, r3
 8002908:	4814      	ldr	r0, [pc, #80]	@ (800295c <MX_TIM12_Init+0xbc>)
 800290a:	f004 fcbf 	bl	800728c <HAL_TIM_ConfigClockSource>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM12_Init+0x78>
		Error_Handler();
 8002914:	f000 f99e 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8002918:	4810      	ldr	r0, [pc, #64]	@ (800295c <MX_TIM12_Init+0xbc>)
 800291a:	f004 f912 	bl	8006b42 <HAL_TIM_PWM_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM12_Init+0x88>
		Error_Handler();
 8002924:	f000 f996 	bl	8002c54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002928:	2360      	movs	r3, #96	@ 0x60
 800292a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2200      	movs	r2, #0
 800293c:	4619      	mov	r1, r3
 800293e:	4807      	ldr	r0, [pc, #28]	@ (800295c <MX_TIM12_Init+0xbc>)
 8002940:	f004 fbe2 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM12_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 800294a:	f000 f983 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800294e:	4803      	ldr	r0, [pc, #12]	@ (800295c <MX_TIM12_Init+0xbc>)
 8002950:	f000 fc46 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 8002954:	bf00      	nop
 8002956:	3730      	adds	r7, #48	@ 0x30
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200004b4 	.word	0x200004b4
 8002960:	40001800 	.word	0x40001800

08002964 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM13_Init 0 */

	/* USER CODE END TIM13_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	615a      	str	r2, [r3, #20]
 800297a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800297c:	4b1e      	ldr	r3, [pc, #120]	@ (80029f8 <MX_TIM13_Init+0x94>)
 800297e:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <MX_TIM13_Init+0x98>)
 8002980:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 179;
 8002982:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <MX_TIM13_Init+0x94>)
 8002984:	22b3      	movs	r2, #179	@ 0xb3
 8002986:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <MX_TIM13_Init+0x94>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 800298e:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <MX_TIM13_Init+0x94>)
 8002990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002994:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002996:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <MX_TIM13_Init+0x94>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299c:	4b16      	ldr	r3, [pc, #88]	@ (80029f8 <MX_TIM13_Init+0x94>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 80029a2:	4815      	ldr	r0, [pc, #84]	@ (80029f8 <MX_TIM13_Init+0x94>)
 80029a4:	f004 f87e 	bl	8006aa4 <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM13_Init+0x4e>
		Error_Handler();
 80029ae:	f000 f951 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim13) != HAL_OK) {
 80029b2:	4811      	ldr	r0, [pc, #68]	@ (80029f8 <MX_TIM13_Init+0x94>)
 80029b4:	f004 f8c5 	bl	8006b42 <HAL_TIM_PWM_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM13_Init+0x5e>
		Error_Handler();
 80029be:	f000 f949 	bl	8002c54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029c2:	2360      	movs	r3, #96	@ 0x60
 80029c4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1)
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2200      	movs	r2, #0
 80029d6:	4619      	mov	r1, r3
 80029d8:	4807      	ldr	r0, [pc, #28]	@ (80029f8 <MX_TIM13_Init+0x94>)
 80029da:	f004 fb95 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM13_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80029e4:	f000 f936 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */
	HAL_TIM_MspPostInit(&htim13);
 80029e8:	4803      	ldr	r0, [pc, #12]	@ (80029f8 <MX_TIM13_Init+0x94>)
 80029ea:	f000 fbf9 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200004fc 	.word	0x200004fc
 80029fc:	40001c00 	.word	0x40001c00

08002a00 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM14_Init 0 */

	/* USER CODE END TIM14_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002a98 <MX_TIM14_Init+0x98>)
 8002a1c:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 179;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a20:	22b3      	movs	r2, #179	@ 0xb3
 8002a22:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 999;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a30:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8002a3e:	4815      	ldr	r0, [pc, #84]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a40:	f004 f830 	bl	8006aa4 <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM14_Init+0x4e>
		Error_Handler();
 8002a4a:	f000 f903 	bl	8002c54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim14) != HAL_OK) {
 8002a4e:	4811      	ldr	r0, [pc, #68]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a50:	f004 f877 	bl	8006b42 <HAL_TIM_PWM_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM14_Init+0x5e>
		Error_Handler();
 8002a5a:	f000 f8fb 	bl	8002c54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a5e:	2360      	movs	r3, #96	@ 0x60
 8002a60:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1)
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	2200      	movs	r2, #0
 8002a72:	4619      	mov	r1, r3
 8002a74:	4807      	ldr	r0, [pc, #28]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a76:	f004 fb47 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM14_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002a80:	f000 f8e8 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */
	HAL_TIM_MspPostInit(&htim14);
 8002a84:	4803      	ldr	r0, [pc, #12]	@ (8002a94 <MX_TIM14_Init+0x94>)
 8002a86:	f000 fbab 	bl	80031e0 <HAL_TIM_MspPostInit>

}
 8002a8a:	bf00      	nop
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000544 	.word	0x20000544
 8002a98:	40002000 	.word	0x40002000

08002a9c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <MX_USART2_UART_Init+0x50>)
 8002aa4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002acc:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002ad2:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <MX_USART2_UART_Init+0x4c>)
 8002ad4:	f005 f88c 	bl	8007bf0 <HAL_UART_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002ade:	f000 f8b9 	bl	8002c54 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000058c 	.word	0x2000058c
 8002aec:	40004400 	.word	0x40004400

08002af0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	@ 0x28
 8002af4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4a42      	ldr	r2, [pc, #264]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b16:	4b40      	ldr	r3, [pc, #256]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b3c      	ldr	r3, [pc, #240]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b32:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b35      	ldr	r3, [pc, #212]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a34      	ldr	r2, [pc, #208]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <MX_GPIO_Init+0x128>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8002b76:	2200      	movs	r2, #0
 8002b78:	f648 413f 	movw	r1, #35903	@ 0x8c3f
 8002b7c:	4827      	ldr	r0, [pc, #156]	@ (8002c1c <MX_GPIO_Init+0x12c>)
 8002b7e:	f001 fa35 	bl	8003fec <HAL_GPIO_WritePin>
			S3_Pulse_Pin | M1_Pin | M2_Pin | S1_Dir_Pin | S1_Pulse_Pin
					| ENA_1_Pin | S3_Dir_Pin | S2_Pulse_Pin | S2_Dir_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | LD2_Pin | P1_Pin | P2_Pin,
 8002b82:	2200      	movs	r2, #0
 8002b84:	f641 0130 	movw	r1, #6192	@ 0x1830
 8002b88:	4825      	ldr	r0, [pc, #148]	@ (8002c20 <MX_GPIO_Init+0x130>)
 8002b8a:	f001 fa2f 	bl	8003fec <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_2 | M3_Pin | GPIO_PIN_15,
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f24a 0105 	movw	r1, #40965	@ 0xa005
 8002b94:	4823      	ldr	r0, [pc, #140]	@ (8002c24 <MX_GPIO_Init+0x134>)
 8002b96:	f001 fa29 	bl	8003fec <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ba0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002ba4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002baa:	f107 0314 	add.w	r3, r7, #20
 8002bae:	4619      	mov	r1, r3
 8002bb0:	481a      	ldr	r0, [pc, #104]	@ (8002c1c <MX_GPIO_Init+0x12c>)
 8002bb2:	f000 ff93 	bl	8003adc <HAL_GPIO_Init>

	/*Configure GPIO pins : S3_Pulse_Pin M1_Pin M2_Pin S1_Dir_Pin
	 S1_Pulse_Pin ENA_1_Pin S3_Dir_Pin S2_Pulse_Pin
	 S2_Dir_Pin */
	GPIO_InitStruct.Pin = S3_Pulse_Pin | M1_Pin | M2_Pin | S1_Dir_Pin
 8002bb6:	f648 433f 	movw	r3, #35903	@ 0x8c3f
 8002bba:	617b      	str	r3, [r7, #20]
			| S1_Pulse_Pin | ENA_1_Pin | S3_Dir_Pin | S2_Pulse_Pin | S2_Dir_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4813      	ldr	r0, [pc, #76]	@ (8002c1c <MX_GPIO_Init+0x12c>)
 8002bd0:	f000 ff84 	bl	8003adc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 LD2_Pin P1_Pin P2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | LD2_Pin | P1_Pin | P2_Pin;
 8002bd4:	f641 0330 	movw	r3, #6192	@ 0x1830
 8002bd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	480c      	ldr	r0, [pc, #48]	@ (8002c20 <MX_GPIO_Init+0x130>)
 8002bee:	f000 ff75 	bl	8003adc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB2 M3_Pin PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | M3_Pin | GPIO_PIN_15;
 8002bf2:	f24a 0305 	movw	r3, #40965	@ 0xa005
 8002bf6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4806      	ldr	r0, [pc, #24]	@ (8002c24 <MX_GPIO_Init+0x134>)
 8002c0c:	f000 ff66 	bl	8003adc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	@ 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400

08002c28 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	4804      	ldr	r0, [pc, #16]	@ (8002c50 <_write+0x28>)
 8002c40:	f005 f826 	bl	8007c90 <HAL_UART_Transmit>
	return len;
 8002c44:	687b      	ldr	r3, [r7, #4]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000058c 	.word	0x2000058c

08002c54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c58:	b672      	cpsid	i
}
 8002c5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <Error_Handler+0x8>

08002c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_MspInit+0x4c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002cac <HAL_MspInit+0x4c>)
 8002c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <HAL_MspInit+0x4c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <HAL_MspInit+0x4c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <HAL_MspInit+0x4c>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_MspInit+0x4c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c9e:	2007      	movs	r0, #7
 8002ca0:	f000 fe9c 	bl	80039dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	@ 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8002df8 <HAL_I2C_MspInit+0x148>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12c      	bne.n	8002d2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	4b49      	ldr	r3, [pc, #292]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	4a48      	ldr	r2, [pc, #288]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce2:	4b46      	ldr	r3, [pc, #280]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cee:	23c0      	movs	r3, #192	@ 0xc0
 8002cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf2:	2312      	movs	r3, #18
 8002cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 031c 	add.w	r3, r7, #28
 8002d06:	4619      	mov	r1, r3
 8002d08:	483d      	ldr	r0, [pc, #244]	@ (8002e00 <HAL_I2C_MspInit+0x150>)
 8002d0a:	f000 fee7 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	4a39      	ldr	r2, [pc, #228]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1e:	4b37      	ldr	r3, [pc, #220]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d2a:	e060      	b.n	8002dee <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a34      	ldr	r2, [pc, #208]	@ (8002e04 <HAL_I2C_MspInit+0x154>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d15b      	bne.n	8002dee <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b30      	ldr	r3, [pc, #192]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d46:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	4a28      	ldr	r2, [pc, #160]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d62:	4b26      	ldr	r3, [pc, #152]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d80:	2304      	movs	r3, #4
 8002d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	481d      	ldr	r0, [pc, #116]	@ (8002e00 <HAL_I2C_MspInit+0x150>)
 8002d8c:	f000 fea6 	bl	8003adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d96:	2312      	movs	r3, #18
 8002d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002da2:	2304      	movs	r3, #4
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da6:	f107 031c 	add.w	r3, r7, #28
 8002daa:	4619      	mov	r1, r3
 8002dac:	4816      	ldr	r0, [pc, #88]	@ (8002e08 <HAL_I2C_MspInit+0x158>)
 8002dae:	f000 fe95 	bl	8003adc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002dbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_I2C_MspInit+0x14c>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2021      	movs	r0, #33	@ 0x21
 8002dd4:	f000 fe0d 	bl	80039f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002dd8:	2021      	movs	r0, #33	@ 0x21
 8002dda:	f000 fe26 	bl	8003a2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	2022      	movs	r0, #34	@ 0x22
 8002de4:	f000 fe05 	bl	80039f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002de8:	2022      	movs	r0, #34	@ 0x22
 8002dea:	f000 fe1e 	bl	8003a2a <HAL_NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3730      	adds	r7, #48	@ 0x30
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40005400 	.word	0x40005400
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40005800 	.word	0x40005800
 8002e08:	40020800 	.word	0x40020800

08002e0c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <HAL_I2C_MspDeInit+0x70>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10e      	bne.n	8002e3c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002e1e:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <HAL_I2C_MspDeInit+0x74>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_I2C_MspDeInit+0x74>)
 8002e24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002e2a:	2140      	movs	r1, #64	@ 0x40
 8002e2c:	4815      	ldr	r0, [pc, #84]	@ (8002e84 <HAL_I2C_MspDeInit+0x78>)
 8002e2e:	f000 ffe9 	bl	8003e04 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002e32:	2180      	movs	r1, #128	@ 0x80
 8002e34:	4813      	ldr	r0, [pc, #76]	@ (8002e84 <HAL_I2C_MspDeInit+0x78>)
 8002e36:	f000 ffe5 	bl	8003e04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002e3a:	e01a      	b.n	8002e72 <HAL_I2C_MspDeInit+0x66>
  else if(hi2c->Instance==I2C2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a11      	ldr	r2, [pc, #68]	@ (8002e88 <HAL_I2C_MspDeInit+0x7c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d115      	bne.n	8002e72 <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <HAL_I2C_MspDeInit+0x74>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <HAL_I2C_MspDeInit+0x74>)
 8002e4c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002e52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e56:	480b      	ldr	r0, [pc, #44]	@ (8002e84 <HAL_I2C_MspDeInit+0x78>)
 8002e58:	f000 ffd4 	bl	8003e04 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8002e5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e60:	480a      	ldr	r0, [pc, #40]	@ (8002e8c <HAL_I2C_MspDeInit+0x80>)
 8002e62:	f000 ffcf 	bl	8003e04 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002e66:	2021      	movs	r0, #33	@ 0x21
 8002e68:	f000 fded 	bl	8003a46 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002e6c:	2022      	movs	r0, #34	@ 0x22
 8002e6e:	f000 fdea 	bl	8003a46 <HAL_NVIC_DisableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40005800 	.word	0x40005800
 8002e8c:	40020800 	.word	0x40020800

08002e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3d      	ldr	r2, [pc, #244]	@ (8002f94 <HAL_TIM_Base_MspInit+0x104>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	4a3b      	ldr	r2, [pc, #236]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb2:	4b39      	ldr	r3, [pc, #228]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002ebe:	e062      	b.n	8002f86 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a35      	ldr	r2, [pc, #212]	@ (8002f9c <HAL_TIM_Base_MspInit+0x10c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	4b32      	ldr	r3, [pc, #200]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	4a31      	ldr	r2, [pc, #196]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eda:	4b2f      	ldr	r3, [pc, #188]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
}
 8002ee6:	e04e      	b.n	8002f86 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2c      	ldr	r2, [pc, #176]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x110>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f02:	4b25      	ldr	r3, [pc, #148]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
}
 8002f0e:	e03a      	b.n	8002f86 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM12)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a23      	ldr	r2, [pc, #140]	@ (8002fa4 <HAL_TIM_Base_MspInit+0x114>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
}
 8002f36:	e026      	b.n	8002f86 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM13)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa8 <HAL_TIM_Base_MspInit+0x118>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10e      	bne.n	8002f60 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
}
 8002f5e:	e012      	b.n	8002f86 <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM14)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a11      	ldr	r2, [pc, #68]	@ (8002fac <HAL_TIM_Base_MspInit+0x11c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10d      	bne.n	8002f86 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <HAL_TIM_Base_MspInit+0x108>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
}
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40014400 	.word	0x40014400
 8002fa0:	40014800 	.word	0x40014800
 8002fa4:	40001800 	.word	0x40001800
 8002fa8:	40001c00 	.word	0x40001c00
 8002fac:	40002000 	.word	0x40002000

08002fb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	@ 0x38
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd0:	d14b      	bne.n	800306a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	4b58      	ldr	r3, [pc, #352]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	4a57      	ldr	r2, [pc, #348]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe2:	4b55      	ldr	r3, [pc, #340]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	4b51      	ldr	r3, [pc, #324]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	4a50      	ldr	r2, [pc, #320]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4a49      	ldr	r2, [pc, #292]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6313      	str	r3, [r2, #48]	@ 0x30
 800301a:	4b47      	ldr	r3, [pc, #284]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	2302      	movs	r3, #2
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003030:	2301      	movs	r3, #1
 8003032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2300      	movs	r3, #0
 8003036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003038:	2301      	movs	r3, #1
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	483e      	ldr	r0, [pc, #248]	@ (800313c <HAL_TIM_Encoder_MspInit+0x18c>)
 8003044:	f000 fd4a 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003048:	2308      	movs	r3, #8
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003050:	2301      	movs	r3, #1
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003058:	2301      	movs	r3, #1
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003060:	4619      	mov	r1, r3
 8003062:	4837      	ldr	r0, [pc, #220]	@ (8003140 <HAL_TIM_Encoder_MspInit+0x190>)
 8003064:	f000 fd3a 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003068:	e062      	b.n	8003130 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM5)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a35      	ldr	r2, [pc, #212]	@ (8003144 <HAL_TIM_Encoder_MspInit+0x194>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d12c      	bne.n	80030ce <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	4b2f      	ldr	r3, [pc, #188]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6413      	str	r3, [r2, #64]	@ 0x40
 8003084:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	4a27      	ldr	r2, [pc, #156]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a0:	4b25      	ldr	r3, [pc, #148]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030ac:	2303      	movs	r3, #3
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030bc:	2302      	movs	r3, #2
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c4:	4619      	mov	r1, r3
 80030c6:	481d      	ldr	r0, [pc, #116]	@ (800313c <HAL_TIM_Encoder_MspInit+0x18c>)
 80030c8:	f000 fd08 	bl	8003adc <HAL_GPIO_Init>
}
 80030cc:	e030      	b.n	8003130 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <HAL_TIM_Encoder_MspInit+0x198>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d12b      	bne.n	8003130 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 80030de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e0:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e8:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 80030ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6313      	str	r3, [r2, #48]	@ 0x30
 8003104:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x188>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003110:	23c0      	movs	r3, #192	@ 0xc0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2300      	movs	r3, #0
 800311e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003120:	2303      	movs	r3, #3
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	4808      	ldr	r0, [pc, #32]	@ (800314c <HAL_TIM_Encoder_MspInit+0x19c>)
 800312c:	f000 fcd6 	bl	8003adc <HAL_GPIO_Init>
}
 8003130:	bf00      	nop
 8003132:	3738      	adds	r7, #56	@ 0x38
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	40020000 	.word	0x40020000
 8003140:	40020400 	.word	0x40020400
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40010400 	.word	0x40010400
 800314c:	40020800 	.word	0x40020800

08003150 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	@ 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a19      	ldr	r2, [pc, #100]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x84>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d12b      	bne.n	80031ca <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b18      	ldr	r3, [pc, #96]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x88>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	4a17      	ldr	r2, [pc, #92]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x88>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6413      	str	r3, [r2, #64]	@ 0x40
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x88>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x88>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a10      	ldr	r2, [pc, #64]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x88>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b0e      	ldr	r3, [pc, #56]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x88>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031aa:	2330      	movs	r3, #48	@ 0x30
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ba:	2302      	movs	r3, #2
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4805      	ldr	r0, [pc, #20]	@ (80031dc <HAL_TIM_PWM_MspInit+0x8c>)
 80031c6:	f000 fc89 	bl	8003adc <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	@ 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020400 	.word	0x40020400

080031e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08e      	sub	sp, #56	@ 0x38
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a80      	ldr	r2, [pc, #512]	@ (8003400 <HAL_TIM_MspPostInit+0x220>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d11f      	bne.n	8003242 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	4b7f      	ldr	r3, [pc, #508]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	4a7e      	ldr	r2, [pc, #504]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	@ 0x30
 8003212:	4b7c      	ldr	r3, [pc, #496]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800321e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003230:	2301      	movs	r3, #1
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003238:	4619      	mov	r1, r3
 800323a:	4873      	ldr	r0, [pc, #460]	@ (8003408 <HAL_TIM_MspPostInit+0x228>)
 800323c:	f000 fc4e 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003240:	e0da      	b.n	80033f8 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM3)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a71      	ldr	r2, [pc, #452]	@ (800340c <HAL_TIM_MspPostInit+0x22c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d11f      	bne.n	800328c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	4b6c      	ldr	r3, [pc, #432]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	4a6b      	ldr	r2, [pc, #428]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6313      	str	r3, [r2, #48]	@ 0x30
 800325c:	4b69      	ldr	r3, [pc, #420]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800327a:	2302      	movs	r3, #2
 800327c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003282:	4619      	mov	r1, r3
 8003284:	4862      	ldr	r0, [pc, #392]	@ (8003410 <HAL_TIM_MspPostInit+0x230>)
 8003286:	f000 fc29 	bl	8003adc <HAL_GPIO_Init>
}
 800328a:	e0b5      	b.n	80033f8 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM10)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a60      	ldr	r2, [pc, #384]	@ (8003414 <HAL_TIM_MspPostInit+0x234>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d11f      	bne.n	80032d6 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	4b5a      	ldr	r3, [pc, #360]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a59      	ldr	r2, [pc, #356]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b57      	ldr	r3, [pc, #348]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 80032b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80032c4:	2303      	movs	r3, #3
 80032c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 80032c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032cc:	4619      	mov	r1, r3
 80032ce:	4852      	ldr	r0, [pc, #328]	@ (8003418 <HAL_TIM_MspPostInit+0x238>)
 80032d0:	f000 fc04 	bl	8003adc <HAL_GPIO_Init>
}
 80032d4:	e090      	b.n	80033f8 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM11)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a50      	ldr	r2, [pc, #320]	@ (800341c <HAL_TIM_MspPostInit+0x23c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d11f      	bne.n	8003320 <HAL_TIM_MspPostInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	4a46      	ldr	r2, [pc, #280]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80032ea:	f043 0302 	orr.w	r3, r3, #2
 80032ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f0:	4b44      	ldr	r3, [pc, #272]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 80032fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800330e:	2303      	movs	r3, #3
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003316:	4619      	mov	r1, r3
 8003318:	483f      	ldr	r0, [pc, #252]	@ (8003418 <HAL_TIM_MspPostInit+0x238>)
 800331a:	f000 fbdf 	bl	8003adc <HAL_GPIO_Init>
}
 800331e:	e06b      	b.n	80033f8 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM12)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3e      	ldr	r2, [pc, #248]	@ (8003420 <HAL_TIM_MspPostInit+0x240>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d11f      	bne.n	800336a <HAL_TIM_MspPostInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	4b35      	ldr	r3, [pc, #212]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	4a34      	ldr	r2, [pc, #208]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	6313      	str	r3, [r2, #48]	@ 0x30
 800333a:	4b32      	ldr	r3, [pc, #200]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8003346:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003358:	2309      	movs	r3, #9
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003360:	4619      	mov	r1, r3
 8003362:	482d      	ldr	r0, [pc, #180]	@ (8003418 <HAL_TIM_MspPostInit+0x238>)
 8003364:	f000 fbba 	bl	8003adc <HAL_GPIO_Init>
}
 8003368:	e046      	b.n	80033f8 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM13)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <HAL_TIM_MspPostInit+0x244>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d11e      	bne.n	80033b2 <HAL_TIM_MspPostInit+0x1d2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	4a21      	ldr	r2, [pc, #132]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6313      	str	r3, [r2, #48]	@ 0x30
 8003384:	4b1f      	ldr	r3, [pc, #124]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003390:	2340      	movs	r3, #64	@ 0x40
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80033a0:	2309      	movs	r3, #9
 80033a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	4817      	ldr	r0, [pc, #92]	@ (8003408 <HAL_TIM_MspPostInit+0x228>)
 80033ac:	f000 fb96 	bl	8003adc <HAL_GPIO_Init>
}
 80033b0:	e022      	b.n	80033f8 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM14)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_TIM_MspPostInit+0x248>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d11d      	bne.n	80033f8 <HAL_TIM_MspPostInit+0x218>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80033cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <HAL_TIM_MspPostInit+0x224>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = E_Bike_PWM_Pin;
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80033e8:	2309      	movs	r3, #9
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(E_Bike_PWM_GPIO_Port, &GPIO_InitStruct);
 80033ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f0:	4619      	mov	r1, r3
 80033f2:	4805      	ldr	r0, [pc, #20]	@ (8003408 <HAL_TIM_MspPostInit+0x228>)
 80033f4:	f000 fb72 	bl	8003adc <HAL_GPIO_Init>
}
 80033f8:	bf00      	nop
 80033fa:	3738      	adds	r7, #56	@ 0x38
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40010000 	.word	0x40010000
 8003404:	40023800 	.word	0x40023800
 8003408:	40020000 	.word	0x40020000
 800340c:	40000400 	.word	0x40000400
 8003410:	40020800 	.word	0x40020800
 8003414:	40014400 	.word	0x40014400
 8003418:	40020400 	.word	0x40020400
 800341c:	40014800 	.word	0x40014800
 8003420:	40001800 	.word	0x40001800
 8003424:	40001c00 	.word	0x40001c00
 8003428:	40002000 	.word	0x40002000

0800342c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_UART_MspInit+0x84>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12b      	bne.n	80034a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <HAL_UART_MspInit+0x88>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <HAL_UART_MspInit+0x88>)
 8003458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345c:	6413      	str	r3, [r2, #64]	@ 0x40
 800345e:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <HAL_UART_MspInit+0x88>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b11      	ldr	r3, [pc, #68]	@ (80034b4 <HAL_UART_MspInit+0x88>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	4a10      	ldr	r2, [pc, #64]	@ (80034b4 <HAL_UART_MspInit+0x88>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6313      	str	r3, [r2, #48]	@ 0x30
 800347a:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <HAL_UART_MspInit+0x88>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003486:	230c      	movs	r3, #12
 8003488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348a:	2302      	movs	r3, #2
 800348c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003496:	2307      	movs	r3, #7
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	4619      	mov	r1, r3
 80034a0:	4805      	ldr	r0, [pc, #20]	@ (80034b8 <HAL_UART_MspInit+0x8c>)
 80034a2:	f000 fb1b 	bl	8003adc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80034a6:	bf00      	nop
 80034a8:	3728      	adds	r7, #40	@ 0x28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40004400 	.word	0x40004400
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020000 	.word	0x40020000

080034bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <NMI_Handler+0x4>

080034c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <HardFault_Handler+0x4>

080034cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <MemManage_Handler+0x4>

080034d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <BusFault_Handler+0x4>

080034dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <UsageFault_Handler+0x4>

080034e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003512:	f000 f94f 	bl	80037b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003520:	4802      	ldr	r0, [pc, #8]	@ (800352c <I2C2_EV_IRQHandler+0x10>)
 8003522:	f000 ffc7 	bl	80044b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000268 	.word	0x20000268

08003530 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003534:	4802      	ldr	r0, [pc, #8]	@ (8003540 <I2C2_ER_IRQHandler+0x10>)
 8003536:	f001 f910 	bl	800475a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000268 	.word	0x20000268

08003544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return 1;
 8003548:	2301      	movs	r3, #1
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_kill>:

int _kill(int pid, int sig)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800355e:	f006 f83b 	bl	80095d8 <__errno>
 8003562:	4603      	mov	r3, r0
 8003564:	2216      	movs	r2, #22
 8003566:	601a      	str	r2, [r3, #0]
  return -1;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_exit>:

void _exit (int status)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ffe7 	bl	8003554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003586:	bf00      	nop
 8003588:	e7fd      	b.n	8003586 <_exit+0x12>

0800358a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e00a      	b.n	80035b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800359c:	f3af 8000 	nop.w
 80035a0:	4601      	mov	r1, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	60ba      	str	r2, [r7, #8]
 80035a8:	b2ca      	uxtb	r2, r1
 80035aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	dbf0      	blt.n	800359c <_read+0x12>
  }

  return len;
 80035ba:	687b      	ldr	r3, [r7, #4]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035ec:	605a      	str	r2, [r3, #4]
  return 0;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <_isatty>:

int _isatty(int file)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003604:	2301      	movs	r3, #1
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003634:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <_sbrk+0x5c>)
 8003636:	4b15      	ldr	r3, [pc, #84]	@ (800368c <_sbrk+0x60>)
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003640:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <_sbrk+0x64>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003648:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <_sbrk+0x64>)
 800364a:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <_sbrk+0x68>)
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800364e:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	429a      	cmp	r2, r3
 800365a:	d207      	bcs.n	800366c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800365c:	f005 ffbc 	bl	80095d8 <__errno>
 8003660:	4603      	mov	r3, r0
 8003662:	220c      	movs	r2, #12
 8003664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	e009      	b.n	8003680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800366c:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <_sbrk+0x64>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003672:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <_sbrk+0x64>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	4a05      	ldr	r2, [pc, #20]	@ (8003690 <_sbrk+0x64>)
 800367c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20020000 	.word	0x20020000
 800368c:	00000400 	.word	0x00000400
 8003690:	200006ec 	.word	0x200006ec
 8003694:	20000840 	.word	0x20000840

08003698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <SystemInit+0x20>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a2:	4a05      	ldr	r2, [pc, #20]	@ (80036b8 <SystemInit+0x20>)
 80036a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036c0:	f7ff ffea 	bl	8003698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036c4:	480c      	ldr	r0, [pc, #48]	@ (80036f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036c6:	490d      	ldr	r1, [pc, #52]	@ (80036fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80036ea:	f005 ff7b 	bl	80095e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ee:	f7fe fa11 	bl	8001b14 <main>
  bx  lr    
 80036f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036fc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003700:	0800ead8 	.word	0x0800ead8
  ldr r2, =_sbss
 8003704:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003708:	20000840 	.word	0x20000840

0800370c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800370c:	e7fe      	b.n	800370c <ADC_IRQHandler>
	...

08003710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003714:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <HAL_Init+0x40>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <HAL_Init+0x40>)
 800371a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800371e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003720:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_Init+0x40>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <HAL_Init+0x40>)
 8003726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800372a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800372c:	4b08      	ldr	r3, [pc, #32]	@ (8003750 <HAL_Init+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a07      	ldr	r2, [pc, #28]	@ (8003750 <HAL_Init+0x40>)
 8003732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003738:	2003      	movs	r0, #3
 800373a:	f000 f94f 	bl	80039dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800373e:	2000      	movs	r0, #0
 8003740:	f000 f808 	bl	8003754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003744:	f7ff fa8c 	bl	8002c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023c00 	.word	0x40023c00

08003754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800375c:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_InitTick+0x54>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <HAL_InitTick+0x58>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800376a:	fbb3 f3f1 	udiv	r3, r3, r1
 800376e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f975 	bl	8003a62 <HAL_SYSTICK_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e00e      	b.n	80037a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d80a      	bhi.n	800379e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003788:	2200      	movs	r2, #0
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	f000 f92f 	bl	80039f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003794:	4a06      	ldr	r2, [pc, #24]	@ (80037b0 <HAL_InitTick+0x5c>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000010 	.word	0x20000010
 80037ac:	20000018 	.word	0x20000018
 80037b0:	20000014 	.word	0x20000014

080037b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_IncTick+0x20>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_IncTick+0x24>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <HAL_IncTick+0x24>)
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000018 	.word	0x20000018
 80037d8:	200006f0 	.word	0x200006f0

080037dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return uwTick;
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <HAL_GetTick+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	200006f0 	.word	0x200006f0

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	@ (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	db12      	blt.n	80038cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	f003 021f 	and.w	r2, r3, #31
 80038ac:	490a      	ldr	r1, [pc, #40]	@ (80038d8 <__NVIC_DisableIRQ+0x44>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2001      	movs	r0, #1
 80038b6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ba:	3320      	adds	r3, #32
 80038bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038c0:	f3bf 8f4f 	dsb	sy
}
 80038c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038c6:	f3bf 8f6f 	isb	sy
}
 80038ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100

080038dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	6039      	str	r1, [r7, #0]
 80038e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db0a      	blt.n	8003906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	490c      	ldr	r1, [pc, #48]	@ (8003928 <__NVIC_SetPriority+0x4c>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	0112      	lsls	r2, r2, #4
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	440b      	add	r3, r1
 8003900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003904:	e00a      	b.n	800391c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4908      	ldr	r1, [pc, #32]	@ (800392c <__NVIC_SetPriority+0x50>)
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	3b04      	subs	r3, #4
 8003914:	0112      	lsls	r2, r2, #4
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	440b      	add	r3, r1
 800391a:	761a      	strb	r2, [r3, #24]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000e100 	.word	0xe000e100
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003930:	b480      	push	{r7}
 8003932:	b089      	sub	sp, #36	@ 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f1c3 0307 	rsb	r3, r3, #7
 800394a:	2b04      	cmp	r3, #4
 800394c:	bf28      	it	cs
 800394e:	2304      	movcs	r3, #4
 8003950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3304      	adds	r3, #4
 8003956:	2b06      	cmp	r3, #6
 8003958:	d902      	bls.n	8003960 <NVIC_EncodePriority+0x30>
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3b03      	subs	r3, #3
 800395e:	e000      	b.n	8003962 <NVIC_EncodePriority+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	f04f 32ff 	mov.w	r2, #4294967295
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43da      	mvns	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	401a      	ands	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003978:	f04f 31ff 	mov.w	r1, #4294967295
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	43d9      	mvns	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003988:	4313      	orrs	r3, r2
         );
}
 800398a:	4618      	mov	r0, r3
 800398c:	3724      	adds	r7, #36	@ 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a8:	d301      	bcc.n	80039ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00f      	b.n	80039ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ae:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <SysTick_Config+0x40>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b6:	210f      	movs	r1, #15
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	f7ff ff8e 	bl	80038dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <SysTick_Config+0x40>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c6:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <SysTick_Config+0x40>)
 80039c8:	2207      	movs	r2, #7
 80039ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000e010 	.word	0xe000e010

080039dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff05 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a04:	f7ff ff1a 	bl	800383c <__NVIC_GetPriorityGrouping>
 8003a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff ff8e 	bl	8003930 <NVIC_EncodePriority>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff5d 	bl	80038dc <__NVIC_SetPriority>
}
 8003a22:	bf00      	nop
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4603      	mov	r3, r0
 8003a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff0d 	bl	8003858 <__NVIC_EnableIRQ>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff1d 	bl	8003894 <__NVIC_DisableIRQ>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff94 	bl	8003998 <SysTick_Config>
 8003a70:	4603      	mov	r3, r0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2280      	movs	r2, #128	@ 0x80
 8003a92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e00c      	b.n	8003ab2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003acc:	b2db      	uxtb	r3, r3
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	@ 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e165      	b.n	8003dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af8:	2201      	movs	r2, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	f040 8154 	bne.w	8003dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d005      	beq.n	8003b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d130      	bne.n	8003b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	2203      	movs	r2, #3
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 0201 	and.w	r2, r3, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d017      	beq.n	8003bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d123      	bne.n	8003c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	220f      	movs	r2, #15
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0203 	and.w	r2, r3, #3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80ae 	beq.w	8003dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b5d      	ldr	r3, [pc, #372]	@ (8003ddc <HAL_GPIO_Init+0x300>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ddc <HAL_GPIO_Init+0x300>)
 8003c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c72:	4b5a      	ldr	r3, [pc, #360]	@ (8003ddc <HAL_GPIO_Init+0x300>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c7e:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_GPIO_Init+0x304>)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	3302      	adds	r3, #2
 8003c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	220f      	movs	r2, #15
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8003de4 <HAL_GPIO_Init+0x308>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d025      	beq.n	8003cf6 <HAL_GPIO_Init+0x21a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4e      	ldr	r2, [pc, #312]	@ (8003de8 <HAL_GPIO_Init+0x30c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01f      	beq.n	8003cf2 <HAL_GPIO_Init+0x216>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8003dec <HAL_GPIO_Init+0x310>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x212>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003df0 <HAL_GPIO_Init+0x314>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x20e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003df4 <HAL_GPIO_Init+0x318>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x20a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8003df8 <HAL_GPIO_Init+0x31c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x206>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a49      	ldr	r2, [pc, #292]	@ (8003dfc <HAL_GPIO_Init+0x320>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x202>
 8003cda:	2306      	movs	r3, #6
 8003cdc:	e00c      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cde:	2307      	movs	r3, #7
 8003ce0:	e00a      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	e008      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e006      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cea:	2303      	movs	r3, #3
 8003cec:	e004      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e002      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f002 0203 	and.w	r2, r2, #3
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	4093      	lsls	r3, r2
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d08:	4935      	ldr	r1, [pc, #212]	@ (8003de0 <HAL_GPIO_Init+0x304>)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	3302      	adds	r3, #2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d16:	4b3a      	ldr	r3, [pc, #232]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d3a:	4a31      	ldr	r2, [pc, #196]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d40:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d6a:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d94:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db8:	4a11      	ldr	r2, [pc, #68]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	f67f ae96 	bls.w	8003af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3724      	adds	r7, #36	@ 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40020000 	.word	0x40020000
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40020800 	.word	0x40020800
 8003df0:	40020c00 	.word	0x40020c00
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40021400 	.word	0x40021400
 8003dfc:	40021800 	.word	0x40021800
 8003e00:	40013c00 	.word	0x40013c00

08003e04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e0c7      	b.n	8003fb0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e20:	2201      	movs	r2, #1
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	f040 80b7 	bne.w	8003faa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e3c:	4a62      	ldr	r2, [pc, #392]	@ (8003fc8 <HAL_GPIO_DeInit+0x1c4>)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e48:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a5a      	ldr	r2, [pc, #360]	@ (8003fcc <HAL_GPIO_DeInit+0x1c8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d025      	beq.n	8003eb2 <HAL_GPIO_DeInit+0xae>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a59      	ldr	r2, [pc, #356]	@ (8003fd0 <HAL_GPIO_DeInit+0x1cc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01f      	beq.n	8003eae <HAL_GPIO_DeInit+0xaa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a58      	ldr	r2, [pc, #352]	@ (8003fd4 <HAL_GPIO_DeInit+0x1d0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d019      	beq.n	8003eaa <HAL_GPIO_DeInit+0xa6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a57      	ldr	r2, [pc, #348]	@ (8003fd8 <HAL_GPIO_DeInit+0x1d4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_DeInit+0xa2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a56      	ldr	r2, [pc, #344]	@ (8003fdc <HAL_GPIO_DeInit+0x1d8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00d      	beq.n	8003ea2 <HAL_GPIO_DeInit+0x9e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a55      	ldr	r2, [pc, #340]	@ (8003fe0 <HAL_GPIO_DeInit+0x1dc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_DeInit+0x9a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a54      	ldr	r2, [pc, #336]	@ (8003fe4 <HAL_GPIO_DeInit+0x1e0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_GPIO_DeInit+0x96>
 8003e96:	2306      	movs	r3, #6
 8003e98:	e00c      	b.n	8003eb4 <HAL_GPIO_DeInit+0xb0>
 8003e9a:	2307      	movs	r3, #7
 8003e9c:	e00a      	b.n	8003eb4 <HAL_GPIO_DeInit+0xb0>
 8003e9e:	2305      	movs	r3, #5
 8003ea0:	e008      	b.n	8003eb4 <HAL_GPIO_DeInit+0xb0>
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_DeInit+0xb0>
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e004      	b.n	8003eb4 <HAL_GPIO_DeInit+0xb0>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e002      	b.n	8003eb4 <HAL_GPIO_DeInit+0xb0>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_GPIO_DeInit+0xb0>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	f002 0203 	and.w	r2, r2, #3
 8003eba:	0092      	lsls	r2, r2, #2
 8003ebc:	4093      	lsls	r3, r2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d132      	bne.n	8003f2a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ec4:	4b48      	ldr	r3, [pc, #288]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4946      	ldr	r1, [pc, #280]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ed2:	4b45      	ldr	r3, [pc, #276]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	4943      	ldr	r1, [pc, #268]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ee0:	4b41      	ldr	r3, [pc, #260]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	493f      	ldr	r1, [pc, #252]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003eee:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	493c      	ldr	r1, [pc, #240]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e4>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc8 <HAL_GPIO_DeInit+0x1c4>)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	3302      	adds	r3, #2
 8003f14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	482a      	ldr	r0, [pc, #168]	@ (8003fc8 <HAL_GPIO_DeInit+0x1c4>)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	400a      	ands	r2, r1
 8003f24:	3302      	adds	r3, #2
 8003f26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2103      	movs	r1, #3
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	08d2      	lsrs	r2, r2, #3
 8003f60:	4019      	ands	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3208      	adds	r2, #8
 8003f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	2103      	movs	r1, #3
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	2101      	movs	r1, #1
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	401a      	ands	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2103      	movs	r1, #3
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3301      	adds	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	f67f af34 	bls.w	8003e20 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40021400 	.word	0x40021400
 8003fe4:	40021800 	.word	0x40021800
 8003fe8:	40013c00 	.word	0x40013c00

08003fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ffc:	787b      	ldrb	r3, [r7, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004008:	e003      	b.n	8004012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	041a      	lsls	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	619a      	str	r2, [r3, #24]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e12b      	b.n	800428a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fe fe32 	bl	8002cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	@ 0x24
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004084:	f002 f818 	bl	80060b8 <HAL_RCC_GetPCLK1Freq>
 8004088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4a81      	ldr	r2, [pc, #516]	@ (8004294 <HAL_I2C_Init+0x274>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d807      	bhi.n	80040a4 <HAL_I2C_Init+0x84>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a80      	ldr	r2, [pc, #512]	@ (8004298 <HAL_I2C_Init+0x278>)
 8004098:	4293      	cmp	r3, r2
 800409a:	bf94      	ite	ls
 800409c:	2301      	movls	r3, #1
 800409e:	2300      	movhi	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e006      	b.n	80040b2 <HAL_I2C_Init+0x92>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a7d      	ldr	r2, [pc, #500]	@ (800429c <HAL_I2C_Init+0x27c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	bf94      	ite	ls
 80040ac:	2301      	movls	r3, #1
 80040ae:	2300      	movhi	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0e7      	b.n	800428a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a78      	ldr	r2, [pc, #480]	@ (80042a0 <HAL_I2C_Init+0x280>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0c9b      	lsrs	r3, r3, #18
 80040c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004294 <HAL_I2C_Init+0x274>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d802      	bhi.n	80040f4 <HAL_I2C_Init+0xd4>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3301      	adds	r3, #1
 80040f2:	e009      	b.n	8004108 <HAL_I2C_Init+0xe8>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	4a69      	ldr	r2, [pc, #420]	@ (80042a4 <HAL_I2C_Init+0x284>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	3301      	adds	r3, #1
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	430b      	orrs	r3, r1
 800410e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800411a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	495c      	ldr	r1, [pc, #368]	@ (8004294 <HAL_I2C_Init+0x274>)
 8004124:	428b      	cmp	r3, r1
 8004126:	d819      	bhi.n	800415c <HAL_I2C_Init+0x13c>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e59      	subs	r1, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fbb1 f3f3 	udiv	r3, r1, r3
 8004136:	1c59      	adds	r1, r3, #1
 8004138:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800413c:	400b      	ands	r3, r1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_I2C_Init+0x138>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1e59      	subs	r1, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004150:	3301      	adds	r3, #1
 8004152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004156:	e051      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 8004158:	2304      	movs	r3, #4
 800415a:	e04f      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d111      	bne.n	8004188 <HAL_I2C_Init+0x168>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e58      	subs	r0, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e012      	b.n	80041ae <HAL_I2C_Init+0x18e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1e58      	subs	r0, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	0099      	lsls	r1, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	fbb0 f3f3 	udiv	r3, r0, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Init+0x196>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e022      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10e      	bne.n	80041dc <HAL_I2C_Init+0x1bc>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e58      	subs	r0, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	440b      	add	r3, r1
 80041cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041da:	e00f      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1e58      	subs	r0, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	0099      	lsls	r1, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	6809      	ldr	r1, [r1, #0]
 8004200:	4313      	orrs	r3, r2
 8004202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800422a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6911      	ldr	r1, [r2, #16]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68d2      	ldr	r2, [r2, #12]
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	430b      	orrs	r3, r1
 800423e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	000186a0 	.word	0x000186a0
 8004298:	001e847f 	.word	0x001e847f
 800429c:	003d08ff 	.word	0x003d08ff
 80042a0:	431bde83 	.word	0x431bde83
 80042a4:	10624dd3 	.word	0x10624dd3

080042a8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e021      	b.n	80042fe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2224      	movs	r2, #36	@ 0x24
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fe fd9a 	bl	8002e0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004318:	2b80      	cmp	r3, #128	@ 0x80
 800431a:	d103      	bne.n	8004324 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
  }
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b20      	cmp	r3, #32
 8004348:	d158      	bne.n	80043fc <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_I2C_Slave_Receive_IT+0x26>
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e051      	b.n	80043fe <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_I2C_Slave_Receive_IT+0x38>
 8004364:	2302      	movs	r3, #2
 8004366:	e04a      	b.n	80043fe <HAL_I2C_Slave_Receive_IT+0xce>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d007      	beq.n	800438e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800439c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2222      	movs	r2, #34	@ 0x22
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a0f      	ldr	r2, [pc, #60]	@ (800440c <HAL_I2C_Slave_Receive_IT+0xdc>)
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043de:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80043f6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	ffff0000 	.word	0xffff0000

08004410 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004422:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && ((CurrentMode == HAL_I2C_MODE_MASTER) || 
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d13b      	bne.n	80044aa <HAL_I2C_Master_Abort_IT+0x9a>
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b10      	cmp	r3, #16
 8004436:	d002      	beq.n	800443e <HAL_I2C_Master_Abort_IT+0x2e>
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d135      	bne.n	80044aa <HAL_I2C_Master_Abort_IT+0x9a>
                                                             (CurrentMode == HAL_I2C_MODE_MEM)))
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_I2C_Master_Abort_IT+0x3c>
 8004448:	2302      	movs	r3, #2
 800444a:	e02f      	b.n	80044ac <HAL_I2C_Master_Abort_IT+0x9c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2260      	movs	r2, #96	@ 0x60
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004470:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004496:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f001 fa9f 	bl	80059e4 <I2C_ITError>

    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_I2C_Master_Abort_IT+0x9c>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d003      	beq.n	80044ec <HAL_I2C_EV_IRQHandler+0x38>
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	f040 80b1 	bne.w	800464e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <HAL_I2C_EV_IRQHandler+0x6e>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800450c:	d003      	beq.n	8004516 <HAL_I2C_EV_IRQHandler+0x62>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004514:	d101      	bne.n	800451a <HAL_I2C_EV_IRQHandler+0x66>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_I2C_EV_IRQHandler+0x68>
 800451a:	2300      	movs	r3, #0
 800451c:	2b01      	cmp	r3, #1
 800451e:	f000 8114 	beq.w	800474a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <HAL_I2C_EV_IRQHandler+0x90>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 fc60 	bl	8005dfc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fd66 	bl	800500e <I2C_Master_SB>
 8004542:	e083      	b.n	800464c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_I2C_EV_IRQHandler+0xac>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fdde 	bl	800511a <I2C_Master_ADD10>
 800455e:	e075      	b.n	800464c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_I2C_EV_IRQHandler+0xc8>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fdfa 	bl	800516e <I2C_Master_ADDR>
 800457a:	e067      	b.n	800464c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d036      	beq.n	80045f4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004594:	f000 80db 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <HAL_I2C_EV_IRQHandler+0x10a>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_I2C_EV_IRQHandler+0x10a>
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f9c2 	bl	8004940 <I2C_MasterTransmit_TXE>
 80045bc:	e046      	b.n	800464c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80c2 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x29a>
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80bc 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045d6:	7bbb      	ldrb	r3, [r7, #14]
 80045d8:	2b21      	cmp	r3, #33	@ 0x21
 80045da:	d103      	bne.n	80045e4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa4b 	bl	8004a78 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045e2:	e0b4      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b40      	cmp	r3, #64	@ 0x40
 80045e8:	f040 80b1 	bne.w	800474e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fab9 	bl	8004b64 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f2:	e0ac      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004602:	f000 80a4 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00d      	beq.n	800462c <HAL_I2C_EV_IRQHandler+0x178>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <HAL_I2C_EV_IRQHandler+0x178>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb35 	bl	8004c94 <I2C_MasterReceive_RXNE>
 800462a:	e00f      	b.n	800464c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 808b 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x29a>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8085 	beq.w	800474e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fbed 	bl	8004e24 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800464a:	e080      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x29a>
 800464c:	e07f      	b.n	800474e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e007      	b.n	8004670 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x1ea>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ffb8 	bl	800560c <I2C_Slave_ADDR>
 800469c:	e05a      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_I2C_EV_IRQHandler+0x206>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fff2 	bl	800569c <I2C_Slave_STOPF>
 80046b8:	e04c      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	2b21      	cmp	r3, #33	@ 0x21
 80046be:	d002      	beq.n	80046c6 <HAL_I2C_EV_IRQHandler+0x212>
 80046c0:	7bbb      	ldrb	r3, [r7, #14]
 80046c2:	2b29      	cmp	r3, #41	@ 0x29
 80046c4:	d120      	bne.n	8004708 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <HAL_I2C_EV_IRQHandler+0x238>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_I2C_EV_IRQHandler+0x238>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fed3 	bl	8005490 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ea:	e032      	b.n	8004752 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02d      	beq.n	8004752 <HAL_I2C_EV_IRQHandler+0x29e>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d028      	beq.n	8004752 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 ff02 	bl	800550a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004706:	e024      	b.n	8004752 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_I2C_EV_IRQHandler+0x27a>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_I2C_EV_IRQHandler+0x27a>
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 ff10 	bl	800554c <I2C_SlaveReceive_RXNE>
 800472c:	e012      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ff40 	bl	80055c8 <I2C_SlaveReceive_BTF>
 8004748:	e004      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800474a:	bf00      	nop
 800474c:	e002      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004752:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b08a      	sub	sp, #40	@ 0x28
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800477c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <HAL_I2C_ER_IRQHandler+0x4a>
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <HAL_I2C_ER_IRQHandler+0x70>
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80047c8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d03e      	beq.n	8004852 <HAL_I2C_ER_IRQHandler+0xf8>
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d039      	beq.n	8004852 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80047de:	7efb      	ldrb	r3, [r7, #27]
 80047e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047f8:	7ebb      	ldrb	r3, [r7, #26]
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d112      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xca>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xca>
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b21      	cmp	r3, #33	@ 0x21
 8004808:	d008      	beq.n	800481c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b29      	cmp	r3, #41	@ 0x29
 800480e:	d005      	beq.n	800481c <HAL_I2C_ER_IRQHandler+0xc2>
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b28      	cmp	r3, #40	@ 0x28
 8004814:	d106      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b21      	cmp	r3, #33	@ 0x21
 800481a:	d103      	bne.n	8004824 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 f86d 	bl	80058fc <I2C_Slave_AF>
 8004822:	e016      	b.n	8004852 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800482c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004836:	7efb      	ldrb	r3, [r7, #27]
 8004838:	2b10      	cmp	r3, #16
 800483a:	d002      	beq.n	8004842 <HAL_I2C_ER_IRQHandler+0xe8>
 800483c:	7efb      	ldrb	r3, [r7, #27]
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d107      	bne.n	8004852 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004850:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <HAL_I2C_ER_IRQHandler+0x11e>
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	f043 0308 	orr.w	r3, r3, #8
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004876:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 f8aa 	bl	80059e4 <I2C_ITError>
  }
}
 8004890:	bf00      	nop
 8004892:	3728      	adds	r7, #40	@ 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
 80048e0:	4613      	mov	r3, r2
 80048e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800494e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004956:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d150      	bne.n	8004a08 <I2C_MasterTransmit_TXE+0xc8>
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b21      	cmp	r3, #33	@ 0x21
 800496a:	d14d      	bne.n	8004a08 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b08      	cmp	r3, #8
 8004970:	d01d      	beq.n	80049ae <I2C_MasterTransmit_TXE+0x6e>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b20      	cmp	r3, #32
 8004976:	d01a      	beq.n	80049ae <I2C_MasterTransmit_TXE+0x6e>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800497e:	d016      	beq.n	80049ae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800498e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2211      	movs	r2, #17
 8004994:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ff76 	bl	8004898 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049ac:	e060      	b.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049bc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049cc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b40      	cmp	r3, #64	@ 0x40
 80049e6:	d107      	bne.n	80049f8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff87 	bl	8004904 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049f6:	e03b      	b.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff49 	bl	8004898 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a06:	e033      	b.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b21      	cmp	r3, #33	@ 0x21
 8004a0c:	d005      	beq.n	8004a1a <I2C_MasterTransmit_TXE+0xda>
 8004a0e:	7bbb      	ldrb	r3, [r7, #14]
 8004a10:	2b40      	cmp	r3, #64	@ 0x40
 8004a12:	d12d      	bne.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b22      	cmp	r3, #34	@ 0x22
 8004a18:	d12a      	bne.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d108      	bne.n	8004a36 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a32:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a34:	e01c      	b.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b40      	cmp	r3, #64	@ 0x40
 8004a40:	d103      	bne.n	8004a4a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f88e 	bl	8004b64 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a48:	e012      	b.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a6e:	e7ff      	b.n	8004a70 <I2C_MasterTransmit_TXE+0x130>
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b21      	cmp	r3, #33	@ 0x21
 8004a90:	d164      	bne.n	8004b5c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ac0:	e04c      	b.n	8004b5c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d01d      	beq.n	8004b04 <I2C_MasterTransmit_BTF+0x8c>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d01a      	beq.n	8004b04 <I2C_MasterTransmit_BTF+0x8c>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ad4:	d016      	beq.n	8004b04 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ae4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2211      	movs	r2, #17
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff fecb 	bl	8004898 <HAL_I2C_MasterTxCpltCallback>
}
 8004b02:	e02b      	b.n	8004b5c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b12:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b22:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b40      	cmp	r3, #64	@ 0x40
 8004b3c:	d107      	bne.n	8004b4e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fedc 	bl	8004904 <HAL_I2C_MemTxCpltCallback>
}
 8004b4c:	e006      	b.n	8004b5c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fe9e 	bl	8004898 <HAL_I2C_MasterTxCpltCallback>
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d11d      	bne.n	8004bb8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10b      	bne.n	8004b9c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b94:	1c9a      	adds	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b9a:	e077      	b.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	121b      	asrs	r3, r3, #8
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bb6:	e069      	b.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10b      	bne.n	8004bd8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bd6:	e059      	b.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d152      	bne.n	8004c86 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b22      	cmp	r3, #34	@ 0x22
 8004be4:	d10d      	bne.n	8004c02 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bf4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c00:	e044      	b.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d015      	beq.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b21      	cmp	r3, #33	@ 0x21
 8004c10:	d112      	bne.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	781a      	ldrb	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c36:	e029      	b.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d124      	bne.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b21      	cmp	r3, #33	@ 0x21
 8004c46:	d121      	bne.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c56:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fe40 	bl	8004904 <HAL_I2C_MemTxCpltCallback>
}
 8004c84:	e002      	b.n	8004c8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fb3d 	bl	8004306 <I2C_Flush_DR>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b22      	cmp	r3, #34	@ 0x22
 8004ca6:	f040 80b9 	bne.w	8004e1c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d921      	bls.n	8004d02 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	f040 8096 	bne.w	8004e1c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004d00:	e08c      	b.n	8004e1c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d07f      	beq.n	8004e0a <I2C_MasterReceive_RXNE+0x176>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d002      	beq.n	8004d16 <I2C_MasterReceive_RXNE+0x82>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d179      	bne.n	8004e0a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 f83e 	bl	8005d98 <I2C_WaitOnSTOPRequestThroughIT>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d14c      	bne.n	8004dbc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d30:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b40      	cmp	r3, #64	@ 0x40
 8004d7a:	d10a      	bne.n	8004d92 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fdc4 	bl	8004918 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d90:	e044      	b.n	8004e1c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d002      	beq.n	8004da6 <I2C_MasterReceive_RXNE+0x112>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d103      	bne.n	8004dae <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dac:	e002      	b.n	8004db4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2212      	movs	r2, #18
 8004db2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fd79 	bl	80048ac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dba:	e02f      	b.n	8004e1c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc f954 	bl	80010b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e08:	e008      	b.n	8004e1c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e18:	605a      	str	r2, [r3, #4]
}
 8004e1a:	e7ff      	b.n	8004e1c <I2C_MasterReceive_RXNE+0x188>
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d11b      	bne.n	8004e74 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e72:	e0c8      	b.n	8005006 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d129      	bne.n	8004ed2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d00a      	beq.n	8004eaa <I2C_MasterReceive_BTF+0x86>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d007      	beq.n	8004eaa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004ed0:	e099      	b.n	8005006 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f040 8081 	bne.w	8004fe0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d002      	beq.n	8004eea <I2C_MasterReceive_BTF+0xc6>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d108      	bne.n	8004efc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e019      	b.n	8004f30 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d002      	beq.n	8004f08 <I2C_MasterReceive_BTF+0xe4>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d108      	bne.n	8004f1a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e00a      	b.n	8004f30 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d007      	beq.n	8004f30 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b40      	cmp	r3, #64	@ 0x40
 8004f9e:	d10a      	bne.n	8004fb6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fcb2 	bl	8004918 <HAL_I2C_MemRxCpltCallback>
}
 8004fb4:	e027      	b.n	8005006 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d002      	beq.n	8004fca <I2C_MasterReceive_BTF+0x1a6>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d103      	bne.n	8004fd2 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fd0:	e002      	b.n	8004fd8 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2212      	movs	r2, #18
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fc67 	bl	80048ac <HAL_I2C_MasterRxCpltCallback>
}
 8004fde:	e012      	b.n	8005006 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b40      	cmp	r3, #64	@ 0x40
 8005020:	d117      	bne.n	8005052 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800503a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800503c:	e067      	b.n	800510e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	b2da      	uxtb	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	611a      	str	r2, [r3, #16]
}
 8005050:	e05d      	b.n	800510e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800505a:	d133      	bne.n	80050c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b21      	cmp	r3, #33	@ 0x21
 8005066:	d109      	bne.n	800507c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005078:	611a      	str	r2, [r3, #16]
 800507a:	e008      	b.n	800508e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <I2C_Master_SB+0x92>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d108      	bne.n	80050b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d032      	beq.n	800510e <I2C_Master_SB+0x100>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02d      	beq.n	800510e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050c0:	605a      	str	r2, [r3, #4]
}
 80050c2:	e024      	b.n	800510e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10e      	bne.n	80050ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	11db      	asrs	r3, r3, #7
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f003 0306 	and.w	r3, r3, #6
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f063 030f 	orn	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]
}
 80050e8:	e011      	b.n	800510e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10d      	bne.n	800510e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	11db      	asrs	r3, r3, #7
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f003 0306 	and.w	r3, r3, #6
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f063 030e 	orn	r3, r3, #14
 8005106:	b2da      	uxtb	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	611a      	str	r2, [r3, #16]
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	b2da      	uxtb	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <I2C_Master_ADD10+0x26>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00c      	beq.n	8005162 <I2C_Master_ADD10+0x48>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005160:	605a      	str	r2, [r3, #4]
  }
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800516e:	b480      	push	{r7}
 8005170:	b091      	sub	sp, #68	@ 0x44
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800517c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b22      	cmp	r3, #34	@ 0x22
 8005196:	f040 8169 	bne.w	800546c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <I2C_Master_ADDR+0x54>
 80051a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80051a6:	2b40      	cmp	r3, #64	@ 0x40
 80051a8:	d10b      	bne.n	80051c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	e160      	b.n	8005484 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11d      	bne.n	8005206 <I2C_Master_ADDR+0x98>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051d2:	d118      	bne.n	8005206 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	2300      	movs	r3, #0
 80051d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	651a      	str	r2, [r3, #80]	@ 0x50
 8005204:	e13e      	b.n	8005484 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d113      	bne.n	8005238 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005210:	2300      	movs	r3, #0
 8005212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e115      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	f040 808a 	bne.w	8005358 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800524a:	d137      	bne.n	80052bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800526a:	d113      	bne.n	8005294 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800527a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	e0e7      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005294:	2300      	movs	r3, #0
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e0d3      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d02e      	beq.n	8005320 <I2C_Master_ADDR+0x1b2>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d02b      	beq.n	8005320 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ca:	2b12      	cmp	r3, #18
 80052cc:	d102      	bne.n	80052d4 <I2C_Master_ADDR+0x166>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d125      	bne.n	8005320 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d00e      	beq.n	80052f8 <I2C_Master_ADDR+0x18a>
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d00b      	beq.n	80052f8 <I2C_Master_ADDR+0x18a>
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d008      	beq.n	80052f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e007      	b.n	8005308 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005306:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	e0a1      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800532e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e085      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d14d      	bne.n	80053fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	2b04      	cmp	r3, #4
 8005366:	d016      	beq.n	8005396 <I2C_Master_ADDR+0x228>
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	2b02      	cmp	r3, #2
 800536c:	d013      	beq.n	8005396 <I2C_Master_ADDR+0x228>
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	2b10      	cmp	r3, #16
 8005372:	d010      	beq.n	8005396 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005382:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e007      	b.n	80053a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b4:	d117      	bne.n	80053e6 <I2C_Master_ADDR+0x278>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053bc:	d00b      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d008      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d005      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d002      	beq.n	80053d6 <I2C_Master_ADDR+0x268>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d107      	bne.n	80053e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	e032      	b.n	8005464 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800540c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800541c:	d117      	bne.n	800544e <I2C_Master_ADDR+0x2e0>
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005424:	d00b      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 8005426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005428:	2b01      	cmp	r3, #1
 800542a:	d008      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 800542c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542e:	2b08      	cmp	r3, #8
 8005430:	d005      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 8005432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005434:	2b10      	cmp	r3, #16
 8005436:	d002      	beq.n	800543e <I2C_Master_ADDR+0x2d0>
 8005438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543a:	2b20      	cmp	r3, #32
 800543c:	d107      	bne.n	800544e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800544c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800546a:	e00b      	b.n	8005484 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	e7ff      	b.n	8005484 <I2C_Master_ADDR+0x316>
 8005484:	bf00      	nop
 8005486:	3744      	adds	r7, #68	@ 0x44
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02b      	beq.n	8005502 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d114      	bne.n	8005502 <I2C_SlaveTransmit_TXE+0x72>
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b29      	cmp	r3, #41	@ 0x29
 80054dc:	d111      	bne.n	8005502 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2221      	movs	r2, #33	@ 0x21
 80054f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2228      	movs	r2, #40	@ 0x28
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff f9df 	bl	80048c0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d011      	beq.n	8005540 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02c      	beq.n	80055c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d114      	bne.n	80055c0 <I2C_SlaveReceive_RXNE+0x74>
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b2a      	cmp	r3, #42	@ 0x2a
 800559a:	d111      	bne.n	80055c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2222      	movs	r2, #34	@ 0x22
 80055b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2228      	movs	r2, #40	@ 0x28
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb fd50 	bl	8001060 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055c0:	bf00      	nop
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d012      	beq.n	8005600 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005626:	2b28      	cmp	r3, #40	@ 0x28
 8005628:	d125      	bne.n	8005676 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005638:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	81bb      	strh	r3, [r7, #12]
 8005658:	e002      	b.n	8005660 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005668:	89ba      	ldrh	r2, [r7, #12]
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	4619      	mov	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff f930 	bl	80048d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005674:	e00e      	b.n	8005694 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f8:	d172      	bne.n	80057e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b22      	cmp	r3, #34	@ 0x22
 80056fe:	d002      	beq.n	8005706 <I2C_Slave_STOPF+0x6a>
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b2a      	cmp	r3, #42	@ 0x2a
 8005704:	d135      	bne.n	8005772 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	f043 0204 	orr.w	r2, r3, #4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005738:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe f9bd 	bl	8003abe <HAL_DMA_GetState>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d049      	beq.n	80057de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	4a69      	ldr	r2, [pc, #420]	@ (80058f4 <I2C_Slave_STOPF+0x258>)
 8005750:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe f98f 	bl	8003a7a <HAL_DMA_Abort_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d03d      	beq.n	80057de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800576c:	4610      	mov	r0, r2
 800576e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005770:	e035      	b.n	80057de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	b29a      	uxth	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	f043 0204 	orr.w	r2, r3, #4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe f987 	bl	8003abe <HAL_DMA_GetState>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d014      	beq.n	80057e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ba:	4a4e      	ldr	r2, [pc, #312]	@ (80058f4 <I2C_Slave_STOPF+0x258>)
 80057bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe f959 	bl	8003a7a <HAL_DMA_Abort_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
 80057dc:	e000      	b.n	80057e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03e      	beq.n	8005868 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d112      	bne.n	800581e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005828:	2b40      	cmp	r3, #64	@ 0x40
 800582a:	d112      	bne.n	8005852 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005860:	f043 0204 	orr.w	r2, r3, #4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f8b7 	bl	80059e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005876:	e039      	b.n	80058ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b2a      	cmp	r3, #42	@ 0x2a
 800587c:	d109      	bne.n	8005892 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2228      	movs	r2, #40	@ 0x28
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fb fbe7 	bl	8001060 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b28      	cmp	r3, #40	@ 0x28
 800589c:	d111      	bne.n	80058c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a15      	ldr	r2, [pc, #84]	@ (80058f8 <I2C_Slave_STOPF+0x25c>)
 80058a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff f818 	bl	80048f0 <HAL_I2C_ListenCpltCallback>
}
 80058c0:	e014      	b.n	80058ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c6:	2b22      	cmp	r3, #34	@ 0x22
 80058c8:	d002      	beq.n	80058d0 <I2C_Slave_STOPF+0x234>
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b22      	cmp	r3, #34	@ 0x22
 80058ce:	d10d      	bne.n	80058ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fb fbba 	bl	8001060 <HAL_I2C_SlaveRxCpltCallback>
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	08005c49 	.word	0x08005c49
 80058f8:	ffff0000 	.word	0xffff0000

080058fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d002      	beq.n	800591e <I2C_Slave_AF+0x22>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b20      	cmp	r3, #32
 800591c:	d129      	bne.n	8005972 <I2C_Slave_AF+0x76>
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b28      	cmp	r3, #40	@ 0x28
 8005922:	d126      	bne.n	8005972 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a2e      	ldr	r2, [pc, #184]	@ (80059e0 <I2C_Slave_AF+0xe4>)
 8005928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005938:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005942:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005952:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fe ffc0 	bl	80048f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005970:	e031      	b.n	80059d6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b21      	cmp	r3, #33	@ 0x21
 8005976:	d129      	bne.n	80059cc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a19      	ldr	r2, [pc, #100]	@ (80059e0 <I2C_Slave_AF+0xe4>)
 800597c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2221      	movs	r2, #33	@ 0x21
 8005982:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059bc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fe fca1 	bl	8004306 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fe ff7b 	bl	80048c0 <HAL_I2C_SlaveTxCpltCallback>
}
 80059ca:	e004      	b.n	80059d6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	ffff0000 	.word	0xffff0000

080059e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	2b10      	cmp	r3, #16
 8005a00:	d002      	beq.n	8005a08 <I2C_ITError+0x24>
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b40      	cmp	r3, #64	@ 0x40
 8005a06:	d10a      	bne.n	8005a1e <I2C_ITError+0x3a>
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b22      	cmp	r3, #34	@ 0x22
 8005a0c:	d107      	bne.n	8005a1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a24:	2b28      	cmp	r3, #40	@ 0x28
 8005a26:	d107      	bne.n	8005a38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2228      	movs	r2, #40	@ 0x28
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a36:	e015      	b.n	8005a64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a46:	d00a      	beq.n	8005a5e <I2C_ITError+0x7a>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b60      	cmp	r3, #96	@ 0x60
 8005a4c:	d007      	beq.n	8005a5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a72:	d162      	bne.n	8005b3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d020      	beq.n	8005ad4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a96:	4a6a      	ldr	r2, [pc, #424]	@ (8005c40 <I2C_ITError+0x25c>)
 8005a98:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd ffeb 	bl	8003a7a <HAL_DMA_Abort_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8089 	beq.w	8005bbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4798      	blx	r3
 8005ad2:	e074      	b.n	8005bbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad8:	4a59      	ldr	r2, [pc, #356]	@ (8005c40 <I2C_ITError+0x25c>)
 8005ada:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fd ffca 	bl	8003a7a <HAL_DMA_Abort_IT>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d068      	beq.n	8005bbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b40      	cmp	r3, #64	@ 0x40
 8005af8:	d10b      	bne.n	8005b12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	e041      	b.n	8005bbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b60      	cmp	r3, #96	@ 0x60
 8005b44:	d125      	bne.n	8005b92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b40      	cmp	r3, #64	@ 0x40
 8005b60:	d10b      	bne.n	8005b7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0201 	bic.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fe fece 	bl	800492c <HAL_I2C_AbortCpltCallback>
 8005b90:	e015      	b.n	8005bbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9c:	2b40      	cmp	r3, #64	@ 0x40
 8005b9e:	d10b      	bne.n	8005bb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fb fa79 	bl	80010b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10e      	bne.n	8005bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d113      	bne.n	8005c38 <I2C_ITError+0x254>
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b28      	cmp	r3, #40	@ 0x28
 8005c14:	d110      	bne.n	8005c38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a0a      	ldr	r2, [pc, #40]	@ (8005c44 <I2C_ITError+0x260>)
 8005c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fe fe5c 	bl	80048f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	08005c49 	.word	0x08005c49
 8005c44:	ffff0000 	.word	0xffff0000

08005c48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c60:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c62:	4b4b      	ldr	r3, [pc, #300]	@ (8005d90 <I2C_DMAAbort+0x148>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	08db      	lsrs	r3, r3, #3
 8005c68:	4a4a      	ldr	r2, [pc, #296]	@ (8005d94 <I2C_DMAAbort+0x14c>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	0a1a      	lsrs	r2, r3, #8
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	00da      	lsls	r2, r3, #3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	f043 0220 	orr.w	r2, r3, #32
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005c8e:	e00a      	b.n	8005ca6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ca4:	d0ea      	beq.n	8005c7c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cd4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce8:	2200      	movs	r2, #0
 8005cea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0201 	bic.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b60      	cmp	r3, #96	@ 0x60
 8005d16:	d10e      	bne.n	8005d36 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7fe fdfc 	bl	800492c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d34:	e027      	b.n	8005d86 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d3c:	2b28      	cmp	r3, #40	@ 0x28
 8005d3e:	d117      	bne.n	8005d70 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2228      	movs	r2, #40	@ 0x28
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d6e:	e007      	b.n	8005d80 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d80:	6978      	ldr	r0, [r7, #20]
 8005d82:	f7fb f995 	bl	80010b0 <HAL_I2C_ErrorCallback>
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000010 	.word	0x20000010
 8005d94:	14f8b589 	.word	0x14f8b589

08005d98 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005da4:	4b13      	ldr	r3, [pc, #76]	@ (8005df4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	08db      	lsrs	r3, r3, #3
 8005daa:	4a13      	ldr	r2, [pc, #76]	@ (8005df8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	0a1a      	lsrs	r2, r3, #8
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d107      	bne.n	8005dd6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e008      	b.n	8005de8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de4:	d0e9      	beq.n	8005dba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	20000010 	.word	0x20000010
 8005df8:	14f8b589 	.word	0x14f8b589

08005dfc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005e0c:	d103      	bne.n	8005e16 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e14:	e007      	b.n	8005e26 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005e1e:	d102      	bne.n	8005e26 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2208      	movs	r2, #8
 8005e24:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	4b20      	ldr	r3, [pc, #128]	@ (8005ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e60:	f7fd fcbc 	bl	80037dc <HAL_GetTick>
 8005e64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e66:	e009      	b.n	8005e7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e68:	f7fd fcb8 	bl	80037dc <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e76:	d901      	bls.n	8005e7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e01f      	b.n	8005ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e7c:	4b13      	ldr	r3, [pc, #76]	@ (8005ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e88:	d1ee      	bne.n	8005e68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e8a:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e90:	f7fd fca4 	bl	80037dc <HAL_GetTick>
 8005e94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e96:	e009      	b.n	8005eac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e98:	f7fd fca0 	bl	80037dc <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ea6:	d901      	bls.n	8005eac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e007      	b.n	8005ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005eac:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eb8:	d1ee      	bne.n	8005e98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	420e0040 	.word	0x420e0040
 8005ecc:	40007000 	.word	0x40007000
 8005ed0:	420e0044 	.word	0x420e0044

08005ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0cc      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b68      	ldr	r3, [pc, #416]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d90c      	bls.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b65      	ldr	r3, [pc, #404]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b63      	ldr	r3, [pc, #396]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0b8      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d020      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f28:	4b59      	ldr	r3, [pc, #356]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a58      	ldr	r2, [pc, #352]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f40:	4b53      	ldr	r3, [pc, #332]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a52      	ldr	r2, [pc, #328]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4c:	4b50      	ldr	r3, [pc, #320]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	494d      	ldr	r1, [pc, #308]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d044      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f72:	4b47      	ldr	r3, [pc, #284]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d119      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e07f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d003      	beq.n	8005f92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f92:	4b3f      	ldr	r3, [pc, #252]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e06f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e067      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb2:	4b37      	ldr	r3, [pc, #220]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 0203 	bic.w	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4934      	ldr	r1, [pc, #208]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc4:	f7fd fc0a 	bl	80037dc <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fcc:	f7fd fc06 	bl	80037dc <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e04f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 020c 	and.w	r2, r3, #12
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d1eb      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff4:	4b25      	ldr	r3, [pc, #148]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d20c      	bcs.n	800601c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800600a:	4b20      	ldr	r3, [pc, #128]	@ (800608c <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e032      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006028:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	4916      	ldr	r1, [pc, #88]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006046:	4b12      	ldr	r3, [pc, #72]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	490e      	ldr	r1, [pc, #56]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800605a:	f000 f855 	bl	8006108 <HAL_RCC_GetSysClockFreq>
 800605e:	4602      	mov	r2, r0
 8006060:	4b0b      	ldr	r3, [pc, #44]	@ (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	490a      	ldr	r1, [pc, #40]	@ (8006094 <HAL_RCC_ClockConfig+0x1c0>)
 800606c:	5ccb      	ldrb	r3, [r1, r3]
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	4a09      	ldr	r2, [pc, #36]	@ (8006098 <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006076:	4b09      	ldr	r3, [pc, #36]	@ (800609c <HAL_RCC_ClockConfig+0x1c8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd fb6a 	bl	8003754 <HAL_InitTick>

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40023c00 	.word	0x40023c00
 8006090:	40023800 	.word	0x40023800
 8006094:	0800e438 	.word	0x0800e438
 8006098:	20000010 	.word	0x20000010
 800609c:	20000014 	.word	0x20000014

080060a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060a4:	4b03      	ldr	r3, [pc, #12]	@ (80060b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060a6:	681b      	ldr	r3, [r3, #0]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000010 	.word	0x20000010

080060b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060bc:	f7ff fff0 	bl	80060a0 <HAL_RCC_GetHCLKFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	0a9b      	lsrs	r3, r3, #10
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	4903      	ldr	r1, [pc, #12]	@ (80060dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	40023800 	.word	0x40023800
 80060dc:	0800e448 	.word	0x0800e448

080060e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060e4:	f7ff ffdc 	bl	80060a0 <HAL_RCC_GetHCLKFreq>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b05      	ldr	r3, [pc, #20]	@ (8006100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	0b5b      	lsrs	r3, r3, #13
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4903      	ldr	r1, [pc, #12]	@ (8006104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060f6:	5ccb      	ldrb	r3, [r1, r3]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40023800 	.word	0x40023800
 8006104:	0800e448 	.word	0x0800e448

08006108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800610c:	b0ae      	sub	sp, #184	@ 0xb8
 800610e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800612e:	4bcb      	ldr	r3, [pc, #812]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b0c      	cmp	r3, #12
 8006138:	f200 8206 	bhi.w	8006548 <HAL_RCC_GetSysClockFreq+0x440>
 800613c:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <HAL_RCC_GetSysClockFreq+0x3c>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006179 	.word	0x08006179
 8006148:	08006549 	.word	0x08006549
 800614c:	08006549 	.word	0x08006549
 8006150:	08006549 	.word	0x08006549
 8006154:	08006181 	.word	0x08006181
 8006158:	08006549 	.word	0x08006549
 800615c:	08006549 	.word	0x08006549
 8006160:	08006549 	.word	0x08006549
 8006164:	08006189 	.word	0x08006189
 8006168:	08006549 	.word	0x08006549
 800616c:	08006549 	.word	0x08006549
 8006170:	08006549 	.word	0x08006549
 8006174:	08006379 	.word	0x08006379
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006178:	4bb9      	ldr	r3, [pc, #740]	@ (8006460 <HAL_RCC_GetSysClockFreq+0x358>)
 800617a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800617e:	e1e7      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006180:	4bb8      	ldr	r3, [pc, #736]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006186:	e1e3      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006188:	4bb4      	ldr	r3, [pc, #720]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006194:	4bb1      	ldr	r3, [pc, #708]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d071      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a0:	4bae      	ldr	r3, [pc, #696]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	099b      	lsrs	r3, r3, #6
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80061b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061c6:	4622      	mov	r2, r4
 80061c8:	462b      	mov	r3, r5
 80061ca:	f04f 0000 	mov.w	r0, #0
 80061ce:	f04f 0100 	mov.w	r1, #0
 80061d2:	0159      	lsls	r1, r3, #5
 80061d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d8:	0150      	lsls	r0, r2, #5
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4621      	mov	r1, r4
 80061e0:	1a51      	subs	r1, r2, r1
 80061e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80061e4:	4629      	mov	r1, r5
 80061e6:	eb63 0301 	sbc.w	r3, r3, r1
 80061ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80061f8:	4649      	mov	r1, r9
 80061fa:	018b      	lsls	r3, r1, #6
 80061fc:	4641      	mov	r1, r8
 80061fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006202:	4641      	mov	r1, r8
 8006204:	018a      	lsls	r2, r1, #6
 8006206:	4641      	mov	r1, r8
 8006208:	1a51      	subs	r1, r2, r1
 800620a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800620c:	4649      	mov	r1, r9
 800620e:	eb63 0301 	sbc.w	r3, r3, r1
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006220:	4649      	mov	r1, r9
 8006222:	00cb      	lsls	r3, r1, #3
 8006224:	4641      	mov	r1, r8
 8006226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622a:	4641      	mov	r1, r8
 800622c:	00ca      	lsls	r2, r1, #3
 800622e:	4610      	mov	r0, r2
 8006230:	4619      	mov	r1, r3
 8006232:	4603      	mov	r3, r0
 8006234:	4622      	mov	r2, r4
 8006236:	189b      	adds	r3, r3, r2
 8006238:	633b      	str	r3, [r7, #48]	@ 0x30
 800623a:	462b      	mov	r3, r5
 800623c:	460a      	mov	r2, r1
 800623e:	eb42 0303 	adc.w	r3, r2, r3
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006250:	4629      	mov	r1, r5
 8006252:	024b      	lsls	r3, r1, #9
 8006254:	4621      	mov	r1, r4
 8006256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800625a:	4621      	mov	r1, r4
 800625c:	024a      	lsls	r2, r1, #9
 800625e:	4610      	mov	r0, r2
 8006260:	4619      	mov	r1, r3
 8006262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006266:	2200      	movs	r2, #0
 8006268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800626c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006270:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006274:	f7fa fd28 	bl	8000cc8 <__aeabi_uldivmod>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4613      	mov	r3, r2
 800627e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006282:	e067      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006284:	4b75      	ldr	r3, [pc, #468]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	099b      	lsrs	r3, r3, #6
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006290:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006294:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800629e:	2300      	movs	r3, #0
 80062a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80062a6:	4622      	mov	r2, r4
 80062a8:	462b      	mov	r3, r5
 80062aa:	f04f 0000 	mov.w	r0, #0
 80062ae:	f04f 0100 	mov.w	r1, #0
 80062b2:	0159      	lsls	r1, r3, #5
 80062b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b8:	0150      	lsls	r0, r2, #5
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4621      	mov	r1, r4
 80062c0:	1a51      	subs	r1, r2, r1
 80062c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80062c4:	4629      	mov	r1, r5
 80062c6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80062d8:	4649      	mov	r1, r9
 80062da:	018b      	lsls	r3, r1, #6
 80062dc:	4641      	mov	r1, r8
 80062de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062e2:	4641      	mov	r1, r8
 80062e4:	018a      	lsls	r2, r1, #6
 80062e6:	4641      	mov	r1, r8
 80062e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80062ec:	4649      	mov	r1, r9
 80062ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006306:	4692      	mov	sl, r2
 8006308:	469b      	mov	fp, r3
 800630a:	4623      	mov	r3, r4
 800630c:	eb1a 0303 	adds.w	r3, sl, r3
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	462b      	mov	r3, r5
 8006314:	eb4b 0303 	adc.w	r3, fp, r3
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006326:	4629      	mov	r1, r5
 8006328:	028b      	lsls	r3, r1, #10
 800632a:	4621      	mov	r1, r4
 800632c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006330:	4621      	mov	r1, r4
 8006332:	028a      	lsls	r2, r1, #10
 8006334:	4610      	mov	r0, r2
 8006336:	4619      	mov	r1, r3
 8006338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800633c:	2200      	movs	r2, #0
 800633e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006340:	677a      	str	r2, [r7, #116]	@ 0x74
 8006342:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006346:	f7fa fcbf 	bl	8000cc8 <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4613      	mov	r3, r2
 8006350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006354:	4b41      	ldr	r3, [pc, #260]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	0c1b      	lsrs	r3, r3, #16
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	3301      	adds	r3, #1
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800636a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006376:	e0eb      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006378:	4b38      	ldr	r3, [pc, #224]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006384:	4b35      	ldr	r3, [pc, #212]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d06b      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006390:	4b32      	ldr	r3, [pc, #200]	@ (800645c <HAL_RCC_GetSysClockFreq+0x354>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	099b      	lsrs	r3, r3, #6
 8006396:	2200      	movs	r2, #0
 8006398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800639a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800639c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800639e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80063a4:	2300      	movs	r3, #0
 80063a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80063a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	f04f 0000 	mov.w	r0, #0
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	0159      	lsls	r1, r3, #5
 80063ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063be:	0150      	lsls	r0, r2, #5
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4621      	mov	r1, r4
 80063c6:	1a51      	subs	r1, r2, r1
 80063c8:	61b9      	str	r1, [r7, #24]
 80063ca:	4629      	mov	r1, r5
 80063cc:	eb63 0301 	sbc.w	r3, r3, r1
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80063de:	4659      	mov	r1, fp
 80063e0:	018b      	lsls	r3, r1, #6
 80063e2:	4651      	mov	r1, sl
 80063e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063e8:	4651      	mov	r1, sl
 80063ea:	018a      	lsls	r2, r1, #6
 80063ec:	4651      	mov	r1, sl
 80063ee:	ebb2 0801 	subs.w	r8, r2, r1
 80063f2:	4659      	mov	r1, fp
 80063f4:	eb63 0901 	sbc.w	r9, r3, r1
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006404:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006408:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800640c:	4690      	mov	r8, r2
 800640e:	4699      	mov	r9, r3
 8006410:	4623      	mov	r3, r4
 8006412:	eb18 0303 	adds.w	r3, r8, r3
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	462b      	mov	r3, r5
 800641a:	eb49 0303 	adc.w	r3, r9, r3
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800642c:	4629      	mov	r1, r5
 800642e:	024b      	lsls	r3, r1, #9
 8006430:	4621      	mov	r1, r4
 8006432:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006436:	4621      	mov	r1, r4
 8006438:	024a      	lsls	r2, r1, #9
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006442:	2200      	movs	r2, #0
 8006444:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006446:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006448:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800644c:	f7fa fc3c 	bl	8000cc8 <__aeabi_uldivmod>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4613      	mov	r3, r2
 8006456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800645a:	e065      	b.n	8006528 <HAL_RCC_GetSysClockFreq+0x420>
 800645c:	40023800 	.word	0x40023800
 8006460:	00f42400 	.word	0x00f42400
 8006464:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006468:	4b3d      	ldr	r3, [pc, #244]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x458>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	099b      	lsrs	r3, r3, #6
 800646e:	2200      	movs	r2, #0
 8006470:	4618      	mov	r0, r3
 8006472:	4611      	mov	r1, r2
 8006474:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006478:	653b      	str	r3, [r7, #80]	@ 0x50
 800647a:	2300      	movs	r3, #0
 800647c:	657b      	str	r3, [r7, #84]	@ 0x54
 800647e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006482:	4642      	mov	r2, r8
 8006484:	464b      	mov	r3, r9
 8006486:	f04f 0000 	mov.w	r0, #0
 800648a:	f04f 0100 	mov.w	r1, #0
 800648e:	0159      	lsls	r1, r3, #5
 8006490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006494:	0150      	lsls	r0, r2, #5
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4641      	mov	r1, r8
 800649c:	1a51      	subs	r1, r2, r1
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	4649      	mov	r1, r9
 80064a2:	eb63 0301 	sbc.w	r3, r3, r1
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80064b4:	4659      	mov	r1, fp
 80064b6:	018b      	lsls	r3, r1, #6
 80064b8:	4651      	mov	r1, sl
 80064ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064be:	4651      	mov	r1, sl
 80064c0:	018a      	lsls	r2, r1, #6
 80064c2:	4651      	mov	r1, sl
 80064c4:	1a54      	subs	r4, r2, r1
 80064c6:	4659      	mov	r1, fp
 80064c8:	eb63 0501 	sbc.w	r5, r3, r1
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	00eb      	lsls	r3, r5, #3
 80064d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064da:	00e2      	lsls	r2, r4, #3
 80064dc:	4614      	mov	r4, r2
 80064de:	461d      	mov	r5, r3
 80064e0:	4643      	mov	r3, r8
 80064e2:	18e3      	adds	r3, r4, r3
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	464b      	mov	r3, r9
 80064e8:	eb45 0303 	adc.w	r3, r5, r3
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064fa:	4629      	mov	r1, r5
 80064fc:	028b      	lsls	r3, r1, #10
 80064fe:	4621      	mov	r1, r4
 8006500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006504:	4621      	mov	r1, r4
 8006506:	028a      	lsls	r2, r1, #10
 8006508:	4610      	mov	r0, r2
 800650a:	4619      	mov	r1, r3
 800650c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006510:	2200      	movs	r2, #0
 8006512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006514:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006516:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800651a:	f7fa fbd5 	bl	8000cc8 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4613      	mov	r3, r2
 8006524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006528:	4b0d      	ldr	r3, [pc, #52]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x458>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	0f1b      	lsrs	r3, r3, #28
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800653a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006546:	e003      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006548:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <HAL_RCC_GetSysClockFreq+0x45c>)
 800654a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800654e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006554:	4618      	mov	r0, r3
 8006556:	37b8      	adds	r7, #184	@ 0xb8
 8006558:	46bd      	mov	sp, r7
 800655a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655e:	bf00      	nop
 8006560:	40023800 	.word	0x40023800
 8006564:	00f42400 	.word	0x00f42400

08006568 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e28d      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 8083 	beq.w	800668e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006588:	4b94      	ldr	r3, [pc, #592]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 030c 	and.w	r3, r3, #12
 8006590:	2b04      	cmp	r3, #4
 8006592:	d019      	beq.n	80065c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006594:	4b91      	ldr	r3, [pc, #580]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 030c 	and.w	r3, r3, #12
        || \
 800659c:	2b08      	cmp	r3, #8
 800659e:	d106      	bne.n	80065ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80065a0:	4b8e      	ldr	r3, [pc, #568]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ac:	d00c      	beq.n	80065c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ae:	4b8b      	ldr	r3, [pc, #556]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80065b6:	2b0c      	cmp	r3, #12
 80065b8:	d112      	bne.n	80065e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ba:	4b88      	ldr	r3, [pc, #544]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065c6:	d10b      	bne.n	80065e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c8:	4b84      	ldr	r3, [pc, #528]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d05b      	beq.n	800668c <HAL_RCC_OscConfig+0x124>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d157      	bne.n	800668c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e25a      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d106      	bne.n	80065f8 <HAL_RCC_OscConfig+0x90>
 80065ea:	4b7c      	ldr	r3, [pc, #496]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a7b      	ldr	r2, [pc, #492]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e01d      	b.n	8006634 <HAL_RCC_OscConfig+0xcc>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006600:	d10c      	bne.n	800661c <HAL_RCC_OscConfig+0xb4>
 8006602:	4b76      	ldr	r3, [pc, #472]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a75      	ldr	r2, [pc, #468]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	4b73      	ldr	r3, [pc, #460]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a72      	ldr	r2, [pc, #456]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e00b      	b.n	8006634 <HAL_RCC_OscConfig+0xcc>
 800661c:	4b6f      	ldr	r3, [pc, #444]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6e      	ldr	r2, [pc, #440]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	4b6c      	ldr	r3, [pc, #432]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a6b      	ldr	r2, [pc, #428]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800662e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663c:	f7fd f8ce 	bl	80037dc <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006644:	f7fd f8ca 	bl	80037dc <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b64      	cmp	r3, #100	@ 0x64
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e21f      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	4b61      	ldr	r3, [pc, #388]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0xdc>
 8006662:	e014      	b.n	800668e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fd f8ba 	bl	80037dc <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fd f8b6 	bl	80037dc <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	@ 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e20b      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667e:	4b57      	ldr	r3, [pc, #348]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x104>
 800668a:	e000      	b.n	800668e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d06f      	beq.n	800677a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800669a:	4b50      	ldr	r3, [pc, #320]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d017      	beq.n	80066d6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80066a6:	4b4d      	ldr	r3, [pc, #308]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d105      	bne.n	80066be <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80066b2:	4b4a      	ldr	r3, [pc, #296]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066be:	4b47      	ldr	r3, [pc, #284]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d11c      	bne.n	8006704 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ca:	4b44      	ldr	r3, [pc, #272]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d116      	bne.n	8006704 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d6:	4b41      	ldr	r3, [pc, #260]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_RCC_OscConfig+0x186>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d001      	beq.n	80066ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e1d3      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ee:	4b3b      	ldr	r3, [pc, #236]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	4937      	ldr	r1, [pc, #220]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006702:	e03a      	b.n	800677a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d020      	beq.n	800674e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800670c:	4b34      	ldr	r3, [pc, #208]	@ (80067e0 <HAL_RCC_OscConfig+0x278>)
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006712:	f7fd f863 	bl	80037dc <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800671a:	f7fd f85f 	bl	80037dc <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e1b4      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672c:	4b2b      	ldr	r3, [pc, #172]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f0      	beq.n	800671a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006738:	4b28      	ldr	r3, [pc, #160]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4925      	ldr	r1, [pc, #148]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006748:	4313      	orrs	r3, r2
 800674a:	600b      	str	r3, [r1, #0]
 800674c:	e015      	b.n	800677a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674e:	4b24      	ldr	r3, [pc, #144]	@ (80067e0 <HAL_RCC_OscConfig+0x278>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fd f842 	bl	80037dc <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800675c:	f7fd f83e 	bl	80037dc <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e193      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676e:	4b1b      	ldr	r3, [pc, #108]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d036      	beq.n	80067f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <HAL_RCC_OscConfig+0x27c>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006794:	f7fd f822 	bl	80037dc <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679c:	f7fd f81e 	bl	80037dc <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e173      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ae:	4b0b      	ldr	r3, [pc, #44]	@ (80067dc <HAL_RCC_OscConfig+0x274>)
 80067b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0f0      	beq.n	800679c <HAL_RCC_OscConfig+0x234>
 80067ba:	e01b      	b.n	80067f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067bc:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <HAL_RCC_OscConfig+0x27c>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c2:	f7fd f80b 	bl	80037dc <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c8:	e00e      	b.n	80067e8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ca:	f7fd f807 	bl	80037dc <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d907      	bls.n	80067e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e15c      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
 80067dc:	40023800 	.word	0x40023800
 80067e0:	42470000 	.word	0x42470000
 80067e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e8:	4b8a      	ldr	r3, [pc, #552]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80067ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1ea      	bne.n	80067ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8097 	beq.w	8006930 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006806:	4b83      	ldr	r3, [pc, #524]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	4b7f      	ldr	r3, [pc, #508]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 800681c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006820:	6413      	str	r3, [r2, #64]	@ 0x40
 8006822:	4b7c      	ldr	r3, [pc, #496]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006832:	4b79      	ldr	r3, [pc, #484]	@ (8006a18 <HAL_RCC_OscConfig+0x4b0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d118      	bne.n	8006870 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800683e:	4b76      	ldr	r3, [pc, #472]	@ (8006a18 <HAL_RCC_OscConfig+0x4b0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a75      	ldr	r2, [pc, #468]	@ (8006a18 <HAL_RCC_OscConfig+0x4b0>)
 8006844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684a:	f7fc ffc7 	bl	80037dc <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006852:	f7fc ffc3 	bl	80037dc <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e118      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006864:	4b6c      	ldr	r3, [pc, #432]	@ (8006a18 <HAL_RCC_OscConfig+0x4b0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d106      	bne.n	8006886 <HAL_RCC_OscConfig+0x31e>
 8006878:	4b66      	ldr	r3, [pc, #408]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4a65      	ldr	r2, [pc, #404]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	@ 0x70
 8006884:	e01c      	b.n	80068c0 <HAL_RCC_OscConfig+0x358>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b05      	cmp	r3, #5
 800688c:	d10c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x340>
 800688e:	4b61      	ldr	r3, [pc, #388]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006892:	4a60      	ldr	r2, [pc, #384]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006894:	f043 0304 	orr.w	r3, r3, #4
 8006898:	6713      	str	r3, [r2, #112]	@ 0x70
 800689a:	4b5e      	ldr	r3, [pc, #376]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689e:	4a5d      	ldr	r2, [pc, #372]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a6:	e00b      	b.n	80068c0 <HAL_RCC_OscConfig+0x358>
 80068a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ac:	4a59      	ldr	r2, [pc, #356]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80068ae:	f023 0301 	bic.w	r3, r3, #1
 80068b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b4:	4b57      	ldr	r3, [pc, #348]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	4a56      	ldr	r2, [pc, #344]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80068ba:	f023 0304 	bic.w	r3, r3, #4
 80068be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d015      	beq.n	80068f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c8:	f7fc ff88 	bl	80037dc <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ce:	e00a      	b.n	80068e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d0:	f7fc ff84 	bl	80037dc <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e0d7      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0ee      	beq.n	80068d0 <HAL_RCC_OscConfig+0x368>
 80068f2:	e014      	b.n	800691e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f4:	f7fc ff72 	bl	80037dc <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068fa:	e00a      	b.n	8006912 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fc:	f7fc ff6e 	bl	80037dc <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e0c1      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006912:	4b40      	ldr	r3, [pc, #256]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1ee      	bne.n	80068fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d105      	bne.n	8006930 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006924:	4b3b      	ldr	r3, [pc, #236]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	4a3a      	ldr	r2, [pc, #232]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 800692a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800692e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80ad 	beq.w	8006a94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800693a:	4b36      	ldr	r3, [pc, #216]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b08      	cmp	r3, #8
 8006944:	d060      	beq.n	8006a08 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d145      	bne.n	80069da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694e:	4b33      	ldr	r3, [pc, #204]	@ (8006a1c <HAL_RCC_OscConfig+0x4b4>)
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fc ff42 	bl	80037dc <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800695c:	f7fc ff3e 	bl	80037dc <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e093      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696e:	4b29      	ldr	r3, [pc, #164]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f0      	bne.n	800695c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69da      	ldr	r2, [r3, #28]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	3b01      	subs	r3, #1
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	061b      	lsls	r3, r3, #24
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a4:	071b      	lsls	r3, r3, #28
 80069a6:	491b      	ldr	r1, [pc, #108]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ac:	4b1b      	ldr	r3, [pc, #108]	@ (8006a1c <HAL_RCC_OscConfig+0x4b4>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b2:	f7fc ff13 	bl	80037dc <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ba:	f7fc ff0f 	bl	80037dc <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e064      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069cc:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f0      	beq.n	80069ba <HAL_RCC_OscConfig+0x452>
 80069d8:	e05c      	b.n	8006a94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069da:	4b10      	ldr	r3, [pc, #64]	@ (8006a1c <HAL_RCC_OscConfig+0x4b4>)
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fc fefc 	bl	80037dc <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e8:	f7fc fef8 	bl	80037dc <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e04d      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fa:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <HAL_RCC_OscConfig+0x4ac>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f0      	bne.n	80069e8 <HAL_RCC_OscConfig+0x480>
 8006a06:	e045      	b.n	8006a94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e040      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
 8006a14:	40023800 	.word	0x40023800
 8006a18:	40007000 	.word	0x40007000
 8006a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a20:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <HAL_RCC_OscConfig+0x538>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d030      	beq.n	8006a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d129      	bne.n	8006a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d122      	bne.n	8006a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a50:	4013      	ands	r3, r2
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d119      	bne.n	8006a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d10f      	bne.n	8006a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023800 	.word	0x40023800

08006aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e041      	b.n	8006b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fc f9e0 	bl	8002e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f000 fc9a 	bl	800741c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e041      	b.n	8006bd8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fc faf1 	bl	8003150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f000 fc4b 	bl	800741c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <HAL_TIM_PWM_Start+0x24>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	bf14      	ite	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2300      	moveq	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e022      	b.n	8006c4a <HAL_TIM_PWM_Start+0x6a>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d109      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x3e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	bf14      	ite	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	2300      	moveq	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	e015      	b.n	8006c4a <HAL_TIM_PWM_Start+0x6a>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d109      	bne.n	8006c38 <HAL_TIM_PWM_Start+0x58>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	e008      	b.n	8006c4a <HAL_TIM_PWM_Start+0x6a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e07c      	b.n	8006d4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_PWM_Start+0x82>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c60:	e013      	b.n	8006c8a <HAL_TIM_PWM_Start+0xaa>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_PWM_Start+0x92>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c70:	e00b      	b.n	8006c8a <HAL_TIM_PWM_Start+0xaa>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_PWM_Start+0xa2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c80:	e003      	b.n	8006c8a <HAL_TIM_PWM_Start+0xaa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 feb8 	bl	8007a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d54 <HAL_TIM_PWM_Start+0x174>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <HAL_TIM_PWM_Start+0xcc>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d58 <HAL_TIM_PWM_Start+0x178>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIM_PWM_Start+0xd0>
 8006cac:	2301      	movs	r3, #1
 8006cae:	e000      	b.n	8006cb2 <HAL_TIM_PWM_Start+0xd2>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d007      	beq.n	8006cc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a22      	ldr	r2, [pc, #136]	@ (8006d54 <HAL_TIM_PWM_Start+0x174>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d022      	beq.n	8006d16 <HAL_TIM_PWM_Start+0x136>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd8:	d01d      	beq.n	8006d16 <HAL_TIM_PWM_Start+0x136>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <HAL_TIM_PWM_Start+0x17c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <HAL_TIM_PWM_Start+0x136>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <HAL_TIM_PWM_Start+0x180>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_TIM_PWM_Start+0x136>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <HAL_TIM_PWM_Start+0x184>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_TIM_PWM_Start+0x136>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	@ (8006d58 <HAL_TIM_PWM_Start+0x178>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_TIM_PWM_Start+0x136>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <HAL_TIM_PWM_Start+0x188>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_TIM_PWM_Start+0x136>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a16      	ldr	r2, [pc, #88]	@ (8006d6c <HAL_TIM_PWM_Start+0x18c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d111      	bne.n	8006d3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	d010      	beq.n	8006d4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d38:	e007      	b.n	8006d4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0201 	orr.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40010400 	.word	0x40010400
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40001800 	.word	0x40001800

08006d70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e097      	b.n	8006eb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d106      	bne.n	8006d9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fc f909 	bl	8002fb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6812      	ldr	r2, [r2, #0]
 8006db0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006db4:	f023 0307 	bic.w	r3, r3, #7
 8006db8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f000 fb29 	bl	800741c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	4313      	orrs	r3, r2
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e10:	f023 030c 	bic.w	r3, r3, #12
 8006e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	011a      	lsls	r2, r3, #4
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	031b      	lsls	r3, r3, #12
 8006e40:	4313      	orrs	r3, r2
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	4313      	orrs	r3, r2
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ecc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ed4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006edc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ee4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d110      	bne.n	8006f0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d102      	bne.n	8006ef8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ef2:	7b7b      	ldrb	r3, [r7, #13]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d001      	beq.n	8006efc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e069      	b.n	8006fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f0c:	e031      	b.n	8006f72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d110      	bne.n	8006f36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d102      	bne.n	8006f20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f1a:	7b3b      	ldrb	r3, [r7, #12]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d001      	beq.n	8006f24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e055      	b.n	8006fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f34:	e01d      	b.n	8006f72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d108      	bne.n	8006f4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d105      	bne.n	8006f4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f42:	7b7b      	ldrb	r3, [r7, #13]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d102      	bne.n	8006f4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f48:	7b3b      	ldrb	r3, [r7, #12]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d001      	beq.n	8006f52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e03e      	b.n	8006fd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_TIM_Encoder_Start+0xc4>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d008      	beq.n	8006f90 <HAL_TIM_Encoder_Start+0xd4>
 8006f7e:	e00f      	b.n	8006fa0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2201      	movs	r2, #1
 8006f86:	2100      	movs	r1, #0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fd3d 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 8006f8e:	e016      	b.n	8006fbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	2104      	movs	r1, #4
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fd35 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 8006f9e:	e00e      	b.n	8006fbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fd2d 	bl	8007a08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	2104      	movs	r1, #4
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fd26 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 8006fbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0201 	orr.w	r2, r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <HAL_TIM_Encoder_Stop+0x18>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d008      	beq.n	8007000 <HAL_TIM_Encoder_Stop+0x28>
 8006fee:	e00f      	b.n	8007010 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fd05 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 8006ffe:	e016      	b.n	800702e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2200      	movs	r2, #0
 8007006:	2104      	movs	r1, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fcfd 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 800700e:	e00e      	b.n	800702e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2200      	movs	r2, #0
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fcf5 	bl	8007a08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2200      	movs	r2, #0
 8007024:	2104      	movs	r1, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fcee 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 800702c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007038:	4013      	ands	r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10f      	bne.n	800705e <HAL_TIM_Encoder_Stop+0x86>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a1a      	ldr	r2, [r3, #32]
 8007044:	f240 4344 	movw	r3, #1092	@ 0x444
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d107      	bne.n	800705e <HAL_TIM_Encoder_Stop+0x86>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_TIM_Encoder_Stop+0x92>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b04      	cmp	r3, #4
 8007068:	d138      	bne.n	80070dc <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <HAL_TIM_Encoder_Stop+0xa2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007078:	e013      	b.n	80070a2 <HAL_TIM_Encoder_Stop+0xca>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b04      	cmp	r3, #4
 800707e:	d104      	bne.n	800708a <HAL_TIM_Encoder_Stop+0xb2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007088:	e00b      	b.n	80070a2 <HAL_TIM_Encoder_Stop+0xca>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d104      	bne.n	800709a <HAL_TIM_Encoder_Stop+0xc2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007098:	e003      	b.n	80070a2 <HAL_TIM_Encoder_Stop+0xca>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_Encoder_Stop+0xda>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070b0:	e024      	b.n	80070fc <HAL_TIM_Encoder_Stop+0x124>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d104      	bne.n	80070c2 <HAL_TIM_Encoder_Stop+0xea>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070c0:	e01c      	b.n	80070fc <HAL_TIM_Encoder_Stop+0x124>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d104      	bne.n	80070d2 <HAL_TIM_Encoder_Stop+0xfa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d0:	e014      	b.n	80070fc <HAL_TIM_Encoder_Stop+0x124>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070da:	e00f      	b.n	80070fc <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007122:	2302      	movs	r3, #2
 8007124:	e0ae      	b.n	8007284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b0c      	cmp	r3, #12
 8007132:	f200 809f 	bhi.w	8007274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007136:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007171 	.word	0x08007171
 8007140:	08007275 	.word	0x08007275
 8007144:	08007275 	.word	0x08007275
 8007148:	08007275 	.word	0x08007275
 800714c:	080071b1 	.word	0x080071b1
 8007150:	08007275 	.word	0x08007275
 8007154:	08007275 	.word	0x08007275
 8007158:	08007275 	.word	0x08007275
 800715c:	080071f3 	.word	0x080071f3
 8007160:	08007275 	.word	0x08007275
 8007164:	08007275 	.word	0x08007275
 8007168:	08007275 	.word	0x08007275
 800716c:	08007233 	.word	0x08007233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f9fc 	bl	8007574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0208 	orr.w	r2, r2, #8
 800718a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0204 	bic.w	r2, r2, #4
 800719a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6999      	ldr	r1, [r3, #24]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	619a      	str	r2, [r3, #24]
      break;
 80071ae:	e064      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68b9      	ldr	r1, [r7, #8]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fa4c 	bl	8007654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6999      	ldr	r1, [r3, #24]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	021a      	lsls	r2, r3, #8
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	619a      	str	r2, [r3, #24]
      break;
 80071f0:	e043      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 faa1 	bl	8007740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0208 	orr.w	r2, r2, #8
 800720c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0204 	bic.w	r2, r2, #4
 800721c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69d9      	ldr	r1, [r3, #28]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	61da      	str	r2, [r3, #28]
      break;
 8007230:	e023      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 faf5 	bl	8007828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800724c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800725c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69d9      	ldr	r1, [r3, #28]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	021a      	lsls	r2, r3, #8
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	61da      	str	r2, [r3, #28]
      break;
 8007272:	e002      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	75fb      	strb	r3, [r7, #23]
      break;
 8007278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIM_ConfigClockSource+0x1c>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e0b4      	b.n	8007412 <HAL_TIM_ConfigClockSource+0x186>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e0:	d03e      	beq.n	8007360 <HAL_TIM_ConfigClockSource+0xd4>
 80072e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e6:	f200 8087 	bhi.w	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 80072ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ee:	f000 8086 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x172>
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f6:	d87f      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f8:	2b70      	cmp	r3, #112	@ 0x70
 80072fa:	d01a      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0xa6>
 80072fc:	2b70      	cmp	r3, #112	@ 0x70
 80072fe:	d87b      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b60      	cmp	r3, #96	@ 0x60
 8007302:	d050      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007304:	2b60      	cmp	r3, #96	@ 0x60
 8007306:	d877      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b50      	cmp	r3, #80	@ 0x50
 800730a:	d03c      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0xfa>
 800730c:	2b50      	cmp	r3, #80	@ 0x50
 800730e:	d873      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b40      	cmp	r3, #64	@ 0x40
 8007312:	d058      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007314:	2b40      	cmp	r3, #64	@ 0x40
 8007316:	d86f      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b30      	cmp	r3, #48	@ 0x30
 800731a:	d064      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 800731c:	2b30      	cmp	r3, #48	@ 0x30
 800731e:	d86b      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d060      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d867      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d05c      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	2b10      	cmp	r3, #16
 800732e:	d05a      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007330:	e062      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007342:	f000 fb41 	bl	80079c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	609a      	str	r2, [r3, #8]
      break;
 800735e:	e04f      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007370:	f000 fb2a 	bl	80079c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007382:	609a      	str	r2, [r3, #8]
      break;
 8007384:	e03c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007392:	461a      	mov	r2, r3
 8007394:	f000 fa9e 	bl	80078d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2150      	movs	r1, #80	@ 0x50
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 faf7 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80073a4:	e02c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b2:	461a      	mov	r2, r3
 80073b4:	f000 fabd 	bl	8007932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2160      	movs	r1, #96	@ 0x60
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fae7 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80073c4:	e01c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d2:	461a      	mov	r2, r3
 80073d4:	f000 fa7e 	bl	80078d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2140      	movs	r1, #64	@ 0x40
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fad7 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80073e4:	e00c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f000 face 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80073f6:	e003      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
      break;
 80073fc:	e000      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a46      	ldr	r2, [pc, #280]	@ (8007548 <TIM_Base_SetConfig+0x12c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d013      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743a:	d00f      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a43      	ldr	r2, [pc, #268]	@ (800754c <TIM_Base_SetConfig+0x130>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00b      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a42      	ldr	r2, [pc, #264]	@ (8007550 <TIM_Base_SetConfig+0x134>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a41      	ldr	r2, [pc, #260]	@ (8007554 <TIM_Base_SetConfig+0x138>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a40      	ldr	r2, [pc, #256]	@ (8007558 <TIM_Base_SetConfig+0x13c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d108      	bne.n	800746e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a35      	ldr	r2, [pc, #212]	@ (8007548 <TIM_Base_SetConfig+0x12c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d02b      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747c:	d027      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a32      	ldr	r2, [pc, #200]	@ (800754c <TIM_Base_SetConfig+0x130>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d023      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a31      	ldr	r2, [pc, #196]	@ (8007550 <TIM_Base_SetConfig+0x134>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d01f      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a30      	ldr	r2, [pc, #192]	@ (8007554 <TIM_Base_SetConfig+0x138>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01b      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2f      	ldr	r2, [pc, #188]	@ (8007558 <TIM_Base_SetConfig+0x13c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d017      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2e      	ldr	r2, [pc, #184]	@ (800755c <TIM_Base_SetConfig+0x140>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d013      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007560 <TIM_Base_SetConfig+0x144>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00f      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007564 <TIM_Base_SetConfig+0x148>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00b      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007568 <TIM_Base_SetConfig+0x14c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d007      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2a      	ldr	r2, [pc, #168]	@ (800756c <TIM_Base_SetConfig+0x150>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d003      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a29      	ldr	r2, [pc, #164]	@ (8007570 <TIM_Base_SetConfig+0x154>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d108      	bne.n	80074e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a10      	ldr	r2, [pc, #64]	@ (8007548 <TIM_Base_SetConfig+0x12c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_Base_SetConfig+0xf8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a12      	ldr	r2, [pc, #72]	@ (8007558 <TIM_Base_SetConfig+0x13c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d103      	bne.n	800751c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b01      	cmp	r3, #1
 800752c:	d105      	bne.n	800753a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f023 0201 	bic.w	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	611a      	str	r2, [r3, #16]
  }
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40010400 	.word	0x40010400
 800755c:	40014000 	.word	0x40014000
 8007560:	40014400 	.word	0x40014400
 8007564:	40014800 	.word	0x40014800
 8007568:	40001800 	.word	0x40001800
 800756c:	40001c00 	.word	0x40001c00
 8007570:	40002000 	.word	0x40002000

08007574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f023 0201 	bic.w	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 0302 	bic.w	r3, r3, #2
 80075bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a20      	ldr	r2, [pc, #128]	@ (800764c <TIM_OC1_SetConfig+0xd8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_OC1_SetConfig+0x64>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10c      	bne.n	80075f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0308 	bic.w	r3, r3, #8
 80075de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0304 	bic.w	r3, r3, #4
 80075f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a15      	ldr	r2, [pc, #84]	@ (800764c <TIM_OC1_SetConfig+0xd8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_OC1_SetConfig+0x8e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d111      	bne.n	8007626 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	621a      	str	r2, [r3, #32]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f023 0210 	bic.w	r2, r3, #16
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800768a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0320 	bic.w	r3, r3, #32
 800769e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a22      	ldr	r2, [pc, #136]	@ (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC2_SetConfig+0x68>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a21      	ldr	r2, [pc, #132]	@ (800773c <TIM_OC2_SetConfig+0xe8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10d      	bne.n	80076d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a17      	ldr	r2, [pc, #92]	@ (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC2_SetConfig+0x94>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	@ (800773c <TIM_OC2_SetConfig+0xe8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d113      	bne.n	8007710 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400

08007740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a21      	ldr	r2, [pc, #132]	@ (8007820 <TIM_OC3_SetConfig+0xe0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d003      	beq.n	80077a6 <TIM_OC3_SetConfig+0x66>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a20      	ldr	r2, [pc, #128]	@ (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d10d      	bne.n	80077c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a16      	ldr	r2, [pc, #88]	@ (8007820 <TIM_OC3_SetConfig+0xe0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_OC3_SetConfig+0x92>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a15      	ldr	r2, [pc, #84]	@ (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d113      	bne.n	80077fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	621a      	str	r2, [r3, #32]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	40010000 	.word	0x40010000
 8007824:	40010400 	.word	0x40010400

08007828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800785e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	031b      	lsls	r3, r3, #12
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a12      	ldr	r2, [pc, #72]	@ (80078cc <TIM_OC4_SetConfig+0xa4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_OC4_SetConfig+0x68>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a11      	ldr	r2, [pc, #68]	@ (80078d0 <TIM_OC4_SetConfig+0xa8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d109      	bne.n	80078a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f023 030a 	bic.w	r3, r3, #10
 8007910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	f023 0210 	bic.w	r2, r3, #16
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800795c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	031b      	lsls	r3, r3, #12
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800796e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f043 0307 	orr.w	r3, r3, #7
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	609a      	str	r2, [r3, #8]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	609a      	str	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a40:	431a      	orrs	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e05a      	b.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d022      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab8:	d01d      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d018      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00e      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d009      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10c      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800
 8007b3c:	40000c00 	.word	0x40000c00
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40001800 	.word	0x40001800

08007b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e03d      	b.n	8007be4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e042      	b.n	8007c88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fb fc08 	bl	800342c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2224      	movs	r2, #36	@ 0x24
 8007c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f973 	bl	8007f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695a      	ldr	r2, [r3, #20]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	@ 0x28
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d175      	bne.n	8007d9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_UART_Transmit+0x2c>
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e06e      	b.n	8007d9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2221      	movs	r2, #33	@ 0x21
 8007cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cce:	f7fb fd85 	bl	80037dc <HAL_GetTick>
 8007cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	88fa      	ldrh	r2, [r7, #6]
 8007cde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce8:	d108      	bne.n	8007cfc <HAL_UART_Transmit+0x6c>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e003      	b.n	8007d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d04:	e02e      	b.n	8007d64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2180      	movs	r1, #128	@ 0x80
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f848 	bl	8007da6 <UART_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e03a      	b.n	8007d9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	3302      	adds	r3, #2
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e007      	b.n	8007d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	781a      	ldrb	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3301      	adds	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1cb      	bne.n	8007d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2200      	movs	r2, #0
 8007d76:	2140      	movs	r1, #64	@ 0x40
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f814 	bl	8007da6 <UART_WaitOnFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e006      	b.n	8007d9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e000      	b.n	8007d9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007d9c:	2302      	movs	r3, #2
  }
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3720      	adds	r7, #32
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db6:	e03b      	b.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbe:	d037      	beq.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc0:	f7fb fd0c 	bl	80037dc <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d302      	bcc.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e03a      	b.n	8007e50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d023      	beq.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b80      	cmp	r3, #128	@ 0x80
 8007dec:	d020      	beq.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b40      	cmp	r3, #64	@ 0x40
 8007df2:	d01d      	beq.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0308 	and.w	r3, r3, #8
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d116      	bne.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f81d 	bl	8007e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2208      	movs	r2, #8
 8007e22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e00f      	b.n	8007e50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	bf0c      	ite	eq
 8007e40:	2301      	moveq	r3, #1
 8007e42:	2300      	movne	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	461a      	mov	r2, r3
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d0b4      	beq.n	8007db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b095      	sub	sp, #84	@ 0x54
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e80:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e5      	bne.n	8007e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3314      	adds	r3, #20
 8007e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3314      	adds	r3, #20
 8007eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e5      	bne.n	8007e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d119      	bne.n	8007f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ef0:	61ba      	str	r2, [r7, #24]
 8007ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	6979      	ldr	r1, [r7, #20]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	613b      	str	r3, [r7, #16]
   return(result);
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e5      	bne.n	8007ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f12:	bf00      	nop
 8007f14:	3754      	adds	r7, #84	@ 0x54
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f24:	b0c0      	sub	sp, #256	@ 0x100
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3c:	68d9      	ldr	r1, [r3, #12]
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	ea40 0301 	orr.w	r3, r0, r1
 8007f48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f78:	f021 010c 	bic.w	r1, r1, #12
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f86:	430b      	orrs	r3, r1
 8007f88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f9a:	6999      	ldr	r1, [r3, #24]
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	ea40 0301 	orr.w	r3, r0, r1
 8007fa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4b8f      	ldr	r3, [pc, #572]	@ (80081ec <UART_SetConfig+0x2cc>)
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d005      	beq.n	8007fc0 <UART_SetConfig+0xa0>
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	4b8d      	ldr	r3, [pc, #564]	@ (80081f0 <UART_SetConfig+0x2d0>)
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d104      	bne.n	8007fca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fc0:	f7fe f88e 	bl	80060e0 <HAL_RCC_GetPCLK2Freq>
 8007fc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007fc8:	e003      	b.n	8007fd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fca:	f7fe f875 	bl	80060b8 <HAL_RCC_GetPCLK1Freq>
 8007fce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fdc:	f040 810c 	bne.w	80081f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007fee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	462b      	mov	r3, r5
 8007ff6:	1891      	adds	r1, r2, r2
 8007ff8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ffa:	415b      	adcs	r3, r3
 8007ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ffe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008002:	4621      	mov	r1, r4
 8008004:	eb12 0801 	adds.w	r8, r2, r1
 8008008:	4629      	mov	r1, r5
 800800a:	eb43 0901 	adc.w	r9, r3, r1
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800801a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800801e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008022:	4690      	mov	r8, r2
 8008024:	4699      	mov	r9, r3
 8008026:	4623      	mov	r3, r4
 8008028:	eb18 0303 	adds.w	r3, r8, r3
 800802c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008030:	462b      	mov	r3, r5
 8008032:	eb49 0303 	adc.w	r3, r9, r3
 8008036:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800803a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008046:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800804a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800804e:	460b      	mov	r3, r1
 8008050:	18db      	adds	r3, r3, r3
 8008052:	653b      	str	r3, [r7, #80]	@ 0x50
 8008054:	4613      	mov	r3, r2
 8008056:	eb42 0303 	adc.w	r3, r2, r3
 800805a:	657b      	str	r3, [r7, #84]	@ 0x54
 800805c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008060:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008064:	f7f8 fe30 	bl	8000cc8 <__aeabi_uldivmod>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4b61      	ldr	r3, [pc, #388]	@ (80081f4 <UART_SetConfig+0x2d4>)
 800806e:	fba3 2302 	umull	r2, r3, r3, r2
 8008072:	095b      	lsrs	r3, r3, #5
 8008074:	011c      	lsls	r4, r3, #4
 8008076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800807a:	2200      	movs	r2, #0
 800807c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008080:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008084:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008088:	4642      	mov	r2, r8
 800808a:	464b      	mov	r3, r9
 800808c:	1891      	adds	r1, r2, r2
 800808e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008090:	415b      	adcs	r3, r3
 8008092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008094:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008098:	4641      	mov	r1, r8
 800809a:	eb12 0a01 	adds.w	sl, r2, r1
 800809e:	4649      	mov	r1, r9
 80080a0:	eb43 0b01 	adc.w	fp, r3, r1
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	f04f 0300 	mov.w	r3, #0
 80080ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080b8:	4692      	mov	sl, r2
 80080ba:	469b      	mov	fp, r3
 80080bc:	4643      	mov	r3, r8
 80080be:	eb1a 0303 	adds.w	r3, sl, r3
 80080c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080c6:	464b      	mov	r3, r9
 80080c8:	eb4b 0303 	adc.w	r3, fp, r3
 80080cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80080e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80080e4:	460b      	mov	r3, r1
 80080e6:	18db      	adds	r3, r3, r3
 80080e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ea:	4613      	mov	r3, r2
 80080ec:	eb42 0303 	adc.w	r3, r2, r3
 80080f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080fa:	f7f8 fde5 	bl	8000cc8 <__aeabi_uldivmod>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4611      	mov	r1, r2
 8008104:	4b3b      	ldr	r3, [pc, #236]	@ (80081f4 <UART_SetConfig+0x2d4>)
 8008106:	fba3 2301 	umull	r2, r3, r3, r1
 800810a:	095b      	lsrs	r3, r3, #5
 800810c:	2264      	movs	r2, #100	@ 0x64
 800810e:	fb02 f303 	mul.w	r3, r2, r3
 8008112:	1acb      	subs	r3, r1, r3
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800811a:	4b36      	ldr	r3, [pc, #216]	@ (80081f4 <UART_SetConfig+0x2d4>)
 800811c:	fba3 2302 	umull	r2, r3, r3, r2
 8008120:	095b      	lsrs	r3, r3, #5
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008128:	441c      	add	r4, r3
 800812a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800812e:	2200      	movs	r2, #0
 8008130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008134:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008138:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800813c:	4642      	mov	r2, r8
 800813e:	464b      	mov	r3, r9
 8008140:	1891      	adds	r1, r2, r2
 8008142:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008144:	415b      	adcs	r3, r3
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008148:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800814c:	4641      	mov	r1, r8
 800814e:	1851      	adds	r1, r2, r1
 8008150:	6339      	str	r1, [r7, #48]	@ 0x30
 8008152:	4649      	mov	r1, r9
 8008154:	414b      	adcs	r3, r1
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008164:	4659      	mov	r1, fp
 8008166:	00cb      	lsls	r3, r1, #3
 8008168:	4651      	mov	r1, sl
 800816a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800816e:	4651      	mov	r1, sl
 8008170:	00ca      	lsls	r2, r1, #3
 8008172:	4610      	mov	r0, r2
 8008174:	4619      	mov	r1, r3
 8008176:	4603      	mov	r3, r0
 8008178:	4642      	mov	r2, r8
 800817a:	189b      	adds	r3, r3, r2
 800817c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008180:	464b      	mov	r3, r9
 8008182:	460a      	mov	r2, r1
 8008184:	eb42 0303 	adc.w	r3, r2, r3
 8008188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800818c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008198:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800819c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80081a0:	460b      	mov	r3, r1
 80081a2:	18db      	adds	r3, r3, r3
 80081a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081a6:	4613      	mov	r3, r2
 80081a8:	eb42 0303 	adc.w	r3, r2, r3
 80081ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80081b6:	f7f8 fd87 	bl	8000cc8 <__aeabi_uldivmod>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4b0d      	ldr	r3, [pc, #52]	@ (80081f4 <UART_SetConfig+0x2d4>)
 80081c0:	fba3 1302 	umull	r1, r3, r3, r2
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	2164      	movs	r1, #100	@ 0x64
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	3332      	adds	r3, #50	@ 0x32
 80081d2:	4a08      	ldr	r2, [pc, #32]	@ (80081f4 <UART_SetConfig+0x2d4>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	f003 0207 	and.w	r2, r3, #7
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4422      	add	r2, r4
 80081e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081e8:	e106      	b.n	80083f8 <UART_SetConfig+0x4d8>
 80081ea:	bf00      	nop
 80081ec:	40011000 	.word	0x40011000
 80081f0:	40011400 	.word	0x40011400
 80081f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008202:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008206:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800820a:	4642      	mov	r2, r8
 800820c:	464b      	mov	r3, r9
 800820e:	1891      	adds	r1, r2, r2
 8008210:	6239      	str	r1, [r7, #32]
 8008212:	415b      	adcs	r3, r3
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
 8008216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800821a:	4641      	mov	r1, r8
 800821c:	1854      	adds	r4, r2, r1
 800821e:	4649      	mov	r1, r9
 8008220:	eb43 0501 	adc.w	r5, r3, r1
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	00eb      	lsls	r3, r5, #3
 800822e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008232:	00e2      	lsls	r2, r4, #3
 8008234:	4614      	mov	r4, r2
 8008236:	461d      	mov	r5, r3
 8008238:	4643      	mov	r3, r8
 800823a:	18e3      	adds	r3, r4, r3
 800823c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008240:	464b      	mov	r3, r9
 8008242:	eb45 0303 	adc.w	r3, r5, r3
 8008246:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008256:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008266:	4629      	mov	r1, r5
 8008268:	008b      	lsls	r3, r1, #2
 800826a:	4621      	mov	r1, r4
 800826c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008270:	4621      	mov	r1, r4
 8008272:	008a      	lsls	r2, r1, #2
 8008274:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008278:	f7f8 fd26 	bl	8000cc8 <__aeabi_uldivmod>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4b60      	ldr	r3, [pc, #384]	@ (8008404 <UART_SetConfig+0x4e4>)
 8008282:	fba3 2302 	umull	r2, r3, r3, r2
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	011c      	lsls	r4, r3, #4
 800828a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800828e:	2200      	movs	r2, #0
 8008290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008294:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008298:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800829c:	4642      	mov	r2, r8
 800829e:	464b      	mov	r3, r9
 80082a0:	1891      	adds	r1, r2, r2
 80082a2:	61b9      	str	r1, [r7, #24]
 80082a4:	415b      	adcs	r3, r3
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082ac:	4641      	mov	r1, r8
 80082ae:	1851      	adds	r1, r2, r1
 80082b0:	6139      	str	r1, [r7, #16]
 80082b2:	4649      	mov	r1, r9
 80082b4:	414b      	adcs	r3, r1
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	f04f 0200 	mov.w	r2, #0
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082c4:	4659      	mov	r1, fp
 80082c6:	00cb      	lsls	r3, r1, #3
 80082c8:	4651      	mov	r1, sl
 80082ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ce:	4651      	mov	r1, sl
 80082d0:	00ca      	lsls	r2, r1, #3
 80082d2:	4610      	mov	r0, r2
 80082d4:	4619      	mov	r1, r3
 80082d6:	4603      	mov	r3, r0
 80082d8:	4642      	mov	r2, r8
 80082da:	189b      	adds	r3, r3, r2
 80082dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082e0:	464b      	mov	r3, r9
 80082e2:	460a      	mov	r2, r1
 80082e4:	eb42 0303 	adc.w	r3, r2, r3
 80082e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008304:	4649      	mov	r1, r9
 8008306:	008b      	lsls	r3, r1, #2
 8008308:	4641      	mov	r1, r8
 800830a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800830e:	4641      	mov	r1, r8
 8008310:	008a      	lsls	r2, r1, #2
 8008312:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008316:	f7f8 fcd7 	bl	8000cc8 <__aeabi_uldivmod>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4611      	mov	r1, r2
 8008320:	4b38      	ldr	r3, [pc, #224]	@ (8008404 <UART_SetConfig+0x4e4>)
 8008322:	fba3 2301 	umull	r2, r3, r3, r1
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2264      	movs	r2, #100	@ 0x64
 800832a:	fb02 f303 	mul.w	r3, r2, r3
 800832e:	1acb      	subs	r3, r1, r3
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	3332      	adds	r3, #50	@ 0x32
 8008334:	4a33      	ldr	r2, [pc, #204]	@ (8008404 <UART_SetConfig+0x4e4>)
 8008336:	fba2 2303 	umull	r2, r3, r2, r3
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008340:	441c      	add	r4, r3
 8008342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008346:	2200      	movs	r2, #0
 8008348:	673b      	str	r3, [r7, #112]	@ 0x70
 800834a:	677a      	str	r2, [r7, #116]	@ 0x74
 800834c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	1891      	adds	r1, r2, r2
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	415b      	adcs	r3, r3
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008360:	4641      	mov	r1, r8
 8008362:	1851      	adds	r1, r2, r1
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	4649      	mov	r1, r9
 8008368:	414b      	adcs	r3, r1
 800836a:	607b      	str	r3, [r7, #4]
 800836c:	f04f 0200 	mov.w	r2, #0
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008378:	4659      	mov	r1, fp
 800837a:	00cb      	lsls	r3, r1, #3
 800837c:	4651      	mov	r1, sl
 800837e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008382:	4651      	mov	r1, sl
 8008384:	00ca      	lsls	r2, r1, #3
 8008386:	4610      	mov	r0, r2
 8008388:	4619      	mov	r1, r3
 800838a:	4603      	mov	r3, r0
 800838c:	4642      	mov	r2, r8
 800838e:	189b      	adds	r3, r3, r2
 8008390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008392:	464b      	mov	r3, r9
 8008394:	460a      	mov	r2, r1
 8008396:	eb42 0303 	adc.w	r3, r2, r3
 800839a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80083a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80083b4:	4649      	mov	r1, r9
 80083b6:	008b      	lsls	r3, r1, #2
 80083b8:	4641      	mov	r1, r8
 80083ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083be:	4641      	mov	r1, r8
 80083c0:	008a      	lsls	r2, r1, #2
 80083c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80083c6:	f7f8 fc7f 	bl	8000cc8 <__aeabi_uldivmod>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008404 <UART_SetConfig+0x4e4>)
 80083d0:	fba3 1302 	umull	r1, r3, r3, r2
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	2164      	movs	r1, #100	@ 0x64
 80083d8:	fb01 f303 	mul.w	r3, r1, r3
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	3332      	adds	r3, #50	@ 0x32
 80083e2:	4a08      	ldr	r2, [pc, #32]	@ (8008404 <UART_SetConfig+0x4e4>)
 80083e4:	fba2 2303 	umull	r2, r3, r2, r3
 80083e8:	095b      	lsrs	r3, r3, #5
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4422      	add	r2, r4
 80083f6:	609a      	str	r2, [r3, #8]
}
 80083f8:	bf00      	nop
 80083fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083fe:	46bd      	mov	sp, r7
 8008400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008404:	51eb851f 	.word	0x51eb851f

08008408 <__cvt>:
 8008408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	ec57 6b10 	vmov	r6, r7, d0
 8008410:	2f00      	cmp	r7, #0
 8008412:	460c      	mov	r4, r1
 8008414:	4619      	mov	r1, r3
 8008416:	463b      	mov	r3, r7
 8008418:	bfbb      	ittet	lt
 800841a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800841e:	461f      	movlt	r7, r3
 8008420:	2300      	movge	r3, #0
 8008422:	232d      	movlt	r3, #45	@ 0x2d
 8008424:	700b      	strb	r3, [r1, #0]
 8008426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008428:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800842c:	4691      	mov	r9, r2
 800842e:	f023 0820 	bic.w	r8, r3, #32
 8008432:	bfbc      	itt	lt
 8008434:	4632      	movlt	r2, r6
 8008436:	4616      	movlt	r6, r2
 8008438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800843c:	d005      	beq.n	800844a <__cvt+0x42>
 800843e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008442:	d100      	bne.n	8008446 <__cvt+0x3e>
 8008444:	3401      	adds	r4, #1
 8008446:	2102      	movs	r1, #2
 8008448:	e000      	b.n	800844c <__cvt+0x44>
 800844a:	2103      	movs	r1, #3
 800844c:	ab03      	add	r3, sp, #12
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	ab02      	add	r3, sp, #8
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	ec47 6b10 	vmov	d0, r6, r7
 8008458:	4653      	mov	r3, sl
 800845a:	4622      	mov	r2, r4
 800845c:	f001 f978 	bl	8009750 <_dtoa_r>
 8008460:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008464:	4605      	mov	r5, r0
 8008466:	d119      	bne.n	800849c <__cvt+0x94>
 8008468:	f019 0f01 	tst.w	r9, #1
 800846c:	d00e      	beq.n	800848c <__cvt+0x84>
 800846e:	eb00 0904 	add.w	r9, r0, r4
 8008472:	2200      	movs	r2, #0
 8008474:	2300      	movs	r3, #0
 8008476:	4630      	mov	r0, r6
 8008478:	4639      	mov	r1, r7
 800847a:	f7f8 fb45 	bl	8000b08 <__aeabi_dcmpeq>
 800847e:	b108      	cbz	r0, 8008484 <__cvt+0x7c>
 8008480:	f8cd 900c 	str.w	r9, [sp, #12]
 8008484:	2230      	movs	r2, #48	@ 0x30
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	454b      	cmp	r3, r9
 800848a:	d31e      	bcc.n	80084ca <__cvt+0xc2>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008490:	1b5b      	subs	r3, r3, r5
 8008492:	4628      	mov	r0, r5
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	b004      	add	sp, #16
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084a0:	eb00 0904 	add.w	r9, r0, r4
 80084a4:	d1e5      	bne.n	8008472 <__cvt+0x6a>
 80084a6:	7803      	ldrb	r3, [r0, #0]
 80084a8:	2b30      	cmp	r3, #48	@ 0x30
 80084aa:	d10a      	bne.n	80084c2 <__cvt+0xba>
 80084ac:	2200      	movs	r2, #0
 80084ae:	2300      	movs	r3, #0
 80084b0:	4630      	mov	r0, r6
 80084b2:	4639      	mov	r1, r7
 80084b4:	f7f8 fb28 	bl	8000b08 <__aeabi_dcmpeq>
 80084b8:	b918      	cbnz	r0, 80084c2 <__cvt+0xba>
 80084ba:	f1c4 0401 	rsb	r4, r4, #1
 80084be:	f8ca 4000 	str.w	r4, [sl]
 80084c2:	f8da 3000 	ldr.w	r3, [sl]
 80084c6:	4499      	add	r9, r3
 80084c8:	e7d3      	b.n	8008472 <__cvt+0x6a>
 80084ca:	1c59      	adds	r1, r3, #1
 80084cc:	9103      	str	r1, [sp, #12]
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	e7d9      	b.n	8008486 <__cvt+0x7e>

080084d2 <__exponent>:
 80084d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084d4:	2900      	cmp	r1, #0
 80084d6:	bfba      	itte	lt
 80084d8:	4249      	neglt	r1, r1
 80084da:	232d      	movlt	r3, #45	@ 0x2d
 80084dc:	232b      	movge	r3, #43	@ 0x2b
 80084de:	2909      	cmp	r1, #9
 80084e0:	7002      	strb	r2, [r0, #0]
 80084e2:	7043      	strb	r3, [r0, #1]
 80084e4:	dd29      	ble.n	800853a <__exponent+0x68>
 80084e6:	f10d 0307 	add.w	r3, sp, #7
 80084ea:	461d      	mov	r5, r3
 80084ec:	270a      	movs	r7, #10
 80084ee:	461a      	mov	r2, r3
 80084f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80084f4:	fb07 1416 	mls	r4, r7, r6, r1
 80084f8:	3430      	adds	r4, #48	@ 0x30
 80084fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084fe:	460c      	mov	r4, r1
 8008500:	2c63      	cmp	r4, #99	@ 0x63
 8008502:	f103 33ff 	add.w	r3, r3, #4294967295
 8008506:	4631      	mov	r1, r6
 8008508:	dcf1      	bgt.n	80084ee <__exponent+0x1c>
 800850a:	3130      	adds	r1, #48	@ 0x30
 800850c:	1e94      	subs	r4, r2, #2
 800850e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008512:	1c41      	adds	r1, r0, #1
 8008514:	4623      	mov	r3, r4
 8008516:	42ab      	cmp	r3, r5
 8008518:	d30a      	bcc.n	8008530 <__exponent+0x5e>
 800851a:	f10d 0309 	add.w	r3, sp, #9
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	42ac      	cmp	r4, r5
 8008522:	bf88      	it	hi
 8008524:	2300      	movhi	r3, #0
 8008526:	3302      	adds	r3, #2
 8008528:	4403      	add	r3, r0
 800852a:	1a18      	subs	r0, r3, r0
 800852c:	b003      	add	sp, #12
 800852e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008530:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008534:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008538:	e7ed      	b.n	8008516 <__exponent+0x44>
 800853a:	2330      	movs	r3, #48	@ 0x30
 800853c:	3130      	adds	r1, #48	@ 0x30
 800853e:	7083      	strb	r3, [r0, #2]
 8008540:	70c1      	strb	r1, [r0, #3]
 8008542:	1d03      	adds	r3, r0, #4
 8008544:	e7f1      	b.n	800852a <__exponent+0x58>
	...

08008548 <_printf_float>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	b08d      	sub	sp, #52	@ 0x34
 800854e:	460c      	mov	r4, r1
 8008550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008554:	4616      	mov	r6, r2
 8008556:	461f      	mov	r7, r3
 8008558:	4605      	mov	r5, r0
 800855a:	f000 fff3 	bl	8009544 <_localeconv_r>
 800855e:	6803      	ldr	r3, [r0, #0]
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	4618      	mov	r0, r3
 8008564:	f7f7 fea4 	bl	80002b0 <strlen>
 8008568:	2300      	movs	r3, #0
 800856a:	930a      	str	r3, [sp, #40]	@ 0x28
 800856c:	f8d8 3000 	ldr.w	r3, [r8]
 8008570:	9005      	str	r0, [sp, #20]
 8008572:	3307      	adds	r3, #7
 8008574:	f023 0307 	bic.w	r3, r3, #7
 8008578:	f103 0208 	add.w	r2, r3, #8
 800857c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008580:	f8d4 b000 	ldr.w	fp, [r4]
 8008584:	f8c8 2000 	str.w	r2, [r8]
 8008588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800858c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008590:	9307      	str	r3, [sp, #28]
 8008592:	f8cd 8018 	str.w	r8, [sp, #24]
 8008596:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800859a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859e:	4b9c      	ldr	r3, [pc, #624]	@ (8008810 <_printf_float+0x2c8>)
 80085a0:	f04f 32ff 	mov.w	r2, #4294967295
 80085a4:	f7f8 fae2 	bl	8000b6c <__aeabi_dcmpun>
 80085a8:	bb70      	cbnz	r0, 8008608 <_printf_float+0xc0>
 80085aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085ae:	4b98      	ldr	r3, [pc, #608]	@ (8008810 <_printf_float+0x2c8>)
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295
 80085b4:	f7f8 fabc 	bl	8000b30 <__aeabi_dcmple>
 80085b8:	bb30      	cbnz	r0, 8008608 <_printf_float+0xc0>
 80085ba:	2200      	movs	r2, #0
 80085bc:	2300      	movs	r3, #0
 80085be:	4640      	mov	r0, r8
 80085c0:	4649      	mov	r1, r9
 80085c2:	f7f8 faab 	bl	8000b1c <__aeabi_dcmplt>
 80085c6:	b110      	cbz	r0, 80085ce <_printf_float+0x86>
 80085c8:	232d      	movs	r3, #45	@ 0x2d
 80085ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ce:	4a91      	ldr	r2, [pc, #580]	@ (8008814 <_printf_float+0x2cc>)
 80085d0:	4b91      	ldr	r3, [pc, #580]	@ (8008818 <_printf_float+0x2d0>)
 80085d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085d6:	bf94      	ite	ls
 80085d8:	4690      	movls	r8, r2
 80085da:	4698      	movhi	r8, r3
 80085dc:	2303      	movs	r3, #3
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	f02b 0304 	bic.w	r3, fp, #4
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	f04f 0900 	mov.w	r9, #0
 80085ea:	9700      	str	r7, [sp, #0]
 80085ec:	4633      	mov	r3, r6
 80085ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085f0:	4621      	mov	r1, r4
 80085f2:	4628      	mov	r0, r5
 80085f4:	f000 f9d2 	bl	800899c <_printf_common>
 80085f8:	3001      	adds	r0, #1
 80085fa:	f040 808d 	bne.w	8008718 <_printf_float+0x1d0>
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	b00d      	add	sp, #52	@ 0x34
 8008604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	4640      	mov	r0, r8
 800860e:	4649      	mov	r1, r9
 8008610:	f7f8 faac 	bl	8000b6c <__aeabi_dcmpun>
 8008614:	b140      	cbz	r0, 8008628 <_printf_float+0xe0>
 8008616:	464b      	mov	r3, r9
 8008618:	2b00      	cmp	r3, #0
 800861a:	bfbc      	itt	lt
 800861c:	232d      	movlt	r3, #45	@ 0x2d
 800861e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008622:	4a7e      	ldr	r2, [pc, #504]	@ (800881c <_printf_float+0x2d4>)
 8008624:	4b7e      	ldr	r3, [pc, #504]	@ (8008820 <_printf_float+0x2d8>)
 8008626:	e7d4      	b.n	80085d2 <_printf_float+0x8a>
 8008628:	6863      	ldr	r3, [r4, #4]
 800862a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800862e:	9206      	str	r2, [sp, #24]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	d13b      	bne.n	80086ac <_printf_float+0x164>
 8008634:	2306      	movs	r3, #6
 8008636:	6063      	str	r3, [r4, #4]
 8008638:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800863c:	2300      	movs	r3, #0
 800863e:	6022      	str	r2, [r4, #0]
 8008640:	9303      	str	r3, [sp, #12]
 8008642:	ab0a      	add	r3, sp, #40	@ 0x28
 8008644:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008648:	ab09      	add	r3, sp, #36	@ 0x24
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	6861      	ldr	r1, [r4, #4]
 800864e:	ec49 8b10 	vmov	d0, r8, r9
 8008652:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008656:	4628      	mov	r0, r5
 8008658:	f7ff fed6 	bl	8008408 <__cvt>
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008660:	2b47      	cmp	r3, #71	@ 0x47
 8008662:	4680      	mov	r8, r0
 8008664:	d129      	bne.n	80086ba <_printf_float+0x172>
 8008666:	1cc8      	adds	r0, r1, #3
 8008668:	db02      	blt.n	8008670 <_printf_float+0x128>
 800866a:	6863      	ldr	r3, [r4, #4]
 800866c:	4299      	cmp	r1, r3
 800866e:	dd41      	ble.n	80086f4 <_printf_float+0x1ac>
 8008670:	f1aa 0a02 	sub.w	sl, sl, #2
 8008674:	fa5f fa8a 	uxtb.w	sl, sl
 8008678:	3901      	subs	r1, #1
 800867a:	4652      	mov	r2, sl
 800867c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008680:	9109      	str	r1, [sp, #36]	@ 0x24
 8008682:	f7ff ff26 	bl	80084d2 <__exponent>
 8008686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008688:	1813      	adds	r3, r2, r0
 800868a:	2a01      	cmp	r2, #1
 800868c:	4681      	mov	r9, r0
 800868e:	6123      	str	r3, [r4, #16]
 8008690:	dc02      	bgt.n	8008698 <_printf_float+0x150>
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	07d2      	lsls	r2, r2, #31
 8008696:	d501      	bpl.n	800869c <_printf_float+0x154>
 8008698:	3301      	adds	r3, #1
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0a2      	beq.n	80085ea <_printf_float+0xa2>
 80086a4:	232d      	movs	r3, #45	@ 0x2d
 80086a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086aa:	e79e      	b.n	80085ea <_printf_float+0xa2>
 80086ac:	9a06      	ldr	r2, [sp, #24]
 80086ae:	2a47      	cmp	r2, #71	@ 0x47
 80086b0:	d1c2      	bne.n	8008638 <_printf_float+0xf0>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1c0      	bne.n	8008638 <_printf_float+0xf0>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e7bd      	b.n	8008636 <_printf_float+0xee>
 80086ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086be:	d9db      	bls.n	8008678 <_printf_float+0x130>
 80086c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086c4:	d118      	bne.n	80086f8 <_printf_float+0x1b0>
 80086c6:	2900      	cmp	r1, #0
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	dd0b      	ble.n	80086e4 <_printf_float+0x19c>
 80086cc:	6121      	str	r1, [r4, #16]
 80086ce:	b913      	cbnz	r3, 80086d6 <_printf_float+0x18e>
 80086d0:	6822      	ldr	r2, [r4, #0]
 80086d2:	07d0      	lsls	r0, r2, #31
 80086d4:	d502      	bpl.n	80086dc <_printf_float+0x194>
 80086d6:	3301      	adds	r3, #1
 80086d8:	440b      	add	r3, r1
 80086da:	6123      	str	r3, [r4, #16]
 80086dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086de:	f04f 0900 	mov.w	r9, #0
 80086e2:	e7db      	b.n	800869c <_printf_float+0x154>
 80086e4:	b913      	cbnz	r3, 80086ec <_printf_float+0x1a4>
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	07d2      	lsls	r2, r2, #31
 80086ea:	d501      	bpl.n	80086f0 <_printf_float+0x1a8>
 80086ec:	3302      	adds	r3, #2
 80086ee:	e7f4      	b.n	80086da <_printf_float+0x192>
 80086f0:	2301      	movs	r3, #1
 80086f2:	e7f2      	b.n	80086da <_printf_float+0x192>
 80086f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086fa:	4299      	cmp	r1, r3
 80086fc:	db05      	blt.n	800870a <_printf_float+0x1c2>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	6121      	str	r1, [r4, #16]
 8008702:	07d8      	lsls	r0, r3, #31
 8008704:	d5ea      	bpl.n	80086dc <_printf_float+0x194>
 8008706:	1c4b      	adds	r3, r1, #1
 8008708:	e7e7      	b.n	80086da <_printf_float+0x192>
 800870a:	2900      	cmp	r1, #0
 800870c:	bfd4      	ite	le
 800870e:	f1c1 0202 	rsble	r2, r1, #2
 8008712:	2201      	movgt	r2, #1
 8008714:	4413      	add	r3, r2
 8008716:	e7e0      	b.n	80086da <_printf_float+0x192>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	055a      	lsls	r2, r3, #21
 800871c:	d407      	bmi.n	800872e <_printf_float+0x1e6>
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	4642      	mov	r2, r8
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	47b8      	blx	r7
 8008728:	3001      	adds	r0, #1
 800872a:	d12b      	bne.n	8008784 <_printf_float+0x23c>
 800872c:	e767      	b.n	80085fe <_printf_float+0xb6>
 800872e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008732:	f240 80dd 	bls.w	80088f0 <_printf_float+0x3a8>
 8008736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800873a:	2200      	movs	r2, #0
 800873c:	2300      	movs	r3, #0
 800873e:	f7f8 f9e3 	bl	8000b08 <__aeabi_dcmpeq>
 8008742:	2800      	cmp	r0, #0
 8008744:	d033      	beq.n	80087ae <_printf_float+0x266>
 8008746:	4a37      	ldr	r2, [pc, #220]	@ (8008824 <_printf_float+0x2dc>)
 8008748:	2301      	movs	r3, #1
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	f43f af54 	beq.w	80085fe <_printf_float+0xb6>
 8008756:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800875a:	4543      	cmp	r3, r8
 800875c:	db02      	blt.n	8008764 <_printf_float+0x21c>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	07d8      	lsls	r0, r3, #31
 8008762:	d50f      	bpl.n	8008784 <_printf_float+0x23c>
 8008764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f af45 	beq.w	80085fe <_printf_float+0xb6>
 8008774:	f04f 0900 	mov.w	r9, #0
 8008778:	f108 38ff 	add.w	r8, r8, #4294967295
 800877c:	f104 0a1a 	add.w	sl, r4, #26
 8008780:	45c8      	cmp	r8, r9
 8008782:	dc09      	bgt.n	8008798 <_printf_float+0x250>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	079b      	lsls	r3, r3, #30
 8008788:	f100 8103 	bmi.w	8008992 <_printf_float+0x44a>
 800878c:	68e0      	ldr	r0, [r4, #12]
 800878e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008790:	4298      	cmp	r0, r3
 8008792:	bfb8      	it	lt
 8008794:	4618      	movlt	r0, r3
 8008796:	e734      	b.n	8008602 <_printf_float+0xba>
 8008798:	2301      	movs	r3, #1
 800879a:	4652      	mov	r2, sl
 800879c:	4631      	mov	r1, r6
 800879e:	4628      	mov	r0, r5
 80087a0:	47b8      	blx	r7
 80087a2:	3001      	adds	r0, #1
 80087a4:	f43f af2b 	beq.w	80085fe <_printf_float+0xb6>
 80087a8:	f109 0901 	add.w	r9, r9, #1
 80087ac:	e7e8      	b.n	8008780 <_printf_float+0x238>
 80087ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc39      	bgt.n	8008828 <_printf_float+0x2e0>
 80087b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008824 <_printf_float+0x2dc>)
 80087b6:	2301      	movs	r3, #1
 80087b8:	4631      	mov	r1, r6
 80087ba:	4628      	mov	r0, r5
 80087bc:	47b8      	blx	r7
 80087be:	3001      	adds	r0, #1
 80087c0:	f43f af1d 	beq.w	80085fe <_printf_float+0xb6>
 80087c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087c8:	ea59 0303 	orrs.w	r3, r9, r3
 80087cc:	d102      	bne.n	80087d4 <_printf_float+0x28c>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	07d9      	lsls	r1, r3, #31
 80087d2:	d5d7      	bpl.n	8008784 <_printf_float+0x23c>
 80087d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f af0d 	beq.w	80085fe <_printf_float+0xb6>
 80087e4:	f04f 0a00 	mov.w	sl, #0
 80087e8:	f104 0b1a 	add.w	fp, r4, #26
 80087ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ee:	425b      	negs	r3, r3
 80087f0:	4553      	cmp	r3, sl
 80087f2:	dc01      	bgt.n	80087f8 <_printf_float+0x2b0>
 80087f4:	464b      	mov	r3, r9
 80087f6:	e793      	b.n	8008720 <_printf_float+0x1d8>
 80087f8:	2301      	movs	r3, #1
 80087fa:	465a      	mov	r2, fp
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f aefb 	beq.w	80085fe <_printf_float+0xb6>
 8008808:	f10a 0a01 	add.w	sl, sl, #1
 800880c:	e7ee      	b.n	80087ec <_printf_float+0x2a4>
 800880e:	bf00      	nop
 8008810:	7fefffff 	.word	0x7fefffff
 8008814:	0800e450 	.word	0x0800e450
 8008818:	0800e454 	.word	0x0800e454
 800881c:	0800e458 	.word	0x0800e458
 8008820:	0800e45c 	.word	0x0800e45c
 8008824:	0800e460 	.word	0x0800e460
 8008828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800882a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800882e:	4553      	cmp	r3, sl
 8008830:	bfa8      	it	ge
 8008832:	4653      	movge	r3, sl
 8008834:	2b00      	cmp	r3, #0
 8008836:	4699      	mov	r9, r3
 8008838:	dc36      	bgt.n	80088a8 <_printf_float+0x360>
 800883a:	f04f 0b00 	mov.w	fp, #0
 800883e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008842:	f104 021a 	add.w	r2, r4, #26
 8008846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008848:	9306      	str	r3, [sp, #24]
 800884a:	eba3 0309 	sub.w	r3, r3, r9
 800884e:	455b      	cmp	r3, fp
 8008850:	dc31      	bgt.n	80088b6 <_printf_float+0x36e>
 8008852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008854:	459a      	cmp	sl, r3
 8008856:	dc3a      	bgt.n	80088ce <_printf_float+0x386>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	07da      	lsls	r2, r3, #31
 800885c:	d437      	bmi.n	80088ce <_printf_float+0x386>
 800885e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008860:	ebaa 0903 	sub.w	r9, sl, r3
 8008864:	9b06      	ldr	r3, [sp, #24]
 8008866:	ebaa 0303 	sub.w	r3, sl, r3
 800886a:	4599      	cmp	r9, r3
 800886c:	bfa8      	it	ge
 800886e:	4699      	movge	r9, r3
 8008870:	f1b9 0f00 	cmp.w	r9, #0
 8008874:	dc33      	bgt.n	80088de <_printf_float+0x396>
 8008876:	f04f 0800 	mov.w	r8, #0
 800887a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800887e:	f104 0b1a 	add.w	fp, r4, #26
 8008882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008884:	ebaa 0303 	sub.w	r3, sl, r3
 8008888:	eba3 0309 	sub.w	r3, r3, r9
 800888c:	4543      	cmp	r3, r8
 800888e:	f77f af79 	ble.w	8008784 <_printf_float+0x23c>
 8008892:	2301      	movs	r3, #1
 8008894:	465a      	mov	r2, fp
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	f43f aeae 	beq.w	80085fe <_printf_float+0xb6>
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	e7ec      	b.n	8008882 <_printf_float+0x33a>
 80088a8:	4642      	mov	r2, r8
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	d1c2      	bne.n	800883a <_printf_float+0x2f2>
 80088b4:	e6a3      	b.n	80085fe <_printf_float+0xb6>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	9206      	str	r2, [sp, #24]
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	f43f ae9c 	beq.w	80085fe <_printf_float+0xb6>
 80088c6:	9a06      	ldr	r2, [sp, #24]
 80088c8:	f10b 0b01 	add.w	fp, fp, #1
 80088cc:	e7bb      	b.n	8008846 <_printf_float+0x2fe>
 80088ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d2:	4631      	mov	r1, r6
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b8      	blx	r7
 80088d8:	3001      	adds	r0, #1
 80088da:	d1c0      	bne.n	800885e <_printf_float+0x316>
 80088dc:	e68f      	b.n	80085fe <_printf_float+0xb6>
 80088de:	9a06      	ldr	r2, [sp, #24]
 80088e0:	464b      	mov	r3, r9
 80088e2:	4442      	add	r2, r8
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	d1c3      	bne.n	8008876 <_printf_float+0x32e>
 80088ee:	e686      	b.n	80085fe <_printf_float+0xb6>
 80088f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088f4:	f1ba 0f01 	cmp.w	sl, #1
 80088f8:	dc01      	bgt.n	80088fe <_printf_float+0x3b6>
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d536      	bpl.n	800896c <_printf_float+0x424>
 80088fe:	2301      	movs	r3, #1
 8008900:	4642      	mov	r2, r8
 8008902:	4631      	mov	r1, r6
 8008904:	4628      	mov	r0, r5
 8008906:	47b8      	blx	r7
 8008908:	3001      	adds	r0, #1
 800890a:	f43f ae78 	beq.w	80085fe <_printf_float+0xb6>
 800890e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	f43f ae70 	beq.w	80085fe <_printf_float+0xb6>
 800891e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008922:	2200      	movs	r2, #0
 8008924:	2300      	movs	r3, #0
 8008926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800892a:	f7f8 f8ed 	bl	8000b08 <__aeabi_dcmpeq>
 800892e:	b9c0      	cbnz	r0, 8008962 <_printf_float+0x41a>
 8008930:	4653      	mov	r3, sl
 8008932:	f108 0201 	add.w	r2, r8, #1
 8008936:	4631      	mov	r1, r6
 8008938:	4628      	mov	r0, r5
 800893a:	47b8      	blx	r7
 800893c:	3001      	adds	r0, #1
 800893e:	d10c      	bne.n	800895a <_printf_float+0x412>
 8008940:	e65d      	b.n	80085fe <_printf_float+0xb6>
 8008942:	2301      	movs	r3, #1
 8008944:	465a      	mov	r2, fp
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f ae56 	beq.w	80085fe <_printf_float+0xb6>
 8008952:	f108 0801 	add.w	r8, r8, #1
 8008956:	45d0      	cmp	r8, sl
 8008958:	dbf3      	blt.n	8008942 <_printf_float+0x3fa>
 800895a:	464b      	mov	r3, r9
 800895c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008960:	e6df      	b.n	8008722 <_printf_float+0x1da>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	f104 0b1a 	add.w	fp, r4, #26
 800896a:	e7f4      	b.n	8008956 <_printf_float+0x40e>
 800896c:	2301      	movs	r3, #1
 800896e:	4642      	mov	r2, r8
 8008970:	e7e1      	b.n	8008936 <_printf_float+0x3ee>
 8008972:	2301      	movs	r3, #1
 8008974:	464a      	mov	r2, r9
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f ae3e 	beq.w	80085fe <_printf_float+0xb6>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	68e3      	ldr	r3, [r4, #12]
 8008988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800898a:	1a5b      	subs	r3, r3, r1
 800898c:	4543      	cmp	r3, r8
 800898e:	dcf0      	bgt.n	8008972 <_printf_float+0x42a>
 8008990:	e6fc      	b.n	800878c <_printf_float+0x244>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 0919 	add.w	r9, r4, #25
 800899a:	e7f4      	b.n	8008986 <_printf_float+0x43e>

0800899c <_printf_common>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	4616      	mov	r6, r2
 80089a2:	4698      	mov	r8, r3
 80089a4:	688a      	ldr	r2, [r1, #8]
 80089a6:	690b      	ldr	r3, [r1, #16]
 80089a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089ac:	4293      	cmp	r3, r2
 80089ae:	bfb8      	it	lt
 80089b0:	4613      	movlt	r3, r2
 80089b2:	6033      	str	r3, [r6, #0]
 80089b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089b8:	4607      	mov	r7, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b10a      	cbz	r2, 80089c2 <_printf_common+0x26>
 80089be:	3301      	adds	r3, #1
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	0699      	lsls	r1, r3, #26
 80089c6:	bf42      	ittt	mi
 80089c8:	6833      	ldrmi	r3, [r6, #0]
 80089ca:	3302      	addmi	r3, #2
 80089cc:	6033      	strmi	r3, [r6, #0]
 80089ce:	6825      	ldr	r5, [r4, #0]
 80089d0:	f015 0506 	ands.w	r5, r5, #6
 80089d4:	d106      	bne.n	80089e4 <_printf_common+0x48>
 80089d6:	f104 0a19 	add.w	sl, r4, #25
 80089da:	68e3      	ldr	r3, [r4, #12]
 80089dc:	6832      	ldr	r2, [r6, #0]
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	42ab      	cmp	r3, r5
 80089e2:	dc26      	bgt.n	8008a32 <_printf_common+0x96>
 80089e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	3b00      	subs	r3, #0
 80089ec:	bf18      	it	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	0692      	lsls	r2, r2, #26
 80089f2:	d42b      	bmi.n	8008a4c <_printf_common+0xb0>
 80089f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089f8:	4641      	mov	r1, r8
 80089fa:	4638      	mov	r0, r7
 80089fc:	47c8      	blx	r9
 80089fe:	3001      	adds	r0, #1
 8008a00:	d01e      	beq.n	8008a40 <_printf_common+0xa4>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	f003 0306 	and.w	r3, r3, #6
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	bf02      	ittt	eq
 8008a0e:	68e5      	ldreq	r5, [r4, #12]
 8008a10:	6833      	ldreq	r3, [r6, #0]
 8008a12:	1aed      	subeq	r5, r5, r3
 8008a14:	68a3      	ldr	r3, [r4, #8]
 8008a16:	bf0c      	ite	eq
 8008a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a1c:	2500      	movne	r5, #0
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	bfc4      	itt	gt
 8008a22:	1a9b      	subgt	r3, r3, r2
 8008a24:	18ed      	addgt	r5, r5, r3
 8008a26:	2600      	movs	r6, #0
 8008a28:	341a      	adds	r4, #26
 8008a2a:	42b5      	cmp	r5, r6
 8008a2c:	d11a      	bne.n	8008a64 <_printf_common+0xc8>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e008      	b.n	8008a44 <_printf_common+0xa8>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4652      	mov	r2, sl
 8008a36:	4641      	mov	r1, r8
 8008a38:	4638      	mov	r0, r7
 8008a3a:	47c8      	blx	r9
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d103      	bne.n	8008a48 <_printf_common+0xac>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a48:	3501      	adds	r5, #1
 8008a4a:	e7c6      	b.n	80089da <_printf_common+0x3e>
 8008a4c:	18e1      	adds	r1, r4, r3
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	2030      	movs	r0, #48	@ 0x30
 8008a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a56:	4422      	add	r2, r4
 8008a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a60:	3302      	adds	r3, #2
 8008a62:	e7c7      	b.n	80089f4 <_printf_common+0x58>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4622      	mov	r2, r4
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	47c8      	blx	r9
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d0e6      	beq.n	8008a40 <_printf_common+0xa4>
 8008a72:	3601      	adds	r6, #1
 8008a74:	e7d9      	b.n	8008a2a <_printf_common+0x8e>
	...

08008a78 <_printf_i>:
 8008a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	7e0f      	ldrb	r7, [r1, #24]
 8008a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a80:	2f78      	cmp	r7, #120	@ 0x78
 8008a82:	4691      	mov	r9, r2
 8008a84:	4680      	mov	r8, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	469a      	mov	sl, r3
 8008a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a8e:	d807      	bhi.n	8008aa0 <_printf_i+0x28>
 8008a90:	2f62      	cmp	r7, #98	@ 0x62
 8008a92:	d80a      	bhi.n	8008aaa <_printf_i+0x32>
 8008a94:	2f00      	cmp	r7, #0
 8008a96:	f000 80d2 	beq.w	8008c3e <_printf_i+0x1c6>
 8008a9a:	2f58      	cmp	r7, #88	@ 0x58
 8008a9c:	f000 80b9 	beq.w	8008c12 <_printf_i+0x19a>
 8008aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008aa8:	e03a      	b.n	8008b20 <_printf_i+0xa8>
 8008aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008aae:	2b15      	cmp	r3, #21
 8008ab0:	d8f6      	bhi.n	8008aa0 <_printf_i+0x28>
 8008ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ab8 <_printf_i+0x40>)
 8008ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab8:	08008b11 	.word	0x08008b11
 8008abc:	08008b25 	.word	0x08008b25
 8008ac0:	08008aa1 	.word	0x08008aa1
 8008ac4:	08008aa1 	.word	0x08008aa1
 8008ac8:	08008aa1 	.word	0x08008aa1
 8008acc:	08008aa1 	.word	0x08008aa1
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008aa1 	.word	0x08008aa1
 8008ad8:	08008aa1 	.word	0x08008aa1
 8008adc:	08008aa1 	.word	0x08008aa1
 8008ae0:	08008aa1 	.word	0x08008aa1
 8008ae4:	08008c25 	.word	0x08008c25
 8008ae8:	08008b4f 	.word	0x08008b4f
 8008aec:	08008bdf 	.word	0x08008bdf
 8008af0:	08008aa1 	.word	0x08008aa1
 8008af4:	08008aa1 	.word	0x08008aa1
 8008af8:	08008c47 	.word	0x08008c47
 8008afc:	08008aa1 	.word	0x08008aa1
 8008b00:	08008b4f 	.word	0x08008b4f
 8008b04:	08008aa1 	.word	0x08008aa1
 8008b08:	08008aa1 	.word	0x08008aa1
 8008b0c:	08008be7 	.word	0x08008be7
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	1d1a      	adds	r2, r3, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6032      	str	r2, [r6, #0]
 8008b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b20:	2301      	movs	r3, #1
 8008b22:	e09d      	b.n	8008c60 <_printf_i+0x1e8>
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	1d19      	adds	r1, r3, #4
 8008b2a:	6031      	str	r1, [r6, #0]
 8008b2c:	0606      	lsls	r6, r0, #24
 8008b2e:	d501      	bpl.n	8008b34 <_printf_i+0xbc>
 8008b30:	681d      	ldr	r5, [r3, #0]
 8008b32:	e003      	b.n	8008b3c <_printf_i+0xc4>
 8008b34:	0645      	lsls	r5, r0, #25
 8008b36:	d5fb      	bpl.n	8008b30 <_printf_i+0xb8>
 8008b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	da03      	bge.n	8008b48 <_printf_i+0xd0>
 8008b40:	232d      	movs	r3, #45	@ 0x2d
 8008b42:	426d      	negs	r5, r5
 8008b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b48:	4859      	ldr	r0, [pc, #356]	@ (8008cb0 <_printf_i+0x238>)
 8008b4a:	230a      	movs	r3, #10
 8008b4c:	e011      	b.n	8008b72 <_printf_i+0xfa>
 8008b4e:	6821      	ldr	r1, [r4, #0]
 8008b50:	6833      	ldr	r3, [r6, #0]
 8008b52:	0608      	lsls	r0, r1, #24
 8008b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b58:	d402      	bmi.n	8008b60 <_printf_i+0xe8>
 8008b5a:	0649      	lsls	r1, r1, #25
 8008b5c:	bf48      	it	mi
 8008b5e:	b2ad      	uxthmi	r5, r5
 8008b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b62:	4853      	ldr	r0, [pc, #332]	@ (8008cb0 <_printf_i+0x238>)
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	bf14      	ite	ne
 8008b68:	230a      	movne	r3, #10
 8008b6a:	2308      	moveq	r3, #8
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b72:	6866      	ldr	r6, [r4, #4]
 8008b74:	60a6      	str	r6, [r4, #8]
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	bfa2      	ittt	ge
 8008b7a:	6821      	ldrge	r1, [r4, #0]
 8008b7c:	f021 0104 	bicge.w	r1, r1, #4
 8008b80:	6021      	strge	r1, [r4, #0]
 8008b82:	b90d      	cbnz	r5, 8008b88 <_printf_i+0x110>
 8008b84:	2e00      	cmp	r6, #0
 8008b86:	d04b      	beq.n	8008c20 <_printf_i+0x1a8>
 8008b88:	4616      	mov	r6, r2
 8008b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b92:	5dc7      	ldrb	r7, [r0, r7]
 8008b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b98:	462f      	mov	r7, r5
 8008b9a:	42bb      	cmp	r3, r7
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	d9f4      	bls.n	8008b8a <_printf_i+0x112>
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d10b      	bne.n	8008bbc <_printf_i+0x144>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	07df      	lsls	r7, r3, #31
 8008ba8:	d508      	bpl.n	8008bbc <_printf_i+0x144>
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	6861      	ldr	r1, [r4, #4]
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	bfde      	ittt	le
 8008bb2:	2330      	movle	r3, #48	@ 0x30
 8008bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bbc:	1b92      	subs	r2, r2, r6
 8008bbe:	6122      	str	r2, [r4, #16]
 8008bc0:	f8cd a000 	str.w	sl, [sp]
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	aa03      	add	r2, sp, #12
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4640      	mov	r0, r8
 8008bcc:	f7ff fee6 	bl	800899c <_printf_common>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d14a      	bne.n	8008c6a <_printf_i+0x1f2>
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	b004      	add	sp, #16
 8008bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	f043 0320 	orr.w	r3, r3, #32
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	4833      	ldr	r0, [pc, #204]	@ (8008cb4 <_printf_i+0x23c>)
 8008be8:	2778      	movs	r7, #120	@ 0x78
 8008bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	6831      	ldr	r1, [r6, #0]
 8008bf2:	061f      	lsls	r7, r3, #24
 8008bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bf8:	d402      	bmi.n	8008c00 <_printf_i+0x188>
 8008bfa:	065f      	lsls	r7, r3, #25
 8008bfc:	bf48      	it	mi
 8008bfe:	b2ad      	uxthmi	r5, r5
 8008c00:	6031      	str	r1, [r6, #0]
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	bf44      	itt	mi
 8008c06:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0a:	6023      	strmi	r3, [r4, #0]
 8008c0c:	b11d      	cbz	r5, 8008c16 <_printf_i+0x19e>
 8008c0e:	2310      	movs	r3, #16
 8008c10:	e7ac      	b.n	8008b6c <_printf_i+0xf4>
 8008c12:	4827      	ldr	r0, [pc, #156]	@ (8008cb0 <_printf_i+0x238>)
 8008c14:	e7e9      	b.n	8008bea <_printf_i+0x172>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f023 0320 	bic.w	r3, r3, #32
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	e7f6      	b.n	8008c0e <_printf_i+0x196>
 8008c20:	4616      	mov	r6, r2
 8008c22:	e7bd      	b.n	8008ba0 <_printf_i+0x128>
 8008c24:	6833      	ldr	r3, [r6, #0]
 8008c26:	6825      	ldr	r5, [r4, #0]
 8008c28:	6961      	ldr	r1, [r4, #20]
 8008c2a:	1d18      	adds	r0, r3, #4
 8008c2c:	6030      	str	r0, [r6, #0]
 8008c2e:	062e      	lsls	r6, r5, #24
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	d501      	bpl.n	8008c38 <_printf_i+0x1c0>
 8008c34:	6019      	str	r1, [r3, #0]
 8008c36:	e002      	b.n	8008c3e <_printf_i+0x1c6>
 8008c38:	0668      	lsls	r0, r5, #25
 8008c3a:	d5fb      	bpl.n	8008c34 <_printf_i+0x1bc>
 8008c3c:	8019      	strh	r1, [r3, #0]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	4616      	mov	r6, r2
 8008c44:	e7bc      	b.n	8008bc0 <_printf_i+0x148>
 8008c46:	6833      	ldr	r3, [r6, #0]
 8008c48:	1d1a      	adds	r2, r3, #4
 8008c4a:	6032      	str	r2, [r6, #0]
 8008c4c:	681e      	ldr	r6, [r3, #0]
 8008c4e:	6862      	ldr	r2, [r4, #4]
 8008c50:	2100      	movs	r1, #0
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7f7 fadc 	bl	8000210 <memchr>
 8008c58:	b108      	cbz	r0, 8008c5e <_printf_i+0x1e6>
 8008c5a:	1b80      	subs	r0, r0, r6
 8008c5c:	6060      	str	r0, [r4, #4]
 8008c5e:	6863      	ldr	r3, [r4, #4]
 8008c60:	6123      	str	r3, [r4, #16]
 8008c62:	2300      	movs	r3, #0
 8008c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c68:	e7aa      	b.n	8008bc0 <_printf_i+0x148>
 8008c6a:	6923      	ldr	r3, [r4, #16]
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	4649      	mov	r1, r9
 8008c70:	4640      	mov	r0, r8
 8008c72:	47d0      	blx	sl
 8008c74:	3001      	adds	r0, #1
 8008c76:	d0ad      	beq.n	8008bd4 <_printf_i+0x15c>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	079b      	lsls	r3, r3, #30
 8008c7c:	d413      	bmi.n	8008ca6 <_printf_i+0x22e>
 8008c7e:	68e0      	ldr	r0, [r4, #12]
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	4298      	cmp	r0, r3
 8008c84:	bfb8      	it	lt
 8008c86:	4618      	movlt	r0, r3
 8008c88:	e7a6      	b.n	8008bd8 <_printf_i+0x160>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	4649      	mov	r1, r9
 8008c90:	4640      	mov	r0, r8
 8008c92:	47d0      	blx	sl
 8008c94:	3001      	adds	r0, #1
 8008c96:	d09d      	beq.n	8008bd4 <_printf_i+0x15c>
 8008c98:	3501      	adds	r5, #1
 8008c9a:	68e3      	ldr	r3, [r4, #12]
 8008c9c:	9903      	ldr	r1, [sp, #12]
 8008c9e:	1a5b      	subs	r3, r3, r1
 8008ca0:	42ab      	cmp	r3, r5
 8008ca2:	dcf2      	bgt.n	8008c8a <_printf_i+0x212>
 8008ca4:	e7eb      	b.n	8008c7e <_printf_i+0x206>
 8008ca6:	2500      	movs	r5, #0
 8008ca8:	f104 0619 	add.w	r6, r4, #25
 8008cac:	e7f5      	b.n	8008c9a <_printf_i+0x222>
 8008cae:	bf00      	nop
 8008cb0:	0800e462 	.word	0x0800e462
 8008cb4:	0800e473 	.word	0x0800e473

08008cb8 <_scanf_float>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	b087      	sub	sp, #28
 8008cbe:	4617      	mov	r7, r2
 8008cc0:	9303      	str	r3, [sp, #12]
 8008cc2:	688b      	ldr	r3, [r1, #8]
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008cca:	bf81      	itttt	hi
 8008ccc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008cd0:	eb03 0b05 	addhi.w	fp, r3, r5
 8008cd4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008cd8:	608b      	strhi	r3, [r1, #8]
 8008cda:	680b      	ldr	r3, [r1, #0]
 8008cdc:	460a      	mov	r2, r1
 8008cde:	f04f 0500 	mov.w	r5, #0
 8008ce2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008ce6:	f842 3b1c 	str.w	r3, [r2], #28
 8008cea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cee:	4680      	mov	r8, r0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	bf98      	it	ls
 8008cf4:	f04f 0b00 	movls.w	fp, #0
 8008cf8:	9201      	str	r2, [sp, #4]
 8008cfa:	4616      	mov	r6, r2
 8008cfc:	46aa      	mov	sl, r5
 8008cfe:	46a9      	mov	r9, r5
 8008d00:	9502      	str	r5, [sp, #8]
 8008d02:	68a2      	ldr	r2, [r4, #8]
 8008d04:	b152      	cbz	r2, 8008d1c <_scanf_float+0x64>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b4e      	cmp	r3, #78	@ 0x4e
 8008d0c:	d864      	bhi.n	8008dd8 <_scanf_float+0x120>
 8008d0e:	2b40      	cmp	r3, #64	@ 0x40
 8008d10:	d83c      	bhi.n	8008d8c <_scanf_float+0xd4>
 8008d12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008d16:	b2c8      	uxtb	r0, r1
 8008d18:	280e      	cmp	r0, #14
 8008d1a:	d93a      	bls.n	8008d92 <_scanf_float+0xda>
 8008d1c:	f1b9 0f00 	cmp.w	r9, #0
 8008d20:	d003      	beq.n	8008d2a <_scanf_float+0x72>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d2e:	f1ba 0f01 	cmp.w	sl, #1
 8008d32:	f200 8117 	bhi.w	8008f64 <_scanf_float+0x2ac>
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	429e      	cmp	r6, r3
 8008d3a:	f200 8108 	bhi.w	8008f4e <_scanf_float+0x296>
 8008d3e:	2001      	movs	r0, #1
 8008d40:	b007      	add	sp, #28
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008d4a:	2a0d      	cmp	r2, #13
 8008d4c:	d8e6      	bhi.n	8008d1c <_scanf_float+0x64>
 8008d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d54 <_scanf_float+0x9c>)
 8008d50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d54:	08008e9b 	.word	0x08008e9b
 8008d58:	08008d1d 	.word	0x08008d1d
 8008d5c:	08008d1d 	.word	0x08008d1d
 8008d60:	08008d1d 	.word	0x08008d1d
 8008d64:	08008efb 	.word	0x08008efb
 8008d68:	08008ed3 	.word	0x08008ed3
 8008d6c:	08008d1d 	.word	0x08008d1d
 8008d70:	08008d1d 	.word	0x08008d1d
 8008d74:	08008ea9 	.word	0x08008ea9
 8008d78:	08008d1d 	.word	0x08008d1d
 8008d7c:	08008d1d 	.word	0x08008d1d
 8008d80:	08008d1d 	.word	0x08008d1d
 8008d84:	08008d1d 	.word	0x08008d1d
 8008d88:	08008e61 	.word	0x08008e61
 8008d8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008d90:	e7db      	b.n	8008d4a <_scanf_float+0x92>
 8008d92:	290e      	cmp	r1, #14
 8008d94:	d8c2      	bhi.n	8008d1c <_scanf_float+0x64>
 8008d96:	a001      	add	r0, pc, #4	@ (adr r0, 8008d9c <_scanf_float+0xe4>)
 8008d98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d9c:	08008e51 	.word	0x08008e51
 8008da0:	08008d1d 	.word	0x08008d1d
 8008da4:	08008e51 	.word	0x08008e51
 8008da8:	08008ee7 	.word	0x08008ee7
 8008dac:	08008d1d 	.word	0x08008d1d
 8008db0:	08008df9 	.word	0x08008df9
 8008db4:	08008e37 	.word	0x08008e37
 8008db8:	08008e37 	.word	0x08008e37
 8008dbc:	08008e37 	.word	0x08008e37
 8008dc0:	08008e37 	.word	0x08008e37
 8008dc4:	08008e37 	.word	0x08008e37
 8008dc8:	08008e37 	.word	0x08008e37
 8008dcc:	08008e37 	.word	0x08008e37
 8008dd0:	08008e37 	.word	0x08008e37
 8008dd4:	08008e37 	.word	0x08008e37
 8008dd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008dda:	d809      	bhi.n	8008df0 <_scanf_float+0x138>
 8008ddc:	2b60      	cmp	r3, #96	@ 0x60
 8008dde:	d8b2      	bhi.n	8008d46 <_scanf_float+0x8e>
 8008de0:	2b54      	cmp	r3, #84	@ 0x54
 8008de2:	d07b      	beq.n	8008edc <_scanf_float+0x224>
 8008de4:	2b59      	cmp	r3, #89	@ 0x59
 8008de6:	d199      	bne.n	8008d1c <_scanf_float+0x64>
 8008de8:	2d07      	cmp	r5, #7
 8008dea:	d197      	bne.n	8008d1c <_scanf_float+0x64>
 8008dec:	2508      	movs	r5, #8
 8008dee:	e02c      	b.n	8008e4a <_scanf_float+0x192>
 8008df0:	2b74      	cmp	r3, #116	@ 0x74
 8008df2:	d073      	beq.n	8008edc <_scanf_float+0x224>
 8008df4:	2b79      	cmp	r3, #121	@ 0x79
 8008df6:	e7f6      	b.n	8008de6 <_scanf_float+0x12e>
 8008df8:	6821      	ldr	r1, [r4, #0]
 8008dfa:	05c8      	lsls	r0, r1, #23
 8008dfc:	d51b      	bpl.n	8008e36 <_scanf_float+0x17e>
 8008dfe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008e02:	6021      	str	r1, [r4, #0]
 8008e04:	f109 0901 	add.w	r9, r9, #1
 8008e08:	f1bb 0f00 	cmp.w	fp, #0
 8008e0c:	d003      	beq.n	8008e16 <_scanf_float+0x15e>
 8008e0e:	3201      	adds	r2, #1
 8008e10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e14:	60a2      	str	r2, [r4, #8]
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	60a3      	str	r3, [r4, #8]
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
 8008e2a:	f340 8087 	ble.w	8008f3c <_scanf_float+0x284>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	e765      	b.n	8008d02 <_scanf_float+0x4a>
 8008e36:	eb1a 0105 	adds.w	r1, sl, r5
 8008e3a:	f47f af6f 	bne.w	8008d1c <_scanf_float+0x64>
 8008e3e:	6822      	ldr	r2, [r4, #0]
 8008e40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008e44:	6022      	str	r2, [r4, #0]
 8008e46:	460d      	mov	r5, r1
 8008e48:	468a      	mov	sl, r1
 8008e4a:	f806 3b01 	strb.w	r3, [r6], #1
 8008e4e:	e7e2      	b.n	8008e16 <_scanf_float+0x15e>
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	0610      	lsls	r0, r2, #24
 8008e54:	f57f af62 	bpl.w	8008d1c <_scanf_float+0x64>
 8008e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	e7f4      	b.n	8008e4a <_scanf_float+0x192>
 8008e60:	f1ba 0f00 	cmp.w	sl, #0
 8008e64:	d10e      	bne.n	8008e84 <_scanf_float+0x1cc>
 8008e66:	f1b9 0f00 	cmp.w	r9, #0
 8008e6a:	d10e      	bne.n	8008e8a <_scanf_float+0x1d2>
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008e72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008e76:	d108      	bne.n	8008e8a <_scanf_float+0x1d2>
 8008e78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	f04f 0a01 	mov.w	sl, #1
 8008e82:	e7e2      	b.n	8008e4a <_scanf_float+0x192>
 8008e84:	f1ba 0f02 	cmp.w	sl, #2
 8008e88:	d055      	beq.n	8008f36 <_scanf_float+0x27e>
 8008e8a:	2d01      	cmp	r5, #1
 8008e8c:	d002      	beq.n	8008e94 <_scanf_float+0x1dc>
 8008e8e:	2d04      	cmp	r5, #4
 8008e90:	f47f af44 	bne.w	8008d1c <_scanf_float+0x64>
 8008e94:	3501      	adds	r5, #1
 8008e96:	b2ed      	uxtb	r5, r5
 8008e98:	e7d7      	b.n	8008e4a <_scanf_float+0x192>
 8008e9a:	f1ba 0f01 	cmp.w	sl, #1
 8008e9e:	f47f af3d 	bne.w	8008d1c <_scanf_float+0x64>
 8008ea2:	f04f 0a02 	mov.w	sl, #2
 8008ea6:	e7d0      	b.n	8008e4a <_scanf_float+0x192>
 8008ea8:	b97d      	cbnz	r5, 8008eca <_scanf_float+0x212>
 8008eaa:	f1b9 0f00 	cmp.w	r9, #0
 8008eae:	f47f af38 	bne.w	8008d22 <_scanf_float+0x6a>
 8008eb2:	6822      	ldr	r2, [r4, #0]
 8008eb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008eb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ebc:	f040 8108 	bne.w	80090d0 <_scanf_float+0x418>
 8008ec0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	2501      	movs	r5, #1
 8008ec8:	e7bf      	b.n	8008e4a <_scanf_float+0x192>
 8008eca:	2d03      	cmp	r5, #3
 8008ecc:	d0e2      	beq.n	8008e94 <_scanf_float+0x1dc>
 8008ece:	2d05      	cmp	r5, #5
 8008ed0:	e7de      	b.n	8008e90 <_scanf_float+0x1d8>
 8008ed2:	2d02      	cmp	r5, #2
 8008ed4:	f47f af22 	bne.w	8008d1c <_scanf_float+0x64>
 8008ed8:	2503      	movs	r5, #3
 8008eda:	e7b6      	b.n	8008e4a <_scanf_float+0x192>
 8008edc:	2d06      	cmp	r5, #6
 8008ede:	f47f af1d 	bne.w	8008d1c <_scanf_float+0x64>
 8008ee2:	2507      	movs	r5, #7
 8008ee4:	e7b1      	b.n	8008e4a <_scanf_float+0x192>
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	0591      	lsls	r1, r2, #22
 8008eea:	f57f af17 	bpl.w	8008d1c <_scanf_float+0x64>
 8008eee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ef8:	e7a7      	b.n	8008e4a <_scanf_float+0x192>
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008f00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008f04:	d006      	beq.n	8008f14 <_scanf_float+0x25c>
 8008f06:	0550      	lsls	r0, r2, #21
 8008f08:	f57f af08 	bpl.w	8008d1c <_scanf_float+0x64>
 8008f0c:	f1b9 0f00 	cmp.w	r9, #0
 8008f10:	f000 80de 	beq.w	80090d0 <_scanf_float+0x418>
 8008f14:	0591      	lsls	r1, r2, #22
 8008f16:	bf58      	it	pl
 8008f18:	9902      	ldrpl	r1, [sp, #8]
 8008f1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f1e:	bf58      	it	pl
 8008f20:	eba9 0101 	subpl.w	r1, r9, r1
 8008f24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008f28:	bf58      	it	pl
 8008f2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f2e:	6022      	str	r2, [r4, #0]
 8008f30:	f04f 0900 	mov.w	r9, #0
 8008f34:	e789      	b.n	8008e4a <_scanf_float+0x192>
 8008f36:	f04f 0a03 	mov.w	sl, #3
 8008f3a:	e786      	b.n	8008e4a <_scanf_float+0x192>
 8008f3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f40:	4639      	mov	r1, r7
 8008f42:	4640      	mov	r0, r8
 8008f44:	4798      	blx	r3
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f43f aedb 	beq.w	8008d02 <_scanf_float+0x4a>
 8008f4c:	e6e6      	b.n	8008d1c <_scanf_float+0x64>
 8008f4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f56:	463a      	mov	r2, r7
 8008f58:	4640      	mov	r0, r8
 8008f5a:	4798      	blx	r3
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	6123      	str	r3, [r4, #16]
 8008f62:	e6e8      	b.n	8008d36 <_scanf_float+0x7e>
 8008f64:	1e6b      	subs	r3, r5, #1
 8008f66:	2b06      	cmp	r3, #6
 8008f68:	d824      	bhi.n	8008fb4 <_scanf_float+0x2fc>
 8008f6a:	2d02      	cmp	r5, #2
 8008f6c:	d836      	bhi.n	8008fdc <_scanf_float+0x324>
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	429e      	cmp	r6, r3
 8008f72:	f67f aee4 	bls.w	8008d3e <_scanf_float+0x86>
 8008f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4640      	mov	r0, r8
 8008f82:	4798      	blx	r3
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	e7f0      	b.n	8008f6e <_scanf_float+0x2b6>
 8008f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008f94:	463a      	mov	r2, r7
 8008f96:	4640      	mov	r0, r8
 8008f98:	4798      	blx	r3
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fa4:	fa5f fa8a 	uxtb.w	sl, sl
 8008fa8:	f1ba 0f02 	cmp.w	sl, #2
 8008fac:	d1ee      	bne.n	8008f8c <_scanf_float+0x2d4>
 8008fae:	3d03      	subs	r5, #3
 8008fb0:	b2ed      	uxtb	r5, r5
 8008fb2:	1b76      	subs	r6, r6, r5
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	05da      	lsls	r2, r3, #23
 8008fb8:	d530      	bpl.n	800901c <_scanf_float+0x364>
 8008fba:	055b      	lsls	r3, r3, #21
 8008fbc:	d511      	bpl.n	8008fe2 <_scanf_float+0x32a>
 8008fbe:	9b01      	ldr	r3, [sp, #4]
 8008fc0:	429e      	cmp	r6, r3
 8008fc2:	f67f aebc 	bls.w	8008d3e <_scanf_float+0x86>
 8008fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fce:	463a      	mov	r2, r7
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4798      	blx	r3
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	e7f0      	b.n	8008fbe <_scanf_float+0x306>
 8008fdc:	46aa      	mov	sl, r5
 8008fde:	46b3      	mov	fp, r6
 8008fe0:	e7de      	b.n	8008fa0 <_scanf_float+0x2e8>
 8008fe2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	2965      	cmp	r1, #101	@ 0x65
 8008fea:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fee:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	d00c      	beq.n	8009010 <_scanf_float+0x358>
 8008ff6:	2945      	cmp	r1, #69	@ 0x45
 8008ff8:	d00a      	beq.n	8009010 <_scanf_float+0x358>
 8008ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ffe:	463a      	mov	r2, r7
 8009000:	4640      	mov	r0, r8
 8009002:	4798      	blx	r3
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800900a:	3b01      	subs	r3, #1
 800900c:	1eb5      	subs	r5, r6, #2
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009014:	463a      	mov	r2, r7
 8009016:	4640      	mov	r0, r8
 8009018:	4798      	blx	r3
 800901a:	462e      	mov	r6, r5
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	f012 0210 	ands.w	r2, r2, #16
 8009022:	d001      	beq.n	8009028 <_scanf_float+0x370>
 8009024:	2000      	movs	r0, #0
 8009026:	e68b      	b.n	8008d40 <_scanf_float+0x88>
 8009028:	7032      	strb	r2, [r6, #0]
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009034:	d11c      	bne.n	8009070 <_scanf_float+0x3b8>
 8009036:	9b02      	ldr	r3, [sp, #8]
 8009038:	454b      	cmp	r3, r9
 800903a:	eba3 0209 	sub.w	r2, r3, r9
 800903e:	d123      	bne.n	8009088 <_scanf_float+0x3d0>
 8009040:	9901      	ldr	r1, [sp, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	4640      	mov	r0, r8
 8009046:	f002 fcfb 	bl	800ba40 <_strtod_r>
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	6821      	ldr	r1, [r4, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f011 0f02 	tst.w	r1, #2
 8009054:	ec57 6b10 	vmov	r6, r7, d0
 8009058:	f103 0204 	add.w	r2, r3, #4
 800905c:	d01f      	beq.n	800909e <_scanf_float+0x3e6>
 800905e:	9903      	ldr	r1, [sp, #12]
 8009060:	600a      	str	r2, [r1, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	e9c3 6700 	strd	r6, r7, [r3]
 8009068:	68e3      	ldr	r3, [r4, #12]
 800906a:	3301      	adds	r3, #1
 800906c:	60e3      	str	r3, [r4, #12]
 800906e:	e7d9      	b.n	8009024 <_scanf_float+0x36c>
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0e4      	beq.n	8009040 <_scanf_float+0x388>
 8009076:	9905      	ldr	r1, [sp, #20]
 8009078:	230a      	movs	r3, #10
 800907a:	3101      	adds	r1, #1
 800907c:	4640      	mov	r0, r8
 800907e:	f002 fd5f 	bl	800bb40 <_strtol_r>
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	9e05      	ldr	r6, [sp, #20]
 8009086:	1ac2      	subs	r2, r0, r3
 8009088:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800908c:	429e      	cmp	r6, r3
 800908e:	bf28      	it	cs
 8009090:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009094:	4910      	ldr	r1, [pc, #64]	@ (80090d8 <_scanf_float+0x420>)
 8009096:	4630      	mov	r0, r6
 8009098:	f000 f954 	bl	8009344 <siprintf>
 800909c:	e7d0      	b.n	8009040 <_scanf_float+0x388>
 800909e:	f011 0f04 	tst.w	r1, #4
 80090a2:	9903      	ldr	r1, [sp, #12]
 80090a4:	600a      	str	r2, [r1, #0]
 80090a6:	d1dc      	bne.n	8009062 <_scanf_float+0x3aa>
 80090a8:	681d      	ldr	r5, [r3, #0]
 80090aa:	4632      	mov	r2, r6
 80090ac:	463b      	mov	r3, r7
 80090ae:	4630      	mov	r0, r6
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 fd5b 	bl	8000b6c <__aeabi_dcmpun>
 80090b6:	b128      	cbz	r0, 80090c4 <_scanf_float+0x40c>
 80090b8:	4808      	ldr	r0, [pc, #32]	@ (80090dc <_scanf_float+0x424>)
 80090ba:	f000 fabb 	bl	8009634 <nanf>
 80090be:	ed85 0a00 	vstr	s0, [r5]
 80090c2:	e7d1      	b.n	8009068 <_scanf_float+0x3b0>
 80090c4:	4630      	mov	r0, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	f7f7 fdae 	bl	8000c28 <__aeabi_d2f>
 80090cc:	6028      	str	r0, [r5, #0]
 80090ce:	e7cb      	b.n	8009068 <_scanf_float+0x3b0>
 80090d0:	f04f 0900 	mov.w	r9, #0
 80090d4:	e629      	b.n	8008d2a <_scanf_float+0x72>
 80090d6:	bf00      	nop
 80090d8:	0800e484 	.word	0x0800e484
 80090dc:	0800e81d 	.word	0x0800e81d

080090e0 <std>:
 80090e0:	2300      	movs	r3, #0
 80090e2:	b510      	push	{r4, lr}
 80090e4:	4604      	mov	r4, r0
 80090e6:	e9c0 3300 	strd	r3, r3, [r0]
 80090ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ee:	6083      	str	r3, [r0, #8]
 80090f0:	8181      	strh	r1, [r0, #12]
 80090f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80090f4:	81c2      	strh	r2, [r0, #14]
 80090f6:	6183      	str	r3, [r0, #24]
 80090f8:	4619      	mov	r1, r3
 80090fa:	2208      	movs	r2, #8
 80090fc:	305c      	adds	r0, #92	@ 0x5c
 80090fe:	f000 fa19 	bl	8009534 <memset>
 8009102:	4b0d      	ldr	r3, [pc, #52]	@ (8009138 <std+0x58>)
 8009104:	6263      	str	r3, [r4, #36]	@ 0x24
 8009106:	4b0d      	ldr	r3, [pc, #52]	@ (800913c <std+0x5c>)
 8009108:	62a3      	str	r3, [r4, #40]	@ 0x28
 800910a:	4b0d      	ldr	r3, [pc, #52]	@ (8009140 <std+0x60>)
 800910c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800910e:	4b0d      	ldr	r3, [pc, #52]	@ (8009144 <std+0x64>)
 8009110:	6323      	str	r3, [r4, #48]	@ 0x30
 8009112:	4b0d      	ldr	r3, [pc, #52]	@ (8009148 <std+0x68>)
 8009114:	6224      	str	r4, [r4, #32]
 8009116:	429c      	cmp	r4, r3
 8009118:	d006      	beq.n	8009128 <std+0x48>
 800911a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800911e:	4294      	cmp	r4, r2
 8009120:	d002      	beq.n	8009128 <std+0x48>
 8009122:	33d0      	adds	r3, #208	@ 0xd0
 8009124:	429c      	cmp	r4, r3
 8009126:	d105      	bne.n	8009134 <std+0x54>
 8009128:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800912c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009130:	f000 ba7c 	b.w	800962c <__retarget_lock_init_recursive>
 8009134:	bd10      	pop	{r4, pc}
 8009136:	bf00      	nop
 8009138:	08009385 	.word	0x08009385
 800913c:	080093a7 	.word	0x080093a7
 8009140:	080093df 	.word	0x080093df
 8009144:	08009403 	.word	0x08009403
 8009148:	200006f4 	.word	0x200006f4

0800914c <stdio_exit_handler>:
 800914c:	4a02      	ldr	r2, [pc, #8]	@ (8009158 <stdio_exit_handler+0xc>)
 800914e:	4903      	ldr	r1, [pc, #12]	@ (800915c <stdio_exit_handler+0x10>)
 8009150:	4803      	ldr	r0, [pc, #12]	@ (8009160 <stdio_exit_handler+0x14>)
 8009152:	f000 b869 	b.w	8009228 <_fwalk_sglue>
 8009156:	bf00      	nop
 8009158:	2000001c 	.word	0x2000001c
 800915c:	0800c181 	.word	0x0800c181
 8009160:	2000002c 	.word	0x2000002c

08009164 <cleanup_stdio>:
 8009164:	6841      	ldr	r1, [r0, #4]
 8009166:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <cleanup_stdio+0x34>)
 8009168:	4299      	cmp	r1, r3
 800916a:	b510      	push	{r4, lr}
 800916c:	4604      	mov	r4, r0
 800916e:	d001      	beq.n	8009174 <cleanup_stdio+0x10>
 8009170:	f003 f806 	bl	800c180 <_fflush_r>
 8009174:	68a1      	ldr	r1, [r4, #8]
 8009176:	4b09      	ldr	r3, [pc, #36]	@ (800919c <cleanup_stdio+0x38>)
 8009178:	4299      	cmp	r1, r3
 800917a:	d002      	beq.n	8009182 <cleanup_stdio+0x1e>
 800917c:	4620      	mov	r0, r4
 800917e:	f002 ffff 	bl	800c180 <_fflush_r>
 8009182:	68e1      	ldr	r1, [r4, #12]
 8009184:	4b06      	ldr	r3, [pc, #24]	@ (80091a0 <cleanup_stdio+0x3c>)
 8009186:	4299      	cmp	r1, r3
 8009188:	d004      	beq.n	8009194 <cleanup_stdio+0x30>
 800918a:	4620      	mov	r0, r4
 800918c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009190:	f002 bff6 	b.w	800c180 <_fflush_r>
 8009194:	bd10      	pop	{r4, pc}
 8009196:	bf00      	nop
 8009198:	200006f4 	.word	0x200006f4
 800919c:	2000075c 	.word	0x2000075c
 80091a0:	200007c4 	.word	0x200007c4

080091a4 <global_stdio_init.part.0>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	4b0b      	ldr	r3, [pc, #44]	@ (80091d4 <global_stdio_init.part.0+0x30>)
 80091a8:	4c0b      	ldr	r4, [pc, #44]	@ (80091d8 <global_stdio_init.part.0+0x34>)
 80091aa:	4a0c      	ldr	r2, [pc, #48]	@ (80091dc <global_stdio_init.part.0+0x38>)
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	4620      	mov	r0, r4
 80091b0:	2200      	movs	r2, #0
 80091b2:	2104      	movs	r1, #4
 80091b4:	f7ff ff94 	bl	80090e0 <std>
 80091b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091bc:	2201      	movs	r2, #1
 80091be:	2109      	movs	r1, #9
 80091c0:	f7ff ff8e 	bl	80090e0 <std>
 80091c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091c8:	2202      	movs	r2, #2
 80091ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ce:	2112      	movs	r1, #18
 80091d0:	f7ff bf86 	b.w	80090e0 <std>
 80091d4:	2000082c 	.word	0x2000082c
 80091d8:	200006f4 	.word	0x200006f4
 80091dc:	0800914d 	.word	0x0800914d

080091e0 <__sfp_lock_acquire>:
 80091e0:	4801      	ldr	r0, [pc, #4]	@ (80091e8 <__sfp_lock_acquire+0x8>)
 80091e2:	f000 ba24 	b.w	800962e <__retarget_lock_acquire_recursive>
 80091e6:	bf00      	nop
 80091e8:	20000835 	.word	0x20000835

080091ec <__sfp_lock_release>:
 80091ec:	4801      	ldr	r0, [pc, #4]	@ (80091f4 <__sfp_lock_release+0x8>)
 80091ee:	f000 ba1f 	b.w	8009630 <__retarget_lock_release_recursive>
 80091f2:	bf00      	nop
 80091f4:	20000835 	.word	0x20000835

080091f8 <__sinit>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	4604      	mov	r4, r0
 80091fc:	f7ff fff0 	bl	80091e0 <__sfp_lock_acquire>
 8009200:	6a23      	ldr	r3, [r4, #32]
 8009202:	b11b      	cbz	r3, 800920c <__sinit+0x14>
 8009204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009208:	f7ff bff0 	b.w	80091ec <__sfp_lock_release>
 800920c:	4b04      	ldr	r3, [pc, #16]	@ (8009220 <__sinit+0x28>)
 800920e:	6223      	str	r3, [r4, #32]
 8009210:	4b04      	ldr	r3, [pc, #16]	@ (8009224 <__sinit+0x2c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1f5      	bne.n	8009204 <__sinit+0xc>
 8009218:	f7ff ffc4 	bl	80091a4 <global_stdio_init.part.0>
 800921c:	e7f2      	b.n	8009204 <__sinit+0xc>
 800921e:	bf00      	nop
 8009220:	08009165 	.word	0x08009165
 8009224:	2000082c 	.word	0x2000082c

08009228 <_fwalk_sglue>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	4607      	mov	r7, r0
 800922e:	4688      	mov	r8, r1
 8009230:	4614      	mov	r4, r2
 8009232:	2600      	movs	r6, #0
 8009234:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009238:	f1b9 0901 	subs.w	r9, r9, #1
 800923c:	d505      	bpl.n	800924a <_fwalk_sglue+0x22>
 800923e:	6824      	ldr	r4, [r4, #0]
 8009240:	2c00      	cmp	r4, #0
 8009242:	d1f7      	bne.n	8009234 <_fwalk_sglue+0xc>
 8009244:	4630      	mov	r0, r6
 8009246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d907      	bls.n	8009260 <_fwalk_sglue+0x38>
 8009250:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009254:	3301      	adds	r3, #1
 8009256:	d003      	beq.n	8009260 <_fwalk_sglue+0x38>
 8009258:	4629      	mov	r1, r5
 800925a:	4638      	mov	r0, r7
 800925c:	47c0      	blx	r8
 800925e:	4306      	orrs	r6, r0
 8009260:	3568      	adds	r5, #104	@ 0x68
 8009262:	e7e9      	b.n	8009238 <_fwalk_sglue+0x10>

08009264 <iprintf>:
 8009264:	b40f      	push	{r0, r1, r2, r3}
 8009266:	b507      	push	{r0, r1, r2, lr}
 8009268:	4906      	ldr	r1, [pc, #24]	@ (8009284 <iprintf+0x20>)
 800926a:	ab04      	add	r3, sp, #16
 800926c:	6808      	ldr	r0, [r1, #0]
 800926e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009272:	6881      	ldr	r1, [r0, #8]
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	f002 fde7 	bl	800be48 <_vfiprintf_r>
 800927a:	b003      	add	sp, #12
 800927c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009280:	b004      	add	sp, #16
 8009282:	4770      	bx	lr
 8009284:	20000028 	.word	0x20000028

08009288 <_puts_r>:
 8009288:	6a03      	ldr	r3, [r0, #32]
 800928a:	b570      	push	{r4, r5, r6, lr}
 800928c:	6884      	ldr	r4, [r0, #8]
 800928e:	4605      	mov	r5, r0
 8009290:	460e      	mov	r6, r1
 8009292:	b90b      	cbnz	r3, 8009298 <_puts_r+0x10>
 8009294:	f7ff ffb0 	bl	80091f8 <__sinit>
 8009298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800929a:	07db      	lsls	r3, r3, #31
 800929c:	d405      	bmi.n	80092aa <_puts_r+0x22>
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	0598      	lsls	r0, r3, #22
 80092a2:	d402      	bmi.n	80092aa <_puts_r+0x22>
 80092a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092a6:	f000 f9c2 	bl	800962e <__retarget_lock_acquire_recursive>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	0719      	lsls	r1, r3, #28
 80092ae:	d502      	bpl.n	80092b6 <_puts_r+0x2e>
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d135      	bne.n	8009322 <_puts_r+0x9a>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 f8e5 	bl	8009488 <__swsetup_r>
 80092be:	b380      	cbz	r0, 8009322 <_puts_r+0x9a>
 80092c0:	f04f 35ff 	mov.w	r5, #4294967295
 80092c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092c6:	07da      	lsls	r2, r3, #31
 80092c8:	d405      	bmi.n	80092d6 <_puts_r+0x4e>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	059b      	lsls	r3, r3, #22
 80092ce:	d402      	bmi.n	80092d6 <_puts_r+0x4e>
 80092d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092d2:	f000 f9ad 	bl	8009630 <__retarget_lock_release_recursive>
 80092d6:	4628      	mov	r0, r5
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
 80092da:	2b00      	cmp	r3, #0
 80092dc:	da04      	bge.n	80092e8 <_puts_r+0x60>
 80092de:	69a2      	ldr	r2, [r4, #24]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	dc17      	bgt.n	8009314 <_puts_r+0x8c>
 80092e4:	290a      	cmp	r1, #10
 80092e6:	d015      	beq.n	8009314 <_puts_r+0x8c>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	6022      	str	r2, [r4, #0]
 80092ee:	7019      	strb	r1, [r3, #0]
 80092f0:	68a3      	ldr	r3, [r4, #8]
 80092f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092f6:	3b01      	subs	r3, #1
 80092f8:	60a3      	str	r3, [r4, #8]
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d1ed      	bne.n	80092da <_puts_r+0x52>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	da11      	bge.n	8009326 <_puts_r+0x9e>
 8009302:	4622      	mov	r2, r4
 8009304:	210a      	movs	r1, #10
 8009306:	4628      	mov	r0, r5
 8009308:	f000 f87f 	bl	800940a <__swbuf_r>
 800930c:	3001      	adds	r0, #1
 800930e:	d0d7      	beq.n	80092c0 <_puts_r+0x38>
 8009310:	250a      	movs	r5, #10
 8009312:	e7d7      	b.n	80092c4 <_puts_r+0x3c>
 8009314:	4622      	mov	r2, r4
 8009316:	4628      	mov	r0, r5
 8009318:	f000 f877 	bl	800940a <__swbuf_r>
 800931c:	3001      	adds	r0, #1
 800931e:	d1e7      	bne.n	80092f0 <_puts_r+0x68>
 8009320:	e7ce      	b.n	80092c0 <_puts_r+0x38>
 8009322:	3e01      	subs	r6, #1
 8009324:	e7e4      	b.n	80092f0 <_puts_r+0x68>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	6022      	str	r2, [r4, #0]
 800932c:	220a      	movs	r2, #10
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	e7ee      	b.n	8009310 <_puts_r+0x88>
	...

08009334 <puts>:
 8009334:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <puts+0xc>)
 8009336:	4601      	mov	r1, r0
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	f7ff bfa5 	b.w	8009288 <_puts_r>
 800933e:	bf00      	nop
 8009340:	20000028 	.word	0x20000028

08009344 <siprintf>:
 8009344:	b40e      	push	{r1, r2, r3}
 8009346:	b500      	push	{lr}
 8009348:	b09c      	sub	sp, #112	@ 0x70
 800934a:	ab1d      	add	r3, sp, #116	@ 0x74
 800934c:	9002      	str	r0, [sp, #8]
 800934e:	9006      	str	r0, [sp, #24]
 8009350:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009354:	4809      	ldr	r0, [pc, #36]	@ (800937c <siprintf+0x38>)
 8009356:	9107      	str	r1, [sp, #28]
 8009358:	9104      	str	r1, [sp, #16]
 800935a:	4909      	ldr	r1, [pc, #36]	@ (8009380 <siprintf+0x3c>)
 800935c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009360:	9105      	str	r1, [sp, #20]
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	a902      	add	r1, sp, #8
 8009368:	f002 fc48 	bl	800bbfc <_svfiprintf_r>
 800936c:	9b02      	ldr	r3, [sp, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	b01c      	add	sp, #112	@ 0x70
 8009374:	f85d eb04 	ldr.w	lr, [sp], #4
 8009378:	b003      	add	sp, #12
 800937a:	4770      	bx	lr
 800937c:	20000028 	.word	0x20000028
 8009380:	ffff0208 	.word	0xffff0208

08009384 <__sread>:
 8009384:	b510      	push	{r4, lr}
 8009386:	460c      	mov	r4, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	f000 f900 	bl	8009590 <_read_r>
 8009390:	2800      	cmp	r0, #0
 8009392:	bfab      	itete	ge
 8009394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009396:	89a3      	ldrhlt	r3, [r4, #12]
 8009398:	181b      	addge	r3, r3, r0
 800939a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800939e:	bfac      	ite	ge
 80093a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093a2:	81a3      	strhlt	r3, [r4, #12]
 80093a4:	bd10      	pop	{r4, pc}

080093a6 <__swrite>:
 80093a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	461f      	mov	r7, r3
 80093ac:	898b      	ldrh	r3, [r1, #12]
 80093ae:	05db      	lsls	r3, r3, #23
 80093b0:	4605      	mov	r5, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4616      	mov	r6, r2
 80093b6:	d505      	bpl.n	80093c4 <__swrite+0x1e>
 80093b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093bc:	2302      	movs	r3, #2
 80093be:	2200      	movs	r2, #0
 80093c0:	f000 f8d4 	bl	800956c <_lseek_r>
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	4632      	mov	r2, r6
 80093d2:	463b      	mov	r3, r7
 80093d4:	4628      	mov	r0, r5
 80093d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093da:	f000 b8eb 	b.w	80095b4 <_write_r>

080093de <__sseek>:
 80093de:	b510      	push	{r4, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e6:	f000 f8c1 	bl	800956c <_lseek_r>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	bf15      	itete	ne
 80093f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093fa:	81a3      	strheq	r3, [r4, #12]
 80093fc:	bf18      	it	ne
 80093fe:	81a3      	strhne	r3, [r4, #12]
 8009400:	bd10      	pop	{r4, pc}

08009402 <__sclose>:
 8009402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009406:	f000 b8a1 	b.w	800954c <_close_r>

0800940a <__swbuf_r>:
 800940a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940c:	460e      	mov	r6, r1
 800940e:	4614      	mov	r4, r2
 8009410:	4605      	mov	r5, r0
 8009412:	b118      	cbz	r0, 800941c <__swbuf_r+0x12>
 8009414:	6a03      	ldr	r3, [r0, #32]
 8009416:	b90b      	cbnz	r3, 800941c <__swbuf_r+0x12>
 8009418:	f7ff feee 	bl	80091f8 <__sinit>
 800941c:	69a3      	ldr	r3, [r4, #24]
 800941e:	60a3      	str	r3, [r4, #8]
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	071a      	lsls	r2, r3, #28
 8009424:	d501      	bpl.n	800942a <__swbuf_r+0x20>
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	b943      	cbnz	r3, 800943c <__swbuf_r+0x32>
 800942a:	4621      	mov	r1, r4
 800942c:	4628      	mov	r0, r5
 800942e:	f000 f82b 	bl	8009488 <__swsetup_r>
 8009432:	b118      	cbz	r0, 800943c <__swbuf_r+0x32>
 8009434:	f04f 37ff 	mov.w	r7, #4294967295
 8009438:	4638      	mov	r0, r7
 800943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	6922      	ldr	r2, [r4, #16]
 8009440:	1a98      	subs	r0, r3, r2
 8009442:	6963      	ldr	r3, [r4, #20]
 8009444:	b2f6      	uxtb	r6, r6
 8009446:	4283      	cmp	r3, r0
 8009448:	4637      	mov	r7, r6
 800944a:	dc05      	bgt.n	8009458 <__swbuf_r+0x4e>
 800944c:	4621      	mov	r1, r4
 800944e:	4628      	mov	r0, r5
 8009450:	f002 fe96 	bl	800c180 <_fflush_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	d1ed      	bne.n	8009434 <__swbuf_r+0x2a>
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	3b01      	subs	r3, #1
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	701e      	strb	r6, [r3, #0]
 8009466:	6962      	ldr	r2, [r4, #20]
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	429a      	cmp	r2, r3
 800946c:	d004      	beq.n	8009478 <__swbuf_r+0x6e>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	07db      	lsls	r3, r3, #31
 8009472:	d5e1      	bpl.n	8009438 <__swbuf_r+0x2e>
 8009474:	2e0a      	cmp	r6, #10
 8009476:	d1df      	bne.n	8009438 <__swbuf_r+0x2e>
 8009478:	4621      	mov	r1, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f002 fe80 	bl	800c180 <_fflush_r>
 8009480:	2800      	cmp	r0, #0
 8009482:	d0d9      	beq.n	8009438 <__swbuf_r+0x2e>
 8009484:	e7d6      	b.n	8009434 <__swbuf_r+0x2a>
	...

08009488 <__swsetup_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4b29      	ldr	r3, [pc, #164]	@ (8009530 <__swsetup_r+0xa8>)
 800948c:	4605      	mov	r5, r0
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	460c      	mov	r4, r1
 8009492:	b118      	cbz	r0, 800949c <__swsetup_r+0x14>
 8009494:	6a03      	ldr	r3, [r0, #32]
 8009496:	b90b      	cbnz	r3, 800949c <__swsetup_r+0x14>
 8009498:	f7ff feae 	bl	80091f8 <__sinit>
 800949c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a0:	0719      	lsls	r1, r3, #28
 80094a2:	d422      	bmi.n	80094ea <__swsetup_r+0x62>
 80094a4:	06da      	lsls	r2, r3, #27
 80094a6:	d407      	bmi.n	80094b8 <__swsetup_r+0x30>
 80094a8:	2209      	movs	r2, #9
 80094aa:	602a      	str	r2, [r5, #0]
 80094ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295
 80094b6:	e033      	b.n	8009520 <__swsetup_r+0x98>
 80094b8:	0758      	lsls	r0, r3, #29
 80094ba:	d512      	bpl.n	80094e2 <__swsetup_r+0x5a>
 80094bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094be:	b141      	cbz	r1, 80094d2 <__swsetup_r+0x4a>
 80094c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094c4:	4299      	cmp	r1, r3
 80094c6:	d002      	beq.n	80094ce <__swsetup_r+0x46>
 80094c8:	4628      	mov	r0, r5
 80094ca:	f000 ff05 	bl	800a2d8 <_free_r>
 80094ce:	2300      	movs	r3, #0
 80094d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	2300      	movs	r3, #0
 80094dc:	6063      	str	r3, [r4, #4]
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	f043 0308 	orr.w	r3, r3, #8
 80094e8:	81a3      	strh	r3, [r4, #12]
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	b94b      	cbnz	r3, 8009502 <__swsetup_r+0x7a>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f8:	d003      	beq.n	8009502 <__swsetup_r+0x7a>
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f002 fe8d 	bl	800c21c <__smakebuf_r>
 8009502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009506:	f013 0201 	ands.w	r2, r3, #1
 800950a:	d00a      	beq.n	8009522 <__swsetup_r+0x9a>
 800950c:	2200      	movs	r2, #0
 800950e:	60a2      	str	r2, [r4, #8]
 8009510:	6962      	ldr	r2, [r4, #20]
 8009512:	4252      	negs	r2, r2
 8009514:	61a2      	str	r2, [r4, #24]
 8009516:	6922      	ldr	r2, [r4, #16]
 8009518:	b942      	cbnz	r2, 800952c <__swsetup_r+0xa4>
 800951a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800951e:	d1c5      	bne.n	80094ac <__swsetup_r+0x24>
 8009520:	bd38      	pop	{r3, r4, r5, pc}
 8009522:	0799      	lsls	r1, r3, #30
 8009524:	bf58      	it	pl
 8009526:	6962      	ldrpl	r2, [r4, #20]
 8009528:	60a2      	str	r2, [r4, #8]
 800952a:	e7f4      	b.n	8009516 <__swsetup_r+0x8e>
 800952c:	2000      	movs	r0, #0
 800952e:	e7f7      	b.n	8009520 <__swsetup_r+0x98>
 8009530:	20000028 	.word	0x20000028

08009534 <memset>:
 8009534:	4402      	add	r2, r0
 8009536:	4603      	mov	r3, r0
 8009538:	4293      	cmp	r3, r2
 800953a:	d100      	bne.n	800953e <memset+0xa>
 800953c:	4770      	bx	lr
 800953e:	f803 1b01 	strb.w	r1, [r3], #1
 8009542:	e7f9      	b.n	8009538 <memset+0x4>

08009544 <_localeconv_r>:
 8009544:	4800      	ldr	r0, [pc, #0]	@ (8009548 <_localeconv_r+0x4>)
 8009546:	4770      	bx	lr
 8009548:	20000168 	.word	0x20000168

0800954c <_close_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d06      	ldr	r5, [pc, #24]	@ (8009568 <_close_r+0x1c>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	f7fa f834 	bl	80035c4 <_close>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_close_r+0x1a>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_close_r+0x1a>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20000830 	.word	0x20000830

0800956c <_lseek_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	@ (800958c <_lseek_r+0x20>)
 8009570:	4604      	mov	r4, r0
 8009572:	4608      	mov	r0, r1
 8009574:	4611      	mov	r1, r2
 8009576:	2200      	movs	r2, #0
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7fa f849 	bl	8003612 <_lseek>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_lseek_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_lseek_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20000830 	.word	0x20000830

08009590 <_read_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	@ (80095b0 <_read_r+0x20>)
 8009594:	4604      	mov	r4, r0
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	2200      	movs	r2, #0
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7f9 fff3 	bl	800358a <_read>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_read_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_read_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	20000830 	.word	0x20000830

080095b4 <_write_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d07      	ldr	r5, [pc, #28]	@ (80095d4 <_write_r+0x20>)
 80095b8:	4604      	mov	r4, r0
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f9 fb30 	bl	8002c28 <_write>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_write_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_write_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20000830 	.word	0x20000830

080095d8 <__errno>:
 80095d8:	4b01      	ldr	r3, [pc, #4]	@ (80095e0 <__errno+0x8>)
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20000028 	.word	0x20000028

080095e4 <__libc_init_array>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	4d0d      	ldr	r5, [pc, #52]	@ (800961c <__libc_init_array+0x38>)
 80095e8:	4c0d      	ldr	r4, [pc, #52]	@ (8009620 <__libc_init_array+0x3c>)
 80095ea:	1b64      	subs	r4, r4, r5
 80095ec:	10a4      	asrs	r4, r4, #2
 80095ee:	2600      	movs	r6, #0
 80095f0:	42a6      	cmp	r6, r4
 80095f2:	d109      	bne.n	8009608 <__libc_init_array+0x24>
 80095f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009624 <__libc_init_array+0x40>)
 80095f6:	4c0c      	ldr	r4, [pc, #48]	@ (8009628 <__libc_init_array+0x44>)
 80095f8:	f004 fece 	bl	800e398 <_init>
 80095fc:	1b64      	subs	r4, r4, r5
 80095fe:	10a4      	asrs	r4, r4, #2
 8009600:	2600      	movs	r6, #0
 8009602:	42a6      	cmp	r6, r4
 8009604:	d105      	bne.n	8009612 <__libc_init_array+0x2e>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	f855 3b04 	ldr.w	r3, [r5], #4
 800960c:	4798      	blx	r3
 800960e:	3601      	adds	r6, #1
 8009610:	e7ee      	b.n	80095f0 <__libc_init_array+0xc>
 8009612:	f855 3b04 	ldr.w	r3, [r5], #4
 8009616:	4798      	blx	r3
 8009618:	3601      	adds	r6, #1
 800961a:	e7f2      	b.n	8009602 <__libc_init_array+0x1e>
 800961c:	0800ead0 	.word	0x0800ead0
 8009620:	0800ead0 	.word	0x0800ead0
 8009624:	0800ead0 	.word	0x0800ead0
 8009628:	0800ead4 	.word	0x0800ead4

0800962c <__retarget_lock_init_recursive>:
 800962c:	4770      	bx	lr

0800962e <__retarget_lock_acquire_recursive>:
 800962e:	4770      	bx	lr

08009630 <__retarget_lock_release_recursive>:
 8009630:	4770      	bx	lr
	...

08009634 <nanf>:
 8009634:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800963c <nanf+0x8>
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	7fc00000 	.word	0x7fc00000

08009640 <quorem>:
 8009640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	6903      	ldr	r3, [r0, #16]
 8009646:	690c      	ldr	r4, [r1, #16]
 8009648:	42a3      	cmp	r3, r4
 800964a:	4607      	mov	r7, r0
 800964c:	db7e      	blt.n	800974c <quorem+0x10c>
 800964e:	3c01      	subs	r4, #1
 8009650:	f101 0814 	add.w	r8, r1, #20
 8009654:	00a3      	lsls	r3, r4, #2
 8009656:	f100 0514 	add.w	r5, r0, #20
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800966a:	3301      	adds	r3, #1
 800966c:	429a      	cmp	r2, r3
 800966e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009672:	fbb2 f6f3 	udiv	r6, r2, r3
 8009676:	d32e      	bcc.n	80096d6 <quorem+0x96>
 8009678:	f04f 0a00 	mov.w	sl, #0
 800967c:	46c4      	mov	ip, r8
 800967e:	46ae      	mov	lr, r5
 8009680:	46d3      	mov	fp, sl
 8009682:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009686:	b298      	uxth	r0, r3
 8009688:	fb06 a000 	mla	r0, r6, r0, sl
 800968c:	0c02      	lsrs	r2, r0, #16
 800968e:	0c1b      	lsrs	r3, r3, #16
 8009690:	fb06 2303 	mla	r3, r6, r3, r2
 8009694:	f8de 2000 	ldr.w	r2, [lr]
 8009698:	b280      	uxth	r0, r0
 800969a:	b292      	uxth	r2, r2
 800969c:	1a12      	subs	r2, r2, r0
 800969e:	445a      	add	r2, fp
 80096a0:	f8de 0000 	ldr.w	r0, [lr]
 80096a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80096ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80096b2:	b292      	uxth	r2, r2
 80096b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096b8:	45e1      	cmp	r9, ip
 80096ba:	f84e 2b04 	str.w	r2, [lr], #4
 80096be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096c2:	d2de      	bcs.n	8009682 <quorem+0x42>
 80096c4:	9b00      	ldr	r3, [sp, #0]
 80096c6:	58eb      	ldr	r3, [r5, r3]
 80096c8:	b92b      	cbnz	r3, 80096d6 <quorem+0x96>
 80096ca:	9b01      	ldr	r3, [sp, #4]
 80096cc:	3b04      	subs	r3, #4
 80096ce:	429d      	cmp	r5, r3
 80096d0:	461a      	mov	r2, r3
 80096d2:	d32f      	bcc.n	8009734 <quorem+0xf4>
 80096d4:	613c      	str	r4, [r7, #16]
 80096d6:	4638      	mov	r0, r7
 80096d8:	f001 f9c2 	bl	800aa60 <__mcmp>
 80096dc:	2800      	cmp	r0, #0
 80096de:	db25      	blt.n	800972c <quorem+0xec>
 80096e0:	4629      	mov	r1, r5
 80096e2:	2000      	movs	r0, #0
 80096e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80096e8:	f8d1 c000 	ldr.w	ip, [r1]
 80096ec:	fa1f fe82 	uxth.w	lr, r2
 80096f0:	fa1f f38c 	uxth.w	r3, ip
 80096f4:	eba3 030e 	sub.w	r3, r3, lr
 80096f8:	4403      	add	r3, r0
 80096fa:	0c12      	lsrs	r2, r2, #16
 80096fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009700:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009704:	b29b      	uxth	r3, r3
 8009706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800970a:	45c1      	cmp	r9, r8
 800970c:	f841 3b04 	str.w	r3, [r1], #4
 8009710:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009714:	d2e6      	bcs.n	80096e4 <quorem+0xa4>
 8009716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800971a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800971e:	b922      	cbnz	r2, 800972a <quorem+0xea>
 8009720:	3b04      	subs	r3, #4
 8009722:	429d      	cmp	r5, r3
 8009724:	461a      	mov	r2, r3
 8009726:	d30b      	bcc.n	8009740 <quorem+0x100>
 8009728:	613c      	str	r4, [r7, #16]
 800972a:	3601      	adds	r6, #1
 800972c:	4630      	mov	r0, r6
 800972e:	b003      	add	sp, #12
 8009730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	3b04      	subs	r3, #4
 8009738:	2a00      	cmp	r2, #0
 800973a:	d1cb      	bne.n	80096d4 <quorem+0x94>
 800973c:	3c01      	subs	r4, #1
 800973e:	e7c6      	b.n	80096ce <quorem+0x8e>
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	3b04      	subs	r3, #4
 8009744:	2a00      	cmp	r2, #0
 8009746:	d1ef      	bne.n	8009728 <quorem+0xe8>
 8009748:	3c01      	subs	r4, #1
 800974a:	e7ea      	b.n	8009722 <quorem+0xe2>
 800974c:	2000      	movs	r0, #0
 800974e:	e7ee      	b.n	800972e <quorem+0xee>

08009750 <_dtoa_r>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	69c7      	ldr	r7, [r0, #28]
 8009756:	b099      	sub	sp, #100	@ 0x64
 8009758:	ed8d 0b02 	vstr	d0, [sp, #8]
 800975c:	ec55 4b10 	vmov	r4, r5, d0
 8009760:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009762:	9109      	str	r1, [sp, #36]	@ 0x24
 8009764:	4683      	mov	fp, r0
 8009766:	920e      	str	r2, [sp, #56]	@ 0x38
 8009768:	9313      	str	r3, [sp, #76]	@ 0x4c
 800976a:	b97f      	cbnz	r7, 800978c <_dtoa_r+0x3c>
 800976c:	2010      	movs	r0, #16
 800976e:	f000 fdfd 	bl	800a36c <malloc>
 8009772:	4602      	mov	r2, r0
 8009774:	f8cb 001c 	str.w	r0, [fp, #28]
 8009778:	b920      	cbnz	r0, 8009784 <_dtoa_r+0x34>
 800977a:	4ba7      	ldr	r3, [pc, #668]	@ (8009a18 <_dtoa_r+0x2c8>)
 800977c:	21ef      	movs	r1, #239	@ 0xef
 800977e:	48a7      	ldr	r0, [pc, #668]	@ (8009a1c <_dtoa_r+0x2cc>)
 8009780:	f002 fdfe 	bl	800c380 <__assert_func>
 8009784:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009788:	6007      	str	r7, [r0, #0]
 800978a:	60c7      	str	r7, [r0, #12]
 800978c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009790:	6819      	ldr	r1, [r3, #0]
 8009792:	b159      	cbz	r1, 80097ac <_dtoa_r+0x5c>
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	604a      	str	r2, [r1, #4]
 8009798:	2301      	movs	r3, #1
 800979a:	4093      	lsls	r3, r2
 800979c:	608b      	str	r3, [r1, #8]
 800979e:	4658      	mov	r0, fp
 80097a0:	f000 feda 	bl	800a558 <_Bfree>
 80097a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	1e2b      	subs	r3, r5, #0
 80097ae:	bfb9      	ittee	lt
 80097b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80097b4:	9303      	strlt	r3, [sp, #12]
 80097b6:	2300      	movge	r3, #0
 80097b8:	6033      	strge	r3, [r6, #0]
 80097ba:	9f03      	ldr	r7, [sp, #12]
 80097bc:	4b98      	ldr	r3, [pc, #608]	@ (8009a20 <_dtoa_r+0x2d0>)
 80097be:	bfbc      	itt	lt
 80097c0:	2201      	movlt	r2, #1
 80097c2:	6032      	strlt	r2, [r6, #0]
 80097c4:	43bb      	bics	r3, r7
 80097c6:	d112      	bne.n	80097ee <_dtoa_r+0x9e>
 80097c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097d4:	4323      	orrs	r3, r4
 80097d6:	f000 854d 	beq.w	800a274 <_dtoa_r+0xb24>
 80097da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009a34 <_dtoa_r+0x2e4>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 854f 	beq.w	800a284 <_dtoa_r+0xb34>
 80097e6:	f10a 0303 	add.w	r3, sl, #3
 80097ea:	f000 bd49 	b.w	800a280 <_dtoa_r+0xb30>
 80097ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097f2:	2200      	movs	r2, #0
 80097f4:	ec51 0b17 	vmov	r0, r1, d7
 80097f8:	2300      	movs	r3, #0
 80097fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80097fe:	f7f7 f983 	bl	8000b08 <__aeabi_dcmpeq>
 8009802:	4680      	mov	r8, r0
 8009804:	b158      	cbz	r0, 800981e <_dtoa_r+0xce>
 8009806:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009808:	2301      	movs	r3, #1
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800980e:	b113      	cbz	r3, 8009816 <_dtoa_r+0xc6>
 8009810:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009812:	4b84      	ldr	r3, [pc, #528]	@ (8009a24 <_dtoa_r+0x2d4>)
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009a38 <_dtoa_r+0x2e8>
 800981a:	f000 bd33 	b.w	800a284 <_dtoa_r+0xb34>
 800981e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009822:	aa16      	add	r2, sp, #88	@ 0x58
 8009824:	a917      	add	r1, sp, #92	@ 0x5c
 8009826:	4658      	mov	r0, fp
 8009828:	f001 fa3a 	bl	800aca0 <__d2b>
 800982c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009830:	4681      	mov	r9, r0
 8009832:	2e00      	cmp	r6, #0
 8009834:	d077      	beq.n	8009926 <_dtoa_r+0x1d6>
 8009836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009838:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800983c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009840:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009844:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009848:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800984c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009850:	4619      	mov	r1, r3
 8009852:	2200      	movs	r2, #0
 8009854:	4b74      	ldr	r3, [pc, #464]	@ (8009a28 <_dtoa_r+0x2d8>)
 8009856:	f7f6 fd37 	bl	80002c8 <__aeabi_dsub>
 800985a:	a369      	add	r3, pc, #420	@ (adr r3, 8009a00 <_dtoa_r+0x2b0>)
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f7f6 feea 	bl	8000638 <__aeabi_dmul>
 8009864:	a368      	add	r3, pc, #416	@ (adr r3, 8009a08 <_dtoa_r+0x2b8>)
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	f7f6 fd2f 	bl	80002cc <__adddf3>
 800986e:	4604      	mov	r4, r0
 8009870:	4630      	mov	r0, r6
 8009872:	460d      	mov	r5, r1
 8009874:	f7f6 fe76 	bl	8000564 <__aeabi_i2d>
 8009878:	a365      	add	r3, pc, #404	@ (adr r3, 8009a10 <_dtoa_r+0x2c0>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	f7f6 fedb 	bl	8000638 <__aeabi_dmul>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4620      	mov	r0, r4
 8009888:	4629      	mov	r1, r5
 800988a:	f7f6 fd1f 	bl	80002cc <__adddf3>
 800988e:	4604      	mov	r4, r0
 8009890:	460d      	mov	r5, r1
 8009892:	f7f7 f981 	bl	8000b98 <__aeabi_d2iz>
 8009896:	2200      	movs	r2, #0
 8009898:	4607      	mov	r7, r0
 800989a:	2300      	movs	r3, #0
 800989c:	4620      	mov	r0, r4
 800989e:	4629      	mov	r1, r5
 80098a0:	f7f7 f93c 	bl	8000b1c <__aeabi_dcmplt>
 80098a4:	b140      	cbz	r0, 80098b8 <_dtoa_r+0x168>
 80098a6:	4638      	mov	r0, r7
 80098a8:	f7f6 fe5c 	bl	8000564 <__aeabi_i2d>
 80098ac:	4622      	mov	r2, r4
 80098ae:	462b      	mov	r3, r5
 80098b0:	f7f7 f92a 	bl	8000b08 <__aeabi_dcmpeq>
 80098b4:	b900      	cbnz	r0, 80098b8 <_dtoa_r+0x168>
 80098b6:	3f01      	subs	r7, #1
 80098b8:	2f16      	cmp	r7, #22
 80098ba:	d851      	bhi.n	8009960 <_dtoa_r+0x210>
 80098bc:	4b5b      	ldr	r3, [pc, #364]	@ (8009a2c <_dtoa_r+0x2dc>)
 80098be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098ca:	f7f7 f927 	bl	8000b1c <__aeabi_dcmplt>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d048      	beq.n	8009964 <_dtoa_r+0x214>
 80098d2:	3f01      	subs	r7, #1
 80098d4:	2300      	movs	r3, #0
 80098d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80098d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098da:	1b9b      	subs	r3, r3, r6
 80098dc:	1e5a      	subs	r2, r3, #1
 80098de:	bf44      	itt	mi
 80098e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80098e4:	2300      	movmi	r3, #0
 80098e6:	9208      	str	r2, [sp, #32]
 80098e8:	bf54      	ite	pl
 80098ea:	f04f 0800 	movpl.w	r8, #0
 80098ee:	9308      	strmi	r3, [sp, #32]
 80098f0:	2f00      	cmp	r7, #0
 80098f2:	db39      	blt.n	8009968 <_dtoa_r+0x218>
 80098f4:	9b08      	ldr	r3, [sp, #32]
 80098f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80098f8:	443b      	add	r3, r7
 80098fa:	9308      	str	r3, [sp, #32]
 80098fc:	2300      	movs	r3, #0
 80098fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009902:	2b09      	cmp	r3, #9
 8009904:	d864      	bhi.n	80099d0 <_dtoa_r+0x280>
 8009906:	2b05      	cmp	r3, #5
 8009908:	bfc4      	itt	gt
 800990a:	3b04      	subgt	r3, #4
 800990c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800990e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009910:	f1a3 0302 	sub.w	r3, r3, #2
 8009914:	bfcc      	ite	gt
 8009916:	2400      	movgt	r4, #0
 8009918:	2401      	movle	r4, #1
 800991a:	2b03      	cmp	r3, #3
 800991c:	d863      	bhi.n	80099e6 <_dtoa_r+0x296>
 800991e:	e8df f003 	tbb	[pc, r3]
 8009922:	372a      	.short	0x372a
 8009924:	5535      	.short	0x5535
 8009926:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800992a:	441e      	add	r6, r3
 800992c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009930:	2b20      	cmp	r3, #32
 8009932:	bfc1      	itttt	gt
 8009934:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009938:	409f      	lslgt	r7, r3
 800993a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800993e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009942:	bfd6      	itet	le
 8009944:	f1c3 0320 	rsble	r3, r3, #32
 8009948:	ea47 0003 	orrgt.w	r0, r7, r3
 800994c:	fa04 f003 	lslle.w	r0, r4, r3
 8009950:	f7f6 fdf8 	bl	8000544 <__aeabi_ui2d>
 8009954:	2201      	movs	r2, #1
 8009956:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800995a:	3e01      	subs	r6, #1
 800995c:	9214      	str	r2, [sp, #80]	@ 0x50
 800995e:	e777      	b.n	8009850 <_dtoa_r+0x100>
 8009960:	2301      	movs	r3, #1
 8009962:	e7b8      	b.n	80098d6 <_dtoa_r+0x186>
 8009964:	9012      	str	r0, [sp, #72]	@ 0x48
 8009966:	e7b7      	b.n	80098d8 <_dtoa_r+0x188>
 8009968:	427b      	negs	r3, r7
 800996a:	930a      	str	r3, [sp, #40]	@ 0x28
 800996c:	2300      	movs	r3, #0
 800996e:	eba8 0807 	sub.w	r8, r8, r7
 8009972:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009974:	e7c4      	b.n	8009900 <_dtoa_r+0x1b0>
 8009976:	2300      	movs	r3, #0
 8009978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800997a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800997c:	2b00      	cmp	r3, #0
 800997e:	dc35      	bgt.n	80099ec <_dtoa_r+0x29c>
 8009980:	2301      	movs	r3, #1
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	461a      	mov	r2, r3
 8009988:	920e      	str	r2, [sp, #56]	@ 0x38
 800998a:	e00b      	b.n	80099a4 <_dtoa_r+0x254>
 800998c:	2301      	movs	r3, #1
 800998e:	e7f3      	b.n	8009978 <_dtoa_r+0x228>
 8009990:	2300      	movs	r3, #0
 8009992:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009996:	18fb      	adds	r3, r7, r3
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	3301      	adds	r3, #1
 800999c:	2b01      	cmp	r3, #1
 800999e:	9307      	str	r3, [sp, #28]
 80099a0:	bfb8      	it	lt
 80099a2:	2301      	movlt	r3, #1
 80099a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80099a8:	2100      	movs	r1, #0
 80099aa:	2204      	movs	r2, #4
 80099ac:	f102 0514 	add.w	r5, r2, #20
 80099b0:	429d      	cmp	r5, r3
 80099b2:	d91f      	bls.n	80099f4 <_dtoa_r+0x2a4>
 80099b4:	6041      	str	r1, [r0, #4]
 80099b6:	4658      	mov	r0, fp
 80099b8:	f000 fd8e 	bl	800a4d8 <_Balloc>
 80099bc:	4682      	mov	sl, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	d13c      	bne.n	8009a3c <_dtoa_r+0x2ec>
 80099c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a30 <_dtoa_r+0x2e0>)
 80099c4:	4602      	mov	r2, r0
 80099c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80099ca:	e6d8      	b.n	800977e <_dtoa_r+0x2e>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e7e0      	b.n	8009992 <_dtoa_r+0x242>
 80099d0:	2401      	movs	r4, #1
 80099d2:	2300      	movs	r3, #0
 80099d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099d8:	f04f 33ff 	mov.w	r3, #4294967295
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	2200      	movs	r2, #0
 80099e2:	2312      	movs	r3, #18
 80099e4:	e7d0      	b.n	8009988 <_dtoa_r+0x238>
 80099e6:	2301      	movs	r3, #1
 80099e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099ea:	e7f5      	b.n	80099d8 <_dtoa_r+0x288>
 80099ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	9307      	str	r3, [sp, #28]
 80099f2:	e7d7      	b.n	80099a4 <_dtoa_r+0x254>
 80099f4:	3101      	adds	r1, #1
 80099f6:	0052      	lsls	r2, r2, #1
 80099f8:	e7d8      	b.n	80099ac <_dtoa_r+0x25c>
 80099fa:	bf00      	nop
 80099fc:	f3af 8000 	nop.w
 8009a00:	636f4361 	.word	0x636f4361
 8009a04:	3fd287a7 	.word	0x3fd287a7
 8009a08:	8b60c8b3 	.word	0x8b60c8b3
 8009a0c:	3fc68a28 	.word	0x3fc68a28
 8009a10:	509f79fb 	.word	0x509f79fb
 8009a14:	3fd34413 	.word	0x3fd34413
 8009a18:	0800e496 	.word	0x0800e496
 8009a1c:	0800e4ad 	.word	0x0800e4ad
 8009a20:	7ff00000 	.word	0x7ff00000
 8009a24:	0800e461 	.word	0x0800e461
 8009a28:	3ff80000 	.word	0x3ff80000
 8009a2c:	0800e5a8 	.word	0x0800e5a8
 8009a30:	0800e505 	.word	0x0800e505
 8009a34:	0800e492 	.word	0x0800e492
 8009a38:	0800e460 	.word	0x0800e460
 8009a3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a40:	6018      	str	r0, [r3, #0]
 8009a42:	9b07      	ldr	r3, [sp, #28]
 8009a44:	2b0e      	cmp	r3, #14
 8009a46:	f200 80a4 	bhi.w	8009b92 <_dtoa_r+0x442>
 8009a4a:	2c00      	cmp	r4, #0
 8009a4c:	f000 80a1 	beq.w	8009b92 <_dtoa_r+0x442>
 8009a50:	2f00      	cmp	r7, #0
 8009a52:	dd33      	ble.n	8009abc <_dtoa_r+0x36c>
 8009a54:	4bad      	ldr	r3, [pc, #692]	@ (8009d0c <_dtoa_r+0x5bc>)
 8009a56:	f007 020f 	and.w	r2, r7, #15
 8009a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a5e:	ed93 7b00 	vldr	d7, [r3]
 8009a62:	05f8      	lsls	r0, r7, #23
 8009a64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a6c:	d516      	bpl.n	8009a9c <_dtoa_r+0x34c>
 8009a6e:	4ba8      	ldr	r3, [pc, #672]	@ (8009d10 <_dtoa_r+0x5c0>)
 8009a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a78:	f7f6 ff08 	bl	800088c <__aeabi_ddiv>
 8009a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a80:	f004 040f 	and.w	r4, r4, #15
 8009a84:	2603      	movs	r6, #3
 8009a86:	4da2      	ldr	r5, [pc, #648]	@ (8009d10 <_dtoa_r+0x5c0>)
 8009a88:	b954      	cbnz	r4, 8009aa0 <_dtoa_r+0x350>
 8009a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a92:	f7f6 fefb 	bl	800088c <__aeabi_ddiv>
 8009a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a9a:	e028      	b.n	8009aee <_dtoa_r+0x39e>
 8009a9c:	2602      	movs	r6, #2
 8009a9e:	e7f2      	b.n	8009a86 <_dtoa_r+0x336>
 8009aa0:	07e1      	lsls	r1, r4, #31
 8009aa2:	d508      	bpl.n	8009ab6 <_dtoa_r+0x366>
 8009aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009aac:	f7f6 fdc4 	bl	8000638 <__aeabi_dmul>
 8009ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ab4:	3601      	adds	r6, #1
 8009ab6:	1064      	asrs	r4, r4, #1
 8009ab8:	3508      	adds	r5, #8
 8009aba:	e7e5      	b.n	8009a88 <_dtoa_r+0x338>
 8009abc:	f000 80d2 	beq.w	8009c64 <_dtoa_r+0x514>
 8009ac0:	427c      	negs	r4, r7
 8009ac2:	4b92      	ldr	r3, [pc, #584]	@ (8009d0c <_dtoa_r+0x5bc>)
 8009ac4:	4d92      	ldr	r5, [pc, #584]	@ (8009d10 <_dtoa_r+0x5c0>)
 8009ac6:	f004 020f 	and.w	r2, r4, #15
 8009aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ad6:	f7f6 fdaf 	bl	8000638 <__aeabi_dmul>
 8009ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ade:	1124      	asrs	r4, r4, #4
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2602      	movs	r6, #2
 8009ae4:	2c00      	cmp	r4, #0
 8009ae6:	f040 80b2 	bne.w	8009c4e <_dtoa_r+0x4fe>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1d3      	bne.n	8009a96 <_dtoa_r+0x346>
 8009aee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009af0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80b7 	beq.w	8009c68 <_dtoa_r+0x518>
 8009afa:	4b86      	ldr	r3, [pc, #536]	@ (8009d14 <_dtoa_r+0x5c4>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f7 f80b 	bl	8000b1c <__aeabi_dcmplt>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f000 80ae 	beq.w	8009c68 <_dtoa_r+0x518>
 8009b0c:	9b07      	ldr	r3, [sp, #28]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80aa 	beq.w	8009c68 <_dtoa_r+0x518>
 8009b14:	9b00      	ldr	r3, [sp, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dd37      	ble.n	8009b8a <_dtoa_r+0x43a>
 8009b1a:	1e7b      	subs	r3, r7, #1
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4b7d      	ldr	r3, [pc, #500]	@ (8009d18 <_dtoa_r+0x5c8>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7f6 fd87 	bl	8000638 <__aeabi_dmul>
 8009b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b2e:	9c00      	ldr	r4, [sp, #0]
 8009b30:	3601      	adds	r6, #1
 8009b32:	4630      	mov	r0, r6
 8009b34:	f7f6 fd16 	bl	8000564 <__aeabi_i2d>
 8009b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b3c:	f7f6 fd7c 	bl	8000638 <__aeabi_dmul>
 8009b40:	4b76      	ldr	r3, [pc, #472]	@ (8009d1c <_dtoa_r+0x5cc>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	f7f6 fbc2 	bl	80002cc <__adddf3>
 8009b48:	4605      	mov	r5, r0
 8009b4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	f040 808d 	bne.w	8009c6e <_dtoa_r+0x51e>
 8009b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b58:	4b71      	ldr	r3, [pc, #452]	@ (8009d20 <_dtoa_r+0x5d0>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f7f6 fbb4 	bl	80002c8 <__aeabi_dsub>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b68:	462a      	mov	r2, r5
 8009b6a:	4633      	mov	r3, r6
 8009b6c:	f7f6 fff4 	bl	8000b58 <__aeabi_dcmpgt>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	f040 828b 	bne.w	800a08c <_dtoa_r+0x93c>
 8009b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b80:	f7f6 ffcc 	bl	8000b1c <__aeabi_dcmplt>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f040 8128 	bne.w	8009dda <_dtoa_r+0x68a>
 8009b8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f2c0 815a 	blt.w	8009e4e <_dtoa_r+0x6fe>
 8009b9a:	2f0e      	cmp	r7, #14
 8009b9c:	f300 8157 	bgt.w	8009e4e <_dtoa_r+0x6fe>
 8009ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8009d0c <_dtoa_r+0x5bc>)
 8009ba2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ba6:	ed93 7b00 	vldr	d7, [r3]
 8009baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	ed8d 7b00 	vstr	d7, [sp]
 8009bb2:	da03      	bge.n	8009bbc <_dtoa_r+0x46c>
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f340 8101 	ble.w	8009dbe <_dtoa_r+0x66e>
 8009bbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009bc0:	4656      	mov	r6, sl
 8009bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7f6 fe5f 	bl	800088c <__aeabi_ddiv>
 8009bce:	f7f6 ffe3 	bl	8000b98 <__aeabi_d2iz>
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	f7f6 fcc6 	bl	8000564 <__aeabi_i2d>
 8009bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bdc:	f7f6 fd2c 	bl	8000638 <__aeabi_dmul>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4620      	mov	r0, r4
 8009be6:	4629      	mov	r1, r5
 8009be8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009bec:	f7f6 fb6c 	bl	80002c8 <__aeabi_dsub>
 8009bf0:	f806 4b01 	strb.w	r4, [r6], #1
 8009bf4:	9d07      	ldr	r5, [sp, #28]
 8009bf6:	eba6 040a 	sub.w	r4, r6, sl
 8009bfa:	42a5      	cmp	r5, r4
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	f040 8117 	bne.w	8009e32 <_dtoa_r+0x6e2>
 8009c04:	f7f6 fb62 	bl	80002cc <__adddf3>
 8009c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	460d      	mov	r5, r1
 8009c10:	f7f6 ffa2 	bl	8000b58 <__aeabi_dcmpgt>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	f040 80f9 	bne.w	8009e0c <_dtoa_r+0x6bc>
 8009c1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 ff71 	bl	8000b08 <__aeabi_dcmpeq>
 8009c26:	b118      	cbz	r0, 8009c30 <_dtoa_r+0x4e0>
 8009c28:	f018 0f01 	tst.w	r8, #1
 8009c2c:	f040 80ee 	bne.w	8009e0c <_dtoa_r+0x6bc>
 8009c30:	4649      	mov	r1, r9
 8009c32:	4658      	mov	r0, fp
 8009c34:	f000 fc90 	bl	800a558 <_Bfree>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	7033      	strb	r3, [r6, #0]
 8009c3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c3e:	3701      	adds	r7, #1
 8009c40:	601f      	str	r7, [r3, #0]
 8009c42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 831d 	beq.w	800a284 <_dtoa_r+0xb34>
 8009c4a:	601e      	str	r6, [r3, #0]
 8009c4c:	e31a      	b.n	800a284 <_dtoa_r+0xb34>
 8009c4e:	07e2      	lsls	r2, r4, #31
 8009c50:	d505      	bpl.n	8009c5e <_dtoa_r+0x50e>
 8009c52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c56:	f7f6 fcef 	bl	8000638 <__aeabi_dmul>
 8009c5a:	3601      	adds	r6, #1
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	1064      	asrs	r4, r4, #1
 8009c60:	3508      	adds	r5, #8
 8009c62:	e73f      	b.n	8009ae4 <_dtoa_r+0x394>
 8009c64:	2602      	movs	r6, #2
 8009c66:	e742      	b.n	8009aee <_dtoa_r+0x39e>
 8009c68:	9c07      	ldr	r4, [sp, #28]
 8009c6a:	9704      	str	r7, [sp, #16]
 8009c6c:	e761      	b.n	8009b32 <_dtoa_r+0x3e2>
 8009c6e:	4b27      	ldr	r3, [pc, #156]	@ (8009d0c <_dtoa_r+0x5bc>)
 8009c70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c7a:	4454      	add	r4, sl
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	d053      	beq.n	8009d28 <_dtoa_r+0x5d8>
 8009c80:	4928      	ldr	r1, [pc, #160]	@ (8009d24 <_dtoa_r+0x5d4>)
 8009c82:	2000      	movs	r0, #0
 8009c84:	f7f6 fe02 	bl	800088c <__aeabi_ddiv>
 8009c88:	4633      	mov	r3, r6
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	f7f6 fb1c 	bl	80002c8 <__aeabi_dsub>
 8009c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c94:	4656      	mov	r6, sl
 8009c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c9a:	f7f6 ff7d 	bl	8000b98 <__aeabi_d2iz>
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	f7f6 fc60 	bl	8000564 <__aeabi_i2d>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cac:	f7f6 fb0c 	bl	80002c8 <__aeabi_dsub>
 8009cb0:	3530      	adds	r5, #48	@ 0x30
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cba:	f806 5b01 	strb.w	r5, [r6], #1
 8009cbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cc2:	f7f6 ff2b 	bl	8000b1c <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d171      	bne.n	8009dae <_dtoa_r+0x65e>
 8009cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cce:	4911      	ldr	r1, [pc, #68]	@ (8009d14 <_dtoa_r+0x5c4>)
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	f7f6 faf9 	bl	80002c8 <__aeabi_dsub>
 8009cd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cda:	f7f6 ff1f 	bl	8000b1c <__aeabi_dcmplt>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f040 8095 	bne.w	8009e0e <_dtoa_r+0x6be>
 8009ce4:	42a6      	cmp	r6, r4
 8009ce6:	f43f af50 	beq.w	8009b8a <_dtoa_r+0x43a>
 8009cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009cee:	4b0a      	ldr	r3, [pc, #40]	@ (8009d18 <_dtoa_r+0x5c8>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f7f6 fca1 	bl	8000638 <__aeabi_dmul>
 8009cf6:	4b08      	ldr	r3, [pc, #32]	@ (8009d18 <_dtoa_r+0x5c8>)
 8009cf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d02:	f7f6 fc99 	bl	8000638 <__aeabi_dmul>
 8009d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d0a:	e7c4      	b.n	8009c96 <_dtoa_r+0x546>
 8009d0c:	0800e5a8 	.word	0x0800e5a8
 8009d10:	0800e580 	.word	0x0800e580
 8009d14:	3ff00000 	.word	0x3ff00000
 8009d18:	40240000 	.word	0x40240000
 8009d1c:	401c0000 	.word	0x401c0000
 8009d20:	40140000 	.word	0x40140000
 8009d24:	3fe00000 	.word	0x3fe00000
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f7f6 fc84 	bl	8000638 <__aeabi_dmul>
 8009d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d34:	9415      	str	r4, [sp, #84]	@ 0x54
 8009d36:	4656      	mov	r6, sl
 8009d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d3c:	f7f6 ff2c 	bl	8000b98 <__aeabi_d2iz>
 8009d40:	4605      	mov	r5, r0
 8009d42:	f7f6 fc0f 	bl	8000564 <__aeabi_i2d>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d4e:	f7f6 fabb 	bl	80002c8 <__aeabi_dsub>
 8009d52:	3530      	adds	r5, #48	@ 0x30
 8009d54:	f806 5b01 	strb.w	r5, [r6], #1
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	42a6      	cmp	r6, r4
 8009d5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d62:	f04f 0200 	mov.w	r2, #0
 8009d66:	d124      	bne.n	8009db2 <_dtoa_r+0x662>
 8009d68:	4bac      	ldr	r3, [pc, #688]	@ (800a01c <_dtoa_r+0x8cc>)
 8009d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d6e:	f7f6 faad 	bl	80002cc <__adddf3>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d7a:	f7f6 feed 	bl	8000b58 <__aeabi_dcmpgt>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d145      	bne.n	8009e0e <_dtoa_r+0x6be>
 8009d82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d86:	49a5      	ldr	r1, [pc, #660]	@ (800a01c <_dtoa_r+0x8cc>)
 8009d88:	2000      	movs	r0, #0
 8009d8a:	f7f6 fa9d 	bl	80002c8 <__aeabi_dsub>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d96:	f7f6 fec1 	bl	8000b1c <__aeabi_dcmplt>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	f43f aef5 	beq.w	8009b8a <_dtoa_r+0x43a>
 8009da0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009da2:	1e73      	subs	r3, r6, #1
 8009da4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009da6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009daa:	2b30      	cmp	r3, #48	@ 0x30
 8009dac:	d0f8      	beq.n	8009da0 <_dtoa_r+0x650>
 8009dae:	9f04      	ldr	r7, [sp, #16]
 8009db0:	e73e      	b.n	8009c30 <_dtoa_r+0x4e0>
 8009db2:	4b9b      	ldr	r3, [pc, #620]	@ (800a020 <_dtoa_r+0x8d0>)
 8009db4:	f7f6 fc40 	bl	8000638 <__aeabi_dmul>
 8009db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dbc:	e7bc      	b.n	8009d38 <_dtoa_r+0x5e8>
 8009dbe:	d10c      	bne.n	8009dda <_dtoa_r+0x68a>
 8009dc0:	4b98      	ldr	r3, [pc, #608]	@ (800a024 <_dtoa_r+0x8d4>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dc8:	f7f6 fc36 	bl	8000638 <__aeabi_dmul>
 8009dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dd0:	f7f6 feb8 	bl	8000b44 <__aeabi_dcmpge>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f000 8157 	beq.w	800a088 <_dtoa_r+0x938>
 8009dda:	2400      	movs	r4, #0
 8009ddc:	4625      	mov	r5, r4
 8009dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de0:	43db      	mvns	r3, r3
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	4656      	mov	r6, sl
 8009de6:	2700      	movs	r7, #0
 8009de8:	4621      	mov	r1, r4
 8009dea:	4658      	mov	r0, fp
 8009dec:	f000 fbb4 	bl	800a558 <_Bfree>
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	d0dc      	beq.n	8009dae <_dtoa_r+0x65e>
 8009df4:	b12f      	cbz	r7, 8009e02 <_dtoa_r+0x6b2>
 8009df6:	42af      	cmp	r7, r5
 8009df8:	d003      	beq.n	8009e02 <_dtoa_r+0x6b2>
 8009dfa:	4639      	mov	r1, r7
 8009dfc:	4658      	mov	r0, fp
 8009dfe:	f000 fbab 	bl	800a558 <_Bfree>
 8009e02:	4629      	mov	r1, r5
 8009e04:	4658      	mov	r0, fp
 8009e06:	f000 fba7 	bl	800a558 <_Bfree>
 8009e0a:	e7d0      	b.n	8009dae <_dtoa_r+0x65e>
 8009e0c:	9704      	str	r7, [sp, #16]
 8009e0e:	4633      	mov	r3, r6
 8009e10:	461e      	mov	r6, r3
 8009e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e16:	2a39      	cmp	r2, #57	@ 0x39
 8009e18:	d107      	bne.n	8009e2a <_dtoa_r+0x6da>
 8009e1a:	459a      	cmp	sl, r3
 8009e1c:	d1f8      	bne.n	8009e10 <_dtoa_r+0x6c0>
 8009e1e:	9a04      	ldr	r2, [sp, #16]
 8009e20:	3201      	adds	r2, #1
 8009e22:	9204      	str	r2, [sp, #16]
 8009e24:	2230      	movs	r2, #48	@ 0x30
 8009e26:	f88a 2000 	strb.w	r2, [sl]
 8009e2a:	781a      	ldrb	r2, [r3, #0]
 8009e2c:	3201      	adds	r2, #1
 8009e2e:	701a      	strb	r2, [r3, #0]
 8009e30:	e7bd      	b.n	8009dae <_dtoa_r+0x65e>
 8009e32:	4b7b      	ldr	r3, [pc, #492]	@ (800a020 <_dtoa_r+0x8d0>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	f7f6 fbff 	bl	8000638 <__aeabi_dmul>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	460d      	mov	r5, r1
 8009e42:	f7f6 fe61 	bl	8000b08 <__aeabi_dcmpeq>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f aebb 	beq.w	8009bc2 <_dtoa_r+0x472>
 8009e4c:	e6f0      	b.n	8009c30 <_dtoa_r+0x4e0>
 8009e4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e50:	2a00      	cmp	r2, #0
 8009e52:	f000 80db 	beq.w	800a00c <_dtoa_r+0x8bc>
 8009e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e58:	2a01      	cmp	r2, #1
 8009e5a:	f300 80bf 	bgt.w	8009fdc <_dtoa_r+0x88c>
 8009e5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	f000 80b7 	beq.w	8009fd4 <_dtoa_r+0x884>
 8009e66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e6c:	4646      	mov	r6, r8
 8009e6e:	9a08      	ldr	r2, [sp, #32]
 8009e70:	2101      	movs	r1, #1
 8009e72:	441a      	add	r2, r3
 8009e74:	4658      	mov	r0, fp
 8009e76:	4498      	add	r8, r3
 8009e78:	9208      	str	r2, [sp, #32]
 8009e7a:	f000 fc6b 	bl	800a754 <__i2b>
 8009e7e:	4605      	mov	r5, r0
 8009e80:	b15e      	cbz	r6, 8009e9a <_dtoa_r+0x74a>
 8009e82:	9b08      	ldr	r3, [sp, #32]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	dd08      	ble.n	8009e9a <_dtoa_r+0x74a>
 8009e88:	42b3      	cmp	r3, r6
 8009e8a:	9a08      	ldr	r2, [sp, #32]
 8009e8c:	bfa8      	it	ge
 8009e8e:	4633      	movge	r3, r6
 8009e90:	eba8 0803 	sub.w	r8, r8, r3
 8009e94:	1af6      	subs	r6, r6, r3
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	9308      	str	r3, [sp, #32]
 8009e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e9c:	b1f3      	cbz	r3, 8009edc <_dtoa_r+0x78c>
 8009e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 80b7 	beq.w	800a014 <_dtoa_r+0x8c4>
 8009ea6:	b18c      	cbz	r4, 8009ecc <_dtoa_r+0x77c>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4622      	mov	r2, r4
 8009eac:	4658      	mov	r0, fp
 8009eae:	f000 fd11 	bl	800a8d4 <__pow5mult>
 8009eb2:	464a      	mov	r2, r9
 8009eb4:	4601      	mov	r1, r0
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	4658      	mov	r0, fp
 8009eba:	f000 fc61 	bl	800a780 <__multiply>
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	9004      	str	r0, [sp, #16]
 8009ec2:	4658      	mov	r0, fp
 8009ec4:	f000 fb48 	bl	800a558 <_Bfree>
 8009ec8:	9b04      	ldr	r3, [sp, #16]
 8009eca:	4699      	mov	r9, r3
 8009ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ece:	1b1a      	subs	r2, r3, r4
 8009ed0:	d004      	beq.n	8009edc <_dtoa_r+0x78c>
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	4658      	mov	r0, fp
 8009ed6:	f000 fcfd 	bl	800a8d4 <__pow5mult>
 8009eda:	4681      	mov	r9, r0
 8009edc:	2101      	movs	r1, #1
 8009ede:	4658      	mov	r0, fp
 8009ee0:	f000 fc38 	bl	800a754 <__i2b>
 8009ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 81cf 	beq.w	800a28c <_dtoa_r+0xb3c>
 8009eee:	461a      	mov	r2, r3
 8009ef0:	4601      	mov	r1, r0
 8009ef2:	4658      	mov	r0, fp
 8009ef4:	f000 fcee 	bl	800a8d4 <__pow5mult>
 8009ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	4604      	mov	r4, r0
 8009efe:	f300 8095 	bgt.w	800a02c <_dtoa_r+0x8dc>
 8009f02:	9b02      	ldr	r3, [sp, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 8087 	bne.w	800a018 <_dtoa_r+0x8c8>
 8009f0a:	9b03      	ldr	r3, [sp, #12]
 8009f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 8089 	bne.w	800a028 <_dtoa_r+0x8d8>
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f1c:	0d1b      	lsrs	r3, r3, #20
 8009f1e:	051b      	lsls	r3, r3, #20
 8009f20:	b12b      	cbz	r3, 8009f2e <_dtoa_r+0x7de>
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	3301      	adds	r3, #1
 8009f26:	9308      	str	r3, [sp, #32]
 8009f28:	f108 0801 	add.w	r8, r8, #1
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 81b0 	beq.w	800a298 <_dtoa_r+0xb48>
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f3e:	6918      	ldr	r0, [r3, #16]
 8009f40:	f000 fbbc 	bl	800a6bc <__hi0bits>
 8009f44:	f1c0 0020 	rsb	r0, r0, #32
 8009f48:	9b08      	ldr	r3, [sp, #32]
 8009f4a:	4418      	add	r0, r3
 8009f4c:	f010 001f 	ands.w	r0, r0, #31
 8009f50:	d077      	beq.n	800a042 <_dtoa_r+0x8f2>
 8009f52:	f1c0 0320 	rsb	r3, r0, #32
 8009f56:	2b04      	cmp	r3, #4
 8009f58:	dd6b      	ble.n	800a032 <_dtoa_r+0x8e2>
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	f1c0 001c 	rsb	r0, r0, #28
 8009f60:	4403      	add	r3, r0
 8009f62:	4480      	add	r8, r0
 8009f64:	4406      	add	r6, r0
 8009f66:	9308      	str	r3, [sp, #32]
 8009f68:	f1b8 0f00 	cmp.w	r8, #0
 8009f6c:	dd05      	ble.n	8009f7a <_dtoa_r+0x82a>
 8009f6e:	4649      	mov	r1, r9
 8009f70:	4642      	mov	r2, r8
 8009f72:	4658      	mov	r0, fp
 8009f74:	f000 fd08 	bl	800a988 <__lshift>
 8009f78:	4681      	mov	r9, r0
 8009f7a:	9b08      	ldr	r3, [sp, #32]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dd05      	ble.n	8009f8c <_dtoa_r+0x83c>
 8009f80:	4621      	mov	r1, r4
 8009f82:	461a      	mov	r2, r3
 8009f84:	4658      	mov	r0, fp
 8009f86:	f000 fcff 	bl	800a988 <__lshift>
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d059      	beq.n	800a046 <_dtoa_r+0x8f6>
 8009f92:	4621      	mov	r1, r4
 8009f94:	4648      	mov	r0, r9
 8009f96:	f000 fd63 	bl	800aa60 <__mcmp>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	da53      	bge.n	800a046 <_dtoa_r+0x8f6>
 8009f9e:	1e7b      	subs	r3, r7, #1
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	220a      	movs	r2, #10
 8009fa8:	4658      	mov	r0, fp
 8009faa:	f000 faf7 	bl	800a59c <__multadd>
 8009fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fb0:	4681      	mov	r9, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 8172 	beq.w	800a29c <_dtoa_r+0xb4c>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4629      	mov	r1, r5
 8009fbc:	220a      	movs	r2, #10
 8009fbe:	4658      	mov	r0, fp
 8009fc0:	f000 faec 	bl	800a59c <__multadd>
 8009fc4:	9b00      	ldr	r3, [sp, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	4605      	mov	r5, r0
 8009fca:	dc67      	bgt.n	800a09c <_dtoa_r+0x94c>
 8009fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	dc41      	bgt.n	800a056 <_dtoa_r+0x906>
 8009fd2:	e063      	b.n	800a09c <_dtoa_r+0x94c>
 8009fd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009fd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009fda:	e746      	b.n	8009e6a <_dtoa_r+0x71a>
 8009fdc:	9b07      	ldr	r3, [sp, #28]
 8009fde:	1e5c      	subs	r4, r3, #1
 8009fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fe2:	42a3      	cmp	r3, r4
 8009fe4:	bfbf      	itttt	lt
 8009fe6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009fe8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009fea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009fec:	1ae3      	sublt	r3, r4, r3
 8009fee:	bfb4      	ite	lt
 8009ff0:	18d2      	addlt	r2, r2, r3
 8009ff2:	1b1c      	subge	r4, r3, r4
 8009ff4:	9b07      	ldr	r3, [sp, #28]
 8009ff6:	bfbc      	itt	lt
 8009ff8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009ffa:	2400      	movlt	r4, #0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	bfb5      	itete	lt
 800a000:	eba8 0603 	sublt.w	r6, r8, r3
 800a004:	9b07      	ldrge	r3, [sp, #28]
 800a006:	2300      	movlt	r3, #0
 800a008:	4646      	movge	r6, r8
 800a00a:	e730      	b.n	8009e6e <_dtoa_r+0x71e>
 800a00c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a00e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a010:	4646      	mov	r6, r8
 800a012:	e735      	b.n	8009e80 <_dtoa_r+0x730>
 800a014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a016:	e75c      	b.n	8009ed2 <_dtoa_r+0x782>
 800a018:	2300      	movs	r3, #0
 800a01a:	e788      	b.n	8009f2e <_dtoa_r+0x7de>
 800a01c:	3fe00000 	.word	0x3fe00000
 800a020:	40240000 	.word	0x40240000
 800a024:	40140000 	.word	0x40140000
 800a028:	9b02      	ldr	r3, [sp, #8]
 800a02a:	e780      	b.n	8009f2e <_dtoa_r+0x7de>
 800a02c:	2300      	movs	r3, #0
 800a02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a030:	e782      	b.n	8009f38 <_dtoa_r+0x7e8>
 800a032:	d099      	beq.n	8009f68 <_dtoa_r+0x818>
 800a034:	9a08      	ldr	r2, [sp, #32]
 800a036:	331c      	adds	r3, #28
 800a038:	441a      	add	r2, r3
 800a03a:	4498      	add	r8, r3
 800a03c:	441e      	add	r6, r3
 800a03e:	9208      	str	r2, [sp, #32]
 800a040:	e792      	b.n	8009f68 <_dtoa_r+0x818>
 800a042:	4603      	mov	r3, r0
 800a044:	e7f6      	b.n	800a034 <_dtoa_r+0x8e4>
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	9704      	str	r7, [sp, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dc20      	bgt.n	800a090 <_dtoa_r+0x940>
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a052:	2b02      	cmp	r3, #2
 800a054:	dd1e      	ble.n	800a094 <_dtoa_r+0x944>
 800a056:	9b00      	ldr	r3, [sp, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f47f aec0 	bne.w	8009dde <_dtoa_r+0x68e>
 800a05e:	4621      	mov	r1, r4
 800a060:	2205      	movs	r2, #5
 800a062:	4658      	mov	r0, fp
 800a064:	f000 fa9a 	bl	800a59c <__multadd>
 800a068:	4601      	mov	r1, r0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4648      	mov	r0, r9
 800a06e:	f000 fcf7 	bl	800aa60 <__mcmp>
 800a072:	2800      	cmp	r0, #0
 800a074:	f77f aeb3 	ble.w	8009dde <_dtoa_r+0x68e>
 800a078:	4656      	mov	r6, sl
 800a07a:	2331      	movs	r3, #49	@ 0x31
 800a07c:	f806 3b01 	strb.w	r3, [r6], #1
 800a080:	9b04      	ldr	r3, [sp, #16]
 800a082:	3301      	adds	r3, #1
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	e6ae      	b.n	8009de6 <_dtoa_r+0x696>
 800a088:	9c07      	ldr	r4, [sp, #28]
 800a08a:	9704      	str	r7, [sp, #16]
 800a08c:	4625      	mov	r5, r4
 800a08e:	e7f3      	b.n	800a078 <_dtoa_r+0x928>
 800a090:	9b07      	ldr	r3, [sp, #28]
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 8104 	beq.w	800a2a4 <_dtoa_r+0xb54>
 800a09c:	2e00      	cmp	r6, #0
 800a09e:	dd05      	ble.n	800a0ac <_dtoa_r+0x95c>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	4632      	mov	r2, r6
 800a0a4:	4658      	mov	r0, fp
 800a0a6:	f000 fc6f 	bl	800a988 <__lshift>
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d05a      	beq.n	800a168 <_dtoa_r+0xa18>
 800a0b2:	6869      	ldr	r1, [r5, #4]
 800a0b4:	4658      	mov	r0, fp
 800a0b6:	f000 fa0f 	bl	800a4d8 <_Balloc>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	b928      	cbnz	r0, 800a0ca <_dtoa_r+0x97a>
 800a0be:	4b84      	ldr	r3, [pc, #528]	@ (800a2d0 <_dtoa_r+0xb80>)
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a0c6:	f7ff bb5a 	b.w	800977e <_dtoa_r+0x2e>
 800a0ca:	692a      	ldr	r2, [r5, #16]
 800a0cc:	3202      	adds	r2, #2
 800a0ce:	0092      	lsls	r2, r2, #2
 800a0d0:	f105 010c 	add.w	r1, r5, #12
 800a0d4:	300c      	adds	r0, #12
 800a0d6:	f002 f93b 	bl	800c350 <memcpy>
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4658      	mov	r0, fp
 800a0e0:	f000 fc52 	bl	800a988 <__lshift>
 800a0e4:	f10a 0301 	add.w	r3, sl, #1
 800a0e8:	9307      	str	r3, [sp, #28]
 800a0ea:	9b00      	ldr	r3, [sp, #0]
 800a0ec:	4453      	add	r3, sl
 800a0ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	462f      	mov	r7, r5
 800a0f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	9b07      	ldr	r3, [sp, #28]
 800a0fe:	4621      	mov	r1, r4
 800a100:	3b01      	subs	r3, #1
 800a102:	4648      	mov	r0, r9
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	f7ff fa9b 	bl	8009640 <quorem>
 800a10a:	4639      	mov	r1, r7
 800a10c:	9002      	str	r0, [sp, #8]
 800a10e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a112:	4648      	mov	r0, r9
 800a114:	f000 fca4 	bl	800aa60 <__mcmp>
 800a118:	462a      	mov	r2, r5
 800a11a:	9008      	str	r0, [sp, #32]
 800a11c:	4621      	mov	r1, r4
 800a11e:	4658      	mov	r0, fp
 800a120:	f000 fcba 	bl	800aa98 <__mdiff>
 800a124:	68c2      	ldr	r2, [r0, #12]
 800a126:	4606      	mov	r6, r0
 800a128:	bb02      	cbnz	r2, 800a16c <_dtoa_r+0xa1c>
 800a12a:	4601      	mov	r1, r0
 800a12c:	4648      	mov	r0, r9
 800a12e:	f000 fc97 	bl	800aa60 <__mcmp>
 800a132:	4602      	mov	r2, r0
 800a134:	4631      	mov	r1, r6
 800a136:	4658      	mov	r0, fp
 800a138:	920e      	str	r2, [sp, #56]	@ 0x38
 800a13a:	f000 fa0d 	bl	800a558 <_Bfree>
 800a13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a140:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a142:	9e07      	ldr	r6, [sp, #28]
 800a144:	ea43 0102 	orr.w	r1, r3, r2
 800a148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a14a:	4319      	orrs	r1, r3
 800a14c:	d110      	bne.n	800a170 <_dtoa_r+0xa20>
 800a14e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a152:	d029      	beq.n	800a1a8 <_dtoa_r+0xa58>
 800a154:	9b08      	ldr	r3, [sp, #32]
 800a156:	2b00      	cmp	r3, #0
 800a158:	dd02      	ble.n	800a160 <_dtoa_r+0xa10>
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a160:	9b00      	ldr	r3, [sp, #0]
 800a162:	f883 8000 	strb.w	r8, [r3]
 800a166:	e63f      	b.n	8009de8 <_dtoa_r+0x698>
 800a168:	4628      	mov	r0, r5
 800a16a:	e7bb      	b.n	800a0e4 <_dtoa_r+0x994>
 800a16c:	2201      	movs	r2, #1
 800a16e:	e7e1      	b.n	800a134 <_dtoa_r+0x9e4>
 800a170:	9b08      	ldr	r3, [sp, #32]
 800a172:	2b00      	cmp	r3, #0
 800a174:	db04      	blt.n	800a180 <_dtoa_r+0xa30>
 800a176:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a178:	430b      	orrs	r3, r1
 800a17a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a17c:	430b      	orrs	r3, r1
 800a17e:	d120      	bne.n	800a1c2 <_dtoa_r+0xa72>
 800a180:	2a00      	cmp	r2, #0
 800a182:	dded      	ble.n	800a160 <_dtoa_r+0xa10>
 800a184:	4649      	mov	r1, r9
 800a186:	2201      	movs	r2, #1
 800a188:	4658      	mov	r0, fp
 800a18a:	f000 fbfd 	bl	800a988 <__lshift>
 800a18e:	4621      	mov	r1, r4
 800a190:	4681      	mov	r9, r0
 800a192:	f000 fc65 	bl	800aa60 <__mcmp>
 800a196:	2800      	cmp	r0, #0
 800a198:	dc03      	bgt.n	800a1a2 <_dtoa_r+0xa52>
 800a19a:	d1e1      	bne.n	800a160 <_dtoa_r+0xa10>
 800a19c:	f018 0f01 	tst.w	r8, #1
 800a1a0:	d0de      	beq.n	800a160 <_dtoa_r+0xa10>
 800a1a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1a6:	d1d8      	bne.n	800a15a <_dtoa_r+0xa0a>
 800a1a8:	9a00      	ldr	r2, [sp, #0]
 800a1aa:	2339      	movs	r3, #57	@ 0x39
 800a1ac:	7013      	strb	r3, [r2, #0]
 800a1ae:	4633      	mov	r3, r6
 800a1b0:	461e      	mov	r6, r3
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1b8:	2a39      	cmp	r2, #57	@ 0x39
 800a1ba:	d052      	beq.n	800a262 <_dtoa_r+0xb12>
 800a1bc:	3201      	adds	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]
 800a1c0:	e612      	b.n	8009de8 <_dtoa_r+0x698>
 800a1c2:	2a00      	cmp	r2, #0
 800a1c4:	dd07      	ble.n	800a1d6 <_dtoa_r+0xa86>
 800a1c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1ca:	d0ed      	beq.n	800a1a8 <_dtoa_r+0xa58>
 800a1cc:	9a00      	ldr	r2, [sp, #0]
 800a1ce:	f108 0301 	add.w	r3, r8, #1
 800a1d2:	7013      	strb	r3, [r2, #0]
 800a1d4:	e608      	b.n	8009de8 <_dtoa_r+0x698>
 800a1d6:	9b07      	ldr	r3, [sp, #28]
 800a1d8:	9a07      	ldr	r2, [sp, #28]
 800a1da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d028      	beq.n	800a236 <_dtoa_r+0xae6>
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	220a      	movs	r2, #10
 800a1ea:	4658      	mov	r0, fp
 800a1ec:	f000 f9d6 	bl	800a59c <__multadd>
 800a1f0:	42af      	cmp	r7, r5
 800a1f2:	4681      	mov	r9, r0
 800a1f4:	f04f 0300 	mov.w	r3, #0
 800a1f8:	f04f 020a 	mov.w	r2, #10
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	4658      	mov	r0, fp
 800a200:	d107      	bne.n	800a212 <_dtoa_r+0xac2>
 800a202:	f000 f9cb 	bl	800a59c <__multadd>
 800a206:	4607      	mov	r7, r0
 800a208:	4605      	mov	r5, r0
 800a20a:	9b07      	ldr	r3, [sp, #28]
 800a20c:	3301      	adds	r3, #1
 800a20e:	9307      	str	r3, [sp, #28]
 800a210:	e774      	b.n	800a0fc <_dtoa_r+0x9ac>
 800a212:	f000 f9c3 	bl	800a59c <__multadd>
 800a216:	4629      	mov	r1, r5
 800a218:	4607      	mov	r7, r0
 800a21a:	2300      	movs	r3, #0
 800a21c:	220a      	movs	r2, #10
 800a21e:	4658      	mov	r0, fp
 800a220:	f000 f9bc 	bl	800a59c <__multadd>
 800a224:	4605      	mov	r5, r0
 800a226:	e7f0      	b.n	800a20a <_dtoa_r+0xaba>
 800a228:	9b00      	ldr	r3, [sp, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	bfcc      	ite	gt
 800a22e:	461e      	movgt	r6, r3
 800a230:	2601      	movle	r6, #1
 800a232:	4456      	add	r6, sl
 800a234:	2700      	movs	r7, #0
 800a236:	4649      	mov	r1, r9
 800a238:	2201      	movs	r2, #1
 800a23a:	4658      	mov	r0, fp
 800a23c:	f000 fba4 	bl	800a988 <__lshift>
 800a240:	4621      	mov	r1, r4
 800a242:	4681      	mov	r9, r0
 800a244:	f000 fc0c 	bl	800aa60 <__mcmp>
 800a248:	2800      	cmp	r0, #0
 800a24a:	dcb0      	bgt.n	800a1ae <_dtoa_r+0xa5e>
 800a24c:	d102      	bne.n	800a254 <_dtoa_r+0xb04>
 800a24e:	f018 0f01 	tst.w	r8, #1
 800a252:	d1ac      	bne.n	800a1ae <_dtoa_r+0xa5e>
 800a254:	4633      	mov	r3, r6
 800a256:	461e      	mov	r6, r3
 800a258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a25c:	2a30      	cmp	r2, #48	@ 0x30
 800a25e:	d0fa      	beq.n	800a256 <_dtoa_r+0xb06>
 800a260:	e5c2      	b.n	8009de8 <_dtoa_r+0x698>
 800a262:	459a      	cmp	sl, r3
 800a264:	d1a4      	bne.n	800a1b0 <_dtoa_r+0xa60>
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	3301      	adds	r3, #1
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	2331      	movs	r3, #49	@ 0x31
 800a26e:	f88a 3000 	strb.w	r3, [sl]
 800a272:	e5b9      	b.n	8009de8 <_dtoa_r+0x698>
 800a274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a276:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a2d4 <_dtoa_r+0xb84>
 800a27a:	b11b      	cbz	r3, 800a284 <_dtoa_r+0xb34>
 800a27c:	f10a 0308 	add.w	r3, sl, #8
 800a280:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a282:	6013      	str	r3, [r2, #0]
 800a284:	4650      	mov	r0, sl
 800a286:	b019      	add	sp, #100	@ 0x64
 800a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28e:	2b01      	cmp	r3, #1
 800a290:	f77f ae37 	ble.w	8009f02 <_dtoa_r+0x7b2>
 800a294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a296:	930a      	str	r3, [sp, #40]	@ 0x28
 800a298:	2001      	movs	r0, #1
 800a29a:	e655      	b.n	8009f48 <_dtoa_r+0x7f8>
 800a29c:	9b00      	ldr	r3, [sp, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f77f aed6 	ble.w	800a050 <_dtoa_r+0x900>
 800a2a4:	4656      	mov	r6, sl
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f7ff f9c9 	bl	8009640 <quorem>
 800a2ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2b2:	f806 8b01 	strb.w	r8, [r6], #1
 800a2b6:	9b00      	ldr	r3, [sp, #0]
 800a2b8:	eba6 020a 	sub.w	r2, r6, sl
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	ddb3      	ble.n	800a228 <_dtoa_r+0xad8>
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	4658      	mov	r0, fp
 800a2c8:	f000 f968 	bl	800a59c <__multadd>
 800a2cc:	4681      	mov	r9, r0
 800a2ce:	e7ea      	b.n	800a2a6 <_dtoa_r+0xb56>
 800a2d0:	0800e505 	.word	0x0800e505
 800a2d4:	0800e489 	.word	0x0800e489

0800a2d8 <_free_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4605      	mov	r5, r0
 800a2dc:	2900      	cmp	r1, #0
 800a2de:	d041      	beq.n	800a364 <_free_r+0x8c>
 800a2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e4:	1f0c      	subs	r4, r1, #4
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	bfb8      	it	lt
 800a2ea:	18e4      	addlt	r4, r4, r3
 800a2ec:	f000 f8e8 	bl	800a4c0 <__malloc_lock>
 800a2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a368 <_free_r+0x90>)
 800a2f2:	6813      	ldr	r3, [r2, #0]
 800a2f4:	b933      	cbnz	r3, 800a304 <_free_r+0x2c>
 800a2f6:	6063      	str	r3, [r4, #4]
 800a2f8:	6014      	str	r4, [r2, #0]
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a300:	f000 b8e4 	b.w	800a4cc <__malloc_unlock>
 800a304:	42a3      	cmp	r3, r4
 800a306:	d908      	bls.n	800a31a <_free_r+0x42>
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	1821      	adds	r1, r4, r0
 800a30c:	428b      	cmp	r3, r1
 800a30e:	bf01      	itttt	eq
 800a310:	6819      	ldreq	r1, [r3, #0]
 800a312:	685b      	ldreq	r3, [r3, #4]
 800a314:	1809      	addeq	r1, r1, r0
 800a316:	6021      	streq	r1, [r4, #0]
 800a318:	e7ed      	b.n	800a2f6 <_free_r+0x1e>
 800a31a:	461a      	mov	r2, r3
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	b10b      	cbz	r3, 800a324 <_free_r+0x4c>
 800a320:	42a3      	cmp	r3, r4
 800a322:	d9fa      	bls.n	800a31a <_free_r+0x42>
 800a324:	6811      	ldr	r1, [r2, #0]
 800a326:	1850      	adds	r0, r2, r1
 800a328:	42a0      	cmp	r0, r4
 800a32a:	d10b      	bne.n	800a344 <_free_r+0x6c>
 800a32c:	6820      	ldr	r0, [r4, #0]
 800a32e:	4401      	add	r1, r0
 800a330:	1850      	adds	r0, r2, r1
 800a332:	4283      	cmp	r3, r0
 800a334:	6011      	str	r1, [r2, #0]
 800a336:	d1e0      	bne.n	800a2fa <_free_r+0x22>
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	6053      	str	r3, [r2, #4]
 800a33e:	4408      	add	r0, r1
 800a340:	6010      	str	r0, [r2, #0]
 800a342:	e7da      	b.n	800a2fa <_free_r+0x22>
 800a344:	d902      	bls.n	800a34c <_free_r+0x74>
 800a346:	230c      	movs	r3, #12
 800a348:	602b      	str	r3, [r5, #0]
 800a34a:	e7d6      	b.n	800a2fa <_free_r+0x22>
 800a34c:	6820      	ldr	r0, [r4, #0]
 800a34e:	1821      	adds	r1, r4, r0
 800a350:	428b      	cmp	r3, r1
 800a352:	bf04      	itt	eq
 800a354:	6819      	ldreq	r1, [r3, #0]
 800a356:	685b      	ldreq	r3, [r3, #4]
 800a358:	6063      	str	r3, [r4, #4]
 800a35a:	bf04      	itt	eq
 800a35c:	1809      	addeq	r1, r1, r0
 800a35e:	6021      	streq	r1, [r4, #0]
 800a360:	6054      	str	r4, [r2, #4]
 800a362:	e7ca      	b.n	800a2fa <_free_r+0x22>
 800a364:	bd38      	pop	{r3, r4, r5, pc}
 800a366:	bf00      	nop
 800a368:	2000083c 	.word	0x2000083c

0800a36c <malloc>:
 800a36c:	4b02      	ldr	r3, [pc, #8]	@ (800a378 <malloc+0xc>)
 800a36e:	4601      	mov	r1, r0
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f000 b825 	b.w	800a3c0 <_malloc_r>
 800a376:	bf00      	nop
 800a378:	20000028 	.word	0x20000028

0800a37c <sbrk_aligned>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	4e0f      	ldr	r6, [pc, #60]	@ (800a3bc <sbrk_aligned+0x40>)
 800a380:	460c      	mov	r4, r1
 800a382:	6831      	ldr	r1, [r6, #0]
 800a384:	4605      	mov	r5, r0
 800a386:	b911      	cbnz	r1, 800a38e <sbrk_aligned+0x12>
 800a388:	f001 ffd2 	bl	800c330 <_sbrk_r>
 800a38c:	6030      	str	r0, [r6, #0]
 800a38e:	4621      	mov	r1, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f001 ffcd 	bl	800c330 <_sbrk_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d103      	bne.n	800a3a2 <sbrk_aligned+0x26>
 800a39a:	f04f 34ff 	mov.w	r4, #4294967295
 800a39e:	4620      	mov	r0, r4
 800a3a0:	bd70      	pop	{r4, r5, r6, pc}
 800a3a2:	1cc4      	adds	r4, r0, #3
 800a3a4:	f024 0403 	bic.w	r4, r4, #3
 800a3a8:	42a0      	cmp	r0, r4
 800a3aa:	d0f8      	beq.n	800a39e <sbrk_aligned+0x22>
 800a3ac:	1a21      	subs	r1, r4, r0
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f001 ffbe 	bl	800c330 <_sbrk_r>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	d1f2      	bne.n	800a39e <sbrk_aligned+0x22>
 800a3b8:	e7ef      	b.n	800a39a <sbrk_aligned+0x1e>
 800a3ba:	bf00      	nop
 800a3bc:	20000838 	.word	0x20000838

0800a3c0 <_malloc_r>:
 800a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	1ccd      	adds	r5, r1, #3
 800a3c6:	f025 0503 	bic.w	r5, r5, #3
 800a3ca:	3508      	adds	r5, #8
 800a3cc:	2d0c      	cmp	r5, #12
 800a3ce:	bf38      	it	cc
 800a3d0:	250c      	movcc	r5, #12
 800a3d2:	2d00      	cmp	r5, #0
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	db01      	blt.n	800a3dc <_malloc_r+0x1c>
 800a3d8:	42a9      	cmp	r1, r5
 800a3da:	d904      	bls.n	800a3e6 <_malloc_r+0x26>
 800a3dc:	230c      	movs	r3, #12
 800a3de:	6033      	str	r3, [r6, #0]
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4bc <_malloc_r+0xfc>
 800a3ea:	f000 f869 	bl	800a4c0 <__malloc_lock>
 800a3ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	bb44      	cbnz	r4, 800a448 <_malloc_r+0x88>
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f7ff ffbf 	bl	800a37c <sbrk_aligned>
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	4604      	mov	r4, r0
 800a402:	d158      	bne.n	800a4b6 <_malloc_r+0xf6>
 800a404:	f8d8 4000 	ldr.w	r4, [r8]
 800a408:	4627      	mov	r7, r4
 800a40a:	2f00      	cmp	r7, #0
 800a40c:	d143      	bne.n	800a496 <_malloc_r+0xd6>
 800a40e:	2c00      	cmp	r4, #0
 800a410:	d04b      	beq.n	800a4aa <_malloc_r+0xea>
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	4639      	mov	r1, r7
 800a416:	4630      	mov	r0, r6
 800a418:	eb04 0903 	add.w	r9, r4, r3
 800a41c:	f001 ff88 	bl	800c330 <_sbrk_r>
 800a420:	4581      	cmp	r9, r0
 800a422:	d142      	bne.n	800a4aa <_malloc_r+0xea>
 800a424:	6821      	ldr	r1, [r4, #0]
 800a426:	1a6d      	subs	r5, r5, r1
 800a428:	4629      	mov	r1, r5
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7ff ffa6 	bl	800a37c <sbrk_aligned>
 800a430:	3001      	adds	r0, #1
 800a432:	d03a      	beq.n	800a4aa <_malloc_r+0xea>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	442b      	add	r3, r5
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	f8d8 3000 	ldr.w	r3, [r8]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	bb62      	cbnz	r2, 800a49c <_malloc_r+0xdc>
 800a442:	f8c8 7000 	str.w	r7, [r8]
 800a446:	e00f      	b.n	800a468 <_malloc_r+0xa8>
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	1b52      	subs	r2, r2, r5
 800a44c:	d420      	bmi.n	800a490 <_malloc_r+0xd0>
 800a44e:	2a0b      	cmp	r2, #11
 800a450:	d917      	bls.n	800a482 <_malloc_r+0xc2>
 800a452:	1961      	adds	r1, r4, r5
 800a454:	42a3      	cmp	r3, r4
 800a456:	6025      	str	r5, [r4, #0]
 800a458:	bf18      	it	ne
 800a45a:	6059      	strne	r1, [r3, #4]
 800a45c:	6863      	ldr	r3, [r4, #4]
 800a45e:	bf08      	it	eq
 800a460:	f8c8 1000 	streq.w	r1, [r8]
 800a464:	5162      	str	r2, [r4, r5]
 800a466:	604b      	str	r3, [r1, #4]
 800a468:	4630      	mov	r0, r6
 800a46a:	f000 f82f 	bl	800a4cc <__malloc_unlock>
 800a46e:	f104 000b 	add.w	r0, r4, #11
 800a472:	1d23      	adds	r3, r4, #4
 800a474:	f020 0007 	bic.w	r0, r0, #7
 800a478:	1ac2      	subs	r2, r0, r3
 800a47a:	bf1c      	itt	ne
 800a47c:	1a1b      	subne	r3, r3, r0
 800a47e:	50a3      	strne	r3, [r4, r2]
 800a480:	e7af      	b.n	800a3e2 <_malloc_r+0x22>
 800a482:	6862      	ldr	r2, [r4, #4]
 800a484:	42a3      	cmp	r3, r4
 800a486:	bf0c      	ite	eq
 800a488:	f8c8 2000 	streq.w	r2, [r8]
 800a48c:	605a      	strne	r2, [r3, #4]
 800a48e:	e7eb      	b.n	800a468 <_malloc_r+0xa8>
 800a490:	4623      	mov	r3, r4
 800a492:	6864      	ldr	r4, [r4, #4]
 800a494:	e7ae      	b.n	800a3f4 <_malloc_r+0x34>
 800a496:	463c      	mov	r4, r7
 800a498:	687f      	ldr	r7, [r7, #4]
 800a49a:	e7b6      	b.n	800a40a <_malloc_r+0x4a>
 800a49c:	461a      	mov	r2, r3
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	d1fb      	bne.n	800a49c <_malloc_r+0xdc>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6053      	str	r3, [r2, #4]
 800a4a8:	e7de      	b.n	800a468 <_malloc_r+0xa8>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	6033      	str	r3, [r6, #0]
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f000 f80c 	bl	800a4cc <__malloc_unlock>
 800a4b4:	e794      	b.n	800a3e0 <_malloc_r+0x20>
 800a4b6:	6005      	str	r5, [r0, #0]
 800a4b8:	e7d6      	b.n	800a468 <_malloc_r+0xa8>
 800a4ba:	bf00      	nop
 800a4bc:	2000083c 	.word	0x2000083c

0800a4c0 <__malloc_lock>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	@ (800a4c8 <__malloc_lock+0x8>)
 800a4c2:	f7ff b8b4 	b.w	800962e <__retarget_lock_acquire_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	20000834 	.word	0x20000834

0800a4cc <__malloc_unlock>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	@ (800a4d4 <__malloc_unlock+0x8>)
 800a4ce:	f7ff b8af 	b.w	8009630 <__retarget_lock_release_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	20000834 	.word	0x20000834

0800a4d8 <_Balloc>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	69c6      	ldr	r6, [r0, #28]
 800a4dc:	4604      	mov	r4, r0
 800a4de:	460d      	mov	r5, r1
 800a4e0:	b976      	cbnz	r6, 800a500 <_Balloc+0x28>
 800a4e2:	2010      	movs	r0, #16
 800a4e4:	f7ff ff42 	bl	800a36c <malloc>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	61e0      	str	r0, [r4, #28]
 800a4ec:	b920      	cbnz	r0, 800a4f8 <_Balloc+0x20>
 800a4ee:	4b18      	ldr	r3, [pc, #96]	@ (800a550 <_Balloc+0x78>)
 800a4f0:	4818      	ldr	r0, [pc, #96]	@ (800a554 <_Balloc+0x7c>)
 800a4f2:	216b      	movs	r1, #107	@ 0x6b
 800a4f4:	f001 ff44 	bl	800c380 <__assert_func>
 800a4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4fc:	6006      	str	r6, [r0, #0]
 800a4fe:	60c6      	str	r6, [r0, #12]
 800a500:	69e6      	ldr	r6, [r4, #28]
 800a502:	68f3      	ldr	r3, [r6, #12]
 800a504:	b183      	cbz	r3, 800a528 <_Balloc+0x50>
 800a506:	69e3      	ldr	r3, [r4, #28]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a50e:	b9b8      	cbnz	r0, 800a540 <_Balloc+0x68>
 800a510:	2101      	movs	r1, #1
 800a512:	fa01 f605 	lsl.w	r6, r1, r5
 800a516:	1d72      	adds	r2, r6, #5
 800a518:	0092      	lsls	r2, r2, #2
 800a51a:	4620      	mov	r0, r4
 800a51c:	f001 ff4e 	bl	800c3bc <_calloc_r>
 800a520:	b160      	cbz	r0, 800a53c <_Balloc+0x64>
 800a522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a526:	e00e      	b.n	800a546 <_Balloc+0x6e>
 800a528:	2221      	movs	r2, #33	@ 0x21
 800a52a:	2104      	movs	r1, #4
 800a52c:	4620      	mov	r0, r4
 800a52e:	f001 ff45 	bl	800c3bc <_calloc_r>
 800a532:	69e3      	ldr	r3, [r4, #28]
 800a534:	60f0      	str	r0, [r6, #12]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e4      	bne.n	800a506 <_Balloc+0x2e>
 800a53c:	2000      	movs	r0, #0
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	6802      	ldr	r2, [r0, #0]
 800a542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a546:	2300      	movs	r3, #0
 800a548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a54c:	e7f7      	b.n	800a53e <_Balloc+0x66>
 800a54e:	bf00      	nop
 800a550:	0800e496 	.word	0x0800e496
 800a554:	0800e516 	.word	0x0800e516

0800a558 <_Bfree>:
 800a558:	b570      	push	{r4, r5, r6, lr}
 800a55a:	69c6      	ldr	r6, [r0, #28]
 800a55c:	4605      	mov	r5, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	b976      	cbnz	r6, 800a580 <_Bfree+0x28>
 800a562:	2010      	movs	r0, #16
 800a564:	f7ff ff02 	bl	800a36c <malloc>
 800a568:	4602      	mov	r2, r0
 800a56a:	61e8      	str	r0, [r5, #28]
 800a56c:	b920      	cbnz	r0, 800a578 <_Bfree+0x20>
 800a56e:	4b09      	ldr	r3, [pc, #36]	@ (800a594 <_Bfree+0x3c>)
 800a570:	4809      	ldr	r0, [pc, #36]	@ (800a598 <_Bfree+0x40>)
 800a572:	218f      	movs	r1, #143	@ 0x8f
 800a574:	f001 ff04 	bl	800c380 <__assert_func>
 800a578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a57c:	6006      	str	r6, [r0, #0]
 800a57e:	60c6      	str	r6, [r0, #12]
 800a580:	b13c      	cbz	r4, 800a592 <_Bfree+0x3a>
 800a582:	69eb      	ldr	r3, [r5, #28]
 800a584:	6862      	ldr	r2, [r4, #4]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a58c:	6021      	str	r1, [r4, #0]
 800a58e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a592:	bd70      	pop	{r4, r5, r6, pc}
 800a594:	0800e496 	.word	0x0800e496
 800a598:	0800e516 	.word	0x0800e516

0800a59c <__multadd>:
 800a59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a0:	690d      	ldr	r5, [r1, #16]
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	461e      	mov	r6, r3
 800a5a8:	f101 0c14 	add.w	ip, r1, #20
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a5b2:	b299      	uxth	r1, r3
 800a5b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a5b8:	0c1e      	lsrs	r6, r3, #16
 800a5ba:	0c0b      	lsrs	r3, r1, #16
 800a5bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a5c0:	b289      	uxth	r1, r1
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5c8:	4285      	cmp	r5, r0
 800a5ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a5ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5d2:	dcec      	bgt.n	800a5ae <__multadd+0x12>
 800a5d4:	b30e      	cbz	r6, 800a61a <__multadd+0x7e>
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	42ab      	cmp	r3, r5
 800a5da:	dc19      	bgt.n	800a610 <__multadd+0x74>
 800a5dc:	6861      	ldr	r1, [r4, #4]
 800a5de:	4638      	mov	r0, r7
 800a5e0:	3101      	adds	r1, #1
 800a5e2:	f7ff ff79 	bl	800a4d8 <_Balloc>
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	b928      	cbnz	r0, 800a5f6 <__multadd+0x5a>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a620 <__multadd+0x84>)
 800a5ee:	480d      	ldr	r0, [pc, #52]	@ (800a624 <__multadd+0x88>)
 800a5f0:	21ba      	movs	r1, #186	@ 0xba
 800a5f2:	f001 fec5 	bl	800c380 <__assert_func>
 800a5f6:	6922      	ldr	r2, [r4, #16]
 800a5f8:	3202      	adds	r2, #2
 800a5fa:	f104 010c 	add.w	r1, r4, #12
 800a5fe:	0092      	lsls	r2, r2, #2
 800a600:	300c      	adds	r0, #12
 800a602:	f001 fea5 	bl	800c350 <memcpy>
 800a606:	4621      	mov	r1, r4
 800a608:	4638      	mov	r0, r7
 800a60a:	f7ff ffa5 	bl	800a558 <_Bfree>
 800a60e:	4644      	mov	r4, r8
 800a610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a614:	3501      	adds	r5, #1
 800a616:	615e      	str	r6, [r3, #20]
 800a618:	6125      	str	r5, [r4, #16]
 800a61a:	4620      	mov	r0, r4
 800a61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a620:	0800e505 	.word	0x0800e505
 800a624:	0800e516 	.word	0x0800e516

0800a628 <__s2b>:
 800a628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a62c:	460c      	mov	r4, r1
 800a62e:	4615      	mov	r5, r2
 800a630:	461f      	mov	r7, r3
 800a632:	2209      	movs	r2, #9
 800a634:	3308      	adds	r3, #8
 800a636:	4606      	mov	r6, r0
 800a638:	fb93 f3f2 	sdiv	r3, r3, r2
 800a63c:	2100      	movs	r1, #0
 800a63e:	2201      	movs	r2, #1
 800a640:	429a      	cmp	r2, r3
 800a642:	db09      	blt.n	800a658 <__s2b+0x30>
 800a644:	4630      	mov	r0, r6
 800a646:	f7ff ff47 	bl	800a4d8 <_Balloc>
 800a64a:	b940      	cbnz	r0, 800a65e <__s2b+0x36>
 800a64c:	4602      	mov	r2, r0
 800a64e:	4b19      	ldr	r3, [pc, #100]	@ (800a6b4 <__s2b+0x8c>)
 800a650:	4819      	ldr	r0, [pc, #100]	@ (800a6b8 <__s2b+0x90>)
 800a652:	21d3      	movs	r1, #211	@ 0xd3
 800a654:	f001 fe94 	bl	800c380 <__assert_func>
 800a658:	0052      	lsls	r2, r2, #1
 800a65a:	3101      	adds	r1, #1
 800a65c:	e7f0      	b.n	800a640 <__s2b+0x18>
 800a65e:	9b08      	ldr	r3, [sp, #32]
 800a660:	6143      	str	r3, [r0, #20]
 800a662:	2d09      	cmp	r5, #9
 800a664:	f04f 0301 	mov.w	r3, #1
 800a668:	6103      	str	r3, [r0, #16]
 800a66a:	dd16      	ble.n	800a69a <__s2b+0x72>
 800a66c:	f104 0909 	add.w	r9, r4, #9
 800a670:	46c8      	mov	r8, r9
 800a672:	442c      	add	r4, r5
 800a674:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a678:	4601      	mov	r1, r0
 800a67a:	3b30      	subs	r3, #48	@ 0x30
 800a67c:	220a      	movs	r2, #10
 800a67e:	4630      	mov	r0, r6
 800a680:	f7ff ff8c 	bl	800a59c <__multadd>
 800a684:	45a0      	cmp	r8, r4
 800a686:	d1f5      	bne.n	800a674 <__s2b+0x4c>
 800a688:	f1a5 0408 	sub.w	r4, r5, #8
 800a68c:	444c      	add	r4, r9
 800a68e:	1b2d      	subs	r5, r5, r4
 800a690:	1963      	adds	r3, r4, r5
 800a692:	42bb      	cmp	r3, r7
 800a694:	db04      	blt.n	800a6a0 <__s2b+0x78>
 800a696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69a:	340a      	adds	r4, #10
 800a69c:	2509      	movs	r5, #9
 800a69e:	e7f6      	b.n	800a68e <__s2b+0x66>
 800a6a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6a4:	4601      	mov	r1, r0
 800a6a6:	3b30      	subs	r3, #48	@ 0x30
 800a6a8:	220a      	movs	r2, #10
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ff76 	bl	800a59c <__multadd>
 800a6b0:	e7ee      	b.n	800a690 <__s2b+0x68>
 800a6b2:	bf00      	nop
 800a6b4:	0800e505 	.word	0x0800e505
 800a6b8:	0800e516 	.word	0x0800e516

0800a6bc <__hi0bits>:
 800a6bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	bf36      	itet	cc
 800a6c4:	0403      	lslcc	r3, r0, #16
 800a6c6:	2000      	movcs	r0, #0
 800a6c8:	2010      	movcc	r0, #16
 800a6ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6ce:	bf3c      	itt	cc
 800a6d0:	021b      	lslcc	r3, r3, #8
 800a6d2:	3008      	addcc	r0, #8
 800a6d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6d8:	bf3c      	itt	cc
 800a6da:	011b      	lslcc	r3, r3, #4
 800a6dc:	3004      	addcc	r0, #4
 800a6de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6e2:	bf3c      	itt	cc
 800a6e4:	009b      	lslcc	r3, r3, #2
 800a6e6:	3002      	addcc	r0, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	db05      	blt.n	800a6f8 <__hi0bits+0x3c>
 800a6ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6f0:	f100 0001 	add.w	r0, r0, #1
 800a6f4:	bf08      	it	eq
 800a6f6:	2020      	moveq	r0, #32
 800a6f8:	4770      	bx	lr

0800a6fa <__lo0bits>:
 800a6fa:	6803      	ldr	r3, [r0, #0]
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	f013 0007 	ands.w	r0, r3, #7
 800a702:	d00b      	beq.n	800a71c <__lo0bits+0x22>
 800a704:	07d9      	lsls	r1, r3, #31
 800a706:	d421      	bmi.n	800a74c <__lo0bits+0x52>
 800a708:	0798      	lsls	r0, r3, #30
 800a70a:	bf49      	itett	mi
 800a70c:	085b      	lsrmi	r3, r3, #1
 800a70e:	089b      	lsrpl	r3, r3, #2
 800a710:	2001      	movmi	r0, #1
 800a712:	6013      	strmi	r3, [r2, #0]
 800a714:	bf5c      	itt	pl
 800a716:	6013      	strpl	r3, [r2, #0]
 800a718:	2002      	movpl	r0, #2
 800a71a:	4770      	bx	lr
 800a71c:	b299      	uxth	r1, r3
 800a71e:	b909      	cbnz	r1, 800a724 <__lo0bits+0x2a>
 800a720:	0c1b      	lsrs	r3, r3, #16
 800a722:	2010      	movs	r0, #16
 800a724:	b2d9      	uxtb	r1, r3
 800a726:	b909      	cbnz	r1, 800a72c <__lo0bits+0x32>
 800a728:	3008      	adds	r0, #8
 800a72a:	0a1b      	lsrs	r3, r3, #8
 800a72c:	0719      	lsls	r1, r3, #28
 800a72e:	bf04      	itt	eq
 800a730:	091b      	lsreq	r3, r3, #4
 800a732:	3004      	addeq	r0, #4
 800a734:	0799      	lsls	r1, r3, #30
 800a736:	bf04      	itt	eq
 800a738:	089b      	lsreq	r3, r3, #2
 800a73a:	3002      	addeq	r0, #2
 800a73c:	07d9      	lsls	r1, r3, #31
 800a73e:	d403      	bmi.n	800a748 <__lo0bits+0x4e>
 800a740:	085b      	lsrs	r3, r3, #1
 800a742:	f100 0001 	add.w	r0, r0, #1
 800a746:	d003      	beq.n	800a750 <__lo0bits+0x56>
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	4770      	bx	lr
 800a74c:	2000      	movs	r0, #0
 800a74e:	4770      	bx	lr
 800a750:	2020      	movs	r0, #32
 800a752:	4770      	bx	lr

0800a754 <__i2b>:
 800a754:	b510      	push	{r4, lr}
 800a756:	460c      	mov	r4, r1
 800a758:	2101      	movs	r1, #1
 800a75a:	f7ff febd 	bl	800a4d8 <_Balloc>
 800a75e:	4602      	mov	r2, r0
 800a760:	b928      	cbnz	r0, 800a76e <__i2b+0x1a>
 800a762:	4b05      	ldr	r3, [pc, #20]	@ (800a778 <__i2b+0x24>)
 800a764:	4805      	ldr	r0, [pc, #20]	@ (800a77c <__i2b+0x28>)
 800a766:	f240 1145 	movw	r1, #325	@ 0x145
 800a76a:	f001 fe09 	bl	800c380 <__assert_func>
 800a76e:	2301      	movs	r3, #1
 800a770:	6144      	str	r4, [r0, #20]
 800a772:	6103      	str	r3, [r0, #16]
 800a774:	bd10      	pop	{r4, pc}
 800a776:	bf00      	nop
 800a778:	0800e505 	.word	0x0800e505
 800a77c:	0800e516 	.word	0x0800e516

0800a780 <__multiply>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	4614      	mov	r4, r2
 800a786:	690a      	ldr	r2, [r1, #16]
 800a788:	6923      	ldr	r3, [r4, #16]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	bfa8      	it	ge
 800a78e:	4623      	movge	r3, r4
 800a790:	460f      	mov	r7, r1
 800a792:	bfa4      	itt	ge
 800a794:	460c      	movge	r4, r1
 800a796:	461f      	movge	r7, r3
 800a798:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a79c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a7a0:	68a3      	ldr	r3, [r4, #8]
 800a7a2:	6861      	ldr	r1, [r4, #4]
 800a7a4:	eb0a 0609 	add.w	r6, sl, r9
 800a7a8:	42b3      	cmp	r3, r6
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	bfb8      	it	lt
 800a7ae:	3101      	addlt	r1, #1
 800a7b0:	f7ff fe92 	bl	800a4d8 <_Balloc>
 800a7b4:	b930      	cbnz	r0, 800a7c4 <__multiply+0x44>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	4b44      	ldr	r3, [pc, #272]	@ (800a8cc <__multiply+0x14c>)
 800a7ba:	4845      	ldr	r0, [pc, #276]	@ (800a8d0 <__multiply+0x150>)
 800a7bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a7c0:	f001 fdde 	bl	800c380 <__assert_func>
 800a7c4:	f100 0514 	add.w	r5, r0, #20
 800a7c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4543      	cmp	r3, r8
 800a7d2:	d321      	bcc.n	800a818 <__multiply+0x98>
 800a7d4:	f107 0114 	add.w	r1, r7, #20
 800a7d8:	f104 0214 	add.w	r2, r4, #20
 800a7dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a7e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a7e4:	9302      	str	r3, [sp, #8]
 800a7e6:	1b13      	subs	r3, r2, r4
 800a7e8:	3b15      	subs	r3, #21
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	f104 0715 	add.w	r7, r4, #21
 800a7f4:	42ba      	cmp	r2, r7
 800a7f6:	bf38      	it	cc
 800a7f8:	2304      	movcc	r3, #4
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	9b02      	ldr	r3, [sp, #8]
 800a7fe:	9103      	str	r1, [sp, #12]
 800a800:	428b      	cmp	r3, r1
 800a802:	d80c      	bhi.n	800a81e <__multiply+0x9e>
 800a804:	2e00      	cmp	r6, #0
 800a806:	dd03      	ble.n	800a810 <__multiply+0x90>
 800a808:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d05b      	beq.n	800a8c8 <__multiply+0x148>
 800a810:	6106      	str	r6, [r0, #16]
 800a812:	b005      	add	sp, #20
 800a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a818:	f843 2b04 	str.w	r2, [r3], #4
 800a81c:	e7d8      	b.n	800a7d0 <__multiply+0x50>
 800a81e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a822:	f1ba 0f00 	cmp.w	sl, #0
 800a826:	d024      	beq.n	800a872 <__multiply+0xf2>
 800a828:	f104 0e14 	add.w	lr, r4, #20
 800a82c:	46a9      	mov	r9, r5
 800a82e:	f04f 0c00 	mov.w	ip, #0
 800a832:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a836:	f8d9 3000 	ldr.w	r3, [r9]
 800a83a:	fa1f fb87 	uxth.w	fp, r7
 800a83e:	b29b      	uxth	r3, r3
 800a840:	fb0a 330b 	mla	r3, sl, fp, r3
 800a844:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a848:	f8d9 7000 	ldr.w	r7, [r9]
 800a84c:	4463      	add	r3, ip
 800a84e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a852:	fb0a c70b 	mla	r7, sl, fp, ip
 800a856:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a860:	4572      	cmp	r2, lr
 800a862:	f849 3b04 	str.w	r3, [r9], #4
 800a866:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a86a:	d8e2      	bhi.n	800a832 <__multiply+0xb2>
 800a86c:	9b01      	ldr	r3, [sp, #4]
 800a86e:	f845 c003 	str.w	ip, [r5, r3]
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a878:	3104      	adds	r1, #4
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	d021      	beq.n	800a8c4 <__multiply+0x144>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	f104 0c14 	add.w	ip, r4, #20
 800a886:	46ae      	mov	lr, r5
 800a888:	f04f 0a00 	mov.w	sl, #0
 800a88c:	f8bc b000 	ldrh.w	fp, [ip]
 800a890:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a894:	fb09 770b 	mla	r7, r9, fp, r7
 800a898:	4457      	add	r7, sl
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a8a0:	f84e 3b04 	str.w	r3, [lr], #4
 800a8a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8ac:	f8be 3000 	ldrh.w	r3, [lr]
 800a8b0:	fb09 330a 	mla	r3, r9, sl, r3
 800a8b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a8b8:	4562      	cmp	r2, ip
 800a8ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8be:	d8e5      	bhi.n	800a88c <__multiply+0x10c>
 800a8c0:	9f01      	ldr	r7, [sp, #4]
 800a8c2:	51eb      	str	r3, [r5, r7]
 800a8c4:	3504      	adds	r5, #4
 800a8c6:	e799      	b.n	800a7fc <__multiply+0x7c>
 800a8c8:	3e01      	subs	r6, #1
 800a8ca:	e79b      	b.n	800a804 <__multiply+0x84>
 800a8cc:	0800e505 	.word	0x0800e505
 800a8d0:	0800e516 	.word	0x0800e516

0800a8d4 <__pow5mult>:
 800a8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	4615      	mov	r5, r2
 800a8da:	f012 0203 	ands.w	r2, r2, #3
 800a8de:	4607      	mov	r7, r0
 800a8e0:	460e      	mov	r6, r1
 800a8e2:	d007      	beq.n	800a8f4 <__pow5mult+0x20>
 800a8e4:	4c25      	ldr	r4, [pc, #148]	@ (800a97c <__pow5mult+0xa8>)
 800a8e6:	3a01      	subs	r2, #1
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8ee:	f7ff fe55 	bl	800a59c <__multadd>
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	10ad      	asrs	r5, r5, #2
 800a8f6:	d03d      	beq.n	800a974 <__pow5mult+0xa0>
 800a8f8:	69fc      	ldr	r4, [r7, #28]
 800a8fa:	b97c      	cbnz	r4, 800a91c <__pow5mult+0x48>
 800a8fc:	2010      	movs	r0, #16
 800a8fe:	f7ff fd35 	bl	800a36c <malloc>
 800a902:	4602      	mov	r2, r0
 800a904:	61f8      	str	r0, [r7, #28]
 800a906:	b928      	cbnz	r0, 800a914 <__pow5mult+0x40>
 800a908:	4b1d      	ldr	r3, [pc, #116]	@ (800a980 <__pow5mult+0xac>)
 800a90a:	481e      	ldr	r0, [pc, #120]	@ (800a984 <__pow5mult+0xb0>)
 800a90c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a910:	f001 fd36 	bl	800c380 <__assert_func>
 800a914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a918:	6004      	str	r4, [r0, #0]
 800a91a:	60c4      	str	r4, [r0, #12]
 800a91c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a924:	b94c      	cbnz	r4, 800a93a <__pow5mult+0x66>
 800a926:	f240 2171 	movw	r1, #625	@ 0x271
 800a92a:	4638      	mov	r0, r7
 800a92c:	f7ff ff12 	bl	800a754 <__i2b>
 800a930:	2300      	movs	r3, #0
 800a932:	f8c8 0008 	str.w	r0, [r8, #8]
 800a936:	4604      	mov	r4, r0
 800a938:	6003      	str	r3, [r0, #0]
 800a93a:	f04f 0900 	mov.w	r9, #0
 800a93e:	07eb      	lsls	r3, r5, #31
 800a940:	d50a      	bpl.n	800a958 <__pow5mult+0x84>
 800a942:	4631      	mov	r1, r6
 800a944:	4622      	mov	r2, r4
 800a946:	4638      	mov	r0, r7
 800a948:	f7ff ff1a 	bl	800a780 <__multiply>
 800a94c:	4631      	mov	r1, r6
 800a94e:	4680      	mov	r8, r0
 800a950:	4638      	mov	r0, r7
 800a952:	f7ff fe01 	bl	800a558 <_Bfree>
 800a956:	4646      	mov	r6, r8
 800a958:	106d      	asrs	r5, r5, #1
 800a95a:	d00b      	beq.n	800a974 <__pow5mult+0xa0>
 800a95c:	6820      	ldr	r0, [r4, #0]
 800a95e:	b938      	cbnz	r0, 800a970 <__pow5mult+0x9c>
 800a960:	4622      	mov	r2, r4
 800a962:	4621      	mov	r1, r4
 800a964:	4638      	mov	r0, r7
 800a966:	f7ff ff0b 	bl	800a780 <__multiply>
 800a96a:	6020      	str	r0, [r4, #0]
 800a96c:	f8c0 9000 	str.w	r9, [r0]
 800a970:	4604      	mov	r4, r0
 800a972:	e7e4      	b.n	800a93e <__pow5mult+0x6a>
 800a974:	4630      	mov	r0, r6
 800a976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97a:	bf00      	nop
 800a97c:	0800e570 	.word	0x0800e570
 800a980:	0800e496 	.word	0x0800e496
 800a984:	0800e516 	.word	0x0800e516

0800a988 <__lshift>:
 800a988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98c:	460c      	mov	r4, r1
 800a98e:	6849      	ldr	r1, [r1, #4]
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a996:	68a3      	ldr	r3, [r4, #8]
 800a998:	4607      	mov	r7, r0
 800a99a:	4691      	mov	r9, r2
 800a99c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9a0:	f108 0601 	add.w	r6, r8, #1
 800a9a4:	42b3      	cmp	r3, r6
 800a9a6:	db0b      	blt.n	800a9c0 <__lshift+0x38>
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7ff fd95 	bl	800a4d8 <_Balloc>
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	b948      	cbnz	r0, 800a9c6 <__lshift+0x3e>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	4b28      	ldr	r3, [pc, #160]	@ (800aa58 <__lshift+0xd0>)
 800a9b6:	4829      	ldr	r0, [pc, #164]	@ (800aa5c <__lshift+0xd4>)
 800a9b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a9bc:	f001 fce0 	bl	800c380 <__assert_func>
 800a9c0:	3101      	adds	r1, #1
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	e7ee      	b.n	800a9a4 <__lshift+0x1c>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f100 0114 	add.w	r1, r0, #20
 800a9cc:	f100 0210 	add.w	r2, r0, #16
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	4553      	cmp	r3, sl
 800a9d4:	db33      	blt.n	800aa3e <__lshift+0xb6>
 800a9d6:	6920      	ldr	r0, [r4, #16]
 800a9d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9dc:	f104 0314 	add.w	r3, r4, #20
 800a9e0:	f019 091f 	ands.w	r9, r9, #31
 800a9e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9ec:	d02b      	beq.n	800aa46 <__lshift+0xbe>
 800a9ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a9f2:	468a      	mov	sl, r1
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a9fc:	4310      	orrs	r0, r2
 800a9fe:	f84a 0b04 	str.w	r0, [sl], #4
 800aa02:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa06:	459c      	cmp	ip, r3
 800aa08:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa0c:	d8f3      	bhi.n	800a9f6 <__lshift+0x6e>
 800aa0e:	ebac 0304 	sub.w	r3, ip, r4
 800aa12:	3b15      	subs	r3, #21
 800aa14:	f023 0303 	bic.w	r3, r3, #3
 800aa18:	3304      	adds	r3, #4
 800aa1a:	f104 0015 	add.w	r0, r4, #21
 800aa1e:	4584      	cmp	ip, r0
 800aa20:	bf38      	it	cc
 800aa22:	2304      	movcc	r3, #4
 800aa24:	50ca      	str	r2, [r1, r3]
 800aa26:	b10a      	cbz	r2, 800aa2c <__lshift+0xa4>
 800aa28:	f108 0602 	add.w	r6, r8, #2
 800aa2c:	3e01      	subs	r6, #1
 800aa2e:	4638      	mov	r0, r7
 800aa30:	612e      	str	r6, [r5, #16]
 800aa32:	4621      	mov	r1, r4
 800aa34:	f7ff fd90 	bl	800a558 <_Bfree>
 800aa38:	4628      	mov	r0, r5
 800aa3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa42:	3301      	adds	r3, #1
 800aa44:	e7c5      	b.n	800a9d2 <__lshift+0x4a>
 800aa46:	3904      	subs	r1, #4
 800aa48:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa50:	459c      	cmp	ip, r3
 800aa52:	d8f9      	bhi.n	800aa48 <__lshift+0xc0>
 800aa54:	e7ea      	b.n	800aa2c <__lshift+0xa4>
 800aa56:	bf00      	nop
 800aa58:	0800e505 	.word	0x0800e505
 800aa5c:	0800e516 	.word	0x0800e516

0800aa60 <__mcmp>:
 800aa60:	690a      	ldr	r2, [r1, #16]
 800aa62:	4603      	mov	r3, r0
 800aa64:	6900      	ldr	r0, [r0, #16]
 800aa66:	1a80      	subs	r0, r0, r2
 800aa68:	b530      	push	{r4, r5, lr}
 800aa6a:	d10e      	bne.n	800aa8a <__mcmp+0x2a>
 800aa6c:	3314      	adds	r3, #20
 800aa6e:	3114      	adds	r1, #20
 800aa70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa80:	4295      	cmp	r5, r2
 800aa82:	d003      	beq.n	800aa8c <__mcmp+0x2c>
 800aa84:	d205      	bcs.n	800aa92 <__mcmp+0x32>
 800aa86:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8a:	bd30      	pop	{r4, r5, pc}
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d3f3      	bcc.n	800aa78 <__mcmp+0x18>
 800aa90:	e7fb      	b.n	800aa8a <__mcmp+0x2a>
 800aa92:	2001      	movs	r0, #1
 800aa94:	e7f9      	b.n	800aa8a <__mcmp+0x2a>
	...

0800aa98 <__mdiff>:
 800aa98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	4689      	mov	r9, r1
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4648      	mov	r0, r9
 800aaa4:	4614      	mov	r4, r2
 800aaa6:	f7ff ffdb 	bl	800aa60 <__mcmp>
 800aaaa:	1e05      	subs	r5, r0, #0
 800aaac:	d112      	bne.n	800aad4 <__mdiff+0x3c>
 800aaae:	4629      	mov	r1, r5
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7ff fd11 	bl	800a4d8 <_Balloc>
 800aab6:	4602      	mov	r2, r0
 800aab8:	b928      	cbnz	r0, 800aac6 <__mdiff+0x2e>
 800aaba:	4b3f      	ldr	r3, [pc, #252]	@ (800abb8 <__mdiff+0x120>)
 800aabc:	f240 2137 	movw	r1, #567	@ 0x237
 800aac0:	483e      	ldr	r0, [pc, #248]	@ (800abbc <__mdiff+0x124>)
 800aac2:	f001 fc5d 	bl	800c380 <__assert_func>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aacc:	4610      	mov	r0, r2
 800aace:	b003      	add	sp, #12
 800aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad4:	bfbc      	itt	lt
 800aad6:	464b      	movlt	r3, r9
 800aad8:	46a1      	movlt	r9, r4
 800aada:	4630      	mov	r0, r6
 800aadc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aae0:	bfba      	itte	lt
 800aae2:	461c      	movlt	r4, r3
 800aae4:	2501      	movlt	r5, #1
 800aae6:	2500      	movge	r5, #0
 800aae8:	f7ff fcf6 	bl	800a4d8 <_Balloc>
 800aaec:	4602      	mov	r2, r0
 800aaee:	b918      	cbnz	r0, 800aaf8 <__mdiff+0x60>
 800aaf0:	4b31      	ldr	r3, [pc, #196]	@ (800abb8 <__mdiff+0x120>)
 800aaf2:	f240 2145 	movw	r1, #581	@ 0x245
 800aaf6:	e7e3      	b.n	800aac0 <__mdiff+0x28>
 800aaf8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aafc:	6926      	ldr	r6, [r4, #16]
 800aafe:	60c5      	str	r5, [r0, #12]
 800ab00:	f109 0310 	add.w	r3, r9, #16
 800ab04:	f109 0514 	add.w	r5, r9, #20
 800ab08:	f104 0e14 	add.w	lr, r4, #20
 800ab0c:	f100 0b14 	add.w	fp, r0, #20
 800ab10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	46d9      	mov	r9, fp
 800ab1c:	f04f 0c00 	mov.w	ip, #0
 800ab20:	9b01      	ldr	r3, [sp, #4]
 800ab22:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab26:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab2a:	9301      	str	r3, [sp, #4]
 800ab2c:	fa1f f38a 	uxth.w	r3, sl
 800ab30:	4619      	mov	r1, r3
 800ab32:	b283      	uxth	r3, r0
 800ab34:	1acb      	subs	r3, r1, r3
 800ab36:	0c00      	lsrs	r0, r0, #16
 800ab38:	4463      	add	r3, ip
 800ab3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab48:	4576      	cmp	r6, lr
 800ab4a:	f849 3b04 	str.w	r3, [r9], #4
 800ab4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab52:	d8e5      	bhi.n	800ab20 <__mdiff+0x88>
 800ab54:	1b33      	subs	r3, r6, r4
 800ab56:	3b15      	subs	r3, #21
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	3415      	adds	r4, #21
 800ab5e:	3304      	adds	r3, #4
 800ab60:	42a6      	cmp	r6, r4
 800ab62:	bf38      	it	cc
 800ab64:	2304      	movcc	r3, #4
 800ab66:	441d      	add	r5, r3
 800ab68:	445b      	add	r3, fp
 800ab6a:	461e      	mov	r6, r3
 800ab6c:	462c      	mov	r4, r5
 800ab6e:	4544      	cmp	r4, r8
 800ab70:	d30e      	bcc.n	800ab90 <__mdiff+0xf8>
 800ab72:	f108 0103 	add.w	r1, r8, #3
 800ab76:	1b49      	subs	r1, r1, r5
 800ab78:	f021 0103 	bic.w	r1, r1, #3
 800ab7c:	3d03      	subs	r5, #3
 800ab7e:	45a8      	cmp	r8, r5
 800ab80:	bf38      	it	cc
 800ab82:	2100      	movcc	r1, #0
 800ab84:	440b      	add	r3, r1
 800ab86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab8a:	b191      	cbz	r1, 800abb2 <__mdiff+0x11a>
 800ab8c:	6117      	str	r7, [r2, #16]
 800ab8e:	e79d      	b.n	800aacc <__mdiff+0x34>
 800ab90:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab94:	46e6      	mov	lr, ip
 800ab96:	0c08      	lsrs	r0, r1, #16
 800ab98:	fa1c fc81 	uxtah	ip, ip, r1
 800ab9c:	4471      	add	r1, lr
 800ab9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aba2:	b289      	uxth	r1, r1
 800aba4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aba8:	f846 1b04 	str.w	r1, [r6], #4
 800abac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abb0:	e7dd      	b.n	800ab6e <__mdiff+0xd6>
 800abb2:	3f01      	subs	r7, #1
 800abb4:	e7e7      	b.n	800ab86 <__mdiff+0xee>
 800abb6:	bf00      	nop
 800abb8:	0800e505 	.word	0x0800e505
 800abbc:	0800e516 	.word	0x0800e516

0800abc0 <__ulp>:
 800abc0:	b082      	sub	sp, #8
 800abc2:	ed8d 0b00 	vstr	d0, [sp]
 800abc6:	9a01      	ldr	r2, [sp, #4]
 800abc8:	4b0f      	ldr	r3, [pc, #60]	@ (800ac08 <__ulp+0x48>)
 800abca:	4013      	ands	r3, r2
 800abcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dc08      	bgt.n	800abe6 <__ulp+0x26>
 800abd4:	425b      	negs	r3, r3
 800abd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800abda:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abde:	da04      	bge.n	800abea <__ulp+0x2a>
 800abe0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800abe4:	4113      	asrs	r3, r2
 800abe6:	2200      	movs	r2, #0
 800abe8:	e008      	b.n	800abfc <__ulp+0x3c>
 800abea:	f1a2 0314 	sub.w	r3, r2, #20
 800abee:	2b1e      	cmp	r3, #30
 800abf0:	bfda      	itte	le
 800abf2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800abf6:	40da      	lsrle	r2, r3
 800abf8:	2201      	movgt	r2, #1
 800abfa:	2300      	movs	r3, #0
 800abfc:	4619      	mov	r1, r3
 800abfe:	4610      	mov	r0, r2
 800ac00:	ec41 0b10 	vmov	d0, r0, r1
 800ac04:	b002      	add	sp, #8
 800ac06:	4770      	bx	lr
 800ac08:	7ff00000 	.word	0x7ff00000

0800ac0c <__b2d>:
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	6906      	ldr	r6, [r0, #16]
 800ac12:	f100 0814 	add.w	r8, r0, #20
 800ac16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac1a:	1f37      	subs	r7, r6, #4
 800ac1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac20:	4610      	mov	r0, r2
 800ac22:	f7ff fd4b 	bl	800a6bc <__hi0bits>
 800ac26:	f1c0 0320 	rsb	r3, r0, #32
 800ac2a:	280a      	cmp	r0, #10
 800ac2c:	600b      	str	r3, [r1, #0]
 800ac2e:	491b      	ldr	r1, [pc, #108]	@ (800ac9c <__b2d+0x90>)
 800ac30:	dc15      	bgt.n	800ac5e <__b2d+0x52>
 800ac32:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac36:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac3a:	45b8      	cmp	r8, r7
 800ac3c:	ea43 0501 	orr.w	r5, r3, r1
 800ac40:	bf34      	ite	cc
 800ac42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac46:	2300      	movcs	r3, #0
 800ac48:	3015      	adds	r0, #21
 800ac4a:	fa02 f000 	lsl.w	r0, r2, r0
 800ac4e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac52:	4303      	orrs	r3, r0
 800ac54:	461c      	mov	r4, r3
 800ac56:	ec45 4b10 	vmov	d0, r4, r5
 800ac5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5e:	45b8      	cmp	r8, r7
 800ac60:	bf3a      	itte	cc
 800ac62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac66:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac6a:	2300      	movcs	r3, #0
 800ac6c:	380b      	subs	r0, #11
 800ac6e:	d012      	beq.n	800ac96 <__b2d+0x8a>
 800ac70:	f1c0 0120 	rsb	r1, r0, #32
 800ac74:	fa23 f401 	lsr.w	r4, r3, r1
 800ac78:	4082      	lsls	r2, r0
 800ac7a:	4322      	orrs	r2, r4
 800ac7c:	4547      	cmp	r7, r8
 800ac7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ac82:	bf8c      	ite	hi
 800ac84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac88:	2200      	movls	r2, #0
 800ac8a:	4083      	lsls	r3, r0
 800ac8c:	40ca      	lsrs	r2, r1
 800ac8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac92:	4313      	orrs	r3, r2
 800ac94:	e7de      	b.n	800ac54 <__b2d+0x48>
 800ac96:	ea42 0501 	orr.w	r5, r2, r1
 800ac9a:	e7db      	b.n	800ac54 <__b2d+0x48>
 800ac9c:	3ff00000 	.word	0x3ff00000

0800aca0 <__d2b>:
 800aca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	460f      	mov	r7, r1
 800aca6:	2101      	movs	r1, #1
 800aca8:	ec59 8b10 	vmov	r8, r9, d0
 800acac:	4616      	mov	r6, r2
 800acae:	f7ff fc13 	bl	800a4d8 <_Balloc>
 800acb2:	4604      	mov	r4, r0
 800acb4:	b930      	cbnz	r0, 800acc4 <__d2b+0x24>
 800acb6:	4602      	mov	r2, r0
 800acb8:	4b23      	ldr	r3, [pc, #140]	@ (800ad48 <__d2b+0xa8>)
 800acba:	4824      	ldr	r0, [pc, #144]	@ (800ad4c <__d2b+0xac>)
 800acbc:	f240 310f 	movw	r1, #783	@ 0x30f
 800acc0:	f001 fb5e 	bl	800c380 <__assert_func>
 800acc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800accc:	b10d      	cbz	r5, 800acd2 <__d2b+0x32>
 800acce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acd2:	9301      	str	r3, [sp, #4]
 800acd4:	f1b8 0300 	subs.w	r3, r8, #0
 800acd8:	d023      	beq.n	800ad22 <__d2b+0x82>
 800acda:	4668      	mov	r0, sp
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	f7ff fd0c 	bl	800a6fa <__lo0bits>
 800ace2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ace6:	b1d0      	cbz	r0, 800ad1e <__d2b+0x7e>
 800ace8:	f1c0 0320 	rsb	r3, r0, #32
 800acec:	fa02 f303 	lsl.w	r3, r2, r3
 800acf0:	430b      	orrs	r3, r1
 800acf2:	40c2      	lsrs	r2, r0
 800acf4:	6163      	str	r3, [r4, #20]
 800acf6:	9201      	str	r2, [sp, #4]
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	61a3      	str	r3, [r4, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	bf0c      	ite	eq
 800ad00:	2201      	moveq	r2, #1
 800ad02:	2202      	movne	r2, #2
 800ad04:	6122      	str	r2, [r4, #16]
 800ad06:	b1a5      	cbz	r5, 800ad32 <__d2b+0x92>
 800ad08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad0c:	4405      	add	r5, r0
 800ad0e:	603d      	str	r5, [r7, #0]
 800ad10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad14:	6030      	str	r0, [r6, #0]
 800ad16:	4620      	mov	r0, r4
 800ad18:	b003      	add	sp, #12
 800ad1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1e:	6161      	str	r1, [r4, #20]
 800ad20:	e7ea      	b.n	800acf8 <__d2b+0x58>
 800ad22:	a801      	add	r0, sp, #4
 800ad24:	f7ff fce9 	bl	800a6fa <__lo0bits>
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	6163      	str	r3, [r4, #20]
 800ad2c:	3020      	adds	r0, #32
 800ad2e:	2201      	movs	r2, #1
 800ad30:	e7e8      	b.n	800ad04 <__d2b+0x64>
 800ad32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad3a:	6038      	str	r0, [r7, #0]
 800ad3c:	6918      	ldr	r0, [r3, #16]
 800ad3e:	f7ff fcbd 	bl	800a6bc <__hi0bits>
 800ad42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad46:	e7e5      	b.n	800ad14 <__d2b+0x74>
 800ad48:	0800e505 	.word	0x0800e505
 800ad4c:	0800e516 	.word	0x0800e516

0800ad50 <__ratio>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	b085      	sub	sp, #20
 800ad56:	e9cd 1000 	strd	r1, r0, [sp]
 800ad5a:	a902      	add	r1, sp, #8
 800ad5c:	f7ff ff56 	bl	800ac0c <__b2d>
 800ad60:	9800      	ldr	r0, [sp, #0]
 800ad62:	a903      	add	r1, sp, #12
 800ad64:	ec55 4b10 	vmov	r4, r5, d0
 800ad68:	f7ff ff50 	bl	800ac0c <__b2d>
 800ad6c:	9b01      	ldr	r3, [sp, #4]
 800ad6e:	6919      	ldr	r1, [r3, #16]
 800ad70:	9b00      	ldr	r3, [sp, #0]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	1ac9      	subs	r1, r1, r3
 800ad76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad7a:	1a9b      	subs	r3, r3, r2
 800ad7c:	ec5b ab10 	vmov	sl, fp, d0
 800ad80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	bfce      	itee	gt
 800ad88:	462a      	movgt	r2, r5
 800ad8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad8e:	465a      	movle	r2, fp
 800ad90:	462f      	mov	r7, r5
 800ad92:	46d9      	mov	r9, fp
 800ad94:	bfcc      	ite	gt
 800ad96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ad9e:	464b      	mov	r3, r9
 800ada0:	4652      	mov	r2, sl
 800ada2:	4620      	mov	r0, r4
 800ada4:	4639      	mov	r1, r7
 800ada6:	f7f5 fd71 	bl	800088c <__aeabi_ddiv>
 800adaa:	ec41 0b10 	vmov	d0, r0, r1
 800adae:	b005      	add	sp, #20
 800adb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800adb4 <__copybits>:
 800adb4:	3901      	subs	r1, #1
 800adb6:	b570      	push	{r4, r5, r6, lr}
 800adb8:	1149      	asrs	r1, r1, #5
 800adba:	6914      	ldr	r4, [r2, #16]
 800adbc:	3101      	adds	r1, #1
 800adbe:	f102 0314 	add.w	r3, r2, #20
 800adc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800adc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800adca:	1f05      	subs	r5, r0, #4
 800adcc:	42a3      	cmp	r3, r4
 800adce:	d30c      	bcc.n	800adea <__copybits+0x36>
 800add0:	1aa3      	subs	r3, r4, r2
 800add2:	3b11      	subs	r3, #17
 800add4:	f023 0303 	bic.w	r3, r3, #3
 800add8:	3211      	adds	r2, #17
 800adda:	42a2      	cmp	r2, r4
 800addc:	bf88      	it	hi
 800adde:	2300      	movhi	r3, #0
 800ade0:	4418      	add	r0, r3
 800ade2:	2300      	movs	r3, #0
 800ade4:	4288      	cmp	r0, r1
 800ade6:	d305      	bcc.n	800adf4 <__copybits+0x40>
 800ade8:	bd70      	pop	{r4, r5, r6, pc}
 800adea:	f853 6b04 	ldr.w	r6, [r3], #4
 800adee:	f845 6f04 	str.w	r6, [r5, #4]!
 800adf2:	e7eb      	b.n	800adcc <__copybits+0x18>
 800adf4:	f840 3b04 	str.w	r3, [r0], #4
 800adf8:	e7f4      	b.n	800ade4 <__copybits+0x30>

0800adfa <__any_on>:
 800adfa:	f100 0214 	add.w	r2, r0, #20
 800adfe:	6900      	ldr	r0, [r0, #16]
 800ae00:	114b      	asrs	r3, r1, #5
 800ae02:	4298      	cmp	r0, r3
 800ae04:	b510      	push	{r4, lr}
 800ae06:	db11      	blt.n	800ae2c <__any_on+0x32>
 800ae08:	dd0a      	ble.n	800ae20 <__any_on+0x26>
 800ae0a:	f011 011f 	ands.w	r1, r1, #31
 800ae0e:	d007      	beq.n	800ae20 <__any_on+0x26>
 800ae10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae14:	fa24 f001 	lsr.w	r0, r4, r1
 800ae18:	fa00 f101 	lsl.w	r1, r0, r1
 800ae1c:	428c      	cmp	r4, r1
 800ae1e:	d10b      	bne.n	800ae38 <__any_on+0x3e>
 800ae20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d803      	bhi.n	800ae30 <__any_on+0x36>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	bd10      	pop	{r4, pc}
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	e7f7      	b.n	800ae20 <__any_on+0x26>
 800ae30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae34:	2900      	cmp	r1, #0
 800ae36:	d0f5      	beq.n	800ae24 <__any_on+0x2a>
 800ae38:	2001      	movs	r0, #1
 800ae3a:	e7f6      	b.n	800ae2a <__any_on+0x30>

0800ae3c <sulp>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	460d      	mov	r5, r1
 800ae42:	ec45 4b10 	vmov	d0, r4, r5
 800ae46:	4616      	mov	r6, r2
 800ae48:	f7ff feba 	bl	800abc0 <__ulp>
 800ae4c:	ec51 0b10 	vmov	r0, r1, d0
 800ae50:	b17e      	cbz	r6, 800ae72 <sulp+0x36>
 800ae52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	dd09      	ble.n	800ae72 <sulp+0x36>
 800ae5e:	051b      	lsls	r3, r3, #20
 800ae60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ae64:	2400      	movs	r4, #0
 800ae66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	f7f5 fbe3 	bl	8000638 <__aeabi_dmul>
 800ae72:	ec41 0b10 	vmov	d0, r0, r1
 800ae76:	bd70      	pop	{r4, r5, r6, pc}

0800ae78 <_strtod_l>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	b09f      	sub	sp, #124	@ 0x7c
 800ae7e:	460c      	mov	r4, r1
 800ae80:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ae82:	2200      	movs	r2, #0
 800ae84:	921a      	str	r2, [sp, #104]	@ 0x68
 800ae86:	9005      	str	r0, [sp, #20]
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	f04f 0b00 	mov.w	fp, #0
 800ae90:	460a      	mov	r2, r1
 800ae92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae94:	7811      	ldrb	r1, [r2, #0]
 800ae96:	292b      	cmp	r1, #43	@ 0x2b
 800ae98:	d04a      	beq.n	800af30 <_strtod_l+0xb8>
 800ae9a:	d838      	bhi.n	800af0e <_strtod_l+0x96>
 800ae9c:	290d      	cmp	r1, #13
 800ae9e:	d832      	bhi.n	800af06 <_strtod_l+0x8e>
 800aea0:	2908      	cmp	r1, #8
 800aea2:	d832      	bhi.n	800af0a <_strtod_l+0x92>
 800aea4:	2900      	cmp	r1, #0
 800aea6:	d03b      	beq.n	800af20 <_strtod_l+0xa8>
 800aea8:	2200      	movs	r2, #0
 800aeaa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aeac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aeae:	782a      	ldrb	r2, [r5, #0]
 800aeb0:	2a30      	cmp	r2, #48	@ 0x30
 800aeb2:	f040 80b3 	bne.w	800b01c <_strtod_l+0x1a4>
 800aeb6:	786a      	ldrb	r2, [r5, #1]
 800aeb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aebc:	2a58      	cmp	r2, #88	@ 0x58
 800aebe:	d16e      	bne.n	800af9e <_strtod_l+0x126>
 800aec0:	9302      	str	r3, [sp, #8]
 800aec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	ab1a      	add	r3, sp, #104	@ 0x68
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	4a8e      	ldr	r2, [pc, #568]	@ (800b104 <_strtod_l+0x28c>)
 800aecc:	9805      	ldr	r0, [sp, #20]
 800aece:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aed0:	a919      	add	r1, sp, #100	@ 0x64
 800aed2:	f001 faef 	bl	800c4b4 <__gethex>
 800aed6:	f010 060f 	ands.w	r6, r0, #15
 800aeda:	4604      	mov	r4, r0
 800aedc:	d005      	beq.n	800aeea <_strtod_l+0x72>
 800aede:	2e06      	cmp	r6, #6
 800aee0:	d128      	bne.n	800af34 <_strtod_l+0xbc>
 800aee2:	3501      	adds	r5, #1
 800aee4:	2300      	movs	r3, #0
 800aee6:	9519      	str	r5, [sp, #100]	@ 0x64
 800aee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f040 858e 	bne.w	800ba0e <_strtod_l+0xb96>
 800aef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aef4:	b1cb      	cbz	r3, 800af2a <_strtod_l+0xb2>
 800aef6:	4652      	mov	r2, sl
 800aef8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aefc:	ec43 2b10 	vmov	d0, r2, r3
 800af00:	b01f      	add	sp, #124	@ 0x7c
 800af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af06:	2920      	cmp	r1, #32
 800af08:	d1ce      	bne.n	800aea8 <_strtod_l+0x30>
 800af0a:	3201      	adds	r2, #1
 800af0c:	e7c1      	b.n	800ae92 <_strtod_l+0x1a>
 800af0e:	292d      	cmp	r1, #45	@ 0x2d
 800af10:	d1ca      	bne.n	800aea8 <_strtod_l+0x30>
 800af12:	2101      	movs	r1, #1
 800af14:	910b      	str	r1, [sp, #44]	@ 0x2c
 800af16:	1c51      	adds	r1, r2, #1
 800af18:	9119      	str	r1, [sp, #100]	@ 0x64
 800af1a:	7852      	ldrb	r2, [r2, #1]
 800af1c:	2a00      	cmp	r2, #0
 800af1e:	d1c5      	bne.n	800aeac <_strtod_l+0x34>
 800af20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af22:	9419      	str	r4, [sp, #100]	@ 0x64
 800af24:	2b00      	cmp	r3, #0
 800af26:	f040 8570 	bne.w	800ba0a <_strtod_l+0xb92>
 800af2a:	4652      	mov	r2, sl
 800af2c:	465b      	mov	r3, fp
 800af2e:	e7e5      	b.n	800aefc <_strtod_l+0x84>
 800af30:	2100      	movs	r1, #0
 800af32:	e7ef      	b.n	800af14 <_strtod_l+0x9c>
 800af34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af36:	b13a      	cbz	r2, 800af48 <_strtod_l+0xd0>
 800af38:	2135      	movs	r1, #53	@ 0x35
 800af3a:	a81c      	add	r0, sp, #112	@ 0x70
 800af3c:	f7ff ff3a 	bl	800adb4 <__copybits>
 800af40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af42:	9805      	ldr	r0, [sp, #20]
 800af44:	f7ff fb08 	bl	800a558 <_Bfree>
 800af48:	3e01      	subs	r6, #1
 800af4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800af4c:	2e04      	cmp	r6, #4
 800af4e:	d806      	bhi.n	800af5e <_strtod_l+0xe6>
 800af50:	e8df f006 	tbb	[pc, r6]
 800af54:	201d0314 	.word	0x201d0314
 800af58:	14          	.byte	0x14
 800af59:	00          	.byte	0x00
 800af5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800af5e:	05e1      	lsls	r1, r4, #23
 800af60:	bf48      	it	mi
 800af62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800af66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af6a:	0d1b      	lsrs	r3, r3, #20
 800af6c:	051b      	lsls	r3, r3, #20
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1bb      	bne.n	800aeea <_strtod_l+0x72>
 800af72:	f7fe fb31 	bl	80095d8 <__errno>
 800af76:	2322      	movs	r3, #34	@ 0x22
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	e7b6      	b.n	800aeea <_strtod_l+0x72>
 800af7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800af80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800af84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800af88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af8c:	e7e7      	b.n	800af5e <_strtod_l+0xe6>
 800af8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b10c <_strtod_l+0x294>
 800af92:	e7e4      	b.n	800af5e <_strtod_l+0xe6>
 800af94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800af98:	f04f 3aff 	mov.w	sl, #4294967295
 800af9c:	e7df      	b.n	800af5e <_strtod_l+0xe6>
 800af9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	9219      	str	r2, [sp, #100]	@ 0x64
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b30      	cmp	r3, #48	@ 0x30
 800afa8:	d0f9      	beq.n	800af9e <_strtod_l+0x126>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d09d      	beq.n	800aeea <_strtod_l+0x72>
 800afae:	2301      	movs	r3, #1
 800afb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800afb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800afb6:	2300      	movs	r3, #0
 800afb8:	9308      	str	r3, [sp, #32]
 800afba:	930a      	str	r3, [sp, #40]	@ 0x28
 800afbc:	461f      	mov	r7, r3
 800afbe:	220a      	movs	r2, #10
 800afc0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800afc2:	7805      	ldrb	r5, [r0, #0]
 800afc4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800afc8:	b2d9      	uxtb	r1, r3
 800afca:	2909      	cmp	r1, #9
 800afcc:	d928      	bls.n	800b020 <_strtod_l+0x1a8>
 800afce:	494e      	ldr	r1, [pc, #312]	@ (800b108 <_strtod_l+0x290>)
 800afd0:	2201      	movs	r2, #1
 800afd2:	f001 f979 	bl	800c2c8 <strncmp>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d032      	beq.n	800b040 <_strtod_l+0x1c8>
 800afda:	2000      	movs	r0, #0
 800afdc:	462a      	mov	r2, r5
 800afde:	4681      	mov	r9, r0
 800afe0:	463d      	mov	r5, r7
 800afe2:	4603      	mov	r3, r0
 800afe4:	2a65      	cmp	r2, #101	@ 0x65
 800afe6:	d001      	beq.n	800afec <_strtod_l+0x174>
 800afe8:	2a45      	cmp	r2, #69	@ 0x45
 800afea:	d114      	bne.n	800b016 <_strtod_l+0x19e>
 800afec:	b91d      	cbnz	r5, 800aff6 <_strtod_l+0x17e>
 800afee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aff0:	4302      	orrs	r2, r0
 800aff2:	d095      	beq.n	800af20 <_strtod_l+0xa8>
 800aff4:	2500      	movs	r5, #0
 800aff6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aff8:	1c62      	adds	r2, r4, #1
 800affa:	9219      	str	r2, [sp, #100]	@ 0x64
 800affc:	7862      	ldrb	r2, [r4, #1]
 800affe:	2a2b      	cmp	r2, #43	@ 0x2b
 800b000:	d077      	beq.n	800b0f2 <_strtod_l+0x27a>
 800b002:	2a2d      	cmp	r2, #45	@ 0x2d
 800b004:	d07b      	beq.n	800b0fe <_strtod_l+0x286>
 800b006:	f04f 0c00 	mov.w	ip, #0
 800b00a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b00e:	2909      	cmp	r1, #9
 800b010:	f240 8082 	bls.w	800b118 <_strtod_l+0x2a0>
 800b014:	9419      	str	r4, [sp, #100]	@ 0x64
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	e0a2      	b.n	800b162 <_strtod_l+0x2ea>
 800b01c:	2300      	movs	r3, #0
 800b01e:	e7c7      	b.n	800afb0 <_strtod_l+0x138>
 800b020:	2f08      	cmp	r7, #8
 800b022:	bfd5      	itete	le
 800b024:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b026:	9908      	ldrgt	r1, [sp, #32]
 800b028:	fb02 3301 	mlale	r3, r2, r1, r3
 800b02c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b030:	f100 0001 	add.w	r0, r0, #1
 800b034:	bfd4      	ite	le
 800b036:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b038:	9308      	strgt	r3, [sp, #32]
 800b03a:	3701      	adds	r7, #1
 800b03c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b03e:	e7bf      	b.n	800afc0 <_strtod_l+0x148>
 800b040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	9219      	str	r2, [sp, #100]	@ 0x64
 800b046:	785a      	ldrb	r2, [r3, #1]
 800b048:	b37f      	cbz	r7, 800b0aa <_strtod_l+0x232>
 800b04a:	4681      	mov	r9, r0
 800b04c:	463d      	mov	r5, r7
 800b04e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b052:	2b09      	cmp	r3, #9
 800b054:	d912      	bls.n	800b07c <_strtod_l+0x204>
 800b056:	2301      	movs	r3, #1
 800b058:	e7c4      	b.n	800afe4 <_strtod_l+0x16c>
 800b05a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b060:	785a      	ldrb	r2, [r3, #1]
 800b062:	3001      	adds	r0, #1
 800b064:	2a30      	cmp	r2, #48	@ 0x30
 800b066:	d0f8      	beq.n	800b05a <_strtod_l+0x1e2>
 800b068:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	f200 84d3 	bhi.w	800ba18 <_strtod_l+0xba0>
 800b072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b074:	930c      	str	r3, [sp, #48]	@ 0x30
 800b076:	4681      	mov	r9, r0
 800b078:	2000      	movs	r0, #0
 800b07a:	4605      	mov	r5, r0
 800b07c:	3a30      	subs	r2, #48	@ 0x30
 800b07e:	f100 0301 	add.w	r3, r0, #1
 800b082:	d02a      	beq.n	800b0da <_strtod_l+0x262>
 800b084:	4499      	add	r9, r3
 800b086:	eb00 0c05 	add.w	ip, r0, r5
 800b08a:	462b      	mov	r3, r5
 800b08c:	210a      	movs	r1, #10
 800b08e:	4563      	cmp	r3, ip
 800b090:	d10d      	bne.n	800b0ae <_strtod_l+0x236>
 800b092:	1c69      	adds	r1, r5, #1
 800b094:	4401      	add	r1, r0
 800b096:	4428      	add	r0, r5
 800b098:	2808      	cmp	r0, #8
 800b09a:	dc16      	bgt.n	800b0ca <_strtod_l+0x252>
 800b09c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b09e:	230a      	movs	r3, #10
 800b0a0:	fb03 2300 	mla	r3, r3, r0, r2
 800b0a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e018      	b.n	800b0dc <_strtod_l+0x264>
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	e7da      	b.n	800b064 <_strtod_l+0x1ec>
 800b0ae:	2b08      	cmp	r3, #8
 800b0b0:	f103 0301 	add.w	r3, r3, #1
 800b0b4:	dc03      	bgt.n	800b0be <_strtod_l+0x246>
 800b0b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b0b8:	434e      	muls	r6, r1
 800b0ba:	960a      	str	r6, [sp, #40]	@ 0x28
 800b0bc:	e7e7      	b.n	800b08e <_strtod_l+0x216>
 800b0be:	2b10      	cmp	r3, #16
 800b0c0:	bfde      	ittt	le
 800b0c2:	9e08      	ldrle	r6, [sp, #32]
 800b0c4:	434e      	mulle	r6, r1
 800b0c6:	9608      	strle	r6, [sp, #32]
 800b0c8:	e7e1      	b.n	800b08e <_strtod_l+0x216>
 800b0ca:	280f      	cmp	r0, #15
 800b0cc:	dceb      	bgt.n	800b0a6 <_strtod_l+0x22e>
 800b0ce:	9808      	ldr	r0, [sp, #32]
 800b0d0:	230a      	movs	r3, #10
 800b0d2:	fb03 2300 	mla	r3, r3, r0, r2
 800b0d6:	9308      	str	r3, [sp, #32]
 800b0d8:	e7e5      	b.n	800b0a6 <_strtod_l+0x22e>
 800b0da:	4629      	mov	r1, r5
 800b0dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0de:	1c50      	adds	r0, r2, #1
 800b0e0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b0e2:	7852      	ldrb	r2, [r2, #1]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	e7b1      	b.n	800b04e <_strtod_l+0x1d6>
 800b0ea:	f04f 0900 	mov.w	r9, #0
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e77d      	b.n	800afee <_strtod_l+0x176>
 800b0f2:	f04f 0c00 	mov.w	ip, #0
 800b0f6:	1ca2      	adds	r2, r4, #2
 800b0f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0fa:	78a2      	ldrb	r2, [r4, #2]
 800b0fc:	e785      	b.n	800b00a <_strtod_l+0x192>
 800b0fe:	f04f 0c01 	mov.w	ip, #1
 800b102:	e7f8      	b.n	800b0f6 <_strtod_l+0x27e>
 800b104:	0800e688 	.word	0x0800e688
 800b108:	0800e670 	.word	0x0800e670
 800b10c:	7ff00000 	.word	0x7ff00000
 800b110:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b112:	1c51      	adds	r1, r2, #1
 800b114:	9119      	str	r1, [sp, #100]	@ 0x64
 800b116:	7852      	ldrb	r2, [r2, #1]
 800b118:	2a30      	cmp	r2, #48	@ 0x30
 800b11a:	d0f9      	beq.n	800b110 <_strtod_l+0x298>
 800b11c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b120:	2908      	cmp	r1, #8
 800b122:	f63f af78 	bhi.w	800b016 <_strtod_l+0x19e>
 800b126:	3a30      	subs	r2, #48	@ 0x30
 800b128:	920e      	str	r2, [sp, #56]	@ 0x38
 800b12a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b12c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b12e:	f04f 080a 	mov.w	r8, #10
 800b132:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b134:	1c56      	adds	r6, r2, #1
 800b136:	9619      	str	r6, [sp, #100]	@ 0x64
 800b138:	7852      	ldrb	r2, [r2, #1]
 800b13a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b13e:	f1be 0f09 	cmp.w	lr, #9
 800b142:	d939      	bls.n	800b1b8 <_strtod_l+0x340>
 800b144:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b146:	1a76      	subs	r6, r6, r1
 800b148:	2e08      	cmp	r6, #8
 800b14a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b14e:	dc03      	bgt.n	800b158 <_strtod_l+0x2e0>
 800b150:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b152:	4588      	cmp	r8, r1
 800b154:	bfa8      	it	ge
 800b156:	4688      	movge	r8, r1
 800b158:	f1bc 0f00 	cmp.w	ip, #0
 800b15c:	d001      	beq.n	800b162 <_strtod_l+0x2ea>
 800b15e:	f1c8 0800 	rsb	r8, r8, #0
 800b162:	2d00      	cmp	r5, #0
 800b164:	d14e      	bne.n	800b204 <_strtod_l+0x38c>
 800b166:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b168:	4308      	orrs	r0, r1
 800b16a:	f47f aebe 	bne.w	800aeea <_strtod_l+0x72>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f47f aed6 	bne.w	800af20 <_strtod_l+0xa8>
 800b174:	2a69      	cmp	r2, #105	@ 0x69
 800b176:	d028      	beq.n	800b1ca <_strtod_l+0x352>
 800b178:	dc25      	bgt.n	800b1c6 <_strtod_l+0x34e>
 800b17a:	2a49      	cmp	r2, #73	@ 0x49
 800b17c:	d025      	beq.n	800b1ca <_strtod_l+0x352>
 800b17e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b180:	f47f aece 	bne.w	800af20 <_strtod_l+0xa8>
 800b184:	499b      	ldr	r1, [pc, #620]	@ (800b3f4 <_strtod_l+0x57c>)
 800b186:	a819      	add	r0, sp, #100	@ 0x64
 800b188:	f001 fbb6 	bl	800c8f8 <__match>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	f43f aec7 	beq.w	800af20 <_strtod_l+0xa8>
 800b192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b28      	cmp	r3, #40	@ 0x28
 800b198:	d12e      	bne.n	800b1f8 <_strtod_l+0x380>
 800b19a:	4997      	ldr	r1, [pc, #604]	@ (800b3f8 <_strtod_l+0x580>)
 800b19c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b19e:	a819      	add	r0, sp, #100	@ 0x64
 800b1a0:	f001 fbbe 	bl	800c920 <__hexnan>
 800b1a4:	2805      	cmp	r0, #5
 800b1a6:	d127      	bne.n	800b1f8 <_strtod_l+0x380>
 800b1a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b1aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b1ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b1b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b1b6:	e698      	b.n	800aeea <_strtod_l+0x72>
 800b1b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b1ba:	fb08 2101 	mla	r1, r8, r1, r2
 800b1be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b1c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1c4:	e7b5      	b.n	800b132 <_strtod_l+0x2ba>
 800b1c6:	2a6e      	cmp	r2, #110	@ 0x6e
 800b1c8:	e7da      	b.n	800b180 <_strtod_l+0x308>
 800b1ca:	498c      	ldr	r1, [pc, #560]	@ (800b3fc <_strtod_l+0x584>)
 800b1cc:	a819      	add	r0, sp, #100	@ 0x64
 800b1ce:	f001 fb93 	bl	800c8f8 <__match>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	f43f aea4 	beq.w	800af20 <_strtod_l+0xa8>
 800b1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1da:	4989      	ldr	r1, [pc, #548]	@ (800b400 <_strtod_l+0x588>)
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	a819      	add	r0, sp, #100	@ 0x64
 800b1e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b1e2:	f001 fb89 	bl	800c8f8 <__match>
 800b1e6:	b910      	cbnz	r0, 800b1ee <_strtod_l+0x376>
 800b1e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800b1ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b410 <_strtod_l+0x598>
 800b1f2:	f04f 0a00 	mov.w	sl, #0
 800b1f6:	e678      	b.n	800aeea <_strtod_l+0x72>
 800b1f8:	4882      	ldr	r0, [pc, #520]	@ (800b404 <_strtod_l+0x58c>)
 800b1fa:	f001 f8b9 	bl	800c370 <nan>
 800b1fe:	ec5b ab10 	vmov	sl, fp, d0
 800b202:	e672      	b.n	800aeea <_strtod_l+0x72>
 800b204:	eba8 0309 	sub.w	r3, r8, r9
 800b208:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b20a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b20c:	2f00      	cmp	r7, #0
 800b20e:	bf08      	it	eq
 800b210:	462f      	moveq	r7, r5
 800b212:	2d10      	cmp	r5, #16
 800b214:	462c      	mov	r4, r5
 800b216:	bfa8      	it	ge
 800b218:	2410      	movge	r4, #16
 800b21a:	f7f5 f993 	bl	8000544 <__aeabi_ui2d>
 800b21e:	2d09      	cmp	r5, #9
 800b220:	4682      	mov	sl, r0
 800b222:	468b      	mov	fp, r1
 800b224:	dc13      	bgt.n	800b24e <_strtod_l+0x3d6>
 800b226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f43f ae5e 	beq.w	800aeea <_strtod_l+0x72>
 800b22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b230:	dd78      	ble.n	800b324 <_strtod_l+0x4ac>
 800b232:	2b16      	cmp	r3, #22
 800b234:	dc5f      	bgt.n	800b2f6 <_strtod_l+0x47e>
 800b236:	4974      	ldr	r1, [pc, #464]	@ (800b408 <_strtod_l+0x590>)
 800b238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b23c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b240:	4652      	mov	r2, sl
 800b242:	465b      	mov	r3, fp
 800b244:	f7f5 f9f8 	bl	8000638 <__aeabi_dmul>
 800b248:	4682      	mov	sl, r0
 800b24a:	468b      	mov	fp, r1
 800b24c:	e64d      	b.n	800aeea <_strtod_l+0x72>
 800b24e:	4b6e      	ldr	r3, [pc, #440]	@ (800b408 <_strtod_l+0x590>)
 800b250:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b254:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b258:	f7f5 f9ee 	bl	8000638 <__aeabi_dmul>
 800b25c:	4682      	mov	sl, r0
 800b25e:	9808      	ldr	r0, [sp, #32]
 800b260:	468b      	mov	fp, r1
 800b262:	f7f5 f96f 	bl	8000544 <__aeabi_ui2d>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4650      	mov	r0, sl
 800b26c:	4659      	mov	r1, fp
 800b26e:	f7f5 f82d 	bl	80002cc <__adddf3>
 800b272:	2d0f      	cmp	r5, #15
 800b274:	4682      	mov	sl, r0
 800b276:	468b      	mov	fp, r1
 800b278:	ddd5      	ble.n	800b226 <_strtod_l+0x3ae>
 800b27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b27c:	1b2c      	subs	r4, r5, r4
 800b27e:	441c      	add	r4, r3
 800b280:	2c00      	cmp	r4, #0
 800b282:	f340 8096 	ble.w	800b3b2 <_strtod_l+0x53a>
 800b286:	f014 030f 	ands.w	r3, r4, #15
 800b28a:	d00a      	beq.n	800b2a2 <_strtod_l+0x42a>
 800b28c:	495e      	ldr	r1, [pc, #376]	@ (800b408 <_strtod_l+0x590>)
 800b28e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b292:	4652      	mov	r2, sl
 800b294:	465b      	mov	r3, fp
 800b296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b29a:	f7f5 f9cd 	bl	8000638 <__aeabi_dmul>
 800b29e:	4682      	mov	sl, r0
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	f034 040f 	bics.w	r4, r4, #15
 800b2a6:	d073      	beq.n	800b390 <_strtod_l+0x518>
 800b2a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b2ac:	dd48      	ble.n	800b340 <_strtod_l+0x4c8>
 800b2ae:	2400      	movs	r4, #0
 800b2b0:	46a0      	mov	r8, r4
 800b2b2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2b4:	46a1      	mov	r9, r4
 800b2b6:	9a05      	ldr	r2, [sp, #20]
 800b2b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b410 <_strtod_l+0x598>
 800b2bc:	2322      	movs	r3, #34	@ 0x22
 800b2be:	6013      	str	r3, [r2, #0]
 800b2c0:	f04f 0a00 	mov.w	sl, #0
 800b2c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f43f ae0f 	beq.w	800aeea <_strtod_l+0x72>
 800b2cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2ce:	9805      	ldr	r0, [sp, #20]
 800b2d0:	f7ff f942 	bl	800a558 <_Bfree>
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	f7ff f93e 	bl	800a558 <_Bfree>
 800b2dc:	9805      	ldr	r0, [sp, #20]
 800b2de:	4641      	mov	r1, r8
 800b2e0:	f7ff f93a 	bl	800a558 <_Bfree>
 800b2e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2e6:	9805      	ldr	r0, [sp, #20]
 800b2e8:	f7ff f936 	bl	800a558 <_Bfree>
 800b2ec:	9805      	ldr	r0, [sp, #20]
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	f7ff f932 	bl	800a558 <_Bfree>
 800b2f4:	e5f9      	b.n	800aeea <_strtod_l+0x72>
 800b2f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	dbbc      	blt.n	800b27a <_strtod_l+0x402>
 800b300:	4c41      	ldr	r4, [pc, #260]	@ (800b408 <_strtod_l+0x590>)
 800b302:	f1c5 050f 	rsb	r5, r5, #15
 800b306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b30a:	4652      	mov	r2, sl
 800b30c:	465b      	mov	r3, fp
 800b30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b312:	f7f5 f991 	bl	8000638 <__aeabi_dmul>
 800b316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b318:	1b5d      	subs	r5, r3, r5
 800b31a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b31e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b322:	e78f      	b.n	800b244 <_strtod_l+0x3cc>
 800b324:	3316      	adds	r3, #22
 800b326:	dba8      	blt.n	800b27a <_strtod_l+0x402>
 800b328:	4b37      	ldr	r3, [pc, #220]	@ (800b408 <_strtod_l+0x590>)
 800b32a:	eba9 0808 	sub.w	r8, r9, r8
 800b32e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b332:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b336:	4650      	mov	r0, sl
 800b338:	4659      	mov	r1, fp
 800b33a:	f7f5 faa7 	bl	800088c <__aeabi_ddiv>
 800b33e:	e783      	b.n	800b248 <_strtod_l+0x3d0>
 800b340:	4b32      	ldr	r3, [pc, #200]	@ (800b40c <_strtod_l+0x594>)
 800b342:	9308      	str	r3, [sp, #32]
 800b344:	2300      	movs	r3, #0
 800b346:	1124      	asrs	r4, r4, #4
 800b348:	4650      	mov	r0, sl
 800b34a:	4659      	mov	r1, fp
 800b34c:	461e      	mov	r6, r3
 800b34e:	2c01      	cmp	r4, #1
 800b350:	dc21      	bgt.n	800b396 <_strtod_l+0x51e>
 800b352:	b10b      	cbz	r3, 800b358 <_strtod_l+0x4e0>
 800b354:	4682      	mov	sl, r0
 800b356:	468b      	mov	fp, r1
 800b358:	492c      	ldr	r1, [pc, #176]	@ (800b40c <_strtod_l+0x594>)
 800b35a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b35e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b362:	4652      	mov	r2, sl
 800b364:	465b      	mov	r3, fp
 800b366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b36a:	f7f5 f965 	bl	8000638 <__aeabi_dmul>
 800b36e:	4b28      	ldr	r3, [pc, #160]	@ (800b410 <_strtod_l+0x598>)
 800b370:	460a      	mov	r2, r1
 800b372:	400b      	ands	r3, r1
 800b374:	4927      	ldr	r1, [pc, #156]	@ (800b414 <_strtod_l+0x59c>)
 800b376:	428b      	cmp	r3, r1
 800b378:	4682      	mov	sl, r0
 800b37a:	d898      	bhi.n	800b2ae <_strtod_l+0x436>
 800b37c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b380:	428b      	cmp	r3, r1
 800b382:	bf86      	itte	hi
 800b384:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b418 <_strtod_l+0x5a0>
 800b388:	f04f 3aff 	movhi.w	sl, #4294967295
 800b38c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b390:	2300      	movs	r3, #0
 800b392:	9308      	str	r3, [sp, #32]
 800b394:	e07a      	b.n	800b48c <_strtod_l+0x614>
 800b396:	07e2      	lsls	r2, r4, #31
 800b398:	d505      	bpl.n	800b3a6 <_strtod_l+0x52e>
 800b39a:	9b08      	ldr	r3, [sp, #32]
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f7f5 f94a 	bl	8000638 <__aeabi_dmul>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	9a08      	ldr	r2, [sp, #32]
 800b3a8:	3208      	adds	r2, #8
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	1064      	asrs	r4, r4, #1
 800b3ae:	9208      	str	r2, [sp, #32]
 800b3b0:	e7cd      	b.n	800b34e <_strtod_l+0x4d6>
 800b3b2:	d0ed      	beq.n	800b390 <_strtod_l+0x518>
 800b3b4:	4264      	negs	r4, r4
 800b3b6:	f014 020f 	ands.w	r2, r4, #15
 800b3ba:	d00a      	beq.n	800b3d2 <_strtod_l+0x55a>
 800b3bc:	4b12      	ldr	r3, [pc, #72]	@ (800b408 <_strtod_l+0x590>)
 800b3be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3c2:	4650      	mov	r0, sl
 800b3c4:	4659      	mov	r1, fp
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7f5 fa5f 	bl	800088c <__aeabi_ddiv>
 800b3ce:	4682      	mov	sl, r0
 800b3d0:	468b      	mov	fp, r1
 800b3d2:	1124      	asrs	r4, r4, #4
 800b3d4:	d0dc      	beq.n	800b390 <_strtod_l+0x518>
 800b3d6:	2c1f      	cmp	r4, #31
 800b3d8:	dd20      	ble.n	800b41c <_strtod_l+0x5a4>
 800b3da:	2400      	movs	r4, #0
 800b3dc:	46a0      	mov	r8, r4
 800b3de:	940a      	str	r4, [sp, #40]	@ 0x28
 800b3e0:	46a1      	mov	r9, r4
 800b3e2:	9a05      	ldr	r2, [sp, #20]
 800b3e4:	2322      	movs	r3, #34	@ 0x22
 800b3e6:	f04f 0a00 	mov.w	sl, #0
 800b3ea:	f04f 0b00 	mov.w	fp, #0
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	e768      	b.n	800b2c4 <_strtod_l+0x44c>
 800b3f2:	bf00      	nop
 800b3f4:	0800e45d 	.word	0x0800e45d
 800b3f8:	0800e674 	.word	0x0800e674
 800b3fc:	0800e455 	.word	0x0800e455
 800b400:	0800e48c 	.word	0x0800e48c
 800b404:	0800e81d 	.word	0x0800e81d
 800b408:	0800e5a8 	.word	0x0800e5a8
 800b40c:	0800e580 	.word	0x0800e580
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	7ca00000 	.word	0x7ca00000
 800b418:	7fefffff 	.word	0x7fefffff
 800b41c:	f014 0310 	ands.w	r3, r4, #16
 800b420:	bf18      	it	ne
 800b422:	236a      	movne	r3, #106	@ 0x6a
 800b424:	4ea9      	ldr	r6, [pc, #676]	@ (800b6cc <_strtod_l+0x854>)
 800b426:	9308      	str	r3, [sp, #32]
 800b428:	4650      	mov	r0, sl
 800b42a:	4659      	mov	r1, fp
 800b42c:	2300      	movs	r3, #0
 800b42e:	07e2      	lsls	r2, r4, #31
 800b430:	d504      	bpl.n	800b43c <_strtod_l+0x5c4>
 800b432:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b436:	f7f5 f8ff 	bl	8000638 <__aeabi_dmul>
 800b43a:	2301      	movs	r3, #1
 800b43c:	1064      	asrs	r4, r4, #1
 800b43e:	f106 0608 	add.w	r6, r6, #8
 800b442:	d1f4      	bne.n	800b42e <_strtod_l+0x5b6>
 800b444:	b10b      	cbz	r3, 800b44a <_strtod_l+0x5d2>
 800b446:	4682      	mov	sl, r0
 800b448:	468b      	mov	fp, r1
 800b44a:	9b08      	ldr	r3, [sp, #32]
 800b44c:	b1b3      	cbz	r3, 800b47c <_strtod_l+0x604>
 800b44e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b452:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b456:	2b00      	cmp	r3, #0
 800b458:	4659      	mov	r1, fp
 800b45a:	dd0f      	ble.n	800b47c <_strtod_l+0x604>
 800b45c:	2b1f      	cmp	r3, #31
 800b45e:	dd55      	ble.n	800b50c <_strtod_l+0x694>
 800b460:	2b34      	cmp	r3, #52	@ 0x34
 800b462:	bfde      	ittt	le
 800b464:	f04f 33ff 	movle.w	r3, #4294967295
 800b468:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b46c:	4093      	lslle	r3, r2
 800b46e:	f04f 0a00 	mov.w	sl, #0
 800b472:	bfcc      	ite	gt
 800b474:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b478:	ea03 0b01 	andle.w	fp, r3, r1
 800b47c:	2200      	movs	r2, #0
 800b47e:	2300      	movs	r3, #0
 800b480:	4650      	mov	r0, sl
 800b482:	4659      	mov	r1, fp
 800b484:	f7f5 fb40 	bl	8000b08 <__aeabi_dcmpeq>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d1a6      	bne.n	800b3da <_strtod_l+0x562>
 800b48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b492:	9805      	ldr	r0, [sp, #20]
 800b494:	462b      	mov	r3, r5
 800b496:	463a      	mov	r2, r7
 800b498:	f7ff f8c6 	bl	800a628 <__s2b>
 800b49c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f43f af05 	beq.w	800b2ae <_strtod_l+0x436>
 800b4a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	eba9 0308 	sub.w	r3, r9, r8
 800b4ac:	bfa8      	it	ge
 800b4ae:	2300      	movge	r3, #0
 800b4b0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b4b2:	2400      	movs	r4, #0
 800b4b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b4b8:	9316      	str	r3, [sp, #88]	@ 0x58
 800b4ba:	46a0      	mov	r8, r4
 800b4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4be:	9805      	ldr	r0, [sp, #20]
 800b4c0:	6859      	ldr	r1, [r3, #4]
 800b4c2:	f7ff f809 	bl	800a4d8 <_Balloc>
 800b4c6:	4681      	mov	r9, r0
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f43f aef4 	beq.w	800b2b6 <_strtod_l+0x43e>
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4d0:	691a      	ldr	r2, [r3, #16]
 800b4d2:	3202      	adds	r2, #2
 800b4d4:	f103 010c 	add.w	r1, r3, #12
 800b4d8:	0092      	lsls	r2, r2, #2
 800b4da:	300c      	adds	r0, #12
 800b4dc:	f000 ff38 	bl	800c350 <memcpy>
 800b4e0:	ec4b ab10 	vmov	d0, sl, fp
 800b4e4:	9805      	ldr	r0, [sp, #20]
 800b4e6:	aa1c      	add	r2, sp, #112	@ 0x70
 800b4e8:	a91b      	add	r1, sp, #108	@ 0x6c
 800b4ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b4ee:	f7ff fbd7 	bl	800aca0 <__d2b>
 800b4f2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f43f aede 	beq.w	800b2b6 <_strtod_l+0x43e>
 800b4fa:	9805      	ldr	r0, [sp, #20]
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	f7ff f929 	bl	800a754 <__i2b>
 800b502:	4680      	mov	r8, r0
 800b504:	b948      	cbnz	r0, 800b51a <_strtod_l+0x6a2>
 800b506:	f04f 0800 	mov.w	r8, #0
 800b50a:	e6d4      	b.n	800b2b6 <_strtod_l+0x43e>
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
 800b510:	fa02 f303 	lsl.w	r3, r2, r3
 800b514:	ea03 0a0a 	and.w	sl, r3, sl
 800b518:	e7b0      	b.n	800b47c <_strtod_l+0x604>
 800b51a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b51c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b51e:	2d00      	cmp	r5, #0
 800b520:	bfab      	itete	ge
 800b522:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b524:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b526:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b528:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b52a:	bfac      	ite	ge
 800b52c:	18ef      	addge	r7, r5, r3
 800b52e:	1b5e      	sublt	r6, r3, r5
 800b530:	9b08      	ldr	r3, [sp, #32]
 800b532:	1aed      	subs	r5, r5, r3
 800b534:	4415      	add	r5, r2
 800b536:	4b66      	ldr	r3, [pc, #408]	@ (800b6d0 <_strtod_l+0x858>)
 800b538:	3d01      	subs	r5, #1
 800b53a:	429d      	cmp	r5, r3
 800b53c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b540:	da50      	bge.n	800b5e4 <_strtod_l+0x76c>
 800b542:	1b5b      	subs	r3, r3, r5
 800b544:	2b1f      	cmp	r3, #31
 800b546:	eba2 0203 	sub.w	r2, r2, r3
 800b54a:	f04f 0101 	mov.w	r1, #1
 800b54e:	dc3d      	bgt.n	800b5cc <_strtod_l+0x754>
 800b550:	fa01 f303 	lsl.w	r3, r1, r3
 800b554:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b556:	2300      	movs	r3, #0
 800b558:	9310      	str	r3, [sp, #64]	@ 0x40
 800b55a:	18bd      	adds	r5, r7, r2
 800b55c:	9b08      	ldr	r3, [sp, #32]
 800b55e:	42af      	cmp	r7, r5
 800b560:	4416      	add	r6, r2
 800b562:	441e      	add	r6, r3
 800b564:	463b      	mov	r3, r7
 800b566:	bfa8      	it	ge
 800b568:	462b      	movge	r3, r5
 800b56a:	42b3      	cmp	r3, r6
 800b56c:	bfa8      	it	ge
 800b56e:	4633      	movge	r3, r6
 800b570:	2b00      	cmp	r3, #0
 800b572:	bfc2      	ittt	gt
 800b574:	1aed      	subgt	r5, r5, r3
 800b576:	1af6      	subgt	r6, r6, r3
 800b578:	1aff      	subgt	r7, r7, r3
 800b57a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dd16      	ble.n	800b5ae <_strtod_l+0x736>
 800b580:	4641      	mov	r1, r8
 800b582:	9805      	ldr	r0, [sp, #20]
 800b584:	461a      	mov	r2, r3
 800b586:	f7ff f9a5 	bl	800a8d4 <__pow5mult>
 800b58a:	4680      	mov	r8, r0
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d0ba      	beq.n	800b506 <_strtod_l+0x68e>
 800b590:	4601      	mov	r1, r0
 800b592:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b594:	9805      	ldr	r0, [sp, #20]
 800b596:	f7ff f8f3 	bl	800a780 <__multiply>
 800b59a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b59c:	2800      	cmp	r0, #0
 800b59e:	f43f ae8a 	beq.w	800b2b6 <_strtod_l+0x43e>
 800b5a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5a4:	9805      	ldr	r0, [sp, #20]
 800b5a6:	f7fe ffd7 	bl	800a558 <_Bfree>
 800b5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5ae:	2d00      	cmp	r5, #0
 800b5b0:	dc1d      	bgt.n	800b5ee <_strtod_l+0x776>
 800b5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dd23      	ble.n	800b600 <_strtod_l+0x788>
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b5bc:	9805      	ldr	r0, [sp, #20]
 800b5be:	f7ff f989 	bl	800a8d4 <__pow5mult>
 800b5c2:	4681      	mov	r9, r0
 800b5c4:	b9e0      	cbnz	r0, 800b600 <_strtod_l+0x788>
 800b5c6:	f04f 0900 	mov.w	r9, #0
 800b5ca:	e674      	b.n	800b2b6 <_strtod_l+0x43e>
 800b5cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b5d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b5d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b5d8:	35e2      	adds	r5, #226	@ 0xe2
 800b5da:	fa01 f305 	lsl.w	r3, r1, r5
 800b5de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b5e2:	e7ba      	b.n	800b55a <_strtod_l+0x6e2>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5ec:	e7b5      	b.n	800b55a <_strtod_l+0x6e2>
 800b5ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5f0:	9805      	ldr	r0, [sp, #20]
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	f7ff f9c8 	bl	800a988 <__lshift>
 800b5f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d1d9      	bne.n	800b5b2 <_strtod_l+0x73a>
 800b5fe:	e65a      	b.n	800b2b6 <_strtod_l+0x43e>
 800b600:	2e00      	cmp	r6, #0
 800b602:	dd07      	ble.n	800b614 <_strtod_l+0x79c>
 800b604:	4649      	mov	r1, r9
 800b606:	9805      	ldr	r0, [sp, #20]
 800b608:	4632      	mov	r2, r6
 800b60a:	f7ff f9bd 	bl	800a988 <__lshift>
 800b60e:	4681      	mov	r9, r0
 800b610:	2800      	cmp	r0, #0
 800b612:	d0d8      	beq.n	800b5c6 <_strtod_l+0x74e>
 800b614:	2f00      	cmp	r7, #0
 800b616:	dd08      	ble.n	800b62a <_strtod_l+0x7b2>
 800b618:	4641      	mov	r1, r8
 800b61a:	9805      	ldr	r0, [sp, #20]
 800b61c:	463a      	mov	r2, r7
 800b61e:	f7ff f9b3 	bl	800a988 <__lshift>
 800b622:	4680      	mov	r8, r0
 800b624:	2800      	cmp	r0, #0
 800b626:	f43f ae46 	beq.w	800b2b6 <_strtod_l+0x43e>
 800b62a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b62c:	9805      	ldr	r0, [sp, #20]
 800b62e:	464a      	mov	r2, r9
 800b630:	f7ff fa32 	bl	800aa98 <__mdiff>
 800b634:	4604      	mov	r4, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	f43f ae3d 	beq.w	800b2b6 <_strtod_l+0x43e>
 800b63c:	68c3      	ldr	r3, [r0, #12]
 800b63e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b640:	2300      	movs	r3, #0
 800b642:	60c3      	str	r3, [r0, #12]
 800b644:	4641      	mov	r1, r8
 800b646:	f7ff fa0b 	bl	800aa60 <__mcmp>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	da46      	bge.n	800b6dc <_strtod_l+0x864>
 800b64e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b650:	ea53 030a 	orrs.w	r3, r3, sl
 800b654:	d16c      	bne.n	800b730 <_strtod_l+0x8b8>
 800b656:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d168      	bne.n	800b730 <_strtod_l+0x8b8>
 800b65e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b662:	0d1b      	lsrs	r3, r3, #20
 800b664:	051b      	lsls	r3, r3, #20
 800b666:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b66a:	d961      	bls.n	800b730 <_strtod_l+0x8b8>
 800b66c:	6963      	ldr	r3, [r4, #20]
 800b66e:	b913      	cbnz	r3, 800b676 <_strtod_l+0x7fe>
 800b670:	6923      	ldr	r3, [r4, #16]
 800b672:	2b01      	cmp	r3, #1
 800b674:	dd5c      	ble.n	800b730 <_strtod_l+0x8b8>
 800b676:	4621      	mov	r1, r4
 800b678:	2201      	movs	r2, #1
 800b67a:	9805      	ldr	r0, [sp, #20]
 800b67c:	f7ff f984 	bl	800a988 <__lshift>
 800b680:	4641      	mov	r1, r8
 800b682:	4604      	mov	r4, r0
 800b684:	f7ff f9ec 	bl	800aa60 <__mcmp>
 800b688:	2800      	cmp	r0, #0
 800b68a:	dd51      	ble.n	800b730 <_strtod_l+0x8b8>
 800b68c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b690:	9a08      	ldr	r2, [sp, #32]
 800b692:	0d1b      	lsrs	r3, r3, #20
 800b694:	051b      	lsls	r3, r3, #20
 800b696:	2a00      	cmp	r2, #0
 800b698:	d06b      	beq.n	800b772 <_strtod_l+0x8fa>
 800b69a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b69e:	d868      	bhi.n	800b772 <_strtod_l+0x8fa>
 800b6a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b6a4:	f67f ae9d 	bls.w	800b3e2 <_strtod_l+0x56a>
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d4 <_strtod_l+0x85c>)
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f7f4 ffc2 	bl	8000638 <__aeabi_dmul>
 800b6b4:	4b08      	ldr	r3, [pc, #32]	@ (800b6d8 <_strtod_l+0x860>)
 800b6b6:	400b      	ands	r3, r1
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	468b      	mov	fp, r1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f47f ae05 	bne.w	800b2cc <_strtod_l+0x454>
 800b6c2:	9a05      	ldr	r2, [sp, #20]
 800b6c4:	2322      	movs	r3, #34	@ 0x22
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	e600      	b.n	800b2cc <_strtod_l+0x454>
 800b6ca:	bf00      	nop
 800b6cc:	0800e6a0 	.word	0x0800e6a0
 800b6d0:	fffffc02 	.word	0xfffffc02
 800b6d4:	39500000 	.word	0x39500000
 800b6d8:	7ff00000 	.word	0x7ff00000
 800b6dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b6e0:	d165      	bne.n	800b7ae <_strtod_l+0x936>
 800b6e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b6e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6e8:	b35a      	cbz	r2, 800b742 <_strtod_l+0x8ca>
 800b6ea:	4a9f      	ldr	r2, [pc, #636]	@ (800b968 <_strtod_l+0xaf0>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d12b      	bne.n	800b748 <_strtod_l+0x8d0>
 800b6f0:	9b08      	ldr	r3, [sp, #32]
 800b6f2:	4651      	mov	r1, sl
 800b6f4:	b303      	cbz	r3, 800b738 <_strtod_l+0x8c0>
 800b6f6:	4b9d      	ldr	r3, [pc, #628]	@ (800b96c <_strtod_l+0xaf4>)
 800b6f8:	465a      	mov	r2, fp
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b700:	f04f 32ff 	mov.w	r2, #4294967295
 800b704:	d81b      	bhi.n	800b73e <_strtod_l+0x8c6>
 800b706:	0d1b      	lsrs	r3, r3, #20
 800b708:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b70c:	fa02 f303 	lsl.w	r3, r2, r3
 800b710:	4299      	cmp	r1, r3
 800b712:	d119      	bne.n	800b748 <_strtod_l+0x8d0>
 800b714:	4b96      	ldr	r3, [pc, #600]	@ (800b970 <_strtod_l+0xaf8>)
 800b716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b718:	429a      	cmp	r2, r3
 800b71a:	d102      	bne.n	800b722 <_strtod_l+0x8aa>
 800b71c:	3101      	adds	r1, #1
 800b71e:	f43f adca 	beq.w	800b2b6 <_strtod_l+0x43e>
 800b722:	4b92      	ldr	r3, [pc, #584]	@ (800b96c <_strtod_l+0xaf4>)
 800b724:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b726:	401a      	ands	r2, r3
 800b728:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b72c:	f04f 0a00 	mov.w	sl, #0
 800b730:	9b08      	ldr	r3, [sp, #32]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1b8      	bne.n	800b6a8 <_strtod_l+0x830>
 800b736:	e5c9      	b.n	800b2cc <_strtod_l+0x454>
 800b738:	f04f 33ff 	mov.w	r3, #4294967295
 800b73c:	e7e8      	b.n	800b710 <_strtod_l+0x898>
 800b73e:	4613      	mov	r3, r2
 800b740:	e7e6      	b.n	800b710 <_strtod_l+0x898>
 800b742:	ea53 030a 	orrs.w	r3, r3, sl
 800b746:	d0a1      	beq.n	800b68c <_strtod_l+0x814>
 800b748:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b74a:	b1db      	cbz	r3, 800b784 <_strtod_l+0x90c>
 800b74c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b74e:	4213      	tst	r3, r2
 800b750:	d0ee      	beq.n	800b730 <_strtod_l+0x8b8>
 800b752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b754:	9a08      	ldr	r2, [sp, #32]
 800b756:	4650      	mov	r0, sl
 800b758:	4659      	mov	r1, fp
 800b75a:	b1bb      	cbz	r3, 800b78c <_strtod_l+0x914>
 800b75c:	f7ff fb6e 	bl	800ae3c <sulp>
 800b760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b764:	ec53 2b10 	vmov	r2, r3, d0
 800b768:	f7f4 fdb0 	bl	80002cc <__adddf3>
 800b76c:	4682      	mov	sl, r0
 800b76e:	468b      	mov	fp, r1
 800b770:	e7de      	b.n	800b730 <_strtod_l+0x8b8>
 800b772:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b776:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b77a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b77e:	f04f 3aff 	mov.w	sl, #4294967295
 800b782:	e7d5      	b.n	800b730 <_strtod_l+0x8b8>
 800b784:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b786:	ea13 0f0a 	tst.w	r3, sl
 800b78a:	e7e1      	b.n	800b750 <_strtod_l+0x8d8>
 800b78c:	f7ff fb56 	bl	800ae3c <sulp>
 800b790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b794:	ec53 2b10 	vmov	r2, r3, d0
 800b798:	f7f4 fd96 	bl	80002c8 <__aeabi_dsub>
 800b79c:	2200      	movs	r2, #0
 800b79e:	2300      	movs	r3, #0
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	468b      	mov	fp, r1
 800b7a4:	f7f5 f9b0 	bl	8000b08 <__aeabi_dcmpeq>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d0c1      	beq.n	800b730 <_strtod_l+0x8b8>
 800b7ac:	e619      	b.n	800b3e2 <_strtod_l+0x56a>
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f7ff facd 	bl	800ad50 <__ratio>
 800b7b6:	ec57 6b10 	vmov	r6, r7, d0
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f5 f9b4 	bl	8000b30 <__aeabi_dcmple>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d06f      	beq.n	800b8ac <_strtod_l+0xa34>
 800b7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d17a      	bne.n	800b8c8 <_strtod_l+0xa50>
 800b7d2:	f1ba 0f00 	cmp.w	sl, #0
 800b7d6:	d158      	bne.n	800b88a <_strtod_l+0xa12>
 800b7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d15a      	bne.n	800b898 <_strtod_l+0xa20>
 800b7e2:	4b64      	ldr	r3, [pc, #400]	@ (800b974 <_strtod_l+0xafc>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	f7f5 f997 	bl	8000b1c <__aeabi_dcmplt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d159      	bne.n	800b8a6 <_strtod_l+0xa2e>
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	4b60      	ldr	r3, [pc, #384]	@ (800b978 <_strtod_l+0xb00>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f7f4 ff1d 	bl	8000638 <__aeabi_dmul>
 800b7fe:	4606      	mov	r6, r0
 800b800:	460f      	mov	r7, r1
 800b802:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b806:	9606      	str	r6, [sp, #24]
 800b808:	9307      	str	r3, [sp, #28]
 800b80a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b80e:	4d57      	ldr	r5, [pc, #348]	@ (800b96c <_strtod_l+0xaf4>)
 800b810:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b816:	401d      	ands	r5, r3
 800b818:	4b58      	ldr	r3, [pc, #352]	@ (800b97c <_strtod_l+0xb04>)
 800b81a:	429d      	cmp	r5, r3
 800b81c:	f040 80b2 	bne.w	800b984 <_strtod_l+0xb0c>
 800b820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b822:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b826:	ec4b ab10 	vmov	d0, sl, fp
 800b82a:	f7ff f9c9 	bl	800abc0 <__ulp>
 800b82e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b832:	ec51 0b10 	vmov	r0, r1, d0
 800b836:	f7f4 feff 	bl	8000638 <__aeabi_dmul>
 800b83a:	4652      	mov	r2, sl
 800b83c:	465b      	mov	r3, fp
 800b83e:	f7f4 fd45 	bl	80002cc <__adddf3>
 800b842:	460b      	mov	r3, r1
 800b844:	4949      	ldr	r1, [pc, #292]	@ (800b96c <_strtod_l+0xaf4>)
 800b846:	4a4e      	ldr	r2, [pc, #312]	@ (800b980 <_strtod_l+0xb08>)
 800b848:	4019      	ands	r1, r3
 800b84a:	4291      	cmp	r1, r2
 800b84c:	4682      	mov	sl, r0
 800b84e:	d942      	bls.n	800b8d6 <_strtod_l+0xa5e>
 800b850:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b852:	4b47      	ldr	r3, [pc, #284]	@ (800b970 <_strtod_l+0xaf8>)
 800b854:	429a      	cmp	r2, r3
 800b856:	d103      	bne.n	800b860 <_strtod_l+0x9e8>
 800b858:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b85a:	3301      	adds	r3, #1
 800b85c:	f43f ad2b 	beq.w	800b2b6 <_strtod_l+0x43e>
 800b860:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b970 <_strtod_l+0xaf8>
 800b864:	f04f 3aff 	mov.w	sl, #4294967295
 800b868:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b86a:	9805      	ldr	r0, [sp, #20]
 800b86c:	f7fe fe74 	bl	800a558 <_Bfree>
 800b870:	9805      	ldr	r0, [sp, #20]
 800b872:	4649      	mov	r1, r9
 800b874:	f7fe fe70 	bl	800a558 <_Bfree>
 800b878:	9805      	ldr	r0, [sp, #20]
 800b87a:	4641      	mov	r1, r8
 800b87c:	f7fe fe6c 	bl	800a558 <_Bfree>
 800b880:	9805      	ldr	r0, [sp, #20]
 800b882:	4621      	mov	r1, r4
 800b884:	f7fe fe68 	bl	800a558 <_Bfree>
 800b888:	e618      	b.n	800b4bc <_strtod_l+0x644>
 800b88a:	f1ba 0f01 	cmp.w	sl, #1
 800b88e:	d103      	bne.n	800b898 <_strtod_l+0xa20>
 800b890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b892:	2b00      	cmp	r3, #0
 800b894:	f43f ada5 	beq.w	800b3e2 <_strtod_l+0x56a>
 800b898:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b948 <_strtod_l+0xad0>
 800b89c:	4f35      	ldr	r7, [pc, #212]	@ (800b974 <_strtod_l+0xafc>)
 800b89e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8a2:	2600      	movs	r6, #0
 800b8a4:	e7b1      	b.n	800b80a <_strtod_l+0x992>
 800b8a6:	4f34      	ldr	r7, [pc, #208]	@ (800b978 <_strtod_l+0xb00>)
 800b8a8:	2600      	movs	r6, #0
 800b8aa:	e7aa      	b.n	800b802 <_strtod_l+0x98a>
 800b8ac:	4b32      	ldr	r3, [pc, #200]	@ (800b978 <_strtod_l+0xb00>)
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f7f4 fec0 	bl	8000638 <__aeabi_dmul>
 800b8b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	460f      	mov	r7, r1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d09f      	beq.n	800b802 <_strtod_l+0x98a>
 800b8c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b8c6:	e7a0      	b.n	800b80a <_strtod_l+0x992>
 800b8c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b950 <_strtod_l+0xad8>
 800b8cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8d0:	ec57 6b17 	vmov	r6, r7, d7
 800b8d4:	e799      	b.n	800b80a <_strtod_l+0x992>
 800b8d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b8da:	9b08      	ldr	r3, [sp, #32]
 800b8dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1c1      	bne.n	800b868 <_strtod_l+0x9f0>
 800b8e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b8e8:	0d1b      	lsrs	r3, r3, #20
 800b8ea:	051b      	lsls	r3, r3, #20
 800b8ec:	429d      	cmp	r5, r3
 800b8ee:	d1bb      	bne.n	800b868 <_strtod_l+0x9f0>
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	f7f5 fa00 	bl	8000cf8 <__aeabi_d2lz>
 800b8f8:	f7f4 fe70 	bl	80005dc <__aeabi_l2d>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4630      	mov	r0, r6
 800b902:	4639      	mov	r1, r7
 800b904:	f7f4 fce0 	bl	80002c8 <__aeabi_dsub>
 800b908:	460b      	mov	r3, r1
 800b90a:	4602      	mov	r2, r0
 800b90c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b910:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b916:	ea46 060a 	orr.w	r6, r6, sl
 800b91a:	431e      	orrs	r6, r3
 800b91c:	d06f      	beq.n	800b9fe <_strtod_l+0xb86>
 800b91e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b958 <_strtod_l+0xae0>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f5 f8fa 	bl	8000b1c <__aeabi_dcmplt>
 800b928:	2800      	cmp	r0, #0
 800b92a:	f47f accf 	bne.w	800b2cc <_strtod_l+0x454>
 800b92e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b960 <_strtod_l+0xae8>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b938:	f7f5 f90e 	bl	8000b58 <__aeabi_dcmpgt>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d093      	beq.n	800b868 <_strtod_l+0x9f0>
 800b940:	e4c4      	b.n	800b2cc <_strtod_l+0x454>
 800b942:	bf00      	nop
 800b944:	f3af 8000 	nop.w
 800b948:	00000000 	.word	0x00000000
 800b94c:	bff00000 	.word	0xbff00000
 800b950:	00000000 	.word	0x00000000
 800b954:	3ff00000 	.word	0x3ff00000
 800b958:	94a03595 	.word	0x94a03595
 800b95c:	3fdfffff 	.word	0x3fdfffff
 800b960:	35afe535 	.word	0x35afe535
 800b964:	3fe00000 	.word	0x3fe00000
 800b968:	000fffff 	.word	0x000fffff
 800b96c:	7ff00000 	.word	0x7ff00000
 800b970:	7fefffff 	.word	0x7fefffff
 800b974:	3ff00000 	.word	0x3ff00000
 800b978:	3fe00000 	.word	0x3fe00000
 800b97c:	7fe00000 	.word	0x7fe00000
 800b980:	7c9fffff 	.word	0x7c9fffff
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	b323      	cbz	r3, 800b9d2 <_strtod_l+0xb5a>
 800b988:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b98c:	d821      	bhi.n	800b9d2 <_strtod_l+0xb5a>
 800b98e:	a328      	add	r3, pc, #160	@ (adr r3, 800ba30 <_strtod_l+0xbb8>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	4630      	mov	r0, r6
 800b996:	4639      	mov	r1, r7
 800b998:	f7f5 f8ca 	bl	8000b30 <__aeabi_dcmple>
 800b99c:	b1a0      	cbz	r0, 800b9c8 <_strtod_l+0xb50>
 800b99e:	4639      	mov	r1, r7
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f7f5 f921 	bl	8000be8 <__aeabi_d2uiz>
 800b9a6:	2801      	cmp	r0, #1
 800b9a8:	bf38      	it	cc
 800b9aa:	2001      	movcc	r0, #1
 800b9ac:	f7f4 fdca 	bl	8000544 <__aeabi_ui2d>
 800b9b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460f      	mov	r7, r1
 800b9b6:	b9fb      	cbnz	r3, 800b9f8 <_strtod_l+0xb80>
 800b9b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b9be:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b9c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b9c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b9ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b9ce:	1b5b      	subs	r3, r3, r5
 800b9d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b9d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b9d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b9da:	f7ff f8f1 	bl	800abc0 <__ulp>
 800b9de:	4650      	mov	r0, sl
 800b9e0:	ec53 2b10 	vmov	r2, r3, d0
 800b9e4:	4659      	mov	r1, fp
 800b9e6:	f7f4 fe27 	bl	8000638 <__aeabi_dmul>
 800b9ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b9ee:	f7f4 fc6d 	bl	80002cc <__adddf3>
 800b9f2:	4682      	mov	sl, r0
 800b9f4:	468b      	mov	fp, r1
 800b9f6:	e770      	b.n	800b8da <_strtod_l+0xa62>
 800b9f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b9fc:	e7e0      	b.n	800b9c0 <_strtod_l+0xb48>
 800b9fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800ba38 <_strtod_l+0xbc0>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f7f5 f88a 	bl	8000b1c <__aeabi_dcmplt>
 800ba08:	e798      	b.n	800b93c <_strtod_l+0xac4>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ba10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	f7ff ba6d 	b.w	800aef2 <_strtod_l+0x7a>
 800ba18:	2a65      	cmp	r2, #101	@ 0x65
 800ba1a:	f43f ab66 	beq.w	800b0ea <_strtod_l+0x272>
 800ba1e:	2a45      	cmp	r2, #69	@ 0x45
 800ba20:	f43f ab63 	beq.w	800b0ea <_strtod_l+0x272>
 800ba24:	2301      	movs	r3, #1
 800ba26:	f7ff bb9e 	b.w	800b166 <_strtod_l+0x2ee>
 800ba2a:	bf00      	nop
 800ba2c:	f3af 8000 	nop.w
 800ba30:	ffc00000 	.word	0xffc00000
 800ba34:	41dfffff 	.word	0x41dfffff
 800ba38:	94a03595 	.word	0x94a03595
 800ba3c:	3fcfffff 	.word	0x3fcfffff

0800ba40 <_strtod_r>:
 800ba40:	4b01      	ldr	r3, [pc, #4]	@ (800ba48 <_strtod_r+0x8>)
 800ba42:	f7ff ba19 	b.w	800ae78 <_strtod_l>
 800ba46:	bf00      	nop
 800ba48:	20000078 	.word	0x20000078

0800ba4c <_strtol_l.constprop.0>:
 800ba4c:	2b24      	cmp	r3, #36	@ 0x24
 800ba4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba52:	4686      	mov	lr, r0
 800ba54:	4690      	mov	r8, r2
 800ba56:	d801      	bhi.n	800ba5c <_strtol_l.constprop.0+0x10>
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d106      	bne.n	800ba6a <_strtol_l.constprop.0+0x1e>
 800ba5c:	f7fd fdbc 	bl	80095d8 <__errno>
 800ba60:	2316      	movs	r3, #22
 800ba62:	6003      	str	r3, [r0, #0]
 800ba64:	2000      	movs	r0, #0
 800ba66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba6a:	4834      	ldr	r0, [pc, #208]	@ (800bb3c <_strtol_l.constprop.0+0xf0>)
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	462a      	mov	r2, r5
 800ba70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba74:	5d06      	ldrb	r6, [r0, r4]
 800ba76:	f016 0608 	ands.w	r6, r6, #8
 800ba7a:	d1f8      	bne.n	800ba6e <_strtol_l.constprop.0+0x22>
 800ba7c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ba7e:	d12d      	bne.n	800badc <_strtol_l.constprop.0+0x90>
 800ba80:	782c      	ldrb	r4, [r5, #0]
 800ba82:	2601      	movs	r6, #1
 800ba84:	1c95      	adds	r5, r2, #2
 800ba86:	f033 0210 	bics.w	r2, r3, #16
 800ba8a:	d109      	bne.n	800baa0 <_strtol_l.constprop.0+0x54>
 800ba8c:	2c30      	cmp	r4, #48	@ 0x30
 800ba8e:	d12a      	bne.n	800bae6 <_strtol_l.constprop.0+0x9a>
 800ba90:	782a      	ldrb	r2, [r5, #0]
 800ba92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ba96:	2a58      	cmp	r2, #88	@ 0x58
 800ba98:	d125      	bne.n	800bae6 <_strtol_l.constprop.0+0x9a>
 800ba9a:	786c      	ldrb	r4, [r5, #1]
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	3502      	adds	r5, #2
 800baa0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800baa4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800baa8:	2200      	movs	r2, #0
 800baaa:	fbbc f9f3 	udiv	r9, ip, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	fb03 ca19 	mls	sl, r3, r9, ip
 800bab4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bab8:	2f09      	cmp	r7, #9
 800baba:	d81b      	bhi.n	800baf4 <_strtol_l.constprop.0+0xa8>
 800babc:	463c      	mov	r4, r7
 800babe:	42a3      	cmp	r3, r4
 800bac0:	dd27      	ble.n	800bb12 <_strtol_l.constprop.0+0xc6>
 800bac2:	1c57      	adds	r7, r2, #1
 800bac4:	d007      	beq.n	800bad6 <_strtol_l.constprop.0+0x8a>
 800bac6:	4581      	cmp	r9, r0
 800bac8:	d320      	bcc.n	800bb0c <_strtol_l.constprop.0+0xc0>
 800baca:	d101      	bne.n	800bad0 <_strtol_l.constprop.0+0x84>
 800bacc:	45a2      	cmp	sl, r4
 800bace:	db1d      	blt.n	800bb0c <_strtol_l.constprop.0+0xc0>
 800bad0:	fb00 4003 	mla	r0, r0, r3, r4
 800bad4:	2201      	movs	r2, #1
 800bad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bada:	e7eb      	b.n	800bab4 <_strtol_l.constprop.0+0x68>
 800badc:	2c2b      	cmp	r4, #43	@ 0x2b
 800bade:	bf04      	itt	eq
 800bae0:	782c      	ldrbeq	r4, [r5, #0]
 800bae2:	1c95      	addeq	r5, r2, #2
 800bae4:	e7cf      	b.n	800ba86 <_strtol_l.constprop.0+0x3a>
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1da      	bne.n	800baa0 <_strtol_l.constprop.0+0x54>
 800baea:	2c30      	cmp	r4, #48	@ 0x30
 800baec:	bf0c      	ite	eq
 800baee:	2308      	moveq	r3, #8
 800baf0:	230a      	movne	r3, #10
 800baf2:	e7d5      	b.n	800baa0 <_strtol_l.constprop.0+0x54>
 800baf4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800baf8:	2f19      	cmp	r7, #25
 800bafa:	d801      	bhi.n	800bb00 <_strtol_l.constprop.0+0xb4>
 800bafc:	3c37      	subs	r4, #55	@ 0x37
 800bafe:	e7de      	b.n	800babe <_strtol_l.constprop.0+0x72>
 800bb00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb04:	2f19      	cmp	r7, #25
 800bb06:	d804      	bhi.n	800bb12 <_strtol_l.constprop.0+0xc6>
 800bb08:	3c57      	subs	r4, #87	@ 0x57
 800bb0a:	e7d8      	b.n	800babe <_strtol_l.constprop.0+0x72>
 800bb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb10:	e7e1      	b.n	800bad6 <_strtol_l.constprop.0+0x8a>
 800bb12:	1c53      	adds	r3, r2, #1
 800bb14:	d108      	bne.n	800bb28 <_strtol_l.constprop.0+0xdc>
 800bb16:	2322      	movs	r3, #34	@ 0x22
 800bb18:	f8ce 3000 	str.w	r3, [lr]
 800bb1c:	4660      	mov	r0, ip
 800bb1e:	f1b8 0f00 	cmp.w	r8, #0
 800bb22:	d0a0      	beq.n	800ba66 <_strtol_l.constprop.0+0x1a>
 800bb24:	1e69      	subs	r1, r5, #1
 800bb26:	e006      	b.n	800bb36 <_strtol_l.constprop.0+0xea>
 800bb28:	b106      	cbz	r6, 800bb2c <_strtol_l.constprop.0+0xe0>
 800bb2a:	4240      	negs	r0, r0
 800bb2c:	f1b8 0f00 	cmp.w	r8, #0
 800bb30:	d099      	beq.n	800ba66 <_strtol_l.constprop.0+0x1a>
 800bb32:	2a00      	cmp	r2, #0
 800bb34:	d1f6      	bne.n	800bb24 <_strtol_l.constprop.0+0xd8>
 800bb36:	f8c8 1000 	str.w	r1, [r8]
 800bb3a:	e794      	b.n	800ba66 <_strtol_l.constprop.0+0x1a>
 800bb3c:	0800e6c9 	.word	0x0800e6c9

0800bb40 <_strtol_r>:
 800bb40:	f7ff bf84 	b.w	800ba4c <_strtol_l.constprop.0>

0800bb44 <__ssputs_r>:
 800bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb48:	688e      	ldr	r6, [r1, #8]
 800bb4a:	461f      	mov	r7, r3
 800bb4c:	42be      	cmp	r6, r7
 800bb4e:	680b      	ldr	r3, [r1, #0]
 800bb50:	4682      	mov	sl, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	4690      	mov	r8, r2
 800bb56:	d82d      	bhi.n	800bbb4 <__ssputs_r+0x70>
 800bb58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb60:	d026      	beq.n	800bbb0 <__ssputs_r+0x6c>
 800bb62:	6965      	ldr	r5, [r4, #20]
 800bb64:	6909      	ldr	r1, [r1, #16]
 800bb66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb6a:	eba3 0901 	sub.w	r9, r3, r1
 800bb6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb72:	1c7b      	adds	r3, r7, #1
 800bb74:	444b      	add	r3, r9
 800bb76:	106d      	asrs	r5, r5, #1
 800bb78:	429d      	cmp	r5, r3
 800bb7a:	bf38      	it	cc
 800bb7c:	461d      	movcc	r5, r3
 800bb7e:	0553      	lsls	r3, r2, #21
 800bb80:	d527      	bpl.n	800bbd2 <__ssputs_r+0x8e>
 800bb82:	4629      	mov	r1, r5
 800bb84:	f7fe fc1c 	bl	800a3c0 <_malloc_r>
 800bb88:	4606      	mov	r6, r0
 800bb8a:	b360      	cbz	r0, 800bbe6 <__ssputs_r+0xa2>
 800bb8c:	6921      	ldr	r1, [r4, #16]
 800bb8e:	464a      	mov	r2, r9
 800bb90:	f000 fbde 	bl	800c350 <memcpy>
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb9e:	81a3      	strh	r3, [r4, #12]
 800bba0:	6126      	str	r6, [r4, #16]
 800bba2:	6165      	str	r5, [r4, #20]
 800bba4:	444e      	add	r6, r9
 800bba6:	eba5 0509 	sub.w	r5, r5, r9
 800bbaa:	6026      	str	r6, [r4, #0]
 800bbac:	60a5      	str	r5, [r4, #8]
 800bbae:	463e      	mov	r6, r7
 800bbb0:	42be      	cmp	r6, r7
 800bbb2:	d900      	bls.n	800bbb6 <__ssputs_r+0x72>
 800bbb4:	463e      	mov	r6, r7
 800bbb6:	6820      	ldr	r0, [r4, #0]
 800bbb8:	4632      	mov	r2, r6
 800bbba:	4641      	mov	r1, r8
 800bbbc:	f000 fb6a 	bl	800c294 <memmove>
 800bbc0:	68a3      	ldr	r3, [r4, #8]
 800bbc2:	1b9b      	subs	r3, r3, r6
 800bbc4:	60a3      	str	r3, [r4, #8]
 800bbc6:	6823      	ldr	r3, [r4, #0]
 800bbc8:	4433      	add	r3, r6
 800bbca:	6023      	str	r3, [r4, #0]
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	f000 ff51 	bl	800ca7a <_realloc_r>
 800bbd8:	4606      	mov	r6, r0
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d1e0      	bne.n	800bba0 <__ssputs_r+0x5c>
 800bbde:	6921      	ldr	r1, [r4, #16]
 800bbe0:	4650      	mov	r0, sl
 800bbe2:	f7fe fb79 	bl	800a2d8 <_free_r>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	f8ca 3000 	str.w	r3, [sl]
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	e7e9      	b.n	800bbce <__ssputs_r+0x8a>
	...

0800bbfc <_svfiprintf_r>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	4698      	mov	r8, r3
 800bc02:	898b      	ldrh	r3, [r1, #12]
 800bc04:	061b      	lsls	r3, r3, #24
 800bc06:	b09d      	sub	sp, #116	@ 0x74
 800bc08:	4607      	mov	r7, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	d510      	bpl.n	800bc32 <_svfiprintf_r+0x36>
 800bc10:	690b      	ldr	r3, [r1, #16]
 800bc12:	b973      	cbnz	r3, 800bc32 <_svfiprintf_r+0x36>
 800bc14:	2140      	movs	r1, #64	@ 0x40
 800bc16:	f7fe fbd3 	bl	800a3c0 <_malloc_r>
 800bc1a:	6028      	str	r0, [r5, #0]
 800bc1c:	6128      	str	r0, [r5, #16]
 800bc1e:	b930      	cbnz	r0, 800bc2e <_svfiprintf_r+0x32>
 800bc20:	230c      	movs	r3, #12
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	b01d      	add	sp, #116	@ 0x74
 800bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2e:	2340      	movs	r3, #64	@ 0x40
 800bc30:	616b      	str	r3, [r5, #20]
 800bc32:	2300      	movs	r3, #0
 800bc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc36:	2320      	movs	r3, #32
 800bc38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc40:	2330      	movs	r3, #48	@ 0x30
 800bc42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bde0 <_svfiprintf_r+0x1e4>
 800bc46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc4a:	f04f 0901 	mov.w	r9, #1
 800bc4e:	4623      	mov	r3, r4
 800bc50:	469a      	mov	sl, r3
 800bc52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc56:	b10a      	cbz	r2, 800bc5c <_svfiprintf_r+0x60>
 800bc58:	2a25      	cmp	r2, #37	@ 0x25
 800bc5a:	d1f9      	bne.n	800bc50 <_svfiprintf_r+0x54>
 800bc5c:	ebba 0b04 	subs.w	fp, sl, r4
 800bc60:	d00b      	beq.n	800bc7a <_svfiprintf_r+0x7e>
 800bc62:	465b      	mov	r3, fp
 800bc64:	4622      	mov	r2, r4
 800bc66:	4629      	mov	r1, r5
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff ff6b 	bl	800bb44 <__ssputs_r>
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f000 80a7 	beq.w	800bdc2 <_svfiprintf_r+0x1c6>
 800bc74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc76:	445a      	add	r2, fp
 800bc78:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 809f 	beq.w	800bdc2 <_svfiprintf_r+0x1c6>
 800bc84:	2300      	movs	r3, #0
 800bc86:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc8e:	f10a 0a01 	add.w	sl, sl, #1
 800bc92:	9304      	str	r3, [sp, #16]
 800bc94:	9307      	str	r3, [sp, #28]
 800bc96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc9c:	4654      	mov	r4, sl
 800bc9e:	2205      	movs	r2, #5
 800bca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca4:	484e      	ldr	r0, [pc, #312]	@ (800bde0 <_svfiprintf_r+0x1e4>)
 800bca6:	f7f4 fab3 	bl	8000210 <memchr>
 800bcaa:	9a04      	ldr	r2, [sp, #16]
 800bcac:	b9d8      	cbnz	r0, 800bce6 <_svfiprintf_r+0xea>
 800bcae:	06d0      	lsls	r0, r2, #27
 800bcb0:	bf44      	itt	mi
 800bcb2:	2320      	movmi	r3, #32
 800bcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcb8:	0711      	lsls	r1, r2, #28
 800bcba:	bf44      	itt	mi
 800bcbc:	232b      	movmi	r3, #43	@ 0x2b
 800bcbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcc8:	d015      	beq.n	800bcf6 <_svfiprintf_r+0xfa>
 800bcca:	9a07      	ldr	r2, [sp, #28]
 800bccc:	4654      	mov	r4, sl
 800bcce:	2000      	movs	r0, #0
 800bcd0:	f04f 0c0a 	mov.w	ip, #10
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcda:	3b30      	subs	r3, #48	@ 0x30
 800bcdc:	2b09      	cmp	r3, #9
 800bcde:	d94b      	bls.n	800bd78 <_svfiprintf_r+0x17c>
 800bce0:	b1b0      	cbz	r0, 800bd10 <_svfiprintf_r+0x114>
 800bce2:	9207      	str	r2, [sp, #28]
 800bce4:	e014      	b.n	800bd10 <_svfiprintf_r+0x114>
 800bce6:	eba0 0308 	sub.w	r3, r0, r8
 800bcea:	fa09 f303 	lsl.w	r3, r9, r3
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	46a2      	mov	sl, r4
 800bcf4:	e7d2      	b.n	800bc9c <_svfiprintf_r+0xa0>
 800bcf6:	9b03      	ldr	r3, [sp, #12]
 800bcf8:	1d19      	adds	r1, r3, #4
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	9103      	str	r1, [sp, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bfbb      	ittet	lt
 800bd02:	425b      	neglt	r3, r3
 800bd04:	f042 0202 	orrlt.w	r2, r2, #2
 800bd08:	9307      	strge	r3, [sp, #28]
 800bd0a:	9307      	strlt	r3, [sp, #28]
 800bd0c:	bfb8      	it	lt
 800bd0e:	9204      	strlt	r2, [sp, #16]
 800bd10:	7823      	ldrb	r3, [r4, #0]
 800bd12:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd14:	d10a      	bne.n	800bd2c <_svfiprintf_r+0x130>
 800bd16:	7863      	ldrb	r3, [r4, #1]
 800bd18:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd1a:	d132      	bne.n	800bd82 <_svfiprintf_r+0x186>
 800bd1c:	9b03      	ldr	r3, [sp, #12]
 800bd1e:	1d1a      	adds	r2, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	9203      	str	r2, [sp, #12]
 800bd24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd28:	3402      	adds	r4, #2
 800bd2a:	9305      	str	r3, [sp, #20]
 800bd2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdf0 <_svfiprintf_r+0x1f4>
 800bd30:	7821      	ldrb	r1, [r4, #0]
 800bd32:	2203      	movs	r2, #3
 800bd34:	4650      	mov	r0, sl
 800bd36:	f7f4 fa6b 	bl	8000210 <memchr>
 800bd3a:	b138      	cbz	r0, 800bd4c <_svfiprintf_r+0x150>
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	eba0 000a 	sub.w	r0, r0, sl
 800bd42:	2240      	movs	r2, #64	@ 0x40
 800bd44:	4082      	lsls	r2, r0
 800bd46:	4313      	orrs	r3, r2
 800bd48:	3401      	adds	r4, #1
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd50:	4824      	ldr	r0, [pc, #144]	@ (800bde4 <_svfiprintf_r+0x1e8>)
 800bd52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd56:	2206      	movs	r2, #6
 800bd58:	f7f4 fa5a 	bl	8000210 <memchr>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d036      	beq.n	800bdce <_svfiprintf_r+0x1d2>
 800bd60:	4b21      	ldr	r3, [pc, #132]	@ (800bde8 <_svfiprintf_r+0x1ec>)
 800bd62:	bb1b      	cbnz	r3, 800bdac <_svfiprintf_r+0x1b0>
 800bd64:	9b03      	ldr	r3, [sp, #12]
 800bd66:	3307      	adds	r3, #7
 800bd68:	f023 0307 	bic.w	r3, r3, #7
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd72:	4433      	add	r3, r6
 800bd74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd76:	e76a      	b.n	800bc4e <_svfiprintf_r+0x52>
 800bd78:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	2001      	movs	r0, #1
 800bd80:	e7a8      	b.n	800bcd4 <_svfiprintf_r+0xd8>
 800bd82:	2300      	movs	r3, #0
 800bd84:	3401      	adds	r4, #1
 800bd86:	9305      	str	r3, [sp, #20]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	f04f 0c0a 	mov.w	ip, #10
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd94:	3a30      	subs	r2, #48	@ 0x30
 800bd96:	2a09      	cmp	r2, #9
 800bd98:	d903      	bls.n	800bda2 <_svfiprintf_r+0x1a6>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0c6      	beq.n	800bd2c <_svfiprintf_r+0x130>
 800bd9e:	9105      	str	r1, [sp, #20]
 800bda0:	e7c4      	b.n	800bd2c <_svfiprintf_r+0x130>
 800bda2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bda6:	4604      	mov	r4, r0
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e7f0      	b.n	800bd8e <_svfiprintf_r+0x192>
 800bdac:	ab03      	add	r3, sp, #12
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	462a      	mov	r2, r5
 800bdb2:	4b0e      	ldr	r3, [pc, #56]	@ (800bdec <_svfiprintf_r+0x1f0>)
 800bdb4:	a904      	add	r1, sp, #16
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f7fc fbc6 	bl	8008548 <_printf_float>
 800bdbc:	1c42      	adds	r2, r0, #1
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	d1d6      	bne.n	800bd70 <_svfiprintf_r+0x174>
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	065b      	lsls	r3, r3, #25
 800bdc6:	f53f af2d 	bmi.w	800bc24 <_svfiprintf_r+0x28>
 800bdca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdcc:	e72c      	b.n	800bc28 <_svfiprintf_r+0x2c>
 800bdce:	ab03      	add	r3, sp, #12
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	462a      	mov	r2, r5
 800bdd4:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <_svfiprintf_r+0x1f0>)
 800bdd6:	a904      	add	r1, sp, #16
 800bdd8:	4638      	mov	r0, r7
 800bdda:	f7fc fe4d 	bl	8008a78 <_printf_i>
 800bdde:	e7ed      	b.n	800bdbc <_svfiprintf_r+0x1c0>
 800bde0:	0800e7c9 	.word	0x0800e7c9
 800bde4:	0800e7d3 	.word	0x0800e7d3
 800bde8:	08008549 	.word	0x08008549
 800bdec:	0800bb45 	.word	0x0800bb45
 800bdf0:	0800e7cf 	.word	0x0800e7cf

0800bdf4 <__sfputc_r>:
 800bdf4:	6893      	ldr	r3, [r2, #8]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	b410      	push	{r4}
 800bdfc:	6093      	str	r3, [r2, #8]
 800bdfe:	da08      	bge.n	800be12 <__sfputc_r+0x1e>
 800be00:	6994      	ldr	r4, [r2, #24]
 800be02:	42a3      	cmp	r3, r4
 800be04:	db01      	blt.n	800be0a <__sfputc_r+0x16>
 800be06:	290a      	cmp	r1, #10
 800be08:	d103      	bne.n	800be12 <__sfputc_r+0x1e>
 800be0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be0e:	f7fd bafc 	b.w	800940a <__swbuf_r>
 800be12:	6813      	ldr	r3, [r2, #0]
 800be14:	1c58      	adds	r0, r3, #1
 800be16:	6010      	str	r0, [r2, #0]
 800be18:	7019      	strb	r1, [r3, #0]
 800be1a:	4608      	mov	r0, r1
 800be1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <__sfputs_r>:
 800be22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be24:	4606      	mov	r6, r0
 800be26:	460f      	mov	r7, r1
 800be28:	4614      	mov	r4, r2
 800be2a:	18d5      	adds	r5, r2, r3
 800be2c:	42ac      	cmp	r4, r5
 800be2e:	d101      	bne.n	800be34 <__sfputs_r+0x12>
 800be30:	2000      	movs	r0, #0
 800be32:	e007      	b.n	800be44 <__sfputs_r+0x22>
 800be34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be38:	463a      	mov	r2, r7
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7ff ffda 	bl	800bdf4 <__sfputc_r>
 800be40:	1c43      	adds	r3, r0, #1
 800be42:	d1f3      	bne.n	800be2c <__sfputs_r+0xa>
 800be44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be48 <_vfiprintf_r>:
 800be48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4c:	460d      	mov	r5, r1
 800be4e:	b09d      	sub	sp, #116	@ 0x74
 800be50:	4614      	mov	r4, r2
 800be52:	4698      	mov	r8, r3
 800be54:	4606      	mov	r6, r0
 800be56:	b118      	cbz	r0, 800be60 <_vfiprintf_r+0x18>
 800be58:	6a03      	ldr	r3, [r0, #32]
 800be5a:	b90b      	cbnz	r3, 800be60 <_vfiprintf_r+0x18>
 800be5c:	f7fd f9cc 	bl	80091f8 <__sinit>
 800be60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be62:	07d9      	lsls	r1, r3, #31
 800be64:	d405      	bmi.n	800be72 <_vfiprintf_r+0x2a>
 800be66:	89ab      	ldrh	r3, [r5, #12]
 800be68:	059a      	lsls	r2, r3, #22
 800be6a:	d402      	bmi.n	800be72 <_vfiprintf_r+0x2a>
 800be6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be6e:	f7fd fbde 	bl	800962e <__retarget_lock_acquire_recursive>
 800be72:	89ab      	ldrh	r3, [r5, #12]
 800be74:	071b      	lsls	r3, r3, #28
 800be76:	d501      	bpl.n	800be7c <_vfiprintf_r+0x34>
 800be78:	692b      	ldr	r3, [r5, #16]
 800be7a:	b99b      	cbnz	r3, 800bea4 <_vfiprintf_r+0x5c>
 800be7c:	4629      	mov	r1, r5
 800be7e:	4630      	mov	r0, r6
 800be80:	f7fd fb02 	bl	8009488 <__swsetup_r>
 800be84:	b170      	cbz	r0, 800bea4 <_vfiprintf_r+0x5c>
 800be86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be88:	07dc      	lsls	r4, r3, #31
 800be8a:	d504      	bpl.n	800be96 <_vfiprintf_r+0x4e>
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295
 800be90:	b01d      	add	sp, #116	@ 0x74
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	0598      	lsls	r0, r3, #22
 800be9a:	d4f7      	bmi.n	800be8c <_vfiprintf_r+0x44>
 800be9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be9e:	f7fd fbc7 	bl	8009630 <__retarget_lock_release_recursive>
 800bea2:	e7f3      	b.n	800be8c <_vfiprintf_r+0x44>
 800bea4:	2300      	movs	r3, #0
 800bea6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bea8:	2320      	movs	r3, #32
 800beaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beae:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb2:	2330      	movs	r3, #48	@ 0x30
 800beb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c064 <_vfiprintf_r+0x21c>
 800beb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bebc:	f04f 0901 	mov.w	r9, #1
 800bec0:	4623      	mov	r3, r4
 800bec2:	469a      	mov	sl, r3
 800bec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bec8:	b10a      	cbz	r2, 800bece <_vfiprintf_r+0x86>
 800beca:	2a25      	cmp	r2, #37	@ 0x25
 800becc:	d1f9      	bne.n	800bec2 <_vfiprintf_r+0x7a>
 800bece:	ebba 0b04 	subs.w	fp, sl, r4
 800bed2:	d00b      	beq.n	800beec <_vfiprintf_r+0xa4>
 800bed4:	465b      	mov	r3, fp
 800bed6:	4622      	mov	r2, r4
 800bed8:	4629      	mov	r1, r5
 800beda:	4630      	mov	r0, r6
 800bedc:	f7ff ffa1 	bl	800be22 <__sfputs_r>
 800bee0:	3001      	adds	r0, #1
 800bee2:	f000 80a7 	beq.w	800c034 <_vfiprintf_r+0x1ec>
 800bee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bee8:	445a      	add	r2, fp
 800beea:	9209      	str	r2, [sp, #36]	@ 0x24
 800beec:	f89a 3000 	ldrb.w	r3, [sl]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 809f 	beq.w	800c034 <_vfiprintf_r+0x1ec>
 800bef6:	2300      	movs	r3, #0
 800bef8:	f04f 32ff 	mov.w	r2, #4294967295
 800befc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf00:	f10a 0a01 	add.w	sl, sl, #1
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	9307      	str	r3, [sp, #28]
 800bf08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf0e:	4654      	mov	r4, sl
 800bf10:	2205      	movs	r2, #5
 800bf12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf16:	4853      	ldr	r0, [pc, #332]	@ (800c064 <_vfiprintf_r+0x21c>)
 800bf18:	f7f4 f97a 	bl	8000210 <memchr>
 800bf1c:	9a04      	ldr	r2, [sp, #16]
 800bf1e:	b9d8      	cbnz	r0, 800bf58 <_vfiprintf_r+0x110>
 800bf20:	06d1      	lsls	r1, r2, #27
 800bf22:	bf44      	itt	mi
 800bf24:	2320      	movmi	r3, #32
 800bf26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf2a:	0713      	lsls	r3, r2, #28
 800bf2c:	bf44      	itt	mi
 800bf2e:	232b      	movmi	r3, #43	@ 0x2b
 800bf30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf34:	f89a 3000 	ldrb.w	r3, [sl]
 800bf38:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf3a:	d015      	beq.n	800bf68 <_vfiprintf_r+0x120>
 800bf3c:	9a07      	ldr	r2, [sp, #28]
 800bf3e:	4654      	mov	r4, sl
 800bf40:	2000      	movs	r0, #0
 800bf42:	f04f 0c0a 	mov.w	ip, #10
 800bf46:	4621      	mov	r1, r4
 800bf48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf4c:	3b30      	subs	r3, #48	@ 0x30
 800bf4e:	2b09      	cmp	r3, #9
 800bf50:	d94b      	bls.n	800bfea <_vfiprintf_r+0x1a2>
 800bf52:	b1b0      	cbz	r0, 800bf82 <_vfiprintf_r+0x13a>
 800bf54:	9207      	str	r2, [sp, #28]
 800bf56:	e014      	b.n	800bf82 <_vfiprintf_r+0x13a>
 800bf58:	eba0 0308 	sub.w	r3, r0, r8
 800bf5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bf60:	4313      	orrs	r3, r2
 800bf62:	9304      	str	r3, [sp, #16]
 800bf64:	46a2      	mov	sl, r4
 800bf66:	e7d2      	b.n	800bf0e <_vfiprintf_r+0xc6>
 800bf68:	9b03      	ldr	r3, [sp, #12]
 800bf6a:	1d19      	adds	r1, r3, #4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	9103      	str	r1, [sp, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bfbb      	ittet	lt
 800bf74:	425b      	neglt	r3, r3
 800bf76:	f042 0202 	orrlt.w	r2, r2, #2
 800bf7a:	9307      	strge	r3, [sp, #28]
 800bf7c:	9307      	strlt	r3, [sp, #28]
 800bf7e:	bfb8      	it	lt
 800bf80:	9204      	strlt	r2, [sp, #16]
 800bf82:	7823      	ldrb	r3, [r4, #0]
 800bf84:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf86:	d10a      	bne.n	800bf9e <_vfiprintf_r+0x156>
 800bf88:	7863      	ldrb	r3, [r4, #1]
 800bf8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf8c:	d132      	bne.n	800bff4 <_vfiprintf_r+0x1ac>
 800bf8e:	9b03      	ldr	r3, [sp, #12]
 800bf90:	1d1a      	adds	r2, r3, #4
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	9203      	str	r2, [sp, #12]
 800bf96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf9a:	3402      	adds	r4, #2
 800bf9c:	9305      	str	r3, [sp, #20]
 800bf9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c074 <_vfiprintf_r+0x22c>
 800bfa2:	7821      	ldrb	r1, [r4, #0]
 800bfa4:	2203      	movs	r2, #3
 800bfa6:	4650      	mov	r0, sl
 800bfa8:	f7f4 f932 	bl	8000210 <memchr>
 800bfac:	b138      	cbz	r0, 800bfbe <_vfiprintf_r+0x176>
 800bfae:	9b04      	ldr	r3, [sp, #16]
 800bfb0:	eba0 000a 	sub.w	r0, r0, sl
 800bfb4:	2240      	movs	r2, #64	@ 0x40
 800bfb6:	4082      	lsls	r2, r0
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	3401      	adds	r4, #1
 800bfbc:	9304      	str	r3, [sp, #16]
 800bfbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc2:	4829      	ldr	r0, [pc, #164]	@ (800c068 <_vfiprintf_r+0x220>)
 800bfc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfc8:	2206      	movs	r2, #6
 800bfca:	f7f4 f921 	bl	8000210 <memchr>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d03f      	beq.n	800c052 <_vfiprintf_r+0x20a>
 800bfd2:	4b26      	ldr	r3, [pc, #152]	@ (800c06c <_vfiprintf_r+0x224>)
 800bfd4:	bb1b      	cbnz	r3, 800c01e <_vfiprintf_r+0x1d6>
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	3307      	adds	r3, #7
 800bfda:	f023 0307 	bic.w	r3, r3, #7
 800bfde:	3308      	adds	r3, #8
 800bfe0:	9303      	str	r3, [sp, #12]
 800bfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe4:	443b      	add	r3, r7
 800bfe6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe8:	e76a      	b.n	800bec0 <_vfiprintf_r+0x78>
 800bfea:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfee:	460c      	mov	r4, r1
 800bff0:	2001      	movs	r0, #1
 800bff2:	e7a8      	b.n	800bf46 <_vfiprintf_r+0xfe>
 800bff4:	2300      	movs	r3, #0
 800bff6:	3401      	adds	r4, #1
 800bff8:	9305      	str	r3, [sp, #20]
 800bffa:	4619      	mov	r1, r3
 800bffc:	f04f 0c0a 	mov.w	ip, #10
 800c000:	4620      	mov	r0, r4
 800c002:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c006:	3a30      	subs	r2, #48	@ 0x30
 800c008:	2a09      	cmp	r2, #9
 800c00a:	d903      	bls.n	800c014 <_vfiprintf_r+0x1cc>
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d0c6      	beq.n	800bf9e <_vfiprintf_r+0x156>
 800c010:	9105      	str	r1, [sp, #20]
 800c012:	e7c4      	b.n	800bf9e <_vfiprintf_r+0x156>
 800c014:	fb0c 2101 	mla	r1, ip, r1, r2
 800c018:	4604      	mov	r4, r0
 800c01a:	2301      	movs	r3, #1
 800c01c:	e7f0      	b.n	800c000 <_vfiprintf_r+0x1b8>
 800c01e:	ab03      	add	r3, sp, #12
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	462a      	mov	r2, r5
 800c024:	4b12      	ldr	r3, [pc, #72]	@ (800c070 <_vfiprintf_r+0x228>)
 800c026:	a904      	add	r1, sp, #16
 800c028:	4630      	mov	r0, r6
 800c02a:	f7fc fa8d 	bl	8008548 <_printf_float>
 800c02e:	4607      	mov	r7, r0
 800c030:	1c78      	adds	r0, r7, #1
 800c032:	d1d6      	bne.n	800bfe2 <_vfiprintf_r+0x19a>
 800c034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c036:	07d9      	lsls	r1, r3, #31
 800c038:	d405      	bmi.n	800c046 <_vfiprintf_r+0x1fe>
 800c03a:	89ab      	ldrh	r3, [r5, #12]
 800c03c:	059a      	lsls	r2, r3, #22
 800c03e:	d402      	bmi.n	800c046 <_vfiprintf_r+0x1fe>
 800c040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c042:	f7fd faf5 	bl	8009630 <__retarget_lock_release_recursive>
 800c046:	89ab      	ldrh	r3, [r5, #12]
 800c048:	065b      	lsls	r3, r3, #25
 800c04a:	f53f af1f 	bmi.w	800be8c <_vfiprintf_r+0x44>
 800c04e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c050:	e71e      	b.n	800be90 <_vfiprintf_r+0x48>
 800c052:	ab03      	add	r3, sp, #12
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	462a      	mov	r2, r5
 800c058:	4b05      	ldr	r3, [pc, #20]	@ (800c070 <_vfiprintf_r+0x228>)
 800c05a:	a904      	add	r1, sp, #16
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7fc fd0b 	bl	8008a78 <_printf_i>
 800c062:	e7e4      	b.n	800c02e <_vfiprintf_r+0x1e6>
 800c064:	0800e7c9 	.word	0x0800e7c9
 800c068:	0800e7d3 	.word	0x0800e7d3
 800c06c:	08008549 	.word	0x08008549
 800c070:	0800be23 	.word	0x0800be23
 800c074:	0800e7cf 	.word	0x0800e7cf

0800c078 <__sflush_r>:
 800c078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c080:	0716      	lsls	r6, r2, #28
 800c082:	4605      	mov	r5, r0
 800c084:	460c      	mov	r4, r1
 800c086:	d454      	bmi.n	800c132 <__sflush_r+0xba>
 800c088:	684b      	ldr	r3, [r1, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	dc02      	bgt.n	800c094 <__sflush_r+0x1c>
 800c08e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c090:	2b00      	cmp	r3, #0
 800c092:	dd48      	ble.n	800c126 <__sflush_r+0xae>
 800c094:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c096:	2e00      	cmp	r6, #0
 800c098:	d045      	beq.n	800c126 <__sflush_r+0xae>
 800c09a:	2300      	movs	r3, #0
 800c09c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0a0:	682f      	ldr	r7, [r5, #0]
 800c0a2:	6a21      	ldr	r1, [r4, #32]
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	d030      	beq.n	800c10a <__sflush_r+0x92>
 800c0a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	0759      	lsls	r1, r3, #29
 800c0ae:	d505      	bpl.n	800c0bc <__sflush_r+0x44>
 800c0b0:	6863      	ldr	r3, [r4, #4]
 800c0b2:	1ad2      	subs	r2, r2, r3
 800c0b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0b6:	b10b      	cbz	r3, 800c0bc <__sflush_r+0x44>
 800c0b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ba:	1ad2      	subs	r2, r2, r3
 800c0bc:	2300      	movs	r3, #0
 800c0be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0c0:	6a21      	ldr	r1, [r4, #32]
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b0      	blx	r6
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	89a3      	ldrh	r3, [r4, #12]
 800c0ca:	d106      	bne.n	800c0da <__sflush_r+0x62>
 800c0cc:	6829      	ldr	r1, [r5, #0]
 800c0ce:	291d      	cmp	r1, #29
 800c0d0:	d82b      	bhi.n	800c12a <__sflush_r+0xb2>
 800c0d2:	4a2a      	ldr	r2, [pc, #168]	@ (800c17c <__sflush_r+0x104>)
 800c0d4:	410a      	asrs	r2, r1
 800c0d6:	07d6      	lsls	r6, r2, #31
 800c0d8:	d427      	bmi.n	800c12a <__sflush_r+0xb2>
 800c0da:	2200      	movs	r2, #0
 800c0dc:	6062      	str	r2, [r4, #4]
 800c0de:	04d9      	lsls	r1, r3, #19
 800c0e0:	6922      	ldr	r2, [r4, #16]
 800c0e2:	6022      	str	r2, [r4, #0]
 800c0e4:	d504      	bpl.n	800c0f0 <__sflush_r+0x78>
 800c0e6:	1c42      	adds	r2, r0, #1
 800c0e8:	d101      	bne.n	800c0ee <__sflush_r+0x76>
 800c0ea:	682b      	ldr	r3, [r5, #0]
 800c0ec:	b903      	cbnz	r3, 800c0f0 <__sflush_r+0x78>
 800c0ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0f2:	602f      	str	r7, [r5, #0]
 800c0f4:	b1b9      	cbz	r1, 800c126 <__sflush_r+0xae>
 800c0f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	d002      	beq.n	800c104 <__sflush_r+0x8c>
 800c0fe:	4628      	mov	r0, r5
 800c100:	f7fe f8ea 	bl	800a2d8 <_free_r>
 800c104:	2300      	movs	r3, #0
 800c106:	6363      	str	r3, [r4, #52]	@ 0x34
 800c108:	e00d      	b.n	800c126 <__sflush_r+0xae>
 800c10a:	2301      	movs	r3, #1
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b0      	blx	r6
 800c110:	4602      	mov	r2, r0
 800c112:	1c50      	adds	r0, r2, #1
 800c114:	d1c9      	bne.n	800c0aa <__sflush_r+0x32>
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d0c6      	beq.n	800c0aa <__sflush_r+0x32>
 800c11c:	2b1d      	cmp	r3, #29
 800c11e:	d001      	beq.n	800c124 <__sflush_r+0xac>
 800c120:	2b16      	cmp	r3, #22
 800c122:	d11e      	bne.n	800c162 <__sflush_r+0xea>
 800c124:	602f      	str	r7, [r5, #0]
 800c126:	2000      	movs	r0, #0
 800c128:	e022      	b.n	800c170 <__sflush_r+0xf8>
 800c12a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c12e:	b21b      	sxth	r3, r3
 800c130:	e01b      	b.n	800c16a <__sflush_r+0xf2>
 800c132:	690f      	ldr	r7, [r1, #16]
 800c134:	2f00      	cmp	r7, #0
 800c136:	d0f6      	beq.n	800c126 <__sflush_r+0xae>
 800c138:	0793      	lsls	r3, r2, #30
 800c13a:	680e      	ldr	r6, [r1, #0]
 800c13c:	bf08      	it	eq
 800c13e:	694b      	ldreq	r3, [r1, #20]
 800c140:	600f      	str	r7, [r1, #0]
 800c142:	bf18      	it	ne
 800c144:	2300      	movne	r3, #0
 800c146:	eba6 0807 	sub.w	r8, r6, r7
 800c14a:	608b      	str	r3, [r1, #8]
 800c14c:	f1b8 0f00 	cmp.w	r8, #0
 800c150:	dde9      	ble.n	800c126 <__sflush_r+0xae>
 800c152:	6a21      	ldr	r1, [r4, #32]
 800c154:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c156:	4643      	mov	r3, r8
 800c158:	463a      	mov	r2, r7
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b0      	blx	r6
 800c15e:	2800      	cmp	r0, #0
 800c160:	dc08      	bgt.n	800c174 <__sflush_r+0xfc>
 800c162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	4407      	add	r7, r0
 800c176:	eba8 0800 	sub.w	r8, r8, r0
 800c17a:	e7e7      	b.n	800c14c <__sflush_r+0xd4>
 800c17c:	dfbffffe 	.word	0xdfbffffe

0800c180 <_fflush_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	690b      	ldr	r3, [r1, #16]
 800c184:	4605      	mov	r5, r0
 800c186:	460c      	mov	r4, r1
 800c188:	b913      	cbnz	r3, 800c190 <_fflush_r+0x10>
 800c18a:	2500      	movs	r5, #0
 800c18c:	4628      	mov	r0, r5
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	b118      	cbz	r0, 800c19a <_fflush_r+0x1a>
 800c192:	6a03      	ldr	r3, [r0, #32]
 800c194:	b90b      	cbnz	r3, 800c19a <_fflush_r+0x1a>
 800c196:	f7fd f82f 	bl	80091f8 <__sinit>
 800c19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0f3      	beq.n	800c18a <_fflush_r+0xa>
 800c1a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1a4:	07d0      	lsls	r0, r2, #31
 800c1a6:	d404      	bmi.n	800c1b2 <_fflush_r+0x32>
 800c1a8:	0599      	lsls	r1, r3, #22
 800c1aa:	d402      	bmi.n	800c1b2 <_fflush_r+0x32>
 800c1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ae:	f7fd fa3e 	bl	800962e <__retarget_lock_acquire_recursive>
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	f7ff ff5f 	bl	800c078 <__sflush_r>
 800c1ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1bc:	07da      	lsls	r2, r3, #31
 800c1be:	4605      	mov	r5, r0
 800c1c0:	d4e4      	bmi.n	800c18c <_fflush_r+0xc>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	059b      	lsls	r3, r3, #22
 800c1c6:	d4e1      	bmi.n	800c18c <_fflush_r+0xc>
 800c1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ca:	f7fd fa31 	bl	8009630 <__retarget_lock_release_recursive>
 800c1ce:	e7dd      	b.n	800c18c <_fflush_r+0xc>

0800c1d0 <__swhatbuf_r>:
 800c1d0:	b570      	push	{r4, r5, r6, lr}
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d8:	2900      	cmp	r1, #0
 800c1da:	b096      	sub	sp, #88	@ 0x58
 800c1dc:	4615      	mov	r5, r2
 800c1de:	461e      	mov	r6, r3
 800c1e0:	da0d      	bge.n	800c1fe <__swhatbuf_r+0x2e>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1e8:	f04f 0100 	mov.w	r1, #0
 800c1ec:	bf14      	ite	ne
 800c1ee:	2340      	movne	r3, #64	@ 0x40
 800c1f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	6031      	str	r1, [r6, #0]
 800c1f8:	602b      	str	r3, [r5, #0]
 800c1fa:	b016      	add	sp, #88	@ 0x58
 800c1fc:	bd70      	pop	{r4, r5, r6, pc}
 800c1fe:	466a      	mov	r2, sp
 800c200:	f000 f874 	bl	800c2ec <_fstat_r>
 800c204:	2800      	cmp	r0, #0
 800c206:	dbec      	blt.n	800c1e2 <__swhatbuf_r+0x12>
 800c208:	9901      	ldr	r1, [sp, #4]
 800c20a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c20e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c212:	4259      	negs	r1, r3
 800c214:	4159      	adcs	r1, r3
 800c216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c21a:	e7eb      	b.n	800c1f4 <__swhatbuf_r+0x24>

0800c21c <__smakebuf_r>:
 800c21c:	898b      	ldrh	r3, [r1, #12]
 800c21e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c220:	079d      	lsls	r5, r3, #30
 800c222:	4606      	mov	r6, r0
 800c224:	460c      	mov	r4, r1
 800c226:	d507      	bpl.n	800c238 <__smakebuf_r+0x1c>
 800c228:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	6123      	str	r3, [r4, #16]
 800c230:	2301      	movs	r3, #1
 800c232:	6163      	str	r3, [r4, #20]
 800c234:	b003      	add	sp, #12
 800c236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c238:	ab01      	add	r3, sp, #4
 800c23a:	466a      	mov	r2, sp
 800c23c:	f7ff ffc8 	bl	800c1d0 <__swhatbuf_r>
 800c240:	9f00      	ldr	r7, [sp, #0]
 800c242:	4605      	mov	r5, r0
 800c244:	4639      	mov	r1, r7
 800c246:	4630      	mov	r0, r6
 800c248:	f7fe f8ba 	bl	800a3c0 <_malloc_r>
 800c24c:	b948      	cbnz	r0, 800c262 <__smakebuf_r+0x46>
 800c24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c252:	059a      	lsls	r2, r3, #22
 800c254:	d4ee      	bmi.n	800c234 <__smakebuf_r+0x18>
 800c256:	f023 0303 	bic.w	r3, r3, #3
 800c25a:	f043 0302 	orr.w	r3, r3, #2
 800c25e:	81a3      	strh	r3, [r4, #12]
 800c260:	e7e2      	b.n	800c228 <__smakebuf_r+0xc>
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	6020      	str	r0, [r4, #0]
 800c266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c26a:	81a3      	strh	r3, [r4, #12]
 800c26c:	9b01      	ldr	r3, [sp, #4]
 800c26e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c272:	b15b      	cbz	r3, 800c28c <__smakebuf_r+0x70>
 800c274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c278:	4630      	mov	r0, r6
 800c27a:	f000 f849 	bl	800c310 <_isatty_r>
 800c27e:	b128      	cbz	r0, 800c28c <__smakebuf_r+0x70>
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	f023 0303 	bic.w	r3, r3, #3
 800c286:	f043 0301 	orr.w	r3, r3, #1
 800c28a:	81a3      	strh	r3, [r4, #12]
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	431d      	orrs	r5, r3
 800c290:	81a5      	strh	r5, [r4, #12]
 800c292:	e7cf      	b.n	800c234 <__smakebuf_r+0x18>

0800c294 <memmove>:
 800c294:	4288      	cmp	r0, r1
 800c296:	b510      	push	{r4, lr}
 800c298:	eb01 0402 	add.w	r4, r1, r2
 800c29c:	d902      	bls.n	800c2a4 <memmove+0x10>
 800c29e:	4284      	cmp	r4, r0
 800c2a0:	4623      	mov	r3, r4
 800c2a2:	d807      	bhi.n	800c2b4 <memmove+0x20>
 800c2a4:	1e43      	subs	r3, r0, #1
 800c2a6:	42a1      	cmp	r1, r4
 800c2a8:	d008      	beq.n	800c2bc <memmove+0x28>
 800c2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2b2:	e7f8      	b.n	800c2a6 <memmove+0x12>
 800c2b4:	4402      	add	r2, r0
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	428a      	cmp	r2, r1
 800c2ba:	d100      	bne.n	800c2be <memmove+0x2a>
 800c2bc:	bd10      	pop	{r4, pc}
 800c2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2c6:	e7f7      	b.n	800c2b8 <memmove+0x24>

0800c2c8 <strncmp>:
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	b16a      	cbz	r2, 800c2e8 <strncmp+0x20>
 800c2cc:	3901      	subs	r1, #1
 800c2ce:	1884      	adds	r4, r0, r2
 800c2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d103      	bne.n	800c2e4 <strncmp+0x1c>
 800c2dc:	42a0      	cmp	r0, r4
 800c2de:	d001      	beq.n	800c2e4 <strncmp+0x1c>
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	d1f5      	bne.n	800c2d0 <strncmp+0x8>
 800c2e4:	1ad0      	subs	r0, r2, r3
 800c2e6:	bd10      	pop	{r4, pc}
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	e7fc      	b.n	800c2e6 <strncmp+0x1e>

0800c2ec <_fstat_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d07      	ldr	r5, [pc, #28]	@ (800c30c <_fstat_r+0x20>)
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	4608      	mov	r0, r1
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	602b      	str	r3, [r5, #0]
 800c2fa:	f7f7 f96f 	bl	80035dc <_fstat>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	d102      	bne.n	800c308 <_fstat_r+0x1c>
 800c302:	682b      	ldr	r3, [r5, #0]
 800c304:	b103      	cbz	r3, 800c308 <_fstat_r+0x1c>
 800c306:	6023      	str	r3, [r4, #0]
 800c308:	bd38      	pop	{r3, r4, r5, pc}
 800c30a:	bf00      	nop
 800c30c:	20000830 	.word	0x20000830

0800c310 <_isatty_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d06      	ldr	r5, [pc, #24]	@ (800c32c <_isatty_r+0x1c>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	602b      	str	r3, [r5, #0]
 800c31c:	f7f7 f96e 	bl	80035fc <_isatty>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_isatty_r+0x1a>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_isatty_r+0x1a>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	20000830 	.word	0x20000830

0800c330 <_sbrk_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d06      	ldr	r5, [pc, #24]	@ (800c34c <_sbrk_r+0x1c>)
 800c334:	2300      	movs	r3, #0
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	602b      	str	r3, [r5, #0]
 800c33c:	f7f7 f976 	bl	800362c <_sbrk>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_sbrk_r+0x1a>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_sbrk_r+0x1a>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	20000830 	.word	0x20000830

0800c350 <memcpy>:
 800c350:	440a      	add	r2, r1
 800c352:	4291      	cmp	r1, r2
 800c354:	f100 33ff 	add.w	r3, r0, #4294967295
 800c358:	d100      	bne.n	800c35c <memcpy+0xc>
 800c35a:	4770      	bx	lr
 800c35c:	b510      	push	{r4, lr}
 800c35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c362:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c366:	4291      	cmp	r1, r2
 800c368:	d1f9      	bne.n	800c35e <memcpy+0xe>
 800c36a:	bd10      	pop	{r4, pc}
 800c36c:	0000      	movs	r0, r0
	...

0800c370 <nan>:
 800c370:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c378 <nan+0x8>
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	00000000 	.word	0x00000000
 800c37c:	7ff80000 	.word	0x7ff80000

0800c380 <__assert_func>:
 800c380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c382:	4614      	mov	r4, r2
 800c384:	461a      	mov	r2, r3
 800c386:	4b09      	ldr	r3, [pc, #36]	@ (800c3ac <__assert_func+0x2c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4605      	mov	r5, r0
 800c38c:	68d8      	ldr	r0, [r3, #12]
 800c38e:	b954      	cbnz	r4, 800c3a6 <__assert_func+0x26>
 800c390:	4b07      	ldr	r3, [pc, #28]	@ (800c3b0 <__assert_func+0x30>)
 800c392:	461c      	mov	r4, r3
 800c394:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c398:	9100      	str	r1, [sp, #0]
 800c39a:	462b      	mov	r3, r5
 800c39c:	4905      	ldr	r1, [pc, #20]	@ (800c3b4 <__assert_func+0x34>)
 800c39e:	f000 fba7 	bl	800caf0 <fiprintf>
 800c3a2:	f000 fbb7 	bl	800cb14 <abort>
 800c3a6:	4b04      	ldr	r3, [pc, #16]	@ (800c3b8 <__assert_func+0x38>)
 800c3a8:	e7f4      	b.n	800c394 <__assert_func+0x14>
 800c3aa:	bf00      	nop
 800c3ac:	20000028 	.word	0x20000028
 800c3b0:	0800e81d 	.word	0x0800e81d
 800c3b4:	0800e7ef 	.word	0x0800e7ef
 800c3b8:	0800e7e2 	.word	0x0800e7e2

0800c3bc <_calloc_r>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	fba1 5402 	umull	r5, r4, r1, r2
 800c3c2:	b93c      	cbnz	r4, 800c3d4 <_calloc_r+0x18>
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	f7fd fffb 	bl	800a3c0 <_malloc_r>
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	b928      	cbnz	r0, 800c3da <_calloc_r+0x1e>
 800c3ce:	2600      	movs	r6, #0
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}
 800c3d4:	220c      	movs	r2, #12
 800c3d6:	6002      	str	r2, [r0, #0]
 800c3d8:	e7f9      	b.n	800c3ce <_calloc_r+0x12>
 800c3da:	462a      	mov	r2, r5
 800c3dc:	4621      	mov	r1, r4
 800c3de:	f7fd f8a9 	bl	8009534 <memset>
 800c3e2:	e7f5      	b.n	800c3d0 <_calloc_r+0x14>

0800c3e4 <rshift>:
 800c3e4:	6903      	ldr	r3, [r0, #16]
 800c3e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3f2:	f100 0414 	add.w	r4, r0, #20
 800c3f6:	dd45      	ble.n	800c484 <rshift+0xa0>
 800c3f8:	f011 011f 	ands.w	r1, r1, #31
 800c3fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c400:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c404:	d10c      	bne.n	800c420 <rshift+0x3c>
 800c406:	f100 0710 	add.w	r7, r0, #16
 800c40a:	4629      	mov	r1, r5
 800c40c:	42b1      	cmp	r1, r6
 800c40e:	d334      	bcc.n	800c47a <rshift+0x96>
 800c410:	1a9b      	subs	r3, r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	1eea      	subs	r2, r5, #3
 800c416:	4296      	cmp	r6, r2
 800c418:	bf38      	it	cc
 800c41a:	2300      	movcc	r3, #0
 800c41c:	4423      	add	r3, r4
 800c41e:	e015      	b.n	800c44c <rshift+0x68>
 800c420:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c424:	f1c1 0820 	rsb	r8, r1, #32
 800c428:	40cf      	lsrs	r7, r1
 800c42a:	f105 0e04 	add.w	lr, r5, #4
 800c42e:	46a1      	mov	r9, r4
 800c430:	4576      	cmp	r6, lr
 800c432:	46f4      	mov	ip, lr
 800c434:	d815      	bhi.n	800c462 <rshift+0x7e>
 800c436:	1a9a      	subs	r2, r3, r2
 800c438:	0092      	lsls	r2, r2, #2
 800c43a:	3a04      	subs	r2, #4
 800c43c:	3501      	adds	r5, #1
 800c43e:	42ae      	cmp	r6, r5
 800c440:	bf38      	it	cc
 800c442:	2200      	movcc	r2, #0
 800c444:	18a3      	adds	r3, r4, r2
 800c446:	50a7      	str	r7, [r4, r2]
 800c448:	b107      	cbz	r7, 800c44c <rshift+0x68>
 800c44a:	3304      	adds	r3, #4
 800c44c:	1b1a      	subs	r2, r3, r4
 800c44e:	42a3      	cmp	r3, r4
 800c450:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c454:	bf08      	it	eq
 800c456:	2300      	moveq	r3, #0
 800c458:	6102      	str	r2, [r0, #16]
 800c45a:	bf08      	it	eq
 800c45c:	6143      	streq	r3, [r0, #20]
 800c45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c462:	f8dc c000 	ldr.w	ip, [ip]
 800c466:	fa0c fc08 	lsl.w	ip, ip, r8
 800c46a:	ea4c 0707 	orr.w	r7, ip, r7
 800c46e:	f849 7b04 	str.w	r7, [r9], #4
 800c472:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c476:	40cf      	lsrs	r7, r1
 800c478:	e7da      	b.n	800c430 <rshift+0x4c>
 800c47a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c47e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c482:	e7c3      	b.n	800c40c <rshift+0x28>
 800c484:	4623      	mov	r3, r4
 800c486:	e7e1      	b.n	800c44c <rshift+0x68>

0800c488 <__hexdig_fun>:
 800c488:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c48c:	2b09      	cmp	r3, #9
 800c48e:	d802      	bhi.n	800c496 <__hexdig_fun+0xe>
 800c490:	3820      	subs	r0, #32
 800c492:	b2c0      	uxtb	r0, r0
 800c494:	4770      	bx	lr
 800c496:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c49a:	2b05      	cmp	r3, #5
 800c49c:	d801      	bhi.n	800c4a2 <__hexdig_fun+0x1a>
 800c49e:	3847      	subs	r0, #71	@ 0x47
 800c4a0:	e7f7      	b.n	800c492 <__hexdig_fun+0xa>
 800c4a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c4a6:	2b05      	cmp	r3, #5
 800c4a8:	d801      	bhi.n	800c4ae <__hexdig_fun+0x26>
 800c4aa:	3827      	subs	r0, #39	@ 0x27
 800c4ac:	e7f1      	b.n	800c492 <__hexdig_fun+0xa>
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <__gethex>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	468a      	mov	sl, r1
 800c4bc:	9302      	str	r3, [sp, #8]
 800c4be:	680b      	ldr	r3, [r1, #0]
 800c4c0:	9001      	str	r0, [sp, #4]
 800c4c2:	4690      	mov	r8, r2
 800c4c4:	1c9c      	adds	r4, r3, #2
 800c4c6:	46a1      	mov	r9, r4
 800c4c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c4cc:	2830      	cmp	r0, #48	@ 0x30
 800c4ce:	d0fa      	beq.n	800c4c6 <__gethex+0x12>
 800c4d0:	eba9 0303 	sub.w	r3, r9, r3
 800c4d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c4d8:	f7ff ffd6 	bl	800c488 <__hexdig_fun>
 800c4dc:	4605      	mov	r5, r0
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d168      	bne.n	800c5b4 <__gethex+0x100>
 800c4e2:	49a0      	ldr	r1, [pc, #640]	@ (800c764 <__gethex+0x2b0>)
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	4648      	mov	r0, r9
 800c4e8:	f7ff feee 	bl	800c2c8 <strncmp>
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d167      	bne.n	800c5c2 <__gethex+0x10e>
 800c4f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c4f6:	4626      	mov	r6, r4
 800c4f8:	f7ff ffc6 	bl	800c488 <__hexdig_fun>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d062      	beq.n	800c5c6 <__gethex+0x112>
 800c500:	4623      	mov	r3, r4
 800c502:	7818      	ldrb	r0, [r3, #0]
 800c504:	2830      	cmp	r0, #48	@ 0x30
 800c506:	4699      	mov	r9, r3
 800c508:	f103 0301 	add.w	r3, r3, #1
 800c50c:	d0f9      	beq.n	800c502 <__gethex+0x4e>
 800c50e:	f7ff ffbb 	bl	800c488 <__hexdig_fun>
 800c512:	fab0 f580 	clz	r5, r0
 800c516:	096d      	lsrs	r5, r5, #5
 800c518:	f04f 0b01 	mov.w	fp, #1
 800c51c:	464a      	mov	r2, r9
 800c51e:	4616      	mov	r6, r2
 800c520:	3201      	adds	r2, #1
 800c522:	7830      	ldrb	r0, [r6, #0]
 800c524:	f7ff ffb0 	bl	800c488 <__hexdig_fun>
 800c528:	2800      	cmp	r0, #0
 800c52a:	d1f8      	bne.n	800c51e <__gethex+0x6a>
 800c52c:	498d      	ldr	r1, [pc, #564]	@ (800c764 <__gethex+0x2b0>)
 800c52e:	2201      	movs	r2, #1
 800c530:	4630      	mov	r0, r6
 800c532:	f7ff fec9 	bl	800c2c8 <strncmp>
 800c536:	2800      	cmp	r0, #0
 800c538:	d13f      	bne.n	800c5ba <__gethex+0x106>
 800c53a:	b944      	cbnz	r4, 800c54e <__gethex+0x9a>
 800c53c:	1c74      	adds	r4, r6, #1
 800c53e:	4622      	mov	r2, r4
 800c540:	4616      	mov	r6, r2
 800c542:	3201      	adds	r2, #1
 800c544:	7830      	ldrb	r0, [r6, #0]
 800c546:	f7ff ff9f 	bl	800c488 <__hexdig_fun>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d1f8      	bne.n	800c540 <__gethex+0x8c>
 800c54e:	1ba4      	subs	r4, r4, r6
 800c550:	00a7      	lsls	r7, r4, #2
 800c552:	7833      	ldrb	r3, [r6, #0]
 800c554:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c558:	2b50      	cmp	r3, #80	@ 0x50
 800c55a:	d13e      	bne.n	800c5da <__gethex+0x126>
 800c55c:	7873      	ldrb	r3, [r6, #1]
 800c55e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c560:	d033      	beq.n	800c5ca <__gethex+0x116>
 800c562:	2b2d      	cmp	r3, #45	@ 0x2d
 800c564:	d034      	beq.n	800c5d0 <__gethex+0x11c>
 800c566:	1c71      	adds	r1, r6, #1
 800c568:	2400      	movs	r4, #0
 800c56a:	7808      	ldrb	r0, [r1, #0]
 800c56c:	f7ff ff8c 	bl	800c488 <__hexdig_fun>
 800c570:	1e43      	subs	r3, r0, #1
 800c572:	b2db      	uxtb	r3, r3
 800c574:	2b18      	cmp	r3, #24
 800c576:	d830      	bhi.n	800c5da <__gethex+0x126>
 800c578:	f1a0 0210 	sub.w	r2, r0, #16
 800c57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c580:	f7ff ff82 	bl	800c488 <__hexdig_fun>
 800c584:	f100 3cff 	add.w	ip, r0, #4294967295
 800c588:	fa5f fc8c 	uxtb.w	ip, ip
 800c58c:	f1bc 0f18 	cmp.w	ip, #24
 800c590:	f04f 030a 	mov.w	r3, #10
 800c594:	d91e      	bls.n	800c5d4 <__gethex+0x120>
 800c596:	b104      	cbz	r4, 800c59a <__gethex+0xe6>
 800c598:	4252      	negs	r2, r2
 800c59a:	4417      	add	r7, r2
 800c59c:	f8ca 1000 	str.w	r1, [sl]
 800c5a0:	b1ed      	cbz	r5, 800c5de <__gethex+0x12a>
 800c5a2:	f1bb 0f00 	cmp.w	fp, #0
 800c5a6:	bf0c      	ite	eq
 800c5a8:	2506      	moveq	r5, #6
 800c5aa:	2500      	movne	r5, #0
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	b005      	add	sp, #20
 800c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b4:	2500      	movs	r5, #0
 800c5b6:	462c      	mov	r4, r5
 800c5b8:	e7b0      	b.n	800c51c <__gethex+0x68>
 800c5ba:	2c00      	cmp	r4, #0
 800c5bc:	d1c7      	bne.n	800c54e <__gethex+0x9a>
 800c5be:	4627      	mov	r7, r4
 800c5c0:	e7c7      	b.n	800c552 <__gethex+0x9e>
 800c5c2:	464e      	mov	r6, r9
 800c5c4:	462f      	mov	r7, r5
 800c5c6:	2501      	movs	r5, #1
 800c5c8:	e7c3      	b.n	800c552 <__gethex+0x9e>
 800c5ca:	2400      	movs	r4, #0
 800c5cc:	1cb1      	adds	r1, r6, #2
 800c5ce:	e7cc      	b.n	800c56a <__gethex+0xb6>
 800c5d0:	2401      	movs	r4, #1
 800c5d2:	e7fb      	b.n	800c5cc <__gethex+0x118>
 800c5d4:	fb03 0002 	mla	r0, r3, r2, r0
 800c5d8:	e7ce      	b.n	800c578 <__gethex+0xc4>
 800c5da:	4631      	mov	r1, r6
 800c5dc:	e7de      	b.n	800c59c <__gethex+0xe8>
 800c5de:	eba6 0309 	sub.w	r3, r6, r9
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	2b07      	cmp	r3, #7
 800c5e8:	dc0a      	bgt.n	800c600 <__gethex+0x14c>
 800c5ea:	9801      	ldr	r0, [sp, #4]
 800c5ec:	f7fd ff74 	bl	800a4d8 <_Balloc>
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	b940      	cbnz	r0, 800c606 <__gethex+0x152>
 800c5f4:	4b5c      	ldr	r3, [pc, #368]	@ (800c768 <__gethex+0x2b4>)
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	21e4      	movs	r1, #228	@ 0xe4
 800c5fa:	485c      	ldr	r0, [pc, #368]	@ (800c76c <__gethex+0x2b8>)
 800c5fc:	f7ff fec0 	bl	800c380 <__assert_func>
 800c600:	3101      	adds	r1, #1
 800c602:	105b      	asrs	r3, r3, #1
 800c604:	e7ef      	b.n	800c5e6 <__gethex+0x132>
 800c606:	f100 0a14 	add.w	sl, r0, #20
 800c60a:	2300      	movs	r3, #0
 800c60c:	4655      	mov	r5, sl
 800c60e:	469b      	mov	fp, r3
 800c610:	45b1      	cmp	r9, r6
 800c612:	d337      	bcc.n	800c684 <__gethex+0x1d0>
 800c614:	f845 bb04 	str.w	fp, [r5], #4
 800c618:	eba5 050a 	sub.w	r5, r5, sl
 800c61c:	10ad      	asrs	r5, r5, #2
 800c61e:	6125      	str	r5, [r4, #16]
 800c620:	4658      	mov	r0, fp
 800c622:	f7fe f84b 	bl	800a6bc <__hi0bits>
 800c626:	016d      	lsls	r5, r5, #5
 800c628:	f8d8 6000 	ldr.w	r6, [r8]
 800c62c:	1a2d      	subs	r5, r5, r0
 800c62e:	42b5      	cmp	r5, r6
 800c630:	dd54      	ble.n	800c6dc <__gethex+0x228>
 800c632:	1bad      	subs	r5, r5, r6
 800c634:	4629      	mov	r1, r5
 800c636:	4620      	mov	r0, r4
 800c638:	f7fe fbdf 	bl	800adfa <__any_on>
 800c63c:	4681      	mov	r9, r0
 800c63e:	b178      	cbz	r0, 800c660 <__gethex+0x1ac>
 800c640:	1e6b      	subs	r3, r5, #1
 800c642:	1159      	asrs	r1, r3, #5
 800c644:	f003 021f 	and.w	r2, r3, #31
 800c648:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c64c:	f04f 0901 	mov.w	r9, #1
 800c650:	fa09 f202 	lsl.w	r2, r9, r2
 800c654:	420a      	tst	r2, r1
 800c656:	d003      	beq.n	800c660 <__gethex+0x1ac>
 800c658:	454b      	cmp	r3, r9
 800c65a:	dc36      	bgt.n	800c6ca <__gethex+0x216>
 800c65c:	f04f 0902 	mov.w	r9, #2
 800c660:	4629      	mov	r1, r5
 800c662:	4620      	mov	r0, r4
 800c664:	f7ff febe 	bl	800c3e4 <rshift>
 800c668:	442f      	add	r7, r5
 800c66a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c66e:	42bb      	cmp	r3, r7
 800c670:	da42      	bge.n	800c6f8 <__gethex+0x244>
 800c672:	9801      	ldr	r0, [sp, #4]
 800c674:	4621      	mov	r1, r4
 800c676:	f7fd ff6f 	bl	800a558 <_Bfree>
 800c67a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c67c:	2300      	movs	r3, #0
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	25a3      	movs	r5, #163	@ 0xa3
 800c682:	e793      	b.n	800c5ac <__gethex+0xf8>
 800c684:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c688:	2a2e      	cmp	r2, #46	@ 0x2e
 800c68a:	d012      	beq.n	800c6b2 <__gethex+0x1fe>
 800c68c:	2b20      	cmp	r3, #32
 800c68e:	d104      	bne.n	800c69a <__gethex+0x1e6>
 800c690:	f845 bb04 	str.w	fp, [r5], #4
 800c694:	f04f 0b00 	mov.w	fp, #0
 800c698:	465b      	mov	r3, fp
 800c69a:	7830      	ldrb	r0, [r6, #0]
 800c69c:	9303      	str	r3, [sp, #12]
 800c69e:	f7ff fef3 	bl	800c488 <__hexdig_fun>
 800c6a2:	9b03      	ldr	r3, [sp, #12]
 800c6a4:	f000 000f 	and.w	r0, r0, #15
 800c6a8:	4098      	lsls	r0, r3
 800c6aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	e7ae      	b.n	800c610 <__gethex+0x15c>
 800c6b2:	45b1      	cmp	r9, r6
 800c6b4:	d8ea      	bhi.n	800c68c <__gethex+0x1d8>
 800c6b6:	492b      	ldr	r1, [pc, #172]	@ (800c764 <__gethex+0x2b0>)
 800c6b8:	9303      	str	r3, [sp, #12]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7ff fe03 	bl	800c2c8 <strncmp>
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d1e1      	bne.n	800c68c <__gethex+0x1d8>
 800c6c8:	e7a2      	b.n	800c610 <__gethex+0x15c>
 800c6ca:	1ea9      	subs	r1, r5, #2
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f7fe fb94 	bl	800adfa <__any_on>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d0c2      	beq.n	800c65c <__gethex+0x1a8>
 800c6d6:	f04f 0903 	mov.w	r9, #3
 800c6da:	e7c1      	b.n	800c660 <__gethex+0x1ac>
 800c6dc:	da09      	bge.n	800c6f2 <__gethex+0x23e>
 800c6de:	1b75      	subs	r5, r6, r5
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	9801      	ldr	r0, [sp, #4]
 800c6e4:	462a      	mov	r2, r5
 800c6e6:	f7fe f94f 	bl	800a988 <__lshift>
 800c6ea:	1b7f      	subs	r7, r7, r5
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	f100 0a14 	add.w	sl, r0, #20
 800c6f2:	f04f 0900 	mov.w	r9, #0
 800c6f6:	e7b8      	b.n	800c66a <__gethex+0x1b6>
 800c6f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c6fc:	42bd      	cmp	r5, r7
 800c6fe:	dd6f      	ble.n	800c7e0 <__gethex+0x32c>
 800c700:	1bed      	subs	r5, r5, r7
 800c702:	42ae      	cmp	r6, r5
 800c704:	dc34      	bgt.n	800c770 <__gethex+0x2bc>
 800c706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d022      	beq.n	800c754 <__gethex+0x2a0>
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d024      	beq.n	800c75c <__gethex+0x2a8>
 800c712:	2b01      	cmp	r3, #1
 800c714:	d115      	bne.n	800c742 <__gethex+0x28e>
 800c716:	42ae      	cmp	r6, r5
 800c718:	d113      	bne.n	800c742 <__gethex+0x28e>
 800c71a:	2e01      	cmp	r6, #1
 800c71c:	d10b      	bne.n	800c736 <__gethex+0x282>
 800c71e:	9a02      	ldr	r2, [sp, #8]
 800c720:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c724:	6013      	str	r3, [r2, #0]
 800c726:	2301      	movs	r3, #1
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	f8ca 3000 	str.w	r3, [sl]
 800c72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c730:	2562      	movs	r5, #98	@ 0x62
 800c732:	601c      	str	r4, [r3, #0]
 800c734:	e73a      	b.n	800c5ac <__gethex+0xf8>
 800c736:	1e71      	subs	r1, r6, #1
 800c738:	4620      	mov	r0, r4
 800c73a:	f7fe fb5e 	bl	800adfa <__any_on>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d1ed      	bne.n	800c71e <__gethex+0x26a>
 800c742:	9801      	ldr	r0, [sp, #4]
 800c744:	4621      	mov	r1, r4
 800c746:	f7fd ff07 	bl	800a558 <_Bfree>
 800c74a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c74c:	2300      	movs	r3, #0
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	2550      	movs	r5, #80	@ 0x50
 800c752:	e72b      	b.n	800c5ac <__gethex+0xf8>
 800c754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1f3      	bne.n	800c742 <__gethex+0x28e>
 800c75a:	e7e0      	b.n	800c71e <__gethex+0x26a>
 800c75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1dd      	bne.n	800c71e <__gethex+0x26a>
 800c762:	e7ee      	b.n	800c742 <__gethex+0x28e>
 800c764:	0800e670 	.word	0x0800e670
 800c768:	0800e505 	.word	0x0800e505
 800c76c:	0800e81e 	.word	0x0800e81e
 800c770:	1e6f      	subs	r7, r5, #1
 800c772:	f1b9 0f00 	cmp.w	r9, #0
 800c776:	d130      	bne.n	800c7da <__gethex+0x326>
 800c778:	b127      	cbz	r7, 800c784 <__gethex+0x2d0>
 800c77a:	4639      	mov	r1, r7
 800c77c:	4620      	mov	r0, r4
 800c77e:	f7fe fb3c 	bl	800adfa <__any_on>
 800c782:	4681      	mov	r9, r0
 800c784:	117a      	asrs	r2, r7, #5
 800c786:	2301      	movs	r3, #1
 800c788:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c78c:	f007 071f 	and.w	r7, r7, #31
 800c790:	40bb      	lsls	r3, r7
 800c792:	4213      	tst	r3, r2
 800c794:	4629      	mov	r1, r5
 800c796:	4620      	mov	r0, r4
 800c798:	bf18      	it	ne
 800c79a:	f049 0902 	orrne.w	r9, r9, #2
 800c79e:	f7ff fe21 	bl	800c3e4 <rshift>
 800c7a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c7a6:	1b76      	subs	r6, r6, r5
 800c7a8:	2502      	movs	r5, #2
 800c7aa:	f1b9 0f00 	cmp.w	r9, #0
 800c7ae:	d047      	beq.n	800c840 <__gethex+0x38c>
 800c7b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d015      	beq.n	800c7e4 <__gethex+0x330>
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d017      	beq.n	800c7ec <__gethex+0x338>
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d109      	bne.n	800c7d4 <__gethex+0x320>
 800c7c0:	f019 0f02 	tst.w	r9, #2
 800c7c4:	d006      	beq.n	800c7d4 <__gethex+0x320>
 800c7c6:	f8da 3000 	ldr.w	r3, [sl]
 800c7ca:	ea49 0903 	orr.w	r9, r9, r3
 800c7ce:	f019 0f01 	tst.w	r9, #1
 800c7d2:	d10e      	bne.n	800c7f2 <__gethex+0x33e>
 800c7d4:	f045 0510 	orr.w	r5, r5, #16
 800c7d8:	e032      	b.n	800c840 <__gethex+0x38c>
 800c7da:	f04f 0901 	mov.w	r9, #1
 800c7de:	e7d1      	b.n	800c784 <__gethex+0x2d0>
 800c7e0:	2501      	movs	r5, #1
 800c7e2:	e7e2      	b.n	800c7aa <__gethex+0x2f6>
 800c7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e6:	f1c3 0301 	rsb	r3, r3, #1
 800c7ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0f0      	beq.n	800c7d4 <__gethex+0x320>
 800c7f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7f6:	f104 0314 	add.w	r3, r4, #20
 800c7fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c7fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c802:	f04f 0c00 	mov.w	ip, #0
 800c806:	4618      	mov	r0, r3
 800c808:	f853 2b04 	ldr.w	r2, [r3], #4
 800c80c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c810:	d01b      	beq.n	800c84a <__gethex+0x396>
 800c812:	3201      	adds	r2, #1
 800c814:	6002      	str	r2, [r0, #0]
 800c816:	2d02      	cmp	r5, #2
 800c818:	f104 0314 	add.w	r3, r4, #20
 800c81c:	d13c      	bne.n	800c898 <__gethex+0x3e4>
 800c81e:	f8d8 2000 	ldr.w	r2, [r8]
 800c822:	3a01      	subs	r2, #1
 800c824:	42b2      	cmp	r2, r6
 800c826:	d109      	bne.n	800c83c <__gethex+0x388>
 800c828:	1171      	asrs	r1, r6, #5
 800c82a:	2201      	movs	r2, #1
 800c82c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c830:	f006 061f 	and.w	r6, r6, #31
 800c834:	fa02 f606 	lsl.w	r6, r2, r6
 800c838:	421e      	tst	r6, r3
 800c83a:	d13a      	bne.n	800c8b2 <__gethex+0x3fe>
 800c83c:	f045 0520 	orr.w	r5, r5, #32
 800c840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c842:	601c      	str	r4, [r3, #0]
 800c844:	9b02      	ldr	r3, [sp, #8]
 800c846:	601f      	str	r7, [r3, #0]
 800c848:	e6b0      	b.n	800c5ac <__gethex+0xf8>
 800c84a:	4299      	cmp	r1, r3
 800c84c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c850:	d8d9      	bhi.n	800c806 <__gethex+0x352>
 800c852:	68a3      	ldr	r3, [r4, #8]
 800c854:	459b      	cmp	fp, r3
 800c856:	db17      	blt.n	800c888 <__gethex+0x3d4>
 800c858:	6861      	ldr	r1, [r4, #4]
 800c85a:	9801      	ldr	r0, [sp, #4]
 800c85c:	3101      	adds	r1, #1
 800c85e:	f7fd fe3b 	bl	800a4d8 <_Balloc>
 800c862:	4681      	mov	r9, r0
 800c864:	b918      	cbnz	r0, 800c86e <__gethex+0x3ba>
 800c866:	4b1a      	ldr	r3, [pc, #104]	@ (800c8d0 <__gethex+0x41c>)
 800c868:	4602      	mov	r2, r0
 800c86a:	2184      	movs	r1, #132	@ 0x84
 800c86c:	e6c5      	b.n	800c5fa <__gethex+0x146>
 800c86e:	6922      	ldr	r2, [r4, #16]
 800c870:	3202      	adds	r2, #2
 800c872:	f104 010c 	add.w	r1, r4, #12
 800c876:	0092      	lsls	r2, r2, #2
 800c878:	300c      	adds	r0, #12
 800c87a:	f7ff fd69 	bl	800c350 <memcpy>
 800c87e:	4621      	mov	r1, r4
 800c880:	9801      	ldr	r0, [sp, #4]
 800c882:	f7fd fe69 	bl	800a558 <_Bfree>
 800c886:	464c      	mov	r4, r9
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c890:	6122      	str	r2, [r4, #16]
 800c892:	2201      	movs	r2, #1
 800c894:	615a      	str	r2, [r3, #20]
 800c896:	e7be      	b.n	800c816 <__gethex+0x362>
 800c898:	6922      	ldr	r2, [r4, #16]
 800c89a:	455a      	cmp	r2, fp
 800c89c:	dd0b      	ble.n	800c8b6 <__gethex+0x402>
 800c89e:	2101      	movs	r1, #1
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f7ff fd9f 	bl	800c3e4 <rshift>
 800c8a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8aa:	3701      	adds	r7, #1
 800c8ac:	42bb      	cmp	r3, r7
 800c8ae:	f6ff aee0 	blt.w	800c672 <__gethex+0x1be>
 800c8b2:	2501      	movs	r5, #1
 800c8b4:	e7c2      	b.n	800c83c <__gethex+0x388>
 800c8b6:	f016 061f 	ands.w	r6, r6, #31
 800c8ba:	d0fa      	beq.n	800c8b2 <__gethex+0x3fe>
 800c8bc:	4453      	add	r3, sl
 800c8be:	f1c6 0620 	rsb	r6, r6, #32
 800c8c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c8c6:	f7fd fef9 	bl	800a6bc <__hi0bits>
 800c8ca:	42b0      	cmp	r0, r6
 800c8cc:	dbe7      	blt.n	800c89e <__gethex+0x3ea>
 800c8ce:	e7f0      	b.n	800c8b2 <__gethex+0x3fe>
 800c8d0:	0800e505 	.word	0x0800e505

0800c8d4 <L_shift>:
 800c8d4:	f1c2 0208 	rsb	r2, r2, #8
 800c8d8:	0092      	lsls	r2, r2, #2
 800c8da:	b570      	push	{r4, r5, r6, lr}
 800c8dc:	f1c2 0620 	rsb	r6, r2, #32
 800c8e0:	6843      	ldr	r3, [r0, #4]
 800c8e2:	6804      	ldr	r4, [r0, #0]
 800c8e4:	fa03 f506 	lsl.w	r5, r3, r6
 800c8e8:	432c      	orrs	r4, r5
 800c8ea:	40d3      	lsrs	r3, r2
 800c8ec:	6004      	str	r4, [r0, #0]
 800c8ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8f2:	4288      	cmp	r0, r1
 800c8f4:	d3f4      	bcc.n	800c8e0 <L_shift+0xc>
 800c8f6:	bd70      	pop	{r4, r5, r6, pc}

0800c8f8 <__match>:
 800c8f8:	b530      	push	{r4, r5, lr}
 800c8fa:	6803      	ldr	r3, [r0, #0]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c902:	b914      	cbnz	r4, 800c90a <__match+0x12>
 800c904:	6003      	str	r3, [r0, #0]
 800c906:	2001      	movs	r0, #1
 800c908:	bd30      	pop	{r4, r5, pc}
 800c90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c90e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c912:	2d19      	cmp	r5, #25
 800c914:	bf98      	it	ls
 800c916:	3220      	addls	r2, #32
 800c918:	42a2      	cmp	r2, r4
 800c91a:	d0f0      	beq.n	800c8fe <__match+0x6>
 800c91c:	2000      	movs	r0, #0
 800c91e:	e7f3      	b.n	800c908 <__match+0x10>

0800c920 <__hexnan>:
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	680b      	ldr	r3, [r1, #0]
 800c926:	6801      	ldr	r1, [r0, #0]
 800c928:	115e      	asrs	r6, r3, #5
 800c92a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c92e:	f013 031f 	ands.w	r3, r3, #31
 800c932:	b087      	sub	sp, #28
 800c934:	bf18      	it	ne
 800c936:	3604      	addne	r6, #4
 800c938:	2500      	movs	r5, #0
 800c93a:	1f37      	subs	r7, r6, #4
 800c93c:	4682      	mov	sl, r0
 800c93e:	4690      	mov	r8, r2
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	f846 5c04 	str.w	r5, [r6, #-4]
 800c946:	46b9      	mov	r9, r7
 800c948:	463c      	mov	r4, r7
 800c94a:	9502      	str	r5, [sp, #8]
 800c94c:	46ab      	mov	fp, r5
 800c94e:	784a      	ldrb	r2, [r1, #1]
 800c950:	1c4b      	adds	r3, r1, #1
 800c952:	9303      	str	r3, [sp, #12]
 800c954:	b342      	cbz	r2, 800c9a8 <__hexnan+0x88>
 800c956:	4610      	mov	r0, r2
 800c958:	9105      	str	r1, [sp, #20]
 800c95a:	9204      	str	r2, [sp, #16]
 800c95c:	f7ff fd94 	bl	800c488 <__hexdig_fun>
 800c960:	2800      	cmp	r0, #0
 800c962:	d151      	bne.n	800ca08 <__hexnan+0xe8>
 800c964:	9a04      	ldr	r2, [sp, #16]
 800c966:	9905      	ldr	r1, [sp, #20]
 800c968:	2a20      	cmp	r2, #32
 800c96a:	d818      	bhi.n	800c99e <__hexnan+0x7e>
 800c96c:	9b02      	ldr	r3, [sp, #8]
 800c96e:	459b      	cmp	fp, r3
 800c970:	dd13      	ble.n	800c99a <__hexnan+0x7a>
 800c972:	454c      	cmp	r4, r9
 800c974:	d206      	bcs.n	800c984 <__hexnan+0x64>
 800c976:	2d07      	cmp	r5, #7
 800c978:	dc04      	bgt.n	800c984 <__hexnan+0x64>
 800c97a:	462a      	mov	r2, r5
 800c97c:	4649      	mov	r1, r9
 800c97e:	4620      	mov	r0, r4
 800c980:	f7ff ffa8 	bl	800c8d4 <L_shift>
 800c984:	4544      	cmp	r4, r8
 800c986:	d952      	bls.n	800ca2e <__hexnan+0x10e>
 800c988:	2300      	movs	r3, #0
 800c98a:	f1a4 0904 	sub.w	r9, r4, #4
 800c98e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c992:	f8cd b008 	str.w	fp, [sp, #8]
 800c996:	464c      	mov	r4, r9
 800c998:	461d      	mov	r5, r3
 800c99a:	9903      	ldr	r1, [sp, #12]
 800c99c:	e7d7      	b.n	800c94e <__hexnan+0x2e>
 800c99e:	2a29      	cmp	r2, #41	@ 0x29
 800c9a0:	d157      	bne.n	800ca52 <__hexnan+0x132>
 800c9a2:	3102      	adds	r1, #2
 800c9a4:	f8ca 1000 	str.w	r1, [sl]
 800c9a8:	f1bb 0f00 	cmp.w	fp, #0
 800c9ac:	d051      	beq.n	800ca52 <__hexnan+0x132>
 800c9ae:	454c      	cmp	r4, r9
 800c9b0:	d206      	bcs.n	800c9c0 <__hexnan+0xa0>
 800c9b2:	2d07      	cmp	r5, #7
 800c9b4:	dc04      	bgt.n	800c9c0 <__hexnan+0xa0>
 800c9b6:	462a      	mov	r2, r5
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f7ff ff8a 	bl	800c8d4 <L_shift>
 800c9c0:	4544      	cmp	r4, r8
 800c9c2:	d936      	bls.n	800ca32 <__hexnan+0x112>
 800c9c4:	f1a8 0204 	sub.w	r2, r8, #4
 800c9c8:	4623      	mov	r3, r4
 800c9ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9d2:	429f      	cmp	r7, r3
 800c9d4:	d2f9      	bcs.n	800c9ca <__hexnan+0xaa>
 800c9d6:	1b3b      	subs	r3, r7, r4
 800c9d8:	f023 0303 	bic.w	r3, r3, #3
 800c9dc:	3304      	adds	r3, #4
 800c9de:	3401      	adds	r4, #1
 800c9e0:	3e03      	subs	r6, #3
 800c9e2:	42b4      	cmp	r4, r6
 800c9e4:	bf88      	it	hi
 800c9e6:	2304      	movhi	r3, #4
 800c9e8:	4443      	add	r3, r8
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f843 2b04 	str.w	r2, [r3], #4
 800c9f0:	429f      	cmp	r7, r3
 800c9f2:	d2fb      	bcs.n	800c9ec <__hexnan+0xcc>
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	b91b      	cbnz	r3, 800ca00 <__hexnan+0xe0>
 800c9f8:	4547      	cmp	r7, r8
 800c9fa:	d128      	bne.n	800ca4e <__hexnan+0x12e>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	603b      	str	r3, [r7, #0]
 800ca00:	2005      	movs	r0, #5
 800ca02:	b007      	add	sp, #28
 800ca04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca08:	3501      	adds	r5, #1
 800ca0a:	2d08      	cmp	r5, #8
 800ca0c:	f10b 0b01 	add.w	fp, fp, #1
 800ca10:	dd06      	ble.n	800ca20 <__hexnan+0x100>
 800ca12:	4544      	cmp	r4, r8
 800ca14:	d9c1      	bls.n	800c99a <__hexnan+0x7a>
 800ca16:	2300      	movs	r3, #0
 800ca18:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca1c:	2501      	movs	r5, #1
 800ca1e:	3c04      	subs	r4, #4
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	f000 000f 	and.w	r0, r0, #15
 800ca26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca2a:	6020      	str	r0, [r4, #0]
 800ca2c:	e7b5      	b.n	800c99a <__hexnan+0x7a>
 800ca2e:	2508      	movs	r5, #8
 800ca30:	e7b3      	b.n	800c99a <__hexnan+0x7a>
 800ca32:	9b01      	ldr	r3, [sp, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d0dd      	beq.n	800c9f4 <__hexnan+0xd4>
 800ca38:	f1c3 0320 	rsb	r3, r3, #32
 800ca3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca40:	40da      	lsrs	r2, r3
 800ca42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca46:	4013      	ands	r3, r2
 800ca48:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca4c:	e7d2      	b.n	800c9f4 <__hexnan+0xd4>
 800ca4e:	3f04      	subs	r7, #4
 800ca50:	e7d0      	b.n	800c9f4 <__hexnan+0xd4>
 800ca52:	2004      	movs	r0, #4
 800ca54:	e7d5      	b.n	800ca02 <__hexnan+0xe2>

0800ca56 <__ascii_mbtowc>:
 800ca56:	b082      	sub	sp, #8
 800ca58:	b901      	cbnz	r1, 800ca5c <__ascii_mbtowc+0x6>
 800ca5a:	a901      	add	r1, sp, #4
 800ca5c:	b142      	cbz	r2, 800ca70 <__ascii_mbtowc+0x1a>
 800ca5e:	b14b      	cbz	r3, 800ca74 <__ascii_mbtowc+0x1e>
 800ca60:	7813      	ldrb	r3, [r2, #0]
 800ca62:	600b      	str	r3, [r1, #0]
 800ca64:	7812      	ldrb	r2, [r2, #0]
 800ca66:	1e10      	subs	r0, r2, #0
 800ca68:	bf18      	it	ne
 800ca6a:	2001      	movne	r0, #1
 800ca6c:	b002      	add	sp, #8
 800ca6e:	4770      	bx	lr
 800ca70:	4610      	mov	r0, r2
 800ca72:	e7fb      	b.n	800ca6c <__ascii_mbtowc+0x16>
 800ca74:	f06f 0001 	mvn.w	r0, #1
 800ca78:	e7f8      	b.n	800ca6c <__ascii_mbtowc+0x16>

0800ca7a <_realloc_r>:
 800ca7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7e:	4680      	mov	r8, r0
 800ca80:	4615      	mov	r5, r2
 800ca82:	460c      	mov	r4, r1
 800ca84:	b921      	cbnz	r1, 800ca90 <_realloc_r+0x16>
 800ca86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	f7fd bc98 	b.w	800a3c0 <_malloc_r>
 800ca90:	b92a      	cbnz	r2, 800ca9e <_realloc_r+0x24>
 800ca92:	f7fd fc21 	bl	800a2d8 <_free_r>
 800ca96:	2400      	movs	r4, #0
 800ca98:	4620      	mov	r0, r4
 800ca9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9e:	f000 f840 	bl	800cb22 <_malloc_usable_size_r>
 800caa2:	4285      	cmp	r5, r0
 800caa4:	4606      	mov	r6, r0
 800caa6:	d802      	bhi.n	800caae <_realloc_r+0x34>
 800caa8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800caac:	d8f4      	bhi.n	800ca98 <_realloc_r+0x1e>
 800caae:	4629      	mov	r1, r5
 800cab0:	4640      	mov	r0, r8
 800cab2:	f7fd fc85 	bl	800a3c0 <_malloc_r>
 800cab6:	4607      	mov	r7, r0
 800cab8:	2800      	cmp	r0, #0
 800caba:	d0ec      	beq.n	800ca96 <_realloc_r+0x1c>
 800cabc:	42b5      	cmp	r5, r6
 800cabe:	462a      	mov	r2, r5
 800cac0:	4621      	mov	r1, r4
 800cac2:	bf28      	it	cs
 800cac4:	4632      	movcs	r2, r6
 800cac6:	f7ff fc43 	bl	800c350 <memcpy>
 800caca:	4621      	mov	r1, r4
 800cacc:	4640      	mov	r0, r8
 800cace:	f7fd fc03 	bl	800a2d8 <_free_r>
 800cad2:	463c      	mov	r4, r7
 800cad4:	e7e0      	b.n	800ca98 <_realloc_r+0x1e>

0800cad6 <__ascii_wctomb>:
 800cad6:	4603      	mov	r3, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	b141      	cbz	r1, 800caee <__ascii_wctomb+0x18>
 800cadc:	2aff      	cmp	r2, #255	@ 0xff
 800cade:	d904      	bls.n	800caea <__ascii_wctomb+0x14>
 800cae0:	228a      	movs	r2, #138	@ 0x8a
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295
 800cae8:	4770      	bx	lr
 800caea:	700a      	strb	r2, [r1, #0]
 800caec:	2001      	movs	r0, #1
 800caee:	4770      	bx	lr

0800caf0 <fiprintf>:
 800caf0:	b40e      	push	{r1, r2, r3}
 800caf2:	b503      	push	{r0, r1, lr}
 800caf4:	4601      	mov	r1, r0
 800caf6:	ab03      	add	r3, sp, #12
 800caf8:	4805      	ldr	r0, [pc, #20]	@ (800cb10 <fiprintf+0x20>)
 800cafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cafe:	6800      	ldr	r0, [r0, #0]
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	f7ff f9a1 	bl	800be48 <_vfiprintf_r>
 800cb06:	b002      	add	sp, #8
 800cb08:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb0c:	b003      	add	sp, #12
 800cb0e:	4770      	bx	lr
 800cb10:	20000028 	.word	0x20000028

0800cb14 <abort>:
 800cb14:	b508      	push	{r3, lr}
 800cb16:	2006      	movs	r0, #6
 800cb18:	f000 f834 	bl	800cb84 <raise>
 800cb1c:	2001      	movs	r0, #1
 800cb1e:	f7f6 fd29 	bl	8003574 <_exit>

0800cb22 <_malloc_usable_size_r>:
 800cb22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb26:	1f18      	subs	r0, r3, #4
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	bfbc      	itt	lt
 800cb2c:	580b      	ldrlt	r3, [r1, r0]
 800cb2e:	18c0      	addlt	r0, r0, r3
 800cb30:	4770      	bx	lr

0800cb32 <_raise_r>:
 800cb32:	291f      	cmp	r1, #31
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4605      	mov	r5, r0
 800cb38:	460c      	mov	r4, r1
 800cb3a:	d904      	bls.n	800cb46 <_raise_r+0x14>
 800cb3c:	2316      	movs	r3, #22
 800cb3e:	6003      	str	r3, [r0, #0]
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	bd38      	pop	{r3, r4, r5, pc}
 800cb46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb48:	b112      	cbz	r2, 800cb50 <_raise_r+0x1e>
 800cb4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb4e:	b94b      	cbnz	r3, 800cb64 <_raise_r+0x32>
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 f831 	bl	800cbb8 <_getpid_r>
 800cb56:	4622      	mov	r2, r4
 800cb58:	4601      	mov	r1, r0
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb60:	f000 b818 	b.w	800cb94 <_kill_r>
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d00a      	beq.n	800cb7e <_raise_r+0x4c>
 800cb68:	1c59      	adds	r1, r3, #1
 800cb6a:	d103      	bne.n	800cb74 <_raise_r+0x42>
 800cb6c:	2316      	movs	r3, #22
 800cb6e:	6003      	str	r3, [r0, #0]
 800cb70:	2001      	movs	r0, #1
 800cb72:	e7e7      	b.n	800cb44 <_raise_r+0x12>
 800cb74:	2100      	movs	r1, #0
 800cb76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4798      	blx	r3
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e7e0      	b.n	800cb44 <_raise_r+0x12>
	...

0800cb84 <raise>:
 800cb84:	4b02      	ldr	r3, [pc, #8]	@ (800cb90 <raise+0xc>)
 800cb86:	4601      	mov	r1, r0
 800cb88:	6818      	ldr	r0, [r3, #0]
 800cb8a:	f7ff bfd2 	b.w	800cb32 <_raise_r>
 800cb8e:	bf00      	nop
 800cb90:	20000028 	.word	0x20000028

0800cb94 <_kill_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d07      	ldr	r5, [pc, #28]	@ (800cbb4 <_kill_r+0x20>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	4611      	mov	r1, r2
 800cba0:	602b      	str	r3, [r5, #0]
 800cba2:	f7f6 fcd7 	bl	8003554 <_kill>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d102      	bne.n	800cbb0 <_kill_r+0x1c>
 800cbaa:	682b      	ldr	r3, [r5, #0]
 800cbac:	b103      	cbz	r3, 800cbb0 <_kill_r+0x1c>
 800cbae:	6023      	str	r3, [r4, #0]
 800cbb0:	bd38      	pop	{r3, r4, r5, pc}
 800cbb2:	bf00      	nop
 800cbb4:	20000830 	.word	0x20000830

0800cbb8 <_getpid_r>:
 800cbb8:	f7f6 bcc4 	b.w	8003544 <_getpid>

0800cbbc <atan2>:
 800cbbc:	f000 bb34 	b.w	800d228 <__ieee754_atan2>

0800cbc0 <sqrt>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	ed2d 8b02 	vpush	{d8}
 800cbc6:	ec55 4b10 	vmov	r4, r5, d0
 800cbca:	f000 f8cd 	bl	800cd68 <__ieee754_sqrt>
 800cbce:	4622      	mov	r2, r4
 800cbd0:	462b      	mov	r3, r5
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	eeb0 8a40 	vmov.f32	s16, s0
 800cbda:	eef0 8a60 	vmov.f32	s17, s1
 800cbde:	f7f3 ffc5 	bl	8000b6c <__aeabi_dcmpun>
 800cbe2:	b990      	cbnz	r0, 800cc0a <sqrt+0x4a>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	4620      	mov	r0, r4
 800cbea:	4629      	mov	r1, r5
 800cbec:	f7f3 ff96 	bl	8000b1c <__aeabi_dcmplt>
 800cbf0:	b158      	cbz	r0, 800cc0a <sqrt+0x4a>
 800cbf2:	f7fc fcf1 	bl	80095d8 <__errno>
 800cbf6:	2321      	movs	r3, #33	@ 0x21
 800cbf8:	6003      	str	r3, [r0, #0]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4610      	mov	r0, r2
 800cc00:	4619      	mov	r1, r3
 800cc02:	f7f3 fe43 	bl	800088c <__aeabi_ddiv>
 800cc06:	ec41 0b18 	vmov	d8, r0, r1
 800cc0a:	eeb0 0a48 	vmov.f32	s0, s16
 800cc0e:	eef0 0a68 	vmov.f32	s1, s17
 800cc12:	ecbd 8b02 	vpop	{d8}
 800cc16:	bd38      	pop	{r3, r4, r5, pc}

0800cc18 <cos>:
 800cc18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc1a:	ec53 2b10 	vmov	r2, r3, d0
 800cc1e:	4826      	ldr	r0, [pc, #152]	@ (800ccb8 <cos+0xa0>)
 800cc20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc24:	4281      	cmp	r1, r0
 800cc26:	d806      	bhi.n	800cc36 <cos+0x1e>
 800cc28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ccb0 <cos+0x98>
 800cc2c:	b005      	add	sp, #20
 800cc2e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc32:	f000 b975 	b.w	800cf20 <__kernel_cos>
 800cc36:	4821      	ldr	r0, [pc, #132]	@ (800ccbc <cos+0xa4>)
 800cc38:	4281      	cmp	r1, r0
 800cc3a:	d908      	bls.n	800cc4e <cos+0x36>
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	4619      	mov	r1, r3
 800cc40:	f7f3 fb42 	bl	80002c8 <__aeabi_dsub>
 800cc44:	ec41 0b10 	vmov	d0, r0, r1
 800cc48:	b005      	add	sp, #20
 800cc4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc4e:	4668      	mov	r0, sp
 800cc50:	f000 fbb2 	bl	800d3b8 <__ieee754_rem_pio2>
 800cc54:	f000 0003 	and.w	r0, r0, #3
 800cc58:	2801      	cmp	r0, #1
 800cc5a:	d00b      	beq.n	800cc74 <cos+0x5c>
 800cc5c:	2802      	cmp	r0, #2
 800cc5e:	d015      	beq.n	800cc8c <cos+0x74>
 800cc60:	b9d8      	cbnz	r0, 800cc9a <cos+0x82>
 800cc62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc66:	ed9d 0b00 	vldr	d0, [sp]
 800cc6a:	f000 f959 	bl	800cf20 <__kernel_cos>
 800cc6e:	ec51 0b10 	vmov	r0, r1, d0
 800cc72:	e7e7      	b.n	800cc44 <cos+0x2c>
 800cc74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc78:	ed9d 0b00 	vldr	d0, [sp]
 800cc7c:	f000 fa18 	bl	800d0b0 <__kernel_sin>
 800cc80:	ec53 2b10 	vmov	r2, r3, d0
 800cc84:	4610      	mov	r0, r2
 800cc86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cc8a:	e7db      	b.n	800cc44 <cos+0x2c>
 800cc8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc90:	ed9d 0b00 	vldr	d0, [sp]
 800cc94:	f000 f944 	bl	800cf20 <__kernel_cos>
 800cc98:	e7f2      	b.n	800cc80 <cos+0x68>
 800cc9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc9e:	ed9d 0b00 	vldr	d0, [sp]
 800cca2:	2001      	movs	r0, #1
 800cca4:	f000 fa04 	bl	800d0b0 <__kernel_sin>
 800cca8:	e7e1      	b.n	800cc6e <cos+0x56>
 800ccaa:	bf00      	nop
 800ccac:	f3af 8000 	nop.w
	...
 800ccb8:	3fe921fb 	.word	0x3fe921fb
 800ccbc:	7fefffff 	.word	0x7fefffff

0800ccc0 <sin>:
 800ccc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccc2:	ec53 2b10 	vmov	r2, r3, d0
 800ccc6:	4826      	ldr	r0, [pc, #152]	@ (800cd60 <sin+0xa0>)
 800ccc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cccc:	4281      	cmp	r1, r0
 800ccce:	d807      	bhi.n	800cce0 <sin+0x20>
 800ccd0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cd58 <sin+0x98>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	b005      	add	sp, #20
 800ccd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccdc:	f000 b9e8 	b.w	800d0b0 <__kernel_sin>
 800cce0:	4820      	ldr	r0, [pc, #128]	@ (800cd64 <sin+0xa4>)
 800cce2:	4281      	cmp	r1, r0
 800cce4:	d908      	bls.n	800ccf8 <sin+0x38>
 800cce6:	4610      	mov	r0, r2
 800cce8:	4619      	mov	r1, r3
 800ccea:	f7f3 faed 	bl	80002c8 <__aeabi_dsub>
 800ccee:	ec41 0b10 	vmov	d0, r0, r1
 800ccf2:	b005      	add	sp, #20
 800ccf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccf8:	4668      	mov	r0, sp
 800ccfa:	f000 fb5d 	bl	800d3b8 <__ieee754_rem_pio2>
 800ccfe:	f000 0003 	and.w	r0, r0, #3
 800cd02:	2801      	cmp	r0, #1
 800cd04:	d00c      	beq.n	800cd20 <sin+0x60>
 800cd06:	2802      	cmp	r0, #2
 800cd08:	d011      	beq.n	800cd2e <sin+0x6e>
 800cd0a:	b9e8      	cbnz	r0, 800cd48 <sin+0x88>
 800cd0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd10:	ed9d 0b00 	vldr	d0, [sp]
 800cd14:	2001      	movs	r0, #1
 800cd16:	f000 f9cb 	bl	800d0b0 <__kernel_sin>
 800cd1a:	ec51 0b10 	vmov	r0, r1, d0
 800cd1e:	e7e6      	b.n	800ccee <sin+0x2e>
 800cd20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd24:	ed9d 0b00 	vldr	d0, [sp]
 800cd28:	f000 f8fa 	bl	800cf20 <__kernel_cos>
 800cd2c:	e7f5      	b.n	800cd1a <sin+0x5a>
 800cd2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd32:	ed9d 0b00 	vldr	d0, [sp]
 800cd36:	2001      	movs	r0, #1
 800cd38:	f000 f9ba 	bl	800d0b0 <__kernel_sin>
 800cd3c:	ec53 2b10 	vmov	r2, r3, d0
 800cd40:	4610      	mov	r0, r2
 800cd42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cd46:	e7d2      	b.n	800ccee <sin+0x2e>
 800cd48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd4c:	ed9d 0b00 	vldr	d0, [sp]
 800cd50:	f000 f8e6 	bl	800cf20 <__kernel_cos>
 800cd54:	e7f2      	b.n	800cd3c <sin+0x7c>
 800cd56:	bf00      	nop
	...
 800cd60:	3fe921fb 	.word	0x3fe921fb
 800cd64:	7fefffff 	.word	0x7fefffff

0800cd68 <__ieee754_sqrt>:
 800cd68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	4a68      	ldr	r2, [pc, #416]	@ (800cf10 <__ieee754_sqrt+0x1a8>)
 800cd6e:	ec55 4b10 	vmov	r4, r5, d0
 800cd72:	43aa      	bics	r2, r5
 800cd74:	462b      	mov	r3, r5
 800cd76:	4621      	mov	r1, r4
 800cd78:	d110      	bne.n	800cd9c <__ieee754_sqrt+0x34>
 800cd7a:	4622      	mov	r2, r4
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4629      	mov	r1, r5
 800cd80:	f7f3 fc5a 	bl	8000638 <__aeabi_dmul>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	4620      	mov	r0, r4
 800cd8a:	4629      	mov	r1, r5
 800cd8c:	f7f3 fa9e 	bl	80002cc <__adddf3>
 800cd90:	4604      	mov	r4, r0
 800cd92:	460d      	mov	r5, r1
 800cd94:	ec45 4b10 	vmov	d0, r4, r5
 800cd98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9c:	2d00      	cmp	r5, #0
 800cd9e:	dc0e      	bgt.n	800cdbe <__ieee754_sqrt+0x56>
 800cda0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cda4:	4322      	orrs	r2, r4
 800cda6:	d0f5      	beq.n	800cd94 <__ieee754_sqrt+0x2c>
 800cda8:	b19d      	cbz	r5, 800cdd2 <__ieee754_sqrt+0x6a>
 800cdaa:	4622      	mov	r2, r4
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 fa8a 	bl	80002c8 <__aeabi_dsub>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	f7f3 fd68 	bl	800088c <__aeabi_ddiv>
 800cdbc:	e7e8      	b.n	800cd90 <__ieee754_sqrt+0x28>
 800cdbe:	152a      	asrs	r2, r5, #20
 800cdc0:	d115      	bne.n	800cdee <__ieee754_sqrt+0x86>
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e009      	b.n	800cdda <__ieee754_sqrt+0x72>
 800cdc6:	0acb      	lsrs	r3, r1, #11
 800cdc8:	3a15      	subs	r2, #21
 800cdca:	0549      	lsls	r1, r1, #21
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0fa      	beq.n	800cdc6 <__ieee754_sqrt+0x5e>
 800cdd0:	e7f7      	b.n	800cdc2 <__ieee754_sqrt+0x5a>
 800cdd2:	462a      	mov	r2, r5
 800cdd4:	e7fa      	b.n	800cdcc <__ieee754_sqrt+0x64>
 800cdd6:	005b      	lsls	r3, r3, #1
 800cdd8:	3001      	adds	r0, #1
 800cdda:	02dc      	lsls	r4, r3, #11
 800cddc:	d5fb      	bpl.n	800cdd6 <__ieee754_sqrt+0x6e>
 800cdde:	1e44      	subs	r4, r0, #1
 800cde0:	1b12      	subs	r2, r2, r4
 800cde2:	f1c0 0420 	rsb	r4, r0, #32
 800cde6:	fa21 f404 	lsr.w	r4, r1, r4
 800cdea:	4323      	orrs	r3, r4
 800cdec:	4081      	lsls	r1, r0
 800cdee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdf2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cdf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdfa:	07d2      	lsls	r2, r2, #31
 800cdfc:	bf5c      	itt	pl
 800cdfe:	005b      	lslpl	r3, r3, #1
 800ce00:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ce04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce08:	bf58      	it	pl
 800ce0a:	0049      	lslpl	r1, r1, #1
 800ce0c:	2600      	movs	r6, #0
 800ce0e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ce12:	106d      	asrs	r5, r5, #1
 800ce14:	0049      	lsls	r1, r1, #1
 800ce16:	2016      	movs	r0, #22
 800ce18:	4632      	mov	r2, r6
 800ce1a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ce1e:	1917      	adds	r7, r2, r4
 800ce20:	429f      	cmp	r7, r3
 800ce22:	bfde      	ittt	le
 800ce24:	193a      	addle	r2, r7, r4
 800ce26:	1bdb      	suble	r3, r3, r7
 800ce28:	1936      	addle	r6, r6, r4
 800ce2a:	0fcf      	lsrs	r7, r1, #31
 800ce2c:	3801      	subs	r0, #1
 800ce2e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ce32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce3a:	d1f0      	bne.n	800ce1e <__ieee754_sqrt+0xb6>
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	2720      	movs	r7, #32
 800ce40:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ce44:	429a      	cmp	r2, r3
 800ce46:	eb00 0e0c 	add.w	lr, r0, ip
 800ce4a:	db02      	blt.n	800ce52 <__ieee754_sqrt+0xea>
 800ce4c:	d113      	bne.n	800ce76 <__ieee754_sqrt+0x10e>
 800ce4e:	458e      	cmp	lr, r1
 800ce50:	d811      	bhi.n	800ce76 <__ieee754_sqrt+0x10e>
 800ce52:	f1be 0f00 	cmp.w	lr, #0
 800ce56:	eb0e 000c 	add.w	r0, lr, ip
 800ce5a:	da42      	bge.n	800cee2 <__ieee754_sqrt+0x17a>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	db40      	blt.n	800cee2 <__ieee754_sqrt+0x17a>
 800ce60:	f102 0801 	add.w	r8, r2, #1
 800ce64:	1a9b      	subs	r3, r3, r2
 800ce66:	458e      	cmp	lr, r1
 800ce68:	bf88      	it	hi
 800ce6a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ce6e:	eba1 010e 	sub.w	r1, r1, lr
 800ce72:	4464      	add	r4, ip
 800ce74:	4642      	mov	r2, r8
 800ce76:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ce7a:	3f01      	subs	r7, #1
 800ce7c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ce80:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ce88:	d1dc      	bne.n	800ce44 <__ieee754_sqrt+0xdc>
 800ce8a:	4319      	orrs	r1, r3
 800ce8c:	d01b      	beq.n	800cec6 <__ieee754_sqrt+0x15e>
 800ce8e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cf14 <__ieee754_sqrt+0x1ac>
 800ce92:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cf18 <__ieee754_sqrt+0x1b0>
 800ce96:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce9a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce9e:	f7f3 fa13 	bl	80002c8 <__aeabi_dsub>
 800cea2:	e9da 8900 	ldrd	r8, r9, [sl]
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	4640      	mov	r0, r8
 800ceac:	4649      	mov	r1, r9
 800ceae:	f7f3 fe3f 	bl	8000b30 <__aeabi_dcmple>
 800ceb2:	b140      	cbz	r0, 800cec6 <__ieee754_sqrt+0x15e>
 800ceb4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ceb8:	e9da 0100 	ldrd	r0, r1, [sl]
 800cebc:	e9db 2300 	ldrd	r2, r3, [fp]
 800cec0:	d111      	bne.n	800cee6 <__ieee754_sqrt+0x17e>
 800cec2:	3601      	adds	r6, #1
 800cec4:	463c      	mov	r4, r7
 800cec6:	1072      	asrs	r2, r6, #1
 800cec8:	0863      	lsrs	r3, r4, #1
 800ceca:	07f1      	lsls	r1, r6, #31
 800cecc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ced0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ced4:	bf48      	it	mi
 800ced6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ceda:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cede:	4618      	mov	r0, r3
 800cee0:	e756      	b.n	800cd90 <__ieee754_sqrt+0x28>
 800cee2:	4690      	mov	r8, r2
 800cee4:	e7be      	b.n	800ce64 <__ieee754_sqrt+0xfc>
 800cee6:	f7f3 f9f1 	bl	80002cc <__adddf3>
 800ceea:	e9da 8900 	ldrd	r8, r9, [sl]
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	4640      	mov	r0, r8
 800cef4:	4649      	mov	r1, r9
 800cef6:	f7f3 fe11 	bl	8000b1c <__aeabi_dcmplt>
 800cefa:	b120      	cbz	r0, 800cf06 <__ieee754_sqrt+0x19e>
 800cefc:	1ca0      	adds	r0, r4, #2
 800cefe:	bf08      	it	eq
 800cf00:	3601      	addeq	r6, #1
 800cf02:	3402      	adds	r4, #2
 800cf04:	e7df      	b.n	800cec6 <__ieee754_sqrt+0x15e>
 800cf06:	1c63      	adds	r3, r4, #1
 800cf08:	f023 0401 	bic.w	r4, r3, #1
 800cf0c:	e7db      	b.n	800cec6 <__ieee754_sqrt+0x15e>
 800cf0e:	bf00      	nop
 800cf10:	7ff00000 	.word	0x7ff00000
 800cf14:	200001f0 	.word	0x200001f0
 800cf18:	200001e8 	.word	0x200001e8
 800cf1c:	00000000 	.word	0x00000000

0800cf20 <__kernel_cos>:
 800cf20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	ec57 6b10 	vmov	r6, r7, d0
 800cf28:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cf2c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800cf30:	ed8d 1b00 	vstr	d1, [sp]
 800cf34:	d206      	bcs.n	800cf44 <__kernel_cos+0x24>
 800cf36:	4630      	mov	r0, r6
 800cf38:	4639      	mov	r1, r7
 800cf3a:	f7f3 fe2d 	bl	8000b98 <__aeabi_d2iz>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	f000 8088 	beq.w	800d054 <__kernel_cos+0x134>
 800cf44:	4632      	mov	r2, r6
 800cf46:	463b      	mov	r3, r7
 800cf48:	4630      	mov	r0, r6
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f7f3 fb74 	bl	8000638 <__aeabi_dmul>
 800cf50:	4b51      	ldr	r3, [pc, #324]	@ (800d098 <__kernel_cos+0x178>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	4604      	mov	r4, r0
 800cf56:	460d      	mov	r5, r1
 800cf58:	f7f3 fb6e 	bl	8000638 <__aeabi_dmul>
 800cf5c:	a340      	add	r3, pc, #256	@ (adr r3, 800d060 <__kernel_cos+0x140>)
 800cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf62:	4682      	mov	sl, r0
 800cf64:	468b      	mov	fp, r1
 800cf66:	4620      	mov	r0, r4
 800cf68:	4629      	mov	r1, r5
 800cf6a:	f7f3 fb65 	bl	8000638 <__aeabi_dmul>
 800cf6e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d068 <__kernel_cos+0x148>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f7f3 f9aa 	bl	80002cc <__adddf3>
 800cf78:	4622      	mov	r2, r4
 800cf7a:	462b      	mov	r3, r5
 800cf7c:	f7f3 fb5c 	bl	8000638 <__aeabi_dmul>
 800cf80:	a33b      	add	r3, pc, #236	@ (adr r3, 800d070 <__kernel_cos+0x150>)
 800cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf86:	f7f3 f99f 	bl	80002c8 <__aeabi_dsub>
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	462b      	mov	r3, r5
 800cf8e:	f7f3 fb53 	bl	8000638 <__aeabi_dmul>
 800cf92:	a339      	add	r3, pc, #228	@ (adr r3, 800d078 <__kernel_cos+0x158>)
 800cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf98:	f7f3 f998 	bl	80002cc <__adddf3>
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	462b      	mov	r3, r5
 800cfa0:	f7f3 fb4a 	bl	8000638 <__aeabi_dmul>
 800cfa4:	a336      	add	r3, pc, #216	@ (adr r3, 800d080 <__kernel_cos+0x160>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	f7f3 f98d 	bl	80002c8 <__aeabi_dsub>
 800cfae:	4622      	mov	r2, r4
 800cfb0:	462b      	mov	r3, r5
 800cfb2:	f7f3 fb41 	bl	8000638 <__aeabi_dmul>
 800cfb6:	a334      	add	r3, pc, #208	@ (adr r3, 800d088 <__kernel_cos+0x168>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 f986 	bl	80002cc <__adddf3>
 800cfc0:	4622      	mov	r2, r4
 800cfc2:	462b      	mov	r3, r5
 800cfc4:	f7f3 fb38 	bl	8000638 <__aeabi_dmul>
 800cfc8:	4622      	mov	r2, r4
 800cfca:	462b      	mov	r3, r5
 800cfcc:	f7f3 fb34 	bl	8000638 <__aeabi_dmul>
 800cfd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	460d      	mov	r5, r1
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f7f3 fb2c 	bl	8000638 <__aeabi_dmul>
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f7f3 f96e 	bl	80002c8 <__aeabi_dsub>
 800cfec:	4b2b      	ldr	r3, [pc, #172]	@ (800d09c <__kernel_cos+0x17c>)
 800cfee:	4598      	cmp	r8, r3
 800cff0:	4606      	mov	r6, r0
 800cff2:	460f      	mov	r7, r1
 800cff4:	d810      	bhi.n	800d018 <__kernel_cos+0xf8>
 800cff6:	4602      	mov	r2, r0
 800cff8:	460b      	mov	r3, r1
 800cffa:	4650      	mov	r0, sl
 800cffc:	4659      	mov	r1, fp
 800cffe:	f7f3 f963 	bl	80002c8 <__aeabi_dsub>
 800d002:	460b      	mov	r3, r1
 800d004:	4926      	ldr	r1, [pc, #152]	@ (800d0a0 <__kernel_cos+0x180>)
 800d006:	4602      	mov	r2, r0
 800d008:	2000      	movs	r0, #0
 800d00a:	f7f3 f95d 	bl	80002c8 <__aeabi_dsub>
 800d00e:	ec41 0b10 	vmov	d0, r0, r1
 800d012:	b003      	add	sp, #12
 800d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d018:	4b22      	ldr	r3, [pc, #136]	@ (800d0a4 <__kernel_cos+0x184>)
 800d01a:	4921      	ldr	r1, [pc, #132]	@ (800d0a0 <__kernel_cos+0x180>)
 800d01c:	4598      	cmp	r8, r3
 800d01e:	bf8c      	ite	hi
 800d020:	4d21      	ldrhi	r5, [pc, #132]	@ (800d0a8 <__kernel_cos+0x188>)
 800d022:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d026:	2400      	movs	r4, #0
 800d028:	4622      	mov	r2, r4
 800d02a:	462b      	mov	r3, r5
 800d02c:	2000      	movs	r0, #0
 800d02e:	f7f3 f94b 	bl	80002c8 <__aeabi_dsub>
 800d032:	4622      	mov	r2, r4
 800d034:	4680      	mov	r8, r0
 800d036:	4689      	mov	r9, r1
 800d038:	462b      	mov	r3, r5
 800d03a:	4650      	mov	r0, sl
 800d03c:	4659      	mov	r1, fp
 800d03e:	f7f3 f943 	bl	80002c8 <__aeabi_dsub>
 800d042:	4632      	mov	r2, r6
 800d044:	463b      	mov	r3, r7
 800d046:	f7f3 f93f 	bl	80002c8 <__aeabi_dsub>
 800d04a:	4602      	mov	r2, r0
 800d04c:	460b      	mov	r3, r1
 800d04e:	4640      	mov	r0, r8
 800d050:	4649      	mov	r1, r9
 800d052:	e7da      	b.n	800d00a <__kernel_cos+0xea>
 800d054:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d090 <__kernel_cos+0x170>
 800d058:	e7db      	b.n	800d012 <__kernel_cos+0xf2>
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w
 800d060:	be8838d4 	.word	0xbe8838d4
 800d064:	bda8fae9 	.word	0xbda8fae9
 800d068:	bdb4b1c4 	.word	0xbdb4b1c4
 800d06c:	3e21ee9e 	.word	0x3e21ee9e
 800d070:	809c52ad 	.word	0x809c52ad
 800d074:	3e927e4f 	.word	0x3e927e4f
 800d078:	19cb1590 	.word	0x19cb1590
 800d07c:	3efa01a0 	.word	0x3efa01a0
 800d080:	16c15177 	.word	0x16c15177
 800d084:	3f56c16c 	.word	0x3f56c16c
 800d088:	5555554c 	.word	0x5555554c
 800d08c:	3fa55555 	.word	0x3fa55555
 800d090:	00000000 	.word	0x00000000
 800d094:	3ff00000 	.word	0x3ff00000
 800d098:	3fe00000 	.word	0x3fe00000
 800d09c:	3fd33332 	.word	0x3fd33332
 800d0a0:	3ff00000 	.word	0x3ff00000
 800d0a4:	3fe90000 	.word	0x3fe90000
 800d0a8:	3fd20000 	.word	0x3fd20000
 800d0ac:	00000000 	.word	0x00000000

0800d0b0 <__kernel_sin>:
 800d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	ec55 4b10 	vmov	r4, r5, d0
 800d0b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d0bc:	b085      	sub	sp, #20
 800d0be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d0c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d0c6:	4680      	mov	r8, r0
 800d0c8:	d205      	bcs.n	800d0d6 <__kernel_sin+0x26>
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	f7f3 fd63 	bl	8000b98 <__aeabi_d2iz>
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d052      	beq.n	800d17c <__kernel_sin+0xcc>
 800d0d6:	4622      	mov	r2, r4
 800d0d8:	462b      	mov	r3, r5
 800d0da:	4620      	mov	r0, r4
 800d0dc:	4629      	mov	r1, r5
 800d0de:	f7f3 faab 	bl	8000638 <__aeabi_dmul>
 800d0e2:	4682      	mov	sl, r0
 800d0e4:	468b      	mov	fp, r1
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	f7f3 faa3 	bl	8000638 <__aeabi_dmul>
 800d0f2:	a342      	add	r3, pc, #264	@ (adr r3, 800d1fc <__kernel_sin+0x14c>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	e9cd 0100 	strd	r0, r1, [sp]
 800d0fc:	4650      	mov	r0, sl
 800d0fe:	4659      	mov	r1, fp
 800d100:	f7f3 fa9a 	bl	8000638 <__aeabi_dmul>
 800d104:	a33f      	add	r3, pc, #252	@ (adr r3, 800d204 <__kernel_sin+0x154>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	f7f3 f8dd 	bl	80002c8 <__aeabi_dsub>
 800d10e:	4652      	mov	r2, sl
 800d110:	465b      	mov	r3, fp
 800d112:	f7f3 fa91 	bl	8000638 <__aeabi_dmul>
 800d116:	a33d      	add	r3, pc, #244	@ (adr r3, 800d20c <__kernel_sin+0x15c>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f7f3 f8d6 	bl	80002cc <__adddf3>
 800d120:	4652      	mov	r2, sl
 800d122:	465b      	mov	r3, fp
 800d124:	f7f3 fa88 	bl	8000638 <__aeabi_dmul>
 800d128:	a33a      	add	r3, pc, #232	@ (adr r3, 800d214 <__kernel_sin+0x164>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f7f3 f8cb 	bl	80002c8 <__aeabi_dsub>
 800d132:	4652      	mov	r2, sl
 800d134:	465b      	mov	r3, fp
 800d136:	f7f3 fa7f 	bl	8000638 <__aeabi_dmul>
 800d13a:	a338      	add	r3, pc, #224	@ (adr r3, 800d21c <__kernel_sin+0x16c>)
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f7f3 f8c4 	bl	80002cc <__adddf3>
 800d144:	4606      	mov	r6, r0
 800d146:	460f      	mov	r7, r1
 800d148:	f1b8 0f00 	cmp.w	r8, #0
 800d14c:	d11b      	bne.n	800d186 <__kernel_sin+0xd6>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	4650      	mov	r0, sl
 800d154:	4659      	mov	r1, fp
 800d156:	f7f3 fa6f 	bl	8000638 <__aeabi_dmul>
 800d15a:	a325      	add	r3, pc, #148	@ (adr r3, 800d1f0 <__kernel_sin+0x140>)
 800d15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d160:	f7f3 f8b2 	bl	80002c8 <__aeabi_dsub>
 800d164:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d168:	f7f3 fa66 	bl	8000638 <__aeabi_dmul>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4620      	mov	r0, r4
 800d172:	4629      	mov	r1, r5
 800d174:	f7f3 f8aa 	bl	80002cc <__adddf3>
 800d178:	4604      	mov	r4, r0
 800d17a:	460d      	mov	r5, r1
 800d17c:	ec45 4b10 	vmov	d0, r4, r5
 800d180:	b005      	add	sp, #20
 800d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d18a:	4b1b      	ldr	r3, [pc, #108]	@ (800d1f8 <__kernel_sin+0x148>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	f7f3 fa53 	bl	8000638 <__aeabi_dmul>
 800d192:	4632      	mov	r2, r6
 800d194:	4680      	mov	r8, r0
 800d196:	4689      	mov	r9, r1
 800d198:	463b      	mov	r3, r7
 800d19a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d19e:	f7f3 fa4b 	bl	8000638 <__aeabi_dmul>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	4640      	mov	r0, r8
 800d1a8:	4649      	mov	r1, r9
 800d1aa:	f7f3 f88d 	bl	80002c8 <__aeabi_dsub>
 800d1ae:	4652      	mov	r2, sl
 800d1b0:	465b      	mov	r3, fp
 800d1b2:	f7f3 fa41 	bl	8000638 <__aeabi_dmul>
 800d1b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1ba:	f7f3 f885 	bl	80002c8 <__aeabi_dsub>
 800d1be:	a30c      	add	r3, pc, #48	@ (adr r3, 800d1f0 <__kernel_sin+0x140>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	460f      	mov	r7, r1
 800d1c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1cc:	f7f3 fa34 	bl	8000638 <__aeabi_dmul>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	4639      	mov	r1, r7
 800d1d8:	f7f3 f878 	bl	80002cc <__adddf3>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7f3 f870 	bl	80002c8 <__aeabi_dsub>
 800d1e8:	e7c6      	b.n	800d178 <__kernel_sin+0xc8>
 800d1ea:	bf00      	nop
 800d1ec:	f3af 8000 	nop.w
 800d1f0:	55555549 	.word	0x55555549
 800d1f4:	3fc55555 	.word	0x3fc55555
 800d1f8:	3fe00000 	.word	0x3fe00000
 800d1fc:	5acfd57c 	.word	0x5acfd57c
 800d200:	3de5d93a 	.word	0x3de5d93a
 800d204:	8a2b9ceb 	.word	0x8a2b9ceb
 800d208:	3e5ae5e6 	.word	0x3e5ae5e6
 800d20c:	57b1fe7d 	.word	0x57b1fe7d
 800d210:	3ec71de3 	.word	0x3ec71de3
 800d214:	19c161d5 	.word	0x19c161d5
 800d218:	3f2a01a0 	.word	0x3f2a01a0
 800d21c:	1110f8a6 	.word	0x1110f8a6
 800d220:	3f811111 	.word	0x3f811111
 800d224:	00000000 	.word	0x00000000

0800d228 <__ieee754_atan2>:
 800d228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d22c:	ec57 6b11 	vmov	r6, r7, d1
 800d230:	4273      	negs	r3, r6
 800d232:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d3b0 <__ieee754_atan2+0x188>
 800d236:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d23a:	4333      	orrs	r3, r6
 800d23c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d240:	4543      	cmp	r3, r8
 800d242:	ec51 0b10 	vmov	r0, r1, d0
 800d246:	4635      	mov	r5, r6
 800d248:	d809      	bhi.n	800d25e <__ieee754_atan2+0x36>
 800d24a:	4244      	negs	r4, r0
 800d24c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d250:	4304      	orrs	r4, r0
 800d252:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d256:	4544      	cmp	r4, r8
 800d258:	468e      	mov	lr, r1
 800d25a:	4681      	mov	r9, r0
 800d25c:	d907      	bls.n	800d26e <__ieee754_atan2+0x46>
 800d25e:	4632      	mov	r2, r6
 800d260:	463b      	mov	r3, r7
 800d262:	f7f3 f833 	bl	80002cc <__adddf3>
 800d266:	ec41 0b10 	vmov	d0, r0, r1
 800d26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d272:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d276:	4334      	orrs	r4, r6
 800d278:	d103      	bne.n	800d282 <__ieee754_atan2+0x5a>
 800d27a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d27e:	f000 ba97 	b.w	800d7b0 <atan>
 800d282:	17bc      	asrs	r4, r7, #30
 800d284:	f004 0402 	and.w	r4, r4, #2
 800d288:	ea53 0909 	orrs.w	r9, r3, r9
 800d28c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d290:	d107      	bne.n	800d2a2 <__ieee754_atan2+0x7a>
 800d292:	2c02      	cmp	r4, #2
 800d294:	d05f      	beq.n	800d356 <__ieee754_atan2+0x12e>
 800d296:	2c03      	cmp	r4, #3
 800d298:	d1e5      	bne.n	800d266 <__ieee754_atan2+0x3e>
 800d29a:	a141      	add	r1, pc, #260	@ (adr r1, 800d3a0 <__ieee754_atan2+0x178>)
 800d29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a0:	e7e1      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d2a2:	4315      	orrs	r5, r2
 800d2a4:	d106      	bne.n	800d2b4 <__ieee754_atan2+0x8c>
 800d2a6:	f1be 0f00 	cmp.w	lr, #0
 800d2aa:	da5f      	bge.n	800d36c <__ieee754_atan2+0x144>
 800d2ac:	a13e      	add	r1, pc, #248	@ (adr r1, 800d3a8 <__ieee754_atan2+0x180>)
 800d2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b2:	e7d8      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d2b4:	4542      	cmp	r2, r8
 800d2b6:	d10f      	bne.n	800d2d8 <__ieee754_atan2+0xb0>
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800d2be:	d107      	bne.n	800d2d0 <__ieee754_atan2+0xa8>
 800d2c0:	2c02      	cmp	r4, #2
 800d2c2:	d84c      	bhi.n	800d35e <__ieee754_atan2+0x136>
 800d2c4:	4b34      	ldr	r3, [pc, #208]	@ (800d398 <__ieee754_atan2+0x170>)
 800d2c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2ce:	e7ca      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d2d0:	2c02      	cmp	r4, #2
 800d2d2:	d848      	bhi.n	800d366 <__ieee754_atan2+0x13e>
 800d2d4:	4b31      	ldr	r3, [pc, #196]	@ (800d39c <__ieee754_atan2+0x174>)
 800d2d6:	e7f6      	b.n	800d2c6 <__ieee754_atan2+0x9e>
 800d2d8:	4543      	cmp	r3, r8
 800d2da:	d0e4      	beq.n	800d2a6 <__ieee754_atan2+0x7e>
 800d2dc:	1a9b      	subs	r3, r3, r2
 800d2de:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d2e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2e6:	da1e      	bge.n	800d326 <__ieee754_atan2+0xfe>
 800d2e8:	2f00      	cmp	r7, #0
 800d2ea:	da01      	bge.n	800d2f0 <__ieee754_atan2+0xc8>
 800d2ec:	323c      	adds	r2, #60	@ 0x3c
 800d2ee:	db1e      	blt.n	800d32e <__ieee754_atan2+0x106>
 800d2f0:	4632      	mov	r2, r6
 800d2f2:	463b      	mov	r3, r7
 800d2f4:	f7f3 faca 	bl	800088c <__aeabi_ddiv>
 800d2f8:	ec41 0b10 	vmov	d0, r0, r1
 800d2fc:	f000 fbf0 	bl	800dae0 <fabs>
 800d300:	f000 fa56 	bl	800d7b0 <atan>
 800d304:	ec51 0b10 	vmov	r0, r1, d0
 800d308:	2c01      	cmp	r4, #1
 800d30a:	d013      	beq.n	800d334 <__ieee754_atan2+0x10c>
 800d30c:	2c02      	cmp	r4, #2
 800d30e:	d015      	beq.n	800d33c <__ieee754_atan2+0x114>
 800d310:	2c00      	cmp	r4, #0
 800d312:	d0a8      	beq.n	800d266 <__ieee754_atan2+0x3e>
 800d314:	a318      	add	r3, pc, #96	@ (adr r3, 800d378 <__ieee754_atan2+0x150>)
 800d316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31a:	f7f2 ffd5 	bl	80002c8 <__aeabi_dsub>
 800d31e:	a318      	add	r3, pc, #96	@ (adr r3, 800d380 <__ieee754_atan2+0x158>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	e014      	b.n	800d350 <__ieee754_atan2+0x128>
 800d326:	a118      	add	r1, pc, #96	@ (adr r1, 800d388 <__ieee754_atan2+0x160>)
 800d328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d32c:	e7ec      	b.n	800d308 <__ieee754_atan2+0xe0>
 800d32e:	2000      	movs	r0, #0
 800d330:	2100      	movs	r1, #0
 800d332:	e7e9      	b.n	800d308 <__ieee754_atan2+0xe0>
 800d334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d338:	4619      	mov	r1, r3
 800d33a:	e794      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d33c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d378 <__ieee754_atan2+0x150>)
 800d33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d342:	f7f2 ffc1 	bl	80002c8 <__aeabi_dsub>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	a10d      	add	r1, pc, #52	@ (adr r1, 800d380 <__ieee754_atan2+0x158>)
 800d34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d350:	f7f2 ffba 	bl	80002c8 <__aeabi_dsub>
 800d354:	e787      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d356:	a10a      	add	r1, pc, #40	@ (adr r1, 800d380 <__ieee754_atan2+0x158>)
 800d358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d35c:	e783      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d35e:	a10c      	add	r1, pc, #48	@ (adr r1, 800d390 <__ieee754_atan2+0x168>)
 800d360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d364:	e77f      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d366:	2000      	movs	r0, #0
 800d368:	2100      	movs	r1, #0
 800d36a:	e77c      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d36c:	a106      	add	r1, pc, #24	@ (adr r1, 800d388 <__ieee754_atan2+0x160>)
 800d36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d372:	e778      	b.n	800d266 <__ieee754_atan2+0x3e>
 800d374:	f3af 8000 	nop.w
 800d378:	33145c07 	.word	0x33145c07
 800d37c:	3ca1a626 	.word	0x3ca1a626
 800d380:	54442d18 	.word	0x54442d18
 800d384:	400921fb 	.word	0x400921fb
 800d388:	54442d18 	.word	0x54442d18
 800d38c:	3ff921fb 	.word	0x3ff921fb
 800d390:	54442d18 	.word	0x54442d18
 800d394:	3fe921fb 	.word	0x3fe921fb
 800d398:	0800e898 	.word	0x0800e898
 800d39c:	0800e880 	.word	0x0800e880
 800d3a0:	54442d18 	.word	0x54442d18
 800d3a4:	c00921fb 	.word	0xc00921fb
 800d3a8:	54442d18 	.word	0x54442d18
 800d3ac:	bff921fb 	.word	0xbff921fb
 800d3b0:	7ff00000 	.word	0x7ff00000
 800d3b4:	00000000 	.word	0x00000000

0800d3b8 <__ieee754_rem_pio2>:
 800d3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3bc:	ec57 6b10 	vmov	r6, r7, d0
 800d3c0:	4bc5      	ldr	r3, [pc, #788]	@ (800d6d8 <__ieee754_rem_pio2+0x320>)
 800d3c2:	b08d      	sub	sp, #52	@ 0x34
 800d3c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d3c8:	4598      	cmp	r8, r3
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	9704      	str	r7, [sp, #16]
 800d3ce:	d807      	bhi.n	800d3e0 <__ieee754_rem_pio2+0x28>
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	ed80 0b00 	vstr	d0, [r0]
 800d3d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d3dc:	2500      	movs	r5, #0
 800d3de:	e028      	b.n	800d432 <__ieee754_rem_pio2+0x7a>
 800d3e0:	4bbe      	ldr	r3, [pc, #760]	@ (800d6dc <__ieee754_rem_pio2+0x324>)
 800d3e2:	4598      	cmp	r8, r3
 800d3e4:	d878      	bhi.n	800d4d8 <__ieee754_rem_pio2+0x120>
 800d3e6:	9b04      	ldr	r3, [sp, #16]
 800d3e8:	4dbd      	ldr	r5, [pc, #756]	@ (800d6e0 <__ieee754_rem_pio2+0x328>)
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d6a0 <__ieee754_rem_pio2+0x2e8>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	4639      	mov	r1, r7
 800d3f6:	dd38      	ble.n	800d46a <__ieee754_rem_pio2+0xb2>
 800d3f8:	f7f2 ff66 	bl	80002c8 <__aeabi_dsub>
 800d3fc:	45a8      	cmp	r8, r5
 800d3fe:	4606      	mov	r6, r0
 800d400:	460f      	mov	r7, r1
 800d402:	d01a      	beq.n	800d43a <__ieee754_rem_pio2+0x82>
 800d404:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d6a8 <__ieee754_rem_pio2+0x2f0>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	f7f2 ff5d 	bl	80002c8 <__aeabi_dsub>
 800d40e:	4602      	mov	r2, r0
 800d410:	460b      	mov	r3, r1
 800d412:	4680      	mov	r8, r0
 800d414:	4689      	mov	r9, r1
 800d416:	4630      	mov	r0, r6
 800d418:	4639      	mov	r1, r7
 800d41a:	f7f2 ff55 	bl	80002c8 <__aeabi_dsub>
 800d41e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d6a8 <__ieee754_rem_pio2+0x2f0>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f2 ff50 	bl	80002c8 <__aeabi_dsub>
 800d428:	e9c4 8900 	strd	r8, r9, [r4]
 800d42c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d430:	2501      	movs	r5, #1
 800d432:	4628      	mov	r0, r5
 800d434:	b00d      	add	sp, #52	@ 0x34
 800d436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43a:	a39d      	add	r3, pc, #628	@ (adr r3, 800d6b0 <__ieee754_rem_pio2+0x2f8>)
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	f7f2 ff42 	bl	80002c8 <__aeabi_dsub>
 800d444:	a39c      	add	r3, pc, #624	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x300>)
 800d446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44a:	4606      	mov	r6, r0
 800d44c:	460f      	mov	r7, r1
 800d44e:	f7f2 ff3b 	bl	80002c8 <__aeabi_dsub>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4680      	mov	r8, r0
 800d458:	4689      	mov	r9, r1
 800d45a:	4630      	mov	r0, r6
 800d45c:	4639      	mov	r1, r7
 800d45e:	f7f2 ff33 	bl	80002c8 <__aeabi_dsub>
 800d462:	a395      	add	r3, pc, #596	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x300>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	e7dc      	b.n	800d424 <__ieee754_rem_pio2+0x6c>
 800d46a:	f7f2 ff2f 	bl	80002cc <__adddf3>
 800d46e:	45a8      	cmp	r8, r5
 800d470:	4606      	mov	r6, r0
 800d472:	460f      	mov	r7, r1
 800d474:	d018      	beq.n	800d4a8 <__ieee754_rem_pio2+0xf0>
 800d476:	a38c      	add	r3, pc, #560	@ (adr r3, 800d6a8 <__ieee754_rem_pio2+0x2f0>)
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f7f2 ff26 	bl	80002cc <__adddf3>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	4680      	mov	r8, r0
 800d486:	4689      	mov	r9, r1
 800d488:	4630      	mov	r0, r6
 800d48a:	4639      	mov	r1, r7
 800d48c:	f7f2 ff1c 	bl	80002c8 <__aeabi_dsub>
 800d490:	a385      	add	r3, pc, #532	@ (adr r3, 800d6a8 <__ieee754_rem_pio2+0x2f0>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 ff19 	bl	80002cc <__adddf3>
 800d49a:	f04f 35ff 	mov.w	r5, #4294967295
 800d49e:	e9c4 8900 	strd	r8, r9, [r4]
 800d4a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4a6:	e7c4      	b.n	800d432 <__ieee754_rem_pio2+0x7a>
 800d4a8:	a381      	add	r3, pc, #516	@ (adr r3, 800d6b0 <__ieee754_rem_pio2+0x2f8>)
 800d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ae:	f7f2 ff0d 	bl	80002cc <__adddf3>
 800d4b2:	a381      	add	r3, pc, #516	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x300>)
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	460f      	mov	r7, r1
 800d4bc:	f7f2 ff06 	bl	80002cc <__adddf3>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	4689      	mov	r9, r1
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	f7f2 fefc 	bl	80002c8 <__aeabi_dsub>
 800d4d0:	a379      	add	r3, pc, #484	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x300>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	e7de      	b.n	800d496 <__ieee754_rem_pio2+0xde>
 800d4d8:	4b82      	ldr	r3, [pc, #520]	@ (800d6e4 <__ieee754_rem_pio2+0x32c>)
 800d4da:	4598      	cmp	r8, r3
 800d4dc:	f200 80d1 	bhi.w	800d682 <__ieee754_rem_pio2+0x2ca>
 800d4e0:	f000 fafe 	bl	800dae0 <fabs>
 800d4e4:	ec57 6b10 	vmov	r6, r7, d0
 800d4e8:	a375      	add	r3, pc, #468	@ (adr r3, 800d6c0 <__ieee754_rem_pio2+0x308>)
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	f7f3 f8a1 	bl	8000638 <__aeabi_dmul>
 800d4f6:	4b7c      	ldr	r3, [pc, #496]	@ (800d6e8 <__ieee754_rem_pio2+0x330>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f7f2 fee7 	bl	80002cc <__adddf3>
 800d4fe:	f7f3 fb4b 	bl	8000b98 <__aeabi_d2iz>
 800d502:	4605      	mov	r5, r0
 800d504:	f7f3 f82e 	bl	8000564 <__aeabi_i2d>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d510:	a363      	add	r3, pc, #396	@ (adr r3, 800d6a0 <__ieee754_rem_pio2+0x2e8>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f7f3 f88f 	bl	8000638 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4630      	mov	r0, r6
 800d520:	4639      	mov	r1, r7
 800d522:	f7f2 fed1 	bl	80002c8 <__aeabi_dsub>
 800d526:	a360      	add	r3, pc, #384	@ (adr r3, 800d6a8 <__ieee754_rem_pio2+0x2f0>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	4682      	mov	sl, r0
 800d52e:	468b      	mov	fp, r1
 800d530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d534:	f7f3 f880 	bl	8000638 <__aeabi_dmul>
 800d538:	2d1f      	cmp	r5, #31
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	dc0c      	bgt.n	800d55a <__ieee754_rem_pio2+0x1a2>
 800d540:	4b6a      	ldr	r3, [pc, #424]	@ (800d6ec <__ieee754_rem_pio2+0x334>)
 800d542:	1e6a      	subs	r2, r5, #1
 800d544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d548:	4543      	cmp	r3, r8
 800d54a:	d006      	beq.n	800d55a <__ieee754_rem_pio2+0x1a2>
 800d54c:	4632      	mov	r2, r6
 800d54e:	463b      	mov	r3, r7
 800d550:	4650      	mov	r0, sl
 800d552:	4659      	mov	r1, fp
 800d554:	f7f2 feb8 	bl	80002c8 <__aeabi_dsub>
 800d558:	e00e      	b.n	800d578 <__ieee754_rem_pio2+0x1c0>
 800d55a:	463b      	mov	r3, r7
 800d55c:	4632      	mov	r2, r6
 800d55e:	4650      	mov	r0, sl
 800d560:	4659      	mov	r1, fp
 800d562:	f7f2 feb1 	bl	80002c8 <__aeabi_dsub>
 800d566:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d56a:	9305      	str	r3, [sp, #20]
 800d56c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d570:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d574:	2b10      	cmp	r3, #16
 800d576:	dc02      	bgt.n	800d57e <__ieee754_rem_pio2+0x1c6>
 800d578:	e9c4 0100 	strd	r0, r1, [r4]
 800d57c:	e039      	b.n	800d5f2 <__ieee754_rem_pio2+0x23a>
 800d57e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d6b0 <__ieee754_rem_pio2+0x2f8>)
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d588:	f7f3 f856 	bl	8000638 <__aeabi_dmul>
 800d58c:	4606      	mov	r6, r0
 800d58e:	460f      	mov	r7, r1
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4650      	mov	r0, sl
 800d596:	4659      	mov	r1, fp
 800d598:	f7f2 fe96 	bl	80002c8 <__aeabi_dsub>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4689      	mov	r9, r1
 800d5a4:	4650      	mov	r0, sl
 800d5a6:	4659      	mov	r1, fp
 800d5a8:	f7f2 fe8e 	bl	80002c8 <__aeabi_dsub>
 800d5ac:	4632      	mov	r2, r6
 800d5ae:	463b      	mov	r3, r7
 800d5b0:	f7f2 fe8a 	bl	80002c8 <__aeabi_dsub>
 800d5b4:	a340      	add	r3, pc, #256	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x300>)
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5c2:	f7f3 f839 	bl	8000638 <__aeabi_dmul>
 800d5c6:	4632      	mov	r2, r6
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	f7f2 fe7d 	bl	80002c8 <__aeabi_dsub>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460f      	mov	r7, r1
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	4649      	mov	r1, r9
 800d5da:	f7f2 fe75 	bl	80002c8 <__aeabi_dsub>
 800d5de:	9a05      	ldr	r2, [sp, #20]
 800d5e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b31      	cmp	r3, #49	@ 0x31
 800d5e8:	dc20      	bgt.n	800d62c <__ieee754_rem_pio2+0x274>
 800d5ea:	e9c4 0100 	strd	r0, r1, [r4]
 800d5ee:	46c2      	mov	sl, r8
 800d5f0:	46cb      	mov	fp, r9
 800d5f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d5f6:	4650      	mov	r0, sl
 800d5f8:	4642      	mov	r2, r8
 800d5fa:	464b      	mov	r3, r9
 800d5fc:	4659      	mov	r1, fp
 800d5fe:	f7f2 fe63 	bl	80002c8 <__aeabi_dsub>
 800d602:	463b      	mov	r3, r7
 800d604:	4632      	mov	r2, r6
 800d606:	f7f2 fe5f 	bl	80002c8 <__aeabi_dsub>
 800d60a:	9b04      	ldr	r3, [sp, #16]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d612:	f6bf af0e 	bge.w	800d432 <__ieee754_rem_pio2+0x7a>
 800d616:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d61a:	6063      	str	r3, [r4, #4]
 800d61c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d620:	f8c4 8000 	str.w	r8, [r4]
 800d624:	60a0      	str	r0, [r4, #8]
 800d626:	60e3      	str	r3, [r4, #12]
 800d628:	426d      	negs	r5, r5
 800d62a:	e702      	b.n	800d432 <__ieee754_rem_pio2+0x7a>
 800d62c:	a326      	add	r3, pc, #152	@ (adr r3, 800d6c8 <__ieee754_rem_pio2+0x310>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d636:	f7f2 ffff 	bl	8000638 <__aeabi_dmul>
 800d63a:	4606      	mov	r6, r0
 800d63c:	460f      	mov	r7, r1
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4640      	mov	r0, r8
 800d644:	4649      	mov	r1, r9
 800d646:	f7f2 fe3f 	bl	80002c8 <__aeabi_dsub>
 800d64a:	4602      	mov	r2, r0
 800d64c:	460b      	mov	r3, r1
 800d64e:	4682      	mov	sl, r0
 800d650:	468b      	mov	fp, r1
 800d652:	4640      	mov	r0, r8
 800d654:	4649      	mov	r1, r9
 800d656:	f7f2 fe37 	bl	80002c8 <__aeabi_dsub>
 800d65a:	4632      	mov	r2, r6
 800d65c:	463b      	mov	r3, r7
 800d65e:	f7f2 fe33 	bl	80002c8 <__aeabi_dsub>
 800d662:	a31b      	add	r3, pc, #108	@ (adr r3, 800d6d0 <__ieee754_rem_pio2+0x318>)
 800d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d668:	4606      	mov	r6, r0
 800d66a:	460f      	mov	r7, r1
 800d66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d670:	f7f2 ffe2 	bl	8000638 <__aeabi_dmul>
 800d674:	4632      	mov	r2, r6
 800d676:	463b      	mov	r3, r7
 800d678:	f7f2 fe26 	bl	80002c8 <__aeabi_dsub>
 800d67c:	4606      	mov	r6, r0
 800d67e:	460f      	mov	r7, r1
 800d680:	e764      	b.n	800d54c <__ieee754_rem_pio2+0x194>
 800d682:	4b1b      	ldr	r3, [pc, #108]	@ (800d6f0 <__ieee754_rem_pio2+0x338>)
 800d684:	4598      	cmp	r8, r3
 800d686:	d935      	bls.n	800d6f4 <__ieee754_rem_pio2+0x33c>
 800d688:	4632      	mov	r2, r6
 800d68a:	463b      	mov	r3, r7
 800d68c:	4630      	mov	r0, r6
 800d68e:	4639      	mov	r1, r7
 800d690:	f7f2 fe1a 	bl	80002c8 <__aeabi_dsub>
 800d694:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d698:	e9c4 0100 	strd	r0, r1, [r4]
 800d69c:	e69e      	b.n	800d3dc <__ieee754_rem_pio2+0x24>
 800d69e:	bf00      	nop
 800d6a0:	54400000 	.word	0x54400000
 800d6a4:	3ff921fb 	.word	0x3ff921fb
 800d6a8:	1a626331 	.word	0x1a626331
 800d6ac:	3dd0b461 	.word	0x3dd0b461
 800d6b0:	1a600000 	.word	0x1a600000
 800d6b4:	3dd0b461 	.word	0x3dd0b461
 800d6b8:	2e037073 	.word	0x2e037073
 800d6bc:	3ba3198a 	.word	0x3ba3198a
 800d6c0:	6dc9c883 	.word	0x6dc9c883
 800d6c4:	3fe45f30 	.word	0x3fe45f30
 800d6c8:	2e000000 	.word	0x2e000000
 800d6cc:	3ba3198a 	.word	0x3ba3198a
 800d6d0:	252049c1 	.word	0x252049c1
 800d6d4:	397b839a 	.word	0x397b839a
 800d6d8:	3fe921fb 	.word	0x3fe921fb
 800d6dc:	4002d97b 	.word	0x4002d97b
 800d6e0:	3ff921fb 	.word	0x3ff921fb
 800d6e4:	413921fb 	.word	0x413921fb
 800d6e8:	3fe00000 	.word	0x3fe00000
 800d6ec:	0800e8b0 	.word	0x0800e8b0
 800d6f0:	7fefffff 	.word	0x7fefffff
 800d6f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d6f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d6fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d700:	4630      	mov	r0, r6
 800d702:	460f      	mov	r7, r1
 800d704:	f7f3 fa48 	bl	8000b98 <__aeabi_d2iz>
 800d708:	f7f2 ff2c 	bl	8000564 <__aeabi_i2d>
 800d70c:	4602      	mov	r2, r0
 800d70e:	460b      	mov	r3, r1
 800d710:	4630      	mov	r0, r6
 800d712:	4639      	mov	r1, r7
 800d714:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d718:	f7f2 fdd6 	bl	80002c8 <__aeabi_dsub>
 800d71c:	4b22      	ldr	r3, [pc, #136]	@ (800d7a8 <__ieee754_rem_pio2+0x3f0>)
 800d71e:	2200      	movs	r2, #0
 800d720:	f7f2 ff8a 	bl	8000638 <__aeabi_dmul>
 800d724:	460f      	mov	r7, r1
 800d726:	4606      	mov	r6, r0
 800d728:	f7f3 fa36 	bl	8000b98 <__aeabi_d2iz>
 800d72c:	f7f2 ff1a 	bl	8000564 <__aeabi_i2d>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4630      	mov	r0, r6
 800d736:	4639      	mov	r1, r7
 800d738:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d73c:	f7f2 fdc4 	bl	80002c8 <__aeabi_dsub>
 800d740:	4b19      	ldr	r3, [pc, #100]	@ (800d7a8 <__ieee754_rem_pio2+0x3f0>)
 800d742:	2200      	movs	r2, #0
 800d744:	f7f2 ff78 	bl	8000638 <__aeabi_dmul>
 800d748:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d74c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d750:	f04f 0803 	mov.w	r8, #3
 800d754:	2600      	movs	r6, #0
 800d756:	2700      	movs	r7, #0
 800d758:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d75c:	4632      	mov	r2, r6
 800d75e:	463b      	mov	r3, r7
 800d760:	46c2      	mov	sl, r8
 800d762:	f108 38ff 	add.w	r8, r8, #4294967295
 800d766:	f7f3 f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d1f4      	bne.n	800d758 <__ieee754_rem_pio2+0x3a0>
 800d76e:	4b0f      	ldr	r3, [pc, #60]	@ (800d7ac <__ieee754_rem_pio2+0x3f4>)
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	2302      	movs	r3, #2
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	462a      	mov	r2, r5
 800d778:	4653      	mov	r3, sl
 800d77a:	4621      	mov	r1, r4
 800d77c:	a806      	add	r0, sp, #24
 800d77e:	f000 f9b7 	bl	800daf0 <__kernel_rem_pio2>
 800d782:	9b04      	ldr	r3, [sp, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	4605      	mov	r5, r0
 800d788:	f6bf ae53 	bge.w	800d432 <__ieee754_rem_pio2+0x7a>
 800d78c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d790:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d794:	e9c4 2300 	strd	r2, r3, [r4]
 800d798:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d79c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d7a4:	e740      	b.n	800d628 <__ieee754_rem_pio2+0x270>
 800d7a6:	bf00      	nop
 800d7a8:	41700000 	.word	0x41700000
 800d7ac:	0800e930 	.word	0x0800e930

0800d7b0 <atan>:
 800d7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	ec55 4b10 	vmov	r4, r5, d0
 800d7b8:	4bbf      	ldr	r3, [pc, #764]	@ (800dab8 <atan+0x308>)
 800d7ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d7be:	429e      	cmp	r6, r3
 800d7c0:	46ab      	mov	fp, r5
 800d7c2:	d918      	bls.n	800d7f6 <atan+0x46>
 800d7c4:	4bbd      	ldr	r3, [pc, #756]	@ (800dabc <atan+0x30c>)
 800d7c6:	429e      	cmp	r6, r3
 800d7c8:	d801      	bhi.n	800d7ce <atan+0x1e>
 800d7ca:	d109      	bne.n	800d7e0 <atan+0x30>
 800d7cc:	b144      	cbz	r4, 800d7e0 <atan+0x30>
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	f7f2 fd79 	bl	80002cc <__adddf3>
 800d7da:	4604      	mov	r4, r0
 800d7dc:	460d      	mov	r5, r1
 800d7de:	e006      	b.n	800d7ee <atan+0x3e>
 800d7e0:	f1bb 0f00 	cmp.w	fp, #0
 800d7e4:	f340 812b 	ble.w	800da3e <atan+0x28e>
 800d7e8:	a597      	add	r5, pc, #604	@ (adr r5, 800da48 <atan+0x298>)
 800d7ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7ee:	ec45 4b10 	vmov	d0, r4, r5
 800d7f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f6:	4bb2      	ldr	r3, [pc, #712]	@ (800dac0 <atan+0x310>)
 800d7f8:	429e      	cmp	r6, r3
 800d7fa:	d813      	bhi.n	800d824 <atan+0x74>
 800d7fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d800:	429e      	cmp	r6, r3
 800d802:	d80c      	bhi.n	800d81e <atan+0x6e>
 800d804:	a392      	add	r3, pc, #584	@ (adr r3, 800da50 <atan+0x2a0>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	4620      	mov	r0, r4
 800d80c:	4629      	mov	r1, r5
 800d80e:	f7f2 fd5d 	bl	80002cc <__adddf3>
 800d812:	4bac      	ldr	r3, [pc, #688]	@ (800dac4 <atan+0x314>)
 800d814:	2200      	movs	r2, #0
 800d816:	f7f3 f99f 	bl	8000b58 <__aeabi_dcmpgt>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d1e7      	bne.n	800d7ee <atan+0x3e>
 800d81e:	f04f 3aff 	mov.w	sl, #4294967295
 800d822:	e029      	b.n	800d878 <atan+0xc8>
 800d824:	f000 f95c 	bl	800dae0 <fabs>
 800d828:	4ba7      	ldr	r3, [pc, #668]	@ (800dac8 <atan+0x318>)
 800d82a:	429e      	cmp	r6, r3
 800d82c:	ec55 4b10 	vmov	r4, r5, d0
 800d830:	f200 80bc 	bhi.w	800d9ac <atan+0x1fc>
 800d834:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d838:	429e      	cmp	r6, r3
 800d83a:	f200 809e 	bhi.w	800d97a <atan+0x1ca>
 800d83e:	4622      	mov	r2, r4
 800d840:	462b      	mov	r3, r5
 800d842:	4620      	mov	r0, r4
 800d844:	4629      	mov	r1, r5
 800d846:	f7f2 fd41 	bl	80002cc <__adddf3>
 800d84a:	4b9e      	ldr	r3, [pc, #632]	@ (800dac4 <atan+0x314>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	f7f2 fd3b 	bl	80002c8 <__aeabi_dsub>
 800d852:	2200      	movs	r2, #0
 800d854:	4606      	mov	r6, r0
 800d856:	460f      	mov	r7, r1
 800d858:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d85c:	4620      	mov	r0, r4
 800d85e:	4629      	mov	r1, r5
 800d860:	f7f2 fd34 	bl	80002cc <__adddf3>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4630      	mov	r0, r6
 800d86a:	4639      	mov	r1, r7
 800d86c:	f7f3 f80e 	bl	800088c <__aeabi_ddiv>
 800d870:	f04f 0a00 	mov.w	sl, #0
 800d874:	4604      	mov	r4, r0
 800d876:	460d      	mov	r5, r1
 800d878:	4622      	mov	r2, r4
 800d87a:	462b      	mov	r3, r5
 800d87c:	4620      	mov	r0, r4
 800d87e:	4629      	mov	r1, r5
 800d880:	f7f2 feda 	bl	8000638 <__aeabi_dmul>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	4680      	mov	r8, r0
 800d88a:	4689      	mov	r9, r1
 800d88c:	f7f2 fed4 	bl	8000638 <__aeabi_dmul>
 800d890:	a371      	add	r3, pc, #452	@ (adr r3, 800da58 <atan+0x2a8>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	f7f2 fecd 	bl	8000638 <__aeabi_dmul>
 800d89e:	a370      	add	r3, pc, #448	@ (adr r3, 800da60 <atan+0x2b0>)
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	f7f2 fd12 	bl	80002cc <__adddf3>
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	463b      	mov	r3, r7
 800d8ac:	f7f2 fec4 	bl	8000638 <__aeabi_dmul>
 800d8b0:	a36d      	add	r3, pc, #436	@ (adr r3, 800da68 <atan+0x2b8>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	f7f2 fd09 	bl	80002cc <__adddf3>
 800d8ba:	4632      	mov	r2, r6
 800d8bc:	463b      	mov	r3, r7
 800d8be:	f7f2 febb 	bl	8000638 <__aeabi_dmul>
 800d8c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800da70 <atan+0x2c0>)
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	f7f2 fd00 	bl	80002cc <__adddf3>
 800d8cc:	4632      	mov	r2, r6
 800d8ce:	463b      	mov	r3, r7
 800d8d0:	f7f2 feb2 	bl	8000638 <__aeabi_dmul>
 800d8d4:	a368      	add	r3, pc, #416	@ (adr r3, 800da78 <atan+0x2c8>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	f7f2 fcf7 	bl	80002cc <__adddf3>
 800d8de:	4632      	mov	r2, r6
 800d8e0:	463b      	mov	r3, r7
 800d8e2:	f7f2 fea9 	bl	8000638 <__aeabi_dmul>
 800d8e6:	a366      	add	r3, pc, #408	@ (adr r3, 800da80 <atan+0x2d0>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fcee 	bl	80002cc <__adddf3>
 800d8f0:	4642      	mov	r2, r8
 800d8f2:	464b      	mov	r3, r9
 800d8f4:	f7f2 fea0 	bl	8000638 <__aeabi_dmul>
 800d8f8:	a363      	add	r3, pc, #396	@ (adr r3, 800da88 <atan+0x2d8>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	4680      	mov	r8, r0
 800d900:	4689      	mov	r9, r1
 800d902:	4630      	mov	r0, r6
 800d904:	4639      	mov	r1, r7
 800d906:	f7f2 fe97 	bl	8000638 <__aeabi_dmul>
 800d90a:	a361      	add	r3, pc, #388	@ (adr r3, 800da90 <atan+0x2e0>)
 800d90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d910:	f7f2 fcda 	bl	80002c8 <__aeabi_dsub>
 800d914:	4632      	mov	r2, r6
 800d916:	463b      	mov	r3, r7
 800d918:	f7f2 fe8e 	bl	8000638 <__aeabi_dmul>
 800d91c:	a35e      	add	r3, pc, #376	@ (adr r3, 800da98 <atan+0x2e8>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	f7f2 fcd1 	bl	80002c8 <__aeabi_dsub>
 800d926:	4632      	mov	r2, r6
 800d928:	463b      	mov	r3, r7
 800d92a:	f7f2 fe85 	bl	8000638 <__aeabi_dmul>
 800d92e:	a35c      	add	r3, pc, #368	@ (adr r3, 800daa0 <atan+0x2f0>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f7f2 fcc8 	bl	80002c8 <__aeabi_dsub>
 800d938:	4632      	mov	r2, r6
 800d93a:	463b      	mov	r3, r7
 800d93c:	f7f2 fe7c 	bl	8000638 <__aeabi_dmul>
 800d940:	a359      	add	r3, pc, #356	@ (adr r3, 800daa8 <atan+0x2f8>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fcbf 	bl	80002c8 <__aeabi_dsub>
 800d94a:	4632      	mov	r2, r6
 800d94c:	463b      	mov	r3, r7
 800d94e:	f7f2 fe73 	bl	8000638 <__aeabi_dmul>
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	4640      	mov	r0, r8
 800d958:	4649      	mov	r1, r9
 800d95a:	f7f2 fcb7 	bl	80002cc <__adddf3>
 800d95e:	4622      	mov	r2, r4
 800d960:	462b      	mov	r3, r5
 800d962:	f7f2 fe69 	bl	8000638 <__aeabi_dmul>
 800d966:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	d148      	bne.n	800da02 <atan+0x252>
 800d970:	4620      	mov	r0, r4
 800d972:	4629      	mov	r1, r5
 800d974:	f7f2 fca8 	bl	80002c8 <__aeabi_dsub>
 800d978:	e72f      	b.n	800d7da <atan+0x2a>
 800d97a:	4b52      	ldr	r3, [pc, #328]	@ (800dac4 <atan+0x314>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	4620      	mov	r0, r4
 800d980:	4629      	mov	r1, r5
 800d982:	f7f2 fca1 	bl	80002c8 <__aeabi_dsub>
 800d986:	4b4f      	ldr	r3, [pc, #316]	@ (800dac4 <atan+0x314>)
 800d988:	4606      	mov	r6, r0
 800d98a:	460f      	mov	r7, r1
 800d98c:	2200      	movs	r2, #0
 800d98e:	4620      	mov	r0, r4
 800d990:	4629      	mov	r1, r5
 800d992:	f7f2 fc9b 	bl	80002cc <__adddf3>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	4630      	mov	r0, r6
 800d99c:	4639      	mov	r1, r7
 800d99e:	f7f2 ff75 	bl	800088c <__aeabi_ddiv>
 800d9a2:	f04f 0a01 	mov.w	sl, #1
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	460d      	mov	r5, r1
 800d9aa:	e765      	b.n	800d878 <atan+0xc8>
 800d9ac:	4b47      	ldr	r3, [pc, #284]	@ (800dacc <atan+0x31c>)
 800d9ae:	429e      	cmp	r6, r3
 800d9b0:	d21c      	bcs.n	800d9ec <atan+0x23c>
 800d9b2:	4b47      	ldr	r3, [pc, #284]	@ (800dad0 <atan+0x320>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f2 fc85 	bl	80002c8 <__aeabi_dsub>
 800d9be:	4b44      	ldr	r3, [pc, #272]	@ (800dad0 <atan+0x320>)
 800d9c0:	4606      	mov	r6, r0
 800d9c2:	460f      	mov	r7, r1
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	f7f2 fe35 	bl	8000638 <__aeabi_dmul>
 800d9ce:	4b3d      	ldr	r3, [pc, #244]	@ (800dac4 <atan+0x314>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f7f2 fc7b 	bl	80002cc <__adddf3>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4630      	mov	r0, r6
 800d9dc:	4639      	mov	r1, r7
 800d9de:	f7f2 ff55 	bl	800088c <__aeabi_ddiv>
 800d9e2:	f04f 0a02 	mov.w	sl, #2
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	460d      	mov	r5, r1
 800d9ea:	e745      	b.n	800d878 <atan+0xc8>
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	462b      	mov	r3, r5
 800d9f0:	4938      	ldr	r1, [pc, #224]	@ (800dad4 <atan+0x324>)
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f7f2 ff4a 	bl	800088c <__aeabi_ddiv>
 800d9f8:	f04f 0a03 	mov.w	sl, #3
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
 800da00:	e73a      	b.n	800d878 <atan+0xc8>
 800da02:	4b35      	ldr	r3, [pc, #212]	@ (800dad8 <atan+0x328>)
 800da04:	4e35      	ldr	r6, [pc, #212]	@ (800dadc <atan+0x32c>)
 800da06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	f7f2 fc5b 	bl	80002c8 <__aeabi_dsub>
 800da12:	4622      	mov	r2, r4
 800da14:	462b      	mov	r3, r5
 800da16:	f7f2 fc57 	bl	80002c8 <__aeabi_dsub>
 800da1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	e9d6 0100 	ldrd	r0, r1, [r6]
 800da26:	f7f2 fc4f 	bl	80002c8 <__aeabi_dsub>
 800da2a:	f1bb 0f00 	cmp.w	fp, #0
 800da2e:	4604      	mov	r4, r0
 800da30:	460d      	mov	r5, r1
 800da32:	f6bf aedc 	bge.w	800d7ee <atan+0x3e>
 800da36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da3a:	461d      	mov	r5, r3
 800da3c:	e6d7      	b.n	800d7ee <atan+0x3e>
 800da3e:	a51c      	add	r5, pc, #112	@ (adr r5, 800dab0 <atan+0x300>)
 800da40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da44:	e6d3      	b.n	800d7ee <atan+0x3e>
 800da46:	bf00      	nop
 800da48:	54442d18 	.word	0x54442d18
 800da4c:	3ff921fb 	.word	0x3ff921fb
 800da50:	8800759c 	.word	0x8800759c
 800da54:	7e37e43c 	.word	0x7e37e43c
 800da58:	e322da11 	.word	0xe322da11
 800da5c:	3f90ad3a 	.word	0x3f90ad3a
 800da60:	24760deb 	.word	0x24760deb
 800da64:	3fa97b4b 	.word	0x3fa97b4b
 800da68:	a0d03d51 	.word	0xa0d03d51
 800da6c:	3fb10d66 	.word	0x3fb10d66
 800da70:	c54c206e 	.word	0xc54c206e
 800da74:	3fb745cd 	.word	0x3fb745cd
 800da78:	920083ff 	.word	0x920083ff
 800da7c:	3fc24924 	.word	0x3fc24924
 800da80:	5555550d 	.word	0x5555550d
 800da84:	3fd55555 	.word	0x3fd55555
 800da88:	2c6a6c2f 	.word	0x2c6a6c2f
 800da8c:	bfa2b444 	.word	0xbfa2b444
 800da90:	52defd9a 	.word	0x52defd9a
 800da94:	3fadde2d 	.word	0x3fadde2d
 800da98:	af749a6d 	.word	0xaf749a6d
 800da9c:	3fb3b0f2 	.word	0x3fb3b0f2
 800daa0:	fe231671 	.word	0xfe231671
 800daa4:	3fbc71c6 	.word	0x3fbc71c6
 800daa8:	9998ebc4 	.word	0x9998ebc4
 800daac:	3fc99999 	.word	0x3fc99999
 800dab0:	54442d18 	.word	0x54442d18
 800dab4:	bff921fb 	.word	0xbff921fb
 800dab8:	440fffff 	.word	0x440fffff
 800dabc:	7ff00000 	.word	0x7ff00000
 800dac0:	3fdbffff 	.word	0x3fdbffff
 800dac4:	3ff00000 	.word	0x3ff00000
 800dac8:	3ff2ffff 	.word	0x3ff2ffff
 800dacc:	40038000 	.word	0x40038000
 800dad0:	3ff80000 	.word	0x3ff80000
 800dad4:	bff00000 	.word	0xbff00000
 800dad8:	0800ea38 	.word	0x0800ea38
 800dadc:	0800ea58 	.word	0x0800ea58

0800dae0 <fabs>:
 800dae0:	ec51 0b10 	vmov	r0, r1, d0
 800dae4:	4602      	mov	r2, r0
 800dae6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800daea:	ec43 2b10 	vmov	d0, r2, r3
 800daee:	4770      	bx	lr

0800daf0 <__kernel_rem_pio2>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	ed2d 8b02 	vpush	{d8}
 800daf8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800dafc:	f112 0f14 	cmn.w	r2, #20
 800db00:	9306      	str	r3, [sp, #24]
 800db02:	9104      	str	r1, [sp, #16]
 800db04:	4bbe      	ldr	r3, [pc, #760]	@ (800de00 <__kernel_rem_pio2+0x310>)
 800db06:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800db08:	9008      	str	r0, [sp, #32]
 800db0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	9b06      	ldr	r3, [sp, #24]
 800db12:	f103 33ff 	add.w	r3, r3, #4294967295
 800db16:	bfa8      	it	ge
 800db18:	1ed4      	subge	r4, r2, #3
 800db1a:	9305      	str	r3, [sp, #20]
 800db1c:	bfb2      	itee	lt
 800db1e:	2400      	movlt	r4, #0
 800db20:	2318      	movge	r3, #24
 800db22:	fb94 f4f3 	sdivge	r4, r4, r3
 800db26:	f06f 0317 	mvn.w	r3, #23
 800db2a:	fb04 3303 	mla	r3, r4, r3, r3
 800db2e:	eb03 0b02 	add.w	fp, r3, r2
 800db32:	9b00      	ldr	r3, [sp, #0]
 800db34:	9a05      	ldr	r2, [sp, #20]
 800db36:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ddf0 <__kernel_rem_pio2+0x300>
 800db3a:	eb03 0802 	add.w	r8, r3, r2
 800db3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800db40:	1aa7      	subs	r7, r4, r2
 800db42:	ae20      	add	r6, sp, #128	@ 0x80
 800db44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800db48:	2500      	movs	r5, #0
 800db4a:	4545      	cmp	r5, r8
 800db4c:	dd13      	ble.n	800db76 <__kernel_rem_pio2+0x86>
 800db4e:	9b06      	ldr	r3, [sp, #24]
 800db50:	aa20      	add	r2, sp, #128	@ 0x80
 800db52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800db56:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800db5a:	f04f 0800 	mov.w	r8, #0
 800db5e:	9b00      	ldr	r3, [sp, #0]
 800db60:	4598      	cmp	r8, r3
 800db62:	dc31      	bgt.n	800dbc8 <__kernel_rem_pio2+0xd8>
 800db64:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ddf0 <__kernel_rem_pio2+0x300>
 800db68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db70:	462f      	mov	r7, r5
 800db72:	2600      	movs	r6, #0
 800db74:	e01b      	b.n	800dbae <__kernel_rem_pio2+0xbe>
 800db76:	42ef      	cmn	r7, r5
 800db78:	d407      	bmi.n	800db8a <__kernel_rem_pio2+0x9a>
 800db7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800db7e:	f7f2 fcf1 	bl	8000564 <__aeabi_i2d>
 800db82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800db86:	3501      	adds	r5, #1
 800db88:	e7df      	b.n	800db4a <__kernel_rem_pio2+0x5a>
 800db8a:	ec51 0b18 	vmov	r0, r1, d8
 800db8e:	e7f8      	b.n	800db82 <__kernel_rem_pio2+0x92>
 800db90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800db98:	f7f2 fd4e 	bl	8000638 <__aeabi_dmul>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dba4:	f7f2 fb92 	bl	80002cc <__adddf3>
 800dba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbac:	3601      	adds	r6, #1
 800dbae:	9b05      	ldr	r3, [sp, #20]
 800dbb0:	429e      	cmp	r6, r3
 800dbb2:	f1a7 0708 	sub.w	r7, r7, #8
 800dbb6:	ddeb      	ble.n	800db90 <__kernel_rem_pio2+0xa0>
 800dbb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbbc:	f108 0801 	add.w	r8, r8, #1
 800dbc0:	ecaa 7b02 	vstmia	sl!, {d7}
 800dbc4:	3508      	adds	r5, #8
 800dbc6:	e7ca      	b.n	800db5e <__kernel_rem_pio2+0x6e>
 800dbc8:	9b00      	ldr	r3, [sp, #0]
 800dbca:	f8dd 8000 	ldr.w	r8, [sp]
 800dbce:	aa0c      	add	r2, sp, #48	@ 0x30
 800dbd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800dbd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800dbe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbe4:	ab98      	add	r3, sp, #608	@ 0x260
 800dbe6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dbea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800dbee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbf2:	ac0c      	add	r4, sp, #48	@ 0x30
 800dbf4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dbf6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800dbfa:	46a1      	mov	r9, r4
 800dbfc:	46c2      	mov	sl, r8
 800dbfe:	f1ba 0f00 	cmp.w	sl, #0
 800dc02:	f1a5 0508 	sub.w	r5, r5, #8
 800dc06:	dc77      	bgt.n	800dcf8 <__kernel_rem_pio2+0x208>
 800dc08:	4658      	mov	r0, fp
 800dc0a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800dc0e:	f000 fac7 	bl	800e1a0 <scalbn>
 800dc12:	ec57 6b10 	vmov	r6, r7, d0
 800dc16:	2200      	movs	r2, #0
 800dc18:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	4639      	mov	r1, r7
 800dc20:	f7f2 fd0a 	bl	8000638 <__aeabi_dmul>
 800dc24:	ec41 0b10 	vmov	d0, r0, r1
 800dc28:	f000 fb3a 	bl	800e2a0 <floor>
 800dc2c:	4b75      	ldr	r3, [pc, #468]	@ (800de04 <__kernel_rem_pio2+0x314>)
 800dc2e:	ec51 0b10 	vmov	r0, r1, d0
 800dc32:	2200      	movs	r2, #0
 800dc34:	f7f2 fd00 	bl	8000638 <__aeabi_dmul>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	4639      	mov	r1, r7
 800dc40:	f7f2 fb42 	bl	80002c8 <__aeabi_dsub>
 800dc44:	460f      	mov	r7, r1
 800dc46:	4606      	mov	r6, r0
 800dc48:	f7f2 ffa6 	bl	8000b98 <__aeabi_d2iz>
 800dc4c:	9002      	str	r0, [sp, #8]
 800dc4e:	f7f2 fc89 	bl	8000564 <__aeabi_i2d>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	4630      	mov	r0, r6
 800dc58:	4639      	mov	r1, r7
 800dc5a:	f7f2 fb35 	bl	80002c8 <__aeabi_dsub>
 800dc5e:	f1bb 0f00 	cmp.w	fp, #0
 800dc62:	4606      	mov	r6, r0
 800dc64:	460f      	mov	r7, r1
 800dc66:	dd6c      	ble.n	800dd42 <__kernel_rem_pio2+0x252>
 800dc68:	f108 31ff 	add.w	r1, r8, #4294967295
 800dc6c:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc6e:	9d02      	ldr	r5, [sp, #8]
 800dc70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc74:	f1cb 0018 	rsb	r0, fp, #24
 800dc78:	fa43 f200 	asr.w	r2, r3, r0
 800dc7c:	4415      	add	r5, r2
 800dc7e:	4082      	lsls	r2, r0
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	aa0c      	add	r2, sp, #48	@ 0x30
 800dc84:	9502      	str	r5, [sp, #8]
 800dc86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dc8a:	f1cb 0217 	rsb	r2, fp, #23
 800dc8e:	fa43 f902 	asr.w	r9, r3, r2
 800dc92:	f1b9 0f00 	cmp.w	r9, #0
 800dc96:	dd64      	ble.n	800dd62 <__kernel_rem_pio2+0x272>
 800dc98:	9b02      	ldr	r3, [sp, #8]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	9302      	str	r3, [sp, #8]
 800dca0:	4615      	mov	r5, r2
 800dca2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dca6:	4590      	cmp	r8, r2
 800dca8:	f300 80b8 	bgt.w	800de1c <__kernel_rem_pio2+0x32c>
 800dcac:	f1bb 0f00 	cmp.w	fp, #0
 800dcb0:	dd07      	ble.n	800dcc2 <__kernel_rem_pio2+0x1d2>
 800dcb2:	f1bb 0f01 	cmp.w	fp, #1
 800dcb6:	f000 80bf 	beq.w	800de38 <__kernel_rem_pio2+0x348>
 800dcba:	f1bb 0f02 	cmp.w	fp, #2
 800dcbe:	f000 80c6 	beq.w	800de4e <__kernel_rem_pio2+0x35e>
 800dcc2:	f1b9 0f02 	cmp.w	r9, #2
 800dcc6:	d14c      	bne.n	800dd62 <__kernel_rem_pio2+0x272>
 800dcc8:	4632      	mov	r2, r6
 800dcca:	463b      	mov	r3, r7
 800dccc:	494e      	ldr	r1, [pc, #312]	@ (800de08 <__kernel_rem_pio2+0x318>)
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f7f2 fafa 	bl	80002c8 <__aeabi_dsub>
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	460f      	mov	r7, r1
 800dcd8:	2d00      	cmp	r5, #0
 800dcda:	d042      	beq.n	800dd62 <__kernel_rem_pio2+0x272>
 800dcdc:	4658      	mov	r0, fp
 800dcde:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ddf8 <__kernel_rem_pio2+0x308>
 800dce2:	f000 fa5d 	bl	800e1a0 <scalbn>
 800dce6:	4630      	mov	r0, r6
 800dce8:	4639      	mov	r1, r7
 800dcea:	ec53 2b10 	vmov	r2, r3, d0
 800dcee:	f7f2 faeb 	bl	80002c8 <__aeabi_dsub>
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	e034      	b.n	800dd62 <__kernel_rem_pio2+0x272>
 800dcf8:	4b44      	ldr	r3, [pc, #272]	@ (800de0c <__kernel_rem_pio2+0x31c>)
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd00:	f7f2 fc9a 	bl	8000638 <__aeabi_dmul>
 800dd04:	f7f2 ff48 	bl	8000b98 <__aeabi_d2iz>
 800dd08:	f7f2 fc2c 	bl	8000564 <__aeabi_i2d>
 800dd0c:	4b40      	ldr	r3, [pc, #256]	@ (800de10 <__kernel_rem_pio2+0x320>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	4606      	mov	r6, r0
 800dd12:	460f      	mov	r7, r1
 800dd14:	f7f2 fc90 	bl	8000638 <__aeabi_dmul>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd20:	f7f2 fad2 	bl	80002c8 <__aeabi_dsub>
 800dd24:	f7f2 ff38 	bl	8000b98 <__aeabi_d2iz>
 800dd28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd2c:	f849 0b04 	str.w	r0, [r9], #4
 800dd30:	4639      	mov	r1, r7
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7f2 faca 	bl	80002cc <__adddf3>
 800dd38:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd40:	e75d      	b.n	800dbfe <__kernel_rem_pio2+0x10e>
 800dd42:	d107      	bne.n	800dd54 <__kernel_rem_pio2+0x264>
 800dd44:	f108 33ff 	add.w	r3, r8, #4294967295
 800dd48:	aa0c      	add	r2, sp, #48	@ 0x30
 800dd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd4e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800dd52:	e79e      	b.n	800dc92 <__kernel_rem_pio2+0x1a2>
 800dd54:	4b2f      	ldr	r3, [pc, #188]	@ (800de14 <__kernel_rem_pio2+0x324>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	f7f2 fef4 	bl	8000b44 <__aeabi_dcmpge>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d143      	bne.n	800dde8 <__kernel_rem_pio2+0x2f8>
 800dd60:	4681      	mov	r9, r0
 800dd62:	2200      	movs	r2, #0
 800dd64:	2300      	movs	r3, #0
 800dd66:	4630      	mov	r0, r6
 800dd68:	4639      	mov	r1, r7
 800dd6a:	f7f2 fecd 	bl	8000b08 <__aeabi_dcmpeq>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	f000 80bf 	beq.w	800def2 <__kernel_rem_pio2+0x402>
 800dd74:	f108 33ff 	add.w	r3, r8, #4294967295
 800dd78:	2200      	movs	r2, #0
 800dd7a:	9900      	ldr	r1, [sp, #0]
 800dd7c:	428b      	cmp	r3, r1
 800dd7e:	da6e      	bge.n	800de5e <__kernel_rem_pio2+0x36e>
 800dd80:	2a00      	cmp	r2, #0
 800dd82:	f000 8089 	beq.w	800de98 <__kernel_rem_pio2+0x3a8>
 800dd86:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd8a:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd8c:	f1ab 0b18 	sub.w	fp, fp, #24
 800dd90:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d0f6      	beq.n	800dd86 <__kernel_rem_pio2+0x296>
 800dd98:	4658      	mov	r0, fp
 800dd9a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ddf8 <__kernel_rem_pio2+0x308>
 800dd9e:	f000 f9ff 	bl	800e1a0 <scalbn>
 800dda2:	f108 0301 	add.w	r3, r8, #1
 800dda6:	00da      	lsls	r2, r3, #3
 800dda8:	9205      	str	r2, [sp, #20]
 800ddaa:	ec55 4b10 	vmov	r4, r5, d0
 800ddae:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ddb0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800de0c <__kernel_rem_pio2+0x31c>
 800ddb4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ddb8:	4646      	mov	r6, r8
 800ddba:	f04f 0a00 	mov.w	sl, #0
 800ddbe:	2e00      	cmp	r6, #0
 800ddc0:	f280 80cf 	bge.w	800df62 <__kernel_rem_pio2+0x472>
 800ddc4:	4644      	mov	r4, r8
 800ddc6:	2c00      	cmp	r4, #0
 800ddc8:	f2c0 80fd 	blt.w	800dfc6 <__kernel_rem_pio2+0x4d6>
 800ddcc:	4b12      	ldr	r3, [pc, #72]	@ (800de18 <__kernel_rem_pio2+0x328>)
 800ddce:	461f      	mov	r7, r3
 800ddd0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ddd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddd6:	9306      	str	r3, [sp, #24]
 800ddd8:	f04f 0a00 	mov.w	sl, #0
 800dddc:	f04f 0b00 	mov.w	fp, #0
 800dde0:	2600      	movs	r6, #0
 800dde2:	eba8 0504 	sub.w	r5, r8, r4
 800dde6:	e0e2      	b.n	800dfae <__kernel_rem_pio2+0x4be>
 800dde8:	f04f 0902 	mov.w	r9, #2
 800ddec:	e754      	b.n	800dc98 <__kernel_rem_pio2+0x1a8>
 800ddee:	bf00      	nop
	...
 800ddfc:	3ff00000 	.word	0x3ff00000
 800de00:	0800eab8 	.word	0x0800eab8
 800de04:	40200000 	.word	0x40200000
 800de08:	3ff00000 	.word	0x3ff00000
 800de0c:	3e700000 	.word	0x3e700000
 800de10:	41700000 	.word	0x41700000
 800de14:	3fe00000 	.word	0x3fe00000
 800de18:	0800ea78 	.word	0x0800ea78
 800de1c:	f854 3b04 	ldr.w	r3, [r4], #4
 800de20:	b945      	cbnz	r5, 800de34 <__kernel_rem_pio2+0x344>
 800de22:	b123      	cbz	r3, 800de2e <__kernel_rem_pio2+0x33e>
 800de24:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800de28:	f844 3c04 	str.w	r3, [r4, #-4]
 800de2c:	2301      	movs	r3, #1
 800de2e:	3201      	adds	r2, #1
 800de30:	461d      	mov	r5, r3
 800de32:	e738      	b.n	800dca6 <__kernel_rem_pio2+0x1b6>
 800de34:	1acb      	subs	r3, r1, r3
 800de36:	e7f7      	b.n	800de28 <__kernel_rem_pio2+0x338>
 800de38:	f108 32ff 	add.w	r2, r8, #4294967295
 800de3c:	ab0c      	add	r3, sp, #48	@ 0x30
 800de3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de42:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800de46:	a90c      	add	r1, sp, #48	@ 0x30
 800de48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800de4c:	e739      	b.n	800dcc2 <__kernel_rem_pio2+0x1d2>
 800de4e:	f108 32ff 	add.w	r2, r8, #4294967295
 800de52:	ab0c      	add	r3, sp, #48	@ 0x30
 800de54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800de5c:	e7f3      	b.n	800de46 <__kernel_rem_pio2+0x356>
 800de5e:	a90c      	add	r1, sp, #48	@ 0x30
 800de60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800de64:	3b01      	subs	r3, #1
 800de66:	430a      	orrs	r2, r1
 800de68:	e787      	b.n	800dd7a <__kernel_rem_pio2+0x28a>
 800de6a:	3401      	adds	r4, #1
 800de6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800de70:	2a00      	cmp	r2, #0
 800de72:	d0fa      	beq.n	800de6a <__kernel_rem_pio2+0x37a>
 800de74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800de7a:	eb0d 0503 	add.w	r5, sp, r3
 800de7e:	9b06      	ldr	r3, [sp, #24]
 800de80:	aa20      	add	r2, sp, #128	@ 0x80
 800de82:	4443      	add	r3, r8
 800de84:	f108 0701 	add.w	r7, r8, #1
 800de88:	3d98      	subs	r5, #152	@ 0x98
 800de8a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800de8e:	4444      	add	r4, r8
 800de90:	42bc      	cmp	r4, r7
 800de92:	da04      	bge.n	800de9e <__kernel_rem_pio2+0x3ae>
 800de94:	46a0      	mov	r8, r4
 800de96:	e6a2      	b.n	800dbde <__kernel_rem_pio2+0xee>
 800de98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de9a:	2401      	movs	r4, #1
 800de9c:	e7e6      	b.n	800de6c <__kernel_rem_pio2+0x37c>
 800de9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800dea4:	f7f2 fb5e 	bl	8000564 <__aeabi_i2d>
 800dea8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e170 <__kernel_rem_pio2+0x680>
 800deac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800deb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800deb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800deb8:	46b2      	mov	sl, r6
 800deba:	f04f 0800 	mov.w	r8, #0
 800debe:	9b05      	ldr	r3, [sp, #20]
 800dec0:	4598      	cmp	r8, r3
 800dec2:	dd05      	ble.n	800ded0 <__kernel_rem_pio2+0x3e0>
 800dec4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dec8:	3701      	adds	r7, #1
 800deca:	eca5 7b02 	vstmia	r5!, {d7}
 800dece:	e7df      	b.n	800de90 <__kernel_rem_pio2+0x3a0>
 800ded0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ded4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ded8:	f7f2 fbae 	bl	8000638 <__aeabi_dmul>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee4:	f7f2 f9f2 	bl	80002cc <__adddf3>
 800dee8:	f108 0801 	add.w	r8, r8, #1
 800deec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800def0:	e7e5      	b.n	800debe <__kernel_rem_pio2+0x3ce>
 800def2:	f1cb 0000 	rsb	r0, fp, #0
 800def6:	ec47 6b10 	vmov	d0, r6, r7
 800defa:	f000 f951 	bl	800e1a0 <scalbn>
 800defe:	ec55 4b10 	vmov	r4, r5, d0
 800df02:	4b9d      	ldr	r3, [pc, #628]	@ (800e178 <__kernel_rem_pio2+0x688>)
 800df04:	2200      	movs	r2, #0
 800df06:	4620      	mov	r0, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	f7f2 fe1b 	bl	8000b44 <__aeabi_dcmpge>
 800df0e:	b300      	cbz	r0, 800df52 <__kernel_rem_pio2+0x462>
 800df10:	4b9a      	ldr	r3, [pc, #616]	@ (800e17c <__kernel_rem_pio2+0x68c>)
 800df12:	2200      	movs	r2, #0
 800df14:	4620      	mov	r0, r4
 800df16:	4629      	mov	r1, r5
 800df18:	f7f2 fb8e 	bl	8000638 <__aeabi_dmul>
 800df1c:	f7f2 fe3c 	bl	8000b98 <__aeabi_d2iz>
 800df20:	4606      	mov	r6, r0
 800df22:	f7f2 fb1f 	bl	8000564 <__aeabi_i2d>
 800df26:	4b94      	ldr	r3, [pc, #592]	@ (800e178 <__kernel_rem_pio2+0x688>)
 800df28:	2200      	movs	r2, #0
 800df2a:	f7f2 fb85 	bl	8000638 <__aeabi_dmul>
 800df2e:	460b      	mov	r3, r1
 800df30:	4602      	mov	r2, r0
 800df32:	4629      	mov	r1, r5
 800df34:	4620      	mov	r0, r4
 800df36:	f7f2 f9c7 	bl	80002c8 <__aeabi_dsub>
 800df3a:	f7f2 fe2d 	bl	8000b98 <__aeabi_d2iz>
 800df3e:	ab0c      	add	r3, sp, #48	@ 0x30
 800df40:	f10b 0b18 	add.w	fp, fp, #24
 800df44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800df48:	f108 0801 	add.w	r8, r8, #1
 800df4c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800df50:	e722      	b.n	800dd98 <__kernel_rem_pio2+0x2a8>
 800df52:	4620      	mov	r0, r4
 800df54:	4629      	mov	r1, r5
 800df56:	f7f2 fe1f 	bl	8000b98 <__aeabi_d2iz>
 800df5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800df5c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800df60:	e71a      	b.n	800dd98 <__kernel_rem_pio2+0x2a8>
 800df62:	ab0c      	add	r3, sp, #48	@ 0x30
 800df64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800df68:	f7f2 fafc 	bl	8000564 <__aeabi_i2d>
 800df6c:	4622      	mov	r2, r4
 800df6e:	462b      	mov	r3, r5
 800df70:	f7f2 fb62 	bl	8000638 <__aeabi_dmul>
 800df74:	4652      	mov	r2, sl
 800df76:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800df7a:	465b      	mov	r3, fp
 800df7c:	4620      	mov	r0, r4
 800df7e:	4629      	mov	r1, r5
 800df80:	f7f2 fb5a 	bl	8000638 <__aeabi_dmul>
 800df84:	3e01      	subs	r6, #1
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	e718      	b.n	800ddbe <__kernel_rem_pio2+0x2ce>
 800df8c:	9906      	ldr	r1, [sp, #24]
 800df8e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800df92:	9106      	str	r1, [sp, #24]
 800df94:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800df98:	f7f2 fb4e 	bl	8000638 <__aeabi_dmul>
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	4650      	mov	r0, sl
 800dfa2:	4659      	mov	r1, fp
 800dfa4:	f7f2 f992 	bl	80002cc <__adddf3>
 800dfa8:	3601      	adds	r6, #1
 800dfaa:	4682      	mov	sl, r0
 800dfac:	468b      	mov	fp, r1
 800dfae:	9b00      	ldr	r3, [sp, #0]
 800dfb0:	429e      	cmp	r6, r3
 800dfb2:	dc01      	bgt.n	800dfb8 <__kernel_rem_pio2+0x4c8>
 800dfb4:	42b5      	cmp	r5, r6
 800dfb6:	dae9      	bge.n	800df8c <__kernel_rem_pio2+0x49c>
 800dfb8:	ab48      	add	r3, sp, #288	@ 0x120
 800dfba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dfbe:	e9c5 ab00 	strd	sl, fp, [r5]
 800dfc2:	3c01      	subs	r4, #1
 800dfc4:	e6ff      	b.n	800ddc6 <__kernel_rem_pio2+0x2d6>
 800dfc6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	dc0b      	bgt.n	800dfe4 <__kernel_rem_pio2+0x4f4>
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dc39      	bgt.n	800e044 <__kernel_rem_pio2+0x554>
 800dfd0:	d05d      	beq.n	800e08e <__kernel_rem_pio2+0x59e>
 800dfd2:	9b02      	ldr	r3, [sp, #8]
 800dfd4:	f003 0007 	and.w	r0, r3, #7
 800dfd8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800dfdc:	ecbd 8b02 	vpop	{d8}
 800dfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dfe6:	2b03      	cmp	r3, #3
 800dfe8:	d1f3      	bne.n	800dfd2 <__kernel_rem_pio2+0x4e2>
 800dfea:	9b05      	ldr	r3, [sp, #20]
 800dfec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dff0:	eb0d 0403 	add.w	r4, sp, r3
 800dff4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800dff8:	4625      	mov	r5, r4
 800dffa:	46c2      	mov	sl, r8
 800dffc:	f1ba 0f00 	cmp.w	sl, #0
 800e000:	f1a5 0508 	sub.w	r5, r5, #8
 800e004:	dc6b      	bgt.n	800e0de <__kernel_rem_pio2+0x5ee>
 800e006:	4645      	mov	r5, r8
 800e008:	2d01      	cmp	r5, #1
 800e00a:	f1a4 0408 	sub.w	r4, r4, #8
 800e00e:	f300 8087 	bgt.w	800e120 <__kernel_rem_pio2+0x630>
 800e012:	9c05      	ldr	r4, [sp, #20]
 800e014:	ab48      	add	r3, sp, #288	@ 0x120
 800e016:	441c      	add	r4, r3
 800e018:	2000      	movs	r0, #0
 800e01a:	2100      	movs	r1, #0
 800e01c:	f1b8 0f01 	cmp.w	r8, #1
 800e020:	f300 809c 	bgt.w	800e15c <__kernel_rem_pio2+0x66c>
 800e024:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e028:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e02c:	f1b9 0f00 	cmp.w	r9, #0
 800e030:	f040 80a6 	bne.w	800e180 <__kernel_rem_pio2+0x690>
 800e034:	9b04      	ldr	r3, [sp, #16]
 800e036:	e9c3 7800 	strd	r7, r8, [r3]
 800e03a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e03e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e042:	e7c6      	b.n	800dfd2 <__kernel_rem_pio2+0x4e2>
 800e044:	9d05      	ldr	r5, [sp, #20]
 800e046:	ab48      	add	r3, sp, #288	@ 0x120
 800e048:	441d      	add	r5, r3
 800e04a:	4644      	mov	r4, r8
 800e04c:	2000      	movs	r0, #0
 800e04e:	2100      	movs	r1, #0
 800e050:	2c00      	cmp	r4, #0
 800e052:	da35      	bge.n	800e0c0 <__kernel_rem_pio2+0x5d0>
 800e054:	f1b9 0f00 	cmp.w	r9, #0
 800e058:	d038      	beq.n	800e0cc <__kernel_rem_pio2+0x5dc>
 800e05a:	4602      	mov	r2, r0
 800e05c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e060:	9c04      	ldr	r4, [sp, #16]
 800e062:	e9c4 2300 	strd	r2, r3, [r4]
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e06e:	f7f2 f92b 	bl	80002c8 <__aeabi_dsub>
 800e072:	ad4a      	add	r5, sp, #296	@ 0x128
 800e074:	2401      	movs	r4, #1
 800e076:	45a0      	cmp	r8, r4
 800e078:	da2b      	bge.n	800e0d2 <__kernel_rem_pio2+0x5e2>
 800e07a:	f1b9 0f00 	cmp.w	r9, #0
 800e07e:	d002      	beq.n	800e086 <__kernel_rem_pio2+0x596>
 800e080:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e084:	4619      	mov	r1, r3
 800e086:	9b04      	ldr	r3, [sp, #16]
 800e088:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e08c:	e7a1      	b.n	800dfd2 <__kernel_rem_pio2+0x4e2>
 800e08e:	9c05      	ldr	r4, [sp, #20]
 800e090:	ab48      	add	r3, sp, #288	@ 0x120
 800e092:	441c      	add	r4, r3
 800e094:	2000      	movs	r0, #0
 800e096:	2100      	movs	r1, #0
 800e098:	f1b8 0f00 	cmp.w	r8, #0
 800e09c:	da09      	bge.n	800e0b2 <__kernel_rem_pio2+0x5c2>
 800e09e:	f1b9 0f00 	cmp.w	r9, #0
 800e0a2:	d002      	beq.n	800e0aa <__kernel_rem_pio2+0x5ba>
 800e0a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	9b04      	ldr	r3, [sp, #16]
 800e0ac:	e9c3 0100 	strd	r0, r1, [r3]
 800e0b0:	e78f      	b.n	800dfd2 <__kernel_rem_pio2+0x4e2>
 800e0b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0b6:	f7f2 f909 	bl	80002cc <__adddf3>
 800e0ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0be:	e7eb      	b.n	800e098 <__kernel_rem_pio2+0x5a8>
 800e0c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e0c4:	f7f2 f902 	bl	80002cc <__adddf3>
 800e0c8:	3c01      	subs	r4, #1
 800e0ca:	e7c1      	b.n	800e050 <__kernel_rem_pio2+0x560>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	e7c6      	b.n	800e060 <__kernel_rem_pio2+0x570>
 800e0d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e0d6:	f7f2 f8f9 	bl	80002cc <__adddf3>
 800e0da:	3401      	adds	r4, #1
 800e0dc:	e7cb      	b.n	800e076 <__kernel_rem_pio2+0x586>
 800e0de:	ed95 7b00 	vldr	d7, [r5]
 800e0e2:	ed8d 7b00 	vstr	d7, [sp]
 800e0e6:	ed95 7b02 	vldr	d7, [r5, #8]
 800e0ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0ee:	ec53 2b17 	vmov	r2, r3, d7
 800e0f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0f6:	f7f2 f8e9 	bl	80002cc <__adddf3>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4606      	mov	r6, r0
 800e100:	460f      	mov	r7, r1
 800e102:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e106:	f7f2 f8df 	bl	80002c8 <__aeabi_dsub>
 800e10a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e10e:	f7f2 f8dd 	bl	80002cc <__adddf3>
 800e112:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e116:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e11a:	e9c5 6700 	strd	r6, r7, [r5]
 800e11e:	e76d      	b.n	800dffc <__kernel_rem_pio2+0x50c>
 800e120:	ed94 7b00 	vldr	d7, [r4]
 800e124:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e128:	ec51 0b17 	vmov	r0, r1, d7
 800e12c:	4652      	mov	r2, sl
 800e12e:	465b      	mov	r3, fp
 800e130:	ed8d 7b00 	vstr	d7, [sp]
 800e134:	f7f2 f8ca 	bl	80002cc <__adddf3>
 800e138:	4602      	mov	r2, r0
 800e13a:	460b      	mov	r3, r1
 800e13c:	4606      	mov	r6, r0
 800e13e:	460f      	mov	r7, r1
 800e140:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e144:	f7f2 f8c0 	bl	80002c8 <__aeabi_dsub>
 800e148:	4652      	mov	r2, sl
 800e14a:	465b      	mov	r3, fp
 800e14c:	f7f2 f8be 	bl	80002cc <__adddf3>
 800e150:	3d01      	subs	r5, #1
 800e152:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e156:	e9c4 6700 	strd	r6, r7, [r4]
 800e15a:	e755      	b.n	800e008 <__kernel_rem_pio2+0x518>
 800e15c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e160:	f7f2 f8b4 	bl	80002cc <__adddf3>
 800e164:	f108 38ff 	add.w	r8, r8, #4294967295
 800e168:	e758      	b.n	800e01c <__kernel_rem_pio2+0x52c>
 800e16a:	bf00      	nop
 800e16c:	f3af 8000 	nop.w
	...
 800e178:	41700000 	.word	0x41700000
 800e17c:	3e700000 	.word	0x3e700000
 800e180:	9b04      	ldr	r3, [sp, #16]
 800e182:	9a04      	ldr	r2, [sp, #16]
 800e184:	601f      	str	r7, [r3, #0]
 800e186:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e18a:	605c      	str	r4, [r3, #4]
 800e18c:	609d      	str	r5, [r3, #8]
 800e18e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e192:	60d3      	str	r3, [r2, #12]
 800e194:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e198:	6110      	str	r0, [r2, #16]
 800e19a:	6153      	str	r3, [r2, #20]
 800e19c:	e719      	b.n	800dfd2 <__kernel_rem_pio2+0x4e2>
 800e19e:	bf00      	nop

0800e1a0 <scalbn>:
 800e1a0:	b570      	push	{r4, r5, r6, lr}
 800e1a2:	ec55 4b10 	vmov	r4, r5, d0
 800e1a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	b991      	cbnz	r1, 800e1d6 <scalbn+0x36>
 800e1b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e1b4:	4323      	orrs	r3, r4
 800e1b6:	d03d      	beq.n	800e234 <scalbn+0x94>
 800e1b8:	4b35      	ldr	r3, [pc, #212]	@ (800e290 <scalbn+0xf0>)
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	4629      	mov	r1, r5
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f7f2 fa3a 	bl	8000638 <__aeabi_dmul>
 800e1c4:	4b33      	ldr	r3, [pc, #204]	@ (800e294 <scalbn+0xf4>)
 800e1c6:	429e      	cmp	r6, r3
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	460d      	mov	r5, r1
 800e1cc:	da0f      	bge.n	800e1ee <scalbn+0x4e>
 800e1ce:	a328      	add	r3, pc, #160	@ (adr r3, 800e270 <scalbn+0xd0>)
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	e01e      	b.n	800e214 <scalbn+0x74>
 800e1d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e1da:	4291      	cmp	r1, r2
 800e1dc:	d10b      	bne.n	800e1f6 <scalbn+0x56>
 800e1de:	4622      	mov	r2, r4
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	f7f2 f872 	bl	80002cc <__adddf3>
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	460d      	mov	r5, r1
 800e1ec:	e022      	b.n	800e234 <scalbn+0x94>
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e1f4:	3936      	subs	r1, #54	@ 0x36
 800e1f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e1fa:	4296      	cmp	r6, r2
 800e1fc:	dd0d      	ble.n	800e21a <scalbn+0x7a>
 800e1fe:	2d00      	cmp	r5, #0
 800e200:	a11d      	add	r1, pc, #116	@ (adr r1, 800e278 <scalbn+0xd8>)
 800e202:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e206:	da02      	bge.n	800e20e <scalbn+0x6e>
 800e208:	a11d      	add	r1, pc, #116	@ (adr r1, 800e280 <scalbn+0xe0>)
 800e20a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e20e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e278 <scalbn+0xd8>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	f7f2 fa10 	bl	8000638 <__aeabi_dmul>
 800e218:	e7e6      	b.n	800e1e8 <scalbn+0x48>
 800e21a:	1872      	adds	r2, r6, r1
 800e21c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e220:	428a      	cmp	r2, r1
 800e222:	dcec      	bgt.n	800e1fe <scalbn+0x5e>
 800e224:	2a00      	cmp	r2, #0
 800e226:	dd08      	ble.n	800e23a <scalbn+0x9a>
 800e228:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e22c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e230:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e234:	ec45 4b10 	vmov	d0, r4, r5
 800e238:	bd70      	pop	{r4, r5, r6, pc}
 800e23a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e23e:	da08      	bge.n	800e252 <scalbn+0xb2>
 800e240:	2d00      	cmp	r5, #0
 800e242:	a10b      	add	r1, pc, #44	@ (adr r1, 800e270 <scalbn+0xd0>)
 800e244:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e248:	dac1      	bge.n	800e1ce <scalbn+0x2e>
 800e24a:	a10f      	add	r1, pc, #60	@ (adr r1, 800e288 <scalbn+0xe8>)
 800e24c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e250:	e7bd      	b.n	800e1ce <scalbn+0x2e>
 800e252:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e256:	3236      	adds	r2, #54	@ 0x36
 800e258:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e25c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e260:	4620      	mov	r0, r4
 800e262:	4b0d      	ldr	r3, [pc, #52]	@ (800e298 <scalbn+0xf8>)
 800e264:	4629      	mov	r1, r5
 800e266:	2200      	movs	r2, #0
 800e268:	e7d4      	b.n	800e214 <scalbn+0x74>
 800e26a:	bf00      	nop
 800e26c:	f3af 8000 	nop.w
 800e270:	c2f8f359 	.word	0xc2f8f359
 800e274:	01a56e1f 	.word	0x01a56e1f
 800e278:	8800759c 	.word	0x8800759c
 800e27c:	7e37e43c 	.word	0x7e37e43c
 800e280:	8800759c 	.word	0x8800759c
 800e284:	fe37e43c 	.word	0xfe37e43c
 800e288:	c2f8f359 	.word	0xc2f8f359
 800e28c:	81a56e1f 	.word	0x81a56e1f
 800e290:	43500000 	.word	0x43500000
 800e294:	ffff3cb0 	.word	0xffff3cb0
 800e298:	3c900000 	.word	0x3c900000
 800e29c:	00000000 	.word	0x00000000

0800e2a0 <floor>:
 800e2a0:	ec51 0b10 	vmov	r0, r1, d0
 800e2a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e2b0:	2e13      	cmp	r6, #19
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	4680      	mov	r8, r0
 800e2b8:	dc34      	bgt.n	800e324 <floor+0x84>
 800e2ba:	2e00      	cmp	r6, #0
 800e2bc:	da17      	bge.n	800e2ee <floor+0x4e>
 800e2be:	a332      	add	r3, pc, #200	@ (adr r3, 800e388 <floor+0xe8>)
 800e2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c4:	f7f2 f802 	bl	80002cc <__adddf3>
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f7f2 fc44 	bl	8000b58 <__aeabi_dcmpgt>
 800e2d0:	b150      	cbz	r0, 800e2e8 <floor+0x48>
 800e2d2:	2c00      	cmp	r4, #0
 800e2d4:	da55      	bge.n	800e382 <floor+0xe2>
 800e2d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e2da:	432c      	orrs	r4, r5
 800e2dc:	2500      	movs	r5, #0
 800e2de:	42ac      	cmp	r4, r5
 800e2e0:	4c2b      	ldr	r4, [pc, #172]	@ (800e390 <floor+0xf0>)
 800e2e2:	bf08      	it	eq
 800e2e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e2e8:	4621      	mov	r1, r4
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	e023      	b.n	800e336 <floor+0x96>
 800e2ee:	4f29      	ldr	r7, [pc, #164]	@ (800e394 <floor+0xf4>)
 800e2f0:	4137      	asrs	r7, r6
 800e2f2:	ea01 0307 	and.w	r3, r1, r7
 800e2f6:	4303      	orrs	r3, r0
 800e2f8:	d01d      	beq.n	800e336 <floor+0x96>
 800e2fa:	a323      	add	r3, pc, #140	@ (adr r3, 800e388 <floor+0xe8>)
 800e2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e300:	f7f1 ffe4 	bl	80002cc <__adddf3>
 800e304:	2200      	movs	r2, #0
 800e306:	2300      	movs	r3, #0
 800e308:	f7f2 fc26 	bl	8000b58 <__aeabi_dcmpgt>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d0eb      	beq.n	800e2e8 <floor+0x48>
 800e310:	2c00      	cmp	r4, #0
 800e312:	bfbe      	ittt	lt
 800e314:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e318:	4133      	asrlt	r3, r6
 800e31a:	18e4      	addlt	r4, r4, r3
 800e31c:	ea24 0407 	bic.w	r4, r4, r7
 800e320:	2500      	movs	r5, #0
 800e322:	e7e1      	b.n	800e2e8 <floor+0x48>
 800e324:	2e33      	cmp	r6, #51	@ 0x33
 800e326:	dd0a      	ble.n	800e33e <floor+0x9e>
 800e328:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e32c:	d103      	bne.n	800e336 <floor+0x96>
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	f7f1 ffcb 	bl	80002cc <__adddf3>
 800e336:	ec41 0b10 	vmov	d0, r0, r1
 800e33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e33e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e342:	f04f 37ff 	mov.w	r7, #4294967295
 800e346:	40df      	lsrs	r7, r3
 800e348:	4207      	tst	r7, r0
 800e34a:	d0f4      	beq.n	800e336 <floor+0x96>
 800e34c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e388 <floor+0xe8>)
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	f7f1 ffbb 	bl	80002cc <__adddf3>
 800e356:	2200      	movs	r2, #0
 800e358:	2300      	movs	r3, #0
 800e35a:	f7f2 fbfd 	bl	8000b58 <__aeabi_dcmpgt>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d0c2      	beq.n	800e2e8 <floor+0x48>
 800e362:	2c00      	cmp	r4, #0
 800e364:	da0a      	bge.n	800e37c <floor+0xdc>
 800e366:	2e14      	cmp	r6, #20
 800e368:	d101      	bne.n	800e36e <floor+0xce>
 800e36a:	3401      	adds	r4, #1
 800e36c:	e006      	b.n	800e37c <floor+0xdc>
 800e36e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e372:	2301      	movs	r3, #1
 800e374:	40b3      	lsls	r3, r6
 800e376:	441d      	add	r5, r3
 800e378:	4545      	cmp	r5, r8
 800e37a:	d3f6      	bcc.n	800e36a <floor+0xca>
 800e37c:	ea25 0507 	bic.w	r5, r5, r7
 800e380:	e7b2      	b.n	800e2e8 <floor+0x48>
 800e382:	2500      	movs	r5, #0
 800e384:	462c      	mov	r4, r5
 800e386:	e7af      	b.n	800e2e8 <floor+0x48>
 800e388:	8800759c 	.word	0x8800759c
 800e38c:	7e37e43c 	.word	0x7e37e43c
 800e390:	bff00000 	.word	0xbff00000
 800e394:	000fffff 	.word	0x000fffff

0800e398 <_init>:
 800e398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39a:	bf00      	nop
 800e39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e39e:	bc08      	pop	{r3}
 800e3a0:	469e      	mov	lr, r3
 800e3a2:	4770      	bx	lr

0800e3a4 <_fini>:
 800e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a6:	bf00      	nop
 800e3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3aa:	bc08      	pop	{r3}
 800e3ac:	469e      	mov	lr, r3
 800e3ae:	4770      	bx	lr
