
Esp32_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d0  080051d0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d8  080051d8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080051e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000068  08005248  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005248  000072a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b52f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc9  00000000  00000000  000125c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00014190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000817  00000000  00000000  00014bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168f1  00000000  00000000  00015407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d696  00000000  00000000  0002bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008952c  00000000  00000000  0003938e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c28ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000326c  00000000  00000000  000c2900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c5b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800512c 	.word	0x0800512c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800512c 	.word	0x0800512c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d102      	bne.n	8000588 <HAL_I2C_SlaveRxCpltCallback+0x18>
		// Set flag to indicate data received
		dataReceived = 1;
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40005400 	.word	0x40005400
 8000598:	2000012a 	.word	0x2000012a

0800059c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	b08d      	sub	sp, #52	@ 0x34
 80005a0:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a2:	f000 fc09 	bl	8000db8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a6:	f000 f8e9 	bl	800077c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 f9ab 	bl	8000904 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ae:	f000 f97f 	bl	80008b0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80005b2:	f000 f94f 	bl	8000854 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2C_Slave_Receive_IT(&hi2c1, rxbuff, 10);
 80005b6:	220a      	movs	r2, #10
 80005b8:	4962      	ldr	r1, [pc, #392]	@ (8000744 <main+0x1a8>)
 80005ba:	4863      	ldr	r0, [pc, #396]	@ (8000748 <main+0x1ac>)
 80005bc:	f001 f8a8 	bl	8001710 <HAL_I2C_Slave_Receive_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_I2C_SlaveRxCpltCallback(&hi2c1);
 80005c0:	4861      	ldr	r0, [pc, #388]	@ (8000748 <main+0x1ac>)
 80005c2:	f7ff ffd5 	bl	8000570 <HAL_I2C_SlaveRxCpltCallback>
		if (dataReceived) {
 80005c6:	4b61      	ldr	r3, [pc, #388]	@ (800074c <main+0x1b0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f7      	beq.n	80005c0 <main+0x24>
			lx = (rxbuff[0] & 0x80) ?
 80005d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000744 <main+0x1a8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	da04      	bge.n	80005e4 <main+0x48>
 80005da:	4b5a      	ldr	r3, [pc, #360]	@ (8000744 <main+0x1a8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005e2:	e001      	b.n	80005e8 <main+0x4c>
 80005e4:	4b57      	ldr	r3, [pc, #348]	@ (8000744 <main+0x1a8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
			lx = (rxbuff[0] & 0x80) ?
 80005e8:	4a59      	ldr	r2, [pc, #356]	@ (8000750 <main+0x1b4>)
 80005ea:	6013      	str	r3, [r2, #0]
			ly = (rxbuff[1] & 0x80) ?
 80005ec:	4b55      	ldr	r3, [pc, #340]	@ (8000744 <main+0x1a8>)
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	da04      	bge.n	8000600 <main+0x64>
 80005f6:	4b53      	ldr	r3, [pc, #332]	@ (8000744 <main+0x1a8>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005fe:	e001      	b.n	8000604 <main+0x68>
 8000600:	4b50      	ldr	r3, [pc, #320]	@ (8000744 <main+0x1a8>)
 8000602:	785b      	ldrb	r3, [r3, #1]
			ly = (rxbuff[1] & 0x80) ?
 8000604:	4a53      	ldr	r2, [pc, #332]	@ (8000754 <main+0x1b8>)
 8000606:	6013      	str	r3, [r2, #0]
			rx = (rxbuff[2] & 0x80) ?
 8000608:	4b4e      	ldr	r3, [pc, #312]	@ (8000744 <main+0x1a8>)
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 800060e:	2b00      	cmp	r3, #0
 8000610:	da04      	bge.n	800061c <main+0x80>
 8000612:	4b4c      	ldr	r3, [pc, #304]	@ (8000744 <main+0x1a8>)
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800061a:	e001      	b.n	8000620 <main+0x84>
 800061c:	4b49      	ldr	r3, [pc, #292]	@ (8000744 <main+0x1a8>)
 800061e:	789b      	ldrb	r3, [r3, #2]
			rx = (rxbuff[2] & 0x80) ?
 8000620:	4a4d      	ldr	r2, [pc, #308]	@ (8000758 <main+0x1bc>)
 8000622:	6013      	str	r3, [r2, #0]
			ry = (rxbuff[3] & 0x80) ?
 8000624:	4b47      	ldr	r3, [pc, #284]	@ (8000744 <main+0x1a8>)
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 800062a:	2b00      	cmp	r3, #0
 800062c:	da04      	bge.n	8000638 <main+0x9c>
 800062e:	4b45      	ldr	r3, [pc, #276]	@ (8000744 <main+0x1a8>)
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000636:	e001      	b.n	800063c <main+0xa0>
 8000638:	4b42      	ldr	r3, [pc, #264]	@ (8000744 <main+0x1a8>)
 800063a:	78db      	ldrb	r3, [r3, #3]
			ry = (rxbuff[3] & 0x80) ?
 800063c:	4a47      	ldr	r2, [pc, #284]	@ (800075c <main+0x1c0>)
 800063e:	6013      	str	r3, [r2, #0]
			tri = (rxbuff[4] & 0x80) ?
 8000640:	4b40      	ldr	r3, [pc, #256]	@ (8000744 <main+0x1a8>)
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8000646:	2b00      	cmp	r3, #0
 8000648:	da04      	bge.n	8000654 <main+0xb8>
 800064a:	4b3e      	ldr	r3, [pc, #248]	@ (8000744 <main+0x1a8>)
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000652:	e001      	b.n	8000658 <main+0xbc>
 8000654:	4b3b      	ldr	r3, [pc, #236]	@ (8000744 <main+0x1a8>)
 8000656:	791b      	ldrb	r3, [r3, #4]
			tri = (rxbuff[4] & 0x80) ?
 8000658:	4a41      	ldr	r2, [pc, #260]	@ (8000760 <main+0x1c4>)
 800065a:	6013      	str	r3, [r2, #0]
			cir = (rxbuff[5] & 0x80) ?
 800065c:	4b39      	ldr	r3, [pc, #228]	@ (8000744 <main+0x1a8>)
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8000662:	2b00      	cmp	r3, #0
 8000664:	da04      	bge.n	8000670 <main+0xd4>
 8000666:	4b37      	ldr	r3, [pc, #220]	@ (8000744 <main+0x1a8>)
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800066e:	e001      	b.n	8000674 <main+0xd8>
 8000670:	4b34      	ldr	r3, [pc, #208]	@ (8000744 <main+0x1a8>)
 8000672:	795b      	ldrb	r3, [r3, #5]
			cir = (rxbuff[5] & 0x80) ?
 8000674:	4a3b      	ldr	r2, [pc, #236]	@ (8000764 <main+0x1c8>)
 8000676:	6013      	str	r3, [r2, #0]
			cro = (rxbuff[6] & 0x80) ?
 8000678:	4b32      	ldr	r3, [pc, #200]	@ (8000744 <main+0x1a8>)
 800067a:	799b      	ldrb	r3, [r3, #6]
 800067c:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 800067e:	2b00      	cmp	r3, #0
 8000680:	da04      	bge.n	800068c <main+0xf0>
 8000682:	4b30      	ldr	r3, [pc, #192]	@ (8000744 <main+0x1a8>)
 8000684:	799b      	ldrb	r3, [r3, #6]
 8000686:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800068a:	e001      	b.n	8000690 <main+0xf4>
 800068c:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <main+0x1a8>)
 800068e:	799b      	ldrb	r3, [r3, #6]
			cro = (rxbuff[6] & 0x80) ?
 8000690:	4a35      	ldr	r2, [pc, #212]	@ (8000768 <main+0x1cc>)
 8000692:	6013      	str	r3, [r2, #0]
			squ = (rxbuff[7] & 0x80) ?
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <main+0x1a8>)
 8000696:	79db      	ldrb	r3, [r3, #7]
 8000698:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 800069a:	2b00      	cmp	r3, #0
 800069c:	da04      	bge.n	80006a8 <main+0x10c>
 800069e:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <main+0x1a8>)
 80006a0:	79db      	ldrb	r3, [r3, #7]
 80006a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006a6:	e001      	b.n	80006ac <main+0x110>
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <main+0x1a8>)
 80006aa:	79db      	ldrb	r3, [r3, #7]
			squ = (rxbuff[7] & 0x80) ?
 80006ac:	4a2f      	ldr	r2, [pc, #188]	@ (800076c <main+0x1d0>)
 80006ae:	6013      	str	r3, [r2, #0]
			ll2 = (rxbuff[8] & 0x80) ?
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <main+0x1a8>)
 80006b2:	7a1b      	ldrb	r3, [r3, #8]
 80006b4:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	da04      	bge.n	80006c4 <main+0x128>
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <main+0x1a8>)
 80006bc:	7a1b      	ldrb	r3, [r3, #8]
 80006be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006c2:	e001      	b.n	80006c8 <main+0x12c>
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <main+0x1a8>)
 80006c6:	7a1b      	ldrb	r3, [r3, #8]
			ll2 = (rxbuff[8] & 0x80) ?
 80006c8:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <main+0x1d4>)
 80006ca:	6013      	str	r3, [r2, #0]
			rr2 = (rxbuff[9] & 0x80) ?
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <main+0x1a8>)
 80006ce:	7a5b      	ldrb	r3, [r3, #9]
 80006d0:	b25b      	sxtb	r3, r3
					(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	da04      	bge.n	80006e0 <main+0x144>
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <main+0x1a8>)
 80006d8:	7a5b      	ldrb	r3, [r3, #9]
 80006da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006de:	e001      	b.n	80006e4 <main+0x148>
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <main+0x1a8>)
 80006e2:	7a5b      	ldrb	r3, [r3, #9]
			rr2 = (rxbuff[9] & 0x80) ?
 80006e4:	4a23      	ldr	r2, [pc, #140]	@ (8000774 <main+0x1d8>)
 80006e6:	6013      	str	r3, [r2, #0]

			printf(
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <main+0x1b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <main+0x1b8>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	60ba      	str	r2, [r7, #8]
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <main+0x1bc>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	4b18      	ldr	r3, [pc, #96]	@ (800075c <main+0x1c0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <main+0x1c4>)
 8000700:	6812      	ldr	r2, [r2, #0]
 8000702:	4918      	ldr	r1, [pc, #96]	@ (8000764 <main+0x1c8>)
 8000704:	6809      	ldr	r1, [r1, #0]
 8000706:	4818      	ldr	r0, [pc, #96]	@ (8000768 <main+0x1cc>)
 8000708:	6800      	ldr	r0, [r0, #0]
 800070a:	4c18      	ldr	r4, [pc, #96]	@ (800076c <main+0x1d0>)
 800070c:	6824      	ldr	r4, [r4, #0]
 800070e:	4d18      	ldr	r5, [pc, #96]	@ (8000770 <main+0x1d4>)
 8000710:	682d      	ldr	r5, [r5, #0]
 8000712:	4e18      	ldr	r6, [pc, #96]	@ (8000774 <main+0x1d8>)
 8000714:	6836      	ldr	r6, [r6, #0]
 8000716:	9606      	str	r6, [sp, #24]
 8000718:	9505      	str	r5, [sp, #20]
 800071a:	9404      	str	r4, [sp, #16]
 800071c:	9003      	str	r0, [sp, #12]
 800071e:	9102      	str	r1, [sp, #8]
 8000720:	9201      	str	r2, [sp, #4]
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	68f9      	ldr	r1, [r7, #12]
 800072a:	4813      	ldr	r0, [pc, #76]	@ (8000778 <main+0x1dc>)
 800072c:	f003 fe90 	bl	8004450 <iprintf>
					"Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\r\n",
					lx, ly, rx, ry, tri, cir, cro, squ, ll2, rr2);

			// Clear the flag after processing
			dataReceived = 0;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <main+0x1b0>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Receive_IT(&hi2c1, rxbuff, 10);
 8000736:	220a      	movs	r2, #10
 8000738:	4902      	ldr	r1, [pc, #8]	@ (8000744 <main+0x1a8>)
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <main+0x1ac>)
 800073c:	f000 ffe8 	bl	8001710 <HAL_I2C_Slave_Receive_IT>
		HAL_I2C_SlaveRxCpltCallback(&hi2c1);
 8000740:	e73e      	b.n	80005c0 <main+0x24>
 8000742:	bf00      	nop
 8000744:	20000120 	.word	0x20000120
 8000748:	20000084 	.word	0x20000084
 800074c:	2000012a 	.word	0x2000012a
 8000750:	2000012c 	.word	0x2000012c
 8000754:	20000130 	.word	0x20000130
 8000758:	20000134 	.word	0x20000134
 800075c:	20000138 	.word	0x20000138
 8000760:	20000144 	.word	0x20000144
 8000764:	20000148 	.word	0x20000148
 8000768:	2000013c 	.word	0x2000013c
 800076c:	20000140 	.word	0x20000140
 8000770:	2000014c 	.word	0x2000014c
 8000774:	20000150 	.word	0x20000150
 8000778:	08005144 	.word	0x08005144

0800077c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f003 feb5 	bl	80044fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	@ (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	@ (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c8:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <SystemClock_Config+0xd4>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007f8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fcbc 	bl	8003184 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9a>
		Error_Handler();
 8000812:	f000 f8fb 	bl	8000a0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 ff1e 	bl	8003674 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc6>
		Error_Handler();
 800083e:	f000 f8e5 	bl	8000a0c <Error_Handler>
	}
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	@ 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	@ (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 32;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2220      	movs	r2, #32
 800086e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000876:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f000 fde3 	bl	800145c <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800089c:	f000 f8b6 	bl	8000a0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000084 	.word	0x20000084
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f003 f8e4 	bl	8003ab4 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80008f2:	f000 f88b 	bl	8000a0c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000d8 	.word	0x200000d8
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a2c      	ldr	r2, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a25      	ldr	r2, [pc, #148]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a1e      	ldr	r2, [pc, #120]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4812      	ldr	r0, [pc, #72]	@ (80009d8 <MX_GPIO_Init+0xd4>)
 8000990:	f000 fd4a 	bl	8001428 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800099e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_GPIO_Init+0xd8>)
 80009ac:	f000 fbb8 	bl	8001120 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0xd4>)
 80009c8:	f000 fbaa 	bl	8001120 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800

080009e0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <_write+0x28>)
 80009f8:	f003 f8ac 	bl	8003b54 <HAL_UART_Transmit>
	return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000d8 	.word	0x200000d8

08000a0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <HAL_I2C_MspInit+0xa4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d13b      	bne.n	8000b02 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <HAL_I2C_MspInit+0xa8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a1f      	ldr	r2, [pc, #124]	@ (8000b10 <HAL_I2C_MspInit+0xa8>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <HAL_I2C_MspInit+0xa8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa6:	23c0      	movs	r3, #192	@ 0xc0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4814      	ldr	r0, [pc, #80]	@ (8000b14 <HAL_I2C_MspInit+0xac>)
 8000ac2:	f000 fb2d 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_I2C_MspInit+0xa8>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <HAL_I2C_MspInit+0xa8>)
 8000ad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_I2C_MspInit+0xa8>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	201f      	movs	r0, #31
 8000ae8:	f000 fab3 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000aec:	201f      	movs	r0, #31
 8000aee:	f000 facc 	bl	800108a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2020      	movs	r0, #32
 8000af8:	f000 faab 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000afc:	2020      	movs	r0, #32
 8000afe:	f000 fac4 	bl	800108a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <HAL_UART_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b72:	230c      	movs	r3, #12
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b82:	2307      	movs	r3, #7
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b8e:	f000 fac7 	bl	8001120 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 f92d 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <I2C1_EV_IRQHandler+0x10>)
 8000c0e:	f000 fdef 	bl	80017f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000084 	.word	0x20000084

08000c1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <I2C1_ER_IRQHandler+0x10>)
 8000c22:	f000 ff38 	bl	8001a96 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000084 	.word	0x20000084

08000c30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00a      	b.n	8000c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c42:	f3af 8000 	nop.w
 8000c46:	4601      	mov	r1, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf0      	blt.n	8000c42 <_read+0x12>
  }

  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c92:	605a      	str	r2, [r3, #4]
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:

int _isatty(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f003 fc48 	bl	8004598 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20018000 	.word	0x20018000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000154 	.word	0x20000154
 8000d3c:	200002a8 	.word	0x200002a8

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 fc07 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fc01 	bl	800059c <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da8:	080051e0 	.word	0x080051e0
  ldr r2, =_sbss
 8000dac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000db0:	200002a8 	.word	0x200002a8

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f92b 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe14 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f943 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f90b 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000158 	.word	0x20000158

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000158 	.word	0x20000158

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	@ (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00c      	b.n	80010f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2205      	movs	r2, #5
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001110:	b2db      	uxtb	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e159      	b.n	80013f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8148 	bne.w	80013ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a2 	beq.w	80013ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b57      	ldr	r3, [pc, #348]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a56      	ldr	r2, [pc, #344]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b54      	ldr	r3, [pc, #336]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a52      	ldr	r2, [pc, #328]	@ (800140c <HAL_GPIO_Init+0x2ec>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	@ (8001410 <HAL_GPIO_Init+0x2f0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x202>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a48      	ldr	r2, [pc, #288]	@ (8001414 <HAL_GPIO_Init+0x2f4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x1fe>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a47      	ldr	r2, [pc, #284]	@ (8001418 <HAL_GPIO_Init+0x2f8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x1fa>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a46      	ldr	r2, [pc, #280]	@ (800141c <HAL_GPIO_Init+0x2fc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x1f6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a45      	ldr	r2, [pc, #276]	@ (8001420 <HAL_GPIO_Init+0x300>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x1f2>
 800130e:	2304      	movs	r3, #4
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001312:	2307      	movs	r3, #7
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	@ (800140c <HAL_GPIO_Init+0x2ec>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a2f      	ldr	r2, [pc, #188]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <HAL_GPIO_Init+0x304>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001424 <HAL_GPIO_Init+0x304>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_GPIO_Init+0x304>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <HAL_GPIO_Init+0x304>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f aea2 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e12b      	b.n	80016c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff faf0 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2224      	movs	r2, #36	@ 0x24
 800148c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c0:	f002 fad0 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 80014c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4a81      	ldr	r2, [pc, #516]	@ (80016d0 <HAL_I2C_Init+0x274>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d807      	bhi.n	80014e0 <HAL_I2C_Init+0x84>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a80      	ldr	r2, [pc, #512]	@ (80016d4 <HAL_I2C_Init+0x278>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	bf94      	ite	ls
 80014d8:	2301      	movls	r3, #1
 80014da:	2300      	movhi	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	e006      	b.n	80014ee <HAL_I2C_Init+0x92>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4a7d      	ldr	r2, [pc, #500]	@ (80016d8 <HAL_I2C_Init+0x27c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	bf94      	ite	ls
 80014e8:	2301      	movls	r3, #1
 80014ea:	2300      	movhi	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e0e7      	b.n	80016c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4a78      	ldr	r2, [pc, #480]	@ (80016dc <HAL_I2C_Init+0x280>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a6a      	ldr	r2, [pc, #424]	@ (80016d0 <HAL_I2C_Init+0x274>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d802      	bhi.n	8001530 <HAL_I2C_Init+0xd4>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	e009      	b.n	8001544 <HAL_I2C_Init+0xe8>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	4a69      	ldr	r2, [pc, #420]	@ (80016e0 <HAL_I2C_Init+0x284>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	3301      	adds	r3, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	430b      	orrs	r3, r1
 800154a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001556:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	495c      	ldr	r1, [pc, #368]	@ (80016d0 <HAL_I2C_Init+0x274>)
 8001560:	428b      	cmp	r3, r1
 8001562:	d819      	bhi.n	8001598 <HAL_I2C_Init+0x13c>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e59      	subs	r1, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001572:	1c59      	adds	r1, r3, #1
 8001574:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001578:	400b      	ands	r3, r1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00a      	beq.n	8001594 <HAL_I2C_Init+0x138>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1e59      	subs	r1, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fbb1 f3f3 	udiv	r3, r1, r3
 800158c:	3301      	adds	r3, #1
 800158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001592:	e051      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001594:	2304      	movs	r3, #4
 8001596:	e04f      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d111      	bne.n	80015c4 <HAL_I2C_Init+0x168>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	e012      	b.n	80015ea <HAL_I2C_Init+0x18e>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e58      	subs	r0, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	0099      	lsls	r1, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Init+0x196>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e022      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10e      	bne.n	8001618 <HAL_I2C_Init+0x1bc>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e58      	subs	r0, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6859      	ldr	r1, [r3, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	440b      	add	r3, r1
 8001608:	fbb0 f3f3 	udiv	r3, r0, r3
 800160c:	3301      	adds	r3, #1
 800160e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001616:	e00f      	b.n	8001638 <HAL_I2C_Init+0x1dc>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e58      	subs	r0, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	0099      	lsls	r1, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	6809      	ldr	r1, [r1, #0]
 800163c:	4313      	orrs	r3, r2
 800163e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6911      	ldr	r1, [r2, #16]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68d2      	ldr	r2, [r2, #12]
 8001672:	4311      	orrs	r1, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	430b      	orrs	r3, r1
 800167a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2220      	movs	r2, #32
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	000186a0 	.word	0x000186a0
 80016d4:	001e847f 	.word	0x001e847f
 80016d8:	003d08ff 	.word	0x003d08ff
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	10624dd3 	.word	0x10624dd3

080016e4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f6:	2b80      	cmp	r3, #128	@ 0x80
 80016f8:	d103      	bne.n	8001702 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	d158      	bne.n	80017dc <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <HAL_I2C_Slave_Receive_IT+0x26>
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e051      	b.n	80017de <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_I2C_Slave_Receive_IT+0x38>
 8001744:	2302      	movs	r3, #2
 8001746:	e04a      	b.n	80017de <HAL_I2C_Slave_Receive_IT+0xce>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	d007      	beq.n	800176e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800177c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2222      	movs	r2, #34	@ 0x22
 8001782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2220      	movs	r2, #32
 800178a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	88fa      	ldrh	r2, [r7, #6]
 800179e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <HAL_I2C_Slave_Receive_IT+0xdc>)
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017be:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80017d6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	ffff0000 	.word	0xffff0000

080017f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001810:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001818:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b10      	cmp	r3, #16
 800181e:	d003      	beq.n	8001828 <HAL_I2C_EV_IRQHandler+0x38>
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b40      	cmp	r3, #64	@ 0x40
 8001824:	f040 80b1 	bne.w	800198a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10d      	bne.n	800185e <HAL_I2C_EV_IRQHandler+0x6e>
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001848:	d003      	beq.n	8001852 <HAL_I2C_EV_IRQHandler+0x62>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001850:	d101      	bne.n	8001856 <HAL_I2C_EV_IRQHandler+0x66>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_I2C_EV_IRQHandler+0x68>
 8001856:	2300      	movs	r3, #0
 8001858:	2b01      	cmp	r3, #1
 800185a:	f000 8114 	beq.w	8001a86 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_I2C_EV_IRQHandler+0x90>
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f001 fc6a 	bl	800314c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fd70 	bl	800235e <I2C_Master_SB>
 800187e:	e083      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_I2C_EV_IRQHandler+0xac>
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fde8 	bl	800246a <I2C_Master_ADD10>
 800189a:	e075      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_I2C_EV_IRQHandler+0xc8>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fe04 	bl	80024be <I2C_Master_ADDR>
 80018b6:	e067      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d036      	beq.n	8001930 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018d0:	f000 80db 	beq.w	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0x10a>
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0x10a>
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f9cc 	bl	8001c90 <I2C_MasterTransmit_TXE>
 80018f8:	e046      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80c2 	beq.w	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80bc 	beq.w	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001912:	7bbb      	ldrb	r3, [r7, #14]
 8001914:	2b21      	cmp	r3, #33	@ 0x21
 8001916:	d103      	bne.n	8001920 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fa55 	bl	8001dc8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800191e:	e0b4      	b.n	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b40      	cmp	r3, #64	@ 0x40
 8001924:	f040 80b1 	bne.w	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fac3 	bl	8001eb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800192e:	e0ac      	b.n	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800193a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800193e:	f000 80a4 	beq.w	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <HAL_I2C_EV_IRQHandler+0x178>
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <HAL_I2C_EV_IRQHandler+0x178>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fb3f 	bl	8001fe4 <I2C_MasterReceive_RXNE>
 8001966:	e00f      	b.n	8001988 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 808b 	beq.w	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8085 	beq.w	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fbf7 	bl	8002174 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001986:	e080      	b.n	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
 8001988:	e07f      	b.n	8001a8a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e007      	b.n	80019ac <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d011      	beq.n	80019da <HAL_I2C_EV_IRQHandler+0x1ea>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00c      	beq.n	80019da <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80019d0:	69b9      	ldr	r1, [r7, #24]
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 ffc2 	bl	800295c <I2C_Slave_ADDR>
 80019d8:	e05a      	b.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0x206>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fffc 	bl	80029ec <I2C_Slave_STOPF>
 80019f4:	e04c      	b.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	2b21      	cmp	r3, #33	@ 0x21
 80019fa:	d002      	beq.n	8001a02 <HAL_I2C_EV_IRQHandler+0x212>
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	2b29      	cmp	r3, #41	@ 0x29
 8001a00:	d120      	bne.n	8001a44 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00d      	beq.n	8001a28 <HAL_I2C_EV_IRQHandler+0x238>
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_I2C_EV_IRQHandler+0x238>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d103      	bne.n	8001a28 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fedd 	bl	80027e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a26:	e032      	b.n	8001a8e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d02d      	beq.n	8001a8e <HAL_I2C_EV_IRQHandler+0x29e>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d028      	beq.n	8001a8e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 ff0c 	bl	800285a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a42:	e024      	b.n	8001a8e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00d      	beq.n	8001a6a <HAL_I2C_EV_IRQHandler+0x27a>
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_I2C_EV_IRQHandler+0x27a>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 ff1a 	bl	800289c <I2C_SlaveReceive_RXNE>
 8001a68:	e012      	b.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00d      	beq.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 ff4a 	bl	8002918 <I2C_SlaveReceive_BTF>
 8001a84:	e004      	b.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001a86:	bf00      	nop
 8001a88:	e002      	b.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a8e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b08a      	sub	sp, #40	@ 0x28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ab8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_I2C_ER_IRQHandler+0x4a>
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001ade:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00d      	beq.n	8001b06 <HAL_I2C_ER_IRQHandler+0x70>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001b04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03e      	beq.n	8001b8e <HAL_I2C_ER_IRQHandler+0xf8>
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d039      	beq.n	8001b8e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001b1a:	7efb      	ldrb	r3, [r7, #27]
 8001b1c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b34:	7ebb      	ldrb	r3, [r7, #26]
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d112      	bne.n	8001b60 <HAL_I2C_ER_IRQHandler+0xca>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10f      	bne.n	8001b60 <HAL_I2C_ER_IRQHandler+0xca>
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	2b21      	cmp	r3, #33	@ 0x21
 8001b44:	d008      	beq.n	8001b58 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	2b29      	cmp	r3, #41	@ 0x29
 8001b4a:	d005      	beq.n	8001b58 <HAL_I2C_ER_IRQHandler+0xc2>
 8001b4c:	7cfb      	ldrb	r3, [r7, #19]
 8001b4e:	2b28      	cmp	r3, #40	@ 0x28
 8001b50:	d106      	bne.n	8001b60 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b21      	cmp	r3, #33	@ 0x21
 8001b56:	d103      	bne.n	8001b60 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f001 f877 	bl	8002c4c <I2C_Slave_AF>
 8001b5e:	e016      	b.n	8001b8e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b68:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b72:	7efb      	ldrb	r3, [r7, #27]
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d002      	beq.n	8001b7e <HAL_I2C_ER_IRQHandler+0xe8>
 8001b78:	7efb      	ldrb	r3, [r7, #27]
 8001b7a:	2b40      	cmp	r3, #64	@ 0x40
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00d      	beq.n	8001bb4 <HAL_I2C_ER_IRQHandler+0x11e>
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001bb2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f001 f8b4 	bl	8002d34 <I2C_ITError>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	@ 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ca6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d150      	bne.n	8001d58 <I2C_MasterTransmit_TXE+0xc8>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b21      	cmp	r3, #33	@ 0x21
 8001cba:	d14d      	bne.n	8001d58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d01d      	beq.n	8001cfe <I2C_MasterTransmit_TXE+0x6e>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d01a      	beq.n	8001cfe <I2C_MasterTransmit_TXE+0x6e>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cce:	d016      	beq.n	8001cfe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cde:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2211      	movs	r2, #17
 8001ce4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff6c 	bl	8001bd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cfc:	e060      	b.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b40      	cmp	r3, #64	@ 0x40
 8001d36:	d107      	bne.n	8001d48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff7d 	bl	8001c40 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d46:	e03b      	b.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff3f 	bl	8001bd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d56:	e033      	b.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b21      	cmp	r3, #33	@ 0x21
 8001d5c:	d005      	beq.n	8001d6a <I2C_MasterTransmit_TXE+0xda>
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	2b40      	cmp	r3, #64	@ 0x40
 8001d62:	d12d      	bne.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b22      	cmp	r3, #34	@ 0x22
 8001d68:	d12a      	bne.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d108      	bne.n	8001d86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d84:	e01c      	b.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b40      	cmp	r3, #64	@ 0x40
 8001d90:	d103      	bne.n	8001d9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f88e 	bl	8001eb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8001d98:	e012      	b.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001dbe:	e7ff      	b.n	8001dc0 <I2C_MasterTransmit_TXE+0x130>
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b21      	cmp	r3, #33	@ 0x21
 8001de0:	d164      	bne.n	8001eac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d012      	beq.n	8001e12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e10:	e04c      	b.n	8001eac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d01d      	beq.n	8001e54 <I2C_MasterTransmit_BTF+0x8c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d01a      	beq.n	8001e54 <I2C_MasterTransmit_BTF+0x8c>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e24:	d016      	beq.n	8001e54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2211      	movs	r2, #17
 8001e3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fec1 	bl	8001bd4 <HAL_I2C_MasterTxCpltCallback>
}
 8001e52:	e02b      	b.n	8001eac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b40      	cmp	r3, #64	@ 0x40
 8001e8c:	d107      	bne.n	8001e9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fed2 	bl	8001c40 <HAL_I2C_MemTxCpltCallback>
}
 8001e9c:	e006      	b.n	8001eac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fe94 	bl	8001bd4 <HAL_I2C_MasterTxCpltCallback>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11d      	bne.n	8001f08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10b      	bne.n	8001eec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee4:	1c9a      	adds	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001eea:	e077      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	121b      	asrs	r3, r3, #8
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f06:	e069      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10b      	bne.n	8001f28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f26:	e059      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d152      	bne.n	8001fd6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b22      	cmp	r3, #34	@ 0x22
 8001f34:	d10d      	bne.n	8001f52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f50:	e044      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d015      	beq.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	2b21      	cmp	r3, #33	@ 0x21
 8001f60:	d112      	bne.n	8001f88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001f86:	e029      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d124      	bne.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b21      	cmp	r3, #33	@ 0x21
 8001f96:	d121      	bne.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001fa6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fe36 	bl	8001c40 <HAL_I2C_MemTxCpltCallback>
}
 8001fd4:	e002      	b.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fb84 	bl	80016e4 <I2C_Flush_DR>
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b22      	cmp	r3, #34	@ 0x22
 8001ff6:	f040 80b9 	bne.w	800216c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d921      	bls.n	8002052 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b03      	cmp	r3, #3
 800203c:	f040 8096 	bne.w	800216c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800204e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002050:	e08c      	b.n	800216c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	2b02      	cmp	r3, #2
 8002058:	d07f      	beq.n	800215a <I2C_MasterReceive_RXNE+0x176>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d002      	beq.n	8002066 <I2C_MasterReceive_RXNE+0x82>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d179      	bne.n	800215a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f001 f83e 	bl	80030e8 <I2C_WaitOnSTOPRequestThroughIT>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d14c      	bne.n	800210c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002080:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002090:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b40      	cmp	r3, #64	@ 0x40
 80020ca:	d10a      	bne.n	80020e2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fdba 	bl	8001c54 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020e0:	e044      	b.n	800216c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d002      	beq.n	80020f6 <I2C_MasterReceive_RXNE+0x112>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d103      	bne.n	80020fe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80020fc:	e002      	b.n	8002104 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2212      	movs	r2, #18
 8002102:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fd6f 	bl	8001be8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800210a:	e02f      	b.n	800216c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800211a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fd88 	bl	8001c68 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002158:	e008      	b.n	800216c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002168:	605a      	str	r2, [r3, #4]
}
 800216a:	e7ff      	b.n	800216c <I2C_MasterReceive_RXNE+0x188>
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002180:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b04      	cmp	r3, #4
 800218a:	d11b      	bne.n	80021c4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800219a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80021c2:	e0c8      	b.n	8002356 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d129      	bne.n	8002222 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00a      	beq.n	80021fa <I2C_MasterReceive_BTF+0x86>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d007      	beq.n	80021fa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002220:	e099      	b.n	8002356 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	f040 8081 	bne.w	8002330 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d002      	beq.n	800223a <I2C_MasterReceive_BTF+0xc6>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d108      	bne.n	800224c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e019      	b.n	8002280 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d002      	beq.n	8002258 <I2C_MasterReceive_BTF+0xe4>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d108      	bne.n	800226a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e00a      	b.n	8002280 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d007      	beq.n	8002280 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80022da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b40      	cmp	r3, #64	@ 0x40
 80022ee:	d10a      	bne.n	8002306 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fca8 	bl	8001c54 <HAL_I2C_MemRxCpltCallback>
}
 8002304:	e027      	b.n	8002356 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d002      	beq.n	800231a <I2C_MasterReceive_BTF+0x1a6>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b20      	cmp	r3, #32
 8002318:	d103      	bne.n	8002322 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002320:	e002      	b.n	8002328 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2212      	movs	r2, #18
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fc5d 	bl	8001be8 <HAL_I2C_MasterRxCpltCallback>
}
 800232e:	e012      	b.n	8002356 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b40      	cmp	r3, #64	@ 0x40
 8002370:	d117      	bne.n	80023a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800238a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800238c:	e067      	b.n	800245e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2da      	uxtb	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]
}
 80023a0:	e05d      	b.n	800245e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023aa:	d133      	bne.n	8002414 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b21      	cmp	r3, #33	@ 0x21
 80023b6:	d109      	bne.n	80023cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	e008      	b.n	80023de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <I2C_Master_SB+0x92>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d108      	bne.n	8002402 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d032      	beq.n	800245e <I2C_Master_SB+0x100>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d02d      	beq.n	800245e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002410:	605a      	str	r2, [r3, #4]
}
 8002412:	e024      	b.n	800245e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10e      	bne.n	800243a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	b29b      	uxth	r3, r3
 8002422:	11db      	asrs	r3, r3, #7
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f003 0306 	and.w	r3, r3, #6
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f063 030f 	orn	r3, r3, #15
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]
}
 8002438:	e011      	b.n	800245e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10d      	bne.n	800245e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	b29b      	uxth	r3, r3
 8002448:	11db      	asrs	r3, r3, #7
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f003 0306 	and.w	r3, r3, #6
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f063 030e 	orn	r3, r3, #14
 8002456:	b2da      	uxtb	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	611a      	str	r2, [r3, #16]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	b2da      	uxtb	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <I2C_Master_ADD10+0x26>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d108      	bne.n	80024a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00c      	beq.n	80024b2 <I2C_Master_ADD10+0x48>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b0:	605a      	str	r2, [r3, #4]
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80024be:	b480      	push	{r7}
 80024c0:	b091      	sub	sp, #68	@ 0x44
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b22      	cmp	r3, #34	@ 0x22
 80024e6:	f040 8169 	bne.w	80027bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <I2C_Master_ADDR+0x54>
 80024f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80024f6:	2b40      	cmp	r3, #64	@ 0x40
 80024f8:	d10b      	bne.n	8002512 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fa:	2300      	movs	r3, #0
 80024fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	633b      	str	r3, [r7, #48]	@ 0x30
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	633b      	str	r3, [r7, #48]	@ 0x30
 800250e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002510:	e160      	b.n	80027d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11d      	bne.n	8002556 <I2C_Master_ADDR+0x98>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002522:	d118      	bne.n	8002556 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002548:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	651a      	str	r2, [r3, #80]	@ 0x50
 8002554:	e13e      	b.n	80027d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d113      	bne.n	8002588 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002560:	2300      	movs	r3, #0
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e115      	b.n	80027b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	f040 808a 	bne.w	80026a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002596:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800259a:	d137      	bne.n	800260c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025ba:	d113      	bne.n	80025e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	e0e7      	b.n	80027b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e0d3      	b.n	80027b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800260c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260e:	2b08      	cmp	r3, #8
 8002610:	d02e      	beq.n	8002670 <I2C_Master_ADDR+0x1b2>
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002614:	2b20      	cmp	r3, #32
 8002616:	d02b      	beq.n	8002670 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261a:	2b12      	cmp	r3, #18
 800261c:	d102      	bne.n	8002624 <I2C_Master_ADDR+0x166>
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	2b01      	cmp	r3, #1
 8002622:	d125      	bne.n	8002670 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00e      	beq.n	8002648 <I2C_Master_ADDR+0x18a>
 800262a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262c:	2b02      	cmp	r3, #2
 800262e:	d00b      	beq.n	8002648 <I2C_Master_ADDR+0x18a>
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	2b10      	cmp	r3, #16
 8002634:	d008      	beq.n	8002648 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e007      	b.n	8002658 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002656:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	e0a1      	b.n	80027b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800267e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e085      	b.n	80027b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d14d      	bne.n	800274e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d016      	beq.n	80026e6 <I2C_Master_ADDR+0x228>
 80026b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d013      	beq.n	80026e6 <I2C_Master_ADDR+0x228>
 80026be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d010      	beq.n	80026e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e007      	b.n	80026f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002704:	d117      	bne.n	8002736 <I2C_Master_ADDR+0x278>
 8002706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002708:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800270c:	d00b      	beq.n	8002726 <I2C_Master_ADDR+0x268>
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	2b01      	cmp	r3, #1
 8002712:	d008      	beq.n	8002726 <I2C_Master_ADDR+0x268>
 8002714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002716:	2b08      	cmp	r3, #8
 8002718:	d005      	beq.n	8002726 <I2C_Master_ADDR+0x268>
 800271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271c:	2b10      	cmp	r3, #16
 800271e:	d002      	beq.n	8002726 <I2C_Master_ADDR+0x268>
 8002720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002722:	2b20      	cmp	r3, #32
 8002724:	d107      	bne.n	8002736 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002734:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	e032      	b.n	80027b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800275c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800276c:	d117      	bne.n	800279e <I2C_Master_ADDR+0x2e0>
 800276e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002770:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002774:	d00b      	beq.n	800278e <I2C_Master_ADDR+0x2d0>
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	2b01      	cmp	r3, #1
 800277a:	d008      	beq.n	800278e <I2C_Master_ADDR+0x2d0>
 800277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277e:	2b08      	cmp	r3, #8
 8002780:	d005      	beq.n	800278e <I2C_Master_ADDR+0x2d0>
 8002782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002784:	2b10      	cmp	r3, #16
 8002786:	d002      	beq.n	800278e <I2C_Master_ADDR+0x2d0>
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	2b20      	cmp	r3, #32
 800278c:	d107      	bne.n	800279e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800279c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80027ba:	e00b      	b.n	80027d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
}
 80027d2:	e7ff      	b.n	80027d4 <I2C_Master_ADDR+0x316>
 80027d4:	bf00      	nop
 80027d6:	3744      	adds	r7, #68	@ 0x44
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d02b      	beq.n	8002852 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d114      	bne.n	8002852 <I2C_SlaveTransmit_TXE+0x72>
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b29      	cmp	r3, #41	@ 0x29
 800282c:	d111      	bne.n	8002852 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2221      	movs	r2, #33	@ 0x21
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2228      	movs	r2, #40	@ 0x28
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff f9d5 	bl	8001bfc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d011      	beq.n	8002890 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02c      	beq.n	8002910 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d114      	bne.n	8002910 <I2C_SlaveReceive_RXNE+0x74>
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ea:	d111      	bne.n	8002910 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2222      	movs	r2, #34	@ 0x22
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2228      	movs	r2, #40	@ 0x28
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fd fe30 	bl	8000570 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d012      	beq.n	8002950 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002976:	2b28      	cmp	r3, #40	@ 0x28
 8002978:	d125      	bne.n	80029c6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002988:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	81bb      	strh	r3, [r7, #12]
 80029a8:	e002      	b.n	80029b0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80029b8:	89ba      	ldrh	r2, [r7, #12]
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff f926 	bl	8001c10 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029c4:	e00e      	b.n	80029e4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a48:	d172      	bne.n	8002b30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b22      	cmp	r3, #34	@ 0x22
 8002a4e:	d002      	beq.n	8002a56 <I2C_Slave_STOPF+0x6a>
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a54:	d135      	bne.n	8002ac2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fb37 	bl	8001102 <HAL_DMA_GetState>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d049      	beq.n	8002b2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9e:	4a69      	ldr	r2, [pc, #420]	@ (8002c44 <I2C_Slave_STOPF+0x258>)
 8002aa0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fb09 	bl	80010be <HAL_DMA_Abort_IT>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d03d      	beq.n	8002b2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002abc:	4610      	mov	r0, r2
 8002abe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ac0:	e035      	b.n	8002b2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f043 0204 	orr.w	r2, r3, #4
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fb01 	bl	8001102 <HAL_DMA_GetState>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d014      	beq.n	8002b30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	4a4e      	ldr	r2, [pc, #312]	@ (8002c44 <I2C_Slave_STOPF+0x258>)
 8002b0c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fad3 	bl	80010be <HAL_DMA_Abort_IT>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4798      	blx	r3
 8002b2c:	e000      	b.n	8002b30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d03e      	beq.n	8002bb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d112      	bne.n	8002b6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	2b40      	cmp	r3, #64	@ 0x40
 8002b7a:	d112      	bne.n	8002ba2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f043 0204 	orr.w	r2, r3, #4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8b7 	bl	8002d34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002bc6:	e039      	b.n	8002c3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bcc:	d109      	bne.n	8002be2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2228      	movs	r2, #40	@ 0x28
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd fcc7 	bl	8000570 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b28      	cmp	r3, #40	@ 0x28
 8002bec:	d111      	bne.n	8002c12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a15      	ldr	r2, [pc, #84]	@ (8002c48 <I2C_Slave_STOPF+0x25c>)
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff f80e 	bl	8001c2c <HAL_I2C_ListenCpltCallback>
}
 8002c10:	e014      	b.n	8002c3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	2b22      	cmp	r3, #34	@ 0x22
 8002c18:	d002      	beq.n	8002c20 <I2C_Slave_STOPF+0x234>
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b22      	cmp	r3, #34	@ 0x22
 8002c1e:	d10d      	bne.n	8002c3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fc9a 	bl	8000570 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	08002f99 	.word	0x08002f99
 8002c48:	ffff0000 	.word	0xffff0000

08002c4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d002      	beq.n	8002c6e <I2C_Slave_AF+0x22>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d129      	bne.n	8002cc2 <I2C_Slave_AF+0x76>
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b28      	cmp	r3, #40	@ 0x28
 8002c72:	d126      	bne.n	8002cc2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a2e      	ldr	r2, [pc, #184]	@ (8002d30 <I2C_Slave_AF+0xe4>)
 8002c78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe ffb6 	bl	8001c2c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002cc0:	e031      	b.n	8002d26 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	2b21      	cmp	r3, #33	@ 0x21
 8002cc6:	d129      	bne.n	8002d1c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a19      	ldr	r2, [pc, #100]	@ (8002d30 <I2C_Slave_AF+0xe4>)
 8002ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2221      	movs	r2, #33	@ 0x21
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cf2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cfc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fce8 	bl	80016e4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fe ff71 	bl	8001bfc <HAL_I2C_SlaveTxCpltCallback>
}
 8002d1a:	e004      	b.n	8002d26 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d24:	615a      	str	r2, [r3, #20]
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d4c:	7bbb      	ldrb	r3, [r7, #14]
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d002      	beq.n	8002d58 <I2C_ITError+0x24>
 8002d52:	7bbb      	ldrb	r3, [r7, #14]
 8002d54:	2b40      	cmp	r3, #64	@ 0x40
 8002d56:	d10a      	bne.n	8002d6e <I2C_ITError+0x3a>
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b22      	cmp	r3, #34	@ 0x22
 8002d5c:	d107      	bne.n	8002d6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d74:	2b28      	cmp	r3, #40	@ 0x28
 8002d76:	d107      	bne.n	8002d88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2228      	movs	r2, #40	@ 0x28
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d86:	e015      	b.n	8002db4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d96:	d00a      	beq.n	8002dae <I2C_ITError+0x7a>
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b60      	cmp	r3, #96	@ 0x60
 8002d9c:	d007      	beq.n	8002dae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc2:	d162      	bne.n	8002e8a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d020      	beq.n	8002e24 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	4a6a      	ldr	r2, [pc, #424]	@ (8002f90 <I2C_ITError+0x25c>)
 8002de8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f965 	bl	80010be <HAL_DMA_Abort_IT>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8089 	beq.w	8002f0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4798      	blx	r3
 8002e22:	e074      	b.n	8002f0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	4a59      	ldr	r2, [pc, #356]	@ (8002f90 <I2C_ITError+0x25c>)
 8002e2a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f944 	bl	80010be <HAL_DMA_Abort_IT>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d068      	beq.n	8002f0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e46:	2b40      	cmp	r3, #64	@ 0x40
 8002e48:	d10b      	bne.n	8002e62 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e84:	4610      	mov	r0, r2
 8002e86:	4798      	blx	r3
 8002e88:	e041      	b.n	8002f0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b60      	cmp	r3, #96	@ 0x60
 8002e94:	d125      	bne.n	8002ee2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eae:	2b40      	cmp	r3, #64	@ 0x40
 8002eb0:	d10b      	bne.n	8002eca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fece 	bl	8001c7c <HAL_I2C_AbortCpltCallback>
 8002ee0:	e015      	b.n	8002f0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d10b      	bne.n	8002f08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fe fead 	bl	8001c68 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10e      	bne.n	8002f3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d104      	bne.n	8002f3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d113      	bne.n	8002f88 <I2C_ITError+0x254>
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b28      	cmp	r3, #40	@ 0x28
 8002f64:	d110      	bne.n	8002f88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <I2C_ITError+0x260>)
 8002f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fe52 	bl	8001c2c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	08002f99 	.word	0x08002f99
 8002f94:	ffff0000 	.word	0xffff0000

08002f98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80030e0 <I2C_DMAAbort+0x148>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80030e4 <I2C_DMAAbort+0x14c>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0a1a      	lsrs	r2, r3, #8
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00da      	lsls	r2, r3, #3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002fde:	e00a      	b.n	8002ff6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ff4:	d0ea      	beq.n	8002fcc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003002:	2200      	movs	r2, #0
 8003004:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	2200      	movs	r2, #0
 8003014:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003024:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003038:	2200      	movs	r2, #0
 800303a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	2200      	movs	r2, #0
 800304a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b60      	cmp	r3, #96	@ 0x60
 8003066:	d10e      	bne.n	8003086 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7fe fdfc 	bl	8001c7c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003084:	e027      	b.n	80030d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800308c:	2b28      	cmp	r3, #40	@ 0x28
 800308e:	d117      	bne.n	80030c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2228      	movs	r2, #40	@ 0x28
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80030be:	e007      	b.n	80030d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80030d0:	6978      	ldr	r0, [r7, #20]
 80030d2:	f7fe fdc9 	bl	8001c68 <HAL_I2C_ErrorCallback>
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000
 80030e4:	14f8b589 	.word	0x14f8b589

080030e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030f4:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	4a13      	ldr	r2, [pc, #76]	@ (8003148 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	0a1a      	lsrs	r2, r3, #8
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3b01      	subs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e008      	b.n	8003138 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003134:	d0e9      	beq.n	800310a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	20000000 	.word	0x20000000
 8003148:	14f8b589 	.word	0x14f8b589

0800314c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800315c:	d103      	bne.n	8003166 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003164:	e007      	b.n	8003176 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800316e:	d102      	bne.n	8003176 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2208      	movs	r2, #8
 8003174:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e267      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d075      	beq.n	800328e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031a2:	4b88      	ldr	r3, [pc, #544]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d00c      	beq.n	80031c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ae:	4b85      	ldr	r3, [pc, #532]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d112      	bne.n	80031e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ba:	4b82      	ldr	r3, [pc, #520]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c6:	d10b      	bne.n	80031e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	4b7e      	ldr	r3, [pc, #504]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d05b      	beq.n	800328c <HAL_RCC_OscConfig+0x108>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d157      	bne.n	800328c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e242      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e8:	d106      	bne.n	80031f8 <HAL_RCC_OscConfig+0x74>
 80031ea:	4b76      	ldr	r3, [pc, #472]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a75      	ldr	r2, [pc, #468]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e01d      	b.n	8003234 <HAL_RCC_OscConfig+0xb0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x98>
 8003202:	4b70      	ldr	r3, [pc, #448]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6f      	ldr	r2, [pc, #444]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b6d      	ldr	r3, [pc, #436]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6c      	ldr	r2, [pc, #432]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0xb0>
 800321c:	4b69      	ldr	r3, [pc, #420]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a68      	ldr	r2, [pc, #416]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b66      	ldr	r3, [pc, #408]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a65      	ldr	r2, [pc, #404]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fd fe22 	bl	8000e84 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fd fe1e 	bl	8000e84 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e207      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b5b      	ldr	r3, [pc, #364]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0xc0>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fd fe0e 	bl	8000e84 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fd fe0a 	bl	8000e84 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1f3      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	4b51      	ldr	r3, [pc, #324]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0xe8>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d063      	beq.n	8003362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800329a:	4b4a      	ldr	r3, [pc, #296]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a6:	4b47      	ldr	r3, [pc, #284]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d11c      	bne.n	80032ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b2:	4b44      	ldr	r3, [pc, #272]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d116      	bne.n	80032ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	4b41      	ldr	r3, [pc, #260]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_RCC_OscConfig+0x152>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1c7      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d6:	4b3b      	ldr	r3, [pc, #236]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4937      	ldr	r1, [pc, #220]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	e03a      	b.n	8003362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f4:	4b34      	ldr	r3, [pc, #208]	@ (80033c8 <HAL_RCC_OscConfig+0x244>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fd fdc3 	bl	8000e84 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003302:	f7fd fdbf 	bl	8000e84 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e1a8      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003314:	4b2b      	ldr	r3, [pc, #172]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b28      	ldr	r3, [pc, #160]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4925      	ldr	r1, [pc, #148]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
 8003334:	e015      	b.n	8003362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003336:	4b24      	ldr	r3, [pc, #144]	@ (80033c8 <HAL_RCC_OscConfig+0x244>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fd fda2 	bl	8000e84 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003344:	f7fd fd9e 	bl	8000e84 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e187      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d036      	beq.n	80033dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d016      	beq.n	80033a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003376:	4b15      	ldr	r3, [pc, #84]	@ (80033cc <HAL_RCC_OscConfig+0x248>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fd fd82 	bl	8000e84 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003384:	f7fd fd7e 	bl	8000e84 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e167      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_RCC_OscConfig+0x240>)
 8003398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x200>
 80033a2:	e01b      	b.n	80033dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a4:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <HAL_RCC_OscConfig+0x248>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7fd fd6b 	bl	8000e84 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b0:	e00e      	b.n	80033d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fd fd67 	bl	8000e84 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d907      	bls.n	80033d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e150      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
 80033c4:	40023800 	.word	0x40023800
 80033c8:	42470000 	.word	0x42470000
 80033cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	4b88      	ldr	r3, [pc, #544]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ea      	bne.n	80033b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8097 	beq.w	8003518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ee:	4b81      	ldr	r3, [pc, #516]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b7d      	ldr	r3, [pc, #500]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	4a7c      	ldr	r2, [pc, #496]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	@ 0x40
 800340a:	4b7a      	ldr	r3, [pc, #488]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b77      	ldr	r3, [pc, #476]	@ (80035f8 <HAL_RCC_OscConfig+0x474>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d118      	bne.n	8003458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003426:	4b74      	ldr	r3, [pc, #464]	@ (80035f8 <HAL_RCC_OscConfig+0x474>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a73      	ldr	r2, [pc, #460]	@ (80035f8 <HAL_RCC_OscConfig+0x474>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003432:	f7fd fd27 	bl	8000e84 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fd fd23 	bl	8000e84 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e10c      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	4b6a      	ldr	r3, [pc, #424]	@ (80035f8 <HAL_RCC_OscConfig+0x474>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x2ea>
 8003460:	4b64      	ldr	r3, [pc, #400]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003464:	4a63      	ldr	r2, [pc, #396]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6713      	str	r3, [r2, #112]	@ 0x70
 800346c:	e01c      	b.n	80034a8 <HAL_RCC_OscConfig+0x324>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b05      	cmp	r3, #5
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x30c>
 8003476:	4b5f      	ldr	r3, [pc, #380]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	4a5e      	ldr	r2, [pc, #376]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	6713      	str	r3, [r2, #112]	@ 0x70
 8003482:	4b5c      	ldr	r3, [pc, #368]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	4a5b      	ldr	r2, [pc, #364]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6713      	str	r3, [r2, #112]	@ 0x70
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0x324>
 8003490:	4b58      	ldr	r3, [pc, #352]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	4a57      	ldr	r2, [pc, #348]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	@ 0x70
 800349c:	4b55      	ldr	r3, [pc, #340]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	4a54      	ldr	r2, [pc, #336]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 80034a2:	f023 0304 	bic.w	r3, r3, #4
 80034a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fd fce8 	bl	8000e84 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fd fce4 	bl	8000e84 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0cb      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ce:	4b49      	ldr	r3, [pc, #292]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ee      	beq.n	80034b8 <HAL_RCC_OscConfig+0x334>
 80034da:	e014      	b.n	8003506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034dc:	f7fd fcd2 	bl	8000e84 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fd fcce 	bl	8000e84 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0b5      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fa:	4b3e      	ldr	r3, [pc, #248]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ee      	bne.n	80034e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350c:	4b39      	ldr	r3, [pc, #228]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	4a38      	ldr	r2, [pc, #224]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80a1 	beq.w	8003664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003522:	4b34      	ldr	r3, [pc, #208]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b08      	cmp	r3, #8
 800352c:	d05c      	beq.n	80035e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d141      	bne.n	80035ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	4b31      	ldr	r3, [pc, #196]	@ (80035fc <HAL_RCC_OscConfig+0x478>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fd fca2 	bl	8000e84 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd fc9e 	bl	8000e84 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e087      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	4b27      	ldr	r3, [pc, #156]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	3b01      	subs	r3, #1
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	491b      	ldr	r1, [pc, #108]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800358c:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <HAL_RCC_OscConfig+0x478>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7fd fc77 	bl	8000e84 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fd fc73 	bl	8000e84 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e05c      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ac:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0f0      	beq.n	800359a <HAL_RCC_OscConfig+0x416>
 80035b8:	e054      	b.n	8003664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <HAL_RCC_OscConfig+0x478>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fd fc60 	bl	8000e84 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fc5c 	bl	8000e84 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e045      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <HAL_RCC_OscConfig+0x470>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x444>
 80035e6:	e03d      	b.n	8003664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e038      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40007000 	.word	0x40007000
 80035fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x4ec>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d028      	beq.n	8003660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d121      	bne.n	8003660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d11a      	bne.n	8003660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003638:	4293      	cmp	r3, r2
 800363a:	d111      	bne.n	8003660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	3b01      	subs	r3, #1
 800364a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d107      	bne.n	8003660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800

08003674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0cc      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b68      	ldr	r3, [pc, #416]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d90c      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b65      	ldr	r3, [pc, #404]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b63      	ldr	r3, [pc, #396]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0b8      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c8:	4b59      	ldr	r3, [pc, #356]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	4a58      	ldr	r2, [pc, #352]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a52      	ldr	r2, [pc, #328]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b50      	ldr	r3, [pc, #320]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	494d      	ldr	r1, [pc, #308]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d044      	beq.n	8003794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	4b47      	ldr	r3, [pc, #284]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d119      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d003      	beq.n	8003732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372e:	2b03      	cmp	r3, #3
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	4b3f      	ldr	r3, [pc, #252]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	4b3b      	ldr	r3, [pc, #236]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e067      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003752:	4b37      	ldr	r3, [pc, #220]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4934      	ldr	r1, [pc, #208]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003764:	f7fd fb8e 	bl	8000e84 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fd fb8a 	bl	8000e84 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e04f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b2b      	ldr	r3, [pc, #172]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 020c 	and.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	429a      	cmp	r2, r3
 8003792:	d1eb      	bne.n	800376c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b25      	ldr	r3, [pc, #148]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d20c      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b22      	ldr	r3, [pc, #136]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e032      	b.n	8003822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4916      	ldr	r1, [pc, #88]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e6:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	490e      	ldr	r1, [pc, #56]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037fa:	f000 f821 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037fe:	4602      	mov	r2, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	490a      	ldr	r1, [pc, #40]	@ (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	5ccb      	ldrb	r3, [r1, r3]
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a09      	ldr	r2, [pc, #36]	@ (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003816:	4b09      	ldr	r3, [pc, #36]	@ (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd faee 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023c00 	.word	0x40023c00
 8003830:	40023800 	.word	0x40023800
 8003834:	08005184 	.word	0x08005184
 8003838:	20000000 	.word	0x20000000
 800383c:	20000004 	.word	0x20000004

08003840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b094      	sub	sp, #80	@ 0x50
 8003846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003858:	4b79      	ldr	r3, [pc, #484]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b08      	cmp	r3, #8
 8003862:	d00d      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x40>
 8003864:	2b08      	cmp	r3, #8
 8003866:	f200 80e1 	bhi.w	8003a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x34>
 800386e:	2b04      	cmp	r3, #4
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x3a>
 8003872:	e0db      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b73      	ldr	r3, [pc, #460]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003876:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003878:	e0db      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800387a:	4b73      	ldr	r3, [pc, #460]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800387c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800387e:	e0d8      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003880:	4b6f      	ldr	r3, [pc, #444]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003888:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800388a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003896:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	099b      	lsrs	r3, r3, #6
 800389c:	2200      	movs	r2, #0
 800389e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038aa:	2300      	movs	r3, #0
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	0159      	lsls	r1, r3, #5
 80038c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c4:	0150      	lsls	r0, r2, #5
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4621      	mov	r1, r4
 80038cc:	1a51      	subs	r1, r2, r1
 80038ce:	6139      	str	r1, [r7, #16]
 80038d0:	4629      	mov	r1, r5
 80038d2:	eb63 0301 	sbc.w	r3, r3, r1
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038e4:	4659      	mov	r1, fp
 80038e6:	018b      	lsls	r3, r1, #6
 80038e8:	4651      	mov	r1, sl
 80038ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ee:	4651      	mov	r1, sl
 80038f0:	018a      	lsls	r2, r1, #6
 80038f2:	4651      	mov	r1, sl
 80038f4:	ebb2 0801 	subs.w	r8, r2, r1
 80038f8:	4659      	mov	r1, fp
 80038fa:	eb63 0901 	sbc.w	r9, r3, r1
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800390e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003912:	4690      	mov	r8, r2
 8003914:	4699      	mov	r9, r3
 8003916:	4623      	mov	r3, r4
 8003918:	eb18 0303 	adds.w	r3, r8, r3
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	462b      	mov	r3, r5
 8003920:	eb49 0303 	adc.w	r3, r9, r3
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003932:	4629      	mov	r1, r5
 8003934:	024b      	lsls	r3, r1, #9
 8003936:	4621      	mov	r1, r4
 8003938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800393c:	4621      	mov	r1, r4
 800393e:	024a      	lsls	r2, r1, #9
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003946:	2200      	movs	r2, #0
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800394a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800394c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003950:	f7fc fc96 	bl	8000280 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4613      	mov	r3, r2
 800395a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800395c:	e058      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395e:	4b38      	ldr	r3, [pc, #224]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	099b      	lsrs	r3, r3, #6
 8003964:	2200      	movs	r2, #0
 8003966:	4618      	mov	r0, r3
 8003968:	4611      	mov	r1, r2
 800396a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800396e:	623b      	str	r3, [r7, #32]
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
 8003974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003978:	4642      	mov	r2, r8
 800397a:	464b      	mov	r3, r9
 800397c:	f04f 0000 	mov.w	r0, #0
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	0159      	lsls	r1, r3, #5
 8003986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398a:	0150      	lsls	r0, r2, #5
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4641      	mov	r1, r8
 8003992:	ebb2 0a01 	subs.w	sl, r2, r1
 8003996:	4649      	mov	r1, r9
 8003998:	eb63 0b01 	sbc.w	fp, r3, r1
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039b0:	ebb2 040a 	subs.w	r4, r2, sl
 80039b4:	eb63 050b 	sbc.w	r5, r3, fp
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	00eb      	lsls	r3, r5, #3
 80039c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c6:	00e2      	lsls	r2, r4, #3
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	4643      	mov	r3, r8
 80039ce:	18e3      	adds	r3, r4, r3
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	464b      	mov	r3, r9
 80039d4:	eb45 0303 	adc.w	r3, r5, r3
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039e6:	4629      	mov	r1, r5
 80039e8:	028b      	lsls	r3, r1, #10
 80039ea:	4621      	mov	r1, r4
 80039ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039f0:	4621      	mov	r1, r4
 80039f2:	028a      	lsls	r2, r1, #10
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fa:	2200      	movs	r2, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	61fa      	str	r2, [r7, #28]
 8003a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a04:	f7fc fc3c 	bl	8000280 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3750      	adds	r7, #80	@ 0x50
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	007a1200 	.word	0x007a1200

08003a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a50:	4b03      	ldr	r3, [pc, #12]	@ (8003a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000000 	.word	0x20000000

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a68:	f7ff fff0 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0a9b      	lsrs	r3, r3, #10
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	08005194 	.word	0x08005194

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a90:	f7ff ffdc 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0b5b      	lsrs	r3, r3, #13
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	@ (8003ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	08005194 	.word	0x08005194

08003ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e042      	b.n	8003b4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd f81c 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	@ 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f973 	bl	8003de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d175      	bne.n	8003c60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_UART_Transmit+0x2c>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e06e      	b.n	8003c62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2221      	movs	r2, #33	@ 0x21
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b92:	f7fd f977 	bl	8000e84 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bac:	d108      	bne.n	8003bc0 <HAL_UART_Transmit+0x6c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e003      	b.n	8003bc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bc8:	e02e      	b.n	8003c28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	@ 0x80
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f848 	bl	8003c6a <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e03a      	b.n	8003c62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	3302      	adds	r3, #2
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e007      	b.n	8003c1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	3301      	adds	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1cb      	bne.n	8003bca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2140      	movs	r1, #64	@ 0x40
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f814 	bl	8003c6a <UART_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e006      	b.n	8003c62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4613      	mov	r3, r2
 8003c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	e03b      	b.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d037      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fd f8fe 	bl	8000e84 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	6a3a      	ldr	r2, [r7, #32]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e03a      	b.n	8003d14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d023      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b80      	cmp	r3, #128	@ 0x80
 8003cb0:	d020      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b40      	cmp	r3, #64	@ 0x40
 8003cb6:	d01d      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d116      	bne.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f81d 	bl	8003d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e00f      	b.n	8003d14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d0b4      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b095      	sub	sp, #84	@ 0x54
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d44:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e5      	bne.n	8003d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d119      	bne.n	8003dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db4:	61ba      	str	r2, [r7, #24]
 8003db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dd6:	bf00      	nop
 8003dd8:	3754      	adds	r7, #84	@ 0x54
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b0c0      	sub	sp, #256	@ 0x100
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	68d9      	ldr	r1, [r3, #12]
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	ea40 0301 	orr.w	r3, r0, r1
 8003e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e3c:	f021 010c 	bic.w	r1, r1, #12
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	6999      	ldr	r1, [r3, #24]
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	ea40 0301 	orr.w	r3, r0, r1
 8003e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b8f      	ldr	r3, [pc, #572]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d005      	beq.n	8003e84 <UART_SetConfig+0xa0>
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80040b4 <UART_SetConfig+0x2d0>)
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d104      	bne.n	8003e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7ff fe02 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 8003e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e8c:	e003      	b.n	8003e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e8e:	f7ff fde9 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 8003e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea0:	f040 810c 	bne.w	80040bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	eb12 0801 	adds.w	r8, r2, r1
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb43 0901 	adc.w	r9, r3, r1
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee6:	4690      	mov	r8, r2
 8003ee8:	4699      	mov	r9, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	eb18 0303 	adds.w	r3, r8, r3
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	eb49 0303 	adc.w	r3, r9, r3
 8003efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f12:	460b      	mov	r3, r1
 8003f14:	18db      	adds	r3, r3, r3
 8003f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f18:	4613      	mov	r3, r2
 8003f1a:	eb42 0303 	adc.w	r3, r2, r3
 8003f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f28:	f7fc f9aa 	bl	8000280 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4b61      	ldr	r3, [pc, #388]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003f32:	fba3 2302 	umull	r2, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	011c      	lsls	r4, r3, #4
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f54:	415b      	adcs	r3, r3
 8003f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f62:	4649      	mov	r1, r9
 8003f64:	eb43 0b01 	adc.w	fp, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f7c:	4692      	mov	sl, r2
 8003f7e:	469b      	mov	fp, r3
 8003f80:	4643      	mov	r3, r8
 8003f82:	eb1a 0303 	adds.w	r3, sl, r3
 8003f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	18db      	adds	r3, r3, r3
 8003fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fae:	4613      	mov	r3, r2
 8003fb0:	eb42 0303 	adc.w	r3, r2, r3
 8003fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fbe:	f7fc f95f 	bl	8000280 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003fca:	fba3 2301 	umull	r2, r3, r3, r1
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2264      	movs	r2, #100	@ 0x64
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	1acb      	subs	r3, r1, r3
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fde:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fec:	441c      	add	r4, r3
 8003fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	1891      	adds	r1, r2, r2
 8004006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004008:	415b      	adcs	r3, r3
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800400c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004010:	4641      	mov	r1, r8
 8004012:	1851      	adds	r1, r2, r1
 8004014:	6339      	str	r1, [r7, #48]	@ 0x30
 8004016:	4649      	mov	r1, r9
 8004018:	414b      	adcs	r3, r1
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004028:	4659      	mov	r1, fp
 800402a:	00cb      	lsls	r3, r1, #3
 800402c:	4651      	mov	r1, sl
 800402e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004032:	4651      	mov	r1, sl
 8004034:	00ca      	lsls	r2, r1, #3
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	4603      	mov	r3, r0
 800403c:	4642      	mov	r2, r8
 800403e:	189b      	adds	r3, r3, r2
 8004040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004044:	464b      	mov	r3, r9
 8004046:	460a      	mov	r2, r1
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800405c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004064:	460b      	mov	r3, r1
 8004066:	18db      	adds	r3, r3, r3
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406a:	4613      	mov	r3, r2
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800407a:	f7fc f901 	bl	8000280 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	2164      	movs	r1, #100	@ 0x64
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	3332      	adds	r3, #50	@ 0x32
 8004096:	4a08      	ldr	r2, [pc, #32]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4422      	add	r2, r4
 80040aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ac:	e106      	b.n	80042bc <UART_SetConfig+0x4d8>
 80040ae:	bf00      	nop
 80040b0:	40011000 	.word	0x40011000
 80040b4:	40011400 	.word	0x40011400
 80040b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040ce:	4642      	mov	r2, r8
 80040d0:	464b      	mov	r3, r9
 80040d2:	1891      	adds	r1, r2, r2
 80040d4:	6239      	str	r1, [r7, #32]
 80040d6:	415b      	adcs	r3, r3
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040de:	4641      	mov	r1, r8
 80040e0:	1854      	adds	r4, r2, r1
 80040e2:	4649      	mov	r1, r9
 80040e4:	eb43 0501 	adc.w	r5, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	00eb      	lsls	r3, r5, #3
 80040f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f6:	00e2      	lsls	r2, r4, #3
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	4643      	mov	r3, r8
 80040fe:	18e3      	adds	r3, r4, r3
 8004100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004104:	464b      	mov	r3, r9
 8004106:	eb45 0303 	adc.w	r3, r5, r3
 800410a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800411a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800412a:	4629      	mov	r1, r5
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004134:	4621      	mov	r1, r4
 8004136:	008a      	lsls	r2, r1, #2
 8004138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800413c:	f7fc f8a0 	bl	8000280 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4b60      	ldr	r3, [pc, #384]	@ (80042c8 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2302 	umull	r2, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	011c      	lsls	r4, r3, #4
 800414e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004152:	2200      	movs	r2, #0
 8004154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800415c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	1891      	adds	r1, r2, r2
 8004166:	61b9      	str	r1, [r7, #24]
 8004168:	415b      	adcs	r3, r3
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004170:	4641      	mov	r1, r8
 8004172:	1851      	adds	r1, r2, r1
 8004174:	6139      	str	r1, [r7, #16]
 8004176:	4649      	mov	r1, r9
 8004178:	414b      	adcs	r3, r1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004188:	4659      	mov	r1, fp
 800418a:	00cb      	lsls	r3, r1, #3
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004192:	4651      	mov	r1, sl
 8004194:	00ca      	lsls	r2, r1, #3
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	4603      	mov	r3, r0
 800419c:	4642      	mov	r2, r8
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041a4:	464b      	mov	r3, r9
 80041a6:	460a      	mov	r2, r1
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041c8:	4649      	mov	r1, r9
 80041ca:	008b      	lsls	r3, r1, #2
 80041cc:	4641      	mov	r1, r8
 80041ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d2:	4641      	mov	r1, r8
 80041d4:	008a      	lsls	r2, r1, #2
 80041d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041da:	f7fc f851 	bl	8000280 <__aeabi_uldivmod>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	4b38      	ldr	r3, [pc, #224]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80041e6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	2264      	movs	r2, #100	@ 0x64
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	1acb      	subs	r3, r1, r3
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	3332      	adds	r3, #50	@ 0x32
 80041f8:	4a33      	ldr	r2, [pc, #204]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004204:	441c      	add	r4, r3
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	673b      	str	r3, [r7, #112]	@ 0x70
 800420e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	1891      	adds	r1, r2, r2
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	415b      	adcs	r3, r3
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004224:	4641      	mov	r1, r8
 8004226:	1851      	adds	r1, r2, r1
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	4649      	mov	r1, r9
 800422c:	414b      	adcs	r3, r1
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800423c:	4659      	mov	r1, fp
 800423e:	00cb      	lsls	r3, r1, #3
 8004240:	4651      	mov	r1, sl
 8004242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004246:	4651      	mov	r1, sl
 8004248:	00ca      	lsls	r2, r1, #3
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	4603      	mov	r3, r0
 8004250:	4642      	mov	r2, r8
 8004252:	189b      	adds	r3, r3, r2
 8004254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004256:	464b      	mov	r3, r9
 8004258:	460a      	mov	r2, r1
 800425a:	eb42 0303 	adc.w	r3, r2, r3
 800425e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	663b      	str	r3, [r7, #96]	@ 0x60
 800426a:	667a      	str	r2, [r7, #100]	@ 0x64
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004278:	4649      	mov	r1, r9
 800427a:	008b      	lsls	r3, r1, #2
 800427c:	4641      	mov	r1, r8
 800427e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004282:	4641      	mov	r1, r8
 8004284:	008a      	lsls	r2, r1, #2
 8004286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800428a:	f7fb fff9 	bl	8000280 <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <UART_SetConfig+0x4e4>)
 8004294:	fba3 1302 	umull	r1, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	2164      	movs	r1, #100	@ 0x64
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	3332      	adds	r3, #50	@ 0x32
 80042a6:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 020f 	and.w	r2, r3, #15
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4422      	add	r2, r4
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042c2:	46bd      	mov	sp, r7
 80042c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c8:	51eb851f 	.word	0x51eb851f

080042cc <std>:
 80042cc:	2300      	movs	r3, #0
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
 80042d2:	e9c0 3300 	strd	r3, r3, [r0]
 80042d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042da:	6083      	str	r3, [r0, #8]
 80042dc:	8181      	strh	r1, [r0, #12]
 80042de:	6643      	str	r3, [r0, #100]	@ 0x64
 80042e0:	81c2      	strh	r2, [r0, #14]
 80042e2:	6183      	str	r3, [r0, #24]
 80042e4:	4619      	mov	r1, r3
 80042e6:	2208      	movs	r2, #8
 80042e8:	305c      	adds	r0, #92	@ 0x5c
 80042ea:	f000 f906 	bl	80044fa <memset>
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x58>)
 80042f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <std+0x5c>)
 80042f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <std+0x60>)
 80042f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <std+0x64>)
 80042fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80042fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <std+0x68>)
 8004300:	6224      	str	r4, [r4, #32]
 8004302:	429c      	cmp	r4, r3
 8004304:	d006      	beq.n	8004314 <std+0x48>
 8004306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800430a:	4294      	cmp	r4, r2
 800430c:	d002      	beq.n	8004314 <std+0x48>
 800430e:	33d0      	adds	r3, #208	@ 0xd0
 8004310:	429c      	cmp	r4, r3
 8004312:	d105      	bne.n	8004320 <std+0x54>
 8004314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431c:	f000 b966 	b.w	80045ec <__retarget_lock_init_recursive>
 8004320:	bd10      	pop	{r4, pc}
 8004322:	bf00      	nop
 8004324:	08004475 	.word	0x08004475
 8004328:	08004497 	.word	0x08004497
 800432c:	080044cf 	.word	0x080044cf
 8004330:	080044f3 	.word	0x080044f3
 8004334:	2000015c 	.word	0x2000015c

08004338 <stdio_exit_handler>:
 8004338:	4a02      	ldr	r2, [pc, #8]	@ (8004344 <stdio_exit_handler+0xc>)
 800433a:	4903      	ldr	r1, [pc, #12]	@ (8004348 <stdio_exit_handler+0x10>)
 800433c:	4803      	ldr	r0, [pc, #12]	@ (800434c <stdio_exit_handler+0x14>)
 800433e:	f000 b869 	b.w	8004414 <_fwalk_sglue>
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
 8004348:	08004e8d 	.word	0x08004e8d
 800434c:	2000001c 	.word	0x2000001c

08004350 <cleanup_stdio>:
 8004350:	6841      	ldr	r1, [r0, #4]
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <cleanup_stdio+0x34>)
 8004354:	4299      	cmp	r1, r3
 8004356:	b510      	push	{r4, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	d001      	beq.n	8004360 <cleanup_stdio+0x10>
 800435c:	f000 fd96 	bl	8004e8c <_fflush_r>
 8004360:	68a1      	ldr	r1, [r4, #8]
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <cleanup_stdio+0x38>)
 8004364:	4299      	cmp	r1, r3
 8004366:	d002      	beq.n	800436e <cleanup_stdio+0x1e>
 8004368:	4620      	mov	r0, r4
 800436a:	f000 fd8f 	bl	8004e8c <_fflush_r>
 800436e:	68e1      	ldr	r1, [r4, #12]
 8004370:	4b06      	ldr	r3, [pc, #24]	@ (800438c <cleanup_stdio+0x3c>)
 8004372:	4299      	cmp	r1, r3
 8004374:	d004      	beq.n	8004380 <cleanup_stdio+0x30>
 8004376:	4620      	mov	r0, r4
 8004378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800437c:	f000 bd86 	b.w	8004e8c <_fflush_r>
 8004380:	bd10      	pop	{r4, pc}
 8004382:	bf00      	nop
 8004384:	2000015c 	.word	0x2000015c
 8004388:	200001c4 	.word	0x200001c4
 800438c:	2000022c 	.word	0x2000022c

08004390 <global_stdio_init.part.0>:
 8004390:	b510      	push	{r4, lr}
 8004392:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <global_stdio_init.part.0+0x30>)
 8004394:	4c0b      	ldr	r4, [pc, #44]	@ (80043c4 <global_stdio_init.part.0+0x34>)
 8004396:	4a0c      	ldr	r2, [pc, #48]	@ (80043c8 <global_stdio_init.part.0+0x38>)
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	4620      	mov	r0, r4
 800439c:	2200      	movs	r2, #0
 800439e:	2104      	movs	r1, #4
 80043a0:	f7ff ff94 	bl	80042cc <std>
 80043a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043a8:	2201      	movs	r2, #1
 80043aa:	2109      	movs	r1, #9
 80043ac:	f7ff ff8e 	bl	80042cc <std>
 80043b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043b4:	2202      	movs	r2, #2
 80043b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ba:	2112      	movs	r1, #18
 80043bc:	f7ff bf86 	b.w	80042cc <std>
 80043c0:	20000294 	.word	0x20000294
 80043c4:	2000015c 	.word	0x2000015c
 80043c8:	08004339 	.word	0x08004339

080043cc <__sfp_lock_acquire>:
 80043cc:	4801      	ldr	r0, [pc, #4]	@ (80043d4 <__sfp_lock_acquire+0x8>)
 80043ce:	f000 b90e 	b.w	80045ee <__retarget_lock_acquire_recursive>
 80043d2:	bf00      	nop
 80043d4:	2000029d 	.word	0x2000029d

080043d8 <__sfp_lock_release>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__sfp_lock_release+0x8>)
 80043da:	f000 b909 	b.w	80045f0 <__retarget_lock_release_recursive>
 80043de:	bf00      	nop
 80043e0:	2000029d 	.word	0x2000029d

080043e4 <__sinit>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4604      	mov	r4, r0
 80043e8:	f7ff fff0 	bl	80043cc <__sfp_lock_acquire>
 80043ec:	6a23      	ldr	r3, [r4, #32]
 80043ee:	b11b      	cbz	r3, 80043f8 <__sinit+0x14>
 80043f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f4:	f7ff bff0 	b.w	80043d8 <__sfp_lock_release>
 80043f8:	4b04      	ldr	r3, [pc, #16]	@ (800440c <__sinit+0x28>)
 80043fa:	6223      	str	r3, [r4, #32]
 80043fc:	4b04      	ldr	r3, [pc, #16]	@ (8004410 <__sinit+0x2c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f5      	bne.n	80043f0 <__sinit+0xc>
 8004404:	f7ff ffc4 	bl	8004390 <global_stdio_init.part.0>
 8004408:	e7f2      	b.n	80043f0 <__sinit+0xc>
 800440a:	bf00      	nop
 800440c:	08004351 	.word	0x08004351
 8004410:	20000294 	.word	0x20000294

08004414 <_fwalk_sglue>:
 8004414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004418:	4607      	mov	r7, r0
 800441a:	4688      	mov	r8, r1
 800441c:	4614      	mov	r4, r2
 800441e:	2600      	movs	r6, #0
 8004420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004424:	f1b9 0901 	subs.w	r9, r9, #1
 8004428:	d505      	bpl.n	8004436 <_fwalk_sglue+0x22>
 800442a:	6824      	ldr	r4, [r4, #0]
 800442c:	2c00      	cmp	r4, #0
 800442e:	d1f7      	bne.n	8004420 <_fwalk_sglue+0xc>
 8004430:	4630      	mov	r0, r6
 8004432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d907      	bls.n	800444c <_fwalk_sglue+0x38>
 800443c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004440:	3301      	adds	r3, #1
 8004442:	d003      	beq.n	800444c <_fwalk_sglue+0x38>
 8004444:	4629      	mov	r1, r5
 8004446:	4638      	mov	r0, r7
 8004448:	47c0      	blx	r8
 800444a:	4306      	orrs	r6, r0
 800444c:	3568      	adds	r5, #104	@ 0x68
 800444e:	e7e9      	b.n	8004424 <_fwalk_sglue+0x10>

08004450 <iprintf>:
 8004450:	b40f      	push	{r0, r1, r2, r3}
 8004452:	b507      	push	{r0, r1, r2, lr}
 8004454:	4906      	ldr	r1, [pc, #24]	@ (8004470 <iprintf+0x20>)
 8004456:	ab04      	add	r3, sp, #16
 8004458:	6808      	ldr	r0, [r1, #0]
 800445a:	f853 2b04 	ldr.w	r2, [r3], #4
 800445e:	6881      	ldr	r1, [r0, #8]
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	f000 f9e9 	bl	8004838 <_vfiprintf_r>
 8004466:	b003      	add	sp, #12
 8004468:	f85d eb04 	ldr.w	lr, [sp], #4
 800446c:	b004      	add	sp, #16
 800446e:	4770      	bx	lr
 8004470:	20000018 	.word	0x20000018

08004474 <__sread>:
 8004474:	b510      	push	{r4, lr}
 8004476:	460c      	mov	r4, r1
 8004478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447c:	f000 f868 	bl	8004550 <_read_r>
 8004480:	2800      	cmp	r0, #0
 8004482:	bfab      	itete	ge
 8004484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004486:	89a3      	ldrhlt	r3, [r4, #12]
 8004488:	181b      	addge	r3, r3, r0
 800448a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800448e:	bfac      	ite	ge
 8004490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004492:	81a3      	strhlt	r3, [r4, #12]
 8004494:	bd10      	pop	{r4, pc}

08004496 <__swrite>:
 8004496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800449a:	461f      	mov	r7, r3
 800449c:	898b      	ldrh	r3, [r1, #12]
 800449e:	05db      	lsls	r3, r3, #23
 80044a0:	4605      	mov	r5, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	4616      	mov	r6, r2
 80044a6:	d505      	bpl.n	80044b4 <__swrite+0x1e>
 80044a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ac:	2302      	movs	r3, #2
 80044ae:	2200      	movs	r2, #0
 80044b0:	f000 f83c 	bl	800452c <_lseek_r>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044be:	81a3      	strh	r3, [r4, #12]
 80044c0:	4632      	mov	r2, r6
 80044c2:	463b      	mov	r3, r7
 80044c4:	4628      	mov	r0, r5
 80044c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ca:	f000 b853 	b.w	8004574 <_write_r>

080044ce <__sseek>:
 80044ce:	b510      	push	{r4, lr}
 80044d0:	460c      	mov	r4, r1
 80044d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d6:	f000 f829 	bl	800452c <_lseek_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	bf15      	itete	ne
 80044e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044ea:	81a3      	strheq	r3, [r4, #12]
 80044ec:	bf18      	it	ne
 80044ee:	81a3      	strhne	r3, [r4, #12]
 80044f0:	bd10      	pop	{r4, pc}

080044f2 <__sclose>:
 80044f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f6:	f000 b809 	b.w	800450c <_close_r>

080044fa <memset>:
 80044fa:	4402      	add	r2, r0
 80044fc:	4603      	mov	r3, r0
 80044fe:	4293      	cmp	r3, r2
 8004500:	d100      	bne.n	8004504 <memset+0xa>
 8004502:	4770      	bx	lr
 8004504:	f803 1b01 	strb.w	r1, [r3], #1
 8004508:	e7f9      	b.n	80044fe <memset+0x4>
	...

0800450c <_close_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d06      	ldr	r5, [pc, #24]	@ (8004528 <_close_r+0x1c>)
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	602b      	str	r3, [r5, #0]
 8004518:	f7fc fba7 	bl	8000c6a <_close>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_close_r+0x1a>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_close_r+0x1a>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	20000298 	.word	0x20000298

0800452c <_lseek_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4d07      	ldr	r5, [pc, #28]	@ (800454c <_lseek_r+0x20>)
 8004530:	4604      	mov	r4, r0
 8004532:	4608      	mov	r0, r1
 8004534:	4611      	mov	r1, r2
 8004536:	2200      	movs	r2, #0
 8004538:	602a      	str	r2, [r5, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	f7fc fbbc 	bl	8000cb8 <_lseek>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_lseek_r+0x1e>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_lseek_r+0x1e>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	20000298 	.word	0x20000298

08004550 <_read_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4d07      	ldr	r5, [pc, #28]	@ (8004570 <_read_r+0x20>)
 8004554:	4604      	mov	r4, r0
 8004556:	4608      	mov	r0, r1
 8004558:	4611      	mov	r1, r2
 800455a:	2200      	movs	r2, #0
 800455c:	602a      	str	r2, [r5, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	f7fc fb66 	bl	8000c30 <_read>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_read_r+0x1e>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_read_r+0x1e>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000298 	.word	0x20000298

08004574 <_write_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4d07      	ldr	r5, [pc, #28]	@ (8004594 <_write_r+0x20>)
 8004578:	4604      	mov	r4, r0
 800457a:	4608      	mov	r0, r1
 800457c:	4611      	mov	r1, r2
 800457e:	2200      	movs	r2, #0
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f7fc fa2c 	bl	80009e0 <_write>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_write_r+0x1e>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_write_r+0x1e>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	20000298 	.word	0x20000298

08004598 <__errno>:
 8004598:	4b01      	ldr	r3, [pc, #4]	@ (80045a0 <__errno+0x8>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000018 	.word	0x20000018

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4d0d      	ldr	r5, [pc, #52]	@ (80045dc <__libc_init_array+0x38>)
 80045a8:	4c0d      	ldr	r4, [pc, #52]	@ (80045e0 <__libc_init_array+0x3c>)
 80045aa:	1b64      	subs	r4, r4, r5
 80045ac:	10a4      	asrs	r4, r4, #2
 80045ae:	2600      	movs	r6, #0
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	4d0b      	ldr	r5, [pc, #44]	@ (80045e4 <__libc_init_array+0x40>)
 80045b6:	4c0c      	ldr	r4, [pc, #48]	@ (80045e8 <__libc_init_array+0x44>)
 80045b8:	f000 fdb8 	bl	800512c <_init>
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	2600      	movs	r6, #0
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	080051d8 	.word	0x080051d8
 80045e0:	080051d8 	.word	0x080051d8
 80045e4:	080051d8 	.word	0x080051d8
 80045e8:	080051dc 	.word	0x080051dc

080045ec <__retarget_lock_init_recursive>:
 80045ec:	4770      	bx	lr

080045ee <__retarget_lock_acquire_recursive>:
 80045ee:	4770      	bx	lr

080045f0 <__retarget_lock_release_recursive>:
 80045f0:	4770      	bx	lr
	...

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d041      	beq.n	8004680 <_free_r+0x8c>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f000 f8e0 	bl	80047cc <__malloc_lock>
 800460c:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <_free_r+0x90>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x2c>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	4628      	mov	r0, r5
 8004618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461c:	f000 b8dc 	b.w	80047d8 <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x42>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	1821      	adds	r1, r4, r0
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1809      	addeq	r1, r1, r0
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x1e>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x4c>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x42>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1850      	adds	r0, r2, r1
 8004644:	42a0      	cmp	r0, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x6c>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	4401      	add	r1, r0
 800464c:	1850      	adds	r0, r2, r1
 800464e:	4283      	cmp	r3, r0
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x22>
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	6053      	str	r3, [r2, #4]
 800465a:	4408      	add	r0, r1
 800465c:	6010      	str	r0, [r2, #0]
 800465e:	e7da      	b.n	8004616 <_free_r+0x22>
 8004660:	d902      	bls.n	8004668 <_free_r+0x74>
 8004662:	230c      	movs	r3, #12
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x22>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	bf04      	itt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	bf04      	itt	eq
 8004678:	1809      	addeq	r1, r1, r0
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	6054      	str	r4, [r2, #4]
 800467e:	e7ca      	b.n	8004616 <_free_r+0x22>
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	bf00      	nop
 8004684:	200002a4 	.word	0x200002a4

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0f      	ldr	r6, [pc, #60]	@ (80046c8 <sbrk_aligned+0x40>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fcb6 	bl	8005004 <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fcb1 	bl	8005004 <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d103      	bne.n	80046ae <sbrk_aligned+0x26>
 80046a6:	f04f 34ff 	mov.w	r4, #4294967295
 80046aa:	4620      	mov	r0, r4
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	1cc4      	adds	r4, r0, #3
 80046b0:	f024 0403 	bic.w	r4, r4, #3
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d0f8      	beq.n	80046aa <sbrk_aligned+0x22>
 80046b8:	1a21      	subs	r1, r4, r0
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 fca2 	bl	8005004 <_sbrk_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1f2      	bne.n	80046aa <sbrk_aligned+0x22>
 80046c4:	e7ef      	b.n	80046a6 <sbrk_aligned+0x1e>
 80046c6:	bf00      	nop
 80046c8:	200002a0 	.word	0x200002a0

080046cc <_malloc_r>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	1ccd      	adds	r5, r1, #3
 80046d2:	f025 0503 	bic.w	r5, r5, #3
 80046d6:	3508      	adds	r5, #8
 80046d8:	2d0c      	cmp	r5, #12
 80046da:	bf38      	it	cc
 80046dc:	250c      	movcc	r5, #12
 80046de:	2d00      	cmp	r5, #0
 80046e0:	4606      	mov	r6, r0
 80046e2:	db01      	blt.n	80046e8 <_malloc_r+0x1c>
 80046e4:	42a9      	cmp	r1, r5
 80046e6:	d904      	bls.n	80046f2 <_malloc_r+0x26>
 80046e8:	230c      	movs	r3, #12
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	2000      	movs	r0, #0
 80046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047c8 <_malloc_r+0xfc>
 80046f6:	f000 f869 	bl	80047cc <__malloc_lock>
 80046fa:	f8d8 3000 	ldr.w	r3, [r8]
 80046fe:	461c      	mov	r4, r3
 8004700:	bb44      	cbnz	r4, 8004754 <_malloc_r+0x88>
 8004702:	4629      	mov	r1, r5
 8004704:	4630      	mov	r0, r6
 8004706:	f7ff ffbf 	bl	8004688 <sbrk_aligned>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	4604      	mov	r4, r0
 800470e:	d158      	bne.n	80047c2 <_malloc_r+0xf6>
 8004710:	f8d8 4000 	ldr.w	r4, [r8]
 8004714:	4627      	mov	r7, r4
 8004716:	2f00      	cmp	r7, #0
 8004718:	d143      	bne.n	80047a2 <_malloc_r+0xd6>
 800471a:	2c00      	cmp	r4, #0
 800471c:	d04b      	beq.n	80047b6 <_malloc_r+0xea>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	4639      	mov	r1, r7
 8004722:	4630      	mov	r0, r6
 8004724:	eb04 0903 	add.w	r9, r4, r3
 8004728:	f000 fc6c 	bl	8005004 <_sbrk_r>
 800472c:	4581      	cmp	r9, r0
 800472e:	d142      	bne.n	80047b6 <_malloc_r+0xea>
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	1a6d      	subs	r5, r5, r1
 8004734:	4629      	mov	r1, r5
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ffa6 	bl	8004688 <sbrk_aligned>
 800473c:	3001      	adds	r0, #1
 800473e:	d03a      	beq.n	80047b6 <_malloc_r+0xea>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	442b      	add	r3, r5
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	bb62      	cbnz	r2, 80047a8 <_malloc_r+0xdc>
 800474e:	f8c8 7000 	str.w	r7, [r8]
 8004752:	e00f      	b.n	8004774 <_malloc_r+0xa8>
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	1b52      	subs	r2, r2, r5
 8004758:	d420      	bmi.n	800479c <_malloc_r+0xd0>
 800475a:	2a0b      	cmp	r2, #11
 800475c:	d917      	bls.n	800478e <_malloc_r+0xc2>
 800475e:	1961      	adds	r1, r4, r5
 8004760:	42a3      	cmp	r3, r4
 8004762:	6025      	str	r5, [r4, #0]
 8004764:	bf18      	it	ne
 8004766:	6059      	strne	r1, [r3, #4]
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	bf08      	it	eq
 800476c:	f8c8 1000 	streq.w	r1, [r8]
 8004770:	5162      	str	r2, [r4, r5]
 8004772:	604b      	str	r3, [r1, #4]
 8004774:	4630      	mov	r0, r6
 8004776:	f000 f82f 	bl	80047d8 <__malloc_unlock>
 800477a:	f104 000b 	add.w	r0, r4, #11
 800477e:	1d23      	adds	r3, r4, #4
 8004780:	f020 0007 	bic.w	r0, r0, #7
 8004784:	1ac2      	subs	r2, r0, r3
 8004786:	bf1c      	itt	ne
 8004788:	1a1b      	subne	r3, r3, r0
 800478a:	50a3      	strne	r3, [r4, r2]
 800478c:	e7af      	b.n	80046ee <_malloc_r+0x22>
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	42a3      	cmp	r3, r4
 8004792:	bf0c      	ite	eq
 8004794:	f8c8 2000 	streq.w	r2, [r8]
 8004798:	605a      	strne	r2, [r3, #4]
 800479a:	e7eb      	b.n	8004774 <_malloc_r+0xa8>
 800479c:	4623      	mov	r3, r4
 800479e:	6864      	ldr	r4, [r4, #4]
 80047a0:	e7ae      	b.n	8004700 <_malloc_r+0x34>
 80047a2:	463c      	mov	r4, r7
 80047a4:	687f      	ldr	r7, [r7, #4]
 80047a6:	e7b6      	b.n	8004716 <_malloc_r+0x4a>
 80047a8:	461a      	mov	r2, r3
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d1fb      	bne.n	80047a8 <_malloc_r+0xdc>
 80047b0:	2300      	movs	r3, #0
 80047b2:	6053      	str	r3, [r2, #4]
 80047b4:	e7de      	b.n	8004774 <_malloc_r+0xa8>
 80047b6:	230c      	movs	r3, #12
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f80c 	bl	80047d8 <__malloc_unlock>
 80047c0:	e794      	b.n	80046ec <_malloc_r+0x20>
 80047c2:	6005      	str	r5, [r0, #0]
 80047c4:	e7d6      	b.n	8004774 <_malloc_r+0xa8>
 80047c6:	bf00      	nop
 80047c8:	200002a4 	.word	0x200002a4

080047cc <__malloc_lock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__malloc_lock+0x8>)
 80047ce:	f7ff bf0e 	b.w	80045ee <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	2000029c 	.word	0x2000029c

080047d8 <__malloc_unlock>:
 80047d8:	4801      	ldr	r0, [pc, #4]	@ (80047e0 <__malloc_unlock+0x8>)
 80047da:	f7ff bf09 	b.w	80045f0 <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	2000029c 	.word	0x2000029c

080047e4 <__sfputc_r>:
 80047e4:	6893      	ldr	r3, [r2, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	b410      	push	{r4}
 80047ec:	6093      	str	r3, [r2, #8]
 80047ee:	da08      	bge.n	8004802 <__sfputc_r+0x1e>
 80047f0:	6994      	ldr	r4, [r2, #24]
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	db01      	blt.n	80047fa <__sfputc_r+0x16>
 80047f6:	290a      	cmp	r1, #10
 80047f8:	d103      	bne.n	8004802 <__sfputc_r+0x1e>
 80047fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fe:	f000 bb6d 	b.w	8004edc <__swbuf_r>
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	1c58      	adds	r0, r3, #1
 8004806:	6010      	str	r0, [r2, #0]
 8004808:	7019      	strb	r1, [r3, #0]
 800480a:	4608      	mov	r0, r1
 800480c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004810:	4770      	bx	lr

08004812 <__sfputs_r>:
 8004812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004814:	4606      	mov	r6, r0
 8004816:	460f      	mov	r7, r1
 8004818:	4614      	mov	r4, r2
 800481a:	18d5      	adds	r5, r2, r3
 800481c:	42ac      	cmp	r4, r5
 800481e:	d101      	bne.n	8004824 <__sfputs_r+0x12>
 8004820:	2000      	movs	r0, #0
 8004822:	e007      	b.n	8004834 <__sfputs_r+0x22>
 8004824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004828:	463a      	mov	r2, r7
 800482a:	4630      	mov	r0, r6
 800482c:	f7ff ffda 	bl	80047e4 <__sfputc_r>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d1f3      	bne.n	800481c <__sfputs_r+0xa>
 8004834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004838 <_vfiprintf_r>:
 8004838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483c:	460d      	mov	r5, r1
 800483e:	b09d      	sub	sp, #116	@ 0x74
 8004840:	4614      	mov	r4, r2
 8004842:	4698      	mov	r8, r3
 8004844:	4606      	mov	r6, r0
 8004846:	b118      	cbz	r0, 8004850 <_vfiprintf_r+0x18>
 8004848:	6a03      	ldr	r3, [r0, #32]
 800484a:	b90b      	cbnz	r3, 8004850 <_vfiprintf_r+0x18>
 800484c:	f7ff fdca 	bl	80043e4 <__sinit>
 8004850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004852:	07d9      	lsls	r1, r3, #31
 8004854:	d405      	bmi.n	8004862 <_vfiprintf_r+0x2a>
 8004856:	89ab      	ldrh	r3, [r5, #12]
 8004858:	059a      	lsls	r2, r3, #22
 800485a:	d402      	bmi.n	8004862 <_vfiprintf_r+0x2a>
 800485c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800485e:	f7ff fec6 	bl	80045ee <__retarget_lock_acquire_recursive>
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	d501      	bpl.n	800486c <_vfiprintf_r+0x34>
 8004868:	692b      	ldr	r3, [r5, #16]
 800486a:	b99b      	cbnz	r3, 8004894 <_vfiprintf_r+0x5c>
 800486c:	4629      	mov	r1, r5
 800486e:	4630      	mov	r0, r6
 8004870:	f000 fb72 	bl	8004f58 <__swsetup_r>
 8004874:	b170      	cbz	r0, 8004894 <_vfiprintf_r+0x5c>
 8004876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004878:	07dc      	lsls	r4, r3, #31
 800487a:	d504      	bpl.n	8004886 <_vfiprintf_r+0x4e>
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	b01d      	add	sp, #116	@ 0x74
 8004882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	0598      	lsls	r0, r3, #22
 800488a:	d4f7      	bmi.n	800487c <_vfiprintf_r+0x44>
 800488c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800488e:	f7ff feaf 	bl	80045f0 <__retarget_lock_release_recursive>
 8004892:	e7f3      	b.n	800487c <_vfiprintf_r+0x44>
 8004894:	2300      	movs	r3, #0
 8004896:	9309      	str	r3, [sp, #36]	@ 0x24
 8004898:	2320      	movs	r3, #32
 800489a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800489e:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a2:	2330      	movs	r3, #48	@ 0x30
 80048a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a54 <_vfiprintf_r+0x21c>
 80048a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048ac:	f04f 0901 	mov.w	r9, #1
 80048b0:	4623      	mov	r3, r4
 80048b2:	469a      	mov	sl, r3
 80048b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b8:	b10a      	cbz	r2, 80048be <_vfiprintf_r+0x86>
 80048ba:	2a25      	cmp	r2, #37	@ 0x25
 80048bc:	d1f9      	bne.n	80048b2 <_vfiprintf_r+0x7a>
 80048be:	ebba 0b04 	subs.w	fp, sl, r4
 80048c2:	d00b      	beq.n	80048dc <_vfiprintf_r+0xa4>
 80048c4:	465b      	mov	r3, fp
 80048c6:	4622      	mov	r2, r4
 80048c8:	4629      	mov	r1, r5
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ffa1 	bl	8004812 <__sfputs_r>
 80048d0:	3001      	adds	r0, #1
 80048d2:	f000 80a7 	beq.w	8004a24 <_vfiprintf_r+0x1ec>
 80048d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048d8:	445a      	add	r2, fp
 80048da:	9209      	str	r2, [sp, #36]	@ 0x24
 80048dc:	f89a 3000 	ldrb.w	r3, [sl]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 809f 	beq.w	8004a24 <_vfiprintf_r+0x1ec>
 80048e6:	2300      	movs	r3, #0
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f0:	f10a 0a01 	add.w	sl, sl, #1
 80048f4:	9304      	str	r3, [sp, #16]
 80048f6:	9307      	str	r3, [sp, #28]
 80048f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80048fe:	4654      	mov	r4, sl
 8004900:	2205      	movs	r2, #5
 8004902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004906:	4853      	ldr	r0, [pc, #332]	@ (8004a54 <_vfiprintf_r+0x21c>)
 8004908:	f7fb fc6a 	bl	80001e0 <memchr>
 800490c:	9a04      	ldr	r2, [sp, #16]
 800490e:	b9d8      	cbnz	r0, 8004948 <_vfiprintf_r+0x110>
 8004910:	06d1      	lsls	r1, r2, #27
 8004912:	bf44      	itt	mi
 8004914:	2320      	movmi	r3, #32
 8004916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800491a:	0713      	lsls	r3, r2, #28
 800491c:	bf44      	itt	mi
 800491e:	232b      	movmi	r3, #43	@ 0x2b
 8004920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004924:	f89a 3000 	ldrb.w	r3, [sl]
 8004928:	2b2a      	cmp	r3, #42	@ 0x2a
 800492a:	d015      	beq.n	8004958 <_vfiprintf_r+0x120>
 800492c:	9a07      	ldr	r2, [sp, #28]
 800492e:	4654      	mov	r4, sl
 8004930:	2000      	movs	r0, #0
 8004932:	f04f 0c0a 	mov.w	ip, #10
 8004936:	4621      	mov	r1, r4
 8004938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800493c:	3b30      	subs	r3, #48	@ 0x30
 800493e:	2b09      	cmp	r3, #9
 8004940:	d94b      	bls.n	80049da <_vfiprintf_r+0x1a2>
 8004942:	b1b0      	cbz	r0, 8004972 <_vfiprintf_r+0x13a>
 8004944:	9207      	str	r2, [sp, #28]
 8004946:	e014      	b.n	8004972 <_vfiprintf_r+0x13a>
 8004948:	eba0 0308 	sub.w	r3, r0, r8
 800494c:	fa09 f303 	lsl.w	r3, r9, r3
 8004950:	4313      	orrs	r3, r2
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	46a2      	mov	sl, r4
 8004956:	e7d2      	b.n	80048fe <_vfiprintf_r+0xc6>
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	1d19      	adds	r1, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	9103      	str	r1, [sp, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	bfbb      	ittet	lt
 8004964:	425b      	neglt	r3, r3
 8004966:	f042 0202 	orrlt.w	r2, r2, #2
 800496a:	9307      	strge	r3, [sp, #28]
 800496c:	9307      	strlt	r3, [sp, #28]
 800496e:	bfb8      	it	lt
 8004970:	9204      	strlt	r2, [sp, #16]
 8004972:	7823      	ldrb	r3, [r4, #0]
 8004974:	2b2e      	cmp	r3, #46	@ 0x2e
 8004976:	d10a      	bne.n	800498e <_vfiprintf_r+0x156>
 8004978:	7863      	ldrb	r3, [r4, #1]
 800497a:	2b2a      	cmp	r3, #42	@ 0x2a
 800497c:	d132      	bne.n	80049e4 <_vfiprintf_r+0x1ac>
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	9203      	str	r2, [sp, #12]
 8004986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800498a:	3402      	adds	r4, #2
 800498c:	9305      	str	r3, [sp, #20]
 800498e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a64 <_vfiprintf_r+0x22c>
 8004992:	7821      	ldrb	r1, [r4, #0]
 8004994:	2203      	movs	r2, #3
 8004996:	4650      	mov	r0, sl
 8004998:	f7fb fc22 	bl	80001e0 <memchr>
 800499c:	b138      	cbz	r0, 80049ae <_vfiprintf_r+0x176>
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	eba0 000a 	sub.w	r0, r0, sl
 80049a4:	2240      	movs	r2, #64	@ 0x40
 80049a6:	4082      	lsls	r2, r0
 80049a8:	4313      	orrs	r3, r2
 80049aa:	3401      	adds	r4, #1
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b2:	4829      	ldr	r0, [pc, #164]	@ (8004a58 <_vfiprintf_r+0x220>)
 80049b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049b8:	2206      	movs	r2, #6
 80049ba:	f7fb fc11 	bl	80001e0 <memchr>
 80049be:	2800      	cmp	r0, #0
 80049c0:	d03f      	beq.n	8004a42 <_vfiprintf_r+0x20a>
 80049c2:	4b26      	ldr	r3, [pc, #152]	@ (8004a5c <_vfiprintf_r+0x224>)
 80049c4:	bb1b      	cbnz	r3, 8004a0e <_vfiprintf_r+0x1d6>
 80049c6:	9b03      	ldr	r3, [sp, #12]
 80049c8:	3307      	adds	r3, #7
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	3308      	adds	r3, #8
 80049d0:	9303      	str	r3, [sp, #12]
 80049d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d4:	443b      	add	r3, r7
 80049d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d8:	e76a      	b.n	80048b0 <_vfiprintf_r+0x78>
 80049da:	fb0c 3202 	mla	r2, ip, r2, r3
 80049de:	460c      	mov	r4, r1
 80049e0:	2001      	movs	r0, #1
 80049e2:	e7a8      	b.n	8004936 <_vfiprintf_r+0xfe>
 80049e4:	2300      	movs	r3, #0
 80049e6:	3401      	adds	r4, #1
 80049e8:	9305      	str	r3, [sp, #20]
 80049ea:	4619      	mov	r1, r3
 80049ec:	f04f 0c0a 	mov.w	ip, #10
 80049f0:	4620      	mov	r0, r4
 80049f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f6:	3a30      	subs	r2, #48	@ 0x30
 80049f8:	2a09      	cmp	r2, #9
 80049fa:	d903      	bls.n	8004a04 <_vfiprintf_r+0x1cc>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0c6      	beq.n	800498e <_vfiprintf_r+0x156>
 8004a00:	9105      	str	r1, [sp, #20]
 8004a02:	e7c4      	b.n	800498e <_vfiprintf_r+0x156>
 8004a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a08:	4604      	mov	r4, r0
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7f0      	b.n	80049f0 <_vfiprintf_r+0x1b8>
 8004a0e:	ab03      	add	r3, sp, #12
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	462a      	mov	r2, r5
 8004a14:	4b12      	ldr	r3, [pc, #72]	@ (8004a60 <_vfiprintf_r+0x228>)
 8004a16:	a904      	add	r1, sp, #16
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f3af 8000 	nop.w
 8004a1e:	4607      	mov	r7, r0
 8004a20:	1c78      	adds	r0, r7, #1
 8004a22:	d1d6      	bne.n	80049d2 <_vfiprintf_r+0x19a>
 8004a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a26:	07d9      	lsls	r1, r3, #31
 8004a28:	d405      	bmi.n	8004a36 <_vfiprintf_r+0x1fe>
 8004a2a:	89ab      	ldrh	r3, [r5, #12]
 8004a2c:	059a      	lsls	r2, r3, #22
 8004a2e:	d402      	bmi.n	8004a36 <_vfiprintf_r+0x1fe>
 8004a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a32:	f7ff fddd 	bl	80045f0 <__retarget_lock_release_recursive>
 8004a36:	89ab      	ldrh	r3, [r5, #12]
 8004a38:	065b      	lsls	r3, r3, #25
 8004a3a:	f53f af1f 	bmi.w	800487c <_vfiprintf_r+0x44>
 8004a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a40:	e71e      	b.n	8004880 <_vfiprintf_r+0x48>
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <_vfiprintf_r+0x228>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f000 f879 	bl	8004b44 <_printf_i>
 8004a52:	e7e4      	b.n	8004a1e <_vfiprintf_r+0x1e6>
 8004a54:	0800519c 	.word	0x0800519c
 8004a58:	080051a6 	.word	0x080051a6
 8004a5c:	00000000 	.word	0x00000000
 8004a60:	08004813 	.word	0x08004813
 8004a64:	080051a2 	.word	0x080051a2

08004a68 <_printf_common>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	4698      	mov	r8, r3
 8004a70:	688a      	ldr	r2, [r1, #8]
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bfb8      	it	lt
 8004a7c:	4613      	movlt	r3, r2
 8004a7e:	6033      	str	r3, [r6, #0]
 8004a80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a84:	4607      	mov	r7, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	b10a      	cbz	r2, 8004a8e <_printf_common+0x26>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	0699      	lsls	r1, r3, #26
 8004a92:	bf42      	ittt	mi
 8004a94:	6833      	ldrmi	r3, [r6, #0]
 8004a96:	3302      	addmi	r3, #2
 8004a98:	6033      	strmi	r3, [r6, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d106      	bne.n	8004ab0 <_printf_common+0x48>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	6832      	ldr	r2, [r6, #0]
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	dc26      	bgt.n	8004afe <_printf_common+0x96>
 8004ab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	3b00      	subs	r3, #0
 8004ab8:	bf18      	it	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	0692      	lsls	r2, r2, #26
 8004abe:	d42b      	bmi.n	8004b18 <_printf_common+0xb0>
 8004ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c8      	blx	r9
 8004aca:	3001      	adds	r0, #1
 8004acc:	d01e      	beq.n	8004b0c <_printf_common+0xa4>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf02      	ittt	eq
 8004ada:	68e5      	ldreq	r5, [r4, #12]
 8004adc:	6833      	ldreq	r3, [r6, #0]
 8004ade:	1aed      	subeq	r5, r5, r3
 8004ae0:	68a3      	ldr	r3, [r4, #8]
 8004ae2:	bf0c      	ite	eq
 8004ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae8:	2500      	movne	r5, #0
 8004aea:	4293      	cmp	r3, r2
 8004aec:	bfc4      	itt	gt
 8004aee:	1a9b      	subgt	r3, r3, r2
 8004af0:	18ed      	addgt	r5, r5, r3
 8004af2:	2600      	movs	r6, #0
 8004af4:	341a      	adds	r4, #26
 8004af6:	42b5      	cmp	r5, r6
 8004af8:	d11a      	bne.n	8004b30 <_printf_common+0xc8>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e008      	b.n	8004b10 <_printf_common+0xa8>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4652      	mov	r2, sl
 8004b02:	4641      	mov	r1, r8
 8004b04:	4638      	mov	r0, r7
 8004b06:	47c8      	blx	r9
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d103      	bne.n	8004b14 <_printf_common+0xac>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	3501      	adds	r5, #1
 8004b16:	e7c6      	b.n	8004aa6 <_printf_common+0x3e>
 8004b18:	18e1      	adds	r1, r4, r3
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	2030      	movs	r0, #48	@ 0x30
 8004b1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b22:	4422      	add	r2, r4
 8004b24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	e7c7      	b.n	8004ac0 <_printf_common+0x58>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4622      	mov	r2, r4
 8004b34:	4641      	mov	r1, r8
 8004b36:	4638      	mov	r0, r7
 8004b38:	47c8      	blx	r9
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d0e6      	beq.n	8004b0c <_printf_common+0xa4>
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7d9      	b.n	8004af6 <_printf_common+0x8e>
	...

08004b44 <_printf_i>:
 8004b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b48:	7e0f      	ldrb	r7, [r1, #24]
 8004b4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b4c:	2f78      	cmp	r7, #120	@ 0x78
 8004b4e:	4691      	mov	r9, r2
 8004b50:	4680      	mov	r8, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	469a      	mov	sl, r3
 8004b56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b5a:	d807      	bhi.n	8004b6c <_printf_i+0x28>
 8004b5c:	2f62      	cmp	r7, #98	@ 0x62
 8004b5e:	d80a      	bhi.n	8004b76 <_printf_i+0x32>
 8004b60:	2f00      	cmp	r7, #0
 8004b62:	f000 80d2 	beq.w	8004d0a <_printf_i+0x1c6>
 8004b66:	2f58      	cmp	r7, #88	@ 0x58
 8004b68:	f000 80b9 	beq.w	8004cde <_printf_i+0x19a>
 8004b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b74:	e03a      	b.n	8004bec <_printf_i+0xa8>
 8004b76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b7a:	2b15      	cmp	r3, #21
 8004b7c:	d8f6      	bhi.n	8004b6c <_printf_i+0x28>
 8004b7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b84 <_printf_i+0x40>)
 8004b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004b6d 	.word	0x08004b6d
 8004b90:	08004b6d 	.word	0x08004b6d
 8004b94:	08004b6d 	.word	0x08004b6d
 8004b98:	08004b6d 	.word	0x08004b6d
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004b6d 	.word	0x08004b6d
 8004ba4:	08004b6d 	.word	0x08004b6d
 8004ba8:	08004b6d 	.word	0x08004b6d
 8004bac:	08004b6d 	.word	0x08004b6d
 8004bb0:	08004cf1 	.word	0x08004cf1
 8004bb4:	08004c1b 	.word	0x08004c1b
 8004bb8:	08004cab 	.word	0x08004cab
 8004bbc:	08004b6d 	.word	0x08004b6d
 8004bc0:	08004b6d 	.word	0x08004b6d
 8004bc4:	08004d13 	.word	0x08004d13
 8004bc8:	08004b6d 	.word	0x08004b6d
 8004bcc:	08004c1b 	.word	0x08004c1b
 8004bd0:	08004b6d 	.word	0x08004b6d
 8004bd4:	08004b6d 	.word	0x08004b6d
 8004bd8:	08004cb3 	.word	0x08004cb3
 8004bdc:	6833      	ldr	r3, [r6, #0]
 8004bde:	1d1a      	adds	r2, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6032      	str	r2, [r6, #0]
 8004be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004be8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bec:	2301      	movs	r3, #1
 8004bee:	e09d      	b.n	8004d2c <_printf_i+0x1e8>
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	6820      	ldr	r0, [r4, #0]
 8004bf4:	1d19      	adds	r1, r3, #4
 8004bf6:	6031      	str	r1, [r6, #0]
 8004bf8:	0606      	lsls	r6, r0, #24
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0xbc>
 8004bfc:	681d      	ldr	r5, [r3, #0]
 8004bfe:	e003      	b.n	8004c08 <_printf_i+0xc4>
 8004c00:	0645      	lsls	r5, r0, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0xb8>
 8004c04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	da03      	bge.n	8004c14 <_printf_i+0xd0>
 8004c0c:	232d      	movs	r3, #45	@ 0x2d
 8004c0e:	426d      	negs	r5, r5
 8004c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c14:	4859      	ldr	r0, [pc, #356]	@ (8004d7c <_printf_i+0x238>)
 8004c16:	230a      	movs	r3, #10
 8004c18:	e011      	b.n	8004c3e <_printf_i+0xfa>
 8004c1a:	6821      	ldr	r1, [r4, #0]
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	0608      	lsls	r0, r1, #24
 8004c20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c24:	d402      	bmi.n	8004c2c <_printf_i+0xe8>
 8004c26:	0649      	lsls	r1, r1, #25
 8004c28:	bf48      	it	mi
 8004c2a:	b2ad      	uxthmi	r5, r5
 8004c2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c2e:	4853      	ldr	r0, [pc, #332]	@ (8004d7c <_printf_i+0x238>)
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	bf14      	ite	ne
 8004c34:	230a      	movne	r3, #10
 8004c36:	2308      	moveq	r3, #8
 8004c38:	2100      	movs	r1, #0
 8004c3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c3e:	6866      	ldr	r6, [r4, #4]
 8004c40:	60a6      	str	r6, [r4, #8]
 8004c42:	2e00      	cmp	r6, #0
 8004c44:	bfa2      	ittt	ge
 8004c46:	6821      	ldrge	r1, [r4, #0]
 8004c48:	f021 0104 	bicge.w	r1, r1, #4
 8004c4c:	6021      	strge	r1, [r4, #0]
 8004c4e:	b90d      	cbnz	r5, 8004c54 <_printf_i+0x110>
 8004c50:	2e00      	cmp	r6, #0
 8004c52:	d04b      	beq.n	8004cec <_printf_i+0x1a8>
 8004c54:	4616      	mov	r6, r2
 8004c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c5e:	5dc7      	ldrb	r7, [r0, r7]
 8004c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c64:	462f      	mov	r7, r5
 8004c66:	42bb      	cmp	r3, r7
 8004c68:	460d      	mov	r5, r1
 8004c6a:	d9f4      	bls.n	8004c56 <_printf_i+0x112>
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d10b      	bne.n	8004c88 <_printf_i+0x144>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	07df      	lsls	r7, r3, #31
 8004c74:	d508      	bpl.n	8004c88 <_printf_i+0x144>
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	6861      	ldr	r1, [r4, #4]
 8004c7a:	4299      	cmp	r1, r3
 8004c7c:	bfde      	ittt	le
 8004c7e:	2330      	movle	r3, #48	@ 0x30
 8004c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c88:	1b92      	subs	r2, r2, r6
 8004c8a:	6122      	str	r2, [r4, #16]
 8004c8c:	f8cd a000 	str.w	sl, [sp]
 8004c90:	464b      	mov	r3, r9
 8004c92:	aa03      	add	r2, sp, #12
 8004c94:	4621      	mov	r1, r4
 8004c96:	4640      	mov	r0, r8
 8004c98:	f7ff fee6 	bl	8004a68 <_printf_common>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d14a      	bne.n	8004d36 <_printf_i+0x1f2>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	b004      	add	sp, #16
 8004ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	f043 0320 	orr.w	r3, r3, #32
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	4833      	ldr	r0, [pc, #204]	@ (8004d80 <_printf_i+0x23c>)
 8004cb4:	2778      	movs	r7, #120	@ 0x78
 8004cb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	6831      	ldr	r1, [r6, #0]
 8004cbe:	061f      	lsls	r7, r3, #24
 8004cc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cc4:	d402      	bmi.n	8004ccc <_printf_i+0x188>
 8004cc6:	065f      	lsls	r7, r3, #25
 8004cc8:	bf48      	it	mi
 8004cca:	b2ad      	uxthmi	r5, r5
 8004ccc:	6031      	str	r1, [r6, #0]
 8004cce:	07d9      	lsls	r1, r3, #31
 8004cd0:	bf44      	itt	mi
 8004cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd6:	6023      	strmi	r3, [r4, #0]
 8004cd8:	b11d      	cbz	r5, 8004ce2 <_printf_i+0x19e>
 8004cda:	2310      	movs	r3, #16
 8004cdc:	e7ac      	b.n	8004c38 <_printf_i+0xf4>
 8004cde:	4827      	ldr	r0, [pc, #156]	@ (8004d7c <_printf_i+0x238>)
 8004ce0:	e7e9      	b.n	8004cb6 <_printf_i+0x172>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	f023 0320 	bic.w	r3, r3, #32
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	e7f6      	b.n	8004cda <_printf_i+0x196>
 8004cec:	4616      	mov	r6, r2
 8004cee:	e7bd      	b.n	8004c6c <_printf_i+0x128>
 8004cf0:	6833      	ldr	r3, [r6, #0]
 8004cf2:	6825      	ldr	r5, [r4, #0]
 8004cf4:	6961      	ldr	r1, [r4, #20]
 8004cf6:	1d18      	adds	r0, r3, #4
 8004cf8:	6030      	str	r0, [r6, #0]
 8004cfa:	062e      	lsls	r6, r5, #24
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	d501      	bpl.n	8004d04 <_printf_i+0x1c0>
 8004d00:	6019      	str	r1, [r3, #0]
 8004d02:	e002      	b.n	8004d0a <_printf_i+0x1c6>
 8004d04:	0668      	lsls	r0, r5, #25
 8004d06:	d5fb      	bpl.n	8004d00 <_printf_i+0x1bc>
 8004d08:	8019      	strh	r1, [r3, #0]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	4616      	mov	r6, r2
 8004d10:	e7bc      	b.n	8004c8c <_printf_i+0x148>
 8004d12:	6833      	ldr	r3, [r6, #0]
 8004d14:	1d1a      	adds	r2, r3, #4
 8004d16:	6032      	str	r2, [r6, #0]
 8004d18:	681e      	ldr	r6, [r3, #0]
 8004d1a:	6862      	ldr	r2, [r4, #4]
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f7fb fa5e 	bl	80001e0 <memchr>
 8004d24:	b108      	cbz	r0, 8004d2a <_printf_i+0x1e6>
 8004d26:	1b80      	subs	r0, r0, r6
 8004d28:	6060      	str	r0, [r4, #4]
 8004d2a:	6863      	ldr	r3, [r4, #4]
 8004d2c:	6123      	str	r3, [r4, #16]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d34:	e7aa      	b.n	8004c8c <_printf_i+0x148>
 8004d36:	6923      	ldr	r3, [r4, #16]
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	47d0      	blx	sl
 8004d40:	3001      	adds	r0, #1
 8004d42:	d0ad      	beq.n	8004ca0 <_printf_i+0x15c>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	079b      	lsls	r3, r3, #30
 8004d48:	d413      	bmi.n	8004d72 <_printf_i+0x22e>
 8004d4a:	68e0      	ldr	r0, [r4, #12]
 8004d4c:	9b03      	ldr	r3, [sp, #12]
 8004d4e:	4298      	cmp	r0, r3
 8004d50:	bfb8      	it	lt
 8004d52:	4618      	movlt	r0, r3
 8004d54:	e7a6      	b.n	8004ca4 <_printf_i+0x160>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4632      	mov	r2, r6
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	47d0      	blx	sl
 8004d60:	3001      	adds	r0, #1
 8004d62:	d09d      	beq.n	8004ca0 <_printf_i+0x15c>
 8004d64:	3501      	adds	r5, #1
 8004d66:	68e3      	ldr	r3, [r4, #12]
 8004d68:	9903      	ldr	r1, [sp, #12]
 8004d6a:	1a5b      	subs	r3, r3, r1
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	dcf2      	bgt.n	8004d56 <_printf_i+0x212>
 8004d70:	e7eb      	b.n	8004d4a <_printf_i+0x206>
 8004d72:	2500      	movs	r5, #0
 8004d74:	f104 0619 	add.w	r6, r4, #25
 8004d78:	e7f5      	b.n	8004d66 <_printf_i+0x222>
 8004d7a:	bf00      	nop
 8004d7c:	080051ad 	.word	0x080051ad
 8004d80:	080051be 	.word	0x080051be

08004d84 <__sflush_r>:
 8004d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8c:	0716      	lsls	r6, r2, #28
 8004d8e:	4605      	mov	r5, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	d454      	bmi.n	8004e3e <__sflush_r+0xba>
 8004d94:	684b      	ldr	r3, [r1, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dc02      	bgt.n	8004da0 <__sflush_r+0x1c>
 8004d9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	dd48      	ble.n	8004e32 <__sflush_r+0xae>
 8004da0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d045      	beq.n	8004e32 <__sflush_r+0xae>
 8004da6:	2300      	movs	r3, #0
 8004da8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dac:	682f      	ldr	r7, [r5, #0]
 8004dae:	6a21      	ldr	r1, [r4, #32]
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	d030      	beq.n	8004e16 <__sflush_r+0x92>
 8004db4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	0759      	lsls	r1, r3, #29
 8004dba:	d505      	bpl.n	8004dc8 <__sflush_r+0x44>
 8004dbc:	6863      	ldr	r3, [r4, #4]
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dc2:	b10b      	cbz	r3, 8004dc8 <__sflush_r+0x44>
 8004dc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dc6:	1ad2      	subs	r2, r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dcc:	6a21      	ldr	r1, [r4, #32]
 8004dce:	4628      	mov	r0, r5
 8004dd0:	47b0      	blx	r6
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	d106      	bne.n	8004de6 <__sflush_r+0x62>
 8004dd8:	6829      	ldr	r1, [r5, #0]
 8004dda:	291d      	cmp	r1, #29
 8004ddc:	d82b      	bhi.n	8004e36 <__sflush_r+0xb2>
 8004dde:	4a2a      	ldr	r2, [pc, #168]	@ (8004e88 <__sflush_r+0x104>)
 8004de0:	410a      	asrs	r2, r1
 8004de2:	07d6      	lsls	r6, r2, #31
 8004de4:	d427      	bmi.n	8004e36 <__sflush_r+0xb2>
 8004de6:	2200      	movs	r2, #0
 8004de8:	6062      	str	r2, [r4, #4]
 8004dea:	04d9      	lsls	r1, r3, #19
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	6022      	str	r2, [r4, #0]
 8004df0:	d504      	bpl.n	8004dfc <__sflush_r+0x78>
 8004df2:	1c42      	adds	r2, r0, #1
 8004df4:	d101      	bne.n	8004dfa <__sflush_r+0x76>
 8004df6:	682b      	ldr	r3, [r5, #0]
 8004df8:	b903      	cbnz	r3, 8004dfc <__sflush_r+0x78>
 8004dfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dfe:	602f      	str	r7, [r5, #0]
 8004e00:	b1b9      	cbz	r1, 8004e32 <__sflush_r+0xae>
 8004e02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e06:	4299      	cmp	r1, r3
 8004e08:	d002      	beq.n	8004e10 <__sflush_r+0x8c>
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f7ff fbf2 	bl	80045f4 <_free_r>
 8004e10:	2300      	movs	r3, #0
 8004e12:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e14:	e00d      	b.n	8004e32 <__sflush_r+0xae>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b0      	blx	r6
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	1c50      	adds	r0, r2, #1
 8004e20:	d1c9      	bne.n	8004db6 <__sflush_r+0x32>
 8004e22:	682b      	ldr	r3, [r5, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0c6      	beq.n	8004db6 <__sflush_r+0x32>
 8004e28:	2b1d      	cmp	r3, #29
 8004e2a:	d001      	beq.n	8004e30 <__sflush_r+0xac>
 8004e2c:	2b16      	cmp	r3, #22
 8004e2e:	d11e      	bne.n	8004e6e <__sflush_r+0xea>
 8004e30:	602f      	str	r7, [r5, #0]
 8004e32:	2000      	movs	r0, #0
 8004e34:	e022      	b.n	8004e7c <__sflush_r+0xf8>
 8004e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	e01b      	b.n	8004e76 <__sflush_r+0xf2>
 8004e3e:	690f      	ldr	r7, [r1, #16]
 8004e40:	2f00      	cmp	r7, #0
 8004e42:	d0f6      	beq.n	8004e32 <__sflush_r+0xae>
 8004e44:	0793      	lsls	r3, r2, #30
 8004e46:	680e      	ldr	r6, [r1, #0]
 8004e48:	bf08      	it	eq
 8004e4a:	694b      	ldreq	r3, [r1, #20]
 8004e4c:	600f      	str	r7, [r1, #0]
 8004e4e:	bf18      	it	ne
 8004e50:	2300      	movne	r3, #0
 8004e52:	eba6 0807 	sub.w	r8, r6, r7
 8004e56:	608b      	str	r3, [r1, #8]
 8004e58:	f1b8 0f00 	cmp.w	r8, #0
 8004e5c:	dde9      	ble.n	8004e32 <__sflush_r+0xae>
 8004e5e:	6a21      	ldr	r1, [r4, #32]
 8004e60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e62:	4643      	mov	r3, r8
 8004e64:	463a      	mov	r2, r7
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b0      	blx	r6
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	dc08      	bgt.n	8004e80 <__sflush_r+0xfc>
 8004e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e80:	4407      	add	r7, r0
 8004e82:	eba8 0800 	sub.w	r8, r8, r0
 8004e86:	e7e7      	b.n	8004e58 <__sflush_r+0xd4>
 8004e88:	dfbffffe 	.word	0xdfbffffe

08004e8c <_fflush_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	4605      	mov	r5, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b913      	cbnz	r3, 8004e9c <_fflush_r+0x10>
 8004e96:	2500      	movs	r5, #0
 8004e98:	4628      	mov	r0, r5
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	b118      	cbz	r0, 8004ea6 <_fflush_r+0x1a>
 8004e9e:	6a03      	ldr	r3, [r0, #32]
 8004ea0:	b90b      	cbnz	r3, 8004ea6 <_fflush_r+0x1a>
 8004ea2:	f7ff fa9f 	bl	80043e4 <__sinit>
 8004ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f3      	beq.n	8004e96 <_fflush_r+0xa>
 8004eae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004eb0:	07d0      	lsls	r0, r2, #31
 8004eb2:	d404      	bmi.n	8004ebe <_fflush_r+0x32>
 8004eb4:	0599      	lsls	r1, r3, #22
 8004eb6:	d402      	bmi.n	8004ebe <_fflush_r+0x32>
 8004eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eba:	f7ff fb98 	bl	80045ee <__retarget_lock_acquire_recursive>
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	f7ff ff5f 	bl	8004d84 <__sflush_r>
 8004ec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ec8:	07da      	lsls	r2, r3, #31
 8004eca:	4605      	mov	r5, r0
 8004ecc:	d4e4      	bmi.n	8004e98 <_fflush_r+0xc>
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	059b      	lsls	r3, r3, #22
 8004ed2:	d4e1      	bmi.n	8004e98 <_fflush_r+0xc>
 8004ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ed6:	f7ff fb8b 	bl	80045f0 <__retarget_lock_release_recursive>
 8004eda:	e7dd      	b.n	8004e98 <_fflush_r+0xc>

08004edc <__swbuf_r>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	460e      	mov	r6, r1
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	b118      	cbz	r0, 8004eee <__swbuf_r+0x12>
 8004ee6:	6a03      	ldr	r3, [r0, #32]
 8004ee8:	b90b      	cbnz	r3, 8004eee <__swbuf_r+0x12>
 8004eea:	f7ff fa7b 	bl	80043e4 <__sinit>
 8004eee:	69a3      	ldr	r3, [r4, #24]
 8004ef0:	60a3      	str	r3, [r4, #8]
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	071a      	lsls	r2, r3, #28
 8004ef6:	d501      	bpl.n	8004efc <__swbuf_r+0x20>
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	b943      	cbnz	r3, 8004f0e <__swbuf_r+0x32>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 f82a 	bl	8004f58 <__swsetup_r>
 8004f04:	b118      	cbz	r0, 8004f0e <__swbuf_r+0x32>
 8004f06:	f04f 37ff 	mov.w	r7, #4294967295
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	6922      	ldr	r2, [r4, #16]
 8004f12:	1a98      	subs	r0, r3, r2
 8004f14:	6963      	ldr	r3, [r4, #20]
 8004f16:	b2f6      	uxtb	r6, r6
 8004f18:	4283      	cmp	r3, r0
 8004f1a:	4637      	mov	r7, r6
 8004f1c:	dc05      	bgt.n	8004f2a <__swbuf_r+0x4e>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	f7ff ffb3 	bl	8004e8c <_fflush_r>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d1ed      	bne.n	8004f06 <__swbuf_r+0x2a>
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	60a3      	str	r3, [r4, #8]
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	6022      	str	r2, [r4, #0]
 8004f36:	701e      	strb	r6, [r3, #0]
 8004f38:	6962      	ldr	r2, [r4, #20]
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d004      	beq.n	8004f4a <__swbuf_r+0x6e>
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	07db      	lsls	r3, r3, #31
 8004f44:	d5e1      	bpl.n	8004f0a <__swbuf_r+0x2e>
 8004f46:	2e0a      	cmp	r6, #10
 8004f48:	d1df      	bne.n	8004f0a <__swbuf_r+0x2e>
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f7ff ff9d 	bl	8004e8c <_fflush_r>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d0d9      	beq.n	8004f0a <__swbuf_r+0x2e>
 8004f56:	e7d6      	b.n	8004f06 <__swbuf_r+0x2a>

08004f58 <__swsetup_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <__swsetup_r+0xa8>)
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	460c      	mov	r4, r1
 8004f62:	b118      	cbz	r0, 8004f6c <__swsetup_r+0x14>
 8004f64:	6a03      	ldr	r3, [r0, #32]
 8004f66:	b90b      	cbnz	r3, 8004f6c <__swsetup_r+0x14>
 8004f68:	f7ff fa3c 	bl	80043e4 <__sinit>
 8004f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f70:	0719      	lsls	r1, r3, #28
 8004f72:	d422      	bmi.n	8004fba <__swsetup_r+0x62>
 8004f74:	06da      	lsls	r2, r3, #27
 8004f76:	d407      	bmi.n	8004f88 <__swsetup_r+0x30>
 8004f78:	2209      	movs	r2, #9
 8004f7a:	602a      	str	r2, [r5, #0]
 8004f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	e033      	b.n	8004ff0 <__swsetup_r+0x98>
 8004f88:	0758      	lsls	r0, r3, #29
 8004f8a:	d512      	bpl.n	8004fb2 <__swsetup_r+0x5a>
 8004f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f8e:	b141      	cbz	r1, 8004fa2 <__swsetup_r+0x4a>
 8004f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f94:	4299      	cmp	r1, r3
 8004f96:	d002      	beq.n	8004f9e <__swsetup_r+0x46>
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f7ff fb2b 	bl	80045f4 <_free_r>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	2300      	movs	r3, #0
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f043 0308 	orr.w	r3, r3, #8
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	b94b      	cbnz	r3, 8004fd2 <__swsetup_r+0x7a>
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc8:	d003      	beq.n	8004fd2 <__swsetup_r+0x7a>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f84f 	bl	8005070 <__smakebuf_r>
 8004fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd6:	f013 0201 	ands.w	r2, r3, #1
 8004fda:	d00a      	beq.n	8004ff2 <__swsetup_r+0x9a>
 8004fdc:	2200      	movs	r2, #0
 8004fde:	60a2      	str	r2, [r4, #8]
 8004fe0:	6962      	ldr	r2, [r4, #20]
 8004fe2:	4252      	negs	r2, r2
 8004fe4:	61a2      	str	r2, [r4, #24]
 8004fe6:	6922      	ldr	r2, [r4, #16]
 8004fe8:	b942      	cbnz	r2, 8004ffc <__swsetup_r+0xa4>
 8004fea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fee:	d1c5      	bne.n	8004f7c <__swsetup_r+0x24>
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
 8004ff2:	0799      	lsls	r1, r3, #30
 8004ff4:	bf58      	it	pl
 8004ff6:	6962      	ldrpl	r2, [r4, #20]
 8004ff8:	60a2      	str	r2, [r4, #8]
 8004ffa:	e7f4      	b.n	8004fe6 <__swsetup_r+0x8e>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e7f7      	b.n	8004ff0 <__swsetup_r+0x98>
 8005000:	20000018 	.word	0x20000018

08005004 <_sbrk_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d06      	ldr	r5, [pc, #24]	@ (8005020 <_sbrk_r+0x1c>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	f7fb fe60 	bl	8000cd4 <_sbrk>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_sbrk_r+0x1a>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_sbrk_r+0x1a>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	20000298 	.word	0x20000298

08005024 <__swhatbuf_r>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	460c      	mov	r4, r1
 8005028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800502c:	2900      	cmp	r1, #0
 800502e:	b096      	sub	sp, #88	@ 0x58
 8005030:	4615      	mov	r5, r2
 8005032:	461e      	mov	r6, r3
 8005034:	da0d      	bge.n	8005052 <__swhatbuf_r+0x2e>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	bf14      	ite	ne
 8005042:	2340      	movne	r3, #64	@ 0x40
 8005044:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005048:	2000      	movs	r0, #0
 800504a:	6031      	str	r1, [r6, #0]
 800504c:	602b      	str	r3, [r5, #0]
 800504e:	b016      	add	sp, #88	@ 0x58
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	466a      	mov	r2, sp
 8005054:	f000 f848 	bl	80050e8 <_fstat_r>
 8005058:	2800      	cmp	r0, #0
 800505a:	dbec      	blt.n	8005036 <__swhatbuf_r+0x12>
 800505c:	9901      	ldr	r1, [sp, #4]
 800505e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005062:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005066:	4259      	negs	r1, r3
 8005068:	4159      	adcs	r1, r3
 800506a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800506e:	e7eb      	b.n	8005048 <__swhatbuf_r+0x24>

08005070 <__smakebuf_r>:
 8005070:	898b      	ldrh	r3, [r1, #12]
 8005072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005074:	079d      	lsls	r5, r3, #30
 8005076:	4606      	mov	r6, r0
 8005078:	460c      	mov	r4, r1
 800507a:	d507      	bpl.n	800508c <__smakebuf_r+0x1c>
 800507c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	6123      	str	r3, [r4, #16]
 8005084:	2301      	movs	r3, #1
 8005086:	6163      	str	r3, [r4, #20]
 8005088:	b003      	add	sp, #12
 800508a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508c:	ab01      	add	r3, sp, #4
 800508e:	466a      	mov	r2, sp
 8005090:	f7ff ffc8 	bl	8005024 <__swhatbuf_r>
 8005094:	9f00      	ldr	r7, [sp, #0]
 8005096:	4605      	mov	r5, r0
 8005098:	4639      	mov	r1, r7
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff fb16 	bl	80046cc <_malloc_r>
 80050a0:	b948      	cbnz	r0, 80050b6 <__smakebuf_r+0x46>
 80050a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a6:	059a      	lsls	r2, r3, #22
 80050a8:	d4ee      	bmi.n	8005088 <__smakebuf_r+0x18>
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	f043 0302 	orr.w	r3, r3, #2
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	e7e2      	b.n	800507c <__smakebuf_r+0xc>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	6020      	str	r0, [r4, #0]
 80050ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050c6:	b15b      	cbz	r3, 80050e0 <__smakebuf_r+0x70>
 80050c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050cc:	4630      	mov	r0, r6
 80050ce:	f000 f81d 	bl	800510c <_isatty_r>
 80050d2:	b128      	cbz	r0, 80050e0 <__smakebuf_r+0x70>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	431d      	orrs	r5, r3
 80050e4:	81a5      	strh	r5, [r4, #12]
 80050e6:	e7cf      	b.n	8005088 <__smakebuf_r+0x18>

080050e8 <_fstat_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d07      	ldr	r5, [pc, #28]	@ (8005108 <_fstat_r+0x20>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	f7fb fdc4 	bl	8000c82 <_fstat>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d102      	bne.n	8005104 <_fstat_r+0x1c>
 80050fe:	682b      	ldr	r3, [r5, #0]
 8005100:	b103      	cbz	r3, 8005104 <_fstat_r+0x1c>
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	bd38      	pop	{r3, r4, r5, pc}
 8005106:	bf00      	nop
 8005108:	20000298 	.word	0x20000298

0800510c <_isatty_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4d06      	ldr	r5, [pc, #24]	@ (8005128 <_isatty_r+0x1c>)
 8005110:	2300      	movs	r3, #0
 8005112:	4604      	mov	r4, r0
 8005114:	4608      	mov	r0, r1
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	f7fb fdc3 	bl	8000ca2 <_isatty>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_isatty_r+0x1a>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_isatty_r+0x1a>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	20000298 	.word	0x20000298

0800512c <_init>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr

08005138 <_fini>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr
