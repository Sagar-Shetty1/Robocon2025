
Master_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d6c  08004d6c  00005d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d74  08004d74  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d78  08004d78  00005d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000068  08004de4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004de4  00006364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ad0  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7f  00000000  00000000  0000fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  000116e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000639  00000000  00000000  00011f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d8e  00000000  00000000  00012551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aef1  00000000  00000000  000342df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca4b3  00000000  00000000  0003f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  001096c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cc8 	.word	0x08004cc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004cc8 	.word	0x08004cc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t rxbuff[16];
int32_t lx, ly, rx, ry, cro, squ, tri, cir, up, down, left, right, ll1, rr1,
		ll2, rr2, rL, rR;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80005a8:	2210      	movs	r2, #16
 80005aa:	4904      	ldr	r1, [pc, #16]	@ (80005bc <HAL_UART_RxCpltCallback+0x1c>)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <HAL_UART_RxCpltCallback+0x20>)
 80005ae:	f002 fb4e 	bl	8002c4e <HAL_UART_Receive_DMA>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200001c0 	.word	0x200001c0
 80005c0:	20000084 	.word	0x20000084

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	b089      	sub	sp, #36	@ 0x24
 80005c8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fd2f 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f94b 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 fa55 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d6:	f000 fa33 	bl	8000a40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005da:	f000 fa07 	bl	80009ec <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005de:	f000 f9b1 	bl	8000944 <MX_UART4_Init>
  MX_UART5_Init();
 80005e2:	f000 f9d9 	bl	8000998 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80005e6:	2210      	movs	r2, #16
 80005e8:	4989      	ldr	r1, [pc, #548]	@ (8000810 <main+0x24c>)
 80005ea:	488a      	ldr	r0, [pc, #552]	@ (8000814 <main+0x250>)
 80005ec:	f002 fb2f 	bl	8002c4e <HAL_UART_Receive_DMA>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* ps5 controller */
		lx = (rxbuff[0] & 0x80) ?
 80005f0:	4b87      	ldr	r3, [pc, #540]	@ (8000810 <main+0x24c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	da04      	bge.n	8000604 <main+0x40>
 80005fa:	4b85      	ldr	r3, [pc, #532]	@ (8000810 <main+0x24c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000602:	e001      	b.n	8000608 <main+0x44>
 8000604:	4b82      	ldr	r3, [pc, #520]	@ (8000810 <main+0x24c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 8000608:	4a83      	ldr	r2, [pc, #524]	@ (8000818 <main+0x254>)
 800060a:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 800060c:	4b80      	ldr	r3, [pc, #512]	@ (8000810 <main+0x24c>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 8000612:	2b00      	cmp	r3, #0
 8000614:	da04      	bge.n	8000620 <main+0x5c>
 8000616:	4b7e      	ldr	r3, [pc, #504]	@ (8000810 <main+0x24c>)
 8000618:	785b      	ldrb	r3, [r3, #1]
 800061a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800061e:	e001      	b.n	8000624 <main+0x60>
 8000620:	4b7b      	ldr	r3, [pc, #492]	@ (8000810 <main+0x24c>)
 8000622:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 8000624:	4a7d      	ldr	r2, [pc, #500]	@ (800081c <main+0x258>)
 8000626:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 8000628:	4b79      	ldr	r3, [pc, #484]	@ (8000810 <main+0x24c>)
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 800062e:	2b00      	cmp	r3, #0
 8000630:	da04      	bge.n	800063c <main+0x78>
 8000632:	4b77      	ldr	r3, [pc, #476]	@ (8000810 <main+0x24c>)
 8000634:	789b      	ldrb	r3, [r3, #2]
 8000636:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800063a:	e001      	b.n	8000640 <main+0x7c>
 800063c:	4b74      	ldr	r3, [pc, #464]	@ (8000810 <main+0x24c>)
 800063e:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 8000640:	4a77      	ldr	r2, [pc, #476]	@ (8000820 <main+0x25c>)
 8000642:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 8000644:	4b72      	ldr	r3, [pc, #456]	@ (8000810 <main+0x24c>)
 8000646:	78db      	ldrb	r3, [r3, #3]
 8000648:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 800064a:	2b00      	cmp	r3, #0
 800064c:	da04      	bge.n	8000658 <main+0x94>
 800064e:	4b70      	ldr	r3, [pc, #448]	@ (8000810 <main+0x24c>)
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000656:	e001      	b.n	800065c <main+0x98>
 8000658:	4b6d      	ldr	r3, [pc, #436]	@ (8000810 <main+0x24c>)
 800065a:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 800065c:	4a71      	ldr	r2, [pc, #452]	@ (8000824 <main+0x260>)
 800065e:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8000660:	4b6b      	ldr	r3, [pc, #428]	@ (8000810 <main+0x24c>)
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8000666:	2b00      	cmp	r3, #0
 8000668:	da04      	bge.n	8000674 <main+0xb0>
 800066a:	4b69      	ldr	r3, [pc, #420]	@ (8000810 <main+0x24c>)
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000672:	e001      	b.n	8000678 <main+0xb4>
 8000674:	4b66      	ldr	r3, [pc, #408]	@ (8000810 <main+0x24c>)
 8000676:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 8000678:	4a6b      	ldr	r2, [pc, #428]	@ (8000828 <main+0x264>)
 800067a:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 800067c:	4b64      	ldr	r3, [pc, #400]	@ (8000810 <main+0x24c>)
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8000682:	2b00      	cmp	r3, #0
 8000684:	da04      	bge.n	8000690 <main+0xcc>
 8000686:	4b62      	ldr	r3, [pc, #392]	@ (8000810 <main+0x24c>)
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800068e:	e001      	b.n	8000694 <main+0xd0>
 8000690:	4b5f      	ldr	r3, [pc, #380]	@ (8000810 <main+0x24c>)
 8000692:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 8000694:	4a65      	ldr	r2, [pc, #404]	@ (800082c <main+0x268>)
 8000696:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 8000698:	4b5d      	ldr	r3, [pc, #372]	@ (8000810 <main+0x24c>)
 800069a:	799b      	ldrb	r3, [r3, #6]
 800069c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 800069e:	2b00      	cmp	r3, #0
 80006a0:	da04      	bge.n	80006ac <main+0xe8>
 80006a2:	4b5b      	ldr	r3, [pc, #364]	@ (8000810 <main+0x24c>)
 80006a4:	799b      	ldrb	r3, [r3, #6]
 80006a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006aa:	e001      	b.n	80006b0 <main+0xec>
 80006ac:	4b58      	ldr	r3, [pc, #352]	@ (8000810 <main+0x24c>)
 80006ae:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 80006b0:	4a5f      	ldr	r2, [pc, #380]	@ (8000830 <main+0x26c>)
 80006b2:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 80006b4:	4b56      	ldr	r3, [pc, #344]	@ (8000810 <main+0x24c>)
 80006b6:	79db      	ldrb	r3, [r3, #7]
 80006b8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	da04      	bge.n	80006c8 <main+0x104>
 80006be:	4b54      	ldr	r3, [pc, #336]	@ (8000810 <main+0x24c>)
 80006c0:	79db      	ldrb	r3, [r3, #7]
 80006c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006c6:	e001      	b.n	80006cc <main+0x108>
 80006c8:	4b51      	ldr	r3, [pc, #324]	@ (8000810 <main+0x24c>)
 80006ca:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 80006cc:	4a59      	ldr	r2, [pc, #356]	@ (8000834 <main+0x270>)
 80006ce:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 80006d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000810 <main+0x24c>)
 80006d2:	7a1b      	ldrb	r3, [r3, #8]
 80006d4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da04      	bge.n	80006e4 <main+0x120>
 80006da:	4b4d      	ldr	r3, [pc, #308]	@ (8000810 <main+0x24c>)
 80006dc:	7a1b      	ldrb	r3, [r3, #8]
 80006de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006e2:	e001      	b.n	80006e8 <main+0x124>
 80006e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000810 <main+0x24c>)
 80006e6:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 80006e8:	4a53      	ldr	r2, [pc, #332]	@ (8000838 <main+0x274>)
 80006ea:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 80006ec:	4b48      	ldr	r3, [pc, #288]	@ (8000810 <main+0x24c>)
 80006ee:	7a5b      	ldrb	r3, [r3, #9]
 80006f0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	da04      	bge.n	8000700 <main+0x13c>
 80006f6:	4b46      	ldr	r3, [pc, #280]	@ (8000810 <main+0x24c>)
 80006f8:	7a5b      	ldrb	r3, [r3, #9]
 80006fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006fe:	e001      	b.n	8000704 <main+0x140>
 8000700:	4b43      	ldr	r3, [pc, #268]	@ (8000810 <main+0x24c>)
 8000702:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 8000704:	4a4d      	ldr	r2, [pc, #308]	@ (800083c <main+0x278>)
 8000706:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 8000708:	4b41      	ldr	r3, [pc, #260]	@ (8000810 <main+0x24c>)
 800070a:	7a9b      	ldrb	r3, [r3, #10]
 800070c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 800070e:	2b00      	cmp	r3, #0
 8000710:	da04      	bge.n	800071c <main+0x158>
 8000712:	4b3f      	ldr	r3, [pc, #252]	@ (8000810 <main+0x24c>)
 8000714:	7a9b      	ldrb	r3, [r3, #10]
 8000716:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800071a:	e001      	b.n	8000720 <main+0x15c>
 800071c:	4b3c      	ldr	r3, [pc, #240]	@ (8000810 <main+0x24c>)
 800071e:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 8000720:	4a47      	ldr	r2, [pc, #284]	@ (8000840 <main+0x27c>)
 8000722:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 8000724:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <main+0x24c>)
 8000726:	7adb      	ldrb	r3, [r3, #11]
 8000728:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 800072a:	2b00      	cmp	r3, #0
 800072c:	da04      	bge.n	8000738 <main+0x174>
 800072e:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <main+0x24c>)
 8000730:	7adb      	ldrb	r3, [r3, #11]
 8000732:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000736:	e001      	b.n	800073c <main+0x178>
 8000738:	4b35      	ldr	r3, [pc, #212]	@ (8000810 <main+0x24c>)
 800073a:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 800073c:	4a41      	ldr	r2, [pc, #260]	@ (8000844 <main+0x280>)
 800073e:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 8000740:	4b33      	ldr	r3, [pc, #204]	@ (8000810 <main+0x24c>)
 8000742:	7b1b      	ldrb	r3, [r3, #12]
 8000744:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8000746:	2b00      	cmp	r3, #0
 8000748:	da04      	bge.n	8000754 <main+0x190>
 800074a:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <main+0x24c>)
 800074c:	7b1b      	ldrb	r3, [r3, #12]
 800074e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000752:	e001      	b.n	8000758 <main+0x194>
 8000754:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <main+0x24c>)
 8000756:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 8000758:	4a3b      	ldr	r2, [pc, #236]	@ (8000848 <main+0x284>)
 800075a:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 800075c:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <main+0x24c>)
 800075e:	7b5b      	ldrb	r3, [r3, #13]
 8000760:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8000762:	2b00      	cmp	r3, #0
 8000764:	da04      	bge.n	8000770 <main+0x1ac>
 8000766:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <main+0x24c>)
 8000768:	7b5b      	ldrb	r3, [r3, #13]
 800076a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800076e:	e001      	b.n	8000774 <main+0x1b0>
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <main+0x24c>)
 8000772:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 8000774:	4a35      	ldr	r2, [pc, #212]	@ (800084c <main+0x288>)
 8000776:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 8000778:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <main+0x24c>)
 800077a:	7b9b      	ldrb	r3, [r3, #14]
 800077c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 800077e:	2b00      	cmp	r3, #0
 8000780:	da04      	bge.n	800078c <main+0x1c8>
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <main+0x24c>)
 8000784:	7b9b      	ldrb	r3, [r3, #14]
 8000786:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800078a:	e001      	b.n	8000790 <main+0x1cc>
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <main+0x24c>)
 800078e:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8000790:	4a2f      	ldr	r2, [pc, #188]	@ (8000850 <main+0x28c>)
 8000792:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <main+0x24c>)
 8000796:	7bdb      	ldrb	r3, [r3, #15]
 8000798:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 800079a:	2b00      	cmp	r3, #0
 800079c:	da04      	bge.n	80007a8 <main+0x1e4>
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <main+0x24c>)
 80007a0:	7bdb      	ldrb	r3, [r3, #15]
 80007a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007a6:	e001      	b.n	80007ac <main+0x1e8>
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <main+0x24c>)
 80007aa:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 80007ac:	4a29      	ldr	r2, [pc, #164]	@ (8000854 <main+0x290>)
 80007ae:	6013      	str	r3, [r2, #0]

		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly,
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <main+0x254>)
 80007b2:	681d      	ldr	r5, [r3, #0]
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <main+0x258>)
 80007b6:	681e      	ldr	r6, [r3, #0]
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <main+0x25c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <main+0x260>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <main+0x264>)
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	4919      	ldr	r1, [pc, #100]	@ (800082c <main+0x268>)
 80007c8:	6809      	ldr	r1, [r1, #0]
 80007ca:	4819      	ldr	r0, [pc, #100]	@ (8000830 <main+0x26c>)
 80007cc:	6800      	ldr	r0, [r0, #0]
 80007ce:	4c19      	ldr	r4, [pc, #100]	@ (8000834 <main+0x270>)
 80007d0:	6824      	ldr	r4, [r4, #0]
 80007d2:	9404      	str	r4, [sp, #16]
 80007d4:	9003      	str	r0, [sp, #12]
 80007d6:	9102      	str	r1, [sp, #8]
 80007d8:	9201      	str	r2, [sp, #4]
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4632      	mov	r2, r6
 80007e0:	4629      	mov	r1, r5
 80007e2:	481d      	ldr	r0, [pc, #116]	@ (8000858 <main+0x294>)
 80007e4:	f003 fc02 	bl	8003fec <iprintf>
				rx, ry, cro, squ, tri, cir);

		data[0] = rxbuff[7];
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <main+0x24c>)
 80007ea:	79da      	ldrb	r2, [r3, #7]
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <main+0x298>)
 80007ee:	701a      	strb	r2, [r3, #0]
		data[1] = rxbuff[4];
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <main+0x24c>)
 80007f2:	791a      	ldrb	r2, [r3, #4]
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <main+0x298>)
 80007f6:	705a      	strb	r2, [r3, #1]

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007f8:	2120      	movs	r1, #32
 80007fa:	4819      	ldr	r0, [pc, #100]	@ (8000860 <main+0x29c>)
 80007fc:	f001 fb49 	bl	8001e92 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart5, (uint8_t*)data, 2, 1000);
 8000800:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000804:	2202      	movs	r2, #2
 8000806:	4915      	ldr	r1, [pc, #84]	@ (800085c <main+0x298>)
 8000808:	4816      	ldr	r0, [pc, #88]	@ (8000864 <main+0x2a0>)
 800080a:	f002 f995 	bl	8002b38 <HAL_UART_Transmit>
	while (1) {
 800080e:	e6ef      	b.n	80005f0 <main+0x2c>
 8000810:	200001c0 	.word	0x200001c0
 8000814:	20000084 	.word	0x20000084
 8000818:	200001d0 	.word	0x200001d0
 800081c:	200001d4 	.word	0x200001d4
 8000820:	200001d8 	.word	0x200001d8
 8000824:	200001dc 	.word	0x200001dc
 8000828:	200001e0 	.word	0x200001e0
 800082c:	200001e4 	.word	0x200001e4
 8000830:	200001e8 	.word	0x200001e8
 8000834:	200001ec 	.word	0x200001ec
 8000838:	200001f0 	.word	0x200001f0
 800083c:	200001f4 	.word	0x200001f4
 8000840:	200001f8 	.word	0x200001f8
 8000844:	200001fc 	.word	0x200001fc
 8000848:	20000200 	.word	0x20000200
 800084c:	20000208 	.word	0x20000208
 8000850:	20000204 	.word	0x20000204
 8000854:	2000020c 	.word	0x2000020c
 8000858:	08004ce0 	.word	0x08004ce0
 800085c:	200001bc 	.word	0x200001bc
 8000860:	40020000 	.word	0x40020000
 8000864:	200000cc 	.word	0x200000cc

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2234      	movs	r2, #52	@ 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fc0d 	bl	8004096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b2a      	ldr	r3, [pc, #168]	@ (800093c <SystemClock_Config+0xd4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a29      	ldr	r2, [pc, #164]	@ (800093c <SystemClock_Config+0xd4>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <SystemClock_Config+0xd4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <SystemClock_Config+0xd8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b4:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <SystemClock_Config+0xd8>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <SystemClock_Config+0xd8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008dc:	2310      	movs	r3, #16
 80008de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fe30 	bl	800255c <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000902:	f000 f94f 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	2102      	movs	r1, #2
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fad0 	bl	8001ec8 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800092e:	f000 f939 	bl	8000ba4 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	@ 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_UART4_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <MX_UART4_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_UART4_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_UART4_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_UART4_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_UART4_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_UART4_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_UART4_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_UART4_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_UART4_Init+0x4c>)
 800097c:	f002 f88c 	bl	8002a98 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f90d 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000084 	.word	0x20000084
 8000994:	40004c00 	.word	0x40004c00

08000998 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_UART5_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_UART5_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_UART5_Init+0x4c>)
 80009d0:	f002 f862 	bl	8002a98 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f8e3 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000cc 	.word	0x200000cc
 80009e8:	40005000 	.word	0x40005000

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_USART2_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f002 f838 	bl	8002a98 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f8b9 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000114 	.word	0x20000114
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	200d      	movs	r0, #13
 8000a68:	f000 fc2d 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a6c:	200d      	movs	r0, #13
 8000a6e:	f000 fc46 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a33      	ldr	r2, [pc, #204]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a2c      	ldr	r2, [pc, #176]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a25      	ldr	r2, [pc, #148]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_GPIO_Init+0xec>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	4812      	ldr	r0, [pc, #72]	@ (8000b70 <MX_GPIO_Init+0xf0>)
 8000b28:	f001 f99a 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <MX_GPIO_Init+0xf4>)
 8000b44:	f000 fff8 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_GPIO_Init+0xf0>)
 8000b60:	f000 ffea 	bl	8001b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020800 	.word	0x40020800

08000b78 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <_write+0x28>)
 8000b90:	f001 ffd2 	bl	8002b38 <HAL_UART_Transmit>
	return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000114 	.word	0x20000114

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bee:	2007      	movs	r0, #7
 8000bf0:	f000 fb5e 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	@ 0x38
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a76      	ldr	r2, [pc, #472]	@ (8000df8 <HAL_UART_MspInit+0x1f8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d164      	bne.n	8000cec <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	4b75      	ldr	r3, [pc, #468]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a74      	ldr	r2, [pc, #464]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000c2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c32:	4b72      	ldr	r3, [pc, #456]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	4b6e      	ldr	r3, [pc, #440]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a6d      	ldr	r2, [pc, #436]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b6b      	ldr	r3, [pc, #428]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4862      	ldr	r0, [pc, #392]	@ (8000e00 <HAL_UART_MspInit+0x200>)
 8000c78:	f000 ff5e 	bl	8001b38 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000c7c:	4b61      	ldr	r3, [pc, #388]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000c7e:	4a62      	ldr	r2, [pc, #392]	@ (8000e08 <HAL_UART_MspInit+0x208>)
 8000c80:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000c82:	4b60      	ldr	r3, [pc, #384]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000c84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c88:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c90:	4b5c      	ldr	r3, [pc, #368]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c96:	4b5b      	ldr	r3, [pc, #364]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000c98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c9e:	4b59      	ldr	r3, [pc, #356]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca4:	4b57      	ldr	r3, [pc, #348]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000caa:	4b56      	ldr	r3, [pc, #344]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b54      	ldr	r3, [pc, #336]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb8:	4b52      	ldr	r3, [pc, #328]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000cbe:	4851      	ldr	r0, [pc, #324]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000cc0:	f000 fb38 	bl	8001334 <HAL_DMA_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000cca:	f7ff ff6b 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8000e04 <HAL_UART_MspInit+0x204>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2034      	movs	r0, #52	@ 0x34
 8000ce0:	f000 faf1 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ce4:	2034      	movs	r0, #52	@ 0x34
 8000ce6:	f000 fb0a 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cea:	e081      	b.n	8000df0 <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==UART5)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a46      	ldr	r2, [pc, #280]	@ (8000e0c <HAL_UART_MspInit+0x20c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d14b      	bne.n	8000d8e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	4b40      	ldr	r3, [pc, #256]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b3d      	ldr	r3, [pc, #244]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	4b39      	ldr	r3, [pc, #228]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a38      	ldr	r2, [pc, #224]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b36      	ldr	r3, [pc, #216]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b32      	ldr	r3, [pc, #200]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a31      	ldr	r2, [pc, #196]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4826      	ldr	r0, [pc, #152]	@ (8000e00 <HAL_UART_MspInit+0x200>)
 8000d68:	f000 fee6 	bl	8001b38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4822      	ldr	r0, [pc, #136]	@ (8000e10 <HAL_UART_MspInit+0x210>)
 8000d88:	f000 fed6 	bl	8001b38 <HAL_GPIO_Init>
}
 8000d8c:	e030      	b.n	8000df0 <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==USART2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a20      	ldr	r2, [pc, #128]	@ (8000e14 <HAL_UART_MspInit+0x214>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d12b      	bne.n	8000df0 <HAL_UART_MspInit+0x1f0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a16      	ldr	r2, [pc, #88]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <HAL_UART_MspInit+0x1fc>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de0:	2307      	movs	r3, #7
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <HAL_UART_MspInit+0x218>)
 8000dec:	f000 fea4 	bl	8001b38 <HAL_GPIO_Init>
}
 8000df0:	bf00      	nop
 8000df2:	3738      	adds	r7, #56	@ 0x38
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40004c00 	.word	0x40004c00
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020800 	.word	0x40020800
 8000e04:	2000015c 	.word	0x2000015c
 8000e08:	40026040 	.word	0x40026040
 8000e0c:	40005000 	.word	0x40005000
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40020000 	.word	0x40020000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f92d 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <DMA1_Stream2_IRQHandler+0x10>)
 8000e82:	f000 fbef 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000015c 	.word	0x2000015c

08000e90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <UART4_IRQHandler+0x10>)
 8000e96:	f001 feff 	bl	8002c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000084 	.word	0x20000084

08000ea4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb6:	f3af 8000 	nop.w
 8000eba:	4601      	mov	r1, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf0      	blt.n	8000eb6 <_read+0x12>
  }

  return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f003 f8dc 	bl	8004134 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	20000210 	.word	0x20000210
 8000fb0:	20000368 	.word	0x20000368

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001010 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fdc:	f7ff ffea 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe2:	490d      	ldr	r1, [pc, #52]	@ (8001018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8001024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001006:	f003 f89b 	bl	8004140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fadb 	bl	80005c4 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800101c:	08004d7c 	.word	0x08004d7c
  ldr r2, =_sbss
 8001020:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001024:	20000364 	.word	0x20000364

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	@ (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f92b 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fda6 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f943 	bl	800131a <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f90b 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	@ (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000214 	.word	0x20000214

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000214 	.word	0x20000214

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	@ (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	@ (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	@ 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff feda 	bl	80010f8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e099      	b.n	8001484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001370:	e00f      	b.n	8001392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001372:	f7ff fec1 	bl	80010f8 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b05      	cmp	r3, #5
 800137e:	d908      	bls.n	8001392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2220      	movs	r2, #32
 8001384:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e078      	b.n	8001484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e8      	bne.n	8001372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4b38      	ldr	r3, [pc, #224]	@ (800148c <HAL_DMA_Init+0x158>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d107      	bne.n	80013fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	4313      	orrs	r3, r2
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f023 0307 	bic.w	r3, r3, #7
 8001412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	4313      	orrs	r3, r2
 800141c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	2b04      	cmp	r3, #4
 8001424:	d117      	bne.n	8001456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00e      	beq.n	8001456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fb01 	bl	8001a40 <DMA_CheckFifoParam>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2240      	movs	r2, #64	@ 0x40
 8001448:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001452:	2301      	movs	r3, #1
 8001454:	e016      	b.n	8001484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fab8 	bl	80019d4 <DMA_CalcBaseAndBitshift>
 8001464:	4603      	mov	r3, r0
 8001466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146c:	223f      	movs	r2, #63	@ 0x3f
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	f010803f 	.word	0xf010803f

08001490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_DMA_Start_IT+0x26>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e040      	b.n	8001538 <HAL_DMA_Start_IT+0xa8>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d12f      	bne.n	800152a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2202      	movs	r2, #2
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fa4a 	bl	8001978 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e8:	223f      	movs	r2, #63	@ 0x3f
 80014ea:	409a      	lsls	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0216 	orr.w	r2, r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0208 	orr.w	r2, r2, #8
 8001516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e005      	b.n	8001536 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001532:	2302      	movs	r3, #2
 8001534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800154e:	f7ff fdd3 	bl	80010f8 <HAL_GetTick>
 8001552:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d008      	beq.n	8001572 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e052      	b.n	8001618 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0216 	bic.w	r2, r2, #22
 8001580:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001590:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d103      	bne.n	80015a2 <HAL_DMA_Abort+0x62>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0208 	bic.w	r2, r2, #8
 80015b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c2:	e013      	b.n	80015ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015c4:	f7ff fd98 	bl	80010f8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d90c      	bls.n	80015ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2203      	movs	r2, #3
 80015dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e015      	b.n	8001618 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e4      	bne.n	80015c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fe:	223f      	movs	r2, #63	@ 0x3f
 8001600:	409a      	lsls	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d004      	beq.n	800163e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00c      	b.n	8001658 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2205      	movs	r2, #5
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001670:	4b8e      	ldr	r3, [pc, #568]	@ (80018ac <HAL_DMA_IRQHandler+0x248>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a8e      	ldr	r2, [pc, #568]	@ (80018b0 <HAL_DMA_IRQHandler+0x24c>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0a9b      	lsrs	r3, r3, #10
 800167c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168e:	2208      	movs	r2, #8
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01a      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0204 	bic.w	r2, r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016bc:	2208      	movs	r2, #8
 80016be:	409a      	lsls	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d4:	2201      	movs	r2, #1
 80016d6:	409a      	lsls	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d012      	beq.n	8001706 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f2:	2201      	movs	r2, #1
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fe:	f043 0202 	orr.w	r2, r3, #2
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170a:	2204      	movs	r2, #4
 800170c:	409a      	lsls	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d012      	beq.n	800173c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00b      	beq.n	800173c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001728:	2204      	movs	r2, #4
 800172a:	409a      	lsls	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	f043 0204 	orr.w	r2, r3, #4
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001740:	2210      	movs	r2, #16
 8001742:	409a      	lsls	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d043      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d03c      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175e:	2210      	movs	r2, #16
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d018      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d108      	bne.n	8001794 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d024      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
 8001792:	e01f      	b.n	80017d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
 80017a4:	e016      	b.n	80017d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0208 	bic.w	r2, r2, #8
 80017c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d8:	2220      	movs	r2, #32
 80017da:	409a      	lsls	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 808f 	beq.w	8001904 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8087 	beq.w	8001904 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fa:	2220      	movs	r2, #32
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b05      	cmp	r3, #5
 800180c:	d136      	bne.n	800187c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0216 	bic.w	r2, r2, #22
 800181c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800182c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <HAL_DMA_IRQHandler+0x1da>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0208 	bic.w	r2, r2, #8
 800184c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001852:	223f      	movs	r2, #63	@ 0x3f
 8001854:	409a      	lsls	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800186e:	2b00      	cmp	r3, #0
 8001870:	d07e      	beq.n	8001970 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
        }
        return;
 800187a:	e079      	b.n	8001970 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01d      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189c:	2b00      	cmp	r3, #0
 800189e:	d031      	beq.n	8001904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	e02c      	b.n	8001904 <HAL_DMA_IRQHandler+0x2a0>
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000
 80018b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d023      	beq.n	8001904 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
 80018c4:	e01e      	b.n	8001904 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10f      	bne.n	80018f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0210 	bic.w	r2, r2, #16
 80018e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	2b00      	cmp	r3, #0
 800190a:	d032      	beq.n	8001972 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d022      	beq.n	800195e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2205      	movs	r2, #5
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3301      	adds	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	d307      	bcc.n	800194c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f2      	bne.n	8001930 <HAL_DMA_IRQHandler+0x2cc>
 800194a:	e000      	b.n	800194e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800194c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
 800196e:	e000      	b.n	8001972 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001970:	bf00      	nop
    }
  }
}
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001994:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b40      	cmp	r3, #64	@ 0x40
 80019a4:	d108      	bne.n	80019b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019b6:	e007      	b.n	80019c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3b10      	subs	r3, #16
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <DMA_CalcBaseAndBitshift+0x64>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ee:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <DMA_CalcBaseAndBitshift+0x68>)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d909      	bls.n	8001a16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	1d1a      	adds	r2, r3, #4
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a14:	e007      	b.n	8001a26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	aaaaaaab 	.word	0xaaaaaaab
 8001a3c:	08004d30 	.word	0x08004d30

08001a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11f      	bne.n	8001a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d856      	bhi.n	8001b0e <DMA_CheckFifoParam+0xce>
 8001a60:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <DMA_CheckFifoParam+0x28>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a8b 	.word	0x08001a8b
 8001a70:	08001a79 	.word	0x08001a79
 8001a74:	08001b0f 	.word	0x08001b0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d046      	beq.n	8001b12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a88:	e043      	b.n	8001b12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a92:	d140      	bne.n	8001b16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a98:	e03d      	b.n	8001b16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aa2:	d121      	bne.n	8001ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d837      	bhi.n	8001b1a <DMA_CheckFifoParam+0xda>
 8001aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <DMA_CheckFifoParam+0x70>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001ac7 	.word	0x08001ac7
 8001ab8:	08001ac1 	.word	0x08001ac1
 8001abc:	08001ad9 	.word	0x08001ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac4:	e030      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d025      	beq.n	8001b1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad6:	e022      	b.n	8001b1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ae0:	d11f      	bne.n	8001b22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ae6:	e01c      	b.n	8001b22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d903      	bls.n	8001af6 <DMA_CheckFifoParam+0xb6>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d003      	beq.n	8001afc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001af4:	e018      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
      break;
 8001afa:	e015      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00e      	beq.n	8001b26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0c:	e00b      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b0e:	bf00      	nop
 8001b10:	e00a      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b12:	bf00      	nop
 8001b14:	e008      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b16:	bf00      	nop
 8001b18:	e006      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e004      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b1e:	bf00      	nop
 8001b20:	e002      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b22:	bf00      	nop
 8001b24:	e000      	b.n	8001b28 <DMA_CheckFifoParam+0xe8>
      break;
 8001b26:	bf00      	nop
    }
  } 
  
  return status; 
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e165      	b.n	8001e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 8154 	bne.w	8001e1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d005      	beq.n	8001b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d130      	bne.n	8001bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 0201 	and.w	r2, r3, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d017      	beq.n	8001c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80ae 	beq.w	8001e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e38 <HAL_GPIO_Init+0x300>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e38 <HAL_GPIO_Init+0x300>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <HAL_GPIO_Init+0x300>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a58      	ldr	r2, [pc, #352]	@ (8001e3c <HAL_GPIO_Init+0x304>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4f      	ldr	r2, [pc, #316]	@ (8001e40 <HAL_GPIO_Init+0x308>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d025      	beq.n	8001d52 <HAL_GPIO_Init+0x21a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4e      	ldr	r2, [pc, #312]	@ (8001e44 <HAL_GPIO_Init+0x30c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <HAL_GPIO_Init+0x216>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4d      	ldr	r2, [pc, #308]	@ (8001e48 <HAL_GPIO_Init+0x310>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x212>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4c      	ldr	r2, [pc, #304]	@ (8001e4c <HAL_GPIO_Init+0x314>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x20e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4b      	ldr	r2, [pc, #300]	@ (8001e50 <HAL_GPIO_Init+0x318>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x20a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4a      	ldr	r2, [pc, #296]	@ (8001e54 <HAL_GPIO_Init+0x31c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x206>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a49      	ldr	r2, [pc, #292]	@ (8001e58 <HAL_GPIO_Init+0x320>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x202>
 8001d36:	2306      	movs	r3, #6
 8001d38:	e00c      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00a      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	@ (8001e3c <HAL_GPIO_Init+0x304>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a31      	ldr	r2, [pc, #196]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a26      	ldr	r2, [pc, #152]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dea:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e14:	4a11      	ldr	r2, [pc, #68]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f ae96 	bls.w	8001b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40021400 	.word	0x40021400
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40013c00 	.word	0x40013c00

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e7c:	e003      	b.n	8001e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	041a      	lsls	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	041a      	lsls	r2, r3, #16
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0cc      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d90c      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b65      	ldr	r3, [pc, #404]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b8      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a58      	ldr	r2, [pc, #352]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f34:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a52      	ldr	r2, [pc, #328]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b50      	ldr	r3, [pc, #320]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	494d      	ldr	r1, [pc, #308]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d044      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d119      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e07f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b3f      	ldr	r3, [pc, #252]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b3b      	ldr	r3, [pc, #236]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e067      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4934      	ldr	r1, [pc, #208]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7ff f89e 	bl	80010f8 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7ff f89a 	bl	80010f8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e04f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d20c      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e032      	b.n	8002076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4916      	ldr	r1, [pc, #88]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	490e      	ldr	r1, [pc, #56]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800204e:	f000 f855 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	490a      	ldr	r1, [pc, #40]	@ (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	4a09      	ldr	r2, [pc, #36]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fffe 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00
 8002084:	40023800 	.word	0x40023800
 8002088:	08004d18 	.word	0x08004d18
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b0:	f7ff fff0 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a9b      	lsrs	r3, r3, #10
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4903      	ldr	r1, [pc, #12]	@ (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	08004d28 	.word	0x08004d28

080020d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d8:	f7ff ffdc 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	0b5b      	lsrs	r3, r3, #13
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	4903      	ldr	r1, [pc, #12]	@ (80020f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	08004d28 	.word	0x08004d28

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002100:	b0ae      	sub	sp, #184	@ 0xb8
 8002102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002122:	4bcb      	ldr	r3, [pc, #812]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b0c      	cmp	r3, #12
 800212c:	f200 8206 	bhi.w	800253c <HAL_RCC_GetSysClockFreq+0x440>
 8002130:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	0800216d 	.word	0x0800216d
 800213c:	0800253d 	.word	0x0800253d
 8002140:	0800253d 	.word	0x0800253d
 8002144:	0800253d 	.word	0x0800253d
 8002148:	08002175 	.word	0x08002175
 800214c:	0800253d 	.word	0x0800253d
 8002150:	0800253d 	.word	0x0800253d
 8002154:	0800253d 	.word	0x0800253d
 8002158:	0800217d 	.word	0x0800217d
 800215c:	0800253d 	.word	0x0800253d
 8002160:	0800253d 	.word	0x0800253d
 8002164:	0800253d 	.word	0x0800253d
 8002168:	0800236d 	.word	0x0800236d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4bb9      	ldr	r3, [pc, #740]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x358>)
 800216e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002172:	e1e7      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002174:	4bb8      	ldr	r3, [pc, #736]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800217a:	e1e3      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800217c:	4bb4      	ldr	r3, [pc, #720]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002188:	4bb1      	ldr	r3, [pc, #708]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d071      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002194:	4bae      	ldr	r3, [pc, #696]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	2200      	movs	r2, #0
 800219c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021a0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	0159      	lsls	r1, r3, #5
 80021c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021cc:	0150      	lsls	r0, r2, #5
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4621      	mov	r1, r4
 80021d4:	1a51      	subs	r1, r2, r1
 80021d6:	6439      	str	r1, [r7, #64]	@ 0x40
 80021d8:	4629      	mov	r1, r5
 80021da:	eb63 0301 	sbc.w	r3, r3, r1
 80021de:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80021ec:	4649      	mov	r1, r9
 80021ee:	018b      	lsls	r3, r1, #6
 80021f0:	4641      	mov	r1, r8
 80021f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f6:	4641      	mov	r1, r8
 80021f8:	018a      	lsls	r2, r1, #6
 80021fa:	4641      	mov	r1, r8
 80021fc:	1a51      	subs	r1, r2, r1
 80021fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002200:	4649      	mov	r1, r9
 8002202:	eb63 0301 	sbc.w	r3, r3, r1
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002214:	4649      	mov	r1, r9
 8002216:	00cb      	lsls	r3, r1, #3
 8002218:	4641      	mov	r1, r8
 800221a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800221e:	4641      	mov	r1, r8
 8002220:	00ca      	lsls	r2, r1, #3
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	4603      	mov	r3, r0
 8002228:	4622      	mov	r2, r4
 800222a:	189b      	adds	r3, r3, r2
 800222c:	633b      	str	r3, [r7, #48]	@ 0x30
 800222e:	462b      	mov	r3, r5
 8002230:	460a      	mov	r2, r1
 8002232:	eb42 0303 	adc.w	r3, r2, r3
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002244:	4629      	mov	r1, r5
 8002246:	024b      	lsls	r3, r1, #9
 8002248:	4621      	mov	r1, r4
 800224a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800224e:	4621      	mov	r1, r4
 8002250:	024a      	lsls	r2, r1, #9
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800225a:	2200      	movs	r2, #0
 800225c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002260:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002264:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002268:	f7fe f822 	bl	80002b0 <__aeabi_uldivmod>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4613      	mov	r3, r2
 8002272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002276:	e067      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002278:	4b75      	ldr	r3, [pc, #468]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002284:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002288:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800228c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002290:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002292:	2300      	movs	r3, #0
 8002294:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002296:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800229a:	4622      	mov	r2, r4
 800229c:	462b      	mov	r3, r5
 800229e:	f04f 0000 	mov.w	r0, #0
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	0159      	lsls	r1, r3, #5
 80022a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ac:	0150      	lsls	r0, r2, #5
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4621      	mov	r1, r4
 80022b4:	1a51      	subs	r1, r2, r1
 80022b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022b8:	4629      	mov	r1, r5
 80022ba:	eb63 0301 	sbc.w	r3, r3, r1
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022cc:	4649      	mov	r1, r9
 80022ce:	018b      	lsls	r3, r1, #6
 80022d0:	4641      	mov	r1, r8
 80022d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d6:	4641      	mov	r1, r8
 80022d8:	018a      	lsls	r2, r1, #6
 80022da:	4641      	mov	r1, r8
 80022dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80022e0:	4649      	mov	r1, r9
 80022e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022fa:	4692      	mov	sl, r2
 80022fc:	469b      	mov	fp, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	eb1a 0303 	adds.w	r3, sl, r3
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	462b      	mov	r3, r5
 8002308:	eb4b 0303 	adc.w	r3, fp, r3
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800231a:	4629      	mov	r1, r5
 800231c:	028b      	lsls	r3, r1, #10
 800231e:	4621      	mov	r1, r4
 8002320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002324:	4621      	mov	r1, r4
 8002326:	028a      	lsls	r2, r1, #10
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002330:	2200      	movs	r2, #0
 8002332:	673b      	str	r3, [r7, #112]	@ 0x70
 8002334:	677a      	str	r2, [r7, #116]	@ 0x74
 8002336:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800233a:	f7fd ffb9 	bl	80002b0 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4613      	mov	r3, r2
 8002344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002348:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800235a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800235e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800236a:	e0eb      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800236c:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002378:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d06b      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002384:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x354>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	2200      	movs	r2, #0
 800238c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800238e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002396:	663b      	str	r3, [r7, #96]	@ 0x60
 8002398:	2300      	movs	r3, #0
 800239a:	667b      	str	r3, [r7, #100]	@ 0x64
 800239c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023a0:	4622      	mov	r2, r4
 80023a2:	462b      	mov	r3, r5
 80023a4:	f04f 0000 	mov.w	r0, #0
 80023a8:	f04f 0100 	mov.w	r1, #0
 80023ac:	0159      	lsls	r1, r3, #5
 80023ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b2:	0150      	lsls	r0, r2, #5
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4621      	mov	r1, r4
 80023ba:	1a51      	subs	r1, r2, r1
 80023bc:	61b9      	str	r1, [r7, #24]
 80023be:	4629      	mov	r1, r5
 80023c0:	eb63 0301 	sbc.w	r3, r3, r1
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023d2:	4659      	mov	r1, fp
 80023d4:	018b      	lsls	r3, r1, #6
 80023d6:	4651      	mov	r1, sl
 80023d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023dc:	4651      	mov	r1, sl
 80023de:	018a      	lsls	r2, r1, #6
 80023e0:	4651      	mov	r1, sl
 80023e2:	ebb2 0801 	subs.w	r8, r2, r1
 80023e6:	4659      	mov	r1, fp
 80023e8:	eb63 0901 	sbc.w	r9, r3, r1
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002400:	4690      	mov	r8, r2
 8002402:	4699      	mov	r9, r3
 8002404:	4623      	mov	r3, r4
 8002406:	eb18 0303 	adds.w	r3, r8, r3
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	462b      	mov	r3, r5
 800240e:	eb49 0303 	adc.w	r3, r9, r3
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002420:	4629      	mov	r1, r5
 8002422:	024b      	lsls	r3, r1, #9
 8002424:	4621      	mov	r1, r4
 8002426:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800242a:	4621      	mov	r1, r4
 800242c:	024a      	lsls	r2, r1, #9
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002436:	2200      	movs	r2, #0
 8002438:	65bb      	str	r3, [r7, #88]	@ 0x58
 800243a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800243c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002440:	f7fd ff36 	bl	80002b0 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4613      	mov	r3, r2
 800244a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800244e:	e065      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x420>
 8002450:	40023800 	.word	0x40023800
 8002454:	00f42400 	.word	0x00f42400
 8002458:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245c:	4b3d      	ldr	r3, [pc, #244]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x458>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	2200      	movs	r2, #0
 8002464:	4618      	mov	r0, r3
 8002466:	4611      	mov	r1, r2
 8002468:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800246c:	653b      	str	r3, [r7, #80]	@ 0x50
 800246e:	2300      	movs	r3, #0
 8002470:	657b      	str	r3, [r7, #84]	@ 0x54
 8002472:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002476:	4642      	mov	r2, r8
 8002478:	464b      	mov	r3, r9
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002488:	0150      	lsls	r0, r2, #5
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4641      	mov	r1, r8
 8002490:	1a51      	subs	r1, r2, r1
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	4649      	mov	r1, r9
 8002496:	eb63 0301 	sbc.w	r3, r3, r1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024a8:	4659      	mov	r1, fp
 80024aa:	018b      	lsls	r3, r1, #6
 80024ac:	4651      	mov	r1, sl
 80024ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b2:	4651      	mov	r1, sl
 80024b4:	018a      	lsls	r2, r1, #6
 80024b6:	4651      	mov	r1, sl
 80024b8:	1a54      	subs	r4, r2, r1
 80024ba:	4659      	mov	r1, fp
 80024bc:	eb63 0501 	sbc.w	r5, r3, r1
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	00eb      	lsls	r3, r5, #3
 80024ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ce:	00e2      	lsls	r2, r4, #3
 80024d0:	4614      	mov	r4, r2
 80024d2:	461d      	mov	r5, r3
 80024d4:	4643      	mov	r3, r8
 80024d6:	18e3      	adds	r3, r4, r3
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	464b      	mov	r3, r9
 80024dc:	eb45 0303 	adc.w	r3, r5, r3
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ee:	4629      	mov	r1, r5
 80024f0:	028b      	lsls	r3, r1, #10
 80024f2:	4621      	mov	r1, r4
 80024f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f8:	4621      	mov	r1, r4
 80024fa:	028a      	lsls	r2, r1, #10
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002504:	2200      	movs	r2, #0
 8002506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002508:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800250a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800250e:	f7fd fecf 	bl	80002b0 <__aeabi_uldivmod>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4613      	mov	r3, r2
 8002518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800251c:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x458>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0f1b      	lsrs	r3, r3, #28
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800252a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800252e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800253a:	e003      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x45c>)
 800253e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002542:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002548:	4618      	mov	r0, r3
 800254a:	37b8      	adds	r7, #184	@ 0xb8
 800254c:	46bd      	mov	sp, r7
 800254e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	00f42400 	.word	0x00f42400

0800255c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e28d      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8083 	beq.w	8002682 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800257c:	4b94      	ldr	r3, [pc, #592]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	d019      	beq.n	80025bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002588:	4b91      	ldr	r3, [pc, #580]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002590:	2b08      	cmp	r3, #8
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002594:	4b8e      	ldr	r3, [pc, #568]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025a0:	d00c      	beq.n	80025bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4b8b      	ldr	r3, [pc, #556]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b88      	ldr	r3, [pc, #544]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b84      	ldr	r3, [pc, #528]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x124>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e25a      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x90>
 80025de:	4b7c      	ldr	r3, [pc, #496]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7b      	ldr	r2, [pc, #492]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xcc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0xb4>
 80025f6:	4b76      	ldr	r3, [pc, #472]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b73      	ldr	r3, [pc, #460]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a72      	ldr	r2, [pc, #456]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xcc>
 8002610:	4b6f      	ldr	r3, [pc, #444]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6e      	ldr	r2, [pc, #440]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b6c      	ldr	r3, [pc, #432]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6b      	ldr	r2, [pc, #428]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fd62 	bl	80010f8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe fd5e 	bl	80010f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e21f      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b61      	ldr	r3, [pc, #388]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xdc>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fd4e 	bl	80010f8 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fd4a 	bl	80010f8 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e20b      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b57      	ldr	r3, [pc, #348]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x104>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d06f      	beq.n	800276e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800268e:	4b50      	ldr	r3, [pc, #320]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800269a:	4b4d      	ldr	r3, [pc, #308]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
        || \
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d105      	bne.n	80026b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026a6:	4b4a      	ldr	r3, [pc, #296]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x186>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1d3      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_RCC_OscConfig+0x278>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fcf7 	bl	80010f8 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe fcf3 	bl	80010f8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1b4      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x278>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fcd6 	bl	80010f8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fcd2 	bl	80010f8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e193      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_RCC_OscConfig+0x27c>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fcb6 	bl	80010f8 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fcb2 	bl	80010f8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e173      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x234>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <HAL_RCC_OscConfig+0x27c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fc9f 	bl	80010f8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe fc9b 	bl	80010f8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e15c      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b83      	ldr	r3, [pc, #524]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	@ 0x40
 8002816:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b76      	ldr	r3, [pc, #472]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a75      	ldr	r2, [pc, #468]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe fc5b 	bl	80010f8 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7fe fc57 	bl	80010f8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e118      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6c      	ldr	r3, [pc, #432]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x31e>
 800286c:	4b66      	ldr	r3, [pc, #408]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	4a65      	ldr	r2, [pc, #404]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	@ 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x358>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x340>
 8002882:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	@ 0x70
 800288e:	4b5e      	ldr	r3, [pc, #376]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002892:	4a5d      	ldr	r2, [pc, #372]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	@ 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x358>
 800289c:	4b5a      	ldr	r3, [pc, #360]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	4a59      	ldr	r2, [pc, #356]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a8:	4b57      	ldr	r3, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a56      	ldr	r2, [pc, #344]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fc1c 	bl	80010f8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fc18 	bl	80010f8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0d7      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b4b      	ldr	r3, [pc, #300]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x368>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fc06 	bl	80010f8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe fc02 	bl	80010f8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0c1      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b40      	ldr	r3, [pc, #256]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b3b      	ldr	r3, [pc, #236]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80ad 	beq.w	8002a88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d060      	beq.n	80029fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d145      	bne.n	80029ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fbd6 	bl	80010f8 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fbd2 	bl	80010f8 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e093      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	491b      	ldr	r1, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe fba7 	bl	80010f8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fba3 	bl	80010f8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e064      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x452>
 80029cc:	e05c      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb90 	bl	80010f8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fb8c 	bl	80010f8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e04d      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x480>
 80029fa:	e045      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e040      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a14:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <HAL_RCC_OscConfig+0x538>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d030      	beq.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d129      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d122      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d119      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10f      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e042      	b.n	8002b30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe f89e 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	@ 0x24
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 ff4f 	bl	8003980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	@ 0x28
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d175      	bne.n	8002c44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_Transmit+0x2c>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e06e      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2221      	movs	r2, #33	@ 0x21
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b76:	f7fe fabf 	bl	80010f8 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b90:	d108      	bne.n	8002ba4 <HAL_UART_Transmit+0x6c>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e003      	b.n	8002bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bac:	e02e      	b.n	8002c0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fc27 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e03a      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	3302      	adds	r3, #2
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	e007      	b.n	8002bfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1cb      	bne.n	8002bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2140      	movs	r1, #64	@ 0x40
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fbf3 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e006      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e000      	b.n	8002c46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
  }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d112      	bne.n	8002c8e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_Receive_DMA+0x26>
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e00b      	b.n	8002c90 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fc1b 	bl	80034c0 <UART_Start_Receive_DMA>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	e000      	b.n	8002c90 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0ba      	sub	sp, #232	@ 0xe8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_UART_IRQHandler+0x66>
 8002cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fd83 	bl	8003802 <UART_Receive_IT>
      return;
 8002cfc:	e25b      	b.n	80031b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80de 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x22c>
 8002d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80d1 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_UART_IRQHandler+0xae>
 8002d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_UART_IRQHandler+0xd2>
 8002d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f043 0202 	orr.w	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_UART_IRQHandler+0xf6>
 8002d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d011      	beq.n	8002dbe <HAL_UART_IRQHandler+0x126>
 8002d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	f043 0208 	orr.w	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 81f2 	beq.w	80031ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_UART_IRQHandler+0x14e>
 8002dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fd0e 	bl	8003802 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df0:	2b40      	cmp	r3, #64	@ 0x40
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_UART_IRQHandler+0x17a>
 8002e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04f      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fc16 	bl	8003644 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b40      	cmp	r3, #64	@ 0x40
 8002e24:	d141      	bne.n	8002eaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1d9      	bne.n	8002e26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003078 <HAL_UART_IRQHandler+0x3e0>)
 8002e80:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fbca 	bl	8001620 <HAL_DMA_Abort_IT>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea0:	e00e      	b.n	8002ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f99e 	bl	80031e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea8:	e00a      	b.n	8002ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f99a 	bl	80031e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb0:	e006      	b.n	8002ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f996 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ebe:	e175      	b.n	80031ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec0:	bf00      	nop
    return;
 8002ec2:	e173      	b.n	80031ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 814f 	bne.w	800316c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8148 	beq.w	800316c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8141 	beq.w	800316c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0a:	2b40      	cmp	r3, #64	@ 0x40
 8002f0c:	f040 80b6 	bne.w	800307c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8145 	beq.w	80031b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	f080 813e 	bcs.w	80031b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f46:	f000 8088 	beq.w	800305a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1d9      	bne.n	8002f4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e1      	bne.n	8002f96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3314      	adds	r3, #20
 8002fd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ff6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ffc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e3      	bne.n	8002fd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800302a:	f023 0310 	bic.w	r3, r3, #16
 800302e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800303c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800303e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003042:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800304a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e3      	bne.n	8003018 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fa73 	bl	8001540 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003068:	b29b      	uxth	r3, r3
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	4619      	mov	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8c1 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003076:	e09b      	b.n	80031b0 <HAL_UART_IRQHandler+0x518>
 8003078:	0800370b 	.word	0x0800370b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003084:	b29b      	uxth	r3, r3
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 808e 	beq.w	80031b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8089 	beq.w	80031b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80030c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e3      	bne.n	80030a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	623b      	str	r3, [r7, #32]
   return(result);
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3314      	adds	r3, #20
 80030fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e3      	bne.n	80030da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0310 	bic.w	r3, r3, #16
 8003136:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003144:	61fa      	str	r2, [r7, #28]
 8003146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	e841 2300 	strex	r3, r2, [r1]
 8003150:	617b      	str	r3, [r7, #20]
   return(result);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e3      	bne.n	8003120 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800315e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f847 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800316a:	e023      	b.n	80031b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_UART_IRQHandler+0x4f4>
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fad4 	bl	8003732 <UART_Transmit_IT>
    return;
 800318a:	e014      	b.n	80031b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800318c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00e      	beq.n	80031b6 <HAL_UART_IRQHandler+0x51e>
 8003198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fb14 	bl	80037d2 <UART_EndTransmit_IT>
    return;
 80031aa:	e004      	b.n	80031b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80031ac:	bf00      	nop
 80031ae:	e002      	b.n	80031b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80031b0:	bf00      	nop
 80031b2:	e000      	b.n	80031b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80031b4:	bf00      	nop
  }
}
 80031b6:	37e8      	adds	r7, #232	@ 0xe8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b09c      	sub	sp, #112	@ 0x70
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d172      	bne.n	8003312 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800322c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322e:	2200      	movs	r2, #0
 8003230:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800324a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003252:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003254:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e5      	bne.n	8003232 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	667b      	str	r3, [r7, #100]	@ 0x64
 800327e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3314      	adds	r3, #20
 8003284:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003286:	647a      	str	r2, [r7, #68]	@ 0x44
 8003288:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800328c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e5      	bne.n	8003266 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	623b      	str	r3, [r7, #32]
   return(result);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80032b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e5      	bne.n	800329a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d119      	bne.n	8003312 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f023 0310 	bic.w	r3, r3, #16
 80032f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80032fe:	61fa      	str	r2, [r7, #28]
 8003300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	69b9      	ldr	r1, [r7, #24]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	617b      	str	r3, [r7, #20]
   return(result);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e5      	bne.n	80032de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003322:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003324:	4619      	mov	r1, r3
 8003326:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003328:	f7ff ff66 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800332c:	e002      	b.n	8003334 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800332e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003330:	f7fd f936 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 8003334:	bf00      	nop
 8003336:	3770      	adds	r7, #112	@ 0x70
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	2b01      	cmp	r3, #1
 8003356:	d108      	bne.n	800336a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff ff48 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003368:	e002      	b.n	8003370 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ff30 	bl	80031d0 <HAL_UART_RxHalfCpltCallback>
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003394:	2b80      	cmp	r3, #128	@ 0x80
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b21      	cmp	r3, #33	@ 0x21
 80033aa:	d108      	bne.n	80033be <UART_DMAError+0x46>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80033b8:	68b8      	ldr	r0, [r7, #8]
 80033ba:	f000 f91b 	bl	80035f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b22      	cmp	r3, #34	@ 0x22
 80033de:	d108      	bne.n	80033f2 <UART_DMAError+0x7a>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2200      	movs	r2, #0
 80033ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80033ec:	68b8      	ldr	r0, [r7, #8]
 80033ee:	f000 f929 	bl	8003644 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033fe:	68b8      	ldr	r0, [r7, #8]
 8003400:	f7ff fef0 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341c:	e03b      	b.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d037      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fd fe67 	bl	80010f8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <UART_WaitOnFlagUntilTimeout+0x30>
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e03a      	b.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d023      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b80      	cmp	r3, #128	@ 0x80
 8003452:	d020      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b40      	cmp	r3, #64	@ 0x40
 8003458:	d01d      	beq.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d116      	bne.n	8003496 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8e0 	bl	8003644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2208      	movs	r2, #8
 8003488:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d0b4      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b098      	sub	sp, #96	@ 0x60
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2222      	movs	r2, #34	@ 0x22
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	4a3e      	ldr	r2, [pc, #248]	@ (80035e8 <UART_Start_Receive_DMA+0x128>)
 80034ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	4a3d      	ldr	r2, [pc, #244]	@ (80035ec <UART_Start_Receive_DMA+0x12c>)
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	4a3c      	ldr	r2, [pc, #240]	@ (80035f0 <UART_Start_Receive_DMA+0x130>)
 80034fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	2200      	movs	r2, #0
 8003506:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003508:	f107 0308 	add.w	r3, r7, #8
 800350c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3304      	adds	r3, #4
 8003518:	4619      	mov	r1, r3
 800351a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	f7fd ffb6 	bl	8001490 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d019      	beq.n	8003576 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003558:	65bb      	str	r3, [r7, #88]	@ 0x58
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003562:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003564:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003568:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e5      	bne.n	8003542 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3314      	adds	r3, #20
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	657b      	str	r3, [r7, #84]	@ 0x54
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003596:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800359c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3314      	adds	r3, #20
 80035b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3314      	adds	r3, #20
 80035c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80035cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6a39      	ldr	r1, [r7, #32]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e5      	bne.n	80035aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3760      	adds	r7, #96	@ 0x60
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	08003211 	.word	0x08003211
 80035ec:	0800333d 	.word	0x0800333d
 80035f0:	08003379 	.word	0x08003379

080035f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	@ 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	e853 3f00 	ldrex	r3, [r3]
 800360a:	60bb      	str	r3, [r7, #8]
   return(result);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	61ba      	str	r2, [r7, #24]
 800361e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	6979      	ldr	r1, [r7, #20]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	613b      	str	r3, [r7, #16]
   return(result);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e5      	bne.n	80035fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003638:	bf00      	nop
 800363a:	3724      	adds	r7, #36	@ 0x24
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b095      	sub	sp, #84	@ 0x54
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800366c:	643a      	str	r2, [r7, #64]	@ 0x40
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003672:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e5      	bne.n	8003680 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d119      	bne.n	80036f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036dc:	61ba      	str	r2, [r7, #24]
 80036de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6979      	ldr	r1, [r7, #20]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036fe:	bf00      	nop
 8003700:	3754      	adds	r7, #84	@ 0x54
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003716:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fd5d 	bl	80031e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b21      	cmp	r3, #33	@ 0x21
 8003744:	d13e      	bne.n	80037c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374e:	d114      	bne.n	800377a <UART_Transmit_IT+0x48>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d110      	bne.n	800377a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800376c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]
 8003778:	e008      	b.n	800378c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	1c59      	adds	r1, r3, #1
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6211      	str	r1, [r2, #32]
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4619      	mov	r1, r3
 800379a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10f      	bne.n	80037c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fce2 	bl	80031bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b08c      	sub	sp, #48	@ 0x30
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b22      	cmp	r3, #34	@ 0x22
 8003814:	f040 80ae 	bne.w	8003974 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003820:	d117      	bne.n	8003852 <UART_Receive_IT+0x50>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d113      	bne.n	8003852 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003840:	b29a      	uxth	r2, r3
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	1c9a      	adds	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003850:	e026      	b.n	80038a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003864:	d007      	beq.n	8003876 <UART_Receive_IT+0x74>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <UART_Receive_IT+0x82>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e008      	b.n	8003896 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003890:	b2da      	uxtb	r2, r3
 8003892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003894:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4619      	mov	r1, r3
 80038ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d15d      	bne.n	8003970 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0220 	bic.w	r2, r2, #32
 80038c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d135      	bne.n	8003966 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	613b      	str	r3, [r7, #16]
   return(result);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003920:	623a      	str	r2, [r7, #32]
 8003922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	69f9      	ldr	r1, [r7, #28]
 8003926:	6a3a      	ldr	r2, [r7, #32]
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	61bb      	str	r3, [r7, #24]
   return(result);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e5      	bne.n	8003900 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b10      	cmp	r3, #16
 8003940:	d10a      	bne.n	8003958 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fc4a 	bl	80031f8 <HAL_UARTEx_RxEventCallback>
 8003964:	e002      	b.n	800396c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fc fe1a 	bl	80005a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e002      	b.n	8003976 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3730      	adds	r7, #48	@ 0x30
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b0c0      	sub	sp, #256	@ 0x100
 8003986:	af00      	add	r7, sp, #0
 8003988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399c:	68d9      	ldr	r1, [r3, #12]
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	ea40 0301 	orr.w	r3, r0, r1
 80039a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	431a      	orrs	r2, r3
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039d8:	f021 010c 	bic.w	r1, r1, #12
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039e6:	430b      	orrs	r3, r1
 80039e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	6999      	ldr	r1, [r3, #24]
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	ea40 0301 	orr.w	r3, r0, r1
 8003a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8003c4c <UART_SetConfig+0x2cc>)
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0xa0>
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003c50 <UART_SetConfig+0x2d0>)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d104      	bne.n	8003a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7fe fb58 	bl	80020d4 <HAL_RCC_GetPCLK2Freq>
 8003a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a28:	e003      	b.n	8003a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a2a:	f7fe fb3f 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3c:	f040 810c 	bne.w	8003c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	1891      	adds	r1, r2, r2
 8003a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a62:	4621      	mov	r1, r4
 8003a64:	eb12 0801 	adds.w	r8, r2, r1
 8003a68:	4629      	mov	r1, r5
 8003a6a:	eb43 0901 	adc.w	r9, r3, r1
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a82:	4690      	mov	r8, r2
 8003a84:	4699      	mov	r9, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	eb18 0303 	adds.w	r3, r8, r3
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a90:	462b      	mov	r3, r5
 8003a92:	eb49 0303 	adc.w	r3, r9, r3
 8003a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003aae:	460b      	mov	r3, r1
 8003ab0:	18db      	adds	r3, r3, r3
 8003ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	eb42 0303 	adc.w	r3, r2, r3
 8003aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ac4:	f7fc fbf4 	bl	80002b0 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003ace:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	011c      	lsls	r4, r3, #4
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003af0:	415b      	adcs	r3, r3
 8003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003af8:	4641      	mov	r1, r8
 8003afa:	eb12 0a01 	adds.w	sl, r2, r1
 8003afe:	4649      	mov	r1, r9
 8003b00:	eb43 0b01 	adc.w	fp, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b18:	4692      	mov	sl, r2
 8003b1a:	469b      	mov	fp, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b26:	464b      	mov	r3, r9
 8003b28:	eb4b 0303 	adc.w	r3, fp, r3
 8003b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b44:	460b      	mov	r3, r1
 8003b46:	18db      	adds	r3, r3, r3
 8003b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b5a:	f7fc fba9 	bl	80002b0 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003b66:	fba3 2301 	umull	r2, r3, r3, r1
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2264      	movs	r2, #100	@ 0x64
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	1acb      	subs	r3, r1, r3
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b7a:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b88:	441c      	add	r4, r3
 8003b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bac:	4641      	mov	r1, r8
 8003bae:	1851      	adds	r1, r2, r1
 8003bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	414b      	adcs	r3, r1
 8003bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	00cb      	lsls	r3, r1, #3
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bce:	4651      	mov	r1, sl
 8003bd0:	00ca      	lsls	r2, r1, #3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4642      	mov	r2, r8
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003be0:	464b      	mov	r3, r9
 8003be2:	460a      	mov	r2, r1
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c00:	460b      	mov	r3, r1
 8003c02:	18db      	adds	r3, r3, r3
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c06:	4613      	mov	r3, r2
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c16:	f7fc fb4b 	bl	80002b0 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	@ 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3332      	adds	r3, #50	@ 0x32
 8003c32:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <UART_SetConfig+0x2d4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4422      	add	r2, r4
 8003c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c48:	e106      	b.n	8003e58 <UART_SetConfig+0x4d8>
 8003c4a:	bf00      	nop
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40011400 	.word	0x40011400
 8003c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	1891      	adds	r1, r2, r2
 8003c70:	6239      	str	r1, [r7, #32]
 8003c72:	415b      	adcs	r3, r3
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	1854      	adds	r4, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb43 0501 	adc.w	r5, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	00eb      	lsls	r3, r5, #3
 8003c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c92:	00e2      	lsls	r2, r4, #3
 8003c94:	4614      	mov	r4, r2
 8003c96:	461d      	mov	r5, r3
 8003c98:	4643      	mov	r3, r8
 8003c9a:	18e3      	adds	r3, r4, r3
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	eb45 0303 	adc.w	r3, r5, r3
 8003ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	008a      	lsls	r2, r1, #2
 8003cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cd8:	f7fc faea 	bl	80002b0 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b60      	ldr	r3, [pc, #384]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011c      	lsls	r4, r3, #4
 8003cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	61b9      	str	r1, [r7, #24]
 8003d04:	415b      	adcs	r3, r3
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	1851      	adds	r1, r2, r1
 8003d10:	6139      	str	r1, [r7, #16]
 8003d12:	4649      	mov	r1, r9
 8003d14:	414b      	adcs	r3, r1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d24:	4659      	mov	r1, fp
 8003d26:	00cb      	lsls	r3, r1, #3
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2e:	4651      	mov	r1, sl
 8003d30:	00ca      	lsls	r2, r1, #3
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	4642      	mov	r2, r8
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d40:	464b      	mov	r3, r9
 8003d42:	460a      	mov	r2, r1
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d64:	4649      	mov	r1, r9
 8003d66:	008b      	lsls	r3, r1, #2
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6e:	4641      	mov	r1, r8
 8003d70:	008a      	lsls	r2, r1, #2
 8003d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d76:	f7fc fa9b 	bl	80002b0 <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4b38      	ldr	r3, [pc, #224]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003d82:	fba3 2301 	umull	r2, r3, r3, r1
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2264      	movs	r2, #100	@ 0x64
 8003d8a:	fb02 f303 	mul.w	r3, r2, r3
 8003d8e:	1acb      	subs	r3, r1, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	@ 0x32
 8003d94:	4a33      	ldr	r2, [pc, #204]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da0:	441c      	add	r4, r3
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	415b      	adcs	r3, r3
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	1851      	adds	r1, r2, r1
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	414b      	adcs	r3, r1
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd8:	4659      	mov	r1, fp
 8003dda:	00cb      	lsls	r3, r1, #3
 8003ddc:	4651      	mov	r1, sl
 8003dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de2:	4651      	mov	r1, sl
 8003de4:	00ca      	lsls	r2, r1, #3
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	4642      	mov	r2, r8
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003df2:	464b      	mov	r3, r9
 8003df4:	460a      	mov	r2, r1
 8003df6:	eb42 0303 	adc.w	r3, r2, r3
 8003dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e14:	4649      	mov	r1, r9
 8003e16:	008b      	lsls	r3, r1, #2
 8003e18:	4641      	mov	r1, r8
 8003e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1e:	4641      	mov	r1, r8
 8003e20:	008a      	lsls	r2, r1, #2
 8003e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e26:	f7fc fa43 	bl	80002b0 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	@ 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	3332      	adds	r3, #50	@ 0x32
 8003e42:	4a08      	ldr	r2, [pc, #32]	@ (8003e64 <UART_SetConfig+0x4e4>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4422      	add	r2, r4
 8003e56:	609a      	str	r2, [r3, #8]
}
 8003e58:	bf00      	nop
 8003e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e64:	51eb851f 	.word	0x51eb851f

08003e68 <std>:
 8003e68:	2300      	movs	r3, #0
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8003e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e76:	6083      	str	r3, [r0, #8]
 8003e78:	8181      	strh	r1, [r0, #12]
 8003e7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e7c:	81c2      	strh	r2, [r0, #14]
 8003e7e:	6183      	str	r3, [r0, #24]
 8003e80:	4619      	mov	r1, r3
 8003e82:	2208      	movs	r2, #8
 8003e84:	305c      	adds	r0, #92	@ 0x5c
 8003e86:	f000 f906 	bl	8004096 <memset>
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <std+0x58>)
 8003e8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <std+0x5c>)
 8003e90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <std+0x60>)
 8003e94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <std+0x64>)
 8003e98:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <std+0x68>)
 8003e9c:	6224      	str	r4, [r4, #32]
 8003e9e:	429c      	cmp	r4, r3
 8003ea0:	d006      	beq.n	8003eb0 <std+0x48>
 8003ea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ea6:	4294      	cmp	r4, r2
 8003ea8:	d002      	beq.n	8003eb0 <std+0x48>
 8003eaa:	33d0      	adds	r3, #208	@ 0xd0
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d105      	bne.n	8003ebc <std+0x54>
 8003eb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb8:	f000 b966 	b.w	8004188 <__retarget_lock_init_recursive>
 8003ebc:	bd10      	pop	{r4, pc}
 8003ebe:	bf00      	nop
 8003ec0:	08004011 	.word	0x08004011
 8003ec4:	08004033 	.word	0x08004033
 8003ec8:	0800406b 	.word	0x0800406b
 8003ecc:	0800408f 	.word	0x0800408f
 8003ed0:	20000218 	.word	0x20000218

08003ed4 <stdio_exit_handler>:
 8003ed4:	4a02      	ldr	r2, [pc, #8]	@ (8003ee0 <stdio_exit_handler+0xc>)
 8003ed6:	4903      	ldr	r1, [pc, #12]	@ (8003ee4 <stdio_exit_handler+0x10>)
 8003ed8:	4803      	ldr	r0, [pc, #12]	@ (8003ee8 <stdio_exit_handler+0x14>)
 8003eda:	f000 b869 	b.w	8003fb0 <_fwalk_sglue>
 8003ede:	bf00      	nop
 8003ee0:	2000000c 	.word	0x2000000c
 8003ee4:	08004a29 	.word	0x08004a29
 8003ee8:	2000001c 	.word	0x2000001c

08003eec <cleanup_stdio>:
 8003eec:	6841      	ldr	r1, [r0, #4]
 8003eee:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <cleanup_stdio+0x34>)
 8003ef0:	4299      	cmp	r1, r3
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	d001      	beq.n	8003efc <cleanup_stdio+0x10>
 8003ef8:	f000 fd96 	bl	8004a28 <_fflush_r>
 8003efc:	68a1      	ldr	r1, [r4, #8]
 8003efe:	4b09      	ldr	r3, [pc, #36]	@ (8003f24 <cleanup_stdio+0x38>)
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d002      	beq.n	8003f0a <cleanup_stdio+0x1e>
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 fd8f 	bl	8004a28 <_fflush_r>
 8003f0a:	68e1      	ldr	r1, [r4, #12]
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <cleanup_stdio+0x3c>)
 8003f0e:	4299      	cmp	r1, r3
 8003f10:	d004      	beq.n	8003f1c <cleanup_stdio+0x30>
 8003f12:	4620      	mov	r0, r4
 8003f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f18:	f000 bd86 	b.w	8004a28 <_fflush_r>
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000218 	.word	0x20000218
 8003f24:	20000280 	.word	0x20000280
 8003f28:	200002e8 	.word	0x200002e8

08003f2c <global_stdio_init.part.0>:
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f5c <global_stdio_init.part.0+0x30>)
 8003f30:	4c0b      	ldr	r4, [pc, #44]	@ (8003f60 <global_stdio_init.part.0+0x34>)
 8003f32:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <global_stdio_init.part.0+0x38>)
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	4620      	mov	r0, r4
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	f7ff ff94 	bl	8003e68 <std>
 8003f40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f44:	2201      	movs	r2, #1
 8003f46:	2109      	movs	r1, #9
 8003f48:	f7ff ff8e 	bl	8003e68 <std>
 8003f4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f50:	2202      	movs	r2, #2
 8003f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f56:	2112      	movs	r1, #18
 8003f58:	f7ff bf86 	b.w	8003e68 <std>
 8003f5c:	20000350 	.word	0x20000350
 8003f60:	20000218 	.word	0x20000218
 8003f64:	08003ed5 	.word	0x08003ed5

08003f68 <__sfp_lock_acquire>:
 8003f68:	4801      	ldr	r0, [pc, #4]	@ (8003f70 <__sfp_lock_acquire+0x8>)
 8003f6a:	f000 b90e 	b.w	800418a <__retarget_lock_acquire_recursive>
 8003f6e:	bf00      	nop
 8003f70:	20000359 	.word	0x20000359

08003f74 <__sfp_lock_release>:
 8003f74:	4801      	ldr	r0, [pc, #4]	@ (8003f7c <__sfp_lock_release+0x8>)
 8003f76:	f000 b909 	b.w	800418c <__retarget_lock_release_recursive>
 8003f7a:	bf00      	nop
 8003f7c:	20000359 	.word	0x20000359

08003f80 <__sinit>:
 8003f80:	b510      	push	{r4, lr}
 8003f82:	4604      	mov	r4, r0
 8003f84:	f7ff fff0 	bl	8003f68 <__sfp_lock_acquire>
 8003f88:	6a23      	ldr	r3, [r4, #32]
 8003f8a:	b11b      	cbz	r3, 8003f94 <__sinit+0x14>
 8003f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f90:	f7ff bff0 	b.w	8003f74 <__sfp_lock_release>
 8003f94:	4b04      	ldr	r3, [pc, #16]	@ (8003fa8 <__sinit+0x28>)
 8003f96:	6223      	str	r3, [r4, #32]
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <__sinit+0x2c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f5      	bne.n	8003f8c <__sinit+0xc>
 8003fa0:	f7ff ffc4 	bl	8003f2c <global_stdio_init.part.0>
 8003fa4:	e7f2      	b.n	8003f8c <__sinit+0xc>
 8003fa6:	bf00      	nop
 8003fa8:	08003eed 	.word	0x08003eed
 8003fac:	20000350 	.word	0x20000350

08003fb0 <_fwalk_sglue>:
 8003fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	4688      	mov	r8, r1
 8003fb8:	4614      	mov	r4, r2
 8003fba:	2600      	movs	r6, #0
 8003fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8003fc4:	d505      	bpl.n	8003fd2 <_fwalk_sglue+0x22>
 8003fc6:	6824      	ldr	r4, [r4, #0]
 8003fc8:	2c00      	cmp	r4, #0
 8003fca:	d1f7      	bne.n	8003fbc <_fwalk_sglue+0xc>
 8003fcc:	4630      	mov	r0, r6
 8003fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd2:	89ab      	ldrh	r3, [r5, #12]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d907      	bls.n	8003fe8 <_fwalk_sglue+0x38>
 8003fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	d003      	beq.n	8003fe8 <_fwalk_sglue+0x38>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	47c0      	blx	r8
 8003fe6:	4306      	orrs	r6, r0
 8003fe8:	3568      	adds	r5, #104	@ 0x68
 8003fea:	e7e9      	b.n	8003fc0 <_fwalk_sglue+0x10>

08003fec <iprintf>:
 8003fec:	b40f      	push	{r0, r1, r2, r3}
 8003fee:	b507      	push	{r0, r1, r2, lr}
 8003ff0:	4906      	ldr	r1, [pc, #24]	@ (800400c <iprintf+0x20>)
 8003ff2:	ab04      	add	r3, sp, #16
 8003ff4:	6808      	ldr	r0, [r1, #0]
 8003ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ffa:	6881      	ldr	r1, [r0, #8]
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	f000 f9e9 	bl	80043d4 <_vfiprintf_r>
 8004002:	b003      	add	sp, #12
 8004004:	f85d eb04 	ldr.w	lr, [sp], #4
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr
 800400c:	20000018 	.word	0x20000018

08004010 <__sread>:
 8004010:	b510      	push	{r4, lr}
 8004012:	460c      	mov	r4, r1
 8004014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004018:	f000 f868 	bl	80040ec <_read_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	bfab      	itete	ge
 8004020:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004022:	89a3      	ldrhlt	r3, [r4, #12]
 8004024:	181b      	addge	r3, r3, r0
 8004026:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800402a:	bfac      	ite	ge
 800402c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800402e:	81a3      	strhlt	r3, [r4, #12]
 8004030:	bd10      	pop	{r4, pc}

08004032 <__swrite>:
 8004032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004036:	461f      	mov	r7, r3
 8004038:	898b      	ldrh	r3, [r1, #12]
 800403a:	05db      	lsls	r3, r3, #23
 800403c:	4605      	mov	r5, r0
 800403e:	460c      	mov	r4, r1
 8004040:	4616      	mov	r6, r2
 8004042:	d505      	bpl.n	8004050 <__swrite+0x1e>
 8004044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004048:	2302      	movs	r3, #2
 800404a:	2200      	movs	r2, #0
 800404c:	f000 f83c 	bl	80040c8 <_lseek_r>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004056:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800405a:	81a3      	strh	r3, [r4, #12]
 800405c:	4632      	mov	r2, r6
 800405e:	463b      	mov	r3, r7
 8004060:	4628      	mov	r0, r5
 8004062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	f000 b853 	b.w	8004110 <_write_r>

0800406a <__sseek>:
 800406a:	b510      	push	{r4, lr}
 800406c:	460c      	mov	r4, r1
 800406e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004072:	f000 f829 	bl	80040c8 <_lseek_r>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	bf15      	itete	ne
 800407c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800407e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004082:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004086:	81a3      	strheq	r3, [r4, #12]
 8004088:	bf18      	it	ne
 800408a:	81a3      	strhne	r3, [r4, #12]
 800408c:	bd10      	pop	{r4, pc}

0800408e <__sclose>:
 800408e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004092:	f000 b809 	b.w	80040a8 <_close_r>

08004096 <memset>:
 8004096:	4402      	add	r2, r0
 8004098:	4603      	mov	r3, r0
 800409a:	4293      	cmp	r3, r2
 800409c:	d100      	bne.n	80040a0 <memset+0xa>
 800409e:	4770      	bx	lr
 80040a0:	f803 1b01 	strb.w	r1, [r3], #1
 80040a4:	e7f9      	b.n	800409a <memset+0x4>
	...

080040a8 <_close_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4d06      	ldr	r5, [pc, #24]	@ (80040c4 <_close_r+0x1c>)
 80040ac:	2300      	movs	r3, #0
 80040ae:	4604      	mov	r4, r0
 80040b0:	4608      	mov	r0, r1
 80040b2:	602b      	str	r3, [r5, #0]
 80040b4:	f7fc ff13 	bl	8000ede <_close>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_close_r+0x1a>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_close_r+0x1a>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	20000354 	.word	0x20000354

080040c8 <_lseek_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4d07      	ldr	r5, [pc, #28]	@ (80040e8 <_lseek_r+0x20>)
 80040cc:	4604      	mov	r4, r0
 80040ce:	4608      	mov	r0, r1
 80040d0:	4611      	mov	r1, r2
 80040d2:	2200      	movs	r2, #0
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f7fc ff28 	bl	8000f2c <_lseek>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_lseek_r+0x1e>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_lseek_r+0x1e>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	20000354 	.word	0x20000354

080040ec <_read_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d07      	ldr	r5, [pc, #28]	@ (800410c <_read_r+0x20>)
 80040f0:	4604      	mov	r4, r0
 80040f2:	4608      	mov	r0, r1
 80040f4:	4611      	mov	r1, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7fc fed2 	bl	8000ea4 <_read>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_read_r+0x1e>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_read_r+0x1e>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20000354 	.word	0x20000354

08004110 <_write_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4d07      	ldr	r5, [pc, #28]	@ (8004130 <_write_r+0x20>)
 8004114:	4604      	mov	r4, r0
 8004116:	4608      	mov	r0, r1
 8004118:	4611      	mov	r1, r2
 800411a:	2200      	movs	r2, #0
 800411c:	602a      	str	r2, [r5, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	f7fc fd2a 	bl	8000b78 <_write>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_write_r+0x1e>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	b103      	cbz	r3, 800412e <_write_r+0x1e>
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20000354 	.word	0x20000354

08004134 <__errno>:
 8004134:	4b01      	ldr	r3, [pc, #4]	@ (800413c <__errno+0x8>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000018 	.word	0x20000018

08004140 <__libc_init_array>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4d0d      	ldr	r5, [pc, #52]	@ (8004178 <__libc_init_array+0x38>)
 8004144:	4c0d      	ldr	r4, [pc, #52]	@ (800417c <__libc_init_array+0x3c>)
 8004146:	1b64      	subs	r4, r4, r5
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	2600      	movs	r6, #0
 800414c:	42a6      	cmp	r6, r4
 800414e:	d109      	bne.n	8004164 <__libc_init_array+0x24>
 8004150:	4d0b      	ldr	r5, [pc, #44]	@ (8004180 <__libc_init_array+0x40>)
 8004152:	4c0c      	ldr	r4, [pc, #48]	@ (8004184 <__libc_init_array+0x44>)
 8004154:	f000 fdb8 	bl	8004cc8 <_init>
 8004158:	1b64      	subs	r4, r4, r5
 800415a:	10a4      	asrs	r4, r4, #2
 800415c:	2600      	movs	r6, #0
 800415e:	42a6      	cmp	r6, r4
 8004160:	d105      	bne.n	800416e <__libc_init_array+0x2e>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	f855 3b04 	ldr.w	r3, [r5], #4
 8004168:	4798      	blx	r3
 800416a:	3601      	adds	r6, #1
 800416c:	e7ee      	b.n	800414c <__libc_init_array+0xc>
 800416e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004172:	4798      	blx	r3
 8004174:	3601      	adds	r6, #1
 8004176:	e7f2      	b.n	800415e <__libc_init_array+0x1e>
 8004178:	08004d74 	.word	0x08004d74
 800417c:	08004d74 	.word	0x08004d74
 8004180:	08004d74 	.word	0x08004d74
 8004184:	08004d78 	.word	0x08004d78

08004188 <__retarget_lock_init_recursive>:
 8004188:	4770      	bx	lr

0800418a <__retarget_lock_acquire_recursive>:
 800418a:	4770      	bx	lr

0800418c <__retarget_lock_release_recursive>:
 800418c:	4770      	bx	lr
	...

08004190 <_free_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	2900      	cmp	r1, #0
 8004196:	d041      	beq.n	800421c <_free_r+0x8c>
 8004198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800419c:	1f0c      	subs	r4, r1, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	18e4      	addlt	r4, r4, r3
 80041a4:	f000 f8e0 	bl	8004368 <__malloc_lock>
 80041a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004220 <_free_r+0x90>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	b933      	cbnz	r3, 80041bc <_free_r+0x2c>
 80041ae:	6063      	str	r3, [r4, #4]
 80041b0:	6014      	str	r4, [r2, #0]
 80041b2:	4628      	mov	r0, r5
 80041b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b8:	f000 b8dc 	b.w	8004374 <__malloc_unlock>
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d908      	bls.n	80041d2 <_free_r+0x42>
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	1821      	adds	r1, r4, r0
 80041c4:	428b      	cmp	r3, r1
 80041c6:	bf01      	itttt	eq
 80041c8:	6819      	ldreq	r1, [r3, #0]
 80041ca:	685b      	ldreq	r3, [r3, #4]
 80041cc:	1809      	addeq	r1, r1, r0
 80041ce:	6021      	streq	r1, [r4, #0]
 80041d0:	e7ed      	b.n	80041ae <_free_r+0x1e>
 80041d2:	461a      	mov	r2, r3
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	b10b      	cbz	r3, 80041dc <_free_r+0x4c>
 80041d8:	42a3      	cmp	r3, r4
 80041da:	d9fa      	bls.n	80041d2 <_free_r+0x42>
 80041dc:	6811      	ldr	r1, [r2, #0]
 80041de:	1850      	adds	r0, r2, r1
 80041e0:	42a0      	cmp	r0, r4
 80041e2:	d10b      	bne.n	80041fc <_free_r+0x6c>
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	4401      	add	r1, r0
 80041e8:	1850      	adds	r0, r2, r1
 80041ea:	4283      	cmp	r3, r0
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	d1e0      	bne.n	80041b2 <_free_r+0x22>
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	6053      	str	r3, [r2, #4]
 80041f6:	4408      	add	r0, r1
 80041f8:	6010      	str	r0, [r2, #0]
 80041fa:	e7da      	b.n	80041b2 <_free_r+0x22>
 80041fc:	d902      	bls.n	8004204 <_free_r+0x74>
 80041fe:	230c      	movs	r3, #12
 8004200:	602b      	str	r3, [r5, #0]
 8004202:	e7d6      	b.n	80041b2 <_free_r+0x22>
 8004204:	6820      	ldr	r0, [r4, #0]
 8004206:	1821      	adds	r1, r4, r0
 8004208:	428b      	cmp	r3, r1
 800420a:	bf04      	itt	eq
 800420c:	6819      	ldreq	r1, [r3, #0]
 800420e:	685b      	ldreq	r3, [r3, #4]
 8004210:	6063      	str	r3, [r4, #4]
 8004212:	bf04      	itt	eq
 8004214:	1809      	addeq	r1, r1, r0
 8004216:	6021      	streq	r1, [r4, #0]
 8004218:	6054      	str	r4, [r2, #4]
 800421a:	e7ca      	b.n	80041b2 <_free_r+0x22>
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	20000360 	.word	0x20000360

08004224 <sbrk_aligned>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0f      	ldr	r6, [pc, #60]	@ (8004264 <sbrk_aligned+0x40>)
 8004228:	460c      	mov	r4, r1
 800422a:	6831      	ldr	r1, [r6, #0]
 800422c:	4605      	mov	r5, r0
 800422e:	b911      	cbnz	r1, 8004236 <sbrk_aligned+0x12>
 8004230:	f000 fcb6 	bl	8004ba0 <_sbrk_r>
 8004234:	6030      	str	r0, [r6, #0]
 8004236:	4621      	mov	r1, r4
 8004238:	4628      	mov	r0, r5
 800423a:	f000 fcb1 	bl	8004ba0 <_sbrk_r>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d103      	bne.n	800424a <sbrk_aligned+0x26>
 8004242:	f04f 34ff 	mov.w	r4, #4294967295
 8004246:	4620      	mov	r0, r4
 8004248:	bd70      	pop	{r4, r5, r6, pc}
 800424a:	1cc4      	adds	r4, r0, #3
 800424c:	f024 0403 	bic.w	r4, r4, #3
 8004250:	42a0      	cmp	r0, r4
 8004252:	d0f8      	beq.n	8004246 <sbrk_aligned+0x22>
 8004254:	1a21      	subs	r1, r4, r0
 8004256:	4628      	mov	r0, r5
 8004258:	f000 fca2 	bl	8004ba0 <_sbrk_r>
 800425c:	3001      	adds	r0, #1
 800425e:	d1f2      	bne.n	8004246 <sbrk_aligned+0x22>
 8004260:	e7ef      	b.n	8004242 <sbrk_aligned+0x1e>
 8004262:	bf00      	nop
 8004264:	2000035c 	.word	0x2000035c

08004268 <_malloc_r>:
 8004268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800426c:	1ccd      	adds	r5, r1, #3
 800426e:	f025 0503 	bic.w	r5, r5, #3
 8004272:	3508      	adds	r5, #8
 8004274:	2d0c      	cmp	r5, #12
 8004276:	bf38      	it	cc
 8004278:	250c      	movcc	r5, #12
 800427a:	2d00      	cmp	r5, #0
 800427c:	4606      	mov	r6, r0
 800427e:	db01      	blt.n	8004284 <_malloc_r+0x1c>
 8004280:	42a9      	cmp	r1, r5
 8004282:	d904      	bls.n	800428e <_malloc_r+0x26>
 8004284:	230c      	movs	r3, #12
 8004286:	6033      	str	r3, [r6, #0]
 8004288:	2000      	movs	r0, #0
 800428a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800428e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004364 <_malloc_r+0xfc>
 8004292:	f000 f869 	bl	8004368 <__malloc_lock>
 8004296:	f8d8 3000 	ldr.w	r3, [r8]
 800429a:	461c      	mov	r4, r3
 800429c:	bb44      	cbnz	r4, 80042f0 <_malloc_r+0x88>
 800429e:	4629      	mov	r1, r5
 80042a0:	4630      	mov	r0, r6
 80042a2:	f7ff ffbf 	bl	8004224 <sbrk_aligned>
 80042a6:	1c43      	adds	r3, r0, #1
 80042a8:	4604      	mov	r4, r0
 80042aa:	d158      	bne.n	800435e <_malloc_r+0xf6>
 80042ac:	f8d8 4000 	ldr.w	r4, [r8]
 80042b0:	4627      	mov	r7, r4
 80042b2:	2f00      	cmp	r7, #0
 80042b4:	d143      	bne.n	800433e <_malloc_r+0xd6>
 80042b6:	2c00      	cmp	r4, #0
 80042b8:	d04b      	beq.n	8004352 <_malloc_r+0xea>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4639      	mov	r1, r7
 80042be:	4630      	mov	r0, r6
 80042c0:	eb04 0903 	add.w	r9, r4, r3
 80042c4:	f000 fc6c 	bl	8004ba0 <_sbrk_r>
 80042c8:	4581      	cmp	r9, r0
 80042ca:	d142      	bne.n	8004352 <_malloc_r+0xea>
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	1a6d      	subs	r5, r5, r1
 80042d0:	4629      	mov	r1, r5
 80042d2:	4630      	mov	r0, r6
 80042d4:	f7ff ffa6 	bl	8004224 <sbrk_aligned>
 80042d8:	3001      	adds	r0, #1
 80042da:	d03a      	beq.n	8004352 <_malloc_r+0xea>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	442b      	add	r3, r5
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	f8d8 3000 	ldr.w	r3, [r8]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	bb62      	cbnz	r2, 8004344 <_malloc_r+0xdc>
 80042ea:	f8c8 7000 	str.w	r7, [r8]
 80042ee:	e00f      	b.n	8004310 <_malloc_r+0xa8>
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	1b52      	subs	r2, r2, r5
 80042f4:	d420      	bmi.n	8004338 <_malloc_r+0xd0>
 80042f6:	2a0b      	cmp	r2, #11
 80042f8:	d917      	bls.n	800432a <_malloc_r+0xc2>
 80042fa:	1961      	adds	r1, r4, r5
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	6025      	str	r5, [r4, #0]
 8004300:	bf18      	it	ne
 8004302:	6059      	strne	r1, [r3, #4]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	bf08      	it	eq
 8004308:	f8c8 1000 	streq.w	r1, [r8]
 800430c:	5162      	str	r2, [r4, r5]
 800430e:	604b      	str	r3, [r1, #4]
 8004310:	4630      	mov	r0, r6
 8004312:	f000 f82f 	bl	8004374 <__malloc_unlock>
 8004316:	f104 000b 	add.w	r0, r4, #11
 800431a:	1d23      	adds	r3, r4, #4
 800431c:	f020 0007 	bic.w	r0, r0, #7
 8004320:	1ac2      	subs	r2, r0, r3
 8004322:	bf1c      	itt	ne
 8004324:	1a1b      	subne	r3, r3, r0
 8004326:	50a3      	strne	r3, [r4, r2]
 8004328:	e7af      	b.n	800428a <_malloc_r+0x22>
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	bf0c      	ite	eq
 8004330:	f8c8 2000 	streq.w	r2, [r8]
 8004334:	605a      	strne	r2, [r3, #4]
 8004336:	e7eb      	b.n	8004310 <_malloc_r+0xa8>
 8004338:	4623      	mov	r3, r4
 800433a:	6864      	ldr	r4, [r4, #4]
 800433c:	e7ae      	b.n	800429c <_malloc_r+0x34>
 800433e:	463c      	mov	r4, r7
 8004340:	687f      	ldr	r7, [r7, #4]
 8004342:	e7b6      	b.n	80042b2 <_malloc_r+0x4a>
 8004344:	461a      	mov	r2, r3
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	42a3      	cmp	r3, r4
 800434a:	d1fb      	bne.n	8004344 <_malloc_r+0xdc>
 800434c:	2300      	movs	r3, #0
 800434e:	6053      	str	r3, [r2, #4]
 8004350:	e7de      	b.n	8004310 <_malloc_r+0xa8>
 8004352:	230c      	movs	r3, #12
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	4630      	mov	r0, r6
 8004358:	f000 f80c 	bl	8004374 <__malloc_unlock>
 800435c:	e794      	b.n	8004288 <_malloc_r+0x20>
 800435e:	6005      	str	r5, [r0, #0]
 8004360:	e7d6      	b.n	8004310 <_malloc_r+0xa8>
 8004362:	bf00      	nop
 8004364:	20000360 	.word	0x20000360

08004368 <__malloc_lock>:
 8004368:	4801      	ldr	r0, [pc, #4]	@ (8004370 <__malloc_lock+0x8>)
 800436a:	f7ff bf0e 	b.w	800418a <__retarget_lock_acquire_recursive>
 800436e:	bf00      	nop
 8004370:	20000358 	.word	0x20000358

08004374 <__malloc_unlock>:
 8004374:	4801      	ldr	r0, [pc, #4]	@ (800437c <__malloc_unlock+0x8>)
 8004376:	f7ff bf09 	b.w	800418c <__retarget_lock_release_recursive>
 800437a:	bf00      	nop
 800437c:	20000358 	.word	0x20000358

08004380 <__sfputc_r>:
 8004380:	6893      	ldr	r3, [r2, #8]
 8004382:	3b01      	subs	r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	b410      	push	{r4}
 8004388:	6093      	str	r3, [r2, #8]
 800438a:	da08      	bge.n	800439e <__sfputc_r+0x1e>
 800438c:	6994      	ldr	r4, [r2, #24]
 800438e:	42a3      	cmp	r3, r4
 8004390:	db01      	blt.n	8004396 <__sfputc_r+0x16>
 8004392:	290a      	cmp	r1, #10
 8004394:	d103      	bne.n	800439e <__sfputc_r+0x1e>
 8004396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800439a:	f000 bb6d 	b.w	8004a78 <__swbuf_r>
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	1c58      	adds	r0, r3, #1
 80043a2:	6010      	str	r0, [r2, #0]
 80043a4:	7019      	strb	r1, [r3, #0]
 80043a6:	4608      	mov	r0, r1
 80043a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <__sfputs_r>:
 80043ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	18d5      	adds	r5, r2, r3
 80043b8:	42ac      	cmp	r4, r5
 80043ba:	d101      	bne.n	80043c0 <__sfputs_r+0x12>
 80043bc:	2000      	movs	r0, #0
 80043be:	e007      	b.n	80043d0 <__sfputs_r+0x22>
 80043c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c4:	463a      	mov	r2, r7
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7ff ffda 	bl	8004380 <__sfputc_r>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d1f3      	bne.n	80043b8 <__sfputs_r+0xa>
 80043d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043d4 <_vfiprintf_r>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	460d      	mov	r5, r1
 80043da:	b09d      	sub	sp, #116	@ 0x74
 80043dc:	4614      	mov	r4, r2
 80043de:	4698      	mov	r8, r3
 80043e0:	4606      	mov	r6, r0
 80043e2:	b118      	cbz	r0, 80043ec <_vfiprintf_r+0x18>
 80043e4:	6a03      	ldr	r3, [r0, #32]
 80043e6:	b90b      	cbnz	r3, 80043ec <_vfiprintf_r+0x18>
 80043e8:	f7ff fdca 	bl	8003f80 <__sinit>
 80043ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043ee:	07d9      	lsls	r1, r3, #31
 80043f0:	d405      	bmi.n	80043fe <_vfiprintf_r+0x2a>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	059a      	lsls	r2, r3, #22
 80043f6:	d402      	bmi.n	80043fe <_vfiprintf_r+0x2a>
 80043f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043fa:	f7ff fec6 	bl	800418a <__retarget_lock_acquire_recursive>
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	071b      	lsls	r3, r3, #28
 8004402:	d501      	bpl.n	8004408 <_vfiprintf_r+0x34>
 8004404:	692b      	ldr	r3, [r5, #16]
 8004406:	b99b      	cbnz	r3, 8004430 <_vfiprintf_r+0x5c>
 8004408:	4629      	mov	r1, r5
 800440a:	4630      	mov	r0, r6
 800440c:	f000 fb72 	bl	8004af4 <__swsetup_r>
 8004410:	b170      	cbz	r0, 8004430 <_vfiprintf_r+0x5c>
 8004412:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004414:	07dc      	lsls	r4, r3, #31
 8004416:	d504      	bpl.n	8004422 <_vfiprintf_r+0x4e>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	b01d      	add	sp, #116	@ 0x74
 800441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004422:	89ab      	ldrh	r3, [r5, #12]
 8004424:	0598      	lsls	r0, r3, #22
 8004426:	d4f7      	bmi.n	8004418 <_vfiprintf_r+0x44>
 8004428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800442a:	f7ff feaf 	bl	800418c <__retarget_lock_release_recursive>
 800442e:	e7f3      	b.n	8004418 <_vfiprintf_r+0x44>
 8004430:	2300      	movs	r3, #0
 8004432:	9309      	str	r3, [sp, #36]	@ 0x24
 8004434:	2320      	movs	r3, #32
 8004436:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800443a:	f8cd 800c 	str.w	r8, [sp, #12]
 800443e:	2330      	movs	r3, #48	@ 0x30
 8004440:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045f0 <_vfiprintf_r+0x21c>
 8004444:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004448:	f04f 0901 	mov.w	r9, #1
 800444c:	4623      	mov	r3, r4
 800444e:	469a      	mov	sl, r3
 8004450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004454:	b10a      	cbz	r2, 800445a <_vfiprintf_r+0x86>
 8004456:	2a25      	cmp	r2, #37	@ 0x25
 8004458:	d1f9      	bne.n	800444e <_vfiprintf_r+0x7a>
 800445a:	ebba 0b04 	subs.w	fp, sl, r4
 800445e:	d00b      	beq.n	8004478 <_vfiprintf_r+0xa4>
 8004460:	465b      	mov	r3, fp
 8004462:	4622      	mov	r2, r4
 8004464:	4629      	mov	r1, r5
 8004466:	4630      	mov	r0, r6
 8004468:	f7ff ffa1 	bl	80043ae <__sfputs_r>
 800446c:	3001      	adds	r0, #1
 800446e:	f000 80a7 	beq.w	80045c0 <_vfiprintf_r+0x1ec>
 8004472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004474:	445a      	add	r2, fp
 8004476:	9209      	str	r2, [sp, #36]	@ 0x24
 8004478:	f89a 3000 	ldrb.w	r3, [sl]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 809f 	beq.w	80045c0 <_vfiprintf_r+0x1ec>
 8004482:	2300      	movs	r3, #0
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800448c:	f10a 0a01 	add.w	sl, sl, #1
 8004490:	9304      	str	r3, [sp, #16]
 8004492:	9307      	str	r3, [sp, #28]
 8004494:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004498:	931a      	str	r3, [sp, #104]	@ 0x68
 800449a:	4654      	mov	r4, sl
 800449c:	2205      	movs	r2, #5
 800449e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a2:	4853      	ldr	r0, [pc, #332]	@ (80045f0 <_vfiprintf_r+0x21c>)
 80044a4:	f7fb feb4 	bl	8000210 <memchr>
 80044a8:	9a04      	ldr	r2, [sp, #16]
 80044aa:	b9d8      	cbnz	r0, 80044e4 <_vfiprintf_r+0x110>
 80044ac:	06d1      	lsls	r1, r2, #27
 80044ae:	bf44      	itt	mi
 80044b0:	2320      	movmi	r3, #32
 80044b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044b6:	0713      	lsls	r3, r2, #28
 80044b8:	bf44      	itt	mi
 80044ba:	232b      	movmi	r3, #43	@ 0x2b
 80044bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c0:	f89a 3000 	ldrb.w	r3, [sl]
 80044c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044c6:	d015      	beq.n	80044f4 <_vfiprintf_r+0x120>
 80044c8:	9a07      	ldr	r2, [sp, #28]
 80044ca:	4654      	mov	r4, sl
 80044cc:	2000      	movs	r0, #0
 80044ce:	f04f 0c0a 	mov.w	ip, #10
 80044d2:	4621      	mov	r1, r4
 80044d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044d8:	3b30      	subs	r3, #48	@ 0x30
 80044da:	2b09      	cmp	r3, #9
 80044dc:	d94b      	bls.n	8004576 <_vfiprintf_r+0x1a2>
 80044de:	b1b0      	cbz	r0, 800450e <_vfiprintf_r+0x13a>
 80044e0:	9207      	str	r2, [sp, #28]
 80044e2:	e014      	b.n	800450e <_vfiprintf_r+0x13a>
 80044e4:	eba0 0308 	sub.w	r3, r0, r8
 80044e8:	fa09 f303 	lsl.w	r3, r9, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	46a2      	mov	sl, r4
 80044f2:	e7d2      	b.n	800449a <_vfiprintf_r+0xc6>
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	1d19      	adds	r1, r3, #4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	9103      	str	r1, [sp, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bfbb      	ittet	lt
 8004500:	425b      	neglt	r3, r3
 8004502:	f042 0202 	orrlt.w	r2, r2, #2
 8004506:	9307      	strge	r3, [sp, #28]
 8004508:	9307      	strlt	r3, [sp, #28]
 800450a:	bfb8      	it	lt
 800450c:	9204      	strlt	r2, [sp, #16]
 800450e:	7823      	ldrb	r3, [r4, #0]
 8004510:	2b2e      	cmp	r3, #46	@ 0x2e
 8004512:	d10a      	bne.n	800452a <_vfiprintf_r+0x156>
 8004514:	7863      	ldrb	r3, [r4, #1]
 8004516:	2b2a      	cmp	r3, #42	@ 0x2a
 8004518:	d132      	bne.n	8004580 <_vfiprintf_r+0x1ac>
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	1d1a      	adds	r2, r3, #4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	9203      	str	r2, [sp, #12]
 8004522:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004526:	3402      	adds	r4, #2
 8004528:	9305      	str	r3, [sp, #20]
 800452a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004600 <_vfiprintf_r+0x22c>
 800452e:	7821      	ldrb	r1, [r4, #0]
 8004530:	2203      	movs	r2, #3
 8004532:	4650      	mov	r0, sl
 8004534:	f7fb fe6c 	bl	8000210 <memchr>
 8004538:	b138      	cbz	r0, 800454a <_vfiprintf_r+0x176>
 800453a:	9b04      	ldr	r3, [sp, #16]
 800453c:	eba0 000a 	sub.w	r0, r0, sl
 8004540:	2240      	movs	r2, #64	@ 0x40
 8004542:	4082      	lsls	r2, r0
 8004544:	4313      	orrs	r3, r2
 8004546:	3401      	adds	r4, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454e:	4829      	ldr	r0, [pc, #164]	@ (80045f4 <_vfiprintf_r+0x220>)
 8004550:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004554:	2206      	movs	r2, #6
 8004556:	f7fb fe5b 	bl	8000210 <memchr>
 800455a:	2800      	cmp	r0, #0
 800455c:	d03f      	beq.n	80045de <_vfiprintf_r+0x20a>
 800455e:	4b26      	ldr	r3, [pc, #152]	@ (80045f8 <_vfiprintf_r+0x224>)
 8004560:	bb1b      	cbnz	r3, 80045aa <_vfiprintf_r+0x1d6>
 8004562:	9b03      	ldr	r3, [sp, #12]
 8004564:	3307      	adds	r3, #7
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	3308      	adds	r3, #8
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004570:	443b      	add	r3, r7
 8004572:	9309      	str	r3, [sp, #36]	@ 0x24
 8004574:	e76a      	b.n	800444c <_vfiprintf_r+0x78>
 8004576:	fb0c 3202 	mla	r2, ip, r2, r3
 800457a:	460c      	mov	r4, r1
 800457c:	2001      	movs	r0, #1
 800457e:	e7a8      	b.n	80044d2 <_vfiprintf_r+0xfe>
 8004580:	2300      	movs	r3, #0
 8004582:	3401      	adds	r4, #1
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	4619      	mov	r1, r3
 8004588:	f04f 0c0a 	mov.w	ip, #10
 800458c:	4620      	mov	r0, r4
 800458e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004592:	3a30      	subs	r2, #48	@ 0x30
 8004594:	2a09      	cmp	r2, #9
 8004596:	d903      	bls.n	80045a0 <_vfiprintf_r+0x1cc>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0c6      	beq.n	800452a <_vfiprintf_r+0x156>
 800459c:	9105      	str	r1, [sp, #20]
 800459e:	e7c4      	b.n	800452a <_vfiprintf_r+0x156>
 80045a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a4:	4604      	mov	r4, r0
 80045a6:	2301      	movs	r3, #1
 80045a8:	e7f0      	b.n	800458c <_vfiprintf_r+0x1b8>
 80045aa:	ab03      	add	r3, sp, #12
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	462a      	mov	r2, r5
 80045b0:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <_vfiprintf_r+0x228>)
 80045b2:	a904      	add	r1, sp, #16
 80045b4:	4630      	mov	r0, r6
 80045b6:	f3af 8000 	nop.w
 80045ba:	4607      	mov	r7, r0
 80045bc:	1c78      	adds	r0, r7, #1
 80045be:	d1d6      	bne.n	800456e <_vfiprintf_r+0x19a>
 80045c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045c2:	07d9      	lsls	r1, r3, #31
 80045c4:	d405      	bmi.n	80045d2 <_vfiprintf_r+0x1fe>
 80045c6:	89ab      	ldrh	r3, [r5, #12]
 80045c8:	059a      	lsls	r2, r3, #22
 80045ca:	d402      	bmi.n	80045d2 <_vfiprintf_r+0x1fe>
 80045cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045ce:	f7ff fddd 	bl	800418c <__retarget_lock_release_recursive>
 80045d2:	89ab      	ldrh	r3, [r5, #12]
 80045d4:	065b      	lsls	r3, r3, #25
 80045d6:	f53f af1f 	bmi.w	8004418 <_vfiprintf_r+0x44>
 80045da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045dc:	e71e      	b.n	800441c <_vfiprintf_r+0x48>
 80045de:	ab03      	add	r3, sp, #12
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	462a      	mov	r2, r5
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <_vfiprintf_r+0x228>)
 80045e6:	a904      	add	r1, sp, #16
 80045e8:	4630      	mov	r0, r6
 80045ea:	f000 f879 	bl	80046e0 <_printf_i>
 80045ee:	e7e4      	b.n	80045ba <_vfiprintf_r+0x1e6>
 80045f0:	08004d38 	.word	0x08004d38
 80045f4:	08004d42 	.word	0x08004d42
 80045f8:	00000000 	.word	0x00000000
 80045fc:	080043af 	.word	0x080043af
 8004600:	08004d3e 	.word	0x08004d3e

08004604 <_printf_common>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	4616      	mov	r6, r2
 800460a:	4698      	mov	r8, r3
 800460c:	688a      	ldr	r2, [r1, #8]
 800460e:	690b      	ldr	r3, [r1, #16]
 8004610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004614:	4293      	cmp	r3, r2
 8004616:	bfb8      	it	lt
 8004618:	4613      	movlt	r3, r2
 800461a:	6033      	str	r3, [r6, #0]
 800461c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004620:	4607      	mov	r7, r0
 8004622:	460c      	mov	r4, r1
 8004624:	b10a      	cbz	r2, 800462a <_printf_common+0x26>
 8004626:	3301      	adds	r3, #1
 8004628:	6033      	str	r3, [r6, #0]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	0699      	lsls	r1, r3, #26
 800462e:	bf42      	ittt	mi
 8004630:	6833      	ldrmi	r3, [r6, #0]
 8004632:	3302      	addmi	r3, #2
 8004634:	6033      	strmi	r3, [r6, #0]
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	f015 0506 	ands.w	r5, r5, #6
 800463c:	d106      	bne.n	800464c <_printf_common+0x48>
 800463e:	f104 0a19 	add.w	sl, r4, #25
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	6832      	ldr	r2, [r6, #0]
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	42ab      	cmp	r3, r5
 800464a:	dc26      	bgt.n	800469a <_printf_common+0x96>
 800464c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	3b00      	subs	r3, #0
 8004654:	bf18      	it	ne
 8004656:	2301      	movne	r3, #1
 8004658:	0692      	lsls	r2, r2, #26
 800465a:	d42b      	bmi.n	80046b4 <_printf_common+0xb0>
 800465c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004660:	4641      	mov	r1, r8
 8004662:	4638      	mov	r0, r7
 8004664:	47c8      	blx	r9
 8004666:	3001      	adds	r0, #1
 8004668:	d01e      	beq.n	80046a8 <_printf_common+0xa4>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	6922      	ldr	r2, [r4, #16]
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf02      	ittt	eq
 8004676:	68e5      	ldreq	r5, [r4, #12]
 8004678:	6833      	ldreq	r3, [r6, #0]
 800467a:	1aed      	subeq	r5, r5, r3
 800467c:	68a3      	ldr	r3, [r4, #8]
 800467e:	bf0c      	ite	eq
 8004680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004684:	2500      	movne	r5, #0
 8004686:	4293      	cmp	r3, r2
 8004688:	bfc4      	itt	gt
 800468a:	1a9b      	subgt	r3, r3, r2
 800468c:	18ed      	addgt	r5, r5, r3
 800468e:	2600      	movs	r6, #0
 8004690:	341a      	adds	r4, #26
 8004692:	42b5      	cmp	r5, r6
 8004694:	d11a      	bne.n	80046cc <_printf_common+0xc8>
 8004696:	2000      	movs	r0, #0
 8004698:	e008      	b.n	80046ac <_printf_common+0xa8>
 800469a:	2301      	movs	r3, #1
 800469c:	4652      	mov	r2, sl
 800469e:	4641      	mov	r1, r8
 80046a0:	4638      	mov	r0, r7
 80046a2:	47c8      	blx	r9
 80046a4:	3001      	adds	r0, #1
 80046a6:	d103      	bne.n	80046b0 <_printf_common+0xac>
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	3501      	adds	r5, #1
 80046b2:	e7c6      	b.n	8004642 <_printf_common+0x3e>
 80046b4:	18e1      	adds	r1, r4, r3
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	2030      	movs	r0, #48	@ 0x30
 80046ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046be:	4422      	add	r2, r4
 80046c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046c8:	3302      	adds	r3, #2
 80046ca:	e7c7      	b.n	800465c <_printf_common+0x58>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4622      	mov	r2, r4
 80046d0:	4641      	mov	r1, r8
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c8      	blx	r9
 80046d6:	3001      	adds	r0, #1
 80046d8:	d0e6      	beq.n	80046a8 <_printf_common+0xa4>
 80046da:	3601      	adds	r6, #1
 80046dc:	e7d9      	b.n	8004692 <_printf_common+0x8e>
	...

080046e0 <_printf_i>:
 80046e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	7e0f      	ldrb	r7, [r1, #24]
 80046e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046e8:	2f78      	cmp	r7, #120	@ 0x78
 80046ea:	4691      	mov	r9, r2
 80046ec:	4680      	mov	r8, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	469a      	mov	sl, r3
 80046f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046f6:	d807      	bhi.n	8004708 <_printf_i+0x28>
 80046f8:	2f62      	cmp	r7, #98	@ 0x62
 80046fa:	d80a      	bhi.n	8004712 <_printf_i+0x32>
 80046fc:	2f00      	cmp	r7, #0
 80046fe:	f000 80d2 	beq.w	80048a6 <_printf_i+0x1c6>
 8004702:	2f58      	cmp	r7, #88	@ 0x58
 8004704:	f000 80b9 	beq.w	800487a <_printf_i+0x19a>
 8004708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800470c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004710:	e03a      	b.n	8004788 <_printf_i+0xa8>
 8004712:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004716:	2b15      	cmp	r3, #21
 8004718:	d8f6      	bhi.n	8004708 <_printf_i+0x28>
 800471a:	a101      	add	r1, pc, #4	@ (adr r1, 8004720 <_printf_i+0x40>)
 800471c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004720:	08004779 	.word	0x08004779
 8004724:	0800478d 	.word	0x0800478d
 8004728:	08004709 	.word	0x08004709
 800472c:	08004709 	.word	0x08004709
 8004730:	08004709 	.word	0x08004709
 8004734:	08004709 	.word	0x08004709
 8004738:	0800478d 	.word	0x0800478d
 800473c:	08004709 	.word	0x08004709
 8004740:	08004709 	.word	0x08004709
 8004744:	08004709 	.word	0x08004709
 8004748:	08004709 	.word	0x08004709
 800474c:	0800488d 	.word	0x0800488d
 8004750:	080047b7 	.word	0x080047b7
 8004754:	08004847 	.word	0x08004847
 8004758:	08004709 	.word	0x08004709
 800475c:	08004709 	.word	0x08004709
 8004760:	080048af 	.word	0x080048af
 8004764:	08004709 	.word	0x08004709
 8004768:	080047b7 	.word	0x080047b7
 800476c:	08004709 	.word	0x08004709
 8004770:	08004709 	.word	0x08004709
 8004774:	0800484f 	.word	0x0800484f
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	1d1a      	adds	r2, r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6032      	str	r2, [r6, #0]
 8004780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004788:	2301      	movs	r3, #1
 800478a:	e09d      	b.n	80048c8 <_printf_i+0x1e8>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	6031      	str	r1, [r6, #0]
 8004794:	0606      	lsls	r6, r0, #24
 8004796:	d501      	bpl.n	800479c <_printf_i+0xbc>
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	e003      	b.n	80047a4 <_printf_i+0xc4>
 800479c:	0645      	lsls	r5, r0, #25
 800479e:	d5fb      	bpl.n	8004798 <_printf_i+0xb8>
 80047a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	da03      	bge.n	80047b0 <_printf_i+0xd0>
 80047a8:	232d      	movs	r3, #45	@ 0x2d
 80047aa:	426d      	negs	r5, r5
 80047ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b0:	4859      	ldr	r0, [pc, #356]	@ (8004918 <_printf_i+0x238>)
 80047b2:	230a      	movs	r3, #10
 80047b4:	e011      	b.n	80047da <_printf_i+0xfa>
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	6833      	ldr	r3, [r6, #0]
 80047ba:	0608      	lsls	r0, r1, #24
 80047bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80047c0:	d402      	bmi.n	80047c8 <_printf_i+0xe8>
 80047c2:	0649      	lsls	r1, r1, #25
 80047c4:	bf48      	it	mi
 80047c6:	b2ad      	uxthmi	r5, r5
 80047c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ca:	4853      	ldr	r0, [pc, #332]	@ (8004918 <_printf_i+0x238>)
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	bf14      	ite	ne
 80047d0:	230a      	movne	r3, #10
 80047d2:	2308      	moveq	r3, #8
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047da:	6866      	ldr	r6, [r4, #4]
 80047dc:	60a6      	str	r6, [r4, #8]
 80047de:	2e00      	cmp	r6, #0
 80047e0:	bfa2      	ittt	ge
 80047e2:	6821      	ldrge	r1, [r4, #0]
 80047e4:	f021 0104 	bicge.w	r1, r1, #4
 80047e8:	6021      	strge	r1, [r4, #0]
 80047ea:	b90d      	cbnz	r5, 80047f0 <_printf_i+0x110>
 80047ec:	2e00      	cmp	r6, #0
 80047ee:	d04b      	beq.n	8004888 <_printf_i+0x1a8>
 80047f0:	4616      	mov	r6, r2
 80047f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f6:	fb03 5711 	mls	r7, r3, r1, r5
 80047fa:	5dc7      	ldrb	r7, [r0, r7]
 80047fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004800:	462f      	mov	r7, r5
 8004802:	42bb      	cmp	r3, r7
 8004804:	460d      	mov	r5, r1
 8004806:	d9f4      	bls.n	80047f2 <_printf_i+0x112>
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <_printf_i+0x144>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07df      	lsls	r7, r3, #31
 8004810:	d508      	bpl.n	8004824 <_printf_i+0x144>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	bfde      	ittt	le
 800481a:	2330      	movle	r3, #48	@ 0x30
 800481c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004824:	1b92      	subs	r2, r2, r6
 8004826:	6122      	str	r2, [r4, #16]
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	464b      	mov	r3, r9
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fee6 	bl	8004604 <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14a      	bne.n	80048d2 <_printf_i+0x1f2>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b004      	add	sp, #16
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f043 0320 	orr.w	r3, r3, #32
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	4833      	ldr	r0, [pc, #204]	@ (800491c <_printf_i+0x23c>)
 8004850:	2778      	movs	r7, #120	@ 0x78
 8004852:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	6831      	ldr	r1, [r6, #0]
 800485a:	061f      	lsls	r7, r3, #24
 800485c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004860:	d402      	bmi.n	8004868 <_printf_i+0x188>
 8004862:	065f      	lsls	r7, r3, #25
 8004864:	bf48      	it	mi
 8004866:	b2ad      	uxthmi	r5, r5
 8004868:	6031      	str	r1, [r6, #0]
 800486a:	07d9      	lsls	r1, r3, #31
 800486c:	bf44      	itt	mi
 800486e:	f043 0320 	orrmi.w	r3, r3, #32
 8004872:	6023      	strmi	r3, [r4, #0]
 8004874:	b11d      	cbz	r5, 800487e <_printf_i+0x19e>
 8004876:	2310      	movs	r3, #16
 8004878:	e7ac      	b.n	80047d4 <_printf_i+0xf4>
 800487a:	4827      	ldr	r0, [pc, #156]	@ (8004918 <_printf_i+0x238>)
 800487c:	e7e9      	b.n	8004852 <_printf_i+0x172>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f023 0320 	bic.w	r3, r3, #32
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	e7f6      	b.n	8004876 <_printf_i+0x196>
 8004888:	4616      	mov	r6, r2
 800488a:	e7bd      	b.n	8004808 <_printf_i+0x128>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	6961      	ldr	r1, [r4, #20]
 8004892:	1d18      	adds	r0, r3, #4
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	062e      	lsls	r6, r5, #24
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	d501      	bpl.n	80048a0 <_printf_i+0x1c0>
 800489c:	6019      	str	r1, [r3, #0]
 800489e:	e002      	b.n	80048a6 <_printf_i+0x1c6>
 80048a0:	0668      	lsls	r0, r5, #25
 80048a2:	d5fb      	bpl.n	800489c <_printf_i+0x1bc>
 80048a4:	8019      	strh	r1, [r3, #0]
 80048a6:	2300      	movs	r3, #0
 80048a8:	6123      	str	r3, [r4, #16]
 80048aa:	4616      	mov	r6, r2
 80048ac:	e7bc      	b.n	8004828 <_printf_i+0x148>
 80048ae:	6833      	ldr	r3, [r6, #0]
 80048b0:	1d1a      	adds	r2, r3, #4
 80048b2:	6032      	str	r2, [r6, #0]
 80048b4:	681e      	ldr	r6, [r3, #0]
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7fb fca8 	bl	8000210 <memchr>
 80048c0:	b108      	cbz	r0, 80048c6 <_printf_i+0x1e6>
 80048c2:	1b80      	subs	r0, r0, r6
 80048c4:	6060      	str	r0, [r4, #4]
 80048c6:	6863      	ldr	r3, [r4, #4]
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	2300      	movs	r3, #0
 80048cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d0:	e7aa      	b.n	8004828 <_printf_i+0x148>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	4632      	mov	r2, r6
 80048d6:	4649      	mov	r1, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	47d0      	blx	sl
 80048dc:	3001      	adds	r0, #1
 80048de:	d0ad      	beq.n	800483c <_printf_i+0x15c>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d413      	bmi.n	800490e <_printf_i+0x22e>
 80048e6:	68e0      	ldr	r0, [r4, #12]
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	4298      	cmp	r0, r3
 80048ec:	bfb8      	it	lt
 80048ee:	4618      	movlt	r0, r3
 80048f0:	e7a6      	b.n	8004840 <_printf_i+0x160>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4632      	mov	r2, r6
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d09d      	beq.n	800483c <_printf_i+0x15c>
 8004900:	3501      	adds	r5, #1
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	9903      	ldr	r1, [sp, #12]
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	42ab      	cmp	r3, r5
 800490a:	dcf2      	bgt.n	80048f2 <_printf_i+0x212>
 800490c:	e7eb      	b.n	80048e6 <_printf_i+0x206>
 800490e:	2500      	movs	r5, #0
 8004910:	f104 0619 	add.w	r6, r4, #25
 8004914:	e7f5      	b.n	8004902 <_printf_i+0x222>
 8004916:	bf00      	nop
 8004918:	08004d49 	.word	0x08004d49
 800491c:	08004d5a 	.word	0x08004d5a

08004920 <__sflush_r>:
 8004920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	0716      	lsls	r6, r2, #28
 800492a:	4605      	mov	r5, r0
 800492c:	460c      	mov	r4, r1
 800492e:	d454      	bmi.n	80049da <__sflush_r+0xba>
 8004930:	684b      	ldr	r3, [r1, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	dc02      	bgt.n	800493c <__sflush_r+0x1c>
 8004936:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	dd48      	ble.n	80049ce <__sflush_r+0xae>
 800493c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800493e:	2e00      	cmp	r6, #0
 8004940:	d045      	beq.n	80049ce <__sflush_r+0xae>
 8004942:	2300      	movs	r3, #0
 8004944:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004948:	682f      	ldr	r7, [r5, #0]
 800494a:	6a21      	ldr	r1, [r4, #32]
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	d030      	beq.n	80049b2 <__sflush_r+0x92>
 8004950:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	0759      	lsls	r1, r3, #29
 8004956:	d505      	bpl.n	8004964 <__sflush_r+0x44>
 8004958:	6863      	ldr	r3, [r4, #4]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800495e:	b10b      	cbz	r3, 8004964 <__sflush_r+0x44>
 8004960:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	2300      	movs	r3, #0
 8004966:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004968:	6a21      	ldr	r1, [r4, #32]
 800496a:	4628      	mov	r0, r5
 800496c:	47b0      	blx	r6
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	d106      	bne.n	8004982 <__sflush_r+0x62>
 8004974:	6829      	ldr	r1, [r5, #0]
 8004976:	291d      	cmp	r1, #29
 8004978:	d82b      	bhi.n	80049d2 <__sflush_r+0xb2>
 800497a:	4a2a      	ldr	r2, [pc, #168]	@ (8004a24 <__sflush_r+0x104>)
 800497c:	410a      	asrs	r2, r1
 800497e:	07d6      	lsls	r6, r2, #31
 8004980:	d427      	bmi.n	80049d2 <__sflush_r+0xb2>
 8004982:	2200      	movs	r2, #0
 8004984:	6062      	str	r2, [r4, #4]
 8004986:	04d9      	lsls	r1, r3, #19
 8004988:	6922      	ldr	r2, [r4, #16]
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	d504      	bpl.n	8004998 <__sflush_r+0x78>
 800498e:	1c42      	adds	r2, r0, #1
 8004990:	d101      	bne.n	8004996 <__sflush_r+0x76>
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	b903      	cbnz	r3, 8004998 <__sflush_r+0x78>
 8004996:	6560      	str	r0, [r4, #84]	@ 0x54
 8004998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800499a:	602f      	str	r7, [r5, #0]
 800499c:	b1b9      	cbz	r1, 80049ce <__sflush_r+0xae>
 800499e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049a2:	4299      	cmp	r1, r3
 80049a4:	d002      	beq.n	80049ac <__sflush_r+0x8c>
 80049a6:	4628      	mov	r0, r5
 80049a8:	f7ff fbf2 	bl	8004190 <_free_r>
 80049ac:	2300      	movs	r3, #0
 80049ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80049b0:	e00d      	b.n	80049ce <__sflush_r+0xae>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4628      	mov	r0, r5
 80049b6:	47b0      	blx	r6
 80049b8:	4602      	mov	r2, r0
 80049ba:	1c50      	adds	r0, r2, #1
 80049bc:	d1c9      	bne.n	8004952 <__sflush_r+0x32>
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0c6      	beq.n	8004952 <__sflush_r+0x32>
 80049c4:	2b1d      	cmp	r3, #29
 80049c6:	d001      	beq.n	80049cc <__sflush_r+0xac>
 80049c8:	2b16      	cmp	r3, #22
 80049ca:	d11e      	bne.n	8004a0a <__sflush_r+0xea>
 80049cc:	602f      	str	r7, [r5, #0]
 80049ce:	2000      	movs	r0, #0
 80049d0:	e022      	b.n	8004a18 <__sflush_r+0xf8>
 80049d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d6:	b21b      	sxth	r3, r3
 80049d8:	e01b      	b.n	8004a12 <__sflush_r+0xf2>
 80049da:	690f      	ldr	r7, [r1, #16]
 80049dc:	2f00      	cmp	r7, #0
 80049de:	d0f6      	beq.n	80049ce <__sflush_r+0xae>
 80049e0:	0793      	lsls	r3, r2, #30
 80049e2:	680e      	ldr	r6, [r1, #0]
 80049e4:	bf08      	it	eq
 80049e6:	694b      	ldreq	r3, [r1, #20]
 80049e8:	600f      	str	r7, [r1, #0]
 80049ea:	bf18      	it	ne
 80049ec:	2300      	movne	r3, #0
 80049ee:	eba6 0807 	sub.w	r8, r6, r7
 80049f2:	608b      	str	r3, [r1, #8]
 80049f4:	f1b8 0f00 	cmp.w	r8, #0
 80049f8:	dde9      	ble.n	80049ce <__sflush_r+0xae>
 80049fa:	6a21      	ldr	r1, [r4, #32]
 80049fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049fe:	4643      	mov	r3, r8
 8004a00:	463a      	mov	r2, r7
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b0      	blx	r6
 8004a06:	2800      	cmp	r0, #0
 8004a08:	dc08      	bgt.n	8004a1c <__sflush_r+0xfc>
 8004a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a1c:	4407      	add	r7, r0
 8004a1e:	eba8 0800 	sub.w	r8, r8, r0
 8004a22:	e7e7      	b.n	80049f4 <__sflush_r+0xd4>
 8004a24:	dfbffffe 	.word	0xdfbffffe

08004a28 <_fflush_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	b913      	cbnz	r3, 8004a38 <_fflush_r+0x10>
 8004a32:	2500      	movs	r5, #0
 8004a34:	4628      	mov	r0, r5
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	b118      	cbz	r0, 8004a42 <_fflush_r+0x1a>
 8004a3a:	6a03      	ldr	r3, [r0, #32]
 8004a3c:	b90b      	cbnz	r3, 8004a42 <_fflush_r+0x1a>
 8004a3e:	f7ff fa9f 	bl	8003f80 <__sinit>
 8004a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f3      	beq.n	8004a32 <_fflush_r+0xa>
 8004a4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a4c:	07d0      	lsls	r0, r2, #31
 8004a4e:	d404      	bmi.n	8004a5a <_fflush_r+0x32>
 8004a50:	0599      	lsls	r1, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_fflush_r+0x32>
 8004a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a56:	f7ff fb98 	bl	800418a <__retarget_lock_acquire_recursive>
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	f7ff ff5f 	bl	8004920 <__sflush_r>
 8004a62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a64:	07da      	lsls	r2, r3, #31
 8004a66:	4605      	mov	r5, r0
 8004a68:	d4e4      	bmi.n	8004a34 <_fflush_r+0xc>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	059b      	lsls	r3, r3, #22
 8004a6e:	d4e1      	bmi.n	8004a34 <_fflush_r+0xc>
 8004a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a72:	f7ff fb8b 	bl	800418c <__retarget_lock_release_recursive>
 8004a76:	e7dd      	b.n	8004a34 <_fflush_r+0xc>

08004a78 <__swbuf_r>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	460e      	mov	r6, r1
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	4605      	mov	r5, r0
 8004a80:	b118      	cbz	r0, 8004a8a <__swbuf_r+0x12>
 8004a82:	6a03      	ldr	r3, [r0, #32]
 8004a84:	b90b      	cbnz	r3, 8004a8a <__swbuf_r+0x12>
 8004a86:	f7ff fa7b 	bl	8003f80 <__sinit>
 8004a8a:	69a3      	ldr	r3, [r4, #24]
 8004a8c:	60a3      	str	r3, [r4, #8]
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	071a      	lsls	r2, r3, #28
 8004a92:	d501      	bpl.n	8004a98 <__swbuf_r+0x20>
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	b943      	cbnz	r3, 8004aaa <__swbuf_r+0x32>
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f82a 	bl	8004af4 <__swsetup_r>
 8004aa0:	b118      	cbz	r0, 8004aaa <__swbuf_r+0x32>
 8004aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	1a98      	subs	r0, r3, r2
 8004ab0:	6963      	ldr	r3, [r4, #20]
 8004ab2:	b2f6      	uxtb	r6, r6
 8004ab4:	4283      	cmp	r3, r0
 8004ab6:	4637      	mov	r7, r6
 8004ab8:	dc05      	bgt.n	8004ac6 <__swbuf_r+0x4e>
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f7ff ffb3 	bl	8004a28 <_fflush_r>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d1ed      	bne.n	8004aa2 <__swbuf_r+0x2a>
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60a3      	str	r3, [r4, #8]
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	6022      	str	r2, [r4, #0]
 8004ad2:	701e      	strb	r6, [r3, #0]
 8004ad4:	6962      	ldr	r2, [r4, #20]
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d004      	beq.n	8004ae6 <__swbuf_r+0x6e>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	07db      	lsls	r3, r3, #31
 8004ae0:	d5e1      	bpl.n	8004aa6 <__swbuf_r+0x2e>
 8004ae2:	2e0a      	cmp	r6, #10
 8004ae4:	d1df      	bne.n	8004aa6 <__swbuf_r+0x2e>
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f7ff ff9d 	bl	8004a28 <_fflush_r>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d0d9      	beq.n	8004aa6 <__swbuf_r+0x2e>
 8004af2:	e7d6      	b.n	8004aa2 <__swbuf_r+0x2a>

08004af4 <__swsetup_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4b29      	ldr	r3, [pc, #164]	@ (8004b9c <__swsetup_r+0xa8>)
 8004af8:	4605      	mov	r5, r0
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	460c      	mov	r4, r1
 8004afe:	b118      	cbz	r0, 8004b08 <__swsetup_r+0x14>
 8004b00:	6a03      	ldr	r3, [r0, #32]
 8004b02:	b90b      	cbnz	r3, 8004b08 <__swsetup_r+0x14>
 8004b04:	f7ff fa3c 	bl	8003f80 <__sinit>
 8004b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0c:	0719      	lsls	r1, r3, #28
 8004b0e:	d422      	bmi.n	8004b56 <__swsetup_r+0x62>
 8004b10:	06da      	lsls	r2, r3, #27
 8004b12:	d407      	bmi.n	8004b24 <__swsetup_r+0x30>
 8004b14:	2209      	movs	r2, #9
 8004b16:	602a      	str	r2, [r5, #0]
 8004b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b22:	e033      	b.n	8004b8c <__swsetup_r+0x98>
 8004b24:	0758      	lsls	r0, r3, #29
 8004b26:	d512      	bpl.n	8004b4e <__swsetup_r+0x5a>
 8004b28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b2a:	b141      	cbz	r1, 8004b3e <__swsetup_r+0x4a>
 8004b2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b30:	4299      	cmp	r1, r3
 8004b32:	d002      	beq.n	8004b3a <__swsetup_r+0x46>
 8004b34:	4628      	mov	r0, r5
 8004b36:	f7ff fb2b 	bl	8004190 <_free_r>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	2300      	movs	r3, #0
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	f043 0308 	orr.w	r3, r3, #8
 8004b54:	81a3      	strh	r3, [r4, #12]
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	b94b      	cbnz	r3, 8004b6e <__swsetup_r+0x7a>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b64:	d003      	beq.n	8004b6e <__swsetup_r+0x7a>
 8004b66:	4621      	mov	r1, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f000 f84f 	bl	8004c0c <__smakebuf_r>
 8004b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b72:	f013 0201 	ands.w	r2, r3, #1
 8004b76:	d00a      	beq.n	8004b8e <__swsetup_r+0x9a>
 8004b78:	2200      	movs	r2, #0
 8004b7a:	60a2      	str	r2, [r4, #8]
 8004b7c:	6962      	ldr	r2, [r4, #20]
 8004b7e:	4252      	negs	r2, r2
 8004b80:	61a2      	str	r2, [r4, #24]
 8004b82:	6922      	ldr	r2, [r4, #16]
 8004b84:	b942      	cbnz	r2, 8004b98 <__swsetup_r+0xa4>
 8004b86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b8a:	d1c5      	bne.n	8004b18 <__swsetup_r+0x24>
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
 8004b8e:	0799      	lsls	r1, r3, #30
 8004b90:	bf58      	it	pl
 8004b92:	6962      	ldrpl	r2, [r4, #20]
 8004b94:	60a2      	str	r2, [r4, #8]
 8004b96:	e7f4      	b.n	8004b82 <__swsetup_r+0x8e>
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e7f7      	b.n	8004b8c <__swsetup_r+0x98>
 8004b9c:	20000018 	.word	0x20000018

08004ba0 <_sbrk_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d06      	ldr	r5, [pc, #24]	@ (8004bbc <_sbrk_r+0x1c>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f7fc f9cc 	bl	8000f48 <_sbrk>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_sbrk_r+0x1a>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_sbrk_r+0x1a>
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	20000354 	.word	0x20000354

08004bc0 <__swhatbuf_r>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	b096      	sub	sp, #88	@ 0x58
 8004bcc:	4615      	mov	r5, r2
 8004bce:	461e      	mov	r6, r3
 8004bd0:	da0d      	bge.n	8004bee <__swhatbuf_r+0x2e>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	bf14      	ite	ne
 8004bde:	2340      	movne	r3, #64	@ 0x40
 8004be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004be4:	2000      	movs	r0, #0
 8004be6:	6031      	str	r1, [r6, #0]
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	b016      	add	sp, #88	@ 0x58
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	466a      	mov	r2, sp
 8004bf0:	f000 f848 	bl	8004c84 <_fstat_r>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	dbec      	blt.n	8004bd2 <__swhatbuf_r+0x12>
 8004bf8:	9901      	ldr	r1, [sp, #4]
 8004bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c02:	4259      	negs	r1, r3
 8004c04:	4159      	adcs	r1, r3
 8004c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c0a:	e7eb      	b.n	8004be4 <__swhatbuf_r+0x24>

08004c0c <__smakebuf_r>:
 8004c0c:	898b      	ldrh	r3, [r1, #12]
 8004c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c10:	079d      	lsls	r5, r3, #30
 8004c12:	4606      	mov	r6, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	d507      	bpl.n	8004c28 <__smakebuf_r+0x1c>
 8004c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	2301      	movs	r3, #1
 8004c22:	6163      	str	r3, [r4, #20]
 8004c24:	b003      	add	sp, #12
 8004c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c28:	ab01      	add	r3, sp, #4
 8004c2a:	466a      	mov	r2, sp
 8004c2c:	f7ff ffc8 	bl	8004bc0 <__swhatbuf_r>
 8004c30:	9f00      	ldr	r7, [sp, #0]
 8004c32:	4605      	mov	r5, r0
 8004c34:	4639      	mov	r1, r7
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7ff fb16 	bl	8004268 <_malloc_r>
 8004c3c:	b948      	cbnz	r0, 8004c52 <__smakebuf_r+0x46>
 8004c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c42:	059a      	lsls	r2, r3, #22
 8004c44:	d4ee      	bmi.n	8004c24 <__smakebuf_r+0x18>
 8004c46:	f023 0303 	bic.w	r3, r3, #3
 8004c4a:	f043 0302 	orr.w	r3, r3, #2
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	e7e2      	b.n	8004c18 <__smakebuf_r+0xc>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	6020      	str	r0, [r4, #0]
 8004c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	9b01      	ldr	r3, [sp, #4]
 8004c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c62:	b15b      	cbz	r3, 8004c7c <__smakebuf_r+0x70>
 8004c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f81d 	bl	8004ca8 <_isatty_r>
 8004c6e:	b128      	cbz	r0, 8004c7c <__smakebuf_r+0x70>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	81a3      	strh	r3, [r4, #12]
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	431d      	orrs	r5, r3
 8004c80:	81a5      	strh	r5, [r4, #12]
 8004c82:	e7cf      	b.n	8004c24 <__smakebuf_r+0x18>

08004c84 <_fstat_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d07      	ldr	r5, [pc, #28]	@ (8004ca4 <_fstat_r+0x20>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4611      	mov	r1, r2
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	f7fc f930 	bl	8000ef6 <_fstat>
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d102      	bne.n	8004ca0 <_fstat_r+0x1c>
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	b103      	cbz	r3, 8004ca0 <_fstat_r+0x1c>
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000354 	.word	0x20000354

08004ca8 <_isatty_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	@ (8004cc4 <_isatty_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc f92f 	bl	8000f16 <_isatty>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_isatty_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_isatty_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000354 	.word	0x20000354

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
