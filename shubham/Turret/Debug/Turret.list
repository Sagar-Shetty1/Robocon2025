
Turret.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f10  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080070e0  080070e0  000080e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800718c  0800718c  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  0800718c  0800718c  0000818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007194  08007194  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007194  08007194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007198  08007198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800719c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000080  0800721c  00009080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800721c  000094b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea1f  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002196  00000000  00000000  00017acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00019c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abf  00000000  00000000  0001aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231fd  00000000  00000000  0001b4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001084a  00000000  00000000  0003e6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d46fc  00000000  00000000  0004ef2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012362a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004284  00000000  00000000  00123670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001278f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070c8 	.word	0x080070c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080070c8 	.word	0x080070c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8000de4:	2210      	movs	r2, #16
 8000de6:	4904      	ldr	r1, [pc, #16]	@ (8000df8 <HAL_UART_RxCpltCallback+0x1c>)
 8000de8:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <HAL_UART_RxCpltCallback+0x20>)
 8000dea:	f004 f930 	bl	800504e <HAL_UART_Receive_DMA>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000348 	.word	0x20000348
 8000dfc:	20000174 	.word	0x20000174

08000e00 <constrain>:
long map(long x, long in_min, long in_max, long out_min, long out_max) {

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}
int constrain(int value, int min_val, int max_val) {
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	if (value < min_val)
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	da01      	bge.n	8000e18 <constrain+0x18>
		return min_val;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	e006      	b.n	8000e26 <constrain+0x26>
	if (value > max_val)
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dd01      	ble.n	8000e24 <constrain+0x24>
		return max_val;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	e000      	b.n	8000e26 <constrain+0x26>
	return value;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <compute>:
void compute() {
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
	unsigned long now = HAL_GetTick();
 8000e3a:	f001 fb5f 	bl	80024fc <HAL_GetTick>
 8000e3e:	61f8      	str	r0, [r7, #28]
	double timeChange = (double) (now - lastTime);
 8000e40:	4b67      	ldr	r3, [pc, #412]	@ (8000fe0 <compute+0x1ac>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	69fa      	ldr	r2, [r7, #28]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb73 	bl	8000534 <__aeabi_ui2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	e9c7 2304 	strd	r2, r3, [r7, #16]
	error = setpoint - signed_counter;
 8000e56:	4b63      	ldr	r3, [pc, #396]	@ (8000fe4 <compute+0x1b0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a63      	ldr	r2, [pc, #396]	@ (8000fe8 <compute+0x1b4>)
 8000e5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	4a62      	ldr	r2, [pc, #392]	@ (8000fec <compute+0x1b8>)
 8000e64:	6013      	str	r3, [r2, #0]
	double derr = (error - lasterr) / timeChange;
 8000e66:	4b61      	ldr	r3, [pc, #388]	@ (8000fec <compute+0x1b8>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b61      	ldr	r3, [pc, #388]	@ (8000ff0 <compute+0x1bc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb6f 	bl	8000554 <__aeabi_i2d>
 8000e76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e7a:	f7ff fcff 	bl	800087c <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	errsum += error;
 8000e86:	4b59      	ldr	r3, [pc, #356]	@ (8000fec <compute+0x1b8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e92:	4b58      	ldr	r3, [pc, #352]	@ (8000ff4 <compute+0x1c0>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9c:	4b55      	ldr	r3, [pc, #340]	@ (8000ff4 <compute+0x1c0>)
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
	float s = c * error + derr;
 8000ea2:	4b52      	ldr	r3, [pc, #328]	@ (8000fec <compute+0x1b8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb54 	bl	8000554 <__aeabi_i2d>
 8000eac:	4b52      	ldr	r3, [pc, #328]	@ (8000ff8 <compute+0x1c4>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fbb9 	bl	8000628 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ec2:	f7ff f9fb 	bl	80002bc <__adddf3>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff fdbd 	bl	8000a4c <__aeabi_d2f>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	607b      	str	r3, [r7, #4]
	output = kp * error + kd * derr + kt * (k * sign(s));
 8000ed6:	4b45      	ldr	r3, [pc, #276]	@ (8000fec <compute+0x1b8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb3a 	bl	8000554 <__aeabi_i2d>
 8000ee0:	4b46      	ldr	r3, [pc, #280]	@ (8000ffc <compute+0x1c8>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f7ff fb9f 	bl	8000628 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4614      	mov	r4, r2
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	4b43      	ldr	r3, [pc, #268]	@ (8001000 <compute+0x1cc>)
 8000ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000efc:	f7ff fb94 	bl	8000628 <__aeabi_dmul>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4620      	mov	r0, r4
 8000f06:	4629      	mov	r1, r5
 8000f08:	f7ff f9d8 	bl	80002bc <__adddf3>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4614      	mov	r4, r2
 8000f12:	461d      	mov	r5, r3
 8000f14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d503      	bpl.n	8000f2a <compute+0xf6>
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	4937      	ldr	r1, [pc, #220]	@ (8001004 <compute+0x1d0>)
 8000f28:	e00e      	b.n	8000f48 <compute+0x114>
 8000f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	dd03      	ble.n	8000f40 <compute+0x10c>
 8000f38:	f04f 0000 	mov.w	r0, #0
 8000f3c:	4932      	ldr	r1, [pc, #200]	@ (8001008 <compute+0x1d4>)
 8000f3e:	e003      	b.n	8000f48 <compute+0x114>
 8000f40:	f04f 0000 	mov.w	r0, #0
 8000f44:	f04f 0100 	mov.w	r1, #0
 8000f48:	4b30      	ldr	r3, [pc, #192]	@ (800100c <compute+0x1d8>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff fb6b 	bl	8000628 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <compute+0x1dc>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fb62 	bl	8000628 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4620      	mov	r0, r4
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	f7ff f9a6 	bl	80002bc <__adddf3>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fd68 	bl	8000a4c <__aeabi_d2f>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a25      	ldr	r2, [pc, #148]	@ (8001014 <compute+0x1e0>)
 8000f80:	6013      	str	r3, [r2, #0]
	output = constrain(output, -500, 500);
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <compute+0x1e0>)
 8000f84:	edd3 7a00 	vldr	s15, [r3]
 8000f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f90:	4921      	ldr	r1, [pc, #132]	@ (8001018 <compute+0x1e4>)
 8000f92:	ee17 0a90 	vmov	r0, s15
 8000f96:	f7ff ff33 	bl	8000e00 <constrain>
 8000f9a:	ee07 0a90 	vmov	s15, r0
 8000f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <compute+0x1e0>)
 8000fa4:	edc3 7a00 	vstr	s15, [r3]
	output = abs(output);
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <compute+0x1e0>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb2:	ee17 3a90 	vmov	r3, s15
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bfb8      	it	lt
 8000fba:	425b      	neglt	r3, r3
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <compute+0x1e0>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
	lasterr = error;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <compute+0x1b8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <compute+0x1bc>)
 8000fd0:	6013      	str	r3, [r2, #0]
	lastTime = now;
 8000fd2:	4a03      	ldr	r2, [pc, #12]	@ (8000fe0 <compute+0x1ac>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	6013      	str	r3, [r2, #0]
//	printf("error = %d \n\r",error);

}
 8000fd8:	bf00      	nop
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe0:	20000344 	.word	0x20000344
 8000fe4:	20000330 	.word	0x20000330
 8000fe8:	20000264 	.word	0x20000264
 8000fec:	20000334 	.word	0x20000334
 8000ff0:	20000338 	.word	0x20000338
 8000ff4:	20000340 	.word	0x20000340
 8000ff8:	200002b8 	.word	0x200002b8
 8000ffc:	200002a8 	.word	0x200002a8
 8001000:	200002b0 	.word	0x200002b0
 8001004:	bff00000 	.word	0xbff00000
 8001008:	3ff00000 	.word	0x3ff00000
 800100c:	200002c8 	.word	0x200002c8
 8001010:	200002c0 	.word	0x200002c0
 8001014:	2000033c 	.word	0x2000033c
 8001018:	fffffe0c 	.word	0xfffffe0c

0800101c <SetTunings>:
void SetTunings(double Kp, double Ki, double Kd, double Kt, double K) {
 800101c:	b480      	push	{r7}
 800101e:	b08b      	sub	sp, #44	@ 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	ed87 0b08 	vstr	d0, [r7, #32]
 8001026:	ed87 1b06 	vstr	d1, [r7, #24]
 800102a:	ed87 2b04 	vstr	d2, [r7, #16]
 800102e:	ed87 3b02 	vstr	d3, [r7, #8]
 8001032:	ed87 4b00 	vstr	d4, [r7]
	kp = Kp;
 8001036:	490f      	ldr	r1, [pc, #60]	@ (8001074 <SetTunings+0x58>)
 8001038:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800103c:	e9c1 2300 	strd	r2, r3, [r1]
	ki = Ki;
 8001040:	490d      	ldr	r1, [pc, #52]	@ (8001078 <SetTunings+0x5c>)
 8001042:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001046:	e9c1 2300 	strd	r2, r3, [r1]
	kd = Kd;
 800104a:	490c      	ldr	r1, [pc, #48]	@ (800107c <SetTunings+0x60>)
 800104c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001050:	e9c1 2300 	strd	r2, r3, [r1]
	kt = Kt;
 8001054:	490a      	ldr	r1, [pc, #40]	@ (8001080 <SetTunings+0x64>)
 8001056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
	k = K;
 800105e:	4909      	ldr	r1, [pc, #36]	@ (8001084 <SetTunings+0x68>)
 8001060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001064:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001068:	bf00      	nop
 800106a:	372c      	adds	r7, #44	@ 0x2c
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	200002a8 	.word	0x200002a8
 8001078:	200002d0 	.word	0x200002d0
 800107c:	200002b0 	.word	0x200002b0
 8001080:	200002c0 	.word	0x200002c0
 8001084:	200002c8 	.word	0x200002c8

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	b093      	sub	sp, #76	@ 0x4c
 800108c:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f001 f9cf 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 fc1d 	bl	80018d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fe4b 	bl	8001d30 <MX_GPIO_Init>
  MX_DMA_Init();
 800109a:	f000 fe29 	bl	8001cf0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800109e:	f000 fdfd 	bl	8001c9c <MX_USART2_UART_Init>
  MX_TIM13_Init();
 80010a2:	f000 fd83 	bl	8001bac <MX_TIM13_Init>
  MX_UART4_Init();
 80010a6:	f000 fdcf 	bl	8001c48 <MX_UART4_Init>
  MX_TIM1_Init();
 80010aa:	f000 fc7f 	bl	80019ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ae:	f000 fd29 	bl	8001b04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80010b2:	2210      	movs	r2, #16
 80010b4:	4971      	ldr	r1, [pc, #452]	@ (800127c <main+0x1f4>)
 80010b6:	4872      	ldr	r0, [pc, #456]	@ (8001280 <main+0x1f8>)
 80010b8:	f003 ffc9 	bl	800504e <HAL_UART_Receive_DMA>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010bc:	213c      	movs	r1, #60	@ 0x3c
 80010be:	4871      	ldr	r0, [pc, #452]	@ (8001284 <main+0x1fc>)
 80010c0:	f003 f8e8 	bl	8004294 <HAL_TIM_Encoder_Start>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* ps5 controller */
		lx = (rxbuff[0] & 0x80) ?
 80010c4:	4b6d      	ldr	r3, [pc, #436]	@ (800127c <main+0x1f4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da04      	bge.n	80010d8 <main+0x50>
 80010ce:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <main+0x1f4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80010d6:	e001      	b.n	80010dc <main+0x54>
 80010d8:	4b68      	ldr	r3, [pc, #416]	@ (800127c <main+0x1f4>)
 80010da:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 80010dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001288 <main+0x200>)
 80010de:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 80010e0:	4b66      	ldr	r3, [pc, #408]	@ (800127c <main+0x1f4>)
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da04      	bge.n	80010f4 <main+0x6c>
 80010ea:	4b64      	ldr	r3, [pc, #400]	@ (800127c <main+0x1f4>)
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80010f2:	e001      	b.n	80010f8 <main+0x70>
 80010f4:	4b61      	ldr	r3, [pc, #388]	@ (800127c <main+0x1f4>)
 80010f6:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 80010f8:	4a64      	ldr	r2, [pc, #400]	@ (800128c <main+0x204>)
 80010fa:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 80010fc:	4b5f      	ldr	r3, [pc, #380]	@ (800127c <main+0x1f4>)
 80010fe:	789b      	ldrb	r3, [r3, #2]
 8001100:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 8001102:	2b00      	cmp	r3, #0
 8001104:	da04      	bge.n	8001110 <main+0x88>
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <main+0x1f4>)
 8001108:	789b      	ldrb	r3, [r3, #2]
 800110a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800110e:	e001      	b.n	8001114 <main+0x8c>
 8001110:	4b5a      	ldr	r3, [pc, #360]	@ (800127c <main+0x1f4>)
 8001112:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 8001114:	4a5e      	ldr	r2, [pc, #376]	@ (8001290 <main+0x208>)
 8001116:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 8001118:	4b58      	ldr	r3, [pc, #352]	@ (800127c <main+0x1f4>)
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 800111e:	2b00      	cmp	r3, #0
 8001120:	da04      	bge.n	800112c <main+0xa4>
 8001122:	4b56      	ldr	r3, [pc, #344]	@ (800127c <main+0x1f4>)
 8001124:	78db      	ldrb	r3, [r3, #3]
 8001126:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800112a:	e001      	b.n	8001130 <main+0xa8>
 800112c:	4b53      	ldr	r3, [pc, #332]	@ (800127c <main+0x1f4>)
 800112e:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 8001130:	4a58      	ldr	r2, [pc, #352]	@ (8001294 <main+0x20c>)
 8001132:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8001134:	4b51      	ldr	r3, [pc, #324]	@ (800127c <main+0x1f4>)
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 800113a:	2b00      	cmp	r3, #0
 800113c:	da04      	bge.n	8001148 <main+0xc0>
 800113e:	4b4f      	ldr	r3, [pc, #316]	@ (800127c <main+0x1f4>)
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001146:	e001      	b.n	800114c <main+0xc4>
 8001148:	4b4c      	ldr	r3, [pc, #304]	@ (800127c <main+0x1f4>)
 800114a:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 800114c:	4a52      	ldr	r2, [pc, #328]	@ (8001298 <main+0x210>)
 800114e:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 8001150:	4b4a      	ldr	r3, [pc, #296]	@ (800127c <main+0x1f4>)
 8001152:	795b      	ldrb	r3, [r3, #5]
 8001154:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001156:	2b00      	cmp	r3, #0
 8001158:	da04      	bge.n	8001164 <main+0xdc>
 800115a:	4b48      	ldr	r3, [pc, #288]	@ (800127c <main+0x1f4>)
 800115c:	795b      	ldrb	r3, [r3, #5]
 800115e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001162:	e001      	b.n	8001168 <main+0xe0>
 8001164:	4b45      	ldr	r3, [pc, #276]	@ (800127c <main+0x1f4>)
 8001166:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 8001168:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <main+0x214>)
 800116a:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 800116c:	4b43      	ldr	r3, [pc, #268]	@ (800127c <main+0x1f4>)
 800116e:	799b      	ldrb	r3, [r3, #6]
 8001170:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 8001172:	2b00      	cmp	r3, #0
 8001174:	da04      	bge.n	8001180 <main+0xf8>
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <main+0x1f4>)
 8001178:	799b      	ldrb	r3, [r3, #6]
 800117a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800117e:	e001      	b.n	8001184 <main+0xfc>
 8001180:	4b3e      	ldr	r3, [pc, #248]	@ (800127c <main+0x1f4>)
 8001182:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 8001184:	4a46      	ldr	r2, [pc, #280]	@ (80012a0 <main+0x218>)
 8001186:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 8001188:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <main+0x1f4>)
 800118a:	79db      	ldrb	r3, [r3, #7]
 800118c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 800118e:	2b00      	cmp	r3, #0
 8001190:	da04      	bge.n	800119c <main+0x114>
 8001192:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <main+0x1f4>)
 8001194:	79db      	ldrb	r3, [r3, #7]
 8001196:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800119a:	e001      	b.n	80011a0 <main+0x118>
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <main+0x1f4>)
 800119e:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 80011a0:	4a40      	ldr	r2, [pc, #256]	@ (80012a4 <main+0x21c>)
 80011a2:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <main+0x1f4>)
 80011a6:	7a1b      	ldrb	r3, [r3, #8]
 80011a8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da04      	bge.n	80011b8 <main+0x130>
 80011ae:	4b33      	ldr	r3, [pc, #204]	@ (800127c <main+0x1f4>)
 80011b0:	7a1b      	ldrb	r3, [r3, #8]
 80011b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011b6:	e001      	b.n	80011bc <main+0x134>
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <main+0x1f4>)
 80011ba:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 80011bc:	4a3a      	ldr	r2, [pc, #232]	@ (80012a8 <main+0x220>)
 80011be:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <main+0x1f4>)
 80011c2:	7a5b      	ldrb	r3, [r3, #9]
 80011c4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da04      	bge.n	80011d4 <main+0x14c>
 80011ca:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <main+0x1f4>)
 80011cc:	7a5b      	ldrb	r3, [r3, #9]
 80011ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011d2:	e001      	b.n	80011d8 <main+0x150>
 80011d4:	4b29      	ldr	r3, [pc, #164]	@ (800127c <main+0x1f4>)
 80011d6:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 80011d8:	4a34      	ldr	r2, [pc, #208]	@ (80012ac <main+0x224>)
 80011da:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 80011dc:	4b27      	ldr	r3, [pc, #156]	@ (800127c <main+0x1f4>)
 80011de:	7a9b      	ldrb	r3, [r3, #10]
 80011e0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da04      	bge.n	80011f0 <main+0x168>
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <main+0x1f4>)
 80011e8:	7a9b      	ldrb	r3, [r3, #10]
 80011ea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011ee:	e001      	b.n	80011f4 <main+0x16c>
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <main+0x1f4>)
 80011f2:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 80011f4:	4a2e      	ldr	r2, [pc, #184]	@ (80012b0 <main+0x228>)
 80011f6:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <main+0x1f4>)
 80011fa:	7adb      	ldrb	r3, [r3, #11]
 80011fc:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da04      	bge.n	800120c <main+0x184>
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <main+0x1f4>)
 8001204:	7adb      	ldrb	r3, [r3, #11]
 8001206:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800120a:	e001      	b.n	8001210 <main+0x188>
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <main+0x1f4>)
 800120e:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 8001210:	4a28      	ldr	r2, [pc, #160]	@ (80012b4 <main+0x22c>)
 8001212:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <main+0x1f4>)
 8001216:	7b1b      	ldrb	r3, [r3, #12]
 8001218:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 800121a:	2b00      	cmp	r3, #0
 800121c:	da04      	bge.n	8001228 <main+0x1a0>
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <main+0x1f4>)
 8001220:	7b1b      	ldrb	r3, [r3, #12]
 8001222:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001226:	e001      	b.n	800122c <main+0x1a4>
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <main+0x1f4>)
 800122a:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 800122c:	4a22      	ldr	r2, [pc, #136]	@ (80012b8 <main+0x230>)
 800122e:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <main+0x1f4>)
 8001232:	7b5b      	ldrb	r3, [r3, #13]
 8001234:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001236:	2b00      	cmp	r3, #0
 8001238:	da04      	bge.n	8001244 <main+0x1bc>
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <main+0x1f4>)
 800123c:	7b5b      	ldrb	r3, [r3, #13]
 800123e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001242:	e001      	b.n	8001248 <main+0x1c0>
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <main+0x1f4>)
 8001246:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 8001248:	4a1c      	ldr	r2, [pc, #112]	@ (80012bc <main+0x234>)
 800124a:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <main+0x1f4>)
 800124e:	7b9b      	ldrb	r3, [r3, #14]
 8001250:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8001252:	2b00      	cmp	r3, #0
 8001254:	da04      	bge.n	8001260 <main+0x1d8>
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <main+0x1f4>)
 8001258:	7b9b      	ldrb	r3, [r3, #14]
 800125a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800125e:	e001      	b.n	8001264 <main+0x1dc>
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <main+0x1f4>)
 8001262:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8001264:	4a16      	ldr	r2, [pc, #88]	@ (80012c0 <main+0x238>)
 8001266:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <main+0x1f4>)
 800126a:	7bdb      	ldrb	r3, [r3, #15]
 800126c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 800126e:	2b00      	cmp	r3, #0
 8001270:	da28      	bge.n	80012c4 <main+0x23c>
 8001272:	4b02      	ldr	r3, [pc, #8]	@ (800127c <main+0x1f4>)
 8001274:	7bdb      	ldrb	r3, [r3, #15]
 8001276:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800127a:	e025      	b.n	80012c8 <main+0x240>
 800127c:	20000348 	.word	0x20000348
 8001280:	20000174 	.word	0x20000174
 8001284:	200000e4 	.word	0x200000e4
 8001288:	20000268 	.word	0x20000268
 800128c:	2000026c 	.word	0x2000026c
 8001290:	20000270 	.word	0x20000270
 8001294:	20000274 	.word	0x20000274
 8001298:	20000278 	.word	0x20000278
 800129c:	2000027c 	.word	0x2000027c
 80012a0:	20000280 	.word	0x20000280
 80012a4:	20000284 	.word	0x20000284
 80012a8:	20000288 	.word	0x20000288
 80012ac:	2000028c 	.word	0x2000028c
 80012b0:	20000290 	.word	0x20000290
 80012b4:	20000294 	.word	0x20000294
 80012b8:	20000298 	.word	0x20000298
 80012bc:	200002a0 	.word	0x200002a0
 80012c0:	2000029c 	.word	0x2000029c
 80012c4:	4b56      	ldr	r3, [pc, #344]	@ (8001420 <main+0x398>)
 80012c6:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 80012c8:	4a56      	ldr	r2, [pc, #344]	@ (8001424 <main+0x39c>)
 80012ca:	6013      	str	r3, [r2, #0]

		printf(
 80012cc:	4b56      	ldr	r3, [pc, #344]	@ (8001428 <main+0x3a0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b56      	ldr	r3, [pc, #344]	@ (800142c <main+0x3a4>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	613a      	str	r2, [r7, #16]
 80012d8:	4b55      	ldr	r3, [pc, #340]	@ (8001430 <main+0x3a8>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	4b55      	ldr	r3, [pc, #340]	@ (8001434 <main+0x3ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a55      	ldr	r2, [pc, #340]	@ (8001438 <main+0x3b0>)
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	4955      	ldr	r1, [pc, #340]	@ (800143c <main+0x3b4>)
 80012e8:	6809      	ldr	r1, [r1, #0]
 80012ea:	4855      	ldr	r0, [pc, #340]	@ (8001440 <main+0x3b8>)
 80012ec:	6800      	ldr	r0, [r0, #0]
 80012ee:	4c55      	ldr	r4, [pc, #340]	@ (8001444 <main+0x3bc>)
 80012f0:	6824      	ldr	r4, [r4, #0]
 80012f2:	60bc      	str	r4, [r7, #8]
 80012f4:	4d54      	ldr	r5, [pc, #336]	@ (8001448 <main+0x3c0>)
 80012f6:	682d      	ldr	r5, [r5, #0]
 80012f8:	4e54      	ldr	r6, [pc, #336]	@ (800144c <main+0x3c4>)
 80012fa:	6836      	ldr	r6, [r6, #0]
 80012fc:	4c54      	ldr	r4, [pc, #336]	@ (8001450 <main+0x3c8>)
 80012fe:	6824      	ldr	r4, [r4, #0]
 8001300:	607c      	str	r4, [r7, #4]
 8001302:	4c48      	ldr	r4, [pc, #288]	@ (8001424 <main+0x39c>)
 8001304:	6824      	ldr	r4, [r4, #0]
 8001306:	603c      	str	r4, [r7, #0]
 8001308:	4c52      	ldr	r4, [pc, #328]	@ (8001454 <main+0x3cc>)
 800130a:	6824      	ldr	r4, [r4, #0]
 800130c:	9409      	str	r4, [sp, #36]	@ 0x24
 800130e:	683c      	ldr	r4, [r7, #0]
 8001310:	9408      	str	r4, [sp, #32]
 8001312:	687c      	ldr	r4, [r7, #4]
 8001314:	9407      	str	r4, [sp, #28]
 8001316:	9606      	str	r6, [sp, #24]
 8001318:	9505      	str	r5, [sp, #20]
 800131a:	68bc      	ldr	r4, [r7, #8]
 800131c:	9404      	str	r4, [sp, #16]
 800131e:	9003      	str	r0, [sp, #12]
 8001320:	9102      	str	r1, [sp, #8]
 8001322:	9201      	str	r2, [sp, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	6979      	ldr	r1, [r7, #20]
 800132c:	484a      	ldr	r0, [pc, #296]	@ (8001458 <main+0x3d0>)
 800132e:	f005 f85d 	bl	80063ec <iprintf>
				lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1, ll2, rr2,speed);
		//	  		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly,
		//	  				rx, ry, cro, squ, tri, cir);

		/* encoder */
		uint16_t raw_counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001332:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <main+0x3d4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001338:	83fb      	strh	r3, [r7, #30]

		// Convert to signed values
		signed_counter =
				(raw_counter < 32768) ?
						(int16_t) raw_counter : (int16_t) (raw_counter - 65536);
 800133a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
		signed_counter =
 800133e:	4b48      	ldr	r3, [pc, #288]	@ (8001460 <main+0x3d8>)
 8001340:	801a      	strh	r2, [r3, #0]

		/* PSMC */
		SetTunings(0.5, 0.5, 0, 10.0, -0.005); // Initial tuning for 50kg·cm motor
 8001342:	ed9f 4b2f 	vldr	d4, [pc, #188]	@ 8001400 <main+0x378>
 8001346:	ed9f 3b30 	vldr	d3, [pc, #192]	@ 8001408 <main+0x380>
 800134a:	ed9f 2b31 	vldr	d2, [pc, #196]	@ 8001410 <main+0x388>
 800134e:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8001418 <main+0x390>
 8001352:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8001418 <main+0x390>
 8001356:	f7ff fe61 	bl	800101c <SetTunings>
		c = 1.5;  // Sliding surface parameter
 800135a:	4942      	ldr	r1, [pc, #264]	@ (8001464 <main+0x3dc>)
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <main+0x3e0>)
 8001362:	e9c1 2300 	strd	r2, r3, [r1]
		if (left == 1)
 8001366:	4b41      	ldr	r3, [pc, #260]	@ (800146c <main+0x3e4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <main+0x2f2>
			setpoint += 100;
 800136e:	4b40      	ldr	r3, [pc, #256]	@ (8001470 <main+0x3e8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3364      	adds	r3, #100	@ 0x64
 8001374:	4a3e      	ldr	r2, [pc, #248]	@ (8001470 <main+0x3e8>)
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e008      	b.n	800138c <main+0x304>
		else if (right == 1)
 800137a:	4b3e      	ldr	r3, [pc, #248]	@ (8001474 <main+0x3ec>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d104      	bne.n	800138c <main+0x304>
			setpoint -= 100;
 8001382:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <main+0x3e8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3b64      	subs	r3, #100	@ 0x64
 8001388:	4a39      	ldr	r2, [pc, #228]	@ (8001470 <main+0x3e8>)
 800138a:	6013      	str	r3, [r2, #0]
		compute();
 800138c:	f7ff fd52 	bl	8000e34 <compute>
		//	 	  +
		if (signed_counter < setpoint) {
 8001390:	4b33      	ldr	r3, [pc, #204]	@ (8001460 <main+0x3d8>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	461a      	mov	r2, r3
 8001398:	4b35      	ldr	r3, [pc, #212]	@ (8001470 <main+0x3e8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	da13      	bge.n	80013c8 <main+0x340>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013a6:	4834      	ldr	r0, [pc, #208]	@ (8001478 <main+0x3f0>)
 80013a8:	f001 ff5c 	bl	8003264 <HAL_GPIO_WritePin>
			TIM1->CCR1 = output;
 80013ac:	4b33      	ldr	r3, [pc, #204]	@ (800147c <main+0x3f4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <main+0x3f8>)
 80013b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013be:	2100      	movs	r1, #0
 80013c0:	4830      	ldr	r0, [pc, #192]	@ (8001484 <main+0x3fc>)
 80013c2:	f002 fdf9 	bl	8003fb8 <HAL_TIM_PWM_Start>
 80013c6:	e066      	b.n	8001496 <main+0x40e>
		}

		else if (signed_counter > setpoint) {
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <main+0x3d8>)
 80013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <main+0x3e8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dd57      	ble.n	8001488 <main+0x400>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013de:	4826      	ldr	r0, [pc, #152]	@ (8001478 <main+0x3f0>)
 80013e0:	f001 ff40 	bl	8003264 <HAL_GPIO_WritePin>
			TIM1->CCR1 = output;
 80013e4:	4b25      	ldr	r3, [pc, #148]	@ (800147c <main+0x3f4>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <main+0x3f8>)
 80013ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f0:	ee17 2a90 	vmov	r2, s15
 80013f4:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	4822      	ldr	r0, [pc, #136]	@ (8001484 <main+0x3fc>)
 80013fa:	f002 fddd 	bl	8003fb8 <HAL_TIM_PWM_Start>
 80013fe:	e04a      	b.n	8001496 <main+0x40e>
 8001400:	47ae147b 	.word	0x47ae147b
 8001404:	bf747ae1 	.word	0xbf747ae1
 8001408:	00000000 	.word	0x00000000
 800140c:	40240000 	.word	0x40240000
	...
 800141c:	3fe00000 	.word	0x3fe00000
 8001420:	20000348 	.word	0x20000348
 8001424:	200002a4 	.word	0x200002a4
 8001428:	20000268 	.word	0x20000268
 800142c:	2000026c 	.word	0x2000026c
 8001430:	20000270 	.word	0x20000270
 8001434:	20000274 	.word	0x20000274
 8001438:	20000278 	.word	0x20000278
 800143c:	2000027c 	.word	0x2000027c
 8001440:	20000280 	.word	0x20000280
 8001444:	20000284 	.word	0x20000284
 8001448:	20000298 	.word	0x20000298
 800144c:	2000029c 	.word	0x2000029c
 8001450:	200002a0 	.word	0x200002a0
 8001454:	20000014 	.word	0x20000014
 8001458:	080070e0 	.word	0x080070e0
 800145c:	200000e4 	.word	0x200000e4
 8001460:	20000264 	.word	0x20000264
 8001464:	200002b8 	.word	0x200002b8
 8001468:	3ff80000 	.word	0x3ff80000
 800146c:	20000290 	.word	0x20000290
 8001470:	20000330 	.word	0x20000330
 8001474:	20000294 	.word	0x20000294
 8001478:	40020800 	.word	0x40020800
 800147c:	2000033c 	.word	0x2000033c
 8001480:	40010000 	.word	0x40010000
 8001484:	2000009c 	.word	0x2000009c
		} else {
			TIM1->CCR1 = 0;
 8001488:	4b92      	ldr	r3, [pc, #584]	@ (80016d4 <main+0x64c>)
 800148a:	2200      	movs	r2, #0
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800148e:	2100      	movs	r1, #0
 8001490:	4891      	ldr	r0, [pc, #580]	@ (80016d8 <main+0x650>)
 8001492:	f002 fd91 	bl	8003fb8 <HAL_TIM_PWM_Start>
		}

		printf("Counts = %d \r\n", signed_counter);
 8001496:	4b91      	ldr	r3, [pc, #580]	@ (80016dc <main+0x654>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	4619      	mov	r1, r3
 800149e:	4890      	ldr	r0, [pc, #576]	@ (80016e0 <main+0x658>)
 80014a0:	f004 ffa4 	bl	80063ec <iprintf>

		/* stepper */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,
 80014a4:	4b8f      	ldr	r3, [pc, #572]	@ (80016e4 <main+0x65c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b8:	488b      	ldr	r0, [pc, #556]	@ (80016e8 <main+0x660>)
 80014ba:	f001 fed3 	bl	8003264 <HAL_GPIO_WritePin>
				direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 80014be:	4b8b      	ldr	r3, [pc, #556]	@ (80016ec <main+0x664>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	2108      	movs	r1, #8
 80014d0:	4887      	ldr	r0, [pc, #540]	@ (80016f0 <main+0x668>)
 80014d2:	f001 fec7 	bl	8003264 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,
 80014d6:	4b85      	ldr	r3, [pc, #532]	@ (80016ec <main+0x664>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf0c      	ite	eq
 80014de:	2301      	moveq	r3, #1
 80014e0:	2300      	movne	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	2140      	movs	r1, #64	@ 0x40
 80014e8:	4881      	ldr	r0, [pc, #516]	@ (80016f0 <main+0x668>)
 80014ea:	f001 febb 	bl	8003264 <HAL_GPIO_WritePin>
				!direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 80014ee:	4b81      	ldr	r3, [pc, #516]	@ (80016f4 <main+0x66c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d11c      	bne.n	8001530 <main+0x4a8>
 80014f6:	4b80      	ldr	r3, [pc, #512]	@ (80016f8 <main+0x670>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <main+0x4a8>
			direction1 = 1;  // Set to Anti-clockwise
 80014fe:	4b7b      	ldr	r3, [pc, #492]	@ (80016ec <main+0x664>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8001504:	4b7d      	ldr	r3, [pc, #500]	@ (80016fc <main+0x674>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 800150a:	4b7d      	ldr	r3, [pc, #500]	@ (8001700 <main+0x678>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
			target_steps = STEPS;
 8001510:	4b7c      	ldr	r3, [pc, #496]	@ (8001704 <main+0x67c>)
 8001512:	22f0      	movs	r2, #240	@ 0xf0
 8001514:	601a      	str	r2, [r3, #0]
			target_steps1 = STEPS;
 8001516:	4b7c      	ldr	r3, [pc, #496]	@ (8001708 <main+0x680>)
 8001518:	22f0      	movs	r2, #240	@ 0xf0
 800151a:	601a      	str	r2, [r3, #0]
			speed+=2;
 800151c:	4b7b      	ldr	r3, [pc, #492]	@ (800170c <main+0x684>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3302      	adds	r3, #2
 8001522:	4a7a      	ldr	r2, [pc, #488]	@ (800170c <main+0x684>)
 8001524:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	4871      	ldr	r0, [pc, #452]	@ (80016f0 <main+0x668>)
 800152c:	f001 fe9a 	bl	8003264 <HAL_GPIO_WritePin>
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8001530:	4b77      	ldr	r3, [pc, #476]	@ (8001710 <main+0x688>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11c      	bne.n	8001572 <main+0x4ea>
 8001538:	4b76      	ldr	r3, [pc, #472]	@ (8001714 <main+0x68c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d118      	bne.n	8001572 <main+0x4ea>
			direction1 = 0;  // Set to Clockwise
 8001540:	4b6a      	ldr	r3, [pc, #424]	@ (80016ec <main+0x664>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8001546:	4b6d      	ldr	r3, [pc, #436]	@ (80016fc <main+0x674>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 800154c:	4b6c      	ldr	r3, [pc, #432]	@ (8001700 <main+0x678>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
			target_steps = STEPS;
 8001552:	4b6c      	ldr	r3, [pc, #432]	@ (8001704 <main+0x67c>)
 8001554:	22f0      	movs	r2, #240	@ 0xf0
 8001556:	601a      	str	r2, [r3, #0]
			target_steps1 = STEPS;
 8001558:	4b6b      	ldr	r3, [pc, #428]	@ (8001708 <main+0x680>)
 800155a:	22f0      	movs	r2, #240	@ 0xf0
 800155c:	601a      	str	r2, [r3, #0]
			speed-=2;
 800155e:	4b6b      	ldr	r3, [pc, #428]	@ (800170c <main+0x684>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3b02      	subs	r3, #2
 8001564:	4a69      	ldr	r2, [pc, #420]	@ (800170c <main+0x684>)
 8001566:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2180      	movs	r1, #128	@ 0x80
 800156c:	4860      	ldr	r0, [pc, #384]	@ (80016f0 <main+0x668>)
 800156e:	f001 fe79 	bl	8003264 <HAL_GPIO_WritePin>
		}
		if (ll2 == 1 && !prev_ll2) {  // LL1 button pressed
 8001572:	4b69      	ldr	r3, [pc, #420]	@ (8001718 <main+0x690>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d115      	bne.n	80015a6 <main+0x51e>
 800157a:	4b68      	ldr	r3, [pc, #416]	@ (800171c <main+0x694>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d111      	bne.n	80015a6 <main+0x51e>
			direction = 1;  // Set to Anti-clockwise
 8001582:	4b58      	ldr	r3, [pc, #352]	@ (80016e4 <main+0x65c>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
			stepper_running2 = !stepper_running2;
 8001588:	4b65      	ldr	r3, [pc, #404]	@ (8001720 <main+0x698>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	4b61      	ldr	r3, [pc, #388]	@ (8001720 <main+0x698>)
 800159a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	4853      	ldr	r0, [pc, #332]	@ (80016f0 <main+0x668>)
 80015a2:	f001 fe5f 	bl	8003264 <HAL_GPIO_WritePin>
		}
		if (rr2 == 1 && !prev_rr2) {  // RR1 button pressed
 80015a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <main+0x69c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d115      	bne.n	80015da <main+0x552>
 80015ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001728 <main+0x6a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d111      	bne.n	80015da <main+0x552>
			direction = 0;  // Set to Clockwise
 80015b6:	4b4b      	ldr	r3, [pc, #300]	@ (80016e4 <main+0x65c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
			stepper_running2 = !stepper_running2;
 80015bc:	4b58      	ldr	r3, [pc, #352]	@ (8001720 <main+0x698>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b54      	ldr	r3, [pc, #336]	@ (8001720 <main+0x698>)
 80015ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2180      	movs	r1, #128	@ 0x80
 80015d4:	4846      	ldr	r0, [pc, #280]	@ (80016f0 <main+0x668>)
 80015d6:	f001 fe45 	bl	8003264 <HAL_GPIO_WritePin>
		}
		if (cir == 1 && !prev_cir) {
 80015da:	4b54      	ldr	r3, [pc, #336]	@ (800172c <main+0x6a4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d111      	bne.n	8001606 <main+0x57e>
 80015e2:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <main+0x6a8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10d      	bne.n	8001606 <main+0x57e>
			stepper_running1 = 0;
 80015ea:	4b45      	ldr	r3, [pc, #276]	@ (8001700 <main+0x678>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
			current_steps = 0;
 80015f0:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <main+0x6ac>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
			current_steps1 = 0;
 80015f6:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <main+0x6b0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2180      	movs	r1, #128	@ 0x80
 8001600:	483b      	ldr	r0, [pc, #236]	@ (80016f0 <main+0x668>)
 8001602:	f001 fe2f 	bl	8003264 <HAL_GPIO_WritePin>
		}
		prev_ll1 = ll1;
 8001606:	4b3b      	ldr	r3, [pc, #236]	@ (80016f4 <main+0x66c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a3b      	ldr	r2, [pc, #236]	@ (80016f8 <main+0x670>)
 800160c:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 800160e:	4b40      	ldr	r3, [pc, #256]	@ (8001710 <main+0x688>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a40      	ldr	r2, [pc, #256]	@ (8001714 <main+0x68c>)
 8001614:	6013      	str	r3, [r2, #0]
		prev_ll2 = ll2;
 8001616:	4b40      	ldr	r3, [pc, #256]	@ (8001718 <main+0x690>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a40      	ldr	r2, [pc, #256]	@ (800171c <main+0x694>)
 800161c:	6013      	str	r3, [r2, #0]
		prev_rr2 = rr2;
 800161e:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <main+0x69c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a41      	ldr	r2, [pc, #260]	@ (8001728 <main+0x6a0>)
 8001624:	6013      	str	r3, [r2, #0]
		prev_cir = cir;
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <main+0x6a4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a41      	ldr	r2, [pc, #260]	@ (8001730 <main+0x6a8>)
 800162c:	6013      	str	r3, [r2, #0]
//			} else {
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
//				step_state1 = 0;
//			}
//		}
		if (stepper_running && (HAL_GetTick() - last_step_time) >= step_delay) {
 800162e:	4b33      	ldr	r3, [pc, #204]	@ (80016fc <main+0x674>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d028      	beq.n	8001688 <main+0x600>
 8001636:	f000 ff61 	bl	80024fc <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	4b3f      	ldr	r3, [pc, #252]	@ (800173c <main+0x6b4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	4a3f      	ldr	r2, [pc, #252]	@ (8001740 <main+0x6b8>)
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	4293      	cmp	r3, r2
 8001648:	d31e      	bcc.n	8001688 <main+0x600>
			last_step_time = HAL_GetTick(); // Update last step time
 800164a:	f000 ff57 	bl	80024fc <HAL_GetTick>
 800164e:	4603      	mov	r3, r0
 8001650:	4a3a      	ldr	r2, [pc, #232]	@ (800173c <main+0x6b4>)
 8001652:	6013      	str	r3, [r2, #0]

			if (step_state == 0) {
 8001654:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <main+0x6bc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10d      	bne.n	8001678 <main+0x5f0>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 800165c:	2201      	movs	r2, #1
 800165e:	2120      	movs	r1, #32
 8001660:	4823      	ldr	r0, [pc, #140]	@ (80016f0 <main+0x668>)
 8001662:	f001 fdff 	bl	8003264 <HAL_GPIO_WritePin>
				step_state = 1;
 8001666:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <main+0x6bc>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
				current_steps++;
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <main+0x6ac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a30      	ldr	r2, [pc, #192]	@ (8001734 <main+0x6ac>)
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e007      	b.n	8001688 <main+0x600>
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 8001678:	2200      	movs	r2, #0
 800167a:	2120      	movs	r1, #32
 800167c:	481c      	ldr	r0, [pc, #112]	@ (80016f0 <main+0x668>)
 800167e:	f001 fdf1 	bl	8003264 <HAL_GPIO_WritePin>
				step_state = 0;
 8001682:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <main+0x6bc>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
			}
		}
		if (stepper_running1
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <main+0x678>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d06a      	beq.n	8001766 <main+0x6de>
				&& (HAL_GetTick() - last_step_time1) >= step_delay1) {
 8001690:	f000 ff34 	bl	80024fc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <main+0x6c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a2b      	ldr	r2, [pc, #172]	@ (800174c <main+0x6c4>)
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d360      	bcc.n	8001766 <main+0x6de>
			last_step_time1 = HAL_GetTick(); // Update last step time
 80016a4:	f000 ff2a 	bl	80024fc <HAL_GetTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <main+0x6c0>)
 80016ac:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <main+0x6c8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d14e      	bne.n	8001754 <main+0x6cc>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Step HIGH
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016bc:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <main+0x660>)
 80016be:	f001 fdd1 	bl	8003264 <HAL_GPIO_WritePin>
				step_state1 = 1;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <main+0x6c8>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
				current_steps1++;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <main+0x6b0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001738 <main+0x6b0>)
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e048      	b.n	8001766 <main+0x6de>
 80016d4:	40010000 	.word	0x40010000
 80016d8:	2000009c 	.word	0x2000009c
 80016dc:	20000264 	.word	0x20000264
 80016e0:	08007128 	.word	0x08007128
 80016e4:	20000000 	.word	0x20000000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	20000004 	.word	0x20000004
 80016f0:	40020800 	.word	0x40020800
 80016f4:	20000298 	.word	0x20000298
 80016f8:	2000030c 	.word	0x2000030c
 80016fc:	200002f0 	.word	0x200002f0
 8001700:	200002f4 	.word	0x200002f4
 8001704:	2000031c 	.word	0x2000031c
 8001708:	20000324 	.word	0x20000324
 800170c:	20000014 	.word	0x20000014
 8001710:	2000029c 	.word	0x2000029c
 8001714:	20000310 	.word	0x20000310
 8001718:	200002a0 	.word	0x200002a0
 800171c:	20000314 	.word	0x20000314
 8001720:	200002f8 	.word	0x200002f8
 8001724:	200002a4 	.word	0x200002a4
 8001728:	20000318 	.word	0x20000318
 800172c:	20000284 	.word	0x20000284
 8001730:	20000300 	.word	0x20000300
 8001734:	20000320 	.word	0x20000320
 8001738:	20000328 	.word	0x20000328
 800173c:	200002d8 	.word	0x200002d8
 8001740:	20000008 	.word	0x20000008
 8001744:	200002e4 	.word	0x200002e4
 8001748:	200002dc 	.word	0x200002dc
 800174c:	2000000c 	.word	0x2000000c
 8001750:	200002e8 	.word	0x200002e8
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800175a:	484a      	ldr	r0, [pc, #296]	@ (8001884 <main+0x7fc>)
 800175c:	f001 fd82 	bl	8003264 <HAL_GPIO_WritePin>
				step_state1 = 0;
 8001760:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <main+0x800>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
			}
		}
		if (stepper_running2
 8001766:	4b49      	ldr	r3, [pc, #292]	@ (800188c <main+0x804>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d02a      	beq.n	80017c4 <main+0x73c>
				&& (HAL_GetTick() - last_step_time2) >= step_delay2) {
 800176e:	f000 fec5 	bl	80024fc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	4b46      	ldr	r3, [pc, #280]	@ (8001890 <main+0x808>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a46      	ldr	r2, [pc, #280]	@ (8001894 <main+0x80c>)
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4293      	cmp	r3, r2
 8001780:	d320      	bcc.n	80017c4 <main+0x73c>
			last_step_time2 = HAL_GetTick(); // Update last step time
 8001782:	f000 febb 	bl	80024fc <HAL_GetTick>
 8001786:	4603      	mov	r3, r0
 8001788:	4a41      	ldr	r2, [pc, #260]	@ (8001890 <main+0x808>)
 800178a:	6013      	str	r3, [r2, #0]

			if (step_state2 == 0) {
 800178c:	4b42      	ldr	r3, [pc, #264]	@ (8001898 <main+0x810>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10e      	bne.n	80017b2 <main+0x72a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Step HIGH
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800179a:	483a      	ldr	r0, [pc, #232]	@ (8001884 <main+0x7fc>)
 800179c:	f001 fd62 	bl	8003264 <HAL_GPIO_WritePin>
				step_state2 = 1;
 80017a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <main+0x810>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
				current_steps2++;
 80017a6:	4b3d      	ldr	r3, [pc, #244]	@ (800189c <main+0x814>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a3b      	ldr	r2, [pc, #236]	@ (800189c <main+0x814>)
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e008      	b.n	80017c4 <main+0x73c>
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Step LOW
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017b8:	4832      	ldr	r0, [pc, #200]	@ (8001884 <main+0x7fc>)
 80017ba:	f001 fd53 	bl	8003264 <HAL_GPIO_WritePin>
				step_state2 = 0;
 80017be:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <main+0x810>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
//			current_steps1 = 0;
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
//		}

		/* Dribbling */
		if (tri == 1 && !prev_tri) {
 80017c4:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <main+0x818>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d106      	bne.n	80017da <main+0x752>
 80017cc:	4b35      	ldr	r3, [pc, #212]	@ (80018a4 <main+0x81c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <main+0x752>
			ebike_running = 1;
 80017d4:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <main+0x820>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
		}
		if (cro == 1 && !prev_cro) {
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <main+0x824>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d106      	bne.n	80017f0 <main+0x768>
 80017e2:	4b33      	ldr	r3, [pc, #204]	@ (80018b0 <main+0x828>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <main+0x768>
			ebike_running = 0;
 80017ea:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <main+0x820>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
		}
		prev_tri = tri;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <main+0x818>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2b      	ldr	r2, [pc, #172]	@ (80018a4 <main+0x81c>)
 80017f6:	6013      	str	r3, [r2, #0]
		prev_cro = cro;
 80017f8:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <main+0x824>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2c      	ldr	r2, [pc, #176]	@ (80018b0 <main+0x828>)
 80017fe:	6013      	str	r3, [r2, #0]
//			TIM1->CCR2 = 0;
//			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
////			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
//		}

		if (ebike_running) {
 8001800:	4b29      	ldr	r3, [pc, #164]	@ (80018a8 <main+0x820>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d018      	beq.n	800183a <main+0x7b2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800180e:	4829      	ldr	r0, [pc, #164]	@ (80018b4 <main+0x82c>)
 8001810:	f001 fd28 	bl	8003264 <HAL_GPIO_WritePin>
//			dutycycle = map(ly, Buff1, 127, 0, fast);
//			TIM1->CCR2 = (dutycycle*0.70 * 999) / 100;  //rpm 2000 test
			TIM1->CCR2 = (speed * 999) / 100;  //rpm 2000 test
 8001814:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <main+0x830>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <main+0x834>)
 8001822:	fb82 1203 	smull	r1, r2, r2, r3
 8001826:	1152      	asrs	r2, r2, #5
 8001828:	17db      	asrs	r3, r3, #31
 800182a:	1ad2      	subs	r2, r2, r3
 800182c:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <main+0x838>)
 800182e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001830:	2104      	movs	r1, #4
 8001832:	4824      	ldr	r0, [pc, #144]	@ (80018c4 <main+0x83c>)
 8001834:	f002 fbc0 	bl	8003fb8 <HAL_TIM_PWM_Start>
 8001838:	e006      	b.n	8001848 <main+0x7c0>
		} else {
			TIM1->CCR2 = 0;
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <main+0x838>)
 800183c:	2200      	movs	r2, #0
 800183e:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001840:	2104      	movs	r1, #4
 8001842:	4820      	ldr	r0, [pc, #128]	@ (80018c4 <main+0x83c>)
 8001844:	f002 fbb8 	bl	8003fb8 <HAL_TIM_PWM_Start>
		// pneumatics
//		if (squ == 1 && !prev_squ) {
//			pneumatic_open = !pneumatic_open;
//		}
//		prev_squ = squ;
		if (squ == 1) {
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <main+0x840>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d103      	bne.n	8001858 <main+0x7d0>
			pneumatic_open = 1;
 8001850:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <main+0x844>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e002      	b.n	800185e <main+0x7d6>
		} else {
			pneumatic_open = 0;
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <main+0x844>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
		}

		if (pneumatic_open) {
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <main+0x844>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <main+0x7ec>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800186c:	4811      	ldr	r0, [pc, #68]	@ (80018b4 <main+0x82c>)
 800186e:	f001 fcf9 	bl	8003264 <HAL_GPIO_WritePin>
 8001872:	e427      	b.n	80010c4 <main+0x3c>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800187a:	480e      	ldr	r0, [pc, #56]	@ (80018b4 <main+0x82c>)
 800187c:	f001 fcf2 	bl	8003264 <HAL_GPIO_WritePin>
	while (1) {
 8001880:	e420      	b.n	80010c4 <main+0x3c>
 8001882:	bf00      	nop
 8001884:	40020400 	.word	0x40020400
 8001888:	200002e8 	.word	0x200002e8
 800188c:	200002f8 	.word	0x200002f8
 8001890:	200002e0 	.word	0x200002e0
 8001894:	20000010 	.word	0x20000010
 8001898:	200002ec 	.word	0x200002ec
 800189c:	2000032c 	.word	0x2000032c
 80018a0:	20000280 	.word	0x20000280
 80018a4:	20000304 	.word	0x20000304
 80018a8:	200002fc 	.word	0x200002fc
 80018ac:	20000278 	.word	0x20000278
 80018b0:	20000308 	.word	0x20000308
 80018b4:	40020000 	.word	0x40020000
 80018b8:	20000014 	.word	0x20000014
 80018bc:	51eb851f 	.word	0x51eb851f
 80018c0:	40010000 	.word	0x40010000
 80018c4:	2000009c 	.word	0x2000009c
 80018c8:	2000027c 	.word	0x2000027c
 80018cc:	20000358 	.word	0x20000358

080018d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b094      	sub	sp, #80	@ 0x50
 80018d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	2234      	movs	r2, #52	@ 0x34
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fdd9 	bl	8006496 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <SystemClock_Config+0xd4>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	4a29      	ldr	r2, [pc, #164]	@ (80019a4 <SystemClock_Config+0xd4>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	@ 0x40
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <SystemClock_Config+0xd4>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001910:	2300      	movs	r3, #0
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <SystemClock_Config+0xd8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800191c:	4a22      	ldr	r2, [pc, #136]	@ (80019a8 <SystemClock_Config+0xd8>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <SystemClock_Config+0xd8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001930:	2302      	movs	r3, #2
 8001932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001934:	2301      	movs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001938:	2310      	movs	r3, #16
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	2302      	movs	r3, #2
 800193e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001940:	2300      	movs	r3, #0
 8001942:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001944:	2310      	movs	r3, #16
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001948:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800194e:	2304      	movs	r3, #4
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001956:	2302      	movs	r3, #2
 8001958:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4618      	mov	r0, r3
 8001960:	f001 ffe4 	bl	800392c <HAL_RCC_OscConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800196a:	f000 fa93 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196e:	230f      	movs	r3, #15
 8001970:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001972:	2302      	movs	r3, #2
 8001974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f001 fc84 	bl	8003298 <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001996:	f000 fa7d 	bl	8001e94 <Error_Handler>
  }
}
 800199a:	bf00      	nop
 800199c:	3750      	adds	r7, #80	@ 0x50
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000

080019ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b096      	sub	sp, #88	@ 0x58
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2220      	movs	r2, #32
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 fd56 	bl	8006496 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ea:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <MX_TIM1_Init+0x150>)
 80019ec:	4a44      	ldr	r2, [pc, #272]	@ (8001b00 <MX_TIM1_Init+0x154>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 80019f0:	4b42      	ldr	r3, [pc, #264]	@ (8001afc <MX_TIM1_Init+0x150>)
 80019f2:	22b3      	movs	r2, #179	@ 0xb3
 80019f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <MX_TIM1_Init+0x150>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80019fc:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <MX_TIM1_Init+0x150>)
 80019fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b3a      	ldr	r3, [pc, #232]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a16:	4839      	ldr	r0, [pc, #228]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a18:	f002 fa26 	bl	8003e68 <HAL_TIM_Base_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a22:	f000 fa37 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a30:	4619      	mov	r1, r3
 8001a32:	4832      	ldr	r0, [pc, #200]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a34:	f002 fd7e 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a3e:	f000 fa29 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a42:	482e      	ldr	r0, [pc, #184]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a44:	f002 fa5f 	bl	8003f06 <HAL_TIM_PWM_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a4e:	f000 fa21 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4826      	ldr	r0, [pc, #152]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a62:	f003 f94b 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a6c:	f000 fa12 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a70:	2360      	movs	r3, #96	@ 0x60
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4819      	ldr	r0, [pc, #100]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001a96:	f002 fc8b 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001aa0:	f000 f9f8 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4813      	ldr	r0, [pc, #76]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001aae:	f002 fc7f 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001ab8:	f000 f9ec 	bl	8001e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001ae0:	f003 f988 	bl	8004df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001aea:	f000 f9d3 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aee:	4803      	ldr	r0, [pc, #12]	@ (8001afc <MX_TIM1_Init+0x150>)
 8001af0:	f000 fa7c 	bl	8001fec <HAL_TIM_MspPostInit>

}
 8001af4:	bf00      	nop
 8001af6:	3758      	adds	r7, #88	@ 0x58
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000009c 	.word	0x2000009c
 8001b00:	40010000 	.word	0x40010000

08001b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	@ 0x30
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	2224      	movs	r2, #36	@ 0x24
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fcbf 	bl	8006496 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b20:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b36:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b50:	2301      	movs	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b74:	f002 fae8 	bl	8004148 <HAL_TIM_Encoder_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b7e:	f000 f989 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <MX_TIM2_Init+0xa4>)
 8001b90:	f003 f8b4 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b9a:	f000 f97b 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3730      	adds	r7, #48	@ 0x30
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200000e4 	.word	0x200000e4

08001bac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c44 <MX_TIM13_Init+0x98>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 179;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001bcc:	22b3      	movs	r2, #179	@ 0xb3
 8001bce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001bd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bdc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001bea:	4815      	ldr	r0, [pc, #84]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001bec:	f002 f93c 	bl	8003e68 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001bf6:	f000 f94d 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001bfa:	4811      	ldr	r0, [pc, #68]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001bfc:	f002 f983 	bl	8003f06 <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001c06:	f000 f945 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0a:	2360      	movs	r3, #96	@ 0x60
 8001c0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4807      	ldr	r0, [pc, #28]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001c22:	f002 fbc5 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001c2c:	f000 f932 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001c30:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <MX_TIM13_Init+0x94>)
 8001c32:	f000 f9db 	bl	8001fec <HAL_TIM_MspPostInit>

}
 8001c36:	bf00      	nop
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000012c 	.word	0x2000012c
 8001c44:	40001c00 	.word	0x40001c00

08001c48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <MX_UART4_Init+0x50>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <MX_UART4_Init+0x4c>)
 8001c80:	f003 f90a 	bl	8004e98 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001c8a:	f000 f903 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000174 	.word	0x20000174
 8001c98:	40004c00 	.word	0x40004c00

08001c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <MX_USART2_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	f003 f8e0 	bl	8004e98 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f000 f8d9 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001bc 	.word	0x200001bc
 8001cec:	40004400 	.word	0x40004400

08001cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_DMA_Init+0x3c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <MX_DMA_Init+0x3c>)
 8001d00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <MX_DMA_Init+0x3c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	200d      	movs	r0, #13
 8001d18:	f000 fcd7 	bl	80026ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d1c:	200d      	movs	r0, #13
 8001d1e:	f000 fcf0 	bl	8002702 <HAL_NVIC_EnableIRQ>

}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b43      	ldr	r3, [pc, #268]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a42      	ldr	r2, [pc, #264]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b3c      	ldr	r3, [pc, #240]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b35      	ldr	r3, [pc, #212]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a34      	ldr	r2, [pc, #208]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <MX_GPIO_Init+0x128>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 713a 	mov.w	r1, #744	@ 0x2e8
 8001dbc:	4827      	ldr	r0, [pc, #156]	@ (8001e5c <MX_GPIO_Init+0x12c>)
 8001dbe:	f001 fa51 	bl	8003264 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8001dc8:	4825      	ldr	r0, [pc, #148]	@ (8001e60 <MX_GPIO_Init+0x130>)
 8001dca:	f001 fa4b 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001dd4:	4823      	ldr	r0, [pc, #140]	@ (8001e64 <MX_GPIO_Init+0x134>)
 8001dd6:	f001 fa45 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001de0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	481a      	ldr	r0, [pc, #104]	@ (8001e5c <MX_GPIO_Init+0x12c>)
 8001df2:	f001 f8a3 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC5 PC6 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001df6:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 8001dfa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4813      	ldr	r0, [pc, #76]	@ (8001e5c <MX_GPIO_Init+0x12c>)
 8001e10:	f001 f894 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001e14:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <MX_GPIO_Init+0x130>)
 8001e2e:	f001 f885 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e32:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	@ (8001e64 <MX_GPIO_Init+0x134>)
 8001e4c:	f001 f876 	bl	8002f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	@ 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400

08001e68 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	4804      	ldr	r0, [pc, #16]	@ (8001e90 <_write+0x28>)
 8001e80:	f003 f85a 	bl	8004f38 <HAL_UART_Transmit>
	return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200001bc 	.word	0x200001bc

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <Error_Handler+0x8>

08001ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	4a0f      	ldr	r2, [pc, #60]	@ (8001eec <HAL_MspInit+0x4c>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	@ (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f000 fbe8 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a15      	ldr	r2, [pc, #84]	@ (8001f54 <HAL_TIM_Base_MspInit+0x64>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_TIM_Base_MspInit+0x68>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <HAL_TIM_Base_MspInit+0x68>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <HAL_TIM_Base_MspInit+0x68>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001f1e:	e012      	b.n	8001f46 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM13)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <HAL_TIM_Base_MspInit+0x6c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d10d      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_TIM_Base_MspInit+0x68>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <HAL_TIM_Base_MspInit+0x68>)
 8001f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <HAL_TIM_Base_MspInit+0x68>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40001c00 	.word	0x40001c00

08001f60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	@ 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f80:	d12b      	bne.n	8001fda <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a16      	ldr	r2, [pc, #88]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fd6:	f000 ffb1 	bl	8002f3c <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	@ 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a24      	ldr	r2, [pc, #144]	@ (800209c <HAL_TIM_MspPostInit+0xb0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d11f      	bne.n	800204e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a22      	ldr	r2, [pc, #136]	@ (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800203c:	2301      	movs	r3, #1
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4817      	ldr	r0, [pc, #92]	@ (80020a4 <HAL_TIM_MspPostInit+0xb8>)
 8002048:	f000 ff78 	bl	8002f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800204c:	e022      	b.n	8002094 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM13)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a15      	ldr	r2, [pc, #84]	@ (80020a8 <HAL_TIM_MspPostInit+0xbc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d11d      	bne.n	8002094 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6313      	str	r3, [r2, #48]	@ 0x30
 8002068:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <HAL_TIM_MspPostInit+0xb4>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002074:	2340      	movs	r3, #64	@ 0x40
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002084:	2309      	movs	r3, #9
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <HAL_TIM_MspPostInit+0xb8>)
 8002090:	f000 ff54 	bl	8002f3c <HAL_GPIO_Init>
}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	@ 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010000 	.word	0x40010000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40001c00 	.word	0x40001c00

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	@ 0x30
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002204 <HAL_UART_MspInit+0x158>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d164      	bne.n	8002198 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80020d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b4a      	ldr	r3, [pc, #296]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a45      	ldr	r2, [pc, #276]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002106:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002118:	2308      	movs	r3, #8
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	4619      	mov	r1, r3
 8002122:	483a      	ldr	r0, [pc, #232]	@ (800220c <HAL_UART_MspInit+0x160>)
 8002124:	f000 ff0a 	bl	8002f3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002128:	4b39      	ldr	r3, [pc, #228]	@ (8002210 <HAL_UART_MspInit+0x164>)
 800212a:	4a3a      	ldr	r2, [pc, #232]	@ (8002214 <HAL_UART_MspInit+0x168>)
 800212c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002130:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002134:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002136:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <HAL_UART_MspInit+0x164>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002142:	4b33      	ldr	r3, [pc, #204]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002144:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002148:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214a:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <HAL_UART_MspInit+0x164>)
 800214c:	2200      	movs	r2, #0
 800214e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002150:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002156:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800215c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800215e:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002164:	4b2a      	ldr	r3, [pc, #168]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800216a:	4829      	ldr	r0, [pc, #164]	@ (8002210 <HAL_UART_MspInit+0x164>)
 800216c:	f000 fae4 	bl	8002738 <HAL_DMA_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002176:	f7ff fe8d 	bl	8001e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <HAL_UART_MspInit+0x164>)
 800217e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002180:	4a23      	ldr	r2, [pc, #140]	@ (8002210 <HAL_UART_MspInit+0x164>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2034      	movs	r0, #52	@ 0x34
 800218c:	f000 fa9d 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002190:	2034      	movs	r0, #52	@ 0x34
 8002192:	f000 fab6 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002196:	e030      	b.n	80021fa <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1e      	ldr	r2, [pc, #120]	@ (8002218 <HAL_UART_MspInit+0x16c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d12b      	bne.n	80021fa <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a17      	ldr	r2, [pc, #92]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_UART_MspInit+0x15c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021da:	230c      	movs	r3, #12
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ea:	2307      	movs	r3, #7
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	4619      	mov	r1, r3
 80021f4:	4809      	ldr	r0, [pc, #36]	@ (800221c <HAL_UART_MspInit+0x170>)
 80021f6:	f000 fea1 	bl	8002f3c <HAL_GPIO_Init>
}
 80021fa:	bf00      	nop
 80021fc:	3730      	adds	r7, #48	@ 0x30
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40004c00 	.word	0x40004c00
 8002208:	40023800 	.word	0x40023800
 800220c:	40020800 	.word	0x40020800
 8002210:	20000204 	.word	0x20000204
 8002214:	40026040 	.word	0x40026040
 8002218:	40004400 	.word	0x40004400
 800221c:	40020000 	.word	0x40020000

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <NMI_Handler+0x4>

08002228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <MemManage_Handler+0x4>

08002238 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <UsageFault_Handler+0x4>

08002248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002276:	f000 f92d 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <DMA1_Stream2_IRQHandler+0x10>)
 8002286:	f000 fbef 	bl	8002a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000204 	.word	0x20000204

08002294 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <UART4_IRQHandler+0x10>)
 800229a:	f002 fefd 	bl	8005098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000174 	.word	0x20000174

080022a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e00a      	b.n	80022d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ba:	f3af 8000 	nop.w
 80022be:	4601      	mov	r1, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	60ba      	str	r2, [r7, #8]
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf0      	blt.n	80022ba <_read+0x12>
  }

  return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800230a:	605a      	str	r2, [r3, #4]
  return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_isatty>:

int _isatty(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002354:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <_sbrk+0x5c>)
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <_sbrk+0x60>)
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <_sbrk+0x64>)
 800236a:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <_sbrk+0x68>)
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	d207      	bcs.n	800238c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800237c:	f004 f8da 	bl	8006534 <__errno>
 8002380:	4603      	mov	r3, r0
 8002382:	220c      	movs	r2, #12
 8002384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	e009      	b.n	80023a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002392:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	4a05      	ldr	r2, [pc, #20]	@ (80023b0 <_sbrk+0x64>)
 800239c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20020000 	.word	0x20020000
 80023ac:	00000400 	.word	0x00000400
 80023b0:	2000035c 	.word	0x2000035c
 80023b4:	200004b0 	.word	0x200004b0

080023b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <SystemInit+0x20>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c2:	4a05      	ldr	r2, [pc, #20]	@ (80023d8 <SystemInit+0x20>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002414 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023e0:	f7ff ffea 	bl	80023b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	@ (8002418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	@ (800241c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800240a:	f004 f899 	bl	8006540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7fe fe3b 	bl	8001088 <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002420:	0800719c 	.word	0x0800719c
  ldr r2, =_sbss
 8002424:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002428:	200004b0 	.word	0x200004b0

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 f92b 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	2000      	movs	r0, #0
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff fd1c 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f943 	bl	800271e <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 f90b 	bl	80026ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000018 	.word	0x20000018
 80024cc:	20000020 	.word	0x20000020
 80024d0:	2000001c 	.word	0x2000001c

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000020 	.word	0x20000020
 80024f8:	20000360 	.word	0x20000360

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000360 	.word	0x20000360

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	@ 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff29 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff3e 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff8e 	bl	8002608 <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5d 	bl	80025b4 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff31 	bl	8002578 <__NVIC_EnableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffa2 	bl	8002670 <SysTick_Config>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff feda 	bl	80024fc <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e099      	b.n	8002888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002774:	e00f      	b.n	8002796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002776:	f7ff fec1 	bl	80024fc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b05      	cmp	r3, #5
 8002782:	d908      	bls.n	8002796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2203      	movs	r2, #3
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e078      	b.n	8002888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e8      	bne.n	8002776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4b38      	ldr	r3, [pc, #224]	@ (8002890 <HAL_DMA_Init+0x158>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d107      	bne.n	8002800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	4313      	orrs	r3, r2
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	2b04      	cmp	r3, #4
 8002828:	d117      	bne.n	800285a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb01 	bl	8002e44 <DMA_CheckFifoParam>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2240      	movs	r2, #64	@ 0x40
 800284c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002856:	2301      	movs	r3, #1
 8002858:	e016      	b.n	8002888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fab8 	bl	8002dd8 <DMA_CalcBaseAndBitshift>
 8002868:	4603      	mov	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	223f      	movs	r2, #63	@ 0x3f
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	f010803f 	.word	0xf010803f

08002894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_DMA_Start_IT+0x26>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e040      	b.n	800293c <HAL_DMA_Start_IT+0xa8>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d12f      	bne.n	800292e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa4a 	bl	8002d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	223f      	movs	r2, #63	@ 0x3f
 80028ee:	409a      	lsls	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0216 	orr.w	r2, r2, #22
 8002902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e005      	b.n	800293a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002952:	f7ff fdd3 	bl	80024fc <HAL_GetTick>
 8002956:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d008      	beq.n	8002976 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2280      	movs	r2, #128	@ 0x80
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e052      	b.n	8002a1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0216 	bic.w	r2, r2, #22
 8002984:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002994:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <HAL_DMA_Abort+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0208 	bic.w	r2, r2, #8
 80029b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	e013      	b.n	80029f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c8:	f7ff fd98 	bl	80024fc <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d90c      	bls.n	80029f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2203      	movs	r2, #3
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e015      	b.n	8002a1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e4      	bne.n	80029c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	223f      	movs	r2, #63	@ 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d004      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2280      	movs	r2, #128	@ 0x80
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00c      	b.n	8002a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2205      	movs	r2, #5
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a74:	4b8e      	ldr	r3, [pc, #568]	@ (8002cb0 <HAL_DMA_IRQHandler+0x248>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a8e      	ldr	r2, [pc, #568]	@ (8002cb4 <HAL_DMA_IRQHandler+0x24c>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0a9b      	lsrs	r3, r3, #10
 8002a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	2208      	movs	r2, #8
 8002a94:	409a      	lsls	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01a      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad8:	2201      	movs	r2, #1
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	2201      	movs	r2, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	2204      	movs	r2, #4
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00b      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b44:	2210      	movs	r2, #16
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d043      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03c      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2210      	movs	r2, #16
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d018      	beq.n	8002baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d024      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
 8002b96:	e01f      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e016      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0208 	bic.w	r2, r2, #8
 8002bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	2220      	movs	r2, #32
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 808f 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8087 	beq.w	8002d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	2220      	movs	r2, #32
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d136      	bne.n	8002c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0216 	bic.w	r2, r2, #22
 8002c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x1da>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0208 	bic.w	r2, r2, #8
 8002c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c56:	223f      	movs	r2, #63	@ 0x3f
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d07e      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
        }
        return;
 8002c7e:	e079      	b.n	8002d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e02c      	b.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
 8002cae:	bf00      	nop
 8002cb0:	20000018 	.word	0x20000018
 8002cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
 8002cc8:	e01e      	b.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10f      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0210 	bic.w	r2, r2, #16
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d032      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d022      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2205      	movs	r2, #5
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d307      	bcc.n	8002d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f2      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x2cc>
 8002d4e:	e000      	b.n	8002d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d74:	bf00      	nop
    }
  }
}
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b40      	cmp	r3, #64	@ 0x40
 8002da8:	d108      	bne.n	8002dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dba:	e007      	b.n	8002dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3b10      	subs	r3, #16
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <DMA_CalcBaseAndBitshift+0x64>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002df2:	4a13      	ldr	r2, [pc, #76]	@ (8002e40 <DMA_CalcBaseAndBitshift+0x68>)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d909      	bls.n	8002e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e18:	e007      	b.n	8002e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	aaaaaaab 	.word	0xaaaaaaab
 8002e40:	08007150 	.word	0x08007150

08002e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11f      	bne.n	8002e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d856      	bhi.n	8002f12 <DMA_CheckFifoParam+0xce>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <DMA_CheckFifoParam+0x28>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e8f 	.word	0x08002e8f
 8002e74:	08002e7d 	.word	0x08002e7d
 8002e78:	08002f13 	.word	0x08002f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d046      	beq.n	8002f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e043      	b.n	8002f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e96:	d140      	bne.n	8002f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9c:	e03d      	b.n	8002f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea6:	d121      	bne.n	8002eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d837      	bhi.n	8002f1e <DMA_CheckFifoParam+0xda>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <DMA_CheckFifoParam+0x70>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ecb 	.word	0x08002ecb
 8002ebc:	08002ec5 	.word	0x08002ec5
 8002ec0:	08002edd 	.word	0x08002edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec8:	e030      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d025      	beq.n	8002f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eda:	e022      	b.n	8002f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eea:	e01c      	b.n	8002f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d903      	bls.n	8002efa <DMA_CheckFifoParam+0xb6>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d003      	beq.n	8002f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ef8:	e018      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      break;
 8002efe:	e015      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e00b      	b.n	8002f2a <DMA_CheckFifoParam+0xe6>
      break;
 8002f12:	bf00      	nop
 8002f14:	e00a      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
 8002f18:	e008      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e006      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e004      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e002      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	@ 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	e165      	b.n	8003224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	f040 8154 	bne.w	800321e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d005      	beq.n	8002f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d130      	bne.n	8002ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 0201 	and.w	r2, r3, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d017      	beq.n	800302c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d123      	bne.n	8003080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	08da      	lsrs	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3208      	adds	r2, #8
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	220f      	movs	r2, #15
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80ae 	beq.w	800321e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b5d      	ldr	r3, [pc, #372]	@ (800323c <HAL_GPIO_Init+0x300>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	4a5c      	ldr	r2, [pc, #368]	@ (800323c <HAL_GPIO_Init+0x300>)
 80030cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d2:	4b5a      	ldr	r3, [pc, #360]	@ (800323c <HAL_GPIO_Init+0x300>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030de:	4a58      	ldr	r2, [pc, #352]	@ (8003240 <HAL_GPIO_Init+0x304>)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4f      	ldr	r2, [pc, #316]	@ (8003244 <HAL_GPIO_Init+0x308>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d025      	beq.n	8003156 <HAL_GPIO_Init+0x21a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4e      	ldr	r2, [pc, #312]	@ (8003248 <HAL_GPIO_Init+0x30c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <HAL_GPIO_Init+0x216>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4d      	ldr	r2, [pc, #308]	@ (800324c <HAL_GPIO_Init+0x310>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x212>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4c      	ldr	r2, [pc, #304]	@ (8003250 <HAL_GPIO_Init+0x314>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x20e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4b      	ldr	r2, [pc, #300]	@ (8003254 <HAL_GPIO_Init+0x318>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x20a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4a      	ldr	r2, [pc, #296]	@ (8003258 <HAL_GPIO_Init+0x31c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x206>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a49      	ldr	r2, [pc, #292]	@ (800325c <HAL_GPIO_Init+0x320>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x202>
 800313a:	2306      	movs	r3, #6
 800313c:	e00c      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 800313e:	2307      	movs	r3, #7
 8003140:	e00a      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003142:	2305      	movs	r3, #5
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003168:	4935      	ldr	r1, [pc, #212]	@ (8003240 <HAL_GPIO_Init+0x304>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003176:	4b3a      	ldr	r3, [pc, #232]	@ (8003260 <HAL_GPIO_Init+0x324>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319a:	4a31      	ldr	r2, [pc, #196]	@ (8003260 <HAL_GPIO_Init+0x324>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003260 <HAL_GPIO_Init+0x324>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c4:	4a26      	ldr	r2, [pc, #152]	@ (8003260 <HAL_GPIO_Init+0x324>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ca:	4b25      	ldr	r3, [pc, #148]	@ (8003260 <HAL_GPIO_Init+0x324>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003260 <HAL_GPIO_Init+0x324>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <HAL_GPIO_Init+0x324>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003218:	4a11      	ldr	r2, [pc, #68]	@ (8003260 <HAL_GPIO_Init+0x324>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f ae96 	bls.w	8002f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40021400 	.word	0x40021400
 800325c:	40021800 	.word	0x40021800
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	619a      	str	r2, [r3, #24]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0cc      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b68      	ldr	r3, [pc, #416]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d90c      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b65      	ldr	r3, [pc, #404]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b63      	ldr	r3, [pc, #396]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a58      	ldr	r2, [pc, #352]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800330e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b50      	ldr	r3, [pc, #320]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	494d      	ldr	r1, [pc, #308]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d044      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d119      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	4b3f      	ldr	r3, [pc, #252]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e067      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b37      	ldr	r3, [pc, #220]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4934      	ldr	r1, [pc, #208]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7ff f8b8 	bl	80024fc <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7ff f8b4 	bl	80024fc <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e04f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b25      	ldr	r3, [pc, #148]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d20c      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e032      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4916      	ldr	r1, [pc, #88]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490e      	ldr	r1, [pc, #56]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341e:	f000 f855 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490a      	ldr	r1, [pc, #40]	@ (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f818 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00
 8003454:	40023800 	.word	0x40023800
 8003458:	08007138 	.word	0x08007138
 800345c:	20000018 	.word	0x20000018
 8003460:	2000001c 	.word	0x2000001c

08003464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000018 	.word	0x20000018

0800347c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003480:	f7ff fff0 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b05      	ldr	r3, [pc, #20]	@ (800349c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0a9b      	lsrs	r3, r3, #10
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4903      	ldr	r1, [pc, #12]	@ (80034a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	08007148 	.word	0x08007148

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a8:	f7ff ffdc 	bl	8003464 <HAL_RCC_GetHCLKFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	0b5b      	lsrs	r3, r3, #13
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4903      	ldr	r1, [pc, #12]	@ (80034c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	08007148 	.word	0x08007148

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d0:	b0ae      	sub	sp, #184	@ 0xb8
 80034d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f2:	4bcb      	ldr	r3, [pc, #812]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	f200 8206 	bhi.w	800390c <HAL_RCC_GetSysClockFreq+0x440>
 8003500:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	0800353d 	.word	0x0800353d
 800350c:	0800390d 	.word	0x0800390d
 8003510:	0800390d 	.word	0x0800390d
 8003514:	0800390d 	.word	0x0800390d
 8003518:	08003545 	.word	0x08003545
 800351c:	0800390d 	.word	0x0800390d
 8003520:	0800390d 	.word	0x0800390d
 8003524:	0800390d 	.word	0x0800390d
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800390d 	.word	0x0800390d
 8003530:	0800390d 	.word	0x0800390d
 8003534:	0800390d 	.word	0x0800390d
 8003538:	0800373d 	.word	0x0800373d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4bb9      	ldr	r3, [pc, #740]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x358>)
 800353e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003542:	e1e7      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003544:	4bb8      	ldr	r3, [pc, #736]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800354a:	e1e3      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800354c:	4bb4      	ldr	r3, [pc, #720]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003558:	4bb1      	ldr	r3, [pc, #708]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d071      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003564:	4bae      	ldr	r3, [pc, #696]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003570:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003574:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800358a:	4622      	mov	r2, r4
 800358c:	462b      	mov	r3, r5
 800358e:	f04f 0000 	mov.w	r0, #0
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	0159      	lsls	r1, r3, #5
 8003598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800359c:	0150      	lsls	r0, r2, #5
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4621      	mov	r1, r4
 80035a4:	1a51      	subs	r1, r2, r1
 80035a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb63 0301 	sbc.w	r3, r3, r1
 80035ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035bc:	4649      	mov	r1, r9
 80035be:	018b      	lsls	r3, r1, #6
 80035c0:	4641      	mov	r1, r8
 80035c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c6:	4641      	mov	r1, r8
 80035c8:	018a      	lsls	r2, r1, #6
 80035ca:	4641      	mov	r1, r8
 80035cc:	1a51      	subs	r1, r2, r1
 80035ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035d0:	4649      	mov	r1, r9
 80035d2:	eb63 0301 	sbc.w	r3, r3, r1
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80035e4:	4649      	mov	r1, r9
 80035e6:	00cb      	lsls	r3, r1, #3
 80035e8:	4641      	mov	r1, r8
 80035ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ee:	4641      	mov	r1, r8
 80035f0:	00ca      	lsls	r2, r1, #3
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	4622      	mov	r2, r4
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fe:	462b      	mov	r3, r5
 8003600:	460a      	mov	r2, r1
 8003602:	eb42 0303 	adc.w	r3, r2, r3
 8003606:	637b      	str	r3, [r7, #52]	@ 0x34
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003614:	4629      	mov	r1, r5
 8003616:	024b      	lsls	r3, r1, #9
 8003618:	4621      	mov	r1, r4
 800361a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800361e:	4621      	mov	r1, r4
 8003620:	024a      	lsls	r2, r1, #9
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003630:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003634:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003638:	f7fd fa58 	bl	8000aec <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003646:	e067      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003648:	4b75      	ldr	r3, [pc, #468]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003654:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003658:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003662:	2300      	movs	r3, #0
 8003664:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003666:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800366a:	4622      	mov	r2, r4
 800366c:	462b      	mov	r3, r5
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	0159      	lsls	r1, r3, #5
 8003678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367c:	0150      	lsls	r0, r2, #5
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4621      	mov	r1, r4
 8003684:	1a51      	subs	r1, r2, r1
 8003686:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003688:	4629      	mov	r1, r5
 800368a:	eb63 0301 	sbc.w	r3, r3, r1
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800369c:	4649      	mov	r1, r9
 800369e:	018b      	lsls	r3, r1, #6
 80036a0:	4641      	mov	r1, r8
 80036a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a6:	4641      	mov	r1, r8
 80036a8:	018a      	lsls	r2, r1, #6
 80036aa:	4641      	mov	r1, r8
 80036ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80036b0:	4649      	mov	r1, r9
 80036b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ca:	4692      	mov	sl, r2
 80036cc:	469b      	mov	fp, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	eb1a 0303 	adds.w	r3, sl, r3
 80036d4:	623b      	str	r3, [r7, #32]
 80036d6:	462b      	mov	r3, r5
 80036d8:	eb4b 0303 	adc.w	r3, fp, r3
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036ea:	4629      	mov	r1, r5
 80036ec:	028b      	lsls	r3, r1, #10
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f4:	4621      	mov	r1, r4
 80036f6:	028a      	lsls	r2, r1, #10
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003700:	2200      	movs	r2, #0
 8003702:	673b      	str	r3, [r7, #112]	@ 0x70
 8003704:	677a      	str	r2, [r7, #116]	@ 0x74
 8003706:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800370a:	f7fd f9ef 	bl	8000aec <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4613      	mov	r3, r2
 8003714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003718:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	3301      	adds	r3, #1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800372a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800372e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800373a:	e0eb      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b38      	ldr	r3, [pc, #224]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003748:	4b35      	ldr	r3, [pc, #212]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d06b      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003754:	4b32      	ldr	r3, [pc, #200]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x354>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	2200      	movs	r2, #0
 800375c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800375e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	663b      	str	r3, [r7, #96]	@ 0x60
 8003768:	2300      	movs	r3, #0
 800376a:	667b      	str	r3, [r7, #100]	@ 0x64
 800376c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003770:	4622      	mov	r2, r4
 8003772:	462b      	mov	r3, r5
 8003774:	f04f 0000 	mov.w	r0, #0
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	0159      	lsls	r1, r3, #5
 800377e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003782:	0150      	lsls	r0, r2, #5
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4621      	mov	r1, r4
 800378a:	1a51      	subs	r1, r2, r1
 800378c:	61b9      	str	r1, [r7, #24]
 800378e:	4629      	mov	r1, r5
 8003790:	eb63 0301 	sbc.w	r3, r3, r1
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037a2:	4659      	mov	r1, fp
 80037a4:	018b      	lsls	r3, r1, #6
 80037a6:	4651      	mov	r1, sl
 80037a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ac:	4651      	mov	r1, sl
 80037ae:	018a      	lsls	r2, r1, #6
 80037b0:	4651      	mov	r1, sl
 80037b2:	ebb2 0801 	subs.w	r8, r2, r1
 80037b6:	4659      	mov	r1, fp
 80037b8:	eb63 0901 	sbc.w	r9, r3, r1
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d0:	4690      	mov	r8, r2
 80037d2:	4699      	mov	r9, r3
 80037d4:	4623      	mov	r3, r4
 80037d6:	eb18 0303 	adds.w	r3, r8, r3
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	462b      	mov	r3, r5
 80037de:	eb49 0303 	adc.w	r3, r9, r3
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037f0:	4629      	mov	r1, r5
 80037f2:	024b      	lsls	r3, r1, #9
 80037f4:	4621      	mov	r1, r4
 80037f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037fa:	4621      	mov	r1, r4
 80037fc:	024a      	lsls	r2, r1, #9
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003806:	2200      	movs	r2, #0
 8003808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800380a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800380c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003810:	f7fd f96c 	bl	8000aec <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4613      	mov	r3, r2
 800381a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800381e:	e065      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x420>
 8003820:	40023800 	.word	0x40023800
 8003824:	00f42400 	.word	0x00f42400
 8003828:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382c:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x458>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	2200      	movs	r2, #0
 8003834:	4618      	mov	r0, r3
 8003836:	4611      	mov	r1, r2
 8003838:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800383c:	653b      	str	r3, [r7, #80]	@ 0x50
 800383e:	2300      	movs	r3, #0
 8003840:	657b      	str	r3, [r7, #84]	@ 0x54
 8003842:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003846:	4642      	mov	r2, r8
 8003848:	464b      	mov	r3, r9
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	0159      	lsls	r1, r3, #5
 8003854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003858:	0150      	lsls	r0, r2, #5
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4641      	mov	r1, r8
 8003860:	1a51      	subs	r1, r2, r1
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	4649      	mov	r1, r9
 8003866:	eb63 0301 	sbc.w	r3, r3, r1
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003878:	4659      	mov	r1, fp
 800387a:	018b      	lsls	r3, r1, #6
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003882:	4651      	mov	r1, sl
 8003884:	018a      	lsls	r2, r1, #6
 8003886:	4651      	mov	r1, sl
 8003888:	1a54      	subs	r4, r2, r1
 800388a:	4659      	mov	r1, fp
 800388c:	eb63 0501 	sbc.w	r5, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	00eb      	lsls	r3, r5, #3
 800389a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389e:	00e2      	lsls	r2, r4, #3
 80038a0:	4614      	mov	r4, r2
 80038a2:	461d      	mov	r5, r3
 80038a4:	4643      	mov	r3, r8
 80038a6:	18e3      	adds	r3, r4, r3
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	464b      	mov	r3, r9
 80038ac:	eb45 0303 	adc.w	r3, r5, r3
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038be:	4629      	mov	r1, r5
 80038c0:	028b      	lsls	r3, r1, #10
 80038c2:	4621      	mov	r1, r4
 80038c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c8:	4621      	mov	r1, r4
 80038ca:	028a      	lsls	r2, r1, #10
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038d4:	2200      	movs	r2, #0
 80038d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038de:	f7fd f905 	bl	8000aec <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4613      	mov	r3, r2
 80038e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x458>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0f1b      	lsrs	r3, r3, #28
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80038fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800390a:	e003      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x45c>)
 800390e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003912:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003914:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003918:	4618      	mov	r0, r3
 800391a:	37b8      	adds	r7, #184	@ 0xb8
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	00f42400 	.word	0x00f42400

0800392c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e28d      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8083 	beq.w	8003a52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800394c:	4b94      	ldr	r3, [pc, #592]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b04      	cmp	r3, #4
 8003956:	d019      	beq.n	800398c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003958:	4b91      	ldr	r3, [pc, #580]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003960:	2b08      	cmp	r3, #8
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003964:	4b8e      	ldr	r3, [pc, #568]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003970:	d00c      	beq.n	800398c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b8b      	ldr	r3, [pc, #556]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d112      	bne.n	80039a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b88      	ldr	r3, [pc, #544]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800398a:	d10b      	bne.n	80039a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	4b84      	ldr	r3, [pc, #528]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05b      	beq.n	8003a50 <HAL_RCC_OscConfig+0x124>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d157      	bne.n	8003a50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e25a      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x90>
 80039ae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e01d      	b.n	80039f8 <HAL_RCC_OscConfig+0xcc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0xb4>
 80039c6:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a72      	ldr	r2, [pc, #456]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0xcc>
 80039e0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d013      	beq.n	8003a28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fd7c 	bl	80024fc <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fe fd78 	bl	80024fc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e21f      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b61      	ldr	r3, [pc, #388]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0xdc>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe fd68 	bl	80024fc <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe fd64 	bl	80024fc <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	@ 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e20b      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b57      	ldr	r3, [pc, #348]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x104>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d06f      	beq.n	8003b3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a5e:	4b50      	ldr	r3, [pc, #320]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d017      	beq.n	8003a9a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d105      	bne.n	8003a82 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b47      	ldr	r3, [pc, #284]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x186>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1d3      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4937      	ldr	r1, [pc, #220]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b34      	ldr	r3, [pc, #208]	@ (8003ba4 <HAL_RCC_OscConfig+0x278>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fd11 	bl	80024fc <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe fd0d 	bl	80024fc <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1b4      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4925      	ldr	r1, [pc, #148]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <HAL_RCC_OscConfig+0x278>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe fcf0 	bl	80024fc <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fe fcec 	bl	80024fc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e193      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fe fcd0 	bl	80024fc <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe fccc 	bl	80024fc <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e173      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x234>
 8003b7e:	e01b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_OscConfig+0x27c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fe fcb9 	bl	80024fc <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e00e      	b.n	8003bac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fe fcb5 	bl	80024fc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d907      	bls.n	8003bac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e15c      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b8a      	ldr	r3, [pc, #552]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ea      	bne.n	8003b8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8097 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b83      	ldr	r3, [pc, #524]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be6:	4b7c      	ldr	r3, [pc, #496]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b79      	ldr	r3, [pc, #484]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe fc75 	bl	80024fc <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe fc71 	bl	80024fc <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e118      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b6c      	ldr	r3, [pc, #432]	@ (8003ddc <HAL_RCC_OscConfig+0x4b0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x31e>
 8003c3c:	4b66      	ldr	r3, [pc, #408]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a65      	ldr	r2, [pc, #404]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x358>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x340>
 8003c52:	4b61      	ldr	r3, [pc, #388]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4a60      	ldr	r2, [pc, #384]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a5d      	ldr	r2, [pc, #372]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x358>
 8003c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a59      	ldr	r2, [pc, #356]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	4b57      	ldr	r3, [pc, #348]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a56      	ldr	r2, [pc, #344]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fc36 	bl	80024fc <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fe fc32 	bl	80024fc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0d7      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x368>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fe fc20 	bl	80024fc <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fc1c 	bl	80024fc <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0c1      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	4b40      	ldr	r3, [pc, #256]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80ad 	beq.w	8003e58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfe:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d060      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d145      	bne.n	8003d9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b33      	ldr	r3, [pc, #204]	@ (8003de0 <HAL_RCC_OscConfig+0x4b4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fbf0 	bl	80024fc <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe fbec 	bl	80024fc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e093      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b29      	ldr	r3, [pc, #164]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	071b      	lsls	r3, r3, #28
 8003d6a:	491b      	ldr	r1, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x4b4>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fe fbc1 	bl	80024fc <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fe fbbd 	bl	80024fc <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e064      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x452>
 8003d9c:	e05c      	b.n	8003e58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <HAL_RCC_OscConfig+0x4b4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe fbaa 	bl	80024fc <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fe fba6 	bl	80024fc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e04d      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x480>
 8003dca:	e045      	b.n	8003e58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e040      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e64 <HAL_RCC_OscConfig+0x538>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d030      	beq.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d129      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d122      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d119      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d10f      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800

08003e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e041      	b.n	8003efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe f82e 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f000 fc0c 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e041      	b.n	8003f9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f839 	bl	8003fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f000 fbbd 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_TIM_PWM_Start+0x24>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e022      	b.n	8004022 <HAL_TIM_PWM_Start+0x6a>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d109      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x3e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e015      	b.n	8004022 <HAL_TIM_PWM_Start+0x6a>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start+0x58>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e008      	b.n	8004022 <HAL_TIM_PWM_Start+0x6a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07c      	b.n	8004124 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0x82>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004038:	e013      	b.n	8004062 <HAL_TIM_PWM_Start+0xaa>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Start+0x92>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004048:	e00b      	b.n	8004062 <HAL_TIM_PWM_Start+0xaa>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d104      	bne.n	800405a <HAL_TIM_PWM_Start+0xa2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004058:	e003      	b.n	8004062 <HAL_TIM_PWM_Start+0xaa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fe20 	bl	8004cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2d      	ldr	r2, [pc, #180]	@ (800412c <HAL_TIM_PWM_Start+0x174>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_PWM_Start+0xcc>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <HAL_TIM_PWM_Start+0x178>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_TIM_PWM_Start+0xd0>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_TIM_PWM_Start+0xd2>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a22      	ldr	r2, [pc, #136]	@ (800412c <HAL_TIM_PWM_Start+0x174>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d01d      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004134 <HAL_TIM_PWM_Start+0x17c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <HAL_TIM_PWM_Start+0x180>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1c      	ldr	r2, [pc, #112]	@ (800413c <HAL_TIM_PWM_Start+0x184>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a16      	ldr	r2, [pc, #88]	@ (8004130 <HAL_TIM_PWM_Start+0x178>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a18      	ldr	r2, [pc, #96]	@ (8004140 <HAL_TIM_PWM_Start+0x188>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a16      	ldr	r2, [pc, #88]	@ (8004144 <HAL_TIM_PWM_Start+0x18c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d111      	bne.n	8004112 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d010      	beq.n	8004122 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	e007      	b.n	8004122 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40010000 	.word	0x40010000
 8004130:	40010400 	.word	0x40010400
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40014000 	.word	0x40014000
 8004144:	40001800 	.word	0x40001800

08004148 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e097      	b.n	800428c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fd fef5 	bl	8001f60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800418c:	f023 0307 	bic.w	r3, r3, #7
 8004190:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f000 fa91 	bl	80046c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	4313      	orrs	r3, r2
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80041e8:	f023 030c 	bic.w	r3, r3, #12
 80041ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	4313      	orrs	r3, r2
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	011a      	lsls	r2, r3, #4
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	031b      	lsls	r3, r3, #12
 8004218:	4313      	orrs	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	4313      	orrs	r3, r2
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80042bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d110      	bne.n	80042e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d102      	bne.n	80042d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ca:	7b7b      	ldrb	r3, [r7, #13]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e069      	b.n	80043a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042e4:	e031      	b.n	800434a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d110      	bne.n	800430e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ec:	7bbb      	ldrb	r3, [r7, #14]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d102      	bne.n	80042f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042f2:	7b3b      	ldrb	r3, [r7, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e055      	b.n	80043a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800430c:	e01d      	b.n	800434a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d108      	bne.n	8004326 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004314:	7bbb      	ldrb	r3, [r7, #14]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800431a:	7b7b      	ldrb	r3, [r7, #13]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004320:	7b3b      	ldrb	r3, [r7, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e03e      	b.n	80043a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_TIM_Encoder_Start+0xc4>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d008      	beq.n	8004368 <HAL_TIM_Encoder_Start+0xd4>
 8004356:	e00f      	b.n	8004378 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fca5 	bl	8004cb0 <TIM_CCxChannelCmd>
      break;
 8004366:	e016      	b.n	8004396 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	2104      	movs	r1, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fc9d 	bl	8004cb0 <TIM_CCxChannelCmd>
      break;
 8004376:	e00e      	b.n	8004396 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fc95 	bl	8004cb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2201      	movs	r2, #1
 800438c:	2104      	movs	r1, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fc8e 	bl	8004cb0 <TIM_CCxChannelCmd>
      break;
 8004394:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e0ae      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	f200 809f 	bhi.w	800451c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043de:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004419 	.word	0x08004419
 80043e8:	0800451d 	.word	0x0800451d
 80043ec:	0800451d 	.word	0x0800451d
 80043f0:	0800451d 	.word	0x0800451d
 80043f4:	08004459 	.word	0x08004459
 80043f8:	0800451d 	.word	0x0800451d
 80043fc:	0800451d 	.word	0x0800451d
 8004400:	0800451d 	.word	0x0800451d
 8004404:	0800449b 	.word	0x0800449b
 8004408:	0800451d 	.word	0x0800451d
 800440c:	0800451d 	.word	0x0800451d
 8004410:	0800451d 	.word	0x0800451d
 8004414:	080044db 	.word	0x080044db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f9fc 	bl	800481c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0208 	orr.w	r2, r2, #8
 8004432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0204 	bic.w	r2, r2, #4
 8004442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6999      	ldr	r1, [r3, #24]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	619a      	str	r2, [r3, #24]
      break;
 8004456:	e064      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fa4c 	bl	80048fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6999      	ldr	r1, [r3, #24]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	619a      	str	r2, [r3, #24]
      break;
 8004498:	e043      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 faa1 	bl	80049e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0208 	orr.w	r2, r2, #8
 80044b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0204 	bic.w	r2, r2, #4
 80044c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69d9      	ldr	r1, [r3, #28]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	61da      	str	r2, [r3, #28]
      break;
 80044d8:	e023      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 faf5 	bl	8004ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69d9      	ldr	r1, [r3, #28]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	61da      	str	r2, [r3, #28]
      break;
 800451a:	e002      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
      break;
 8004520:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIM_ConfigClockSource+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e0b4      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x186>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800456e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004588:	d03e      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0xd4>
 800458a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800458e:	f200 8087 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004596:	f000 8086 	beq.w	80046a6 <HAL_TIM_ConfigClockSource+0x172>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800459e:	d87f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b70      	cmp	r3, #112	@ 0x70
 80045a2:	d01a      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xa6>
 80045a4:	2b70      	cmp	r3, #112	@ 0x70
 80045a6:	d87b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b60      	cmp	r3, #96	@ 0x60
 80045aa:	d050      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x11a>
 80045ac:	2b60      	cmp	r3, #96	@ 0x60
 80045ae:	d877      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b50      	cmp	r3, #80	@ 0x50
 80045b2:	d03c      	beq.n	800462e <HAL_TIM_ConfigClockSource+0xfa>
 80045b4:	2b50      	cmp	r3, #80	@ 0x50
 80045b6:	d873      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d058      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x13a>
 80045bc:	2b40      	cmp	r3, #64	@ 0x40
 80045be:	d86f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b30      	cmp	r3, #48	@ 0x30
 80045c2:	d064      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b30      	cmp	r3, #48	@ 0x30
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d867      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05c      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d05a      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	e062      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ea:	f000 fb41 	bl	8004c70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	609a      	str	r2, [r3, #8]
      break;
 8004606:	e04f      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004618:	f000 fb2a 	bl	8004c70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	461a      	mov	r2, r3
 800463c:	f000 fa9e 	bl	8004b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	@ 0x50
 8004646:	4618      	mov	r0, r3
 8004648:	f000 faf7 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 800464c:	e02c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	461a      	mov	r2, r3
 800465c:	f000 fabd 	bl	8004bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	@ 0x60
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fae7 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 800466c:	e01c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	461a      	mov	r2, r3
 800467c:	f000 fa7e 	bl	8004b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	@ 0x40
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fad7 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 800468c:	e00c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f000 face 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 800469e:	e003      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a46      	ldr	r2, [pc, #280]	@ (80047f0 <TIM_Base_SetConfig+0x12c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e2:	d00f      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a43      	ldr	r2, [pc, #268]	@ (80047f4 <TIM_Base_SetConfig+0x130>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00b      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a42      	ldr	r2, [pc, #264]	@ (80047f8 <TIM_Base_SetConfig+0x134>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d007      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a41      	ldr	r2, [pc, #260]	@ (80047fc <TIM_Base_SetConfig+0x138>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a40      	ldr	r2, [pc, #256]	@ (8004800 <TIM_Base_SetConfig+0x13c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a35      	ldr	r2, [pc, #212]	@ (80047f0 <TIM_Base_SetConfig+0x12c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d02b      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004724:	d027      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a32      	ldr	r2, [pc, #200]	@ (80047f4 <TIM_Base_SetConfig+0x130>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d023      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a31      	ldr	r2, [pc, #196]	@ (80047f8 <TIM_Base_SetConfig+0x134>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a30      	ldr	r2, [pc, #192]	@ (80047fc <TIM_Base_SetConfig+0x138>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01b      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2f      	ldr	r2, [pc, #188]	@ (8004800 <TIM_Base_SetConfig+0x13c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d017      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2e      	ldr	r2, [pc, #184]	@ (8004804 <TIM_Base_SetConfig+0x140>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2d      	ldr	r2, [pc, #180]	@ (8004808 <TIM_Base_SetConfig+0x144>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2c      	ldr	r2, [pc, #176]	@ (800480c <TIM_Base_SetConfig+0x148>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2b      	ldr	r2, [pc, #172]	@ (8004810 <TIM_Base_SetConfig+0x14c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2a      	ldr	r2, [pc, #168]	@ (8004814 <TIM_Base_SetConfig+0x150>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a29      	ldr	r2, [pc, #164]	@ (8004818 <TIM_Base_SetConfig+0x154>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <TIM_Base_SetConfig+0x12c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0xf8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a12      	ldr	r2, [pc, #72]	@ (8004800 <TIM_Base_SetConfig+0x13c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d103      	bne.n	80047c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f023 0201 	bic.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]
  }
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40010400 	.word	0x40010400
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800
 8004810:	40001800 	.word	0x40001800
 8004814:	40001c00 	.word	0x40001c00
 8004818:	40002000 	.word	0x40002000

0800481c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f023 0201 	bic.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 0302 	bic.w	r3, r3, #2
 8004864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a20      	ldr	r2, [pc, #128]	@ (80048f4 <TIM_OC1_SetConfig+0xd8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC1_SetConfig+0x64>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1f      	ldr	r2, [pc, #124]	@ (80048f8 <TIM_OC1_SetConfig+0xdc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10c      	bne.n	800489a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 0308 	bic.w	r3, r3, #8
 8004886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <TIM_OC1_SetConfig+0xd8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC1_SetConfig+0x8e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <TIM_OC1_SetConfig+0xdc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d111      	bne.n	80048ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	621a      	str	r2, [r3, #32]
}
 80048e8:	bf00      	nop
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40010400 	.word	0x40010400

080048fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f023 0210 	bic.w	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0320 	bic.w	r3, r3, #32
 8004946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a22      	ldr	r2, [pc, #136]	@ (80049e0 <TIM_OC2_SetConfig+0xe4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC2_SetConfig+0x68>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a21      	ldr	r2, [pc, #132]	@ (80049e4 <TIM_OC2_SetConfig+0xe8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10d      	bne.n	8004980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a17      	ldr	r2, [pc, #92]	@ (80049e0 <TIM_OC2_SetConfig+0xe4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_OC2_SetConfig+0x94>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <TIM_OC2_SetConfig+0xe8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d113      	bne.n	80049b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800499e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40010400 	.word	0x40010400

080049e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a21      	ldr	r2, [pc, #132]	@ (8004ac8 <TIM_OC3_SetConfig+0xe0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_OC3_SetConfig+0x66>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a20      	ldr	r2, [pc, #128]	@ (8004acc <TIM_OC3_SetConfig+0xe4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10d      	bne.n	8004a6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <TIM_OC3_SetConfig+0xe0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_OC3_SetConfig+0x92>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <TIM_OC3_SetConfig+0xe4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d113      	bne.n	8004aa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	621a      	str	r2, [r3, #32]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010400 	.word	0x40010400

08004ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a12      	ldr	r2, [pc, #72]	@ (8004b74 <TIM_OC4_SetConfig+0xa4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC4_SetConfig+0x68>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <TIM_OC4_SetConfig+0xa8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d109      	bne.n	8004b4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40010400 	.word	0x40010400

08004b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f023 0201 	bic.w	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 030a 	bic.w	r3, r3, #10
 8004bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f023 0210 	bic.w	r2, r3, #16
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	031b      	lsls	r3, r3, #12
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f043 0307 	orr.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	021a      	lsls	r2, r3, #8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1a      	ldr	r2, [r3, #32]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e05a      	b.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a21      	ldr	r2, [pc, #132]	@ (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d022      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d60:	d01d      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	@ (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d018      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10c      	bne.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40010400 	.word	0x40010400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40001800 	.word	0x40001800

08004df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e03d      	b.n	8004e8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e042      	b.n	8004f30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fd f8f4 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	@ 0x24
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 ff4f 	bl	8005d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	@ 0x28
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d175      	bne.n	8005044 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_UART_Transmit+0x2c>
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e06e      	b.n	8005046 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2221      	movs	r2, #33	@ 0x21
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f76:	f7fd fac1 	bl	80024fc <HAL_GetTick>
 8004f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f90:	d108      	bne.n	8004fa4 <HAL_UART_Transmit+0x6c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	e003      	b.n	8004fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fac:	e02e      	b.n	800500c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2180      	movs	r1, #128	@ 0x80
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fc27 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e03a      	b.n	8005046 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	3302      	adds	r3, #2
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	e007      	b.n	8004ffe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1cb      	bne.n	8004fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	2140      	movs	r1, #64	@ 0x40
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fbf3 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e006      	b.n	8005046 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	e000      	b.n	8005046 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005044:	2302      	movs	r3, #2
  }
}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	4613      	mov	r3, r2
 800505a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b20      	cmp	r3, #32
 8005066:	d112      	bne.n	800508e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_UART_Receive_DMA+0x26>
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e00b      	b.n	8005090 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	461a      	mov	r2, r3
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fc1b 	bl	80058c0 <UART_Start_Receive_DMA>
 800508a:	4603      	mov	r3, r0
 800508c:	e000      	b.n	8005090 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800508e:	2302      	movs	r3, #2
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b0ba      	sub	sp, #232	@ 0xe8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80050d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_UART_IRQHandler+0x66>
 80050ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fd83 	bl	8005c02 <UART_Receive_IT>
      return;
 80050fc:	e25b      	b.n	80055b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80de 	beq.w	80052c4 <HAL_UART_IRQHandler+0x22c>
 8005108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005118:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80d1 	beq.w	80052c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_UART_IRQHandler+0xae>
 800512e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	f043 0201 	orr.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_UART_IRQHandler+0xd2>
 8005152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	f043 0202 	orr.w	r2, r3, #2
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_UART_IRQHandler+0xf6>
 8005176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <HAL_UART_IRQHandler+0x126>
 800519a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b6:	f043 0208 	orr.w	r2, r3, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 81f2 	beq.w	80055ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_UART_IRQHandler+0x14e>
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fd0e 	bl	8005c02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f0:	2b40      	cmp	r3, #64	@ 0x40
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <HAL_UART_IRQHandler+0x17a>
 800520a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d04f      	beq.n	80052b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fc16 	bl	8005a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d141      	bne.n	80052aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3314      	adds	r3, #20
 800522c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800523c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005240:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3314      	adds	r3, #20
 800524e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005252:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800525e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800526a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1d9      	bne.n	8005226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d013      	beq.n	80052a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527e:	4a7e      	ldr	r2, [pc, #504]	@ (8005478 <HAL_UART_IRQHandler+0x3e0>)
 8005280:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd fbcc 	bl	8002a24 <HAL_DMA_Abort_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800529c:	4610      	mov	r0, r2
 800529e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	e00e      	b.n	80052c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f99e 	bl	80055e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	e00a      	b.n	80052c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f99a 	bl	80055e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	e006      	b.n	80052c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f996 	bl	80055e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80052be:	e175      	b.n	80055ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	bf00      	nop
    return;
 80052c2:	e173      	b.n	80055ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 814f 	bne.w	800556c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8148 	beq.w	800556c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8141 	beq.w	800556c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530a:	2b40      	cmp	r3, #64	@ 0x40
 800530c:	f040 80b6 	bne.w	800547c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800531c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8145 	beq.w	80055b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800532a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800532e:	429a      	cmp	r2, r3
 8005330:	f080 813e 	bcs.w	80055b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800533a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005346:	f000 8088 	beq.w	800545a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005376:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800537a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005382:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800538e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1d9      	bne.n	800534a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e1      	bne.n	8005396 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800543c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800543e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800544a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e3      	bne.n	8005418 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005454:	4618      	mov	r0, r3
 8005456:	f7fd fa75 	bl	8002944 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005468:	b29b      	uxth	r3, r3
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	b29b      	uxth	r3, r3
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8c1 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005476:	e09b      	b.n	80055b0 <HAL_UART_IRQHandler+0x518>
 8005478:	08005b0b 	.word	0x08005b0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005484:	b29b      	uxth	r3, r3
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 808e 	beq.w	80055b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8089 	beq.w	80055b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80054c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e3      	bne.n	80054a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3314      	adds	r3, #20
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	623b      	str	r3, [r7, #32]
   return(result);
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	f023 0301 	bic.w	r3, r3, #1
 80054f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3314      	adds	r3, #20
 80054fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e3      	bne.n	80054da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0310 	bic.w	r3, r3, #16
 8005536:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005544:	61fa      	str	r2, [r7, #28]
 8005546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	69b9      	ldr	r1, [r7, #24]
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	617b      	str	r3, [r7, #20]
   return(result);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e3      	bne.n	8005520 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800555e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f847 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800556a:	e023      	b.n	80055b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_UART_IRQHandler+0x4f4>
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800557c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fad4 	bl	8005b32 <UART_Transmit_IT>
    return;
 800558a:	e014      	b.n	80055b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800558c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00e      	beq.n	80055b6 <HAL_UART_IRQHandler+0x51e>
 8005598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fb14 	bl	8005bd2 <UART_EndTransmit_IT>
    return;
 80055aa:	e004      	b.n	80055b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80055ac:	bf00      	nop
 80055ae:	e002      	b.n	80055b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80055b4:	bf00      	nop
  }
}
 80055b6:	37e8      	adds	r7, #232	@ 0xe8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b09c      	sub	sp, #112	@ 0x70
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d172      	bne.n	8005712 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800562c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562e:	2200      	movs	r2, #0
 8005630:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800564a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005652:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005654:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3314      	adds	r3, #20
 800566c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	667b      	str	r3, [r7, #100]	@ 0x64
 800567e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3314      	adds	r3, #20
 8005684:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005686:	647a      	str	r2, [r7, #68]	@ 0x44
 8005688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800568c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e5      	bne.n	8005666 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	623b      	str	r3, [r7, #32]
   return(result);
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d119      	bne.n	8005712 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f023 0310 	bic.w	r3, r3, #16
 80056f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056fe:	61fa      	str	r2, [r7, #28]
 8005700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	69b9      	ldr	r1, [r7, #24]
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	617b      	str	r3, [r7, #20]
   return(result);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005714:	2200      	movs	r2, #0
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800571a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571c:	2b01      	cmp	r3, #1
 800571e:	d106      	bne.n	800572e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005722:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005724:	4619      	mov	r1, r3
 8005726:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005728:	f7ff ff66 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800572c:	e002      	b.n	8005734 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800572e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005730:	f7fb fb54 	bl	8000ddc <HAL_UART_RxCpltCallback>
}
 8005734:	bf00      	nop
 8005736:	3770      	adds	r7, #112	@ 0x70
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	2b01      	cmp	r3, #1
 8005756:	d108      	bne.n	800576a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	b29b      	uxth	r3, r3
 8005760:	4619      	mov	r1, r3
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ff48 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005768:	e002      	b.n	8005770 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff ff30 	bl	80055d0 <HAL_UART_RxHalfCpltCallback>
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005794:	2b80      	cmp	r3, #128	@ 0x80
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b21      	cmp	r3, #33	@ 0x21
 80057aa:	d108      	bne.n	80057be <UART_DMAError+0x46>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2200      	movs	r2, #0
 80057b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80057b8:	68b8      	ldr	r0, [r7, #8]
 80057ba:	f000 f91b 	bl	80059f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c8:	2b40      	cmp	r3, #64	@ 0x40
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b22      	cmp	r3, #34	@ 0x22
 80057de:	d108      	bne.n	80057f2 <UART_DMAError+0x7a>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80057ec:	68b8      	ldr	r0, [r7, #8]
 80057ee:	f000 f929 	bl	8005a44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	f043 0210 	orr.w	r2, r3, #16
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f7ff fef0 	bl	80055e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581c:	e03b      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d037      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fc fe69 	bl	80024fc <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	429a      	cmp	r2, r3
 8005834:	d302      	bcc.n	800583c <UART_WaitOnFlagUntilTimeout+0x30>
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e03a      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d023      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0x8a>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b80      	cmp	r3, #128	@ 0x80
 8005852:	d020      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b40      	cmp	r3, #64	@ 0x40
 8005858:	d01d      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b08      	cmp	r3, #8
 8005866:	d116      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f8e0 	bl	8005a44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2208      	movs	r2, #8
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e00f      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d0b4      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b098      	sub	sp, #96	@ 0x60
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2222      	movs	r2, #34	@ 0x22
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	4a3e      	ldr	r2, [pc, #248]	@ (80059e8 <UART_Start_Receive_DMA+0x128>)
 80058ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f4:	4a3d      	ldr	r2, [pc, #244]	@ (80059ec <UART_Start_Receive_DMA+0x12c>)
 80058f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	4a3c      	ldr	r2, [pc, #240]	@ (80059f0 <UART_Start_Receive_DMA+0x130>)
 80058fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005904:	2200      	movs	r2, #0
 8005906:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005908:	f107 0308 	add.w	r3, r7, #8
 800590c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	f7fc ffb8 	bl	8002894 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d019      	beq.n	8005976 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005958:	65bb      	str	r3, [r7, #88]	@ 0x58
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	330c      	adds	r3, #12
 8005960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005962:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005964:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3314      	adds	r3, #20
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	657b      	str	r3, [r7, #84]	@ 0x54
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3314      	adds	r3, #20
 8005994:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005996:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005998:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800599c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e5      	bne.n	8005976 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3314      	adds	r3, #20
 80059c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80059cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6a39      	ldr	r1, [r7, #32]
 80059d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e5      	bne.n	80059aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3760      	adds	r7, #96	@ 0x60
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	08005611 	.word	0x08005611
 80059ec:	0800573d 	.word	0x0800573d
 80059f0:	08005779 	.word	0x08005779

080059f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	61ba      	str	r2, [r7, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005a38:	bf00      	nop
 8005a3a:	3724      	adds	r7, #36	@ 0x24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b095      	sub	sp, #84	@ 0x54
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e5      	bne.n	8005a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3314      	adds	r3, #20
 8005a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e5      	bne.n	8005a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d119      	bne.n	8005af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 0310 	bic.w	r3, r3, #16
 8005ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005adc:	61ba      	str	r2, [r7, #24]
 8005ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005afe:	bf00      	nop
 8005b00:	3754      	adds	r7, #84	@ 0x54
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff fd5d 	bl	80055e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b21      	cmp	r3, #33	@ 0x21
 8005b44:	d13e      	bne.n	8005bc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b4e:	d114      	bne.n	8005b7a <UART_Transmit_IT+0x48>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d110      	bne.n	8005b7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]
 8005b78:	e008      	b.n	8005b8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6211      	str	r1, [r2, #32]
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10f      	bne.n	8005bc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bc4:	2302      	movs	r3, #2
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005be8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fce2 	bl	80055bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08c      	sub	sp, #48	@ 0x30
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b22      	cmp	r3, #34	@ 0x22
 8005c14:	f040 80ae 	bne.w	8005d74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c20:	d117      	bne.n	8005c52 <UART_Receive_IT+0x50>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d113      	bne.n	8005c52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	1c9a      	adds	r2, r3, #2
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c50:	e026      	b.n	8005ca0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c64:	d007      	beq.n	8005c76 <UART_Receive_IT+0x74>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <UART_Receive_IT+0x82>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e008      	b.n	8005c96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4619      	mov	r1, r3
 8005cae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d15d      	bne.n	8005d70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0220 	bic.w	r2, r2, #32
 8005cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d135      	bne.n	8005d66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f023 0310 	bic.w	r3, r3, #16
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d20:	623a      	str	r2, [r7, #32]
 8005d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	69f9      	ldr	r1, [r7, #28]
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e5      	bne.n	8005d00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d10a      	bne.n	8005d58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff fc4a 	bl	80055f8 <HAL_UARTEx_RxEventCallback>
 8005d64:	e002      	b.n	8005d6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fb f838 	bl	8000ddc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e002      	b.n	8005d76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3730      	adds	r7, #48	@ 0x30
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b0c0      	sub	sp, #256	@ 0x100
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	68d9      	ldr	r1, [r3, #12]
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	ea40 0301 	orr.w	r3, r0, r1
 8005da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005dd8:	f021 010c 	bic.w	r1, r1, #12
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005de6:	430b      	orrs	r3, r1
 8005de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	6999      	ldr	r1, [r3, #24]
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	ea40 0301 	orr.w	r3, r0, r1
 8005e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800604c <UART_SetConfig+0x2cc>)
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d005      	beq.n	8005e20 <UART_SetConfig+0xa0>
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8006050 <UART_SetConfig+0x2d0>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d104      	bne.n	8005e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e20:	f7fd fb40 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8005e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e28:	e003      	b.n	8005e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e2a:	f7fd fb27 	bl	800347c <HAL_RCC_GetPCLK1Freq>
 8005e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3c:	f040 810c 	bne.w	8006058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	1891      	adds	r1, r2, r2
 8005e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e5a:	415b      	adcs	r3, r3
 8005e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e62:	4621      	mov	r1, r4
 8005e64:	eb12 0801 	adds.w	r8, r2, r1
 8005e68:	4629      	mov	r1, r5
 8005e6a:	eb43 0901 	adc.w	r9, r3, r1
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e82:	4690      	mov	r8, r2
 8005e84:	4699      	mov	r9, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	eb18 0303 	adds.w	r3, r8, r3
 8005e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e90:	462b      	mov	r3, r5
 8005e92:	eb49 0303 	adc.w	r3, r9, r3
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005eae:	460b      	mov	r3, r1
 8005eb0:	18db      	adds	r3, r3, r3
 8005eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	eb42 0303 	adc.w	r3, r2, r3
 8005eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ec4:	f7fa fe12 	bl	8000aec <__aeabi_uldivmod>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4b61      	ldr	r3, [pc, #388]	@ (8006054 <UART_SetConfig+0x2d4>)
 8005ece:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	011c      	lsls	r4, r3, #4
 8005ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	1891      	adds	r1, r2, r2
 8005eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ef0:	415b      	adcs	r3, r3
 8005ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ef8:	4641      	mov	r1, r8
 8005efa:	eb12 0a01 	adds.w	sl, r2, r1
 8005efe:	4649      	mov	r1, r9
 8005f00:	eb43 0b01 	adc.w	fp, r3, r1
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f18:	4692      	mov	sl, r2
 8005f1a:	469b      	mov	fp, r3
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f26:	464b      	mov	r3, r9
 8005f28:	eb4b 0303 	adc.w	r3, fp, r3
 8005f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f44:	460b      	mov	r3, r1
 8005f46:	18db      	adds	r3, r3, r3
 8005f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	eb42 0303 	adc.w	r3, r2, r3
 8005f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f5a:	f7fa fdc7 	bl	8000aec <__aeabi_uldivmod>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	4b3b      	ldr	r3, [pc, #236]	@ (8006054 <UART_SetConfig+0x2d4>)
 8005f66:	fba3 2301 	umull	r2, r3, r3, r1
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2264      	movs	r2, #100	@ 0x64
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	1acb      	subs	r3, r1, r3
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f7a:	4b36      	ldr	r3, [pc, #216]	@ (8006054 <UART_SetConfig+0x2d4>)
 8005f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f88:	441c      	add	r4, r3
 8005f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	1891      	adds	r1, r2, r2
 8005fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fa4:	415b      	adcs	r3, r3
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fac:	4641      	mov	r1, r8
 8005fae:	1851      	adds	r1, r2, r1
 8005fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	414b      	adcs	r3, r1
 8005fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	00cb      	lsls	r3, r1, #3
 8005fc8:	4651      	mov	r1, sl
 8005fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fce:	4651      	mov	r1, sl
 8005fd0:	00ca      	lsls	r2, r1, #3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	4642      	mov	r2, r8
 8005fda:	189b      	adds	r3, r3, r2
 8005fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006000:	460b      	mov	r3, r1
 8006002:	18db      	adds	r3, r3, r3
 8006004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006006:	4613      	mov	r3, r2
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800600e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006016:	f7fa fd69 	bl	8000aec <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <UART_SetConfig+0x2d4>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	@ 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	3332      	adds	r3, #50	@ 0x32
 8006032:	4a08      	ldr	r2, [pc, #32]	@ (8006054 <UART_SetConfig+0x2d4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f003 0207 	and.w	r2, r3, #7
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4422      	add	r2, r4
 8006046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006048:	e106      	b.n	8006258 <UART_SetConfig+0x4d8>
 800604a:	bf00      	nop
 800604c:	40011000 	.word	0x40011000
 8006050:	40011400 	.word	0x40011400
 8006054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800606a:	4642      	mov	r2, r8
 800606c:	464b      	mov	r3, r9
 800606e:	1891      	adds	r1, r2, r2
 8006070:	6239      	str	r1, [r7, #32]
 8006072:	415b      	adcs	r3, r3
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
 8006076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800607a:	4641      	mov	r1, r8
 800607c:	1854      	adds	r4, r2, r1
 800607e:	4649      	mov	r1, r9
 8006080:	eb43 0501 	adc.w	r5, r3, r1
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	00eb      	lsls	r3, r5, #3
 800608e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006092:	00e2      	lsls	r2, r4, #3
 8006094:	4614      	mov	r4, r2
 8006096:	461d      	mov	r5, r3
 8006098:	4643      	mov	r3, r8
 800609a:	18e3      	adds	r3, r4, r3
 800609c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060a0:	464b      	mov	r3, r9
 80060a2:	eb45 0303 	adc.w	r3, r5, r3
 80060a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060c6:	4629      	mov	r1, r5
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	4621      	mov	r1, r4
 80060cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d0:	4621      	mov	r1, r4
 80060d2:	008a      	lsls	r2, r1, #2
 80060d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060d8:	f7fa fd08 	bl	8000aec <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4b60      	ldr	r3, [pc, #384]	@ (8006264 <UART_SetConfig+0x4e4>)
 80060e2:	fba3 2302 	umull	r2, r3, r3, r2
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	011c      	lsls	r4, r3, #4
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060fc:	4642      	mov	r2, r8
 80060fe:	464b      	mov	r3, r9
 8006100:	1891      	adds	r1, r2, r2
 8006102:	61b9      	str	r1, [r7, #24]
 8006104:	415b      	adcs	r3, r3
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800610c:	4641      	mov	r1, r8
 800610e:	1851      	adds	r1, r2, r1
 8006110:	6139      	str	r1, [r7, #16]
 8006112:	4649      	mov	r1, r9
 8006114:	414b      	adcs	r3, r1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006124:	4659      	mov	r1, fp
 8006126:	00cb      	lsls	r3, r1, #3
 8006128:	4651      	mov	r1, sl
 800612a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800612e:	4651      	mov	r1, sl
 8006130:	00ca      	lsls	r2, r1, #3
 8006132:	4610      	mov	r0, r2
 8006134:	4619      	mov	r1, r3
 8006136:	4603      	mov	r3, r0
 8006138:	4642      	mov	r2, r8
 800613a:	189b      	adds	r3, r3, r2
 800613c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006140:	464b      	mov	r3, r9
 8006142:	460a      	mov	r2, r1
 8006144:	eb42 0303 	adc.w	r3, r2, r3
 8006148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006164:	4649      	mov	r1, r9
 8006166:	008b      	lsls	r3, r1, #2
 8006168:	4641      	mov	r1, r8
 800616a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616e:	4641      	mov	r1, r8
 8006170:	008a      	lsls	r2, r1, #2
 8006172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006176:	f7fa fcb9 	bl	8000aec <__aeabi_uldivmod>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4611      	mov	r1, r2
 8006180:	4b38      	ldr	r3, [pc, #224]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006182:	fba3 2301 	umull	r2, r3, r3, r1
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	2264      	movs	r2, #100	@ 0x64
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	1acb      	subs	r3, r1, r3
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	3332      	adds	r3, #50	@ 0x32
 8006194:	4a33      	ldr	r2, [pc, #204]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061a0:	441c      	add	r4, r3
 80061a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a6:	2200      	movs	r2, #0
 80061a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80061aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80061ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061b0:	4642      	mov	r2, r8
 80061b2:	464b      	mov	r3, r9
 80061b4:	1891      	adds	r1, r2, r2
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	415b      	adcs	r3, r3
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c0:	4641      	mov	r1, r8
 80061c2:	1851      	adds	r1, r2, r1
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	4649      	mov	r1, r9
 80061c8:	414b      	adcs	r3, r1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061d8:	4659      	mov	r1, fp
 80061da:	00cb      	lsls	r3, r1, #3
 80061dc:	4651      	mov	r1, sl
 80061de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061e2:	4651      	mov	r1, sl
 80061e4:	00ca      	lsls	r2, r1, #3
 80061e6:	4610      	mov	r0, r2
 80061e8:	4619      	mov	r1, r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	4642      	mov	r2, r8
 80061ee:	189b      	adds	r3, r3, r2
 80061f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061f2:	464b      	mov	r3, r9
 80061f4:	460a      	mov	r2, r1
 80061f6:	eb42 0303 	adc.w	r3, r2, r3
 80061fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	663b      	str	r3, [r7, #96]	@ 0x60
 8006206:	667a      	str	r2, [r7, #100]	@ 0x64
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006214:	4649      	mov	r1, r9
 8006216:	008b      	lsls	r3, r1, #2
 8006218:	4641      	mov	r1, r8
 800621a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621e:	4641      	mov	r1, r8
 8006220:	008a      	lsls	r2, r1, #2
 8006222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006226:	f7fa fc61 	bl	8000aec <__aeabi_uldivmod>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006230:	fba3 1302 	umull	r1, r3, r3, r2
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	2164      	movs	r1, #100	@ 0x64
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	3332      	adds	r3, #50	@ 0x32
 8006242:	4a08      	ldr	r2, [pc, #32]	@ (8006264 <UART_SetConfig+0x4e4>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4422      	add	r2, r4
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800625e:	46bd      	mov	sp, r7
 8006260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006264:	51eb851f 	.word	0x51eb851f

08006268 <std>:
 8006268:	2300      	movs	r3, #0
 800626a:	b510      	push	{r4, lr}
 800626c:	4604      	mov	r4, r0
 800626e:	e9c0 3300 	strd	r3, r3, [r0]
 8006272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006276:	6083      	str	r3, [r0, #8]
 8006278:	8181      	strh	r1, [r0, #12]
 800627a:	6643      	str	r3, [r0, #100]	@ 0x64
 800627c:	81c2      	strh	r2, [r0, #14]
 800627e:	6183      	str	r3, [r0, #24]
 8006280:	4619      	mov	r1, r3
 8006282:	2208      	movs	r2, #8
 8006284:	305c      	adds	r0, #92	@ 0x5c
 8006286:	f000 f906 	bl	8006496 <memset>
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <std+0x58>)
 800628c:	6263      	str	r3, [r4, #36]	@ 0x24
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <std+0x5c>)
 8006290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <std+0x60>)
 8006294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006296:	4b0d      	ldr	r3, [pc, #52]	@ (80062cc <std+0x64>)
 8006298:	6323      	str	r3, [r4, #48]	@ 0x30
 800629a:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <std+0x68>)
 800629c:	6224      	str	r4, [r4, #32]
 800629e:	429c      	cmp	r4, r3
 80062a0:	d006      	beq.n	80062b0 <std+0x48>
 80062a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062a6:	4294      	cmp	r4, r2
 80062a8:	d002      	beq.n	80062b0 <std+0x48>
 80062aa:	33d0      	adds	r3, #208	@ 0xd0
 80062ac:	429c      	cmp	r4, r3
 80062ae:	d105      	bne.n	80062bc <std+0x54>
 80062b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b8:	f000 b966 	b.w	8006588 <__retarget_lock_init_recursive>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	bf00      	nop
 80062c0:	08006411 	.word	0x08006411
 80062c4:	08006433 	.word	0x08006433
 80062c8:	0800646b 	.word	0x0800646b
 80062cc:	0800648f 	.word	0x0800648f
 80062d0:	20000364 	.word	0x20000364

080062d4 <stdio_exit_handler>:
 80062d4:	4a02      	ldr	r2, [pc, #8]	@ (80062e0 <stdio_exit_handler+0xc>)
 80062d6:	4903      	ldr	r1, [pc, #12]	@ (80062e4 <stdio_exit_handler+0x10>)
 80062d8:	4803      	ldr	r0, [pc, #12]	@ (80062e8 <stdio_exit_handler+0x14>)
 80062da:	f000 b869 	b.w	80063b0 <_fwalk_sglue>
 80062de:	bf00      	nop
 80062e0:	20000024 	.word	0x20000024
 80062e4:	08006e29 	.word	0x08006e29
 80062e8:	20000034 	.word	0x20000034

080062ec <cleanup_stdio>:
 80062ec:	6841      	ldr	r1, [r0, #4]
 80062ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <cleanup_stdio+0x34>)
 80062f0:	4299      	cmp	r1, r3
 80062f2:	b510      	push	{r4, lr}
 80062f4:	4604      	mov	r4, r0
 80062f6:	d001      	beq.n	80062fc <cleanup_stdio+0x10>
 80062f8:	f000 fd96 	bl	8006e28 <_fflush_r>
 80062fc:	68a1      	ldr	r1, [r4, #8]
 80062fe:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <cleanup_stdio+0x38>)
 8006300:	4299      	cmp	r1, r3
 8006302:	d002      	beq.n	800630a <cleanup_stdio+0x1e>
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fd8f 	bl	8006e28 <_fflush_r>
 800630a:	68e1      	ldr	r1, [r4, #12]
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <cleanup_stdio+0x3c>)
 800630e:	4299      	cmp	r1, r3
 8006310:	d004      	beq.n	800631c <cleanup_stdio+0x30>
 8006312:	4620      	mov	r0, r4
 8006314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006318:	f000 bd86 	b.w	8006e28 <_fflush_r>
 800631c:	bd10      	pop	{r4, pc}
 800631e:	bf00      	nop
 8006320:	20000364 	.word	0x20000364
 8006324:	200003cc 	.word	0x200003cc
 8006328:	20000434 	.word	0x20000434

0800632c <global_stdio_init.part.0>:
 800632c:	b510      	push	{r4, lr}
 800632e:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <global_stdio_init.part.0+0x30>)
 8006330:	4c0b      	ldr	r4, [pc, #44]	@ (8006360 <global_stdio_init.part.0+0x34>)
 8006332:	4a0c      	ldr	r2, [pc, #48]	@ (8006364 <global_stdio_init.part.0+0x38>)
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	4620      	mov	r0, r4
 8006338:	2200      	movs	r2, #0
 800633a:	2104      	movs	r1, #4
 800633c:	f7ff ff94 	bl	8006268 <std>
 8006340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006344:	2201      	movs	r2, #1
 8006346:	2109      	movs	r1, #9
 8006348:	f7ff ff8e 	bl	8006268 <std>
 800634c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006350:	2202      	movs	r2, #2
 8006352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006356:	2112      	movs	r1, #18
 8006358:	f7ff bf86 	b.w	8006268 <std>
 800635c:	2000049c 	.word	0x2000049c
 8006360:	20000364 	.word	0x20000364
 8006364:	080062d5 	.word	0x080062d5

08006368 <__sfp_lock_acquire>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__sfp_lock_acquire+0x8>)
 800636a:	f000 b90e 	b.w	800658a <__retarget_lock_acquire_recursive>
 800636e:	bf00      	nop
 8006370:	200004a5 	.word	0x200004a5

08006374 <__sfp_lock_release>:
 8006374:	4801      	ldr	r0, [pc, #4]	@ (800637c <__sfp_lock_release+0x8>)
 8006376:	f000 b909 	b.w	800658c <__retarget_lock_release_recursive>
 800637a:	bf00      	nop
 800637c:	200004a5 	.word	0x200004a5

08006380 <__sinit>:
 8006380:	b510      	push	{r4, lr}
 8006382:	4604      	mov	r4, r0
 8006384:	f7ff fff0 	bl	8006368 <__sfp_lock_acquire>
 8006388:	6a23      	ldr	r3, [r4, #32]
 800638a:	b11b      	cbz	r3, 8006394 <__sinit+0x14>
 800638c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006390:	f7ff bff0 	b.w	8006374 <__sfp_lock_release>
 8006394:	4b04      	ldr	r3, [pc, #16]	@ (80063a8 <__sinit+0x28>)
 8006396:	6223      	str	r3, [r4, #32]
 8006398:	4b04      	ldr	r3, [pc, #16]	@ (80063ac <__sinit+0x2c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f5      	bne.n	800638c <__sinit+0xc>
 80063a0:	f7ff ffc4 	bl	800632c <global_stdio_init.part.0>
 80063a4:	e7f2      	b.n	800638c <__sinit+0xc>
 80063a6:	bf00      	nop
 80063a8:	080062ed 	.word	0x080062ed
 80063ac:	2000049c 	.word	0x2000049c

080063b0 <_fwalk_sglue>:
 80063b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b4:	4607      	mov	r7, r0
 80063b6:	4688      	mov	r8, r1
 80063b8:	4614      	mov	r4, r2
 80063ba:	2600      	movs	r6, #0
 80063bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063c0:	f1b9 0901 	subs.w	r9, r9, #1
 80063c4:	d505      	bpl.n	80063d2 <_fwalk_sglue+0x22>
 80063c6:	6824      	ldr	r4, [r4, #0]
 80063c8:	2c00      	cmp	r4, #0
 80063ca:	d1f7      	bne.n	80063bc <_fwalk_sglue+0xc>
 80063cc:	4630      	mov	r0, r6
 80063ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d907      	bls.n	80063e8 <_fwalk_sglue+0x38>
 80063d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063dc:	3301      	adds	r3, #1
 80063de:	d003      	beq.n	80063e8 <_fwalk_sglue+0x38>
 80063e0:	4629      	mov	r1, r5
 80063e2:	4638      	mov	r0, r7
 80063e4:	47c0      	blx	r8
 80063e6:	4306      	orrs	r6, r0
 80063e8:	3568      	adds	r5, #104	@ 0x68
 80063ea:	e7e9      	b.n	80063c0 <_fwalk_sglue+0x10>

080063ec <iprintf>:
 80063ec:	b40f      	push	{r0, r1, r2, r3}
 80063ee:	b507      	push	{r0, r1, r2, lr}
 80063f0:	4906      	ldr	r1, [pc, #24]	@ (800640c <iprintf+0x20>)
 80063f2:	ab04      	add	r3, sp, #16
 80063f4:	6808      	ldr	r0, [r1, #0]
 80063f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fa:	6881      	ldr	r1, [r0, #8]
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	f000 f9e9 	bl	80067d4 <_vfiprintf_r>
 8006402:	b003      	add	sp, #12
 8006404:	f85d eb04 	ldr.w	lr, [sp], #4
 8006408:	b004      	add	sp, #16
 800640a:	4770      	bx	lr
 800640c:	20000030 	.word	0x20000030

08006410 <__sread>:
 8006410:	b510      	push	{r4, lr}
 8006412:	460c      	mov	r4, r1
 8006414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006418:	f000 f868 	bl	80064ec <_read_r>
 800641c:	2800      	cmp	r0, #0
 800641e:	bfab      	itete	ge
 8006420:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006422:	89a3      	ldrhlt	r3, [r4, #12]
 8006424:	181b      	addge	r3, r3, r0
 8006426:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800642a:	bfac      	ite	ge
 800642c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800642e:	81a3      	strhlt	r3, [r4, #12]
 8006430:	bd10      	pop	{r4, pc}

08006432 <__swrite>:
 8006432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	461f      	mov	r7, r3
 8006438:	898b      	ldrh	r3, [r1, #12]
 800643a:	05db      	lsls	r3, r3, #23
 800643c:	4605      	mov	r5, r0
 800643e:	460c      	mov	r4, r1
 8006440:	4616      	mov	r6, r2
 8006442:	d505      	bpl.n	8006450 <__swrite+0x1e>
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	2302      	movs	r3, #2
 800644a:	2200      	movs	r2, #0
 800644c:	f000 f83c 	bl	80064c8 <_lseek_r>
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006456:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	4632      	mov	r2, r6
 800645e:	463b      	mov	r3, r7
 8006460:	4628      	mov	r0, r5
 8006462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	f000 b853 	b.w	8006510 <_write_r>

0800646a <__sseek>:
 800646a:	b510      	push	{r4, lr}
 800646c:	460c      	mov	r4, r1
 800646e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006472:	f000 f829 	bl	80064c8 <_lseek_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	bf15      	itete	ne
 800647c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800647e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006482:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006486:	81a3      	strheq	r3, [r4, #12]
 8006488:	bf18      	it	ne
 800648a:	81a3      	strhne	r3, [r4, #12]
 800648c:	bd10      	pop	{r4, pc}

0800648e <__sclose>:
 800648e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006492:	f000 b809 	b.w	80064a8 <_close_r>

08006496 <memset>:
 8006496:	4402      	add	r2, r0
 8006498:	4603      	mov	r3, r0
 800649a:	4293      	cmp	r3, r2
 800649c:	d100      	bne.n	80064a0 <memset+0xa>
 800649e:	4770      	bx	lr
 80064a0:	f803 1b01 	strb.w	r1, [r3], #1
 80064a4:	e7f9      	b.n	800649a <memset+0x4>
	...

080064a8 <_close_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d06      	ldr	r5, [pc, #24]	@ (80064c4 <_close_r+0x1c>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	f7fb ff15 	bl	80022e2 <_close>
 80064b8:	1c43      	adds	r3, r0, #1
 80064ba:	d102      	bne.n	80064c2 <_close_r+0x1a>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	b103      	cbz	r3, 80064c2 <_close_r+0x1a>
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	bd38      	pop	{r3, r4, r5, pc}
 80064c4:	200004a0 	.word	0x200004a0

080064c8 <_lseek_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d07      	ldr	r5, [pc, #28]	@ (80064e8 <_lseek_r+0x20>)
 80064cc:	4604      	mov	r4, r0
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fb ff2a 	bl	8002330 <_lseek>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_lseek_r+0x1e>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_lseek_r+0x1e>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	200004a0 	.word	0x200004a0

080064ec <_read_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d07      	ldr	r5, [pc, #28]	@ (800650c <_read_r+0x20>)
 80064f0:	4604      	mov	r4, r0
 80064f2:	4608      	mov	r0, r1
 80064f4:	4611      	mov	r1, r2
 80064f6:	2200      	movs	r2, #0
 80064f8:	602a      	str	r2, [r5, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	f7fb fed4 	bl	80022a8 <_read>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_read_r+0x1e>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_read_r+0x1e>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	200004a0 	.word	0x200004a0

08006510 <_write_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d07      	ldr	r5, [pc, #28]	@ (8006530 <_write_r+0x20>)
 8006514:	4604      	mov	r4, r0
 8006516:	4608      	mov	r0, r1
 8006518:	4611      	mov	r1, r2
 800651a:	2200      	movs	r2, #0
 800651c:	602a      	str	r2, [r5, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f7fb fca2 	bl	8001e68 <_write>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_write_r+0x1e>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_write_r+0x1e>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	200004a0 	.word	0x200004a0

08006534 <__errno>:
 8006534:	4b01      	ldr	r3, [pc, #4]	@ (800653c <__errno+0x8>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20000030 	.word	0x20000030

08006540 <__libc_init_array>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	4d0d      	ldr	r5, [pc, #52]	@ (8006578 <__libc_init_array+0x38>)
 8006544:	4c0d      	ldr	r4, [pc, #52]	@ (800657c <__libc_init_array+0x3c>)
 8006546:	1b64      	subs	r4, r4, r5
 8006548:	10a4      	asrs	r4, r4, #2
 800654a:	2600      	movs	r6, #0
 800654c:	42a6      	cmp	r6, r4
 800654e:	d109      	bne.n	8006564 <__libc_init_array+0x24>
 8006550:	4d0b      	ldr	r5, [pc, #44]	@ (8006580 <__libc_init_array+0x40>)
 8006552:	4c0c      	ldr	r4, [pc, #48]	@ (8006584 <__libc_init_array+0x44>)
 8006554:	f000 fdb8 	bl	80070c8 <_init>
 8006558:	1b64      	subs	r4, r4, r5
 800655a:	10a4      	asrs	r4, r4, #2
 800655c:	2600      	movs	r6, #0
 800655e:	42a6      	cmp	r6, r4
 8006560:	d105      	bne.n	800656e <__libc_init_array+0x2e>
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	f855 3b04 	ldr.w	r3, [r5], #4
 8006568:	4798      	blx	r3
 800656a:	3601      	adds	r6, #1
 800656c:	e7ee      	b.n	800654c <__libc_init_array+0xc>
 800656e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006572:	4798      	blx	r3
 8006574:	3601      	adds	r6, #1
 8006576:	e7f2      	b.n	800655e <__libc_init_array+0x1e>
 8006578:	08007194 	.word	0x08007194
 800657c:	08007194 	.word	0x08007194
 8006580:	08007194 	.word	0x08007194
 8006584:	08007198 	.word	0x08007198

08006588 <__retarget_lock_init_recursive>:
 8006588:	4770      	bx	lr

0800658a <__retarget_lock_acquire_recursive>:
 800658a:	4770      	bx	lr

0800658c <__retarget_lock_release_recursive>:
 800658c:	4770      	bx	lr
	...

08006590 <_free_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4605      	mov	r5, r0
 8006594:	2900      	cmp	r1, #0
 8006596:	d041      	beq.n	800661c <_free_r+0x8c>
 8006598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800659c:	1f0c      	subs	r4, r1, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfb8      	it	lt
 80065a2:	18e4      	addlt	r4, r4, r3
 80065a4:	f000 f8e0 	bl	8006768 <__malloc_lock>
 80065a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <_free_r+0x90>)
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	b933      	cbnz	r3, 80065bc <_free_r+0x2c>
 80065ae:	6063      	str	r3, [r4, #4]
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	4628      	mov	r0, r5
 80065b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b8:	f000 b8dc 	b.w	8006774 <__malloc_unlock>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d908      	bls.n	80065d2 <_free_r+0x42>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	1821      	adds	r1, r4, r0
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf01      	itttt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	1809      	addeq	r1, r1, r0
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	e7ed      	b.n	80065ae <_free_r+0x1e>
 80065d2:	461a      	mov	r2, r3
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	b10b      	cbz	r3, 80065dc <_free_r+0x4c>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d9fa      	bls.n	80065d2 <_free_r+0x42>
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	1850      	adds	r0, r2, r1
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d10b      	bne.n	80065fc <_free_r+0x6c>
 80065e4:	6820      	ldr	r0, [r4, #0]
 80065e6:	4401      	add	r1, r0
 80065e8:	1850      	adds	r0, r2, r1
 80065ea:	4283      	cmp	r3, r0
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	d1e0      	bne.n	80065b2 <_free_r+0x22>
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	6053      	str	r3, [r2, #4]
 80065f6:	4408      	add	r0, r1
 80065f8:	6010      	str	r0, [r2, #0]
 80065fa:	e7da      	b.n	80065b2 <_free_r+0x22>
 80065fc:	d902      	bls.n	8006604 <_free_r+0x74>
 80065fe:	230c      	movs	r3, #12
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	e7d6      	b.n	80065b2 <_free_r+0x22>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	1821      	adds	r1, r4, r0
 8006608:	428b      	cmp	r3, r1
 800660a:	bf04      	itt	eq
 800660c:	6819      	ldreq	r1, [r3, #0]
 800660e:	685b      	ldreq	r3, [r3, #4]
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	bf04      	itt	eq
 8006614:	1809      	addeq	r1, r1, r0
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	6054      	str	r4, [r2, #4]
 800661a:	e7ca      	b.n	80065b2 <_free_r+0x22>
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	bf00      	nop
 8006620:	200004ac 	.word	0x200004ac

08006624 <sbrk_aligned>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4e0f      	ldr	r6, [pc, #60]	@ (8006664 <sbrk_aligned+0x40>)
 8006628:	460c      	mov	r4, r1
 800662a:	6831      	ldr	r1, [r6, #0]
 800662c:	4605      	mov	r5, r0
 800662e:	b911      	cbnz	r1, 8006636 <sbrk_aligned+0x12>
 8006630:	f000 fcb6 	bl	8006fa0 <_sbrk_r>
 8006634:	6030      	str	r0, [r6, #0]
 8006636:	4621      	mov	r1, r4
 8006638:	4628      	mov	r0, r5
 800663a:	f000 fcb1 	bl	8006fa0 <_sbrk_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d103      	bne.n	800664a <sbrk_aligned+0x26>
 8006642:	f04f 34ff 	mov.w	r4, #4294967295
 8006646:	4620      	mov	r0, r4
 8006648:	bd70      	pop	{r4, r5, r6, pc}
 800664a:	1cc4      	adds	r4, r0, #3
 800664c:	f024 0403 	bic.w	r4, r4, #3
 8006650:	42a0      	cmp	r0, r4
 8006652:	d0f8      	beq.n	8006646 <sbrk_aligned+0x22>
 8006654:	1a21      	subs	r1, r4, r0
 8006656:	4628      	mov	r0, r5
 8006658:	f000 fca2 	bl	8006fa0 <_sbrk_r>
 800665c:	3001      	adds	r0, #1
 800665e:	d1f2      	bne.n	8006646 <sbrk_aligned+0x22>
 8006660:	e7ef      	b.n	8006642 <sbrk_aligned+0x1e>
 8006662:	bf00      	nop
 8006664:	200004a8 	.word	0x200004a8

08006668 <_malloc_r>:
 8006668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800666c:	1ccd      	adds	r5, r1, #3
 800666e:	f025 0503 	bic.w	r5, r5, #3
 8006672:	3508      	adds	r5, #8
 8006674:	2d0c      	cmp	r5, #12
 8006676:	bf38      	it	cc
 8006678:	250c      	movcc	r5, #12
 800667a:	2d00      	cmp	r5, #0
 800667c:	4606      	mov	r6, r0
 800667e:	db01      	blt.n	8006684 <_malloc_r+0x1c>
 8006680:	42a9      	cmp	r1, r5
 8006682:	d904      	bls.n	800668e <_malloc_r+0x26>
 8006684:	230c      	movs	r3, #12
 8006686:	6033      	str	r3, [r6, #0]
 8006688:	2000      	movs	r0, #0
 800668a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006764 <_malloc_r+0xfc>
 8006692:	f000 f869 	bl	8006768 <__malloc_lock>
 8006696:	f8d8 3000 	ldr.w	r3, [r8]
 800669a:	461c      	mov	r4, r3
 800669c:	bb44      	cbnz	r4, 80066f0 <_malloc_r+0x88>
 800669e:	4629      	mov	r1, r5
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7ff ffbf 	bl	8006624 <sbrk_aligned>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	4604      	mov	r4, r0
 80066aa:	d158      	bne.n	800675e <_malloc_r+0xf6>
 80066ac:	f8d8 4000 	ldr.w	r4, [r8]
 80066b0:	4627      	mov	r7, r4
 80066b2:	2f00      	cmp	r7, #0
 80066b4:	d143      	bne.n	800673e <_malloc_r+0xd6>
 80066b6:	2c00      	cmp	r4, #0
 80066b8:	d04b      	beq.n	8006752 <_malloc_r+0xea>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	4639      	mov	r1, r7
 80066be:	4630      	mov	r0, r6
 80066c0:	eb04 0903 	add.w	r9, r4, r3
 80066c4:	f000 fc6c 	bl	8006fa0 <_sbrk_r>
 80066c8:	4581      	cmp	r9, r0
 80066ca:	d142      	bne.n	8006752 <_malloc_r+0xea>
 80066cc:	6821      	ldr	r1, [r4, #0]
 80066ce:	1a6d      	subs	r5, r5, r1
 80066d0:	4629      	mov	r1, r5
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ffa6 	bl	8006624 <sbrk_aligned>
 80066d8:	3001      	adds	r0, #1
 80066da:	d03a      	beq.n	8006752 <_malloc_r+0xea>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	442b      	add	r3, r5
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	f8d8 3000 	ldr.w	r3, [r8]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	bb62      	cbnz	r2, 8006744 <_malloc_r+0xdc>
 80066ea:	f8c8 7000 	str.w	r7, [r8]
 80066ee:	e00f      	b.n	8006710 <_malloc_r+0xa8>
 80066f0:	6822      	ldr	r2, [r4, #0]
 80066f2:	1b52      	subs	r2, r2, r5
 80066f4:	d420      	bmi.n	8006738 <_malloc_r+0xd0>
 80066f6:	2a0b      	cmp	r2, #11
 80066f8:	d917      	bls.n	800672a <_malloc_r+0xc2>
 80066fa:	1961      	adds	r1, r4, r5
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	6025      	str	r5, [r4, #0]
 8006700:	bf18      	it	ne
 8006702:	6059      	strne	r1, [r3, #4]
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	bf08      	it	eq
 8006708:	f8c8 1000 	streq.w	r1, [r8]
 800670c:	5162      	str	r2, [r4, r5]
 800670e:	604b      	str	r3, [r1, #4]
 8006710:	4630      	mov	r0, r6
 8006712:	f000 f82f 	bl	8006774 <__malloc_unlock>
 8006716:	f104 000b 	add.w	r0, r4, #11
 800671a:	1d23      	adds	r3, r4, #4
 800671c:	f020 0007 	bic.w	r0, r0, #7
 8006720:	1ac2      	subs	r2, r0, r3
 8006722:	bf1c      	itt	ne
 8006724:	1a1b      	subne	r3, r3, r0
 8006726:	50a3      	strne	r3, [r4, r2]
 8006728:	e7af      	b.n	800668a <_malloc_r+0x22>
 800672a:	6862      	ldr	r2, [r4, #4]
 800672c:	42a3      	cmp	r3, r4
 800672e:	bf0c      	ite	eq
 8006730:	f8c8 2000 	streq.w	r2, [r8]
 8006734:	605a      	strne	r2, [r3, #4]
 8006736:	e7eb      	b.n	8006710 <_malloc_r+0xa8>
 8006738:	4623      	mov	r3, r4
 800673a:	6864      	ldr	r4, [r4, #4]
 800673c:	e7ae      	b.n	800669c <_malloc_r+0x34>
 800673e:	463c      	mov	r4, r7
 8006740:	687f      	ldr	r7, [r7, #4]
 8006742:	e7b6      	b.n	80066b2 <_malloc_r+0x4a>
 8006744:	461a      	mov	r2, r3
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	42a3      	cmp	r3, r4
 800674a:	d1fb      	bne.n	8006744 <_malloc_r+0xdc>
 800674c:	2300      	movs	r3, #0
 800674e:	6053      	str	r3, [r2, #4]
 8006750:	e7de      	b.n	8006710 <_malloc_r+0xa8>
 8006752:	230c      	movs	r3, #12
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	4630      	mov	r0, r6
 8006758:	f000 f80c 	bl	8006774 <__malloc_unlock>
 800675c:	e794      	b.n	8006688 <_malloc_r+0x20>
 800675e:	6005      	str	r5, [r0, #0]
 8006760:	e7d6      	b.n	8006710 <_malloc_r+0xa8>
 8006762:	bf00      	nop
 8006764:	200004ac 	.word	0x200004ac

08006768 <__malloc_lock>:
 8006768:	4801      	ldr	r0, [pc, #4]	@ (8006770 <__malloc_lock+0x8>)
 800676a:	f7ff bf0e 	b.w	800658a <__retarget_lock_acquire_recursive>
 800676e:	bf00      	nop
 8006770:	200004a4 	.word	0x200004a4

08006774 <__malloc_unlock>:
 8006774:	4801      	ldr	r0, [pc, #4]	@ (800677c <__malloc_unlock+0x8>)
 8006776:	f7ff bf09 	b.w	800658c <__retarget_lock_release_recursive>
 800677a:	bf00      	nop
 800677c:	200004a4 	.word	0x200004a4

08006780 <__sfputc_r>:
 8006780:	6893      	ldr	r3, [r2, #8]
 8006782:	3b01      	subs	r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	b410      	push	{r4}
 8006788:	6093      	str	r3, [r2, #8]
 800678a:	da08      	bge.n	800679e <__sfputc_r+0x1e>
 800678c:	6994      	ldr	r4, [r2, #24]
 800678e:	42a3      	cmp	r3, r4
 8006790:	db01      	blt.n	8006796 <__sfputc_r+0x16>
 8006792:	290a      	cmp	r1, #10
 8006794:	d103      	bne.n	800679e <__sfputc_r+0x1e>
 8006796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800679a:	f000 bb6d 	b.w	8006e78 <__swbuf_r>
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	1c58      	adds	r0, r3, #1
 80067a2:	6010      	str	r0, [r2, #0]
 80067a4:	7019      	strb	r1, [r3, #0]
 80067a6:	4608      	mov	r0, r1
 80067a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <__sfputs_r>:
 80067ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b0:	4606      	mov	r6, r0
 80067b2:	460f      	mov	r7, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	18d5      	adds	r5, r2, r3
 80067b8:	42ac      	cmp	r4, r5
 80067ba:	d101      	bne.n	80067c0 <__sfputs_r+0x12>
 80067bc:	2000      	movs	r0, #0
 80067be:	e007      	b.n	80067d0 <__sfputs_r+0x22>
 80067c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c4:	463a      	mov	r2, r7
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff ffda 	bl	8006780 <__sfputc_r>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d1f3      	bne.n	80067b8 <__sfputs_r+0xa>
 80067d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067d4 <_vfiprintf_r>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	460d      	mov	r5, r1
 80067da:	b09d      	sub	sp, #116	@ 0x74
 80067dc:	4614      	mov	r4, r2
 80067de:	4698      	mov	r8, r3
 80067e0:	4606      	mov	r6, r0
 80067e2:	b118      	cbz	r0, 80067ec <_vfiprintf_r+0x18>
 80067e4:	6a03      	ldr	r3, [r0, #32]
 80067e6:	b90b      	cbnz	r3, 80067ec <_vfiprintf_r+0x18>
 80067e8:	f7ff fdca 	bl	8006380 <__sinit>
 80067ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067ee:	07d9      	lsls	r1, r3, #31
 80067f0:	d405      	bmi.n	80067fe <_vfiprintf_r+0x2a>
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	059a      	lsls	r2, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_vfiprintf_r+0x2a>
 80067f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067fa:	f7ff fec6 	bl	800658a <__retarget_lock_acquire_recursive>
 80067fe:	89ab      	ldrh	r3, [r5, #12]
 8006800:	071b      	lsls	r3, r3, #28
 8006802:	d501      	bpl.n	8006808 <_vfiprintf_r+0x34>
 8006804:	692b      	ldr	r3, [r5, #16]
 8006806:	b99b      	cbnz	r3, 8006830 <_vfiprintf_r+0x5c>
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f000 fb72 	bl	8006ef4 <__swsetup_r>
 8006810:	b170      	cbz	r0, 8006830 <_vfiprintf_r+0x5c>
 8006812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006814:	07dc      	lsls	r4, r3, #31
 8006816:	d504      	bpl.n	8006822 <_vfiprintf_r+0x4e>
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	b01d      	add	sp, #116	@ 0x74
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	0598      	lsls	r0, r3, #22
 8006826:	d4f7      	bmi.n	8006818 <_vfiprintf_r+0x44>
 8006828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800682a:	f7ff feaf 	bl	800658c <__retarget_lock_release_recursive>
 800682e:	e7f3      	b.n	8006818 <_vfiprintf_r+0x44>
 8006830:	2300      	movs	r3, #0
 8006832:	9309      	str	r3, [sp, #36]	@ 0x24
 8006834:	2320      	movs	r3, #32
 8006836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800683a:	f8cd 800c 	str.w	r8, [sp, #12]
 800683e:	2330      	movs	r3, #48	@ 0x30
 8006840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069f0 <_vfiprintf_r+0x21c>
 8006844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006848:	f04f 0901 	mov.w	r9, #1
 800684c:	4623      	mov	r3, r4
 800684e:	469a      	mov	sl, r3
 8006850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006854:	b10a      	cbz	r2, 800685a <_vfiprintf_r+0x86>
 8006856:	2a25      	cmp	r2, #37	@ 0x25
 8006858:	d1f9      	bne.n	800684e <_vfiprintf_r+0x7a>
 800685a:	ebba 0b04 	subs.w	fp, sl, r4
 800685e:	d00b      	beq.n	8006878 <_vfiprintf_r+0xa4>
 8006860:	465b      	mov	r3, fp
 8006862:	4622      	mov	r2, r4
 8006864:	4629      	mov	r1, r5
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff ffa1 	bl	80067ae <__sfputs_r>
 800686c:	3001      	adds	r0, #1
 800686e:	f000 80a7 	beq.w	80069c0 <_vfiprintf_r+0x1ec>
 8006872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006874:	445a      	add	r2, fp
 8006876:	9209      	str	r2, [sp, #36]	@ 0x24
 8006878:	f89a 3000 	ldrb.w	r3, [sl]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 809f 	beq.w	80069c0 <_vfiprintf_r+0x1ec>
 8006882:	2300      	movs	r3, #0
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800688c:	f10a 0a01 	add.w	sl, sl, #1
 8006890:	9304      	str	r3, [sp, #16]
 8006892:	9307      	str	r3, [sp, #28]
 8006894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006898:	931a      	str	r3, [sp, #104]	@ 0x68
 800689a:	4654      	mov	r4, sl
 800689c:	2205      	movs	r2, #5
 800689e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a2:	4853      	ldr	r0, [pc, #332]	@ (80069f0 <_vfiprintf_r+0x21c>)
 80068a4:	f7f9 fcb4 	bl	8000210 <memchr>
 80068a8:	9a04      	ldr	r2, [sp, #16]
 80068aa:	b9d8      	cbnz	r0, 80068e4 <_vfiprintf_r+0x110>
 80068ac:	06d1      	lsls	r1, r2, #27
 80068ae:	bf44      	itt	mi
 80068b0:	2320      	movmi	r3, #32
 80068b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068b6:	0713      	lsls	r3, r2, #28
 80068b8:	bf44      	itt	mi
 80068ba:	232b      	movmi	r3, #43	@ 0x2b
 80068bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068c0:	f89a 3000 	ldrb.w	r3, [sl]
 80068c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068c6:	d015      	beq.n	80068f4 <_vfiprintf_r+0x120>
 80068c8:	9a07      	ldr	r2, [sp, #28]
 80068ca:	4654      	mov	r4, sl
 80068cc:	2000      	movs	r0, #0
 80068ce:	f04f 0c0a 	mov.w	ip, #10
 80068d2:	4621      	mov	r1, r4
 80068d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068d8:	3b30      	subs	r3, #48	@ 0x30
 80068da:	2b09      	cmp	r3, #9
 80068dc:	d94b      	bls.n	8006976 <_vfiprintf_r+0x1a2>
 80068de:	b1b0      	cbz	r0, 800690e <_vfiprintf_r+0x13a>
 80068e0:	9207      	str	r2, [sp, #28]
 80068e2:	e014      	b.n	800690e <_vfiprintf_r+0x13a>
 80068e4:	eba0 0308 	sub.w	r3, r0, r8
 80068e8:	fa09 f303 	lsl.w	r3, r9, r3
 80068ec:	4313      	orrs	r3, r2
 80068ee:	9304      	str	r3, [sp, #16]
 80068f0:	46a2      	mov	sl, r4
 80068f2:	e7d2      	b.n	800689a <_vfiprintf_r+0xc6>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	1d19      	adds	r1, r3, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	9103      	str	r1, [sp, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bfbb      	ittet	lt
 8006900:	425b      	neglt	r3, r3
 8006902:	f042 0202 	orrlt.w	r2, r2, #2
 8006906:	9307      	strge	r3, [sp, #28]
 8006908:	9307      	strlt	r3, [sp, #28]
 800690a:	bfb8      	it	lt
 800690c:	9204      	strlt	r2, [sp, #16]
 800690e:	7823      	ldrb	r3, [r4, #0]
 8006910:	2b2e      	cmp	r3, #46	@ 0x2e
 8006912:	d10a      	bne.n	800692a <_vfiprintf_r+0x156>
 8006914:	7863      	ldrb	r3, [r4, #1]
 8006916:	2b2a      	cmp	r3, #42	@ 0x2a
 8006918:	d132      	bne.n	8006980 <_vfiprintf_r+0x1ac>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	9203      	str	r2, [sp, #12]
 8006922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006926:	3402      	adds	r4, #2
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a00 <_vfiprintf_r+0x22c>
 800692e:	7821      	ldrb	r1, [r4, #0]
 8006930:	2203      	movs	r2, #3
 8006932:	4650      	mov	r0, sl
 8006934:	f7f9 fc6c 	bl	8000210 <memchr>
 8006938:	b138      	cbz	r0, 800694a <_vfiprintf_r+0x176>
 800693a:	9b04      	ldr	r3, [sp, #16]
 800693c:	eba0 000a 	sub.w	r0, r0, sl
 8006940:	2240      	movs	r2, #64	@ 0x40
 8006942:	4082      	lsls	r2, r0
 8006944:	4313      	orrs	r3, r2
 8006946:	3401      	adds	r4, #1
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800694e:	4829      	ldr	r0, [pc, #164]	@ (80069f4 <_vfiprintf_r+0x220>)
 8006950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006954:	2206      	movs	r2, #6
 8006956:	f7f9 fc5b 	bl	8000210 <memchr>
 800695a:	2800      	cmp	r0, #0
 800695c:	d03f      	beq.n	80069de <_vfiprintf_r+0x20a>
 800695e:	4b26      	ldr	r3, [pc, #152]	@ (80069f8 <_vfiprintf_r+0x224>)
 8006960:	bb1b      	cbnz	r3, 80069aa <_vfiprintf_r+0x1d6>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	3307      	adds	r3, #7
 8006966:	f023 0307 	bic.w	r3, r3, #7
 800696a:	3308      	adds	r3, #8
 800696c:	9303      	str	r3, [sp, #12]
 800696e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006970:	443b      	add	r3, r7
 8006972:	9309      	str	r3, [sp, #36]	@ 0x24
 8006974:	e76a      	b.n	800684c <_vfiprintf_r+0x78>
 8006976:	fb0c 3202 	mla	r2, ip, r2, r3
 800697a:	460c      	mov	r4, r1
 800697c:	2001      	movs	r0, #1
 800697e:	e7a8      	b.n	80068d2 <_vfiprintf_r+0xfe>
 8006980:	2300      	movs	r3, #0
 8006982:	3401      	adds	r4, #1
 8006984:	9305      	str	r3, [sp, #20]
 8006986:	4619      	mov	r1, r3
 8006988:	f04f 0c0a 	mov.w	ip, #10
 800698c:	4620      	mov	r0, r4
 800698e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006992:	3a30      	subs	r2, #48	@ 0x30
 8006994:	2a09      	cmp	r2, #9
 8006996:	d903      	bls.n	80069a0 <_vfiprintf_r+0x1cc>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0c6      	beq.n	800692a <_vfiprintf_r+0x156>
 800699c:	9105      	str	r1, [sp, #20]
 800699e:	e7c4      	b.n	800692a <_vfiprintf_r+0x156>
 80069a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069a4:	4604      	mov	r4, r0
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7f0      	b.n	800698c <_vfiprintf_r+0x1b8>
 80069aa:	ab03      	add	r3, sp, #12
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	462a      	mov	r2, r5
 80069b0:	4b12      	ldr	r3, [pc, #72]	@ (80069fc <_vfiprintf_r+0x228>)
 80069b2:	a904      	add	r1, sp, #16
 80069b4:	4630      	mov	r0, r6
 80069b6:	f3af 8000 	nop.w
 80069ba:	4607      	mov	r7, r0
 80069bc:	1c78      	adds	r0, r7, #1
 80069be:	d1d6      	bne.n	800696e <_vfiprintf_r+0x19a>
 80069c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069c2:	07d9      	lsls	r1, r3, #31
 80069c4:	d405      	bmi.n	80069d2 <_vfiprintf_r+0x1fe>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	059a      	lsls	r2, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_vfiprintf_r+0x1fe>
 80069cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ce:	f7ff fddd 	bl	800658c <__retarget_lock_release_recursive>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	065b      	lsls	r3, r3, #25
 80069d6:	f53f af1f 	bmi.w	8006818 <_vfiprintf_r+0x44>
 80069da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069dc:	e71e      	b.n	800681c <_vfiprintf_r+0x48>
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	462a      	mov	r2, r5
 80069e4:	4b05      	ldr	r3, [pc, #20]	@ (80069fc <_vfiprintf_r+0x228>)
 80069e6:	a904      	add	r1, sp, #16
 80069e8:	4630      	mov	r0, r6
 80069ea:	f000 f879 	bl	8006ae0 <_printf_i>
 80069ee:	e7e4      	b.n	80069ba <_vfiprintf_r+0x1e6>
 80069f0:	08007158 	.word	0x08007158
 80069f4:	08007162 	.word	0x08007162
 80069f8:	00000000 	.word	0x00000000
 80069fc:	080067af 	.word	0x080067af
 8006a00:	0800715e 	.word	0x0800715e

08006a04 <_printf_common>:
 8006a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	4616      	mov	r6, r2
 8006a0a:	4698      	mov	r8, r3
 8006a0c:	688a      	ldr	r2, [r1, #8]
 8006a0e:	690b      	ldr	r3, [r1, #16]
 8006a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a14:	4293      	cmp	r3, r2
 8006a16:	bfb8      	it	lt
 8006a18:	4613      	movlt	r3, r2
 8006a1a:	6033      	str	r3, [r6, #0]
 8006a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a20:	4607      	mov	r7, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	b10a      	cbz	r2, 8006a2a <_printf_common+0x26>
 8006a26:	3301      	adds	r3, #1
 8006a28:	6033      	str	r3, [r6, #0]
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	0699      	lsls	r1, r3, #26
 8006a2e:	bf42      	ittt	mi
 8006a30:	6833      	ldrmi	r3, [r6, #0]
 8006a32:	3302      	addmi	r3, #2
 8006a34:	6033      	strmi	r3, [r6, #0]
 8006a36:	6825      	ldr	r5, [r4, #0]
 8006a38:	f015 0506 	ands.w	r5, r5, #6
 8006a3c:	d106      	bne.n	8006a4c <_printf_common+0x48>
 8006a3e:	f104 0a19 	add.w	sl, r4, #25
 8006a42:	68e3      	ldr	r3, [r4, #12]
 8006a44:	6832      	ldr	r2, [r6, #0]
 8006a46:	1a9b      	subs	r3, r3, r2
 8006a48:	42ab      	cmp	r3, r5
 8006a4a:	dc26      	bgt.n	8006a9a <_printf_common+0x96>
 8006a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a50:	6822      	ldr	r2, [r4, #0]
 8006a52:	3b00      	subs	r3, #0
 8006a54:	bf18      	it	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	0692      	lsls	r2, r2, #26
 8006a5a:	d42b      	bmi.n	8006ab4 <_printf_common+0xb0>
 8006a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a60:	4641      	mov	r1, r8
 8006a62:	4638      	mov	r0, r7
 8006a64:	47c8      	blx	r9
 8006a66:	3001      	adds	r0, #1
 8006a68:	d01e      	beq.n	8006aa8 <_printf_common+0xa4>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	6922      	ldr	r2, [r4, #16]
 8006a6e:	f003 0306 	and.w	r3, r3, #6
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	bf02      	ittt	eq
 8006a76:	68e5      	ldreq	r5, [r4, #12]
 8006a78:	6833      	ldreq	r3, [r6, #0]
 8006a7a:	1aed      	subeq	r5, r5, r3
 8006a7c:	68a3      	ldr	r3, [r4, #8]
 8006a7e:	bf0c      	ite	eq
 8006a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a84:	2500      	movne	r5, #0
 8006a86:	4293      	cmp	r3, r2
 8006a88:	bfc4      	itt	gt
 8006a8a:	1a9b      	subgt	r3, r3, r2
 8006a8c:	18ed      	addgt	r5, r5, r3
 8006a8e:	2600      	movs	r6, #0
 8006a90:	341a      	adds	r4, #26
 8006a92:	42b5      	cmp	r5, r6
 8006a94:	d11a      	bne.n	8006acc <_printf_common+0xc8>
 8006a96:	2000      	movs	r0, #0
 8006a98:	e008      	b.n	8006aac <_printf_common+0xa8>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	4652      	mov	r2, sl
 8006a9e:	4641      	mov	r1, r8
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	47c8      	blx	r9
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d103      	bne.n	8006ab0 <_printf_common+0xac>
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	e7c6      	b.n	8006a42 <_printf_common+0x3e>
 8006ab4:	18e1      	adds	r1, r4, r3
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	2030      	movs	r0, #48	@ 0x30
 8006aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006abe:	4422      	add	r2, r4
 8006ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ac8:	3302      	adds	r3, #2
 8006aca:	e7c7      	b.n	8006a5c <_printf_common+0x58>
 8006acc:	2301      	movs	r3, #1
 8006ace:	4622      	mov	r2, r4
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	47c8      	blx	r9
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d0e6      	beq.n	8006aa8 <_printf_common+0xa4>
 8006ada:	3601      	adds	r6, #1
 8006adc:	e7d9      	b.n	8006a92 <_printf_common+0x8e>
	...

08006ae0 <_printf_i>:
 8006ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae4:	7e0f      	ldrb	r7, [r1, #24]
 8006ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ae8:	2f78      	cmp	r7, #120	@ 0x78
 8006aea:	4691      	mov	r9, r2
 8006aec:	4680      	mov	r8, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	469a      	mov	sl, r3
 8006af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006af6:	d807      	bhi.n	8006b08 <_printf_i+0x28>
 8006af8:	2f62      	cmp	r7, #98	@ 0x62
 8006afa:	d80a      	bhi.n	8006b12 <_printf_i+0x32>
 8006afc:	2f00      	cmp	r7, #0
 8006afe:	f000 80d2 	beq.w	8006ca6 <_printf_i+0x1c6>
 8006b02:	2f58      	cmp	r7, #88	@ 0x58
 8006b04:	f000 80b9 	beq.w	8006c7a <_printf_i+0x19a>
 8006b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b10:	e03a      	b.n	8006b88 <_printf_i+0xa8>
 8006b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b16:	2b15      	cmp	r3, #21
 8006b18:	d8f6      	bhi.n	8006b08 <_printf_i+0x28>
 8006b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b20 <_printf_i+0x40>)
 8006b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b20:	08006b79 	.word	0x08006b79
 8006b24:	08006b8d 	.word	0x08006b8d
 8006b28:	08006b09 	.word	0x08006b09
 8006b2c:	08006b09 	.word	0x08006b09
 8006b30:	08006b09 	.word	0x08006b09
 8006b34:	08006b09 	.word	0x08006b09
 8006b38:	08006b8d 	.word	0x08006b8d
 8006b3c:	08006b09 	.word	0x08006b09
 8006b40:	08006b09 	.word	0x08006b09
 8006b44:	08006b09 	.word	0x08006b09
 8006b48:	08006b09 	.word	0x08006b09
 8006b4c:	08006c8d 	.word	0x08006c8d
 8006b50:	08006bb7 	.word	0x08006bb7
 8006b54:	08006c47 	.word	0x08006c47
 8006b58:	08006b09 	.word	0x08006b09
 8006b5c:	08006b09 	.word	0x08006b09
 8006b60:	08006caf 	.word	0x08006caf
 8006b64:	08006b09 	.word	0x08006b09
 8006b68:	08006bb7 	.word	0x08006bb7
 8006b6c:	08006b09 	.word	0x08006b09
 8006b70:	08006b09 	.word	0x08006b09
 8006b74:	08006c4f 	.word	0x08006c4f
 8006b78:	6833      	ldr	r3, [r6, #0]
 8006b7a:	1d1a      	adds	r2, r3, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6032      	str	r2, [r6, #0]
 8006b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e09d      	b.n	8006cc8 <_printf_i+0x1e8>
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	1d19      	adds	r1, r3, #4
 8006b92:	6031      	str	r1, [r6, #0]
 8006b94:	0606      	lsls	r6, r0, #24
 8006b96:	d501      	bpl.n	8006b9c <_printf_i+0xbc>
 8006b98:	681d      	ldr	r5, [r3, #0]
 8006b9a:	e003      	b.n	8006ba4 <_printf_i+0xc4>
 8006b9c:	0645      	lsls	r5, r0, #25
 8006b9e:	d5fb      	bpl.n	8006b98 <_printf_i+0xb8>
 8006ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	da03      	bge.n	8006bb0 <_printf_i+0xd0>
 8006ba8:	232d      	movs	r3, #45	@ 0x2d
 8006baa:	426d      	negs	r5, r5
 8006bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb0:	4859      	ldr	r0, [pc, #356]	@ (8006d18 <_printf_i+0x238>)
 8006bb2:	230a      	movs	r3, #10
 8006bb4:	e011      	b.n	8006bda <_printf_i+0xfa>
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	6833      	ldr	r3, [r6, #0]
 8006bba:	0608      	lsls	r0, r1, #24
 8006bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bc0:	d402      	bmi.n	8006bc8 <_printf_i+0xe8>
 8006bc2:	0649      	lsls	r1, r1, #25
 8006bc4:	bf48      	it	mi
 8006bc6:	b2ad      	uxthmi	r5, r5
 8006bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bca:	4853      	ldr	r0, [pc, #332]	@ (8006d18 <_printf_i+0x238>)
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	bf14      	ite	ne
 8006bd0:	230a      	movne	r3, #10
 8006bd2:	2308      	moveq	r3, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bda:	6866      	ldr	r6, [r4, #4]
 8006bdc:	60a6      	str	r6, [r4, #8]
 8006bde:	2e00      	cmp	r6, #0
 8006be0:	bfa2      	ittt	ge
 8006be2:	6821      	ldrge	r1, [r4, #0]
 8006be4:	f021 0104 	bicge.w	r1, r1, #4
 8006be8:	6021      	strge	r1, [r4, #0]
 8006bea:	b90d      	cbnz	r5, 8006bf0 <_printf_i+0x110>
 8006bec:	2e00      	cmp	r6, #0
 8006bee:	d04b      	beq.n	8006c88 <_printf_i+0x1a8>
 8006bf0:	4616      	mov	r6, r2
 8006bf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bf6:	fb03 5711 	mls	r7, r3, r1, r5
 8006bfa:	5dc7      	ldrb	r7, [r0, r7]
 8006bfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c00:	462f      	mov	r7, r5
 8006c02:	42bb      	cmp	r3, r7
 8006c04:	460d      	mov	r5, r1
 8006c06:	d9f4      	bls.n	8006bf2 <_printf_i+0x112>
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d10b      	bne.n	8006c24 <_printf_i+0x144>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	07df      	lsls	r7, r3, #31
 8006c10:	d508      	bpl.n	8006c24 <_printf_i+0x144>
 8006c12:	6923      	ldr	r3, [r4, #16]
 8006c14:	6861      	ldr	r1, [r4, #4]
 8006c16:	4299      	cmp	r1, r3
 8006c18:	bfde      	ittt	le
 8006c1a:	2330      	movle	r3, #48	@ 0x30
 8006c1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c24:	1b92      	subs	r2, r2, r6
 8006c26:	6122      	str	r2, [r4, #16]
 8006c28:	f8cd a000 	str.w	sl, [sp]
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	aa03      	add	r2, sp, #12
 8006c30:	4621      	mov	r1, r4
 8006c32:	4640      	mov	r0, r8
 8006c34:	f7ff fee6 	bl	8006a04 <_printf_common>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d14a      	bne.n	8006cd2 <_printf_i+0x1f2>
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	b004      	add	sp, #16
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f043 0320 	orr.w	r3, r3, #32
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	4833      	ldr	r0, [pc, #204]	@ (8006d1c <_printf_i+0x23c>)
 8006c50:	2778      	movs	r7, #120	@ 0x78
 8006c52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	6831      	ldr	r1, [r6, #0]
 8006c5a:	061f      	lsls	r7, r3, #24
 8006c5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c60:	d402      	bmi.n	8006c68 <_printf_i+0x188>
 8006c62:	065f      	lsls	r7, r3, #25
 8006c64:	bf48      	it	mi
 8006c66:	b2ad      	uxthmi	r5, r5
 8006c68:	6031      	str	r1, [r6, #0]
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	bf44      	itt	mi
 8006c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c72:	6023      	strmi	r3, [r4, #0]
 8006c74:	b11d      	cbz	r5, 8006c7e <_printf_i+0x19e>
 8006c76:	2310      	movs	r3, #16
 8006c78:	e7ac      	b.n	8006bd4 <_printf_i+0xf4>
 8006c7a:	4827      	ldr	r0, [pc, #156]	@ (8006d18 <_printf_i+0x238>)
 8006c7c:	e7e9      	b.n	8006c52 <_printf_i+0x172>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	f023 0320 	bic.w	r3, r3, #32
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	e7f6      	b.n	8006c76 <_printf_i+0x196>
 8006c88:	4616      	mov	r6, r2
 8006c8a:	e7bd      	b.n	8006c08 <_printf_i+0x128>
 8006c8c:	6833      	ldr	r3, [r6, #0]
 8006c8e:	6825      	ldr	r5, [r4, #0]
 8006c90:	6961      	ldr	r1, [r4, #20]
 8006c92:	1d18      	adds	r0, r3, #4
 8006c94:	6030      	str	r0, [r6, #0]
 8006c96:	062e      	lsls	r6, r5, #24
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	d501      	bpl.n	8006ca0 <_printf_i+0x1c0>
 8006c9c:	6019      	str	r1, [r3, #0]
 8006c9e:	e002      	b.n	8006ca6 <_printf_i+0x1c6>
 8006ca0:	0668      	lsls	r0, r5, #25
 8006ca2:	d5fb      	bpl.n	8006c9c <_printf_i+0x1bc>
 8006ca4:	8019      	strh	r1, [r3, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	4616      	mov	r6, r2
 8006cac:	e7bc      	b.n	8006c28 <_printf_i+0x148>
 8006cae:	6833      	ldr	r3, [r6, #0]
 8006cb0:	1d1a      	adds	r2, r3, #4
 8006cb2:	6032      	str	r2, [r6, #0]
 8006cb4:	681e      	ldr	r6, [r3, #0]
 8006cb6:	6862      	ldr	r2, [r4, #4]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7f9 faa8 	bl	8000210 <memchr>
 8006cc0:	b108      	cbz	r0, 8006cc6 <_printf_i+0x1e6>
 8006cc2:	1b80      	subs	r0, r0, r6
 8006cc4:	6060      	str	r0, [r4, #4]
 8006cc6:	6863      	ldr	r3, [r4, #4]
 8006cc8:	6123      	str	r3, [r4, #16]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd0:	e7aa      	b.n	8006c28 <_printf_i+0x148>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4640      	mov	r0, r8
 8006cda:	47d0      	blx	sl
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d0ad      	beq.n	8006c3c <_printf_i+0x15c>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	079b      	lsls	r3, r3, #30
 8006ce4:	d413      	bmi.n	8006d0e <_printf_i+0x22e>
 8006ce6:	68e0      	ldr	r0, [r4, #12]
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	4298      	cmp	r0, r3
 8006cec:	bfb8      	it	lt
 8006cee:	4618      	movlt	r0, r3
 8006cf0:	e7a6      	b.n	8006c40 <_printf_i+0x160>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	47d0      	blx	sl
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d09d      	beq.n	8006c3c <_printf_i+0x15c>
 8006d00:	3501      	adds	r5, #1
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	9903      	ldr	r1, [sp, #12]
 8006d06:	1a5b      	subs	r3, r3, r1
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dcf2      	bgt.n	8006cf2 <_printf_i+0x212>
 8006d0c:	e7eb      	b.n	8006ce6 <_printf_i+0x206>
 8006d0e:	2500      	movs	r5, #0
 8006d10:	f104 0619 	add.w	r6, r4, #25
 8006d14:	e7f5      	b.n	8006d02 <_printf_i+0x222>
 8006d16:	bf00      	nop
 8006d18:	08007169 	.word	0x08007169
 8006d1c:	0800717a 	.word	0x0800717a

08006d20 <__sflush_r>:
 8006d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d28:	0716      	lsls	r6, r2, #28
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	d454      	bmi.n	8006dda <__sflush_r+0xba>
 8006d30:	684b      	ldr	r3, [r1, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dc02      	bgt.n	8006d3c <__sflush_r+0x1c>
 8006d36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dd48      	ble.n	8006dce <__sflush_r+0xae>
 8006d3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	d045      	beq.n	8006dce <__sflush_r+0xae>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d48:	682f      	ldr	r7, [r5, #0]
 8006d4a:	6a21      	ldr	r1, [r4, #32]
 8006d4c:	602b      	str	r3, [r5, #0]
 8006d4e:	d030      	beq.n	8006db2 <__sflush_r+0x92>
 8006d50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	0759      	lsls	r1, r3, #29
 8006d56:	d505      	bpl.n	8006d64 <__sflush_r+0x44>
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d5e:	b10b      	cbz	r3, 8006d64 <__sflush_r+0x44>
 8006d60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d62:	1ad2      	subs	r2, r2, r3
 8006d64:	2300      	movs	r3, #0
 8006d66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d68:	6a21      	ldr	r1, [r4, #32]
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b0      	blx	r6
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	d106      	bne.n	8006d82 <__sflush_r+0x62>
 8006d74:	6829      	ldr	r1, [r5, #0]
 8006d76:	291d      	cmp	r1, #29
 8006d78:	d82b      	bhi.n	8006dd2 <__sflush_r+0xb2>
 8006d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e24 <__sflush_r+0x104>)
 8006d7c:	410a      	asrs	r2, r1
 8006d7e:	07d6      	lsls	r6, r2, #31
 8006d80:	d427      	bmi.n	8006dd2 <__sflush_r+0xb2>
 8006d82:	2200      	movs	r2, #0
 8006d84:	6062      	str	r2, [r4, #4]
 8006d86:	04d9      	lsls	r1, r3, #19
 8006d88:	6922      	ldr	r2, [r4, #16]
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	d504      	bpl.n	8006d98 <__sflush_r+0x78>
 8006d8e:	1c42      	adds	r2, r0, #1
 8006d90:	d101      	bne.n	8006d96 <__sflush_r+0x76>
 8006d92:	682b      	ldr	r3, [r5, #0]
 8006d94:	b903      	cbnz	r3, 8006d98 <__sflush_r+0x78>
 8006d96:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d9a:	602f      	str	r7, [r5, #0]
 8006d9c:	b1b9      	cbz	r1, 8006dce <__sflush_r+0xae>
 8006d9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006da2:	4299      	cmp	r1, r3
 8006da4:	d002      	beq.n	8006dac <__sflush_r+0x8c>
 8006da6:	4628      	mov	r0, r5
 8006da8:	f7ff fbf2 	bl	8006590 <_free_r>
 8006dac:	2300      	movs	r3, #0
 8006dae:	6363      	str	r3, [r4, #52]	@ 0x34
 8006db0:	e00d      	b.n	8006dce <__sflush_r+0xae>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b0      	blx	r6
 8006db8:	4602      	mov	r2, r0
 8006dba:	1c50      	adds	r0, r2, #1
 8006dbc:	d1c9      	bne.n	8006d52 <__sflush_r+0x32>
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0c6      	beq.n	8006d52 <__sflush_r+0x32>
 8006dc4:	2b1d      	cmp	r3, #29
 8006dc6:	d001      	beq.n	8006dcc <__sflush_r+0xac>
 8006dc8:	2b16      	cmp	r3, #22
 8006dca:	d11e      	bne.n	8006e0a <__sflush_r+0xea>
 8006dcc:	602f      	str	r7, [r5, #0]
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e022      	b.n	8006e18 <__sflush_r+0xf8>
 8006dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd6:	b21b      	sxth	r3, r3
 8006dd8:	e01b      	b.n	8006e12 <__sflush_r+0xf2>
 8006dda:	690f      	ldr	r7, [r1, #16]
 8006ddc:	2f00      	cmp	r7, #0
 8006dde:	d0f6      	beq.n	8006dce <__sflush_r+0xae>
 8006de0:	0793      	lsls	r3, r2, #30
 8006de2:	680e      	ldr	r6, [r1, #0]
 8006de4:	bf08      	it	eq
 8006de6:	694b      	ldreq	r3, [r1, #20]
 8006de8:	600f      	str	r7, [r1, #0]
 8006dea:	bf18      	it	ne
 8006dec:	2300      	movne	r3, #0
 8006dee:	eba6 0807 	sub.w	r8, r6, r7
 8006df2:	608b      	str	r3, [r1, #8]
 8006df4:	f1b8 0f00 	cmp.w	r8, #0
 8006df8:	dde9      	ble.n	8006dce <__sflush_r+0xae>
 8006dfa:	6a21      	ldr	r1, [r4, #32]
 8006dfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006dfe:	4643      	mov	r3, r8
 8006e00:	463a      	mov	r2, r7
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b0      	blx	r6
 8006e06:	2800      	cmp	r0, #0
 8006e08:	dc08      	bgt.n	8006e1c <__sflush_r+0xfc>
 8006e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1c:	4407      	add	r7, r0
 8006e1e:	eba8 0800 	sub.w	r8, r8, r0
 8006e22:	e7e7      	b.n	8006df4 <__sflush_r+0xd4>
 8006e24:	dfbffffe 	.word	0xdfbffffe

08006e28 <_fflush_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	690b      	ldr	r3, [r1, #16]
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	b913      	cbnz	r3, 8006e38 <_fflush_r+0x10>
 8006e32:	2500      	movs	r5, #0
 8006e34:	4628      	mov	r0, r5
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	b118      	cbz	r0, 8006e42 <_fflush_r+0x1a>
 8006e3a:	6a03      	ldr	r3, [r0, #32]
 8006e3c:	b90b      	cbnz	r3, 8006e42 <_fflush_r+0x1a>
 8006e3e:	f7ff fa9f 	bl	8006380 <__sinit>
 8006e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f3      	beq.n	8006e32 <_fflush_r+0xa>
 8006e4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e4c:	07d0      	lsls	r0, r2, #31
 8006e4e:	d404      	bmi.n	8006e5a <_fflush_r+0x32>
 8006e50:	0599      	lsls	r1, r3, #22
 8006e52:	d402      	bmi.n	8006e5a <_fflush_r+0x32>
 8006e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e56:	f7ff fb98 	bl	800658a <__retarget_lock_acquire_recursive>
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	f7ff ff5f 	bl	8006d20 <__sflush_r>
 8006e62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e64:	07da      	lsls	r2, r3, #31
 8006e66:	4605      	mov	r5, r0
 8006e68:	d4e4      	bmi.n	8006e34 <_fflush_r+0xc>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	059b      	lsls	r3, r3, #22
 8006e6e:	d4e1      	bmi.n	8006e34 <_fflush_r+0xc>
 8006e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e72:	f7ff fb8b 	bl	800658c <__retarget_lock_release_recursive>
 8006e76:	e7dd      	b.n	8006e34 <_fflush_r+0xc>

08006e78 <__swbuf_r>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	460e      	mov	r6, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	4605      	mov	r5, r0
 8006e80:	b118      	cbz	r0, 8006e8a <__swbuf_r+0x12>
 8006e82:	6a03      	ldr	r3, [r0, #32]
 8006e84:	b90b      	cbnz	r3, 8006e8a <__swbuf_r+0x12>
 8006e86:	f7ff fa7b 	bl	8006380 <__sinit>
 8006e8a:	69a3      	ldr	r3, [r4, #24]
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	071a      	lsls	r2, r3, #28
 8006e92:	d501      	bpl.n	8006e98 <__swbuf_r+0x20>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	b943      	cbnz	r3, 8006eaa <__swbuf_r+0x32>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f82a 	bl	8006ef4 <__swsetup_r>
 8006ea0:	b118      	cbz	r0, 8006eaa <__swbuf_r+0x32>
 8006ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	1a98      	subs	r0, r3, r2
 8006eb0:	6963      	ldr	r3, [r4, #20]
 8006eb2:	b2f6      	uxtb	r6, r6
 8006eb4:	4283      	cmp	r3, r0
 8006eb6:	4637      	mov	r7, r6
 8006eb8:	dc05      	bgt.n	8006ec6 <__swbuf_r+0x4e>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f7ff ffb3 	bl	8006e28 <_fflush_r>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d1ed      	bne.n	8006ea2 <__swbuf_r+0x2a>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	60a3      	str	r3, [r4, #8]
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	701e      	strb	r6, [r3, #0]
 8006ed4:	6962      	ldr	r2, [r4, #20]
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d004      	beq.n	8006ee6 <__swbuf_r+0x6e>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d5e1      	bpl.n	8006ea6 <__swbuf_r+0x2e>
 8006ee2:	2e0a      	cmp	r6, #10
 8006ee4:	d1df      	bne.n	8006ea6 <__swbuf_r+0x2e>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7ff ff9d 	bl	8006e28 <_fflush_r>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0d9      	beq.n	8006ea6 <__swbuf_r+0x2e>
 8006ef2:	e7d6      	b.n	8006ea2 <__swbuf_r+0x2a>

08006ef4 <__swsetup_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4b29      	ldr	r3, [pc, #164]	@ (8006f9c <__swsetup_r+0xa8>)
 8006ef8:	4605      	mov	r5, r0
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	460c      	mov	r4, r1
 8006efe:	b118      	cbz	r0, 8006f08 <__swsetup_r+0x14>
 8006f00:	6a03      	ldr	r3, [r0, #32]
 8006f02:	b90b      	cbnz	r3, 8006f08 <__swsetup_r+0x14>
 8006f04:	f7ff fa3c 	bl	8006380 <__sinit>
 8006f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0c:	0719      	lsls	r1, r3, #28
 8006f0e:	d422      	bmi.n	8006f56 <__swsetup_r+0x62>
 8006f10:	06da      	lsls	r2, r3, #27
 8006f12:	d407      	bmi.n	8006f24 <__swsetup_r+0x30>
 8006f14:	2209      	movs	r2, #9
 8006f16:	602a      	str	r2, [r5, #0]
 8006f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f22:	e033      	b.n	8006f8c <__swsetup_r+0x98>
 8006f24:	0758      	lsls	r0, r3, #29
 8006f26:	d512      	bpl.n	8006f4e <__swsetup_r+0x5a>
 8006f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f2a:	b141      	cbz	r1, 8006f3e <__swsetup_r+0x4a>
 8006f2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f30:	4299      	cmp	r1, r3
 8006f32:	d002      	beq.n	8006f3a <__swsetup_r+0x46>
 8006f34:	4628      	mov	r0, r5
 8006f36:	f7ff fb2b 	bl	8006590 <_free_r>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	2300      	movs	r3, #0
 8006f48:	6063      	str	r3, [r4, #4]
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	f043 0308 	orr.w	r3, r3, #8
 8006f54:	81a3      	strh	r3, [r4, #12]
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	b94b      	cbnz	r3, 8006f6e <__swsetup_r+0x7a>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f64:	d003      	beq.n	8006f6e <__swsetup_r+0x7a>
 8006f66:	4621      	mov	r1, r4
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f000 f84f 	bl	800700c <__smakebuf_r>
 8006f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f72:	f013 0201 	ands.w	r2, r3, #1
 8006f76:	d00a      	beq.n	8006f8e <__swsetup_r+0x9a>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	60a2      	str	r2, [r4, #8]
 8006f7c:	6962      	ldr	r2, [r4, #20]
 8006f7e:	4252      	negs	r2, r2
 8006f80:	61a2      	str	r2, [r4, #24]
 8006f82:	6922      	ldr	r2, [r4, #16]
 8006f84:	b942      	cbnz	r2, 8006f98 <__swsetup_r+0xa4>
 8006f86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f8a:	d1c5      	bne.n	8006f18 <__swsetup_r+0x24>
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
 8006f8e:	0799      	lsls	r1, r3, #30
 8006f90:	bf58      	it	pl
 8006f92:	6962      	ldrpl	r2, [r4, #20]
 8006f94:	60a2      	str	r2, [r4, #8]
 8006f96:	e7f4      	b.n	8006f82 <__swsetup_r+0x8e>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e7f7      	b.n	8006f8c <__swsetup_r+0x98>
 8006f9c:	20000030 	.word	0x20000030

08006fa0 <_sbrk_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d06      	ldr	r5, [pc, #24]	@ (8006fbc <_sbrk_r+0x1c>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	602b      	str	r3, [r5, #0]
 8006fac:	f7fb f9ce 	bl	800234c <_sbrk>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_sbrk_r+0x1a>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_sbrk_r+0x1a>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	200004a0 	.word	0x200004a0

08006fc0 <__swhatbuf_r>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	b096      	sub	sp, #88	@ 0x58
 8006fcc:	4615      	mov	r5, r2
 8006fce:	461e      	mov	r6, r3
 8006fd0:	da0d      	bge.n	8006fee <__swhatbuf_r+0x2e>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fd8:	f04f 0100 	mov.w	r1, #0
 8006fdc:	bf14      	ite	ne
 8006fde:	2340      	movne	r3, #64	@ 0x40
 8006fe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	6031      	str	r1, [r6, #0]
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	b016      	add	sp, #88	@ 0x58
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	466a      	mov	r2, sp
 8006ff0:	f000 f848 	bl	8007084 <_fstat_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	dbec      	blt.n	8006fd2 <__swhatbuf_r+0x12>
 8006ff8:	9901      	ldr	r1, [sp, #4]
 8006ffa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ffe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007002:	4259      	negs	r1, r3
 8007004:	4159      	adcs	r1, r3
 8007006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800700a:	e7eb      	b.n	8006fe4 <__swhatbuf_r+0x24>

0800700c <__smakebuf_r>:
 800700c:	898b      	ldrh	r3, [r1, #12]
 800700e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007010:	079d      	lsls	r5, r3, #30
 8007012:	4606      	mov	r6, r0
 8007014:	460c      	mov	r4, r1
 8007016:	d507      	bpl.n	8007028 <__smakebuf_r+0x1c>
 8007018:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	2301      	movs	r3, #1
 8007022:	6163      	str	r3, [r4, #20]
 8007024:	b003      	add	sp, #12
 8007026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007028:	ab01      	add	r3, sp, #4
 800702a:	466a      	mov	r2, sp
 800702c:	f7ff ffc8 	bl	8006fc0 <__swhatbuf_r>
 8007030:	9f00      	ldr	r7, [sp, #0]
 8007032:	4605      	mov	r5, r0
 8007034:	4639      	mov	r1, r7
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff fb16 	bl	8006668 <_malloc_r>
 800703c:	b948      	cbnz	r0, 8007052 <__smakebuf_r+0x46>
 800703e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007042:	059a      	lsls	r2, r3, #22
 8007044:	d4ee      	bmi.n	8007024 <__smakebuf_r+0x18>
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	f043 0302 	orr.w	r3, r3, #2
 800704e:	81a3      	strh	r3, [r4, #12]
 8007050:	e7e2      	b.n	8007018 <__smakebuf_r+0xc>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	6020      	str	r0, [r4, #0]
 8007056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	9b01      	ldr	r3, [sp, #4]
 800705e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007062:	b15b      	cbz	r3, 800707c <__smakebuf_r+0x70>
 8007064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007068:	4630      	mov	r0, r6
 800706a:	f000 f81d 	bl	80070a8 <_isatty_r>
 800706e:	b128      	cbz	r0, 800707c <__smakebuf_r+0x70>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	431d      	orrs	r5, r3
 8007080:	81a5      	strh	r5, [r4, #12]
 8007082:	e7cf      	b.n	8007024 <__smakebuf_r+0x18>

08007084 <_fstat_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d07      	ldr	r5, [pc, #28]	@ (80070a4 <_fstat_r+0x20>)
 8007088:	2300      	movs	r3, #0
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	602b      	str	r3, [r5, #0]
 8007092:	f7fb f932 	bl	80022fa <_fstat>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d102      	bne.n	80070a0 <_fstat_r+0x1c>
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	b103      	cbz	r3, 80070a0 <_fstat_r+0x1c>
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	bd38      	pop	{r3, r4, r5, pc}
 80070a2:	bf00      	nop
 80070a4:	200004a0 	.word	0x200004a0

080070a8 <_isatty_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d06      	ldr	r5, [pc, #24]	@ (80070c4 <_isatty_r+0x1c>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f7fb f931 	bl	800231a <_isatty>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_isatty_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_isatty_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	200004a0 	.word	0x200004a0

080070c8 <_init>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr

080070d4 <_fini>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr
