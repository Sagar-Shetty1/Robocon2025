
Servo_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005424  08005424  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005424  08005424  00006424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800542c  0800542c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005430  08005430  00006430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005434  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000068  0800549c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800549c  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4d5  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002292  00000000  00000000  0001556d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00017800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad1  00000000  00000000  000185e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bd4  00000000  00000000  000190b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010be3  00000000  00000000  0003bc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2cdf  00000000  00000000  0004c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f547  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000418c  00000000  00000000  0011f58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00123718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800537c 	.word	0x0800537c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800537c 	.word	0x0800537c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80005a8:	2210      	movs	r2, #16
 80005aa:	4904      	ldr	r1, [pc, #16]	@ (80005bc <HAL_UART_RxCpltCallback+0x1c>)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <HAL_UART_RxCpltCallback+0x20>)
 80005ae:	f003 fa7e 	bl	8003aae <HAL_UART_Receive_DMA>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200001bc 	.word	0x200001bc
 80005c0:	200000cc 	.word	0x200000cc

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	b08d      	sub	sp, #52	@ 0x34
 80005c8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fdb3 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f96b 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 faf1 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d6:	f000 facf 	bl	8000b78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005da:	f000 faa3 	bl	8000b24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005de:	f000 f9d5 	bl	800098c <MX_TIM1_Init>
  MX_UART4_Init();
 80005e2:	f000 fa75 	bl	8000ad0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80005e6:	2210      	movs	r2, #16
 80005e8:	4971      	ldr	r1, [pc, #452]	@ (80007b0 <main+0x1ec>)
 80005ea:	4872      	ldr	r0, [pc, #456]	@ (80007b4 <main+0x1f0>)
 80005ec:	f003 fa5f 	bl	8003aae <HAL_UART_Receive_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005f0:	2100      	movs	r1, #0
 80005f2:	4871      	ldr	r0, [pc, #452]	@ (80007b8 <main+0x1f4>)
 80005f4:	f002 fb44 	bl	8002c80 <HAL_TIM_PWM_Start>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/* ps5 controller */
		lx = (rxbuff[0] & 0x80) ?
 80005f8:	4b6d      	ldr	r3, [pc, #436]	@ (80007b0 <main+0x1ec>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80005fe:	2b00      	cmp	r3, #0
 8000600:	da04      	bge.n	800060c <main+0x48>
 8000602:	4b6b      	ldr	r3, [pc, #428]	@ (80007b0 <main+0x1ec>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800060a:	e001      	b.n	8000610 <main+0x4c>
 800060c:	4b68      	ldr	r3, [pc, #416]	@ (80007b0 <main+0x1ec>)
 800060e:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 8000610:	4a6a      	ldr	r2, [pc, #424]	@ (80007bc <main+0x1f8>)
 8000612:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 8000614:	4b66      	ldr	r3, [pc, #408]	@ (80007b0 <main+0x1ec>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 800061a:	2b00      	cmp	r3, #0
 800061c:	da04      	bge.n	8000628 <main+0x64>
 800061e:	4b64      	ldr	r3, [pc, #400]	@ (80007b0 <main+0x1ec>)
 8000620:	785b      	ldrb	r3, [r3, #1]
 8000622:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000626:	e001      	b.n	800062c <main+0x68>
 8000628:	4b61      	ldr	r3, [pc, #388]	@ (80007b0 <main+0x1ec>)
 800062a:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 800062c:	4a64      	ldr	r2, [pc, #400]	@ (80007c0 <main+0x1fc>)
 800062e:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 8000630:	4b5f      	ldr	r3, [pc, #380]	@ (80007b0 <main+0x1ec>)
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 8000636:	2b00      	cmp	r3, #0
 8000638:	da04      	bge.n	8000644 <main+0x80>
 800063a:	4b5d      	ldr	r3, [pc, #372]	@ (80007b0 <main+0x1ec>)
 800063c:	789b      	ldrb	r3, [r3, #2]
 800063e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000642:	e001      	b.n	8000648 <main+0x84>
 8000644:	4b5a      	ldr	r3, [pc, #360]	@ (80007b0 <main+0x1ec>)
 8000646:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 8000648:	4a5e      	ldr	r2, [pc, #376]	@ (80007c4 <main+0x200>)
 800064a:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 800064c:	4b58      	ldr	r3, [pc, #352]	@ (80007b0 <main+0x1ec>)
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8000652:	2b00      	cmp	r3, #0
 8000654:	da04      	bge.n	8000660 <main+0x9c>
 8000656:	4b56      	ldr	r3, [pc, #344]	@ (80007b0 <main+0x1ec>)
 8000658:	78db      	ldrb	r3, [r3, #3]
 800065a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800065e:	e001      	b.n	8000664 <main+0xa0>
 8000660:	4b53      	ldr	r3, [pc, #332]	@ (80007b0 <main+0x1ec>)
 8000662:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 8000664:	4a58      	ldr	r2, [pc, #352]	@ (80007c8 <main+0x204>)
 8000666:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8000668:	4b51      	ldr	r3, [pc, #324]	@ (80007b0 <main+0x1ec>)
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 800066e:	2b00      	cmp	r3, #0
 8000670:	da04      	bge.n	800067c <main+0xb8>
 8000672:	4b4f      	ldr	r3, [pc, #316]	@ (80007b0 <main+0x1ec>)
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800067a:	e001      	b.n	8000680 <main+0xbc>
 800067c:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <main+0x1ec>)
 800067e:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 8000680:	4a52      	ldr	r2, [pc, #328]	@ (80007cc <main+0x208>)
 8000682:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 8000684:	4b4a      	ldr	r3, [pc, #296]	@ (80007b0 <main+0x1ec>)
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 800068a:	2b00      	cmp	r3, #0
 800068c:	da04      	bge.n	8000698 <main+0xd4>
 800068e:	4b48      	ldr	r3, [pc, #288]	@ (80007b0 <main+0x1ec>)
 8000690:	795b      	ldrb	r3, [r3, #5]
 8000692:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000696:	e001      	b.n	800069c <main+0xd8>
 8000698:	4b45      	ldr	r3, [pc, #276]	@ (80007b0 <main+0x1ec>)
 800069a:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 800069c:	4a4c      	ldr	r2, [pc, #304]	@ (80007d0 <main+0x20c>)
 800069e:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 80006a0:	4b43      	ldr	r3, [pc, #268]	@ (80007b0 <main+0x1ec>)
 80006a2:	799b      	ldrb	r3, [r3, #6]
 80006a4:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	da04      	bge.n	80006b4 <main+0xf0>
 80006aa:	4b41      	ldr	r3, [pc, #260]	@ (80007b0 <main+0x1ec>)
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006b2:	e001      	b.n	80006b8 <main+0xf4>
 80006b4:	4b3e      	ldr	r3, [pc, #248]	@ (80007b0 <main+0x1ec>)
 80006b6:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 80006b8:	4a46      	ldr	r2, [pc, #280]	@ (80007d4 <main+0x210>)
 80006ba:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 80006bc:	4b3c      	ldr	r3, [pc, #240]	@ (80007b0 <main+0x1ec>)
 80006be:	79db      	ldrb	r3, [r3, #7]
 80006c0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	da04      	bge.n	80006d0 <main+0x10c>
 80006c6:	4b3a      	ldr	r3, [pc, #232]	@ (80007b0 <main+0x1ec>)
 80006c8:	79db      	ldrb	r3, [r3, #7]
 80006ca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006ce:	e001      	b.n	80006d4 <main+0x110>
 80006d0:	4b37      	ldr	r3, [pc, #220]	@ (80007b0 <main+0x1ec>)
 80006d2:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 80006d4:	4a40      	ldr	r2, [pc, #256]	@ (80007d8 <main+0x214>)
 80006d6:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 80006d8:	4b35      	ldr	r3, [pc, #212]	@ (80007b0 <main+0x1ec>)
 80006da:	7a1b      	ldrb	r3, [r3, #8]
 80006dc:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da04      	bge.n	80006ec <main+0x128>
 80006e2:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <main+0x1ec>)
 80006e4:	7a1b      	ldrb	r3, [r3, #8]
 80006e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006ea:	e001      	b.n	80006f0 <main+0x12c>
 80006ec:	4b30      	ldr	r3, [pc, #192]	@ (80007b0 <main+0x1ec>)
 80006ee:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 80006f0:	4a3a      	ldr	r2, [pc, #232]	@ (80007dc <main+0x218>)
 80006f2:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 80006f4:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <main+0x1ec>)
 80006f6:	7a5b      	ldrb	r3, [r3, #9]
 80006f8:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da04      	bge.n	8000708 <main+0x144>
 80006fe:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <main+0x1ec>)
 8000700:	7a5b      	ldrb	r3, [r3, #9]
 8000702:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000706:	e001      	b.n	800070c <main+0x148>
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <main+0x1ec>)
 800070a:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 800070c:	4a34      	ldr	r2, [pc, #208]	@ (80007e0 <main+0x21c>)
 800070e:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <main+0x1ec>)
 8000712:	7a9b      	ldrb	r3, [r3, #10]
 8000714:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 8000716:	2b00      	cmp	r3, #0
 8000718:	da04      	bge.n	8000724 <main+0x160>
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <main+0x1ec>)
 800071c:	7a9b      	ldrb	r3, [r3, #10]
 800071e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000722:	e001      	b.n	8000728 <main+0x164>
 8000724:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <main+0x1ec>)
 8000726:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 8000728:	4a2e      	ldr	r2, [pc, #184]	@ (80007e4 <main+0x220>)
 800072a:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <main+0x1ec>)
 800072e:	7adb      	ldrb	r3, [r3, #11]
 8000730:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 8000732:	2b00      	cmp	r3, #0
 8000734:	da04      	bge.n	8000740 <main+0x17c>
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <main+0x1ec>)
 8000738:	7adb      	ldrb	r3, [r3, #11]
 800073a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800073e:	e001      	b.n	8000744 <main+0x180>
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <main+0x1ec>)
 8000742:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 8000744:	4a28      	ldr	r2, [pc, #160]	@ (80007e8 <main+0x224>)
 8000746:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <main+0x1ec>)
 800074a:	7b1b      	ldrb	r3, [r3, #12]
 800074c:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 800074e:	2b00      	cmp	r3, #0
 8000750:	da04      	bge.n	800075c <main+0x198>
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <main+0x1ec>)
 8000754:	7b1b      	ldrb	r3, [r3, #12]
 8000756:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800075a:	e001      	b.n	8000760 <main+0x19c>
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <main+0x1ec>)
 800075e:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 8000760:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <main+0x228>)
 8000762:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <main+0x1ec>)
 8000766:	7b5b      	ldrb	r3, [r3, #13]
 8000768:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 800076a:	2b00      	cmp	r3, #0
 800076c:	da04      	bge.n	8000778 <main+0x1b4>
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <main+0x1ec>)
 8000770:	7b5b      	ldrb	r3, [r3, #13]
 8000772:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000776:	e001      	b.n	800077c <main+0x1b8>
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <main+0x1ec>)
 800077a:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 800077c:	4a1c      	ldr	r2, [pc, #112]	@ (80007f0 <main+0x22c>)
 800077e:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 8000780:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <main+0x1ec>)
 8000782:	7b9b      	ldrb	r3, [r3, #14]
 8000784:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8000786:	2b00      	cmp	r3, #0
 8000788:	da04      	bge.n	8000794 <main+0x1d0>
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <main+0x1ec>)
 800078c:	7b9b      	ldrb	r3, [r3, #14]
 800078e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000792:	e001      	b.n	8000798 <main+0x1d4>
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <main+0x1ec>)
 8000796:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8000798:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <main+0x230>)
 800079a:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 800079c:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <main+0x1ec>)
 800079e:	7bdb      	ldrb	r3, [r3, #15]
 80007a0:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	da28      	bge.n	80007f8 <main+0x234>
 80007a6:	4b02      	ldr	r3, [pc, #8]	@ (80007b0 <main+0x1ec>)
 80007a8:	7bdb      	ldrb	r3, [r3, #15]
 80007aa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007ae:	e025      	b.n	80007fc <main+0x238>
 80007b0:	200001bc 	.word	0x200001bc
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	20000084 	.word	0x20000084
 80007bc:	200001cc 	.word	0x200001cc
 80007c0:	200001d0 	.word	0x200001d0
 80007c4:	200001d4 	.word	0x200001d4
 80007c8:	200001d8 	.word	0x200001d8
 80007cc:	200001dc 	.word	0x200001dc
 80007d0:	200001e0 	.word	0x200001e0
 80007d4:	200001e4 	.word	0x200001e4
 80007d8:	200001e8 	.word	0x200001e8
 80007dc:	200001ec 	.word	0x200001ec
 80007e0:	200001f0 	.word	0x200001f0
 80007e4:	200001f4 	.word	0x200001f4
 80007e8:	200001f8 	.word	0x200001f8
 80007ec:	200001fc 	.word	0x200001fc
 80007f0:	20000204 	.word	0x20000204
 80007f4:	20000200 	.word	0x20000200
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <main+0x2ac>)
 80007fa:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 80007fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <main+0x2b0>)
 80007fe:	6013      	str	r3, [r2, #0]

		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %d %d\r\n",
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <main+0x2b4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <main+0x2b8>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	60ba      	str	r2, [r7, #8]
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <main+0x2bc>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <main+0x2c0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <main+0x2c4>)
 8000818:	6812      	ldr	r2, [r2, #0]
 800081a:	491c      	ldr	r1, [pc, #112]	@ (800088c <main+0x2c8>)
 800081c:	6809      	ldr	r1, [r1, #0]
 800081e:	481c      	ldr	r0, [pc, #112]	@ (8000890 <main+0x2cc>)
 8000820:	6800      	ldr	r0, [r0, #0]
 8000822:	4c1c      	ldr	r4, [pc, #112]	@ (8000894 <main+0x2d0>)
 8000824:	6824      	ldr	r4, [r4, #0]
 8000826:	4d1c      	ldr	r5, [pc, #112]	@ (8000898 <main+0x2d4>)
 8000828:	682d      	ldr	r5, [r5, #0]
 800082a:	4e1c      	ldr	r6, [pc, #112]	@ (800089c <main+0x2d8>)
 800082c:	6836      	ldr	r6, [r6, #0]
 800082e:	9606      	str	r6, [sp, #24]
 8000830:	9505      	str	r5, [sp, #20]
 8000832:	9404      	str	r4, [sp, #16]
 8000834:	9003      	str	r0, [sp, #12]
 8000836:	9102      	str	r1, [sp, #8]
 8000838:	9201      	str	r2, [sp, #4]
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	68f9      	ldr	r1, [r7, #12]
 8000842:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <main+0x2dc>)
 8000844:	f003 ff2c 	bl	80046a0 <iprintf>
//		else if (right == 1) {
//
//			htim1.Instance->CCR1 = 125; // duty cycle is 2 ms (180 degrees)
//
//		}
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 125);
 8000848:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <main+0x2e0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	227d      	movs	r2, #125	@ 0x7d
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000854:	f000 fce0 	bl	8001218 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50); // duty cycle is 2 ms (180 degrees)
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <main+0x2e0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2232      	movs	r2, #50	@ 0x32
 800085e:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_Delay(500);
 8000860:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000864:	f000 fcd8 	bl	8001218 <HAL_Delay>
//			Set_Servo_Angle(&htim1, TIM_CHANNEL_1, 90); // duty cycle is 2 ms (180 degrees)
		if (left == 1)
 8000868:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <main+0x2d4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
	while (1) {
 800086e:	e6c3      	b.n	80005f8 <main+0x34>
 8000870:	200001bc 	.word	0x200001bc
 8000874:	20000208 	.word	0x20000208
 8000878:	200001cc 	.word	0x200001cc
 800087c:	200001d0 	.word	0x200001d0
 8000880:	200001d4 	.word	0x200001d4
 8000884:	200001d8 	.word	0x200001d8
 8000888:	200001dc 	.word	0x200001dc
 800088c:	200001e0 	.word	0x200001e0
 8000890:	200001e4 	.word	0x200001e4
 8000894:	200001e8 	.word	0x200001e8
 8000898:	200001f4 	.word	0x200001f4
 800089c:	200001f8 	.word	0x200001f8
 80008a0:	08005394 	.word	0x08005394
 80008a4:	20000084 	.word	0x20000084

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	@ 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2234      	movs	r2, #52	@ 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 ff47 	bl	800474a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <SystemClock_Config+0xdc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000984 <SystemClock_Config+0xdc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <SystemClock_Config+0xdc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <SystemClock_Config+0xe0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a25      	ldr	r2, [pc, #148]	@ (8000988 <SystemClock_Config+0xe0>)
 80008f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <SystemClock_Config+0xe0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800090c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000916:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800091c:	23b4      	movs	r3, #180	@ 0xb4
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fe5f 	bl	80025f4 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800093c:	f000 f9c0 	bl	8000cc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000940:	f001 fabe 	bl	8001ec0 <HAL_PWREx_EnableOverDrive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800094a:	f000 f9b9 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800095a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000964:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2105      	movs	r1, #5
 800096c:	4618      	mov	r0, r3
 800096e:	f001 faf7 	bl	8001f60 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000978:	f000 f9a2 	bl	8000cc0 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	@ 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b096      	sub	sp, #88	@ 0x58
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fec0 	bl	800474a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ca:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009cc:	4a3f      	ldr	r2, [pc, #252]	@ (8000acc <MX_TIM1_Init+0x140>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 899;
 80009d0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009d2:	f240 3283 	movw	r2, #899	@ 0x383
 80009d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80009de:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ec:	4b36      	ldr	r3, [pc, #216]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b35      	ldr	r3, [pc, #212]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f8:	4833      	ldr	r0, [pc, #204]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 80009fa:	f002 f899 	bl	8002b30 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f95c 	bl	8000cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a12:	4619      	mov	r1, r3
 8000a14:	482c      	ldr	r0, [pc, #176]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 8000a16:	f002 fabd 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a20:	f000 f94e 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a24:	4828      	ldr	r0, [pc, #160]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 8000a26:	f002 f8d2 	bl	8002bce <HAL_TIM_PWM_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a30:	f000 f946 	bl	8000cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a40:	4619      	mov	r1, r3
 8000a42:	4821      	ldr	r0, [pc, #132]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 8000a44:	f002 fe8a 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a4e:	f000 f937 	bl	8000cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a52:	2360      	movs	r3, #96	@ 0x60
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4814      	ldr	r0, [pc, #80]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 8000a78:	f002 f9ca 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000a82:	f000 f91d 	bl	8000cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 8000aaa:	f002 fed3 	bl	8003854 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000ab4:	f000 f904 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab8:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <MX_TIM1_Init+0x13c>)
 8000aba:	f000 f951 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 8000abe:	bf00      	nop
 8000ac0:	3758      	adds	r7, #88	@ 0x58
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000084 	.word	0x20000084
 8000acc:	40010000 	.word	0x40010000

08000ad0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_UART4_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_UART4_Init+0x4c>)
 8000b08:	f002 fef6 	bl	80038f8 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f8d5 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000cc 	.word	0x200000cc
 8000b20:	40004c00 	.word	0x40004c00

08000b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <MX_USART2_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	f002 fecc 	bl	80038f8 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b66:	f000 f8ab 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000114 	.word	0x20000114
 8000b74:	40004400 	.word	0x40004400

08000b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_DMA_Init+0x3c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <MX_DMA_Init+0x3c>)
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_DMA_Init+0x3c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	200d      	movs	r0, #13
 8000ba0:	f000 fc39 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ba4:	200d      	movs	r0, #13
 8000ba6:	f000 fc52 	bl	800144e <HAL_NVIC_EnableIRQ>

}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a25      	ldr	r2, [pc, #148]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a17      	ldr	r2, [pc, #92]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_GPIO_Init+0xd0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <MX_GPIO_Init+0xd4>)
 8000c44:	f001 f922 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <MX_GPIO_Init+0xd8>)
 8000c60:	f000 ff80 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c64:	2320      	movs	r3, #32
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_GPIO_Init+0xd4>)
 8000c7c:	f000 ff72 	bl	8001b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	@ 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020800 	.word	0x40020800

08000c94 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <_write+0x28>)
 8000cac:	f002 fe74 	bl	8003998 <HAL_UART_Transmit>
	return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000114 	.word	0x20000114

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <Error_Handler+0x8>

08000ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0a:	2007      	movs	r0, #7
 8000d0c:	f000 fb78 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0b      	ldr	r2, [pc, #44]	@ (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_TIM_Base_MspInit+0x40>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d36:	4a09      	ldr	r2, [pc, #36]	@ (8000d5c <HAL_TIM_Base_MspInit+0x40>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <HAL_TIM_Base_MspInit+0x40>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <HAL_TIM_MspPostInit+0x68>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d11e      	bne.n	8000dc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <HAL_TIM_MspPostInit+0x70>)
 8000dbc:	f000 fed2 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a4a      	ldr	r2, [pc, #296]	@ (8000f1c <HAL_UART_MspInit+0x148>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d15c      	bne.n	8000eb0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	4b49      	ldr	r3, [pc, #292]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a48      	ldr	r2, [pc, #288]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000e00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e0e:	61bb      	str	r3, [r7, #24]
 8000e10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a41      	ldr	r2, [pc, #260]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e40:	2308      	movs	r3, #8
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4836      	ldr	r0, [pc, #216]	@ (8000f24 <HAL_UART_MspInit+0x150>)
 8000e4c:	f000 fe8a 	bl	8001b64 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000e50:	4b35      	ldr	r3, [pc, #212]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e52:	4a36      	ldr	r2, [pc, #216]	@ (8000f2c <HAL_UART_MspInit+0x158>)
 8000e54:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000e56:	4b34      	ldr	r3, [pc, #208]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e58:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b32      	ldr	r3, [pc, #200]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e78:	4b2b      	ldr	r3, [pc, #172]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000e92:	4825      	ldr	r0, [pc, #148]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000e94:	f000 faf6 	bl	8001484 <HAL_DMA_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e9e:	f7ff ff0f 	bl	8000cc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_UART_MspInit+0x154>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eae:	e030      	b.n	8000f12 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f30 <HAL_UART_MspInit+0x15c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12b      	bne.n	8000f12 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a17      	ldr	r2, [pc, #92]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_UART_MspInit+0x14c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <HAL_UART_MspInit+0x160>)
 8000f0e:	f000 fe29 	bl	8001b64 <HAL_GPIO_Init>
}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	@ 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004c00 	.word	0x40004c00
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020800 	.word	0x40020800
 8000f28:	2000015c 	.word	0x2000015c
 8000f2c:	40026040 	.word	0x40026040
 8000f30:	40004400 	.word	0x40004400
 8000f34:	40020000 	.word	0x40020000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <NMI_Handler+0x4>

08000f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <MemManage_Handler+0x4>

08000f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 f923 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <DMA1_Stream2_IRQHandler+0x10>)
 8000f9e:	f000 fb77 	bl	8001690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000015c 	.word	0x2000015c

08000fac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e00a      	b.n	8000fd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fbe:	f3af 8000 	nop.w
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf0      	blt.n	8000fbe <_read+0x12>
  }

  return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100e:	605a      	str	r2, [r3, #4]
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f003 fbb2 	bl	80047e8 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20020000 	.word	0x20020000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	2000020c 	.word	0x2000020c
 80010b8:	20000360 	.word	0x20000360

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001118 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010e4:	f7ff ffea 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	@ (8001120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	@ (800112c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800110e:	f003 fb71 	bl	80047f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001112:	f7ff fa57 	bl	80005c4 <main>
  bx  lr    
 8001116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001124:	08005434 	.word	0x08005434
  ldr r2, =_sbss
 8001128:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800112c:	20000360 	.word	0x20000360

08001130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f94f 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fdb0 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f967 	bl	800146a <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f92f 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000210 	.word	0x20000210

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000210 	.word	0x20000210

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	@ (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	@ (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	@ 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff29 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff3e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff8e 	bl	8001354 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff31 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff feb6 	bl	8001200 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e099      	b.n	80015d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c0:	e00f      	b.n	80014e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c2:	f7ff fe9d 	bl	8001200 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d908      	bls.n	80014e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2220      	movs	r2, #32
 80014d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e078      	b.n	80015d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e8      	bne.n	80014c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <HAL_DMA_Init+0x158>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	2b04      	cmp	r3, #4
 800153a:	d107      	bne.n	800154c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4313      	orrs	r3, r2
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f023 0307 	bic.w	r3, r3, #7
 8001562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	2b04      	cmp	r3, #4
 8001574:	d117      	bne.n	80015a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4313      	orrs	r3, r2
 800157e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00e      	beq.n	80015a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fa6f 	bl	8001a6c <DMA_CheckFifoParam>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015a2:	2301      	movs	r3, #1
 80015a4:	e016      	b.n	80015d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fa26 	bl	8001a00 <DMA_CalcBaseAndBitshift>
 80015b4:	4603      	mov	r3, r0
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	223f      	movs	r2, #63	@ 0x3f
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	f010803f 	.word	0xf010803f

080015e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Start_IT+0x26>
 8001602:	2302      	movs	r3, #2
 8001604:	e040      	b.n	8001688 <HAL_DMA_Start_IT+0xa8>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d12f      	bne.n	800167a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2202      	movs	r2, #2
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f9b8 	bl	80019a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001638:	223f      	movs	r2, #63	@ 0x3f
 800163a:	409a      	lsls	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0216 	orr.w	r2, r2, #22
 800164e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0208 	orr.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e005      	b.n	8001686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001682:	2302      	movs	r3, #2
 8001684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001686:	7dfb      	ldrb	r3, [r7, #23]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800169c:	4b8e      	ldr	r3, [pc, #568]	@ (80018d8 <HAL_DMA_IRQHandler+0x248>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a8e      	ldr	r2, [pc, #568]	@ (80018dc <HAL_DMA_IRQHandler+0x24c>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0a9b      	lsrs	r3, r3, #10
 80016a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ba:	2208      	movs	r2, #8
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01a      	beq.n	80016fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0204 	bic.w	r2, r2, #4
 80016e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e8:	2208      	movs	r2, #8
 80016ea:	409a      	lsls	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001700:	2201      	movs	r2, #1
 8001702:	409a      	lsls	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d012      	beq.n	8001732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171e:	2201      	movs	r2, #1
 8001720:	409a      	lsls	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001736:	2204      	movs	r2, #4
 8001738:	409a      	lsls	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d012      	beq.n	8001768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00b      	beq.n	8001768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001754:	2204      	movs	r2, #4
 8001756:	409a      	lsls	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176c:	2210      	movs	r2, #16
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d043      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d03c      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178a:	2210      	movs	r2, #16
 800178c:	409a      	lsls	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d018      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d024      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
 80017be:	e01f      	b.n	8001800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01b      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
 80017d0:	e016      	b.n	8001800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0208 	bic.w	r2, r2, #8
 80017ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001804:	2220      	movs	r2, #32
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 808f 	beq.w	8001930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8087 	beq.w	8001930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001826:	2220      	movs	r2, #32
 8001828:	409a      	lsls	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b05      	cmp	r3, #5
 8001838:	d136      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0216 	bic.w	r2, r2, #22
 8001848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <HAL_DMA_IRQHandler+0x1da>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0208 	bic.w	r2, r2, #8
 8001878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	223f      	movs	r2, #63	@ 0x3f
 8001880:	409a      	lsls	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189a:	2b00      	cmp	r3, #0
 800189c:	d07e      	beq.n	800199c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
        }
        return;
 80018a6:	e079      	b.n	800199c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01d      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10d      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d031      	beq.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
 80018d4:	e02c      	b.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
 80018d6:	bf00      	nop
 80018d8:	20000000 	.word	0x20000000
 80018dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d023      	beq.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
 80018f0:	e01e      	b.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0210 	bic.w	r2, r2, #16
 800190e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001934:	2b00      	cmp	r3, #0
 8001936:	d032      	beq.n	800199e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d022      	beq.n	800198a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2205      	movs	r2, #5
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	d307      	bcc.n	8001978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f2      	bne.n	800195c <HAL_DMA_IRQHandler+0x2cc>
 8001976:	e000      	b.n	800197a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
 800199a:	e000      	b.n	800199e <HAL_DMA_IRQHandler+0x30e>
        return;
 800199c:	bf00      	nop
    }
  }
}
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b40      	cmp	r3, #64	@ 0x40
 80019d0:	d108      	bne.n	80019e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019e2:	e007      	b.n	80019f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	3b10      	subs	r3, #16
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <DMA_CalcBaseAndBitshift+0x64>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a1a:	4a13      	ldr	r2, [pc, #76]	@ (8001a68 <DMA_CalcBaseAndBitshift+0x68>)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d909      	bls.n	8001a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	1d1a      	adds	r2, r3, #4
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a40:	e007      	b.n	8001a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	aaaaaaab 	.word	0xaaaaaaab
 8001a68:	080053e8 	.word	0x080053e8

08001a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11f      	bne.n	8001ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d856      	bhi.n	8001b3a <DMA_CheckFifoParam+0xce>
 8001a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a94 <DMA_CheckFifoParam+0x28>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001ab7 	.word	0x08001ab7
 8001a9c:	08001aa5 	.word	0x08001aa5
 8001aa0:	08001b3b 	.word	0x08001b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d046      	beq.n	8001b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab4:	e043      	b.n	8001b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001abe:	d140      	bne.n	8001b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac4:	e03d      	b.n	8001b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ace:	d121      	bne.n	8001b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d837      	bhi.n	8001b46 <DMA_CheckFifoParam+0xda>
 8001ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8001adc <DMA_CheckFifoParam+0x70>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001aed 	.word	0x08001aed
 8001ae0:	08001af3 	.word	0x08001af3
 8001ae4:	08001aed 	.word	0x08001aed
 8001ae8:	08001b05 	.word	0x08001b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
      break;
 8001af0:	e030      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d025      	beq.n	8001b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b02:	e022      	b.n	8001b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b0c:	d11f      	bne.n	8001b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b12:	e01c      	b.n	8001b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d903      	bls.n	8001b22 <DMA_CheckFifoParam+0xb6>
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d003      	beq.n	8001b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b20:	e018      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
      break;
 8001b26:	e015      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00e      	beq.n	8001b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
      break;
 8001b38:	e00b      	b.n	8001b52 <DMA_CheckFifoParam+0xe6>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e00a      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e008      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b42:	bf00      	nop
 8001b44:	e006      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b46:	bf00      	nop
 8001b48:	e004      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e002      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b4e:	bf00      	nop
 8001b50:	e000      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
    }
  } 
  
  return status; 
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e165      	b.n	8001e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8154 	bne.w	8001e46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80ae 	beq.w	8001e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_GPIO_Init+0x300>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a58      	ldr	r2, [pc, #352]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e6c <HAL_GPIO_Init+0x308>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d025      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4e      	ldr	r2, [pc, #312]	@ (8001e70 <HAL_GPIO_Init+0x30c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01f      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e74 <HAL_GPIO_Init+0x310>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	@ (8001e78 <HAL_GPIO_Init+0x314>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e7c <HAL_GPIO_Init+0x318>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4a      	ldr	r2, [pc, #296]	@ (8001e80 <HAL_GPIO_Init+0x31c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x206>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	@ (8001e84 <HAL_GPIO_Init+0x320>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x202>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e00c      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e00a      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x21c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	@ (8001e68 <HAL_GPIO_Init+0x304>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc2:	4a31      	ldr	r2, [pc, #196]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dec:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df2:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e16:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e40:	4a11      	ldr	r2, [pc, #68]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f67f ae96 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40021800 	.word	0x40021800
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eec:	f7ff f988 	bl	8001200 <HAL_GetTick>
 8001ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ef2:	e009      	b.n	8001f08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ef4:	f7ff f984 	bl	8001200 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f02:	d901      	bls.n	8001f08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e01f      	b.n	8001f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f14:	d1ee      	bne.n	8001ef4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1c:	f7ff f970 	bl	8001200 <HAL_GetTick>
 8001f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f22:	e009      	b.n	8001f38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f24:	f7ff f96c 	bl	8001200 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f32:	d901      	bls.n	8001f38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e007      	b.n	8001f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f44:	d1ee      	bne.n	8001f24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	420e0040 	.word	0x420e0040
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	420e0044 	.word	0x420e0044

08001f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0cc      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b68      	ldr	r3, [pc, #416]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d90c      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b65      	ldr	r3, [pc, #404]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0b8      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b59      	ldr	r3, [pc, #356]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fcc:	4b53      	ldr	r3, [pc, #332]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b50      	ldr	r3, [pc, #320]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	494d      	ldr	r1, [pc, #308]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d044      	beq.n	8002080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d119      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d003      	beq.n	800201e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b3f      	ldr	r3, [pc, #252]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e067      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203e:	4b37      	ldr	r3, [pc, #220]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 0203 	bic.w	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4934      	ldr	r1, [pc, #208]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7ff f8d6 	bl	8001200 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7ff f8d2 	bl	8001200 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e04f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 020c 	and.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1eb      	bne.n	8002058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002080:	4b25      	ldr	r3, [pc, #148]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d20c      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e032      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4916      	ldr	r1, [pc, #88]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490e      	ldr	r1, [pc, #56]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 f855 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490a      	ldr	r1, [pc, #40]	@ (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f836 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00
 800211c:	40023800 	.word	0x40023800
 8002120:	080053d0 	.word	0x080053d0
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002148:	f7ff fff0 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	080053e0 	.word	0x080053e0

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002170:	f7ff ffdc 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0b5b      	lsrs	r3, r3, #13
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	080053e0 	.word	0x080053e0

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002198:	b0ae      	sub	sp, #184	@ 0xb8
 800219a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ba:	4bcb      	ldr	r3, [pc, #812]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	f200 8206 	bhi.w	80025d4 <HAL_RCC_GetSysClockFreq+0x440>
 80021c8:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	08002205 	.word	0x08002205
 80021d4:	080025d5 	.word	0x080025d5
 80021d8:	080025d5 	.word	0x080025d5
 80021dc:	080025d5 	.word	0x080025d5
 80021e0:	0800220d 	.word	0x0800220d
 80021e4:	080025d5 	.word	0x080025d5
 80021e8:	080025d5 	.word	0x080025d5
 80021ec:	080025d5 	.word	0x080025d5
 80021f0:	08002215 	.word	0x08002215
 80021f4:	080025d5 	.word	0x080025d5
 80021f8:	080025d5 	.word	0x080025d5
 80021fc:	080025d5 	.word	0x080025d5
 8002200:	08002405 	.word	0x08002405
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4bb9      	ldr	r3, [pc, #740]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x358>)
 8002206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800220a:	e1e7      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220c:	4bb8      	ldr	r3, [pc, #736]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800220e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002212:	e1e3      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002214:	4bb4      	ldr	r3, [pc, #720]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800221c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002220:	4bb1      	ldr	r3, [pc, #708]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d071      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222c:	4bae      	ldr	r3, [pc, #696]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	2200      	movs	r2, #0
 8002234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002238:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800223c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800224e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002252:	4622      	mov	r2, r4
 8002254:	462b      	mov	r3, r5
 8002256:	f04f 0000 	mov.w	r0, #0
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002264:	0150      	lsls	r0, r2, #5
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4621      	mov	r1, r4
 800226c:	1a51      	subs	r1, r2, r1
 800226e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002270:	4629      	mov	r1, r5
 8002272:	eb63 0301 	sbc.w	r3, r3, r1
 8002276:	647b      	str	r3, [r7, #68]	@ 0x44
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002284:	4649      	mov	r1, r9
 8002286:	018b      	lsls	r3, r1, #6
 8002288:	4641      	mov	r1, r8
 800228a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800228e:	4641      	mov	r1, r8
 8002290:	018a      	lsls	r2, r1, #6
 8002292:	4641      	mov	r1, r8
 8002294:	1a51      	subs	r1, r2, r1
 8002296:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002298:	4649      	mov	r1, r9
 800229a:	eb63 0301 	sbc.w	r3, r3, r1
 800229e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80022ac:	4649      	mov	r1, r9
 80022ae:	00cb      	lsls	r3, r1, #3
 80022b0:	4641      	mov	r1, r8
 80022b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022b6:	4641      	mov	r1, r8
 80022b8:	00ca      	lsls	r2, r1, #3
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	4622      	mov	r2, r4
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80022c6:	462b      	mov	r3, r5
 80022c8:	460a      	mov	r2, r1
 80022ca:	eb42 0303 	adc.w	r3, r2, r3
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022dc:	4629      	mov	r1, r5
 80022de:	024b      	lsls	r3, r1, #9
 80022e0:	4621      	mov	r1, r4
 80022e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e6:	4621      	mov	r1, r4
 80022e8:	024a      	lsls	r2, r1, #9
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002300:	f7fd ffd6 	bl	80002b0 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4613      	mov	r3, r2
 800230a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800230e:	e067      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002310:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	2200      	movs	r2, #0
 8002318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800231c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002320:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800232a:	2300      	movs	r3, #0
 800232c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800232e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4621      	mov	r1, r4
 800234c:	1a51      	subs	r1, r2, r1
 800234e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002350:	4629      	mov	r1, r5
 8002352:	eb63 0301 	sbc.w	r3, r3, r1
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002364:	4649      	mov	r1, r9
 8002366:	018b      	lsls	r3, r1, #6
 8002368:	4641      	mov	r1, r8
 800236a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800236e:	4641      	mov	r1, r8
 8002370:	018a      	lsls	r2, r1, #6
 8002372:	4641      	mov	r1, r8
 8002374:	ebb2 0a01 	subs.w	sl, r2, r1
 8002378:	4649      	mov	r1, r9
 800237a:	eb63 0b01 	sbc.w	fp, r3, r1
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800238a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800238e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002392:	4692      	mov	sl, r2
 8002394:	469b      	mov	fp, r3
 8002396:	4623      	mov	r3, r4
 8002398:	eb1a 0303 	adds.w	r3, sl, r3
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	462b      	mov	r3, r5
 80023a0:	eb4b 0303 	adc.w	r3, fp, r3
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023b2:	4629      	mov	r1, r5
 80023b4:	028b      	lsls	r3, r1, #10
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023bc:	4621      	mov	r1, r4
 80023be:	028a      	lsls	r2, r1, #10
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023c8:	2200      	movs	r2, #0
 80023ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80023cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80023ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80023d2:	f7fd ff6d 	bl	80002b0 <__aeabi_uldivmod>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4613      	mov	r3, r2
 80023dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023e0:	4b41      	ldr	r3, [pc, #260]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80023f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002402:	e0eb      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002404:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800240c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002410:	4b35      	ldr	r3, [pc, #212]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d06b      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241c:	4b32      	ldr	r3, [pc, #200]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	2200      	movs	r2, #0
 8002424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002426:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002430:	2300      	movs	r3, #0
 8002432:	667b      	str	r3, [r7, #100]	@ 0x64
 8002434:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002438:	4622      	mov	r2, r4
 800243a:	462b      	mov	r3, r5
 800243c:	f04f 0000 	mov.w	r0, #0
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	0159      	lsls	r1, r3, #5
 8002446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244a:	0150      	lsls	r0, r2, #5
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4621      	mov	r1, r4
 8002452:	1a51      	subs	r1, r2, r1
 8002454:	61b9      	str	r1, [r7, #24]
 8002456:	4629      	mov	r1, r5
 8002458:	eb63 0301 	sbc.w	r3, r3, r1
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800246a:	4659      	mov	r1, fp
 800246c:	018b      	lsls	r3, r1, #6
 800246e:	4651      	mov	r1, sl
 8002470:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002474:	4651      	mov	r1, sl
 8002476:	018a      	lsls	r2, r1, #6
 8002478:	4651      	mov	r1, sl
 800247a:	ebb2 0801 	subs.w	r8, r2, r1
 800247e:	4659      	mov	r1, fp
 8002480:	eb63 0901 	sbc.w	r9, r3, r1
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002490:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002494:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002498:	4690      	mov	r8, r2
 800249a:	4699      	mov	r9, r3
 800249c:	4623      	mov	r3, r4
 800249e:	eb18 0303 	adds.w	r3, r8, r3
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	462b      	mov	r3, r5
 80024a6:	eb49 0303 	adc.w	r3, r9, r3
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024b8:	4629      	mov	r1, r5
 80024ba:	024b      	lsls	r3, r1, #9
 80024bc:	4621      	mov	r1, r4
 80024be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c2:	4621      	mov	r1, r4
 80024c4:	024a      	lsls	r2, r1, #9
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024ce:	2200      	movs	r2, #0
 80024d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024d8:	f7fd feea 	bl	80002b0 <__aeabi_uldivmod>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4613      	mov	r3, r2
 80024e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024e6:	e065      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x420>
 80024e8:	40023800 	.word	0x40023800
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f4:	4b3d      	ldr	r3, [pc, #244]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x458>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	2200      	movs	r2, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	4611      	mov	r1, r2
 8002500:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002504:	653b      	str	r3, [r7, #80]	@ 0x50
 8002506:	2300      	movs	r3, #0
 8002508:	657b      	str	r3, [r7, #84]	@ 0x54
 800250a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800250e:	4642      	mov	r2, r8
 8002510:	464b      	mov	r3, r9
 8002512:	f04f 0000 	mov.w	r0, #0
 8002516:	f04f 0100 	mov.w	r1, #0
 800251a:	0159      	lsls	r1, r3, #5
 800251c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002520:	0150      	lsls	r0, r2, #5
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4641      	mov	r1, r8
 8002528:	1a51      	subs	r1, r2, r1
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	4649      	mov	r1, r9
 800252e:	eb63 0301 	sbc.w	r3, r3, r1
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002540:	4659      	mov	r1, fp
 8002542:	018b      	lsls	r3, r1, #6
 8002544:	4651      	mov	r1, sl
 8002546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254a:	4651      	mov	r1, sl
 800254c:	018a      	lsls	r2, r1, #6
 800254e:	4651      	mov	r1, sl
 8002550:	1a54      	subs	r4, r2, r1
 8002552:	4659      	mov	r1, fp
 8002554:	eb63 0501 	sbc.w	r5, r3, r1
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	00eb      	lsls	r3, r5, #3
 8002562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002566:	00e2      	lsls	r2, r4, #3
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	4643      	mov	r3, r8
 800256e:	18e3      	adds	r3, r4, r3
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	464b      	mov	r3, r9
 8002574:	eb45 0303 	adc.w	r3, r5, r3
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002586:	4629      	mov	r1, r5
 8002588:	028b      	lsls	r3, r1, #10
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002590:	4621      	mov	r1, r4
 8002592:	028a      	lsls	r2, r1, #10
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800259c:	2200      	movs	r2, #0
 800259e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025a6:	f7fd fe83 	bl	80002b0 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4613      	mov	r3, r2
 80025b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x458>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0f1b      	lsrs	r3, r3, #28
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80025c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025d2:	e003      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	37b8      	adds	r7, #184	@ 0xb8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	00f42400 	.word	0x00f42400

080025f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e28d      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8083 	beq.w	800271a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002614:	4b94      	ldr	r3, [pc, #592]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b04      	cmp	r3, #4
 800261e:	d019      	beq.n	8002654 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002620:	4b91      	ldr	r3, [pc, #580]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
        || \
 8002628:	2b08      	cmp	r3, #8
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800262c:	4b8e      	ldr	r3, [pc, #568]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002634:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002638:	d00c      	beq.n	8002654 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263a:	4b8b      	ldr	r3, [pc, #556]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d112      	bne.n	800266c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b88      	ldr	r3, [pc, #544]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002652:	d10b      	bne.n	800266c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b84      	ldr	r3, [pc, #528]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05b      	beq.n	8002718 <HAL_RCC_OscConfig+0x124>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d157      	bne.n	8002718 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e25a      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x90>
 8002676:	4b7c      	ldr	r3, [pc, #496]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a7b      	ldr	r2, [pc, #492]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e01d      	b.n	80026c0 <HAL_RCC_OscConfig+0xcc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0xb4>
 800268e:	4b76      	ldr	r3, [pc, #472]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a75      	ldr	r2, [pc, #468]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b73      	ldr	r3, [pc, #460]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a72      	ldr	r2, [pc, #456]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0xcc>
 80026a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fd9a 	bl	8001200 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fd96 	bl	8001200 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	@ 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e21f      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b61      	ldr	r3, [pc, #388]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0xdc>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fd86 	bl	8001200 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fd82 	bl	8001200 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e20b      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	4b57      	ldr	r3, [pc, #348]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x104>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d06f      	beq.n	8002806 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002726:	4b50      	ldr	r3, [pc, #320]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b00      	cmp	r3, #0
 8002730:	d017      	beq.n	8002762 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002732:	4b4d      	ldr	r3, [pc, #308]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
        || \
 800273a:	2b08      	cmp	r3, #8
 800273c:	d105      	bne.n	800274a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800273e:	4b4a      	ldr	r3, [pc, #296]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b47      	ldr	r3, [pc, #284]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002756:	4b44      	ldr	r3, [pc, #272]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b41      	ldr	r3, [pc, #260]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x186>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1d3      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4937      	ldr	r1, [pc, #220]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b34      	ldr	r3, [pc, #208]	@ (800286c <HAL_RCC_OscConfig+0x278>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fd2f 	bl	8001200 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe fd2b 	bl	8001200 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1b4      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b28      	ldr	r3, [pc, #160]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4925      	ldr	r1, [pc, #148]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b24      	ldr	r3, [pc, #144]	@ (800286c <HAL_RCC_OscConfig+0x278>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fd0e 	bl	8001200 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fd0a 	bl	8001200 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e193      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d036      	beq.n	8002880 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fcee 	bl	8001200 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe fcea 	bl	8001200 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e173      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_RCC_OscConfig+0x274>)
 800283c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x234>
 8002846:	e01b      	b.n	8002880 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_OscConfig+0x27c>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fcd7 	bl	8001200 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	e00e      	b.n	8002874 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002856:	f7fe fcd3 	bl	8001200 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d907      	bls.n	8002874 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e15c      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
 8002868:	40023800 	.word	0x40023800
 800286c:	42470000 	.word	0x42470000
 8002870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ea      	bne.n	8002856 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8097 	beq.w	80029bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002892:	4b83      	ldr	r3, [pc, #524]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028be:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <HAL_RCC_OscConfig+0x4b0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCC_OscConfig+0x4b0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	@ (8002aa4 <HAL_RCC_OscConfig+0x4b0>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fc93 	bl	8001200 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7fe fc8f 	bl	8001200 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e118      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <HAL_RCC_OscConfig+0x4b0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x31e>
 8002904:	4b66      	ldr	r3, [pc, #408]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a65      	ldr	r2, [pc, #404]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002910:	e01c      	b.n	800294c <HAL_RCC_OscConfig+0x358>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x340>
 800291a:	4b61      	ldr	r3, [pc, #388]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	4a60      	ldr	r2, [pc, #384]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	@ 0x70
 8002926:	4b5e      	ldr	r3, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a5d      	ldr	r2, [pc, #372]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0x358>
 8002934:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002938:	4a59      	ldr	r2, [pc, #356]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002940:	4b57      	ldr	r3, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a56      	ldr	r2, [pc, #344]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe fc54 	bl	8001200 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fe fc50 	bl	8001200 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0d7      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ee      	beq.n	800295c <HAL_RCC_OscConfig+0x368>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fc3e 	bl	8001200 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe fc3a 	bl	8001200 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0c1      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	4b40      	ldr	r3, [pc, #256]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1ee      	bne.n	8002988 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	4a3a      	ldr	r2, [pc, #232]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80ad 	beq.w	8002b20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c6:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d060      	beq.n	8002a94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d145      	bne.n	8002a66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029da:	4b33      	ldr	r3, [pc, #204]	@ (8002aa8 <HAL_RCC_OscConfig+0x4b4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fc0e 	bl	8001200 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fc0a 	bl	8001200 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e093      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b29      	ldr	r3, [pc, #164]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	071b      	lsls	r3, r3, #28
 8002a32:	491b      	ldr	r1, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x4b4>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fbdf 	bl	8001200 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe fbdb 	bl	8001200 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e064      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x452>
 8002a64:	e05c      	b.n	8002b20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_RCC_OscConfig+0x4b4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fbc8 	bl	8001200 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fbc4 	bl	8001200 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e04d      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x480>
 8002a92:	e045      	b.n	8002b20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e040      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aac:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <HAL_RCC_OscConfig+0x538>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d030      	beq.n	8002b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d129      	bne.n	8002b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d122      	bne.n	8002b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002adc:	4013      	ands	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d119      	bne.n	8002b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	3b01      	subs	r3, #1
 8002af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d10f      	bne.n	8002b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e041      	b.n	8002bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe f8e0 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fad8 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e041      	b.n	8002c64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f839 	bl	8002c6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f000 fa89 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_TIM_PWM_Start+0x24>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e022      	b.n	8002cea <HAL_TIM_PWM_Start+0x6a>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d109      	bne.n	8002cbe <HAL_TIM_PWM_Start+0x3e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e015      	b.n	8002cea <HAL_TIM_PWM_Start+0x6a>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d109      	bne.n	8002cd8 <HAL_TIM_PWM_Start+0x58>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e008      	b.n	8002cea <HAL_TIM_PWM_Start+0x6a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07c      	b.n	8002dec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x82>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d00:	e013      	b.n	8002d2a <HAL_TIM_PWM_Start+0xaa>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_PWM_Start+0x92>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d10:	e00b      	b.n	8002d2a <HAL_TIM_PWM_Start+0xaa>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_PWM_Start+0xa2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d20:	e003      	b.n	8002d2a <HAL_TIM_PWM_Start+0xaa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fcec 	bl	8003710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002df4 <HAL_TIM_PWM_Start+0x174>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_TIM_PWM_Start+0xcc>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2c      	ldr	r2, [pc, #176]	@ (8002df8 <HAL_TIM_PWM_Start+0x178>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIM_PWM_Start+0xd0>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_TIM_PWM_Start+0xd2>
 8002d50:	2300      	movs	r3, #0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_TIM_PWM_Start+0x174>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d022      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x136>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d78:	d01d      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x136>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dfc <HAL_TIM_PWM_Start+0x17c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d018      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x136>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <HAL_TIM_PWM_Start+0x180>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x136>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <HAL_TIM_PWM_Start+0x184>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x136>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a16      	ldr	r2, [pc, #88]	@ (8002df8 <HAL_TIM_PWM_Start+0x178>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x136>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <HAL_TIM_PWM_Start+0x188>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x136>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a16      	ldr	r2, [pc, #88]	@ (8002e0c <HAL_TIM_PWM_Start+0x18c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d111      	bne.n	8002dda <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d010      	beq.n	8002dea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd8:	e007      	b.n	8002dea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40001800 	.word	0x40001800

08002e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0ae      	b.n	8002f8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	f200 809f 	bhi.w	8002f7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08002f7d 	.word	0x08002f7d
 8002e4c:	08002f7d 	.word	0x08002f7d
 8002e50:	08002f7d 	.word	0x08002f7d
 8002e54:	08002eb9 	.word	0x08002eb9
 8002e58:	08002f7d 	.word	0x08002f7d
 8002e5c:	08002f7d 	.word	0x08002f7d
 8002e60:	08002f7d 	.word	0x08002f7d
 8002e64:	08002efb 	.word	0x08002efb
 8002e68:	08002f7d 	.word	0x08002f7d
 8002e6c:	08002f7d 	.word	0x08002f7d
 8002e70:	08002f7d 	.word	0x08002f7d
 8002e74:	08002f3b 	.word	0x08002f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f9fc 	bl	800327c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0208 	orr.w	r2, r2, #8
 8002e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6999      	ldr	r1, [r3, #24]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	619a      	str	r2, [r3, #24]
      break;
 8002eb6:	e064      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fa4c 	bl	800335c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6999      	ldr	r1, [r3, #24]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	021a      	lsls	r2, r3, #8
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	619a      	str	r2, [r3, #24]
      break;
 8002ef8:	e043      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 faa1 	bl	8003448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0208 	orr.w	r2, r2, #8
 8002f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0204 	bic.w	r2, r2, #4
 8002f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69d9      	ldr	r1, [r3, #28]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	61da      	str	r2, [r3, #28]
      break;
 8002f38:	e023      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 faf5 	bl	8003530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69d9      	ldr	r1, [r3, #28]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	021a      	lsls	r2, r3, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	61da      	str	r2, [r3, #28]
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0b4      	b.n	800311a <HAL_TIM_ConfigClockSource+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xd4>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff6:	f000 8086 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x172>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b70      	cmp	r3, #112	@ 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xa6>
 8003004:	2b70      	cmp	r3, #112	@ 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b60      	cmp	r3, #96	@ 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x11a>
 800300c:	2b60      	cmp	r3, #96	@ 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b50      	cmp	r3, #80	@ 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xfa>
 8003014:	2b50      	cmp	r3, #80	@ 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b40      	cmp	r3, #64	@ 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x13a>
 800301c:	2b40      	cmp	r3, #64	@ 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b30      	cmp	r3, #48	@ 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b30      	cmp	r3, #48	@ 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	f000 fb41 	bl	80036d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800305c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04f      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	f000 fb2a 	bl	80036d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	461a      	mov	r2, r3
 800309c:	f000 fa9e 	bl	80035dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	@ 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 faf7 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 fabd 	bl	800363a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	@ 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fae7 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 fa7e 	bl	80035dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	@ 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fad7 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 face 	bl	800369a <TIM_ITRx_SetConfig>
      break;
 80030fe:	e003      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a46      	ldr	r2, [pc, #280]	@ (8003250 <TIM_Base_SetConfig+0x12c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003142:	d00f      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a43      	ldr	r2, [pc, #268]	@ (8003254 <TIM_Base_SetConfig+0x130>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a42      	ldr	r2, [pc, #264]	@ (8003258 <TIM_Base_SetConfig+0x134>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a41      	ldr	r2, [pc, #260]	@ (800325c <TIM_Base_SetConfig+0x138>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a40      	ldr	r2, [pc, #256]	@ (8003260 <TIM_Base_SetConfig+0x13c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a35      	ldr	r2, [pc, #212]	@ (8003250 <TIM_Base_SetConfig+0x12c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003184:	d027      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a32      	ldr	r2, [pc, #200]	@ (8003254 <TIM_Base_SetConfig+0x130>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d023      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a31      	ldr	r2, [pc, #196]	@ (8003258 <TIM_Base_SetConfig+0x134>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a30      	ldr	r2, [pc, #192]	@ (800325c <TIM_Base_SetConfig+0x138>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003260 <TIM_Base_SetConfig+0x13c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d017      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003264 <TIM_Base_SetConfig+0x140>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003268 <TIM_Base_SetConfig+0x144>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00f      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2c      	ldr	r2, [pc, #176]	@ (800326c <TIM_Base_SetConfig+0x148>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003270 <TIM_Base_SetConfig+0x14c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003274 <TIM_Base_SetConfig+0x150>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a29      	ldr	r2, [pc, #164]	@ (8003278 <TIM_Base_SetConfig+0x154>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a10      	ldr	r2, [pc, #64]	@ (8003250 <TIM_Base_SetConfig+0x12c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a12      	ldr	r2, [pc, #72]	@ (8003260 <TIM_Base_SetConfig+0x13c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
  }
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40010000 	.word	0x40010000
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40010400 	.word	0x40010400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	40001800 	.word	0x40001800
 8003274:	40001c00 	.word	0x40001c00
 8003278:	40002000 	.word	0x40002000

0800327c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 0201 	bic.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 0302 	bic.w	r3, r3, #2
 80032c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a20      	ldr	r2, [pc, #128]	@ (8003354 <TIM_OC1_SetConfig+0xd8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_OC1_SetConfig+0x64>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a1f      	ldr	r2, [pc, #124]	@ (8003358 <TIM_OC1_SetConfig+0xdc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10c      	bne.n	80032fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0308 	bic.w	r3, r3, #8
 80032e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a15      	ldr	r2, [pc, #84]	@ (8003354 <TIM_OC1_SetConfig+0xd8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_OC1_SetConfig+0x8e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a14      	ldr	r2, [pc, #80]	@ (8003358 <TIM_OC1_SetConfig+0xdc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d111      	bne.n	800332e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40010000 	.word	0x40010000
 8003358:	40010400 	.word	0x40010400

0800335c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f023 0210 	bic.w	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0320 	bic.w	r3, r3, #32
 80033a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <TIM_OC2_SetConfig+0xe4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_OC2_SetConfig+0x68>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a21      	ldr	r2, [pc, #132]	@ (8003444 <TIM_OC2_SetConfig+0xe8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10d      	bne.n	80033e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <TIM_OC2_SetConfig+0xe4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_OC2_SetConfig+0x94>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a16      	ldr	r2, [pc, #88]	@ (8003444 <TIM_OC2_SetConfig+0xe8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d113      	bne.n	8003418 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40010000 	.word	0x40010000
 8003444:	40010400 	.word	0x40010400

08003448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a21      	ldr	r2, [pc, #132]	@ (8003528 <TIM_OC3_SetConfig+0xe0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <TIM_OC3_SetConfig+0x66>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a20      	ldr	r2, [pc, #128]	@ (800352c <TIM_OC3_SetConfig+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10d      	bne.n	80034ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <TIM_OC3_SetConfig+0xe0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_OC3_SetConfig+0x92>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a15      	ldr	r2, [pc, #84]	@ (800352c <TIM_OC3_SetConfig+0xe4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d113      	bne.n	8003502 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	621a      	str	r2, [r3, #32]
}
 800351c:	bf00      	nop
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40010000 	.word	0x40010000
 800352c:	40010400 	.word	0x40010400

08003530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800357a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <TIM_OC4_SetConfig+0xa4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_OC4_SetConfig+0x68>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a11      	ldr	r2, [pc, #68]	@ (80035d8 <TIM_OC4_SetConfig+0xa8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d109      	bne.n	80035ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800359e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40010400 	.word	0x40010400

080035dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 030a 	bic.w	r3, r3, #10
 8003618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363a:	b480      	push	{r7}
 800363c:	b087      	sub	sp, #28
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 0210 	bic.w	r2, r3, #16
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	031b      	lsls	r3, r3, #12
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003676:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f043 0307 	orr.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2201      	movs	r2, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e05a      	b.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a21      	ldr	r2, [pc, #132]	@ (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c0:	d01d      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1d      	ldr	r2, [pc, #116]	@ (800383c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d018      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1a      	ldr	r2, [pc, #104]	@ (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a17      	ldr	r2, [pc, #92]	@ (800384c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10c      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010400 	.word	0x40010400
 800384c:	40014000 	.word	0x40014000
 8003850:	40001800 	.word	0x40001800

08003854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800386c:	2302      	movs	r3, #2
 800386e:	e03d      	b.n	80038ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e042      	b.n	8003990 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fa58 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	@ 0x24
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800393a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fb79 	bl	8004034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d175      	bne.n	8003aa4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_UART_Transmit+0x2c>
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e06e      	b.n	8003aa6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2221      	movs	r2, #33	@ 0x21
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d6:	f7fd fc13 	bl	8001200 <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f0:	d108      	bne.n	8003a04 <HAL_UART_Transmit+0x6c>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	e003      	b.n	8003a0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a0c:	e02e      	b.n	8003a6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2180      	movs	r1, #128	@ 0x80
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f98b 	bl	8003d34 <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e03a      	b.n	8003aa6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	e007      	b.n	8003a5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1cb      	bne.n	8003a0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2140      	movs	r1, #64	@ 0x40
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f957 	bl	8003d34 <UART_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e006      	b.n	8003aa6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d112      	bne.n	8003aee <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_UART_Receive_DMA+0x26>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e00b      	b.n	8003af0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f97f 	bl	8003de8 <UART_Start_Receive_DMA>
 8003aea:	4603      	mov	r3, r0
 8003aec:	e000      	b.n	8003af0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b09c      	sub	sp, #112	@ 0x70
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d172      	bne.n	8003c3a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b56:	2200      	movs	r2, #0
 8003b58:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003b7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e5      	bne.n	8003b5a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bae:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3314      	adds	r3, #20
 8003be0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003be2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e5      	bne.n	8003bc2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d119      	bne.n	8003c3a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f023 0310 	bic.w	r3, r3, #16
 8003c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c26:	61fa      	str	r2, [r7, #28]
 8003c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	617b      	str	r3, [r7, #20]
   return(result);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c50:	f7ff ff66 	bl	8003b20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c54:	e002      	b.n	8003c5c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c58:	f7fc fca2 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 8003c5c:	bf00      	nop
 8003c5e:	3770      	adds	r7, #112	@ 0x70
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d108      	bne.n	8003c92 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff ff48 	bl	8003b20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c90:	e002      	b.n	8003c98 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff ff30 	bl	8003af8 <HAL_UART_RxHalfCpltCallback>
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbc:	2b80      	cmp	r3, #128	@ 0x80
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b21      	cmp	r3, #33	@ 0x21
 8003cd2:	d108      	bne.n	8003ce6 <UART_DMAError+0x46>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003ce0:	68b8      	ldr	r0, [r7, #8]
 8003ce2:	f000 f91b 	bl	8003f1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b40      	cmp	r3, #64	@ 0x40
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b22      	cmp	r3, #34	@ 0x22
 8003d06:	d108      	bne.n	8003d1a <UART_DMAError+0x7a>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003d14:	68b8      	ldr	r0, [r7, #8]
 8003d16:	f000 f929 	bl	8003f6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f043 0210 	orr.w	r2, r3, #16
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d26:	68b8      	ldr	r0, [r7, #8]
 8003d28:	f7ff fef0 	bl	8003b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d44:	e03b      	b.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d037      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fd fa57 	bl	8001200 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e03a      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d023      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b80      	cmp	r3, #128	@ 0x80
 8003d7a:	d020      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d01d      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d116      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f8e0 	bl	8003f6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2208      	movs	r2, #8
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e00f      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d0b4      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b098      	sub	sp, #96	@ 0x60
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2222      	movs	r2, #34	@ 0x22
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	4a3e      	ldr	r2, [pc, #248]	@ (8003f10 <UART_Start_Receive_DMA+0x128>)
 8003e16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f14 <UART_Start_Receive_DMA+0x12c>)
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	4a3c      	ldr	r2, [pc, #240]	@ (8003f18 <UART_Start_Receive_DMA+0x130>)
 8003e26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	f7fd fbca 	bl	80015e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d019      	beq.n	8003e9e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3314      	adds	r3, #20
 8003ebc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ebe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e5      	bne.n	8003e9e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3314      	adds	r3, #20
 8003ef0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ef2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6a39      	ldr	r1, [r7, #32]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3760      	adds	r7, #96	@ 0x60
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	08003b39 	.word	0x08003b39
 8003f14:	08003c65 	.word	0x08003c65
 8003f18:	08003ca1 	.word	0x08003ca1

08003f1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	@ 0x24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	61ba      	str	r2, [r7, #24]
 8003f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6979      	ldr	r1, [r7, #20]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	613b      	str	r3, [r7, #16]
   return(result);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003f60:	bf00      	nop
 8003f62:	3724      	adds	r7, #36	@ 0x24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b095      	sub	sp, #84	@ 0x54
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f94:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3314      	adds	r3, #20
 8003fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d119      	bne.n	8004018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f023 0310 	bic.w	r3, r3, #16
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004004:	61ba      	str	r2, [r7, #24]
 8004006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6979      	ldr	r1, [r7, #20]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	613b      	str	r3, [r7, #16]
   return(result);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004026:	bf00      	nop
 8004028:	3754      	adds	r7, #84	@ 0x54
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004038:	b0c0      	sub	sp, #256	@ 0x100
 800403a:	af00      	add	r7, sp, #0
 800403c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	68d9      	ldr	r1, [r3, #12]
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	ea40 0301 	orr.w	r3, r0, r1
 800405c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	431a      	orrs	r2, r3
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	431a      	orrs	r2, r3
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800408c:	f021 010c 	bic.w	r1, r1, #12
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800409a:	430b      	orrs	r3, r1
 800409c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	6999      	ldr	r1, [r3, #24]
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	ea40 0301 	orr.w	r3, r0, r1
 80040ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b8f      	ldr	r3, [pc, #572]	@ (8004300 <UART_SetConfig+0x2cc>)
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d005      	beq.n	80040d4 <UART_SetConfig+0xa0>
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004304 <UART_SetConfig+0x2d0>)
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d104      	bne.n	80040de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe f84a 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 80040d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040dc:	e003      	b.n	80040e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040de:	f7fe f831 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 80040e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f0:	f040 810c 	bne.w	800430c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	1891      	adds	r1, r2, r2
 800410c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800410e:	415b      	adcs	r3, r3
 8004110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004116:	4621      	mov	r1, r4
 8004118:	eb12 0801 	adds.w	r8, r2, r1
 800411c:	4629      	mov	r1, r5
 800411e:	eb43 0901 	adc.w	r9, r3, r1
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800412e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004136:	4690      	mov	r8, r2
 8004138:	4699      	mov	r9, r3
 800413a:	4623      	mov	r3, r4
 800413c:	eb18 0303 	adds.w	r3, r8, r3
 8004140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004144:	462b      	mov	r3, r5
 8004146:	eb49 0303 	adc.w	r3, r9, r3
 800414a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800415a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800415e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004162:	460b      	mov	r3, r1
 8004164:	18db      	adds	r3, r3, r3
 8004166:	653b      	str	r3, [r7, #80]	@ 0x50
 8004168:	4613      	mov	r3, r2
 800416a:	eb42 0303 	adc.w	r3, r2, r3
 800416e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004178:	f7fc f89a 	bl	80002b0 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <UART_SetConfig+0x2d4>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011c      	lsls	r4, r3, #4
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004194:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041a4:	415b      	adcs	r3, r3
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041ac:	4641      	mov	r1, r8
 80041ae:	eb12 0a01 	adds.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb43 0b01 	adc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041cc:	4692      	mov	sl, r2
 80041ce:	469b      	mov	fp, r3
 80041d0:	4643      	mov	r3, r8
 80041d2:	eb1a 0303 	adds.w	r3, sl, r3
 80041d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041da:	464b      	mov	r3, r9
 80041dc:	eb4b 0303 	adc.w	r3, fp, r3
 80041e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041f8:	460b      	mov	r3, r1
 80041fa:	18db      	adds	r3, r3, r3
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041fe:	4613      	mov	r3, r2
 8004200:	eb42 0303 	adc.w	r3, r2, r3
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
 8004206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800420a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800420e:	f7fc f84f 	bl	80002b0 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4611      	mov	r1, r2
 8004218:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <UART_SetConfig+0x2d4>)
 800421a:	fba3 2301 	umull	r2, r3, r3, r1
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2264      	movs	r2, #100	@ 0x64
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	1acb      	subs	r3, r1, r3
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800422e:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <UART_SetConfig+0x2d4>)
 8004230:	fba3 2302 	umull	r2, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800423c:	441c      	add	r4, r3
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004248:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800424c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004258:	415b      	adcs	r3, r3
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800425c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004260:	4641      	mov	r1, r8
 8004262:	1851      	adds	r1, r2, r1
 8004264:	6339      	str	r1, [r7, #48]	@ 0x30
 8004266:	4649      	mov	r1, r9
 8004268:	414b      	adcs	r3, r1
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004278:	4659      	mov	r1, fp
 800427a:	00cb      	lsls	r3, r1, #3
 800427c:	4651      	mov	r1, sl
 800427e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004282:	4651      	mov	r1, sl
 8004284:	00ca      	lsls	r2, r1, #3
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	4603      	mov	r3, r0
 800428c:	4642      	mov	r2, r8
 800428e:	189b      	adds	r3, r3, r2
 8004290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004294:	464b      	mov	r3, r9
 8004296:	460a      	mov	r2, r1
 8004298:	eb42 0303 	adc.w	r3, r2, r3
 800429c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042b4:	460b      	mov	r3, r1
 80042b6:	18db      	adds	r3, r3, r3
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ba:	4613      	mov	r3, r2
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ca:	f7fb fff1 	bl	80002b0 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <UART_SetConfig+0x2d4>)
 80042d4:	fba3 1302 	umull	r1, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	2164      	movs	r1, #100	@ 0x64
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	3332      	adds	r3, #50	@ 0x32
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <UART_SetConfig+0x2d4>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	f003 0207 	and.w	r2, r3, #7
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4422      	add	r2, r4
 80042fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042fc:	e106      	b.n	800450c <UART_SetConfig+0x4d8>
 80042fe:	bf00      	nop
 8004300:	40011000 	.word	0x40011000
 8004304:	40011400 	.word	0x40011400
 8004308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800430c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004310:	2200      	movs	r2, #0
 8004312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004316:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800431a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800431e:	4642      	mov	r2, r8
 8004320:	464b      	mov	r3, r9
 8004322:	1891      	adds	r1, r2, r2
 8004324:	6239      	str	r1, [r7, #32]
 8004326:	415b      	adcs	r3, r3
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
 800432a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800432e:	4641      	mov	r1, r8
 8004330:	1854      	adds	r4, r2, r1
 8004332:	4649      	mov	r1, r9
 8004334:	eb43 0501 	adc.w	r5, r3, r1
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	00eb      	lsls	r3, r5, #3
 8004342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004346:	00e2      	lsls	r2, r4, #3
 8004348:	4614      	mov	r4, r2
 800434a:	461d      	mov	r5, r3
 800434c:	4643      	mov	r3, r8
 800434e:	18e3      	adds	r3, r4, r3
 8004350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004354:	464b      	mov	r3, r9
 8004356:	eb45 0303 	adc.w	r3, r5, r3
 800435a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800436a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800437a:	4629      	mov	r1, r5
 800437c:	008b      	lsls	r3, r1, #2
 800437e:	4621      	mov	r1, r4
 8004380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004384:	4621      	mov	r1, r4
 8004386:	008a      	lsls	r2, r1, #2
 8004388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800438c:	f7fb ff90 	bl	80002b0 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4b60      	ldr	r3, [pc, #384]	@ (8004518 <UART_SetConfig+0x4e4>)
 8004396:	fba3 2302 	umull	r2, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	011c      	lsls	r4, r3, #4
 800439e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	61b9      	str	r1, [r7, #24]
 80043b8:	415b      	adcs	r3, r3
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c0:	4641      	mov	r1, r8
 80043c2:	1851      	adds	r1, r2, r1
 80043c4:	6139      	str	r1, [r7, #16]
 80043c6:	4649      	mov	r1, r9
 80043c8:	414b      	adcs	r3, r1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d8:	4659      	mov	r1, fp
 80043da:	00cb      	lsls	r3, r1, #3
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e2:	4651      	mov	r1, sl
 80043e4:	00ca      	lsls	r2, r1, #3
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	4642      	mov	r2, r8
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f4:	464b      	mov	r3, r9
 80043f6:	460a      	mov	r2, r1
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004418:	4649      	mov	r1, r9
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	4641      	mov	r1, r8
 800441e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004422:	4641      	mov	r1, r8
 8004424:	008a      	lsls	r2, r1, #2
 8004426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800442a:	f7fb ff41 	bl	80002b0 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4611      	mov	r1, r2
 8004434:	4b38      	ldr	r3, [pc, #224]	@ (8004518 <UART_SetConfig+0x4e4>)
 8004436:	fba3 2301 	umull	r2, r3, r3, r1
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2264      	movs	r2, #100	@ 0x64
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	1acb      	subs	r3, r1, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	@ 0x32
 8004448:	4a33      	ldr	r2, [pc, #204]	@ (8004518 <UART_SetConfig+0x4e4>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004454:	441c      	add	r4, r3
 8004456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445a:	2200      	movs	r2, #0
 800445c:	673b      	str	r3, [r7, #112]	@ 0x70
 800445e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004460:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	415b      	adcs	r3, r3
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004474:	4641      	mov	r1, r8
 8004476:	1851      	adds	r1, r2, r1
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	4649      	mov	r1, r9
 800447c:	414b      	adcs	r3, r1
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800448c:	4659      	mov	r1, fp
 800448e:	00cb      	lsls	r3, r1, #3
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004496:	4651      	mov	r1, sl
 8004498:	00ca      	lsls	r2, r1, #3
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	4642      	mov	r2, r8
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044a6:	464b      	mov	r3, r9
 80044a8:	460a      	mov	r2, r1
 80044aa:	eb42 0303 	adc.w	r3, r2, r3
 80044ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044c8:	4649      	mov	r1, r9
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	4641      	mov	r1, r8
 80044ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d2:	4641      	mov	r1, r8
 80044d4:	008a      	lsls	r2, r1, #2
 80044d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044da:	f7fb fee9 	bl	80002b0 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <UART_SetConfig+0x4e4>)
 80044e4:	fba3 1302 	umull	r1, r3, r3, r2
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	2164      	movs	r1, #100	@ 0x64
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	3332      	adds	r3, #50	@ 0x32
 80044f6:	4a08      	ldr	r2, [pc, #32]	@ (8004518 <UART_SetConfig+0x4e4>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4422      	add	r2, r4
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004512:	46bd      	mov	sp, r7
 8004514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004518:	51eb851f 	.word	0x51eb851f

0800451c <std>:
 800451c:	2300      	movs	r3, #0
 800451e:	b510      	push	{r4, lr}
 8004520:	4604      	mov	r4, r0
 8004522:	e9c0 3300 	strd	r3, r3, [r0]
 8004526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800452a:	6083      	str	r3, [r0, #8]
 800452c:	8181      	strh	r1, [r0, #12]
 800452e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004530:	81c2      	strh	r2, [r0, #14]
 8004532:	6183      	str	r3, [r0, #24]
 8004534:	4619      	mov	r1, r3
 8004536:	2208      	movs	r2, #8
 8004538:	305c      	adds	r0, #92	@ 0x5c
 800453a:	f000 f906 	bl	800474a <memset>
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <std+0x58>)
 8004540:	6263      	str	r3, [r4, #36]	@ 0x24
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <std+0x5c>)
 8004544:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004546:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <std+0x60>)
 8004548:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <std+0x64>)
 800454c:	6323      	str	r3, [r4, #48]	@ 0x30
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <std+0x68>)
 8004550:	6224      	str	r4, [r4, #32]
 8004552:	429c      	cmp	r4, r3
 8004554:	d006      	beq.n	8004564 <std+0x48>
 8004556:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800455a:	4294      	cmp	r4, r2
 800455c:	d002      	beq.n	8004564 <std+0x48>
 800455e:	33d0      	adds	r3, #208	@ 0xd0
 8004560:	429c      	cmp	r4, r3
 8004562:	d105      	bne.n	8004570 <std+0x54>
 8004564:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456c:	f000 b966 	b.w	800483c <__retarget_lock_init_recursive>
 8004570:	bd10      	pop	{r4, pc}
 8004572:	bf00      	nop
 8004574:	080046c5 	.word	0x080046c5
 8004578:	080046e7 	.word	0x080046e7
 800457c:	0800471f 	.word	0x0800471f
 8004580:	08004743 	.word	0x08004743
 8004584:	20000214 	.word	0x20000214

08004588 <stdio_exit_handler>:
 8004588:	4a02      	ldr	r2, [pc, #8]	@ (8004594 <stdio_exit_handler+0xc>)
 800458a:	4903      	ldr	r1, [pc, #12]	@ (8004598 <stdio_exit_handler+0x10>)
 800458c:	4803      	ldr	r0, [pc, #12]	@ (800459c <stdio_exit_handler+0x14>)
 800458e:	f000 b869 	b.w	8004664 <_fwalk_sglue>
 8004592:	bf00      	nop
 8004594:	2000000c 	.word	0x2000000c
 8004598:	080050dd 	.word	0x080050dd
 800459c:	2000001c 	.word	0x2000001c

080045a0 <cleanup_stdio>:
 80045a0:	6841      	ldr	r1, [r0, #4]
 80045a2:	4b0c      	ldr	r3, [pc, #48]	@ (80045d4 <cleanup_stdio+0x34>)
 80045a4:	4299      	cmp	r1, r3
 80045a6:	b510      	push	{r4, lr}
 80045a8:	4604      	mov	r4, r0
 80045aa:	d001      	beq.n	80045b0 <cleanup_stdio+0x10>
 80045ac:	f000 fd96 	bl	80050dc <_fflush_r>
 80045b0:	68a1      	ldr	r1, [r4, #8]
 80045b2:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <cleanup_stdio+0x38>)
 80045b4:	4299      	cmp	r1, r3
 80045b6:	d002      	beq.n	80045be <cleanup_stdio+0x1e>
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 fd8f 	bl	80050dc <_fflush_r>
 80045be:	68e1      	ldr	r1, [r4, #12]
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <cleanup_stdio+0x3c>)
 80045c2:	4299      	cmp	r1, r3
 80045c4:	d004      	beq.n	80045d0 <cleanup_stdio+0x30>
 80045c6:	4620      	mov	r0, r4
 80045c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045cc:	f000 bd86 	b.w	80050dc <_fflush_r>
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	bf00      	nop
 80045d4:	20000214 	.word	0x20000214
 80045d8:	2000027c 	.word	0x2000027c
 80045dc:	200002e4 	.word	0x200002e4

080045e0 <global_stdio_init.part.0>:
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <global_stdio_init.part.0+0x30>)
 80045e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004614 <global_stdio_init.part.0+0x34>)
 80045e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004618 <global_stdio_init.part.0+0x38>)
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	4620      	mov	r0, r4
 80045ec:	2200      	movs	r2, #0
 80045ee:	2104      	movs	r1, #4
 80045f0:	f7ff ff94 	bl	800451c <std>
 80045f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045f8:	2201      	movs	r2, #1
 80045fa:	2109      	movs	r1, #9
 80045fc:	f7ff ff8e 	bl	800451c <std>
 8004600:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004604:	2202      	movs	r2, #2
 8004606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800460a:	2112      	movs	r1, #18
 800460c:	f7ff bf86 	b.w	800451c <std>
 8004610:	2000034c 	.word	0x2000034c
 8004614:	20000214 	.word	0x20000214
 8004618:	08004589 	.word	0x08004589

0800461c <__sfp_lock_acquire>:
 800461c:	4801      	ldr	r0, [pc, #4]	@ (8004624 <__sfp_lock_acquire+0x8>)
 800461e:	f000 b90e 	b.w	800483e <__retarget_lock_acquire_recursive>
 8004622:	bf00      	nop
 8004624:	20000355 	.word	0x20000355

08004628 <__sfp_lock_release>:
 8004628:	4801      	ldr	r0, [pc, #4]	@ (8004630 <__sfp_lock_release+0x8>)
 800462a:	f000 b909 	b.w	8004840 <__retarget_lock_release_recursive>
 800462e:	bf00      	nop
 8004630:	20000355 	.word	0x20000355

08004634 <__sinit>:
 8004634:	b510      	push	{r4, lr}
 8004636:	4604      	mov	r4, r0
 8004638:	f7ff fff0 	bl	800461c <__sfp_lock_acquire>
 800463c:	6a23      	ldr	r3, [r4, #32]
 800463e:	b11b      	cbz	r3, 8004648 <__sinit+0x14>
 8004640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004644:	f7ff bff0 	b.w	8004628 <__sfp_lock_release>
 8004648:	4b04      	ldr	r3, [pc, #16]	@ (800465c <__sinit+0x28>)
 800464a:	6223      	str	r3, [r4, #32]
 800464c:	4b04      	ldr	r3, [pc, #16]	@ (8004660 <__sinit+0x2c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f5      	bne.n	8004640 <__sinit+0xc>
 8004654:	f7ff ffc4 	bl	80045e0 <global_stdio_init.part.0>
 8004658:	e7f2      	b.n	8004640 <__sinit+0xc>
 800465a:	bf00      	nop
 800465c:	080045a1 	.word	0x080045a1
 8004660:	2000034c 	.word	0x2000034c

08004664 <_fwalk_sglue>:
 8004664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004668:	4607      	mov	r7, r0
 800466a:	4688      	mov	r8, r1
 800466c:	4614      	mov	r4, r2
 800466e:	2600      	movs	r6, #0
 8004670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004674:	f1b9 0901 	subs.w	r9, r9, #1
 8004678:	d505      	bpl.n	8004686 <_fwalk_sglue+0x22>
 800467a:	6824      	ldr	r4, [r4, #0]
 800467c:	2c00      	cmp	r4, #0
 800467e:	d1f7      	bne.n	8004670 <_fwalk_sglue+0xc>
 8004680:	4630      	mov	r0, r6
 8004682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004686:	89ab      	ldrh	r3, [r5, #12]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d907      	bls.n	800469c <_fwalk_sglue+0x38>
 800468c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004690:	3301      	adds	r3, #1
 8004692:	d003      	beq.n	800469c <_fwalk_sglue+0x38>
 8004694:	4629      	mov	r1, r5
 8004696:	4638      	mov	r0, r7
 8004698:	47c0      	blx	r8
 800469a:	4306      	orrs	r6, r0
 800469c:	3568      	adds	r5, #104	@ 0x68
 800469e:	e7e9      	b.n	8004674 <_fwalk_sglue+0x10>

080046a0 <iprintf>:
 80046a0:	b40f      	push	{r0, r1, r2, r3}
 80046a2:	b507      	push	{r0, r1, r2, lr}
 80046a4:	4906      	ldr	r1, [pc, #24]	@ (80046c0 <iprintf+0x20>)
 80046a6:	ab04      	add	r3, sp, #16
 80046a8:	6808      	ldr	r0, [r1, #0]
 80046aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ae:	6881      	ldr	r1, [r0, #8]
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	f000 f9e9 	bl	8004a88 <_vfiprintf_r>
 80046b6:	b003      	add	sp, #12
 80046b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80046bc:	b004      	add	sp, #16
 80046be:	4770      	bx	lr
 80046c0:	20000018 	.word	0x20000018

080046c4 <__sread>:
 80046c4:	b510      	push	{r4, lr}
 80046c6:	460c      	mov	r4, r1
 80046c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046cc:	f000 f868 	bl	80047a0 <_read_r>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bfab      	itete	ge
 80046d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046d6:	89a3      	ldrhlt	r3, [r4, #12]
 80046d8:	181b      	addge	r3, r3, r0
 80046da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046de:	bfac      	ite	ge
 80046e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046e2:	81a3      	strhlt	r3, [r4, #12]
 80046e4:	bd10      	pop	{r4, pc}

080046e6 <__swrite>:
 80046e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ea:	461f      	mov	r7, r3
 80046ec:	898b      	ldrh	r3, [r1, #12]
 80046ee:	05db      	lsls	r3, r3, #23
 80046f0:	4605      	mov	r5, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	4616      	mov	r6, r2
 80046f6:	d505      	bpl.n	8004704 <__swrite+0x1e>
 80046f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fc:	2302      	movs	r3, #2
 80046fe:	2200      	movs	r2, #0
 8004700:	f000 f83c 	bl	800477c <_lseek_r>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800470a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	4632      	mov	r2, r6
 8004712:	463b      	mov	r3, r7
 8004714:	4628      	mov	r0, r5
 8004716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800471a:	f000 b853 	b.w	80047c4 <_write_r>

0800471e <__sseek>:
 800471e:	b510      	push	{r4, lr}
 8004720:	460c      	mov	r4, r1
 8004722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004726:	f000 f829 	bl	800477c <_lseek_r>
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	bf15      	itete	ne
 8004730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800473a:	81a3      	strheq	r3, [r4, #12]
 800473c:	bf18      	it	ne
 800473e:	81a3      	strhne	r3, [r4, #12]
 8004740:	bd10      	pop	{r4, pc}

08004742 <__sclose>:
 8004742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004746:	f000 b809 	b.w	800475c <_close_r>

0800474a <memset>:
 800474a:	4402      	add	r2, r0
 800474c:	4603      	mov	r3, r0
 800474e:	4293      	cmp	r3, r2
 8004750:	d100      	bne.n	8004754 <memset+0xa>
 8004752:	4770      	bx	lr
 8004754:	f803 1b01 	strb.w	r1, [r3], #1
 8004758:	e7f9      	b.n	800474e <memset+0x4>
	...

0800475c <_close_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d06      	ldr	r5, [pc, #24]	@ (8004778 <_close_r+0x1c>)
 8004760:	2300      	movs	r3, #0
 8004762:	4604      	mov	r4, r0
 8004764:	4608      	mov	r0, r1
 8004766:	602b      	str	r3, [r5, #0]
 8004768:	f7fc fc3d 	bl	8000fe6 <_close>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_close_r+0x1a>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_close_r+0x1a>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	20000350 	.word	0x20000350

0800477c <_lseek_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d07      	ldr	r5, [pc, #28]	@ (800479c <_lseek_r+0x20>)
 8004780:	4604      	mov	r4, r0
 8004782:	4608      	mov	r0, r1
 8004784:	4611      	mov	r1, r2
 8004786:	2200      	movs	r2, #0
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f7fc fc52 	bl	8001034 <_lseek>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_lseek_r+0x1e>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_lseek_r+0x1e>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	20000350 	.word	0x20000350

080047a0 <_read_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4d07      	ldr	r5, [pc, #28]	@ (80047c0 <_read_r+0x20>)
 80047a4:	4604      	mov	r4, r0
 80047a6:	4608      	mov	r0, r1
 80047a8:	4611      	mov	r1, r2
 80047aa:	2200      	movs	r2, #0
 80047ac:	602a      	str	r2, [r5, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f7fc fbfc 	bl	8000fac <_read>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_read_r+0x1e>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_read_r+0x1e>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	20000350 	.word	0x20000350

080047c4 <_write_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	@ (80047e4 <_write_r+0x20>)
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	2200      	movs	r2, #0
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f7fc fa5e 	bl	8000c94 <_write>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_write_r+0x1e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_write_r+0x1e>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	20000350 	.word	0x20000350

080047e8 <__errno>:
 80047e8:	4b01      	ldr	r3, [pc, #4]	@ (80047f0 <__errno+0x8>)
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000018 	.word	0x20000018

080047f4 <__libc_init_array>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4d0d      	ldr	r5, [pc, #52]	@ (800482c <__libc_init_array+0x38>)
 80047f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004830 <__libc_init_array+0x3c>)
 80047fa:	1b64      	subs	r4, r4, r5
 80047fc:	10a4      	asrs	r4, r4, #2
 80047fe:	2600      	movs	r6, #0
 8004800:	42a6      	cmp	r6, r4
 8004802:	d109      	bne.n	8004818 <__libc_init_array+0x24>
 8004804:	4d0b      	ldr	r5, [pc, #44]	@ (8004834 <__libc_init_array+0x40>)
 8004806:	4c0c      	ldr	r4, [pc, #48]	@ (8004838 <__libc_init_array+0x44>)
 8004808:	f000 fdb8 	bl	800537c <_init>
 800480c:	1b64      	subs	r4, r4, r5
 800480e:	10a4      	asrs	r4, r4, #2
 8004810:	2600      	movs	r6, #0
 8004812:	42a6      	cmp	r6, r4
 8004814:	d105      	bne.n	8004822 <__libc_init_array+0x2e>
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	f855 3b04 	ldr.w	r3, [r5], #4
 800481c:	4798      	blx	r3
 800481e:	3601      	adds	r6, #1
 8004820:	e7ee      	b.n	8004800 <__libc_init_array+0xc>
 8004822:	f855 3b04 	ldr.w	r3, [r5], #4
 8004826:	4798      	blx	r3
 8004828:	3601      	adds	r6, #1
 800482a:	e7f2      	b.n	8004812 <__libc_init_array+0x1e>
 800482c:	0800542c 	.word	0x0800542c
 8004830:	0800542c 	.word	0x0800542c
 8004834:	0800542c 	.word	0x0800542c
 8004838:	08005430 	.word	0x08005430

0800483c <__retarget_lock_init_recursive>:
 800483c:	4770      	bx	lr

0800483e <__retarget_lock_acquire_recursive>:
 800483e:	4770      	bx	lr

08004840 <__retarget_lock_release_recursive>:
 8004840:	4770      	bx	lr
	...

08004844 <_free_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4605      	mov	r5, r0
 8004848:	2900      	cmp	r1, #0
 800484a:	d041      	beq.n	80048d0 <_free_r+0x8c>
 800484c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004850:	1f0c      	subs	r4, r1, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	bfb8      	it	lt
 8004856:	18e4      	addlt	r4, r4, r3
 8004858:	f000 f8e0 	bl	8004a1c <__malloc_lock>
 800485c:	4a1d      	ldr	r2, [pc, #116]	@ (80048d4 <_free_r+0x90>)
 800485e:	6813      	ldr	r3, [r2, #0]
 8004860:	b933      	cbnz	r3, 8004870 <_free_r+0x2c>
 8004862:	6063      	str	r3, [r4, #4]
 8004864:	6014      	str	r4, [r2, #0]
 8004866:	4628      	mov	r0, r5
 8004868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800486c:	f000 b8dc 	b.w	8004a28 <__malloc_unlock>
 8004870:	42a3      	cmp	r3, r4
 8004872:	d908      	bls.n	8004886 <_free_r+0x42>
 8004874:	6820      	ldr	r0, [r4, #0]
 8004876:	1821      	adds	r1, r4, r0
 8004878:	428b      	cmp	r3, r1
 800487a:	bf01      	itttt	eq
 800487c:	6819      	ldreq	r1, [r3, #0]
 800487e:	685b      	ldreq	r3, [r3, #4]
 8004880:	1809      	addeq	r1, r1, r0
 8004882:	6021      	streq	r1, [r4, #0]
 8004884:	e7ed      	b.n	8004862 <_free_r+0x1e>
 8004886:	461a      	mov	r2, r3
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	b10b      	cbz	r3, 8004890 <_free_r+0x4c>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d9fa      	bls.n	8004886 <_free_r+0x42>
 8004890:	6811      	ldr	r1, [r2, #0]
 8004892:	1850      	adds	r0, r2, r1
 8004894:	42a0      	cmp	r0, r4
 8004896:	d10b      	bne.n	80048b0 <_free_r+0x6c>
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	4401      	add	r1, r0
 800489c:	1850      	adds	r0, r2, r1
 800489e:	4283      	cmp	r3, r0
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	d1e0      	bne.n	8004866 <_free_r+0x22>
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	6053      	str	r3, [r2, #4]
 80048aa:	4408      	add	r0, r1
 80048ac:	6010      	str	r0, [r2, #0]
 80048ae:	e7da      	b.n	8004866 <_free_r+0x22>
 80048b0:	d902      	bls.n	80048b8 <_free_r+0x74>
 80048b2:	230c      	movs	r3, #12
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	e7d6      	b.n	8004866 <_free_r+0x22>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	1821      	adds	r1, r4, r0
 80048bc:	428b      	cmp	r3, r1
 80048be:	bf04      	itt	eq
 80048c0:	6819      	ldreq	r1, [r3, #0]
 80048c2:	685b      	ldreq	r3, [r3, #4]
 80048c4:	6063      	str	r3, [r4, #4]
 80048c6:	bf04      	itt	eq
 80048c8:	1809      	addeq	r1, r1, r0
 80048ca:	6021      	streq	r1, [r4, #0]
 80048cc:	6054      	str	r4, [r2, #4]
 80048ce:	e7ca      	b.n	8004866 <_free_r+0x22>
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	bf00      	nop
 80048d4:	2000035c 	.word	0x2000035c

080048d8 <sbrk_aligned>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0f      	ldr	r6, [pc, #60]	@ (8004918 <sbrk_aligned+0x40>)
 80048dc:	460c      	mov	r4, r1
 80048de:	6831      	ldr	r1, [r6, #0]
 80048e0:	4605      	mov	r5, r0
 80048e2:	b911      	cbnz	r1, 80048ea <sbrk_aligned+0x12>
 80048e4:	f000 fcb6 	bl	8005254 <_sbrk_r>
 80048e8:	6030      	str	r0, [r6, #0]
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 fcb1 	bl	8005254 <_sbrk_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	d103      	bne.n	80048fe <sbrk_aligned+0x26>
 80048f6:	f04f 34ff 	mov.w	r4, #4294967295
 80048fa:	4620      	mov	r0, r4
 80048fc:	bd70      	pop	{r4, r5, r6, pc}
 80048fe:	1cc4      	adds	r4, r0, #3
 8004900:	f024 0403 	bic.w	r4, r4, #3
 8004904:	42a0      	cmp	r0, r4
 8004906:	d0f8      	beq.n	80048fa <sbrk_aligned+0x22>
 8004908:	1a21      	subs	r1, r4, r0
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fca2 	bl	8005254 <_sbrk_r>
 8004910:	3001      	adds	r0, #1
 8004912:	d1f2      	bne.n	80048fa <sbrk_aligned+0x22>
 8004914:	e7ef      	b.n	80048f6 <sbrk_aligned+0x1e>
 8004916:	bf00      	nop
 8004918:	20000358 	.word	0x20000358

0800491c <_malloc_r>:
 800491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004920:	1ccd      	adds	r5, r1, #3
 8004922:	f025 0503 	bic.w	r5, r5, #3
 8004926:	3508      	adds	r5, #8
 8004928:	2d0c      	cmp	r5, #12
 800492a:	bf38      	it	cc
 800492c:	250c      	movcc	r5, #12
 800492e:	2d00      	cmp	r5, #0
 8004930:	4606      	mov	r6, r0
 8004932:	db01      	blt.n	8004938 <_malloc_r+0x1c>
 8004934:	42a9      	cmp	r1, r5
 8004936:	d904      	bls.n	8004942 <_malloc_r+0x26>
 8004938:	230c      	movs	r3, #12
 800493a:	6033      	str	r3, [r6, #0]
 800493c:	2000      	movs	r0, #0
 800493e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a18 <_malloc_r+0xfc>
 8004946:	f000 f869 	bl	8004a1c <__malloc_lock>
 800494a:	f8d8 3000 	ldr.w	r3, [r8]
 800494e:	461c      	mov	r4, r3
 8004950:	bb44      	cbnz	r4, 80049a4 <_malloc_r+0x88>
 8004952:	4629      	mov	r1, r5
 8004954:	4630      	mov	r0, r6
 8004956:	f7ff ffbf 	bl	80048d8 <sbrk_aligned>
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	4604      	mov	r4, r0
 800495e:	d158      	bne.n	8004a12 <_malloc_r+0xf6>
 8004960:	f8d8 4000 	ldr.w	r4, [r8]
 8004964:	4627      	mov	r7, r4
 8004966:	2f00      	cmp	r7, #0
 8004968:	d143      	bne.n	80049f2 <_malloc_r+0xd6>
 800496a:	2c00      	cmp	r4, #0
 800496c:	d04b      	beq.n	8004a06 <_malloc_r+0xea>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	4639      	mov	r1, r7
 8004972:	4630      	mov	r0, r6
 8004974:	eb04 0903 	add.w	r9, r4, r3
 8004978:	f000 fc6c 	bl	8005254 <_sbrk_r>
 800497c:	4581      	cmp	r9, r0
 800497e:	d142      	bne.n	8004a06 <_malloc_r+0xea>
 8004980:	6821      	ldr	r1, [r4, #0]
 8004982:	1a6d      	subs	r5, r5, r1
 8004984:	4629      	mov	r1, r5
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff ffa6 	bl	80048d8 <sbrk_aligned>
 800498c:	3001      	adds	r0, #1
 800498e:	d03a      	beq.n	8004a06 <_malloc_r+0xea>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	442b      	add	r3, r5
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	f8d8 3000 	ldr.w	r3, [r8]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	bb62      	cbnz	r2, 80049f8 <_malloc_r+0xdc>
 800499e:	f8c8 7000 	str.w	r7, [r8]
 80049a2:	e00f      	b.n	80049c4 <_malloc_r+0xa8>
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	1b52      	subs	r2, r2, r5
 80049a8:	d420      	bmi.n	80049ec <_malloc_r+0xd0>
 80049aa:	2a0b      	cmp	r2, #11
 80049ac:	d917      	bls.n	80049de <_malloc_r+0xc2>
 80049ae:	1961      	adds	r1, r4, r5
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	6025      	str	r5, [r4, #0]
 80049b4:	bf18      	it	ne
 80049b6:	6059      	strne	r1, [r3, #4]
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	bf08      	it	eq
 80049bc:	f8c8 1000 	streq.w	r1, [r8]
 80049c0:	5162      	str	r2, [r4, r5]
 80049c2:	604b      	str	r3, [r1, #4]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f82f 	bl	8004a28 <__malloc_unlock>
 80049ca:	f104 000b 	add.w	r0, r4, #11
 80049ce:	1d23      	adds	r3, r4, #4
 80049d0:	f020 0007 	bic.w	r0, r0, #7
 80049d4:	1ac2      	subs	r2, r0, r3
 80049d6:	bf1c      	itt	ne
 80049d8:	1a1b      	subne	r3, r3, r0
 80049da:	50a3      	strne	r3, [r4, r2]
 80049dc:	e7af      	b.n	800493e <_malloc_r+0x22>
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	bf0c      	ite	eq
 80049e4:	f8c8 2000 	streq.w	r2, [r8]
 80049e8:	605a      	strne	r2, [r3, #4]
 80049ea:	e7eb      	b.n	80049c4 <_malloc_r+0xa8>
 80049ec:	4623      	mov	r3, r4
 80049ee:	6864      	ldr	r4, [r4, #4]
 80049f0:	e7ae      	b.n	8004950 <_malloc_r+0x34>
 80049f2:	463c      	mov	r4, r7
 80049f4:	687f      	ldr	r7, [r7, #4]
 80049f6:	e7b6      	b.n	8004966 <_malloc_r+0x4a>
 80049f8:	461a      	mov	r2, r3
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	d1fb      	bne.n	80049f8 <_malloc_r+0xdc>
 8004a00:	2300      	movs	r3, #0
 8004a02:	6053      	str	r3, [r2, #4]
 8004a04:	e7de      	b.n	80049c4 <_malloc_r+0xa8>
 8004a06:	230c      	movs	r3, #12
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 f80c 	bl	8004a28 <__malloc_unlock>
 8004a10:	e794      	b.n	800493c <_malloc_r+0x20>
 8004a12:	6005      	str	r5, [r0, #0]
 8004a14:	e7d6      	b.n	80049c4 <_malloc_r+0xa8>
 8004a16:	bf00      	nop
 8004a18:	2000035c 	.word	0x2000035c

08004a1c <__malloc_lock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	@ (8004a24 <__malloc_lock+0x8>)
 8004a1e:	f7ff bf0e 	b.w	800483e <__retarget_lock_acquire_recursive>
 8004a22:	bf00      	nop
 8004a24:	20000354 	.word	0x20000354

08004a28 <__malloc_unlock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	@ (8004a30 <__malloc_unlock+0x8>)
 8004a2a:	f7ff bf09 	b.w	8004840 <__retarget_lock_release_recursive>
 8004a2e:	bf00      	nop
 8004a30:	20000354 	.word	0x20000354

08004a34 <__sfputc_r>:
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	b410      	push	{r4}
 8004a3c:	6093      	str	r3, [r2, #8]
 8004a3e:	da08      	bge.n	8004a52 <__sfputc_r+0x1e>
 8004a40:	6994      	ldr	r4, [r2, #24]
 8004a42:	42a3      	cmp	r3, r4
 8004a44:	db01      	blt.n	8004a4a <__sfputc_r+0x16>
 8004a46:	290a      	cmp	r1, #10
 8004a48:	d103      	bne.n	8004a52 <__sfputc_r+0x1e>
 8004a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4e:	f000 bb6d 	b.w	800512c <__swbuf_r>
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	1c58      	adds	r0, r3, #1
 8004a56:	6010      	str	r0, [r2, #0]
 8004a58:	7019      	strb	r1, [r3, #0]
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <__sfputs_r>:
 8004a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	4614      	mov	r4, r2
 8004a6a:	18d5      	adds	r5, r2, r3
 8004a6c:	42ac      	cmp	r4, r5
 8004a6e:	d101      	bne.n	8004a74 <__sfputs_r+0x12>
 8004a70:	2000      	movs	r0, #0
 8004a72:	e007      	b.n	8004a84 <__sfputs_r+0x22>
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	463a      	mov	r2, r7
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7ff ffda 	bl	8004a34 <__sfputc_r>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d1f3      	bne.n	8004a6c <__sfputs_r+0xa>
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a88 <_vfiprintf_r>:
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	460d      	mov	r5, r1
 8004a8e:	b09d      	sub	sp, #116	@ 0x74
 8004a90:	4614      	mov	r4, r2
 8004a92:	4698      	mov	r8, r3
 8004a94:	4606      	mov	r6, r0
 8004a96:	b118      	cbz	r0, 8004aa0 <_vfiprintf_r+0x18>
 8004a98:	6a03      	ldr	r3, [r0, #32]
 8004a9a:	b90b      	cbnz	r3, 8004aa0 <_vfiprintf_r+0x18>
 8004a9c:	f7ff fdca 	bl	8004634 <__sinit>
 8004aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aa2:	07d9      	lsls	r1, r3, #31
 8004aa4:	d405      	bmi.n	8004ab2 <_vfiprintf_r+0x2a>
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	059a      	lsls	r2, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <_vfiprintf_r+0x2a>
 8004aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aae:	f7ff fec6 	bl	800483e <__retarget_lock_acquire_recursive>
 8004ab2:	89ab      	ldrh	r3, [r5, #12]
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	d501      	bpl.n	8004abc <_vfiprintf_r+0x34>
 8004ab8:	692b      	ldr	r3, [r5, #16]
 8004aba:	b99b      	cbnz	r3, 8004ae4 <_vfiprintf_r+0x5c>
 8004abc:	4629      	mov	r1, r5
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f000 fb72 	bl	80051a8 <__swsetup_r>
 8004ac4:	b170      	cbz	r0, 8004ae4 <_vfiprintf_r+0x5c>
 8004ac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ac8:	07dc      	lsls	r4, r3, #31
 8004aca:	d504      	bpl.n	8004ad6 <_vfiprintf_r+0x4e>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	b01d      	add	sp, #116	@ 0x74
 8004ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	0598      	lsls	r0, r3, #22
 8004ada:	d4f7      	bmi.n	8004acc <_vfiprintf_r+0x44>
 8004adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ade:	f7ff feaf 	bl	8004840 <__retarget_lock_release_recursive>
 8004ae2:	e7f3      	b.n	8004acc <_vfiprintf_r+0x44>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004af2:	2330      	movs	r3, #48	@ 0x30
 8004af4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ca4 <_vfiprintf_r+0x21c>
 8004af8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004afc:	f04f 0901 	mov.w	r9, #1
 8004b00:	4623      	mov	r3, r4
 8004b02:	469a      	mov	sl, r3
 8004b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b08:	b10a      	cbz	r2, 8004b0e <_vfiprintf_r+0x86>
 8004b0a:	2a25      	cmp	r2, #37	@ 0x25
 8004b0c:	d1f9      	bne.n	8004b02 <_vfiprintf_r+0x7a>
 8004b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b12:	d00b      	beq.n	8004b2c <_vfiprintf_r+0xa4>
 8004b14:	465b      	mov	r3, fp
 8004b16:	4622      	mov	r2, r4
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7ff ffa1 	bl	8004a62 <__sfputs_r>
 8004b20:	3001      	adds	r0, #1
 8004b22:	f000 80a7 	beq.w	8004c74 <_vfiprintf_r+0x1ec>
 8004b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b28:	445a      	add	r2, fp
 8004b2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 809f 	beq.w	8004c74 <_vfiprintf_r+0x1ec>
 8004b36:	2300      	movs	r3, #0
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b40:	f10a 0a01 	add.w	sl, sl, #1
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	9307      	str	r3, [sp, #28]
 8004b48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b4e:	4654      	mov	r4, sl
 8004b50:	2205      	movs	r2, #5
 8004b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b56:	4853      	ldr	r0, [pc, #332]	@ (8004ca4 <_vfiprintf_r+0x21c>)
 8004b58:	f7fb fb5a 	bl	8000210 <memchr>
 8004b5c:	9a04      	ldr	r2, [sp, #16]
 8004b5e:	b9d8      	cbnz	r0, 8004b98 <_vfiprintf_r+0x110>
 8004b60:	06d1      	lsls	r1, r2, #27
 8004b62:	bf44      	itt	mi
 8004b64:	2320      	movmi	r3, #32
 8004b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b6a:	0713      	lsls	r3, r2, #28
 8004b6c:	bf44      	itt	mi
 8004b6e:	232b      	movmi	r3, #43	@ 0x2b
 8004b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b74:	f89a 3000 	ldrb.w	r3, [sl]
 8004b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b7a:	d015      	beq.n	8004ba8 <_vfiprintf_r+0x120>
 8004b7c:	9a07      	ldr	r2, [sp, #28]
 8004b7e:	4654      	mov	r4, sl
 8004b80:	2000      	movs	r0, #0
 8004b82:	f04f 0c0a 	mov.w	ip, #10
 8004b86:	4621      	mov	r1, r4
 8004b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b8c:	3b30      	subs	r3, #48	@ 0x30
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	d94b      	bls.n	8004c2a <_vfiprintf_r+0x1a2>
 8004b92:	b1b0      	cbz	r0, 8004bc2 <_vfiprintf_r+0x13a>
 8004b94:	9207      	str	r2, [sp, #28]
 8004b96:	e014      	b.n	8004bc2 <_vfiprintf_r+0x13a>
 8004b98:	eba0 0308 	sub.w	r3, r0, r8
 8004b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	9304      	str	r3, [sp, #16]
 8004ba4:	46a2      	mov	sl, r4
 8004ba6:	e7d2      	b.n	8004b4e <_vfiprintf_r+0xc6>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	1d19      	adds	r1, r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	9103      	str	r1, [sp, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bfbb      	ittet	lt
 8004bb4:	425b      	neglt	r3, r3
 8004bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bba:	9307      	strge	r3, [sp, #28]
 8004bbc:	9307      	strlt	r3, [sp, #28]
 8004bbe:	bfb8      	it	lt
 8004bc0:	9204      	strlt	r2, [sp, #16]
 8004bc2:	7823      	ldrb	r3, [r4, #0]
 8004bc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bc6:	d10a      	bne.n	8004bde <_vfiprintf_r+0x156>
 8004bc8:	7863      	ldrb	r3, [r4, #1]
 8004bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bcc:	d132      	bne.n	8004c34 <_vfiprintf_r+0x1ac>
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	1d1a      	adds	r2, r3, #4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	9203      	str	r2, [sp, #12]
 8004bd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bda:	3402      	adds	r4, #2
 8004bdc:	9305      	str	r3, [sp, #20]
 8004bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004cb4 <_vfiprintf_r+0x22c>
 8004be2:	7821      	ldrb	r1, [r4, #0]
 8004be4:	2203      	movs	r2, #3
 8004be6:	4650      	mov	r0, sl
 8004be8:	f7fb fb12 	bl	8000210 <memchr>
 8004bec:	b138      	cbz	r0, 8004bfe <_vfiprintf_r+0x176>
 8004bee:	9b04      	ldr	r3, [sp, #16]
 8004bf0:	eba0 000a 	sub.w	r0, r0, sl
 8004bf4:	2240      	movs	r2, #64	@ 0x40
 8004bf6:	4082      	lsls	r2, r0
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	3401      	adds	r4, #1
 8004bfc:	9304      	str	r3, [sp, #16]
 8004bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c02:	4829      	ldr	r0, [pc, #164]	@ (8004ca8 <_vfiprintf_r+0x220>)
 8004c04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c08:	2206      	movs	r2, #6
 8004c0a:	f7fb fb01 	bl	8000210 <memchr>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d03f      	beq.n	8004c92 <_vfiprintf_r+0x20a>
 8004c12:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <_vfiprintf_r+0x224>)
 8004c14:	bb1b      	cbnz	r3, 8004c5e <_vfiprintf_r+0x1d6>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	3307      	adds	r3, #7
 8004c1a:	f023 0307 	bic.w	r3, r3, #7
 8004c1e:	3308      	adds	r3, #8
 8004c20:	9303      	str	r3, [sp, #12]
 8004c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c24:	443b      	add	r3, r7
 8004c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c28:	e76a      	b.n	8004b00 <_vfiprintf_r+0x78>
 8004c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c2e:	460c      	mov	r4, r1
 8004c30:	2001      	movs	r0, #1
 8004c32:	e7a8      	b.n	8004b86 <_vfiprintf_r+0xfe>
 8004c34:	2300      	movs	r3, #0
 8004c36:	3401      	adds	r4, #1
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f04f 0c0a 	mov.w	ip, #10
 8004c40:	4620      	mov	r0, r4
 8004c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c46:	3a30      	subs	r2, #48	@ 0x30
 8004c48:	2a09      	cmp	r2, #9
 8004c4a:	d903      	bls.n	8004c54 <_vfiprintf_r+0x1cc>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0c6      	beq.n	8004bde <_vfiprintf_r+0x156>
 8004c50:	9105      	str	r1, [sp, #20]
 8004c52:	e7c4      	b.n	8004bde <_vfiprintf_r+0x156>
 8004c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c58:	4604      	mov	r4, r0
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e7f0      	b.n	8004c40 <_vfiprintf_r+0x1b8>
 8004c5e:	ab03      	add	r3, sp, #12
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	462a      	mov	r2, r5
 8004c64:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <_vfiprintf_r+0x228>)
 8004c66:	a904      	add	r1, sp, #16
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f3af 8000 	nop.w
 8004c6e:	4607      	mov	r7, r0
 8004c70:	1c78      	adds	r0, r7, #1
 8004c72:	d1d6      	bne.n	8004c22 <_vfiprintf_r+0x19a>
 8004c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c76:	07d9      	lsls	r1, r3, #31
 8004c78:	d405      	bmi.n	8004c86 <_vfiprintf_r+0x1fe>
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	059a      	lsls	r2, r3, #22
 8004c7e:	d402      	bmi.n	8004c86 <_vfiprintf_r+0x1fe>
 8004c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c82:	f7ff fddd 	bl	8004840 <__retarget_lock_release_recursive>
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	065b      	lsls	r3, r3, #25
 8004c8a:	f53f af1f 	bmi.w	8004acc <_vfiprintf_r+0x44>
 8004c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c90:	e71e      	b.n	8004ad0 <_vfiprintf_r+0x48>
 8004c92:	ab03      	add	r3, sp, #12
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	462a      	mov	r2, r5
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <_vfiprintf_r+0x228>)
 8004c9a:	a904      	add	r1, sp, #16
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 f879 	bl	8004d94 <_printf_i>
 8004ca2:	e7e4      	b.n	8004c6e <_vfiprintf_r+0x1e6>
 8004ca4:	080053f0 	.word	0x080053f0
 8004ca8:	080053fa 	.word	0x080053fa
 8004cac:	00000000 	.word	0x00000000
 8004cb0:	08004a63 	.word	0x08004a63
 8004cb4:	080053f6 	.word	0x080053f6

08004cb8 <_printf_common>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	4698      	mov	r8, r3
 8004cc0:	688a      	ldr	r2, [r1, #8]
 8004cc2:	690b      	ldr	r3, [r1, #16]
 8004cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	bfb8      	it	lt
 8004ccc:	4613      	movlt	r3, r2
 8004cce:	6033      	str	r3, [r6, #0]
 8004cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	b10a      	cbz	r2, 8004cde <_printf_common+0x26>
 8004cda:	3301      	adds	r3, #1
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	0699      	lsls	r1, r3, #26
 8004ce2:	bf42      	ittt	mi
 8004ce4:	6833      	ldrmi	r3, [r6, #0]
 8004ce6:	3302      	addmi	r3, #2
 8004ce8:	6033      	strmi	r3, [r6, #0]
 8004cea:	6825      	ldr	r5, [r4, #0]
 8004cec:	f015 0506 	ands.w	r5, r5, #6
 8004cf0:	d106      	bne.n	8004d00 <_printf_common+0x48>
 8004cf2:	f104 0a19 	add.w	sl, r4, #25
 8004cf6:	68e3      	ldr	r3, [r4, #12]
 8004cf8:	6832      	ldr	r2, [r6, #0]
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	42ab      	cmp	r3, r5
 8004cfe:	dc26      	bgt.n	8004d4e <_printf_common+0x96>
 8004d00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	3b00      	subs	r3, #0
 8004d08:	bf18      	it	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	0692      	lsls	r2, r2, #26
 8004d0e:	d42b      	bmi.n	8004d68 <_printf_common+0xb0>
 8004d10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d14:	4641      	mov	r1, r8
 8004d16:	4638      	mov	r0, r7
 8004d18:	47c8      	blx	r9
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d01e      	beq.n	8004d5c <_printf_common+0xa4>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	f003 0306 	and.w	r3, r3, #6
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	bf02      	ittt	eq
 8004d2a:	68e5      	ldreq	r5, [r4, #12]
 8004d2c:	6833      	ldreq	r3, [r6, #0]
 8004d2e:	1aed      	subeq	r5, r5, r3
 8004d30:	68a3      	ldr	r3, [r4, #8]
 8004d32:	bf0c      	ite	eq
 8004d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d38:	2500      	movne	r5, #0
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	bfc4      	itt	gt
 8004d3e:	1a9b      	subgt	r3, r3, r2
 8004d40:	18ed      	addgt	r5, r5, r3
 8004d42:	2600      	movs	r6, #0
 8004d44:	341a      	adds	r4, #26
 8004d46:	42b5      	cmp	r5, r6
 8004d48:	d11a      	bne.n	8004d80 <_printf_common+0xc8>
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	e008      	b.n	8004d60 <_printf_common+0xa8>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4652      	mov	r2, sl
 8004d52:	4641      	mov	r1, r8
 8004d54:	4638      	mov	r0, r7
 8004d56:	47c8      	blx	r9
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d103      	bne.n	8004d64 <_printf_common+0xac>
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d64:	3501      	adds	r5, #1
 8004d66:	e7c6      	b.n	8004cf6 <_printf_common+0x3e>
 8004d68:	18e1      	adds	r1, r4, r3
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	2030      	movs	r0, #48	@ 0x30
 8004d6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d72:	4422      	add	r2, r4
 8004d74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	e7c7      	b.n	8004d10 <_printf_common+0x58>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4622      	mov	r2, r4
 8004d84:	4641      	mov	r1, r8
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c8      	blx	r9
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d0e6      	beq.n	8004d5c <_printf_common+0xa4>
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7d9      	b.n	8004d46 <_printf_common+0x8e>
	...

08004d94 <_printf_i>:
 8004d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d98:	7e0f      	ldrb	r7, [r1, #24]
 8004d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d9c:	2f78      	cmp	r7, #120	@ 0x78
 8004d9e:	4691      	mov	r9, r2
 8004da0:	4680      	mov	r8, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	469a      	mov	sl, r3
 8004da6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004daa:	d807      	bhi.n	8004dbc <_printf_i+0x28>
 8004dac:	2f62      	cmp	r7, #98	@ 0x62
 8004dae:	d80a      	bhi.n	8004dc6 <_printf_i+0x32>
 8004db0:	2f00      	cmp	r7, #0
 8004db2:	f000 80d2 	beq.w	8004f5a <_printf_i+0x1c6>
 8004db6:	2f58      	cmp	r7, #88	@ 0x58
 8004db8:	f000 80b9 	beq.w	8004f2e <_printf_i+0x19a>
 8004dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dc4:	e03a      	b.n	8004e3c <_printf_i+0xa8>
 8004dc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dca:	2b15      	cmp	r3, #21
 8004dcc:	d8f6      	bhi.n	8004dbc <_printf_i+0x28>
 8004dce:	a101      	add	r1, pc, #4	@ (adr r1, 8004dd4 <_printf_i+0x40>)
 8004dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e41 	.word	0x08004e41
 8004ddc:	08004dbd 	.word	0x08004dbd
 8004de0:	08004dbd 	.word	0x08004dbd
 8004de4:	08004dbd 	.word	0x08004dbd
 8004de8:	08004dbd 	.word	0x08004dbd
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004dbd 	.word	0x08004dbd
 8004df4:	08004dbd 	.word	0x08004dbd
 8004df8:	08004dbd 	.word	0x08004dbd
 8004dfc:	08004dbd 	.word	0x08004dbd
 8004e00:	08004f41 	.word	0x08004f41
 8004e04:	08004e6b 	.word	0x08004e6b
 8004e08:	08004efb 	.word	0x08004efb
 8004e0c:	08004dbd 	.word	0x08004dbd
 8004e10:	08004dbd 	.word	0x08004dbd
 8004e14:	08004f63 	.word	0x08004f63
 8004e18:	08004dbd 	.word	0x08004dbd
 8004e1c:	08004e6b 	.word	0x08004e6b
 8004e20:	08004dbd 	.word	0x08004dbd
 8004e24:	08004dbd 	.word	0x08004dbd
 8004e28:	08004f03 	.word	0x08004f03
 8004e2c:	6833      	ldr	r3, [r6, #0]
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6032      	str	r2, [r6, #0]
 8004e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e09d      	b.n	8004f7c <_printf_i+0x1e8>
 8004e40:	6833      	ldr	r3, [r6, #0]
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	1d19      	adds	r1, r3, #4
 8004e46:	6031      	str	r1, [r6, #0]
 8004e48:	0606      	lsls	r6, r0, #24
 8004e4a:	d501      	bpl.n	8004e50 <_printf_i+0xbc>
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	e003      	b.n	8004e58 <_printf_i+0xc4>
 8004e50:	0645      	lsls	r5, r0, #25
 8004e52:	d5fb      	bpl.n	8004e4c <_printf_i+0xb8>
 8004e54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	da03      	bge.n	8004e64 <_printf_i+0xd0>
 8004e5c:	232d      	movs	r3, #45	@ 0x2d
 8004e5e:	426d      	negs	r5, r5
 8004e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e64:	4859      	ldr	r0, [pc, #356]	@ (8004fcc <_printf_i+0x238>)
 8004e66:	230a      	movs	r3, #10
 8004e68:	e011      	b.n	8004e8e <_printf_i+0xfa>
 8004e6a:	6821      	ldr	r1, [r4, #0]
 8004e6c:	6833      	ldr	r3, [r6, #0]
 8004e6e:	0608      	lsls	r0, r1, #24
 8004e70:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e74:	d402      	bmi.n	8004e7c <_printf_i+0xe8>
 8004e76:	0649      	lsls	r1, r1, #25
 8004e78:	bf48      	it	mi
 8004e7a:	b2ad      	uxthmi	r5, r5
 8004e7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e7e:	4853      	ldr	r0, [pc, #332]	@ (8004fcc <_printf_i+0x238>)
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	bf14      	ite	ne
 8004e84:	230a      	movne	r3, #10
 8004e86:	2308      	moveq	r3, #8
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e8e:	6866      	ldr	r6, [r4, #4]
 8004e90:	60a6      	str	r6, [r4, #8]
 8004e92:	2e00      	cmp	r6, #0
 8004e94:	bfa2      	ittt	ge
 8004e96:	6821      	ldrge	r1, [r4, #0]
 8004e98:	f021 0104 	bicge.w	r1, r1, #4
 8004e9c:	6021      	strge	r1, [r4, #0]
 8004e9e:	b90d      	cbnz	r5, 8004ea4 <_printf_i+0x110>
 8004ea0:	2e00      	cmp	r6, #0
 8004ea2:	d04b      	beq.n	8004f3c <_printf_i+0x1a8>
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8004eae:	5dc7      	ldrb	r7, [r0, r7]
 8004eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eb4:	462f      	mov	r7, r5
 8004eb6:	42bb      	cmp	r3, r7
 8004eb8:	460d      	mov	r5, r1
 8004eba:	d9f4      	bls.n	8004ea6 <_printf_i+0x112>
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d10b      	bne.n	8004ed8 <_printf_i+0x144>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	07df      	lsls	r7, r3, #31
 8004ec4:	d508      	bpl.n	8004ed8 <_printf_i+0x144>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	6861      	ldr	r1, [r4, #4]
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	bfde      	ittt	le
 8004ece:	2330      	movle	r3, #48	@ 0x30
 8004ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ed4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ed8:	1b92      	subs	r2, r2, r6
 8004eda:	6122      	str	r2, [r4, #16]
 8004edc:	f8cd a000 	str.w	sl, [sp]
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	aa03      	add	r2, sp, #12
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7ff fee6 	bl	8004cb8 <_printf_common>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d14a      	bne.n	8004f86 <_printf_i+0x1f2>
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	b004      	add	sp, #16
 8004ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	4833      	ldr	r0, [pc, #204]	@ (8004fd0 <_printf_i+0x23c>)
 8004f04:	2778      	movs	r7, #120	@ 0x78
 8004f06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	6831      	ldr	r1, [r6, #0]
 8004f0e:	061f      	lsls	r7, r3, #24
 8004f10:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f14:	d402      	bmi.n	8004f1c <_printf_i+0x188>
 8004f16:	065f      	lsls	r7, r3, #25
 8004f18:	bf48      	it	mi
 8004f1a:	b2ad      	uxthmi	r5, r5
 8004f1c:	6031      	str	r1, [r6, #0]
 8004f1e:	07d9      	lsls	r1, r3, #31
 8004f20:	bf44      	itt	mi
 8004f22:	f043 0320 	orrmi.w	r3, r3, #32
 8004f26:	6023      	strmi	r3, [r4, #0]
 8004f28:	b11d      	cbz	r5, 8004f32 <_printf_i+0x19e>
 8004f2a:	2310      	movs	r3, #16
 8004f2c:	e7ac      	b.n	8004e88 <_printf_i+0xf4>
 8004f2e:	4827      	ldr	r0, [pc, #156]	@ (8004fcc <_printf_i+0x238>)
 8004f30:	e7e9      	b.n	8004f06 <_printf_i+0x172>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f023 0320 	bic.w	r3, r3, #32
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	e7f6      	b.n	8004f2a <_printf_i+0x196>
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	e7bd      	b.n	8004ebc <_printf_i+0x128>
 8004f40:	6833      	ldr	r3, [r6, #0]
 8004f42:	6825      	ldr	r5, [r4, #0]
 8004f44:	6961      	ldr	r1, [r4, #20]
 8004f46:	1d18      	adds	r0, r3, #4
 8004f48:	6030      	str	r0, [r6, #0]
 8004f4a:	062e      	lsls	r6, r5, #24
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	d501      	bpl.n	8004f54 <_printf_i+0x1c0>
 8004f50:	6019      	str	r1, [r3, #0]
 8004f52:	e002      	b.n	8004f5a <_printf_i+0x1c6>
 8004f54:	0668      	lsls	r0, r5, #25
 8004f56:	d5fb      	bpl.n	8004f50 <_printf_i+0x1bc>
 8004f58:	8019      	strh	r1, [r3, #0]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	4616      	mov	r6, r2
 8004f60:	e7bc      	b.n	8004edc <_printf_i+0x148>
 8004f62:	6833      	ldr	r3, [r6, #0]
 8004f64:	1d1a      	adds	r2, r3, #4
 8004f66:	6032      	str	r2, [r6, #0]
 8004f68:	681e      	ldr	r6, [r3, #0]
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7fb f94e 	bl	8000210 <memchr>
 8004f74:	b108      	cbz	r0, 8004f7a <_printf_i+0x1e6>
 8004f76:	1b80      	subs	r0, r0, r6
 8004f78:	6060      	str	r0, [r4, #4]
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f84:	e7aa      	b.n	8004edc <_printf_i+0x148>
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d0ad      	beq.n	8004ef0 <_printf_i+0x15c>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	d413      	bmi.n	8004fc2 <_printf_i+0x22e>
 8004f9a:	68e0      	ldr	r0, [r4, #12]
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	4298      	cmp	r0, r3
 8004fa0:	bfb8      	it	lt
 8004fa2:	4618      	movlt	r0, r3
 8004fa4:	e7a6      	b.n	8004ef4 <_printf_i+0x160>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4632      	mov	r2, r6
 8004faa:	4649      	mov	r1, r9
 8004fac:	4640      	mov	r0, r8
 8004fae:	47d0      	blx	sl
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d09d      	beq.n	8004ef0 <_printf_i+0x15c>
 8004fb4:	3501      	adds	r5, #1
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	9903      	ldr	r1, [sp, #12]
 8004fba:	1a5b      	subs	r3, r3, r1
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	dcf2      	bgt.n	8004fa6 <_printf_i+0x212>
 8004fc0:	e7eb      	b.n	8004f9a <_printf_i+0x206>
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	f104 0619 	add.w	r6, r4, #25
 8004fc8:	e7f5      	b.n	8004fb6 <_printf_i+0x222>
 8004fca:	bf00      	nop
 8004fcc:	08005401 	.word	0x08005401
 8004fd0:	08005412 	.word	0x08005412

08004fd4 <__sflush_r>:
 8004fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fdc:	0716      	lsls	r6, r2, #28
 8004fde:	4605      	mov	r5, r0
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	d454      	bmi.n	800508e <__sflush_r+0xba>
 8004fe4:	684b      	ldr	r3, [r1, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dc02      	bgt.n	8004ff0 <__sflush_r+0x1c>
 8004fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dd48      	ble.n	8005082 <__sflush_r+0xae>
 8004ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	d045      	beq.n	8005082 <__sflush_r+0xae>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ffc:	682f      	ldr	r7, [r5, #0]
 8004ffe:	6a21      	ldr	r1, [r4, #32]
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	d030      	beq.n	8005066 <__sflush_r+0x92>
 8005004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	0759      	lsls	r1, r3, #29
 800500a:	d505      	bpl.n	8005018 <__sflush_r+0x44>
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005012:	b10b      	cbz	r3, 8005018 <__sflush_r+0x44>
 8005014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	2300      	movs	r3, #0
 800501a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800501c:	6a21      	ldr	r1, [r4, #32]
 800501e:	4628      	mov	r0, r5
 8005020:	47b0      	blx	r6
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	d106      	bne.n	8005036 <__sflush_r+0x62>
 8005028:	6829      	ldr	r1, [r5, #0]
 800502a:	291d      	cmp	r1, #29
 800502c:	d82b      	bhi.n	8005086 <__sflush_r+0xb2>
 800502e:	4a2a      	ldr	r2, [pc, #168]	@ (80050d8 <__sflush_r+0x104>)
 8005030:	410a      	asrs	r2, r1
 8005032:	07d6      	lsls	r6, r2, #31
 8005034:	d427      	bmi.n	8005086 <__sflush_r+0xb2>
 8005036:	2200      	movs	r2, #0
 8005038:	6062      	str	r2, [r4, #4]
 800503a:	04d9      	lsls	r1, r3, #19
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	6022      	str	r2, [r4, #0]
 8005040:	d504      	bpl.n	800504c <__sflush_r+0x78>
 8005042:	1c42      	adds	r2, r0, #1
 8005044:	d101      	bne.n	800504a <__sflush_r+0x76>
 8005046:	682b      	ldr	r3, [r5, #0]
 8005048:	b903      	cbnz	r3, 800504c <__sflush_r+0x78>
 800504a:	6560      	str	r0, [r4, #84]	@ 0x54
 800504c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800504e:	602f      	str	r7, [r5, #0]
 8005050:	b1b9      	cbz	r1, 8005082 <__sflush_r+0xae>
 8005052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005056:	4299      	cmp	r1, r3
 8005058:	d002      	beq.n	8005060 <__sflush_r+0x8c>
 800505a:	4628      	mov	r0, r5
 800505c:	f7ff fbf2 	bl	8004844 <_free_r>
 8005060:	2300      	movs	r3, #0
 8005062:	6363      	str	r3, [r4, #52]	@ 0x34
 8005064:	e00d      	b.n	8005082 <__sflush_r+0xae>
 8005066:	2301      	movs	r3, #1
 8005068:	4628      	mov	r0, r5
 800506a:	47b0      	blx	r6
 800506c:	4602      	mov	r2, r0
 800506e:	1c50      	adds	r0, r2, #1
 8005070:	d1c9      	bne.n	8005006 <__sflush_r+0x32>
 8005072:	682b      	ldr	r3, [r5, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0c6      	beq.n	8005006 <__sflush_r+0x32>
 8005078:	2b1d      	cmp	r3, #29
 800507a:	d001      	beq.n	8005080 <__sflush_r+0xac>
 800507c:	2b16      	cmp	r3, #22
 800507e:	d11e      	bne.n	80050be <__sflush_r+0xea>
 8005080:	602f      	str	r7, [r5, #0]
 8005082:	2000      	movs	r0, #0
 8005084:	e022      	b.n	80050cc <__sflush_r+0xf8>
 8005086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800508a:	b21b      	sxth	r3, r3
 800508c:	e01b      	b.n	80050c6 <__sflush_r+0xf2>
 800508e:	690f      	ldr	r7, [r1, #16]
 8005090:	2f00      	cmp	r7, #0
 8005092:	d0f6      	beq.n	8005082 <__sflush_r+0xae>
 8005094:	0793      	lsls	r3, r2, #30
 8005096:	680e      	ldr	r6, [r1, #0]
 8005098:	bf08      	it	eq
 800509a:	694b      	ldreq	r3, [r1, #20]
 800509c:	600f      	str	r7, [r1, #0]
 800509e:	bf18      	it	ne
 80050a0:	2300      	movne	r3, #0
 80050a2:	eba6 0807 	sub.w	r8, r6, r7
 80050a6:	608b      	str	r3, [r1, #8]
 80050a8:	f1b8 0f00 	cmp.w	r8, #0
 80050ac:	dde9      	ble.n	8005082 <__sflush_r+0xae>
 80050ae:	6a21      	ldr	r1, [r4, #32]
 80050b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050b2:	4643      	mov	r3, r8
 80050b4:	463a      	mov	r2, r7
 80050b6:	4628      	mov	r0, r5
 80050b8:	47b0      	blx	r6
 80050ba:	2800      	cmp	r0, #0
 80050bc:	dc08      	bgt.n	80050d0 <__sflush_r+0xfc>
 80050be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c6:	81a3      	strh	r3, [r4, #12]
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295
 80050cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d0:	4407      	add	r7, r0
 80050d2:	eba8 0800 	sub.w	r8, r8, r0
 80050d6:	e7e7      	b.n	80050a8 <__sflush_r+0xd4>
 80050d8:	dfbffffe 	.word	0xdfbffffe

080050dc <_fflush_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	4605      	mov	r5, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	b913      	cbnz	r3, 80050ec <_fflush_r+0x10>
 80050e6:	2500      	movs	r5, #0
 80050e8:	4628      	mov	r0, r5
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	b118      	cbz	r0, 80050f6 <_fflush_r+0x1a>
 80050ee:	6a03      	ldr	r3, [r0, #32]
 80050f0:	b90b      	cbnz	r3, 80050f6 <_fflush_r+0x1a>
 80050f2:	f7ff fa9f 	bl	8004634 <__sinit>
 80050f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f3      	beq.n	80050e6 <_fflush_r+0xa>
 80050fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005100:	07d0      	lsls	r0, r2, #31
 8005102:	d404      	bmi.n	800510e <_fflush_r+0x32>
 8005104:	0599      	lsls	r1, r3, #22
 8005106:	d402      	bmi.n	800510e <_fflush_r+0x32>
 8005108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800510a:	f7ff fb98 	bl	800483e <__retarget_lock_acquire_recursive>
 800510e:	4628      	mov	r0, r5
 8005110:	4621      	mov	r1, r4
 8005112:	f7ff ff5f 	bl	8004fd4 <__sflush_r>
 8005116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005118:	07da      	lsls	r2, r3, #31
 800511a:	4605      	mov	r5, r0
 800511c:	d4e4      	bmi.n	80050e8 <_fflush_r+0xc>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	059b      	lsls	r3, r3, #22
 8005122:	d4e1      	bmi.n	80050e8 <_fflush_r+0xc>
 8005124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005126:	f7ff fb8b 	bl	8004840 <__retarget_lock_release_recursive>
 800512a:	e7dd      	b.n	80050e8 <_fflush_r+0xc>

0800512c <__swbuf_r>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	460e      	mov	r6, r1
 8005130:	4614      	mov	r4, r2
 8005132:	4605      	mov	r5, r0
 8005134:	b118      	cbz	r0, 800513e <__swbuf_r+0x12>
 8005136:	6a03      	ldr	r3, [r0, #32]
 8005138:	b90b      	cbnz	r3, 800513e <__swbuf_r+0x12>
 800513a:	f7ff fa7b 	bl	8004634 <__sinit>
 800513e:	69a3      	ldr	r3, [r4, #24]
 8005140:	60a3      	str	r3, [r4, #8]
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	071a      	lsls	r2, r3, #28
 8005146:	d501      	bpl.n	800514c <__swbuf_r+0x20>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	b943      	cbnz	r3, 800515e <__swbuf_r+0x32>
 800514c:	4621      	mov	r1, r4
 800514e:	4628      	mov	r0, r5
 8005150:	f000 f82a 	bl	80051a8 <__swsetup_r>
 8005154:	b118      	cbz	r0, 800515e <__swbuf_r+0x32>
 8005156:	f04f 37ff 	mov.w	r7, #4294967295
 800515a:	4638      	mov	r0, r7
 800515c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	1a98      	subs	r0, r3, r2
 8005164:	6963      	ldr	r3, [r4, #20]
 8005166:	b2f6      	uxtb	r6, r6
 8005168:	4283      	cmp	r3, r0
 800516a:	4637      	mov	r7, r6
 800516c:	dc05      	bgt.n	800517a <__swbuf_r+0x4e>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f7ff ffb3 	bl	80050dc <_fflush_r>
 8005176:	2800      	cmp	r0, #0
 8005178:	d1ed      	bne.n	8005156 <__swbuf_r+0x2a>
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	3b01      	subs	r3, #1
 800517e:	60a3      	str	r3, [r4, #8]
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	6022      	str	r2, [r4, #0]
 8005186:	701e      	strb	r6, [r3, #0]
 8005188:	6962      	ldr	r2, [r4, #20]
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	429a      	cmp	r2, r3
 800518e:	d004      	beq.n	800519a <__swbuf_r+0x6e>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	07db      	lsls	r3, r3, #31
 8005194:	d5e1      	bpl.n	800515a <__swbuf_r+0x2e>
 8005196:	2e0a      	cmp	r6, #10
 8005198:	d1df      	bne.n	800515a <__swbuf_r+0x2e>
 800519a:	4621      	mov	r1, r4
 800519c:	4628      	mov	r0, r5
 800519e:	f7ff ff9d 	bl	80050dc <_fflush_r>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d0d9      	beq.n	800515a <__swbuf_r+0x2e>
 80051a6:	e7d6      	b.n	8005156 <__swbuf_r+0x2a>

080051a8 <__swsetup_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4b29      	ldr	r3, [pc, #164]	@ (8005250 <__swsetup_r+0xa8>)
 80051ac:	4605      	mov	r5, r0
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	460c      	mov	r4, r1
 80051b2:	b118      	cbz	r0, 80051bc <__swsetup_r+0x14>
 80051b4:	6a03      	ldr	r3, [r0, #32]
 80051b6:	b90b      	cbnz	r3, 80051bc <__swsetup_r+0x14>
 80051b8:	f7ff fa3c 	bl	8004634 <__sinit>
 80051bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c0:	0719      	lsls	r1, r3, #28
 80051c2:	d422      	bmi.n	800520a <__swsetup_r+0x62>
 80051c4:	06da      	lsls	r2, r3, #27
 80051c6:	d407      	bmi.n	80051d8 <__swsetup_r+0x30>
 80051c8:	2209      	movs	r2, #9
 80051ca:	602a      	str	r2, [r5, #0]
 80051cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	f04f 30ff 	mov.w	r0, #4294967295
 80051d6:	e033      	b.n	8005240 <__swsetup_r+0x98>
 80051d8:	0758      	lsls	r0, r3, #29
 80051da:	d512      	bpl.n	8005202 <__swsetup_r+0x5a>
 80051dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051de:	b141      	cbz	r1, 80051f2 <__swsetup_r+0x4a>
 80051e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051e4:	4299      	cmp	r1, r3
 80051e6:	d002      	beq.n	80051ee <__swsetup_r+0x46>
 80051e8:	4628      	mov	r0, r5
 80051ea:	f7ff fb2b 	bl	8004844 <_free_r>
 80051ee:	2300      	movs	r3, #0
 80051f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	2300      	movs	r3, #0
 80051fc:	6063      	str	r3, [r4, #4]
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	b94b      	cbnz	r3, 8005222 <__swsetup_r+0x7a>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005218:	d003      	beq.n	8005222 <__swsetup_r+0x7a>
 800521a:	4621      	mov	r1, r4
 800521c:	4628      	mov	r0, r5
 800521e:	f000 f84f 	bl	80052c0 <__smakebuf_r>
 8005222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005226:	f013 0201 	ands.w	r2, r3, #1
 800522a:	d00a      	beq.n	8005242 <__swsetup_r+0x9a>
 800522c:	2200      	movs	r2, #0
 800522e:	60a2      	str	r2, [r4, #8]
 8005230:	6962      	ldr	r2, [r4, #20]
 8005232:	4252      	negs	r2, r2
 8005234:	61a2      	str	r2, [r4, #24]
 8005236:	6922      	ldr	r2, [r4, #16]
 8005238:	b942      	cbnz	r2, 800524c <__swsetup_r+0xa4>
 800523a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800523e:	d1c5      	bne.n	80051cc <__swsetup_r+0x24>
 8005240:	bd38      	pop	{r3, r4, r5, pc}
 8005242:	0799      	lsls	r1, r3, #30
 8005244:	bf58      	it	pl
 8005246:	6962      	ldrpl	r2, [r4, #20]
 8005248:	60a2      	str	r2, [r4, #8]
 800524a:	e7f4      	b.n	8005236 <__swsetup_r+0x8e>
 800524c:	2000      	movs	r0, #0
 800524e:	e7f7      	b.n	8005240 <__swsetup_r+0x98>
 8005250:	20000018 	.word	0x20000018

08005254 <_sbrk_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	@ (8005270 <_sbrk_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb fef6 	bl	8001050 <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_sbrk_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_sbrk_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000350 	.word	0x20000350

08005274 <__swhatbuf_r>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	460c      	mov	r4, r1
 8005278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527c:	2900      	cmp	r1, #0
 800527e:	b096      	sub	sp, #88	@ 0x58
 8005280:	4615      	mov	r5, r2
 8005282:	461e      	mov	r6, r3
 8005284:	da0d      	bge.n	80052a2 <__swhatbuf_r+0x2e>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	bf14      	ite	ne
 8005292:	2340      	movne	r3, #64	@ 0x40
 8005294:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005298:	2000      	movs	r0, #0
 800529a:	6031      	str	r1, [r6, #0]
 800529c:	602b      	str	r3, [r5, #0]
 800529e:	b016      	add	sp, #88	@ 0x58
 80052a0:	bd70      	pop	{r4, r5, r6, pc}
 80052a2:	466a      	mov	r2, sp
 80052a4:	f000 f848 	bl	8005338 <_fstat_r>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	dbec      	blt.n	8005286 <__swhatbuf_r+0x12>
 80052ac:	9901      	ldr	r1, [sp, #4]
 80052ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052b6:	4259      	negs	r1, r3
 80052b8:	4159      	adcs	r1, r3
 80052ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052be:	e7eb      	b.n	8005298 <__swhatbuf_r+0x24>

080052c0 <__smakebuf_r>:
 80052c0:	898b      	ldrh	r3, [r1, #12]
 80052c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052c4:	079d      	lsls	r5, r3, #30
 80052c6:	4606      	mov	r6, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	d507      	bpl.n	80052dc <__smakebuf_r+0x1c>
 80052cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	6123      	str	r3, [r4, #16]
 80052d4:	2301      	movs	r3, #1
 80052d6:	6163      	str	r3, [r4, #20]
 80052d8:	b003      	add	sp, #12
 80052da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052dc:	ab01      	add	r3, sp, #4
 80052de:	466a      	mov	r2, sp
 80052e0:	f7ff ffc8 	bl	8005274 <__swhatbuf_r>
 80052e4:	9f00      	ldr	r7, [sp, #0]
 80052e6:	4605      	mov	r5, r0
 80052e8:	4639      	mov	r1, r7
 80052ea:	4630      	mov	r0, r6
 80052ec:	f7ff fb16 	bl	800491c <_malloc_r>
 80052f0:	b948      	cbnz	r0, 8005306 <__smakebuf_r+0x46>
 80052f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f6:	059a      	lsls	r2, r3, #22
 80052f8:	d4ee      	bmi.n	80052d8 <__smakebuf_r+0x18>
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	e7e2      	b.n	80052cc <__smakebuf_r+0xc>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	6020      	str	r0, [r4, #0]
 800530a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	9b01      	ldr	r3, [sp, #4]
 8005312:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005316:	b15b      	cbz	r3, 8005330 <__smakebuf_r+0x70>
 8005318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800531c:	4630      	mov	r0, r6
 800531e:	f000 f81d 	bl	800535c <_isatty_r>
 8005322:	b128      	cbz	r0, 8005330 <__smakebuf_r+0x70>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	431d      	orrs	r5, r3
 8005334:	81a5      	strh	r5, [r4, #12]
 8005336:	e7cf      	b.n	80052d8 <__smakebuf_r+0x18>

08005338 <_fstat_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4d07      	ldr	r5, [pc, #28]	@ (8005358 <_fstat_r+0x20>)
 800533c:	2300      	movs	r3, #0
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	4611      	mov	r1, r2
 8005344:	602b      	str	r3, [r5, #0]
 8005346:	f7fb fe5a 	bl	8000ffe <_fstat>
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	d102      	bne.n	8005354 <_fstat_r+0x1c>
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	b103      	cbz	r3, 8005354 <_fstat_r+0x1c>
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	bd38      	pop	{r3, r4, r5, pc}
 8005356:	bf00      	nop
 8005358:	20000350 	.word	0x20000350

0800535c <_isatty_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d06      	ldr	r5, [pc, #24]	@ (8005378 <_isatty_r+0x1c>)
 8005360:	2300      	movs	r3, #0
 8005362:	4604      	mov	r4, r0
 8005364:	4608      	mov	r0, r1
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	f7fb fe59 	bl	800101e <_isatty>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_isatty_r+0x1a>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_isatty_r+0x1a>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000350 	.word	0x20000350

0800537c <_init>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr

08005388 <_fini>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr
