
uartdma3wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007f90  08007f90  00008f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d0  080081d0  0000a088  2**0
                  CONTENTS
  4 .ARM          00000008  080081d0  080081d0  000091d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d8  080081d8  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d8  080081d8  000091d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081dc  080081dc  000091dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080081e0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000088  08008268  0000a088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08008268  0000a3f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6f5  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  000187ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab7  00000000  00000000  0001b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023227  00000000  00000000  0001c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001076b  00000000  00000000  0003f3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4744  00000000  00000000  0004fb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012427d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c0  00000000  00000000  001242c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00128880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f78 	.word	0x08007f78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08007f78 	.word	0x08007f78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HAL_UART_RxCpltCallback>:
int32_t lx, ly, rx, ry, cro, squ, tri, cir, up, down, left, right, ll1, rr1,
		ll2, rr2, rL, rR;
int deadzone = 50;
int l0 = 310;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	4904      	ldr	r1, [pc, #16]	@ (8000ee4 <HAL_UART_RxCpltCallback+0x1c>)
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <HAL_UART_RxCpltCallback+0x20>)
 8000ed6:	f003 fe86 	bl	8004be6 <HAL_UART_Receive_DMA>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000023c 	.word	0x2000023c
 8000ee8:	20000134 	.word	0x20000134

08000eec <constrain>:
int constrain(int value, int min_val, int max_val) {
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	if (value < min_val)
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	da01      	bge.n	8000f04 <constrain+0x18>
		return min_val;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	e006      	b.n	8000f12 <constrain+0x26>
	if (value > max_val)
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dd01      	ble.n	8000f10 <constrain+0x24>
		return max_val;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	e000      	b.n	8000f12 <constrain+0x26>
	return value;
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <compute3wheel>:
void compute3wheel() {
 8000f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f24:	b08a      	sub	sp, #40	@ 0x28
 8000f26:	af00      	add	r7, sp, #0
	// Calculate joystick-based velocities
	const double theta = -30 * pi / 180;
 8000f28:	a397      	add	r3, pc, #604	@ (adr r3, 8001188 <compute3wheel+0x268>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double lx_rotated = lx * cos(theta) - ly * sin(theta);
 8000f32:	4b8b      	ldr	r3, [pc, #556]	@ (8001160 <compute3wheel+0x240>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fb0c 	bl	8000554 <__aeabi_i2d>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	460d      	mov	r5, r1
 8000f40:	ed97 0b08 	vldr	d0, [r7, #32]
 8000f44:	f005 feb8 	bl	8006cb8 <cos>
 8000f48:	ec53 2b10 	vmov	r2, r3, d0
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	4629      	mov	r1, r5
 8000f50:	f7ff fb6a 	bl	8000628 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4690      	mov	r8, r2
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	4b81      	ldr	r3, [pc, #516]	@ (8001164 <compute3wheel+0x244>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff faf7 	bl	8000554 <__aeabi_i2d>
 8000f66:	4604      	mov	r4, r0
 8000f68:	460d      	mov	r5, r1
 8000f6a:	ed97 0b08 	vldr	d0, [r7, #32]
 8000f6e:	f005 fef7 	bl	8006d60 <sin>
 8000f72:	ec53 2b10 	vmov	r2, r3, d0
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f7ff fb55 	bl	8000628 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4640      	mov	r0, r8
 8000f84:	4649      	mov	r1, r9
 8000f86:	f7ff f997 	bl	80002b8 <__aeabi_dsub>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double ly_rotated = lx * sin(theta) + ly * cos(theta);
 8000f92:	4b73      	ldr	r3, [pc, #460]	@ (8001160 <compute3wheel+0x240>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fadc 	bl	8000554 <__aeabi_i2d>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	460d      	mov	r5, r1
 8000fa0:	ed97 0b08 	vldr	d0, [r7, #32]
 8000fa4:	f005 fedc 	bl	8006d60 <sin>
 8000fa8:	ec53 2b10 	vmov	r2, r3, d0
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	f7ff fb3a 	bl	8000628 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4690      	mov	r8, r2
 8000fba:	4699      	mov	r9, r3
 8000fbc:	4b69      	ldr	r3, [pc, #420]	@ (8001164 <compute3wheel+0x244>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fac7 	bl	8000554 <__aeabi_i2d>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	460d      	mov	r5, r1
 8000fca:	ed97 0b08 	vldr	d0, [r7, #32]
 8000fce:	f005 fe73 	bl	8006cb8 <cos>
 8000fd2:	ec53 2b10 	vmov	r2, r3, d0
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f7ff fb25 	bl	8000628 <__aeabi_dmul>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4640      	mov	r0, r8
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	f7ff f969 	bl	80002bc <__adddf3>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double vx = ly_rotated;
 8000ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double vy = lx_rotated;
 8000ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ffe:	e9c7 2300 	strd	r2, r3, [r7]
	w = rx;
 8001002:	4b59      	ldr	r3, [pc, #356]	@ (8001168 <compute3wheel+0x248>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a59      	ldr	r2, [pc, #356]	@ (800116c <compute3wheel+0x24c>)
 8001008:	6013      	str	r3, [r2, #0]
	target_wf = ((-0.5 * vx) + (sqrt(3) / 2) * vy + l0 * w);
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b58      	ldr	r3, [pc, #352]	@ (8001170 <compute3wheel+0x250>)
 8001010:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001014:	f7ff fb08 	bl	8000628 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4614      	mov	r4, r2
 800101e:	461d      	mov	r5, r3
 8001020:	a34d      	add	r3, pc, #308	@ (adr r3, 8001158 <compute3wheel+0x238>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	e9d7 0100 	ldrd	r0, r1, [r7]
 800102a:	f7ff fafd 	bl	8000628 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff f941 	bl	80002bc <__adddf3>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4614      	mov	r4, r2
 8001040:	461d      	mov	r5, r3
 8001042:	4b4c      	ldr	r3, [pc, #304]	@ (8001174 <compute3wheel+0x254>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a49      	ldr	r2, [pc, #292]	@ (800116c <compute3wheel+0x24c>)
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa80 	bl	8000554 <__aeabi_i2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4620      	mov	r0, r4
 800105a:	4629      	mov	r1, r5
 800105c:	f7ff f92e 	bl	80002bc <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fd8e 	bl	8000b88 <__aeabi_d2iz>
 800106c:	4603      	mov	r3, r0
 800106e:	4a42      	ldr	r2, [pc, #264]	@ (8001178 <compute3wheel+0x258>)
 8001070:	6013      	str	r3, [r2, #0]
	target_wrr = ((-0.5 * vx) - (sqrt(3) / 2) * vy + l0 * w);
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b3e      	ldr	r3, [pc, #248]	@ (8001170 <compute3wheel+0x250>)
 8001078:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800107c:	f7ff fad4 	bl	8000628 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4614      	mov	r4, r2
 8001086:	461d      	mov	r5, r3
 8001088:	a333      	add	r3, pc, #204	@ (adr r3, 8001158 <compute3wheel+0x238>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001092:	f7ff fac9 	bl	8000628 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4620      	mov	r0, r4
 800109c:	4629      	mov	r1, r5
 800109e:	f7ff f90b 	bl	80002b8 <__aeabi_dsub>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4614      	mov	r4, r2
 80010a8:	461d      	mov	r5, r3
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <compute3wheel+0x254>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a2f      	ldr	r2, [pc, #188]	@ (800116c <compute3wheel+0x24c>)
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4c 	bl	8000554 <__aeabi_i2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4620      	mov	r0, r4
 80010c2:	4629      	mov	r1, r5
 80010c4:	f7ff f8fa 	bl	80002bc <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd5a 	bl	8000b88 <__aeabi_d2iz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a29      	ldr	r2, [pc, #164]	@ (800117c <compute3wheel+0x25c>)
 80010d8:	6013      	str	r3, [r2, #0]
	target_wrl = (vx + l0 * w);
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <compute3wheel+0x254>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a23      	ldr	r2, [pc, #140]	@ (800116c <compute3wheel+0x24c>)
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	fb02 f303 	mul.w	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa34 	bl	8000554 <__aeabi_i2d>
 80010ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f0:	f7ff f8e4 	bl	80002bc <__adddf3>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fd44 	bl	8000b88 <__aeabi_d2iz>
 8001100:	4603      	mov	r3, r0
 8001102:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <compute3wheel+0x260>)
 8001104:	6013      	str	r3, [r2, #0]

	// Constrain target wheel speeds
	target_wf = constrain(target_wf, -800, 800);
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <compute3wheel+0x258>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800110e:	491d      	ldr	r1, [pc, #116]	@ (8001184 <compute3wheel+0x264>)
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff feeb 	bl	8000eec <constrain>
 8001116:	4603      	mov	r3, r0
 8001118:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <compute3wheel+0x258>)
 800111a:	6013      	str	r3, [r2, #0]
	target_wrr = constrain(target_wrr, -800, 800);
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <compute3wheel+0x25c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001124:	4917      	ldr	r1, [pc, #92]	@ (8001184 <compute3wheel+0x264>)
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fee0 	bl	8000eec <constrain>
 800112c:	4603      	mov	r3, r0
 800112e:	4a13      	ldr	r2, [pc, #76]	@ (800117c <compute3wheel+0x25c>)
 8001130:	6013      	str	r3, [r2, #0]
	target_wrl = constrain(target_wrl, -800, 800);
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <compute3wheel+0x260>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800113a:	4912      	ldr	r1, [pc, #72]	@ (8001184 <compute3wheel+0x264>)
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fed5 	bl	8000eec <constrain>
 8001142:	4603      	mov	r3, r0
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <compute3wheel+0x260>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001152:	bf00      	nop
 8001154:	f3af 8000 	nop.w
 8001158:	e8584caa 	.word	0xe8584caa
 800115c:	3febb67a 	.word	0x3febb67a
 8001160:	2000025c 	.word	0x2000025c
 8001164:	20000260 	.word	0x20000260
 8001168:	20000264 	.word	0x20000264
 800116c:	20000258 	.word	0x20000258
 8001170:	bfe00000 	.word	0xbfe00000
 8001174:	2000000c 	.word	0x2000000c
 8001178:	2000024c 	.word	0x2000024c
 800117c:	20000250 	.word	0x20000250
 8001180:	20000254 	.word	0x20000254
 8001184:	fffffce0 	.word	0xfffffce0
 8001188:	382b64d8 	.word	0x382b64d8
 800118c:	bfe0c152 	.word	0xbfe0c152

08001190 <Encoder_Init>:
}



void Encoder_Init(uint16_t ARR_Value)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	 uint32_t *pAPB1ClkCtrlReg =   (uint32_t*)0x40023840; // address of APB2 clock control register
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <Encoder_Init+0x90>)
 800119c:	61fb      	str	r3, [r7, #28]
	 uint32_t *pTimer2ArrReg   =   (uint32_t*)0x4000002C; // address of timer 2 auto reload register
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <Encoder_Init+0x94>)
 80011a0:	61bb      	str	r3, [r7, #24]
	 uint32_t *pTimer2CCMR1Reg =   (uint32_t*)0x40000018; // address of timer 2 capture/compare register
 80011a2:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <Encoder_Init+0x98>)
 80011a4:	617b      	str	r3, [r7, #20]
	 uint32_t *pTimer2CcerReg  =   (uint32_t*)0x40000020; // address of timer 2 capture/compare enable register
 80011a6:	4b21      	ldr	r3, [pc, #132]	@ (800122c <Encoder_Init+0x9c>)
 80011a8:	613b      	str	r3, [r7, #16]
     uint32_t *pTimer2SmcrReg  =   (uint32_t*)0x40000008; // address of timer 2 slave mode control register
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <Encoder_Init+0xa0>)
 80011ac:	60fb      	str	r3, [r7, #12]
     uint32_t *pTimer2CR1Reg   =   (uint32_t*)0x40000000; // address of timer 2 control register 1
 80011ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011b2:	60bb      	str	r3, [r7, #8]

    *pAPB1ClkCtrlReg |= 0x1;           //timer 2 clock enable
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	601a      	str	r2, [r3, #0]
    *pTimer2ArrReg   =  ARR_Value - 1; // maximum count value for counter
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	461a      	mov	r2, r3
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	601a      	str	r2, [r3, #0]
    *pTimer2CCMR1Reg |= 0x1;   // mapping 'Input capture 1' mode in timer 2 Channel 1 and configuring it as input
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
    *pTimer2CCMR1Reg |= 0x100; // mapping 'Input capture 2' mode in timer 2 Channel 2 and configuring it as input
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]
    *pTimer2CcerReg  |= 0x2;   // channel 1 triggered at rising edge
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f043 0202 	orr.w	r2, r3, #2
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]
    *pTimer2CcerReg  |= 0x20;  // channel 2 triggered at rising edge
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f043 0220 	orr.w	r2, r3, #32
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]
    *pTimer2SmcrReg  |= 0x3;   // counter counts up/down on both channel 1 and channel 2 edges depending on the level of the other input.
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f043 0203 	orr.w	r2, r3, #3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	601a      	str	r2, [r3, #0]
    *pTimer2CR1Reg   |= 0x1;   // counter enable
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	601a      	str	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023840 	.word	0x40023840
 8001224:	4000002c 	.word	0x4000002c
 8001228:	40000018 	.word	0x40000018
 800122c:	40000020 	.word	0x40000020
 8001230:	40000008 	.word	0x40000008

08001234 <Get_Encoder_Counts>:
uint16_t Get_Encoder_Counts()
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
	 uint32_t *pTimer2CNTReg   =   (uint32_t*)0x40000024; // address of timer 2 counter register
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <Get_Encoder_Counts+0x1c>)
 800123c:	607b      	str	r3, [r7, #4]
	 return *pTimer2CNTReg; // reading counts from counter register
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3

}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40000024 	.word	0x40000024

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125a:	f000 ffe9 	bl	8002230 <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 800125e:	2210      	movs	r2, #16
 8001260:	497b      	ldr	r1, [pc, #492]	@ (8001450 <main+0x1fc>)
 8001262:	487c      	ldr	r0, [pc, #496]	@ (8001454 <main+0x200>)
 8001264:	f003 fcbf 	bl	8004be6 <HAL_UART_Receive_DMA>
	Encoder_Init(65535);
 8001268:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800126c:	f7ff ff90 	bl	8001190 <Encoder_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 fae2 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 fcca 	bl	8001c0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001278:	f000 fca8 	bl	8001bcc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800127c:	f000 fc7c 	bl	8001b78 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001280:	f000 fc50 	bl	8001b24 <MX_UART4_Init>
  MX_TIM1_Init();
 8001284:	f000 fb46 	bl	8001914 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001288:	f000 fbfc 	bl	8001a84 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 800128c:	2210      	movs	r2, #16
 800128e:	4970      	ldr	r1, [pc, #448]	@ (8001450 <main+0x1fc>)
 8001290:	4870      	ldr	r0, [pc, #448]	@ (8001454 <main+0x200>)
 8001292:	f003 fca8 	bl	8004be6 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		lx = (rxbuff[0] & 0x80) ?
 8001296:	4b6e      	ldr	r3, [pc, #440]	@ (8001450 <main+0x1fc>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 800129c:	2b00      	cmp	r3, #0
 800129e:	da04      	bge.n	80012aa <main+0x56>
 80012a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001450 <main+0x1fc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012a8:	e001      	b.n	80012ae <main+0x5a>
 80012aa:	4b69      	ldr	r3, [pc, #420]	@ (8001450 <main+0x1fc>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 80012ae:	4a6a      	ldr	r2, [pc, #424]	@ (8001458 <main+0x204>)
 80012b0:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 80012b2:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <main+0x1fc>)
 80012b4:	785b      	ldrb	r3, [r3, #1]
 80012b6:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da04      	bge.n	80012c6 <main+0x72>
 80012bc:	4b64      	ldr	r3, [pc, #400]	@ (8001450 <main+0x1fc>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012c4:	e001      	b.n	80012ca <main+0x76>
 80012c6:	4b62      	ldr	r3, [pc, #392]	@ (8001450 <main+0x1fc>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 80012ca:	4a64      	ldr	r2, [pc, #400]	@ (800145c <main+0x208>)
 80012cc:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 80012ce:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <main+0x1fc>)
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da04      	bge.n	80012e2 <main+0x8e>
 80012d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <main+0x1fc>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012e0:	e001      	b.n	80012e6 <main+0x92>
 80012e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001450 <main+0x1fc>)
 80012e4:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 80012e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001460 <main+0x20c>)
 80012e8:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 80012ea:	4b59      	ldr	r3, [pc, #356]	@ (8001450 <main+0x1fc>)
 80012ec:	78db      	ldrb	r3, [r3, #3]
 80012ee:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da04      	bge.n	80012fe <main+0xaa>
 80012f4:	4b56      	ldr	r3, [pc, #344]	@ (8001450 <main+0x1fc>)
 80012f6:	78db      	ldrb	r3, [r3, #3]
 80012f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012fc:	e001      	b.n	8001302 <main+0xae>
 80012fe:	4b54      	ldr	r3, [pc, #336]	@ (8001450 <main+0x1fc>)
 8001300:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 8001302:	4a58      	ldr	r2, [pc, #352]	@ (8001464 <main+0x210>)
 8001304:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[4] & 0x80) ?
 8001306:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <main+0x1fc>)
 8001308:	791b      	ldrb	r3, [r3, #4]
 800130a:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 800130c:	2b00      	cmp	r3, #0
 800130e:	da04      	bge.n	800131a <main+0xc6>
 8001310:	4b4f      	ldr	r3, [pc, #316]	@ (8001450 <main+0x1fc>)
 8001312:	791b      	ldrb	r3, [r3, #4]
 8001314:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001318:	e001      	b.n	800131e <main+0xca>
 800131a:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <main+0x1fc>)
 800131c:	791b      	ldrb	r3, [r3, #4]
		cro = (rxbuff[4] & 0x80) ?
 800131e:	4a52      	ldr	r2, [pc, #328]	@ (8001468 <main+0x214>)
 8001320:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[5] & 0x80) ?
 8001322:	4b4b      	ldr	r3, [pc, #300]	@ (8001450 <main+0x1fc>)
 8001324:	795b      	ldrb	r3, [r3, #5]
 8001326:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001328:	2b00      	cmp	r3, #0
 800132a:	da04      	bge.n	8001336 <main+0xe2>
 800132c:	4b48      	ldr	r3, [pc, #288]	@ (8001450 <main+0x1fc>)
 800132e:	795b      	ldrb	r3, [r3, #5]
 8001330:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001334:	e001      	b.n	800133a <main+0xe6>
 8001336:	4b46      	ldr	r3, [pc, #280]	@ (8001450 <main+0x1fc>)
 8001338:	795b      	ldrb	r3, [r3, #5]
		squ = (rxbuff[5] & 0x80) ?
 800133a:	4a4c      	ldr	r2, [pc, #304]	@ (800146c <main+0x218>)
 800133c:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[6] & 0x80) ?
 800133e:	4b44      	ldr	r3, [pc, #272]	@ (8001450 <main+0x1fc>)
 8001340:	799b      	ldrb	r3, [r3, #6]
 8001342:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 8001344:	2b00      	cmp	r3, #0
 8001346:	da04      	bge.n	8001352 <main+0xfe>
 8001348:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <main+0x1fc>)
 800134a:	799b      	ldrb	r3, [r3, #6]
 800134c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001350:	e001      	b.n	8001356 <main+0x102>
 8001352:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <main+0x1fc>)
 8001354:	799b      	ldrb	r3, [r3, #6]
		tri = (rxbuff[6] & 0x80) ?
 8001356:	4a46      	ldr	r2, [pc, #280]	@ (8001470 <main+0x21c>)
 8001358:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[7] & 0x80) ?
 800135a:	4b3d      	ldr	r3, [pc, #244]	@ (8001450 <main+0x1fc>)
 800135c:	79db      	ldrb	r3, [r3, #7]
 800135e:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 8001360:	2b00      	cmp	r3, #0
 8001362:	da04      	bge.n	800136e <main+0x11a>
 8001364:	4b3a      	ldr	r3, [pc, #232]	@ (8001450 <main+0x1fc>)
 8001366:	79db      	ldrb	r3, [r3, #7]
 8001368:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800136c:	e001      	b.n	8001372 <main+0x11e>
 800136e:	4b38      	ldr	r3, [pc, #224]	@ (8001450 <main+0x1fc>)
 8001370:	79db      	ldrb	r3, [r3, #7]
		cir = (rxbuff[7] & 0x80) ?
 8001372:	4a40      	ldr	r2, [pc, #256]	@ (8001474 <main+0x220>)
 8001374:	6013      	str	r3, [r2, #0]
		up = (rxbuff[8] & 0x80) ?
 8001376:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <main+0x1fc>)
 8001378:	7a1b      	ldrb	r3, [r3, #8]
 800137a:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 800137c:	2b00      	cmp	r3, #0
 800137e:	da04      	bge.n	800138a <main+0x136>
 8001380:	4b33      	ldr	r3, [pc, #204]	@ (8001450 <main+0x1fc>)
 8001382:	7a1b      	ldrb	r3, [r3, #8]
 8001384:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001388:	e001      	b.n	800138e <main+0x13a>
 800138a:	4b31      	ldr	r3, [pc, #196]	@ (8001450 <main+0x1fc>)
 800138c:	7a1b      	ldrb	r3, [r3, #8]
		up = (rxbuff[8] & 0x80) ?
 800138e:	4a3a      	ldr	r2, [pc, #232]	@ (8001478 <main+0x224>)
 8001390:	6013      	str	r3, [r2, #0]
		down = (rxbuff[9] & 0x80) ?
 8001392:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <main+0x1fc>)
 8001394:	7a5b      	ldrb	r3, [r3, #9]
 8001396:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 8001398:	2b00      	cmp	r3, #0
 800139a:	da04      	bge.n	80013a6 <main+0x152>
 800139c:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <main+0x1fc>)
 800139e:	7a5b      	ldrb	r3, [r3, #9]
 80013a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013a4:	e001      	b.n	80013aa <main+0x156>
 80013a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001450 <main+0x1fc>)
 80013a8:	7a5b      	ldrb	r3, [r3, #9]
		down = (rxbuff[9] & 0x80) ?
 80013aa:	4a34      	ldr	r2, [pc, #208]	@ (800147c <main+0x228>)
 80013ac:	6013      	str	r3, [r2, #0]
		left = (rxbuff[10] & 0x80) ?
 80013ae:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <main+0x1fc>)
 80013b0:	7a9b      	ldrb	r3, [r3, #10]
 80013b2:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da04      	bge.n	80013c2 <main+0x16e>
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <main+0x1fc>)
 80013ba:	7a9b      	ldrb	r3, [r3, #10]
 80013bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013c0:	e001      	b.n	80013c6 <main+0x172>
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <main+0x1fc>)
 80013c4:	7a9b      	ldrb	r3, [r3, #10]
		left = (rxbuff[10] & 0x80) ?
 80013c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001480 <main+0x22c>)
 80013c8:	6013      	str	r3, [r2, #0]
		right = (rxbuff[11] & 0x80) ?
 80013ca:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <main+0x1fc>)
 80013cc:	7adb      	ldrb	r3, [r3, #11]
 80013ce:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da04      	bge.n	80013de <main+0x18a>
 80013d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <main+0x1fc>)
 80013d6:	7adb      	ldrb	r3, [r3, #11]
 80013d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013dc:	e001      	b.n	80013e2 <main+0x18e>
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <main+0x1fc>)
 80013e0:	7adb      	ldrb	r3, [r3, #11]
		right = (rxbuff[11] & 0x80) ?
 80013e2:	4a28      	ldr	r2, [pc, #160]	@ (8001484 <main+0x230>)
 80013e4:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[12] & 0x80) ?
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <main+0x1fc>)
 80013e8:	7b1b      	ldrb	r3, [r3, #12]
 80013ea:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da04      	bge.n	80013fa <main+0x1a6>
 80013f0:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <main+0x1fc>)
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013f8:	e001      	b.n	80013fe <main+0x1aa>
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <main+0x1fc>)
 80013fc:	7b1b      	ldrb	r3, [r3, #12]
		ll1 = (rxbuff[12] & 0x80) ?
 80013fe:	4a22      	ldr	r2, [pc, #136]	@ (8001488 <main+0x234>)
 8001400:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[13] & 0x80) ?
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <main+0x1fc>)
 8001404:	7b5b      	ldrb	r3, [r3, #13]
 8001406:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001408:	2b00      	cmp	r3, #0
 800140a:	da04      	bge.n	8001416 <main+0x1c2>
 800140c:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <main+0x1fc>)
 800140e:	7b5b      	ldrb	r3, [r3, #13]
 8001410:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001414:	e001      	b.n	800141a <main+0x1c6>
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <main+0x1fc>)
 8001418:	7b5b      	ldrb	r3, [r3, #13]
		ll2 = (rxbuff[13] & 0x80) ?
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <main+0x238>)
 800141c:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[14] & 0x80) ?
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <main+0x1fc>)
 8001420:	7b9b      	ldrb	r3, [r3, #14]
 8001422:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8001424:	2b00      	cmp	r3, #0
 8001426:	da04      	bge.n	8001432 <main+0x1de>
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <main+0x1fc>)
 800142a:	7b9b      	ldrb	r3, [r3, #14]
 800142c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001430:	e001      	b.n	8001436 <main+0x1e2>
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <main+0x1fc>)
 8001434:	7b9b      	ldrb	r3, [r3, #14]
		rr1 = (rxbuff[14] & 0x80) ?
 8001436:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <main+0x23c>)
 8001438:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[15] & 0x80) ?
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <main+0x1fc>)
 800143c:	7bdb      	ldrb	r3, [r3, #15]
 800143e:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 8001440:	2b00      	cmp	r3, #0
 8001442:	da27      	bge.n	8001494 <main+0x240>
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <main+0x1fc>)
 8001446:	7bdb      	ldrb	r3, [r3, #15]
 8001448:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800144c:	e024      	b.n	8001498 <main+0x244>
 800144e:	bf00      	nop
 8001450:	2000023c 	.word	0x2000023c
 8001454:	20000134 	.word	0x20000134
 8001458:	2000025c 	.word	0x2000025c
 800145c:	20000260 	.word	0x20000260
 8001460:	20000264 	.word	0x20000264
 8001464:	20000268 	.word	0x20000268
 8001468:	2000026c 	.word	0x2000026c
 800146c:	20000270 	.word	0x20000270
 8001470:	20000274 	.word	0x20000274
 8001474:	20000278 	.word	0x20000278
 8001478:	2000027c 	.word	0x2000027c
 800147c:	20000280 	.word	0x20000280
 8001480:	20000284 	.word	0x20000284
 8001484:	20000288 	.word	0x20000288
 8001488:	2000028c 	.word	0x2000028c
 800148c:	20000294 	.word	0x20000294
 8001490:	20000290 	.word	0x20000290
 8001494:	4b8a      	ldr	r3, [pc, #552]	@ (80016c0 <main+0x46c>)
 8001496:	7bdb      	ldrb	r3, [r3, #15]
		rr2 = (rxbuff[15] & 0x80) ?
 8001498:	4a8a      	ldr	r2, [pc, #552]	@ (80016c4 <main+0x470>)
 800149a:	6013      	str	r3, [r2, #0]
//			  		  	  	 	 	   right=(rxbuff[12] & 0x80) ? (int32_t)rxbuff[12] - 256 : (int32_t)rxbuff[12];
//			  		  	  	 	 	   ll1= (rxbuff[13] & 0x80) ? (int32_t)rxbuff[13] - 256 : (int32_t)rxbuff[13];
//			  		  	  	 	 	   ll2= (rxbuff[14] & 0x80) ? (int32_t)rxbuff[14] - 256 : (int32_t)rxbuff[14];
//			  		  	  	 	 	   rr1= (rxbuff[15] & 0x80) ? (int32_t)rxbuff[15] - 256 : (int32_t)rxbuff[15];
//			  		  	  	 	 	   rr2= (rxbuff[16] & 0x80) ? (int32_t)rxbuff[16] - 256 : (int32_t)rxbuff[16];
		if (abs(lx) < deadzone)
 800149c:	4b8a      	ldr	r3, [pc, #552]	@ (80016c8 <main+0x474>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014a8:	4b88      	ldr	r3, [pc, #544]	@ (80016cc <main+0x478>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	da02      	bge.n	80014b6 <main+0x262>
			lx = 0;
 80014b0:	4b85      	ldr	r3, [pc, #532]	@ (80016c8 <main+0x474>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
		if (abs(ly) < deadzone)
 80014b6:	4b86      	ldr	r3, [pc, #536]	@ (80016d0 <main+0x47c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014be:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014c2:	4b82      	ldr	r3, [pc, #520]	@ (80016cc <main+0x478>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	da02      	bge.n	80014d0 <main+0x27c>
			ly = 0;
 80014ca:	4b81      	ldr	r3, [pc, #516]	@ (80016d0 <main+0x47c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
		if (abs(rx) < deadzone)
 80014d0:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <main+0x480>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014dc:	4b7b      	ldr	r3, [pc, #492]	@ (80016cc <main+0x478>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	da03      	bge.n	80014ec <main+0x298>
			rx = 0;
 80014e4:	4b7b      	ldr	r3, [pc, #492]	@ (80016d4 <main+0x480>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e010      	b.n	800150e <main+0x2ba>
		else
			rx = (rx > 0) ? rx - deadzone : rx + deadzone;
 80014ec:	4b79      	ldr	r3, [pc, #484]	@ (80016d4 <main+0x480>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	dd05      	ble.n	8001500 <main+0x2ac>
 80014f4:	4b77      	ldr	r3, [pc, #476]	@ (80016d4 <main+0x480>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b74      	ldr	r3, [pc, #464]	@ (80016cc <main+0x478>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	e004      	b.n	800150a <main+0x2b6>
 8001500:	4b74      	ldr	r3, [pc, #464]	@ (80016d4 <main+0x480>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b71      	ldr	r3, [pc, #452]	@ (80016cc <main+0x478>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4413      	add	r3, r2
 800150a:	4a72      	ldr	r2, [pc, #456]	@ (80016d4 <main+0x480>)
 800150c:	6013      	str	r3, [r2, #0]
		if (abs(ry) < deadzone)
 800150e:	4b72      	ldr	r3, [pc, #456]	@ (80016d8 <main+0x484>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001516:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800151a:	4b6c      	ldr	r3, [pc, #432]	@ (80016cc <main+0x478>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	da02      	bge.n	8001528 <main+0x2d4>
			ry = 0;
 8001522:	4b6d      	ldr	r3, [pc, #436]	@ (80016d8 <main+0x484>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
		lx = (lx * 950) / 127;  // Assuming joystick range is -127 to +127
 8001528:	4b67      	ldr	r3, [pc, #412]	@ (80016c8 <main+0x474>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	4a69      	ldr	r2, [pc, #420]	@ (80016dc <main+0x488>)
 8001536:	fb82 1203 	smull	r1, r2, r2, r3
 800153a:	441a      	add	r2, r3
 800153c:	1192      	asrs	r2, r2, #6
 800153e:	17db      	asrs	r3, r3, #31
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4a61      	ldr	r2, [pc, #388]	@ (80016c8 <main+0x474>)
 8001544:	6013      	str	r3, [r2, #0]
		ly = (ly * 950) / 127;
 8001546:	4b62      	ldr	r3, [pc, #392]	@ (80016d0 <main+0x47c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	4a62      	ldr	r2, [pc, #392]	@ (80016dc <main+0x488>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	441a      	add	r2, r3
 800155a:	1192      	asrs	r2, r2, #6
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4a5b      	ldr	r2, [pc, #364]	@ (80016d0 <main+0x47c>)
 8001562:	6013      	str	r3, [r2, #0]
		rx = (rx * 950) / 127;
 8001564:	4b5b      	ldr	r3, [pc, #364]	@ (80016d4 <main+0x480>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	4a5a      	ldr	r2, [pc, #360]	@ (80016dc <main+0x488>)
 8001572:	fb82 1203 	smull	r1, r2, r2, r3
 8001576:	441a      	add	r2, r3
 8001578:	1192      	asrs	r2, r2, #6
 800157a:	17db      	asrs	r3, r3, #31
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	4a55      	ldr	r2, [pc, #340]	@ (80016d4 <main+0x480>)
 8001580:	6013      	str	r3, [r2, #0]
		rL = sqrt(lx * lx + ly * ly);
 8001582:	4b51      	ldr	r3, [pc, #324]	@ (80016c8 <main+0x474>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a50      	ldr	r2, [pc, #320]	@ (80016c8 <main+0x474>)
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	fb03 f202 	mul.w	r2, r3, r2
 800158e:	4b50      	ldr	r3, [pc, #320]	@ (80016d0 <main+0x47c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	494f      	ldr	r1, [pc, #316]	@ (80016d0 <main+0x47c>)
 8001594:	6809      	ldr	r1, [r1, #0]
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	4413      	add	r3, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffd9 	bl	8000554 <__aeabi_i2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	ec43 2b10 	vmov	d0, r2, r3
 80015aa:	f005 fb59 	bl	8006c60 <sqrt>
 80015ae:	ec53 2b10 	vmov	r2, r3, d0
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fae7 	bl	8000b88 <__aeabi_d2iz>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a48      	ldr	r2, [pc, #288]	@ (80016e0 <main+0x48c>)
 80015be:	6013      	str	r3, [r2, #0]
		rR = sqrt(rx * rx + ry * ry);
 80015c0:	4b44      	ldr	r3, [pc, #272]	@ (80016d4 <main+0x480>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a43      	ldr	r2, [pc, #268]	@ (80016d4 <main+0x480>)
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	fb03 f202 	mul.w	r2, r3, r2
 80015cc:	4b42      	ldr	r3, [pc, #264]	@ (80016d8 <main+0x484>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4941      	ldr	r1, [pc, #260]	@ (80016d8 <main+0x484>)
 80015d2:	6809      	ldr	r1, [r1, #0]
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffba 	bl	8000554 <__aeabi_i2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	ec43 2b10 	vmov	d0, r2, r3
 80015e8:	f005 fb3a 	bl	8006c60 <sqrt>
 80015ec:	ec53 2b10 	vmov	r2, r3, d0
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fac8 	bl	8000b88 <__aeabi_d2iz>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a3a      	ldr	r2, [pc, #232]	@ (80016e4 <main+0x490>)
 80015fc:	6013      	str	r3, [r2, #0]
		//		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\r\n",
		//				lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1);
		//		  printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly, rx, ry, cro, squ, tri, cir);
		uint16_t counter = Get_Encoder_Counts();
 80015fe:	f7ff fe19 	bl	8001234 <Get_Encoder_Counts>
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
		printf("Encoder 1 : %u\r\n",counter);
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	4619      	mov	r1, r3
 800160a:	4837      	ldr	r0, [pc, #220]	@ (80016e8 <main+0x494>)
 800160c:	f004 fcba 	bl	8005f84 <iprintf>
		compute3wheel();
 8001610:	f7ff fc86 	bl	8000f20 <compute3wheel>
		if (target_wf >= 0) {
 8001614:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <main+0x498>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0d      	blt.n	8001638 <main+0x3e4>
			TIM1->CCR1 = target_wf;
 800161c:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <main+0x498>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b33      	ldr	r3, [pc, #204]	@ (80016f0 <main+0x49c>)
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001624:	2100      	movs	r1, #0
 8001626:	4833      	ldr	r0, [pc, #204]	@ (80016f4 <main+0x4a0>)
 8001628:	f002 fbc6 	bl	8003db8 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	4831      	ldr	r0, [pc, #196]	@ (80016f8 <main+0x4a4>)
 8001632:	f001 fd17 	bl	8003064 <HAL_GPIO_WritePin>
 8001636:	e00d      	b.n	8001654 <main+0x400>
		} else {
			TIM1->CCR1 = -target_wf;
 8001638:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <main+0x498>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	425a      	negs	r2, r3
 800163e:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <main+0x49c>)
 8001640:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001642:	2100      	movs	r1, #0
 8001644:	482b      	ldr	r0, [pc, #172]	@ (80016f4 <main+0x4a0>)
 8001646:	f002 fbb7 	bl	8003db8 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800164a:	2201      	movs	r2, #1
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	482a      	ldr	r0, [pc, #168]	@ (80016f8 <main+0x4a4>)
 8001650:	f001 fd08 	bl	8003064 <HAL_GPIO_WritePin>
		}
		if (target_wrr >= 0) {
 8001654:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <main+0x4a8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0e      	blt.n	800167a <main+0x426>
			TIM1->CCR2 = target_wrr;
 800165c:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <main+0x4a8>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <main+0x49c>)
 8001662:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001664:	2104      	movs	r1, #4
 8001666:	4823      	ldr	r0, [pc, #140]	@ (80016f4 <main+0x4a0>)
 8001668:	f002 fba6 	bl	8003db8 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001672:	4821      	ldr	r0, [pc, #132]	@ (80016f8 <main+0x4a4>)
 8001674:	f001 fcf6 	bl	8003064 <HAL_GPIO_WritePin>
 8001678:	e00e      	b.n	8001698 <main+0x444>
		} else {
			TIM1->CCR2 = -target_wrr;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <main+0x4a8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	425a      	negs	r2, r3
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <main+0x49c>)
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001684:	2104      	movs	r1, #4
 8001686:	481b      	ldr	r0, [pc, #108]	@ (80016f4 <main+0x4a0>)
 8001688:	f002 fb96 	bl	8003db8 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001692:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <main+0x4a4>)
 8001694:	f001 fce6 	bl	8003064 <HAL_GPIO_WritePin>
		}
		if (target_wrl >= 0) {
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <main+0x4ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db31      	blt.n	8001704 <main+0x4b0>
			TIM1->CCR3 = target_wrl;
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <main+0x4ac>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <main+0x49c>)
 80016a6:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016a8:	2108      	movs	r1, #8
 80016aa:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <main+0x4a0>)
 80016ac:	f002 fb84 	bl	8003db8 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b6:	4810      	ldr	r0, [pc, #64]	@ (80016f8 <main+0x4a4>)
 80016b8:	f001 fcd4 	bl	8003064 <HAL_GPIO_WritePin>
 80016bc:	e031      	b.n	8001722 <main+0x4ce>
 80016be:	bf00      	nop
 80016c0:	2000023c 	.word	0x2000023c
 80016c4:	20000298 	.word	0x20000298
 80016c8:	2000025c 	.word	0x2000025c
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000260 	.word	0x20000260
 80016d4:	20000264 	.word	0x20000264
 80016d8:	20000268 	.word	0x20000268
 80016dc:	81020409 	.word	0x81020409
 80016e0:	2000029c 	.word	0x2000029c
 80016e4:	200002a0 	.word	0x200002a0
 80016e8:	08007f90 	.word	0x08007f90
 80016ec:	2000024c 	.word	0x2000024c
 80016f0:	40010000 	.word	0x40010000
 80016f4:	200000a4 	.word	0x200000a4
 80016f8:	40020800 	.word	0x40020800
 80016fc:	20000250 	.word	0x20000250
 8001700:	20000254 	.word	0x20000254
		} else {
			TIM1->CCR3 = -target_wrl;
 8001704:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <main+0x5a4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	425a      	negs	r2, r3
 800170a:	4b3c      	ldr	r3, [pc, #240]	@ (80017fc <main+0x5a8>)
 800170c:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800170e:	2108      	movs	r1, #8
 8001710:	483b      	ldr	r0, [pc, #236]	@ (8001800 <main+0x5ac>)
 8001712:	f002 fb51 	bl	8003db8 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800171c:	4839      	ldr	r0, [pc, #228]	@ (8001804 <main+0x5b0>)
 800171e:	f001 fca1 	bl	8003064 <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,
 8001722:	4b39      	ldr	r3, [pc, #228]	@ (8001808 <main+0x5b4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001736:	4835      	ldr	r0, [pc, #212]	@ (800180c <main+0x5b8>)
 8001738:	f001 fc94 	bl	8003064 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 800173c:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <main+0x5bc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d109      	bne.n	8001758 <main+0x504>
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <main+0x5c0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <main+0x504>
			direction1 = 1;  // Set to Anti-clockwise
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <main+0x5b4>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8001752:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <main+0x5c4>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8001758:	4b30      	ldr	r3, [pc, #192]	@ (800181c <main+0x5c8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d109      	bne.n	8001774 <main+0x520>
 8001760:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <main+0x5cc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <main+0x520>
			direction1 = 0;  // Set to Clockwise
 8001768:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <main+0x5b4>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <main+0x5c4>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
		}
		if (cir == 1 && !prev_squ) {
 8001774:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <main+0x5d0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d106      	bne.n	800178a <main+0x536>
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <main+0x5d4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <main+0x536>
			stepper_running1 = 0;
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <main+0x5c4>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		}
		prev_ll1 = ll1;
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <main+0x5bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a21      	ldr	r2, [pc, #132]	@ (8001814 <main+0x5c0>)
 8001790:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 8001792:	4b22      	ldr	r3, [pc, #136]	@ (800181c <main+0x5c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a22      	ldr	r2, [pc, #136]	@ (8001820 <main+0x5cc>)
 8001798:	6013      	str	r3, [r2, #0]
		prev_squ = cir;
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <main+0x5d0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <main+0x5d4>)
 80017a0:	6013      	str	r3, [r2, #0]
		if (stepper_running1 && (HAL_GetTick() - last_step_time1) >= step_delay1) {
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <main+0x5c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f43f ad75 	beq.w	8001296 <main+0x42>
 80017ac:	f000 fda6 	bl	80022fc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <main+0x5d8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <main+0x5dc>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	4293      	cmp	r3, r2
 80017be:	f4ff ad6a 	bcc.w	8001296 <main+0x42>
			last_step_time1 = HAL_GetTick(); // Update last step time
 80017c2:	f000 fd9b 	bl	80022fc <HAL_GetTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a18      	ldr	r2, [pc, #96]	@ (800182c <main+0x5d8>)
 80017ca:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <main+0x5e0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d108      	bne.n	80017e6 <main+0x592>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // Step HIGH
 80017d4:	2201      	movs	r2, #1
 80017d6:	2140      	movs	r1, #64	@ 0x40
 80017d8:	480a      	ldr	r0, [pc, #40]	@ (8001804 <main+0x5b0>)
 80017da:	f001 fc43 	bl	8003064 <HAL_GPIO_WritePin>
				step_state1 = 1;
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <main+0x5e0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e557      	b.n	8001296 <main+0x42>
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // Step LOW
 80017e6:	2200      	movs	r2, #0
 80017e8:	2140      	movs	r1, #64	@ 0x40
 80017ea:	4806      	ldr	r0, [pc, #24]	@ (8001804 <main+0x5b0>)
 80017ec:	f001 fc3a 	bl	8003064 <HAL_GPIO_WritePin>
				step_state1 = 0;
 80017f0:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <main+0x5e0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
	while (1) {
 80017f6:	e54e      	b.n	8001296 <main+0x42>
 80017f8:	20000254 	.word	0x20000254
 80017fc:	40010000 	.word	0x40010000
 8001800:	200000a4 	.word	0x200000a4
 8001804:	40020800 	.word	0x40020800
 8001808:	20000000 	.word	0x20000000
 800180c:	40020400 	.word	0x40020400
 8001810:	2000028c 	.word	0x2000028c
 8001814:	20000234 	.word	0x20000234
 8001818:	2000022c 	.word	0x2000022c
 800181c:	20000290 	.word	0x20000290
 8001820:	20000238 	.word	0x20000238
 8001824:	20000278 	.word	0x20000278
 8001828:	20000230 	.word	0x20000230
 800182c:	20000224 	.word	0x20000224
 8001830:	20000004 	.word	0x20000004
 8001834:	20000228 	.word	0x20000228

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	@ 0x50
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	2234      	movs	r2, #52	@ 0x34
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f004 fbf1 	bl	800602e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	4b2a      	ldr	r3, [pc, #168]	@ (800190c <SystemClock_Config+0xd4>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	4a29      	ldr	r2, [pc, #164]	@ (800190c <SystemClock_Config+0xd4>)
 8001866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186a:	6413      	str	r3, [r2, #64]	@ 0x40
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <SystemClock_Config+0xd4>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <SystemClock_Config+0xd8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001884:	4a22      	ldr	r2, [pc, #136]	@ (8001910 <SystemClock_Config+0xd8>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <SystemClock_Config+0xd8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001898:	2302      	movs	r3, #2
 800189a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a0:	2310      	movs	r3, #16
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a4:	2302      	movs	r3, #2
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018ac:	2310      	movs	r3, #16
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018be:	2302      	movs	r3, #2
 80018c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 ff30 	bl	800372c <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018d2:	f000 fa4b 	bl	8001d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2302      	movs	r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fbd0 	bl	8003098 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80018fe:	f000 fa35 	bl	8001d6c <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	@ 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b096      	sub	sp, #88	@ 0x58
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2220      	movs	r2, #32
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f004 fb6e 	bl	800602e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001952:	4b4a      	ldr	r3, [pc, #296]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001954:	4a4a      	ldr	r2, [pc, #296]	@ (8001a80 <MX_TIM1_Init+0x16c>)
 8001956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001958:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <MX_TIM1_Init+0x168>)
 800195a:	22b3      	movs	r2, #179	@ 0xb3
 800195c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001964:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001966:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800196a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <MX_TIM1_Init+0x168>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001972:	4b42      	ldr	r3, [pc, #264]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b40      	ldr	r3, [pc, #256]	@ (8001a7c <MX_TIM1_Init+0x168>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800197e:	483f      	ldr	r0, [pc, #252]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001980:	f002 f972 	bl	8003c68 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800198a:	f000 f9ef 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001994:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001998:	4619      	mov	r1, r3
 800199a:	4838      	ldr	r0, [pc, #224]	@ (8001a7c <MX_TIM1_Init+0x168>)
 800199c:	f002 fb96 	bl	80040cc <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019a6:	f000 f9e1 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019aa:	4834      	ldr	r0, [pc, #208]	@ (8001a7c <MX_TIM1_Init+0x168>)
 80019ac:	f002 f9ab 	bl	8003d06 <HAL_TIM_PWM_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019b6:	f000 f9d9 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019c6:	4619      	mov	r1, r3
 80019c8:	482c      	ldr	r0, [pc, #176]	@ (8001a7c <MX_TIM1_Init+0x168>)
 80019ca:	f002 ff63 	bl	8004894 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019d4:	f000 f9ca 	bl	8001d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d8:	2360      	movs	r3, #96	@ 0x60
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	481f      	ldr	r0, [pc, #124]	@ (8001a7c <MX_TIM1_Init+0x168>)
 80019fe:	f002 faa3 	bl	8003f48 <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001a08:	f000 f9b0 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a10:	2204      	movs	r2, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4819      	ldr	r0, [pc, #100]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001a16:	f002 fa97 	bl	8003f48 <HAL_TIM_PWM_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001a20:	f000 f9a4 	bl	8001d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4813      	ldr	r0, [pc, #76]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001a2e:	f002 fa8b 	bl	8003f48 <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a38:	f000 f998 	bl	8001d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001a60:	f002 ff94 	bl	800498c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a6a:	f000 f97f 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a6e:	4803      	ldr	r0, [pc, #12]	@ (8001a7c <MX_TIM1_Init+0x168>)
 8001a70:	f000 f9e2 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8001a74:	bf00      	nop
 8001a76:	3758      	adds	r7, #88	@ 0x58
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200000a4 	.word	0x200000a4
 8001a80:	40010000 	.word	0x40010000

08001a84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b20 <MX_TIM8_Init+0x9c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001aa8:	22b3      	movs	r2, #179	@ 0xb3
 8001aaa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001ab4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ab8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001acc:	4813      	ldr	r0, [pc, #76]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001ace:	f002 f8cb 	bl	8003c68 <HAL_TIM_Base_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001ad8:	f000 f948 	bl	8001d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001aea:	f002 faef 	bl	80040cc <HAL_TIM_ConfigClockSource>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001af4:	f000 f93a 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <MX_TIM8_Init+0x98>)
 8001b06:	f002 fec5 	bl	8004894 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001b10:	f000 f92c 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200000ec 	.word	0x200000ec
 8001b20:	40010400 	.word	0x40010400

08001b24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <MX_UART4_Init+0x50>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_UART4_Init+0x4c>)
 8001b5c:	f002 ff68 	bl	8004a30 <HAL_UART_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b66:	f000 f901 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000134 	.word	0x20000134
 8001b74:	40004c00 	.word	0x40004c00

08001b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <MX_USART2_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f002 ff3e 	bl	8004a30 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f000 f8d7 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000017c 	.word	0x2000017c
 8001bc8:	40004400 	.word	0x40004400

08001bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <MX_DMA_Init+0x3c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a0b      	ldr	r2, [pc, #44]	@ (8001c08 <MX_DMA_Init+0x3c>)
 8001bdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <MX_DMA_Init+0x3c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200d      	movs	r0, #13
 8001bf4:	f000 fc69 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bf8:	200d      	movs	r0, #13
 8001bfa:	f000 fc82 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b42      	ldr	r3, [pc, #264]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a41      	ldr	r2, [pc, #260]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a3a      	ldr	r2, [pc, #232]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4a33      	ldr	r2, [pc, #204]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <MX_GPIO_Init+0x124>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2120      	movs	r1, #32
 8001c96:	4827      	ldr	r0, [pc, #156]	@ (8001d34 <MX_GPIO_Init+0x128>)
 8001c98:	f001 f9e4 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(stepper_direction_GPIO_Port, stepper_direction_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ca2:	4825      	ldr	r0, [pc, #148]	@ (8001d38 <MX_GPIO_Init+0x12c>)
 8001ca4:	f001 f9de 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, stepper_speed_Pin|motor1_Pin|motor2_Pin|motor3_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001cae:	4823      	ldr	r0, [pc, #140]	@ (8001d3c <MX_GPIO_Init+0x130>)
 8001cb0:	f001 f9d8 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481c      	ldr	r0, [pc, #112]	@ (8001d3c <MX_GPIO_Init+0x130>)
 8001ccc:	f001 f836 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4813      	ldr	r0, [pc, #76]	@ (8001d34 <MX_GPIO_Init+0x128>)
 8001ce8:	f001 f828 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : stepper_direction_Pin */
  GPIO_InitStruct.Pin = stepper_direction_Pin;
 8001cec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(stepper_direction_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <MX_GPIO_Init+0x12c>)
 8001d06:	f001 f819 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : stepper_speed_Pin motor1_Pin motor2_Pin motor3_Pin */
  GPIO_InitStruct.Pin = stepper_speed_Pin|motor1_Pin|motor2_Pin|motor3_Pin;
 8001d0a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	@ (8001d3c <MX_GPIO_Init+0x130>)
 8001d24:	f001 f80a 	bl	8002d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	@ 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800

08001d40 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	4804      	ldr	r0, [pc, #16]	@ (8001d68 <_write+0x28>)
 8001d58:	f002 feba 	bl	8004ad0 <HAL_UART_Transmit>
	return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000017c 	.word	0x2000017c

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <Error_Handler+0x8>

08001d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001db6:	2007      	movs	r0, #7
 8001db8:	f000 fb7c 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a15      	ldr	r2, [pc, #84]	@ (8001e2c <HAL_TIM_Base_MspInit+0x64>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10e      	bne.n	8001df8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <HAL_TIM_Base_MspInit+0x68>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4a13      	ldr	r2, [pc, #76]	@ (8001e30 <HAL_TIM_Base_MspInit+0x68>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_TIM_Base_MspInit+0x68>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001df6:	e012      	b.n	8001e1e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e34 <HAL_TIM_Base_MspInit+0x6c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10d      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_TIM_Base_MspInit+0x68>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <HAL_TIM_Base_MspInit+0x68>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <HAL_TIM_Base_MspInit+0x68>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11e      	bne.n	8001e98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a10      	ldr	r2, [pc, #64]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e76:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <HAL_TIM_MspPostInit+0x70>)
 8001e94:	f000 ff52 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	@ 0x30
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a4e      	ldr	r2, [pc, #312]	@ (8002004 <HAL_UART_MspInit+0x158>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d164      	bne.n	8001f98 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	4a4c      	ldr	r2, [pc, #304]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001ed8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ede:	4b4a      	ldr	r3, [pc, #296]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	4b46      	ldr	r3, [pc, #280]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a45      	ldr	r2, [pc, #276]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b43      	ldr	r3, [pc, #268]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	483a      	ldr	r0, [pc, #232]	@ (800200c <HAL_UART_MspInit+0x160>)
 8001f24:	f000 ff0a 	bl	8002d3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001f28:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <HAL_UART_MspInit+0x168>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001f2e:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f36:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b33      	ldr	r3, [pc, #204]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4a:	4b31      	ldr	r3, [pc, #196]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f50:	4b2f      	ldr	r3, [pc, #188]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001f56:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f64:	4b2a      	ldr	r3, [pc, #168]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f6a:	4829      	ldr	r0, [pc, #164]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f6c:	f000 fae4 	bl	8002538 <HAL_DMA_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001f76:	f7ff fef9 	bl	8001d6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f80:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_UART_MspInit+0x164>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2034      	movs	r0, #52	@ 0x34
 8001f8c:	f000 fa9d 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f90:	2034      	movs	r0, #52	@ 0x34
 8001f92:	f000 fab6 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f96:	e030      	b.n	8001ffa <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002018 <HAL_UART_MspInit+0x16c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12b      	bne.n	8001ffa <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_UART_MspInit+0x15c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fda:	230c      	movs	r3, #12
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fea:	2307      	movs	r3, #7
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4809      	ldr	r0, [pc, #36]	@ (800201c <HAL_UART_MspInit+0x170>)
 8001ff6:	f000 fea1 	bl	8002d3c <HAL_GPIO_Init>
}
 8001ffa:	bf00      	nop
 8001ffc:	3730      	adds	r7, #48	@ 0x30
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40004c00 	.word	0x40004c00
 8002008:	40023800 	.word	0x40023800
 800200c:	40020800 	.word	0x40020800
 8002010:	200001c4 	.word	0x200001c4
 8002014:	40026040 	.word	0x40026040
 8002018:	40004400 	.word	0x40004400
 800201c:	40020000 	.word	0x40020000

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <NMI_Handler+0x4>

08002028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <MemManage_Handler+0x4>

08002038 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <UsageFault_Handler+0x4>

08002048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002076:	f000 f92d 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <DMA1_Stream2_IRQHandler+0x10>)
 8002086:	f000 fbef 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200001c4 	.word	0x200001c4

08002094 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <UART4_IRQHandler+0x10>)
 800209a:	f002 fdc9 	bl	8004c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000134 	.word	0x20000134

080020a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e00a      	b.n	80020d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ba:	f3af 8000 	nop.w
 80020be:	4601      	mov	r1, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	b2ca      	uxtb	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf0      	blt.n	80020ba <_read+0x12>
  }

  return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800210a:	605a      	str	r2, [r3, #4]
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_isatty>:

int _isatty(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f003 ffa6 	bl	80060cc <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20020000 	.word	0x20020000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	200002a4 	.word	0x200002a4
 80021b4:	200003f8 	.word	0x200003f8

080021b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002214 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021e0:	f7ff ffea 	bl	80021b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e4:	480c      	ldr	r0, [pc, #48]	@ (8002218 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021e6:	490d      	ldr	r1, [pc, #52]	@ (800221c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002228 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800220a:	f003 ff65 	bl	80060d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220e:	f7ff f821 	bl	8001254 <main>
  bx  lr    
 8002212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002220:	080081e0 	.word	0x080081e0
  ldr r2, =_sbss
 8002224:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002228:	200003f8 	.word	0x200003f8

0800222c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC_IRQHandler>
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002234:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <HAL_Init+0x40>)
 800223a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <HAL_Init+0x40>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <HAL_Init+0x40>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f92b 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225e:	2000      	movs	r0, #0
 8002260:	f000 f808 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002264:	f7ff fd88 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023c00 	.word	0x40023c00

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_InitTick+0x54>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_InitTick+0x58>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f943 	bl	800251e <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00e      	b.n	80022c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d80a      	bhi.n	80022be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f000 f90b 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <HAL_InitTick+0x5c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000010 	.word	0x20000010
 80022cc:	20000018 	.word	0x20000018
 80022d0:	20000014 	.word	0x20000014

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000018 	.word	0x20000018
 80022f8:	200002a8 	.word	0x200002a8

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	200002a8 	.word	0x200002a8

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	@ (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff feda 	bl	80022fc <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e099      	b.n	8002688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002574:	e00f      	b.n	8002596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002576:	f7ff fec1 	bl	80022fc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b05      	cmp	r3, #5
 8002582:	d908      	bls.n	8002596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2203      	movs	r2, #3
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e078      	b.n	8002688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e8      	bne.n	8002576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <HAL_DMA_Init+0x158>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d107      	bne.n	8002600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4313      	orrs	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0307 	bic.w	r3, r3, #7
 8002616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	2b04      	cmp	r3, #4
 8002628:	d117      	bne.n	800265a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fb01 	bl	8002c44 <DMA_CheckFifoParam>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2240      	movs	r2, #64	@ 0x40
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002656:	2301      	movs	r3, #1
 8002658:	e016      	b.n	8002688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fab8 	bl	8002bd8 <DMA_CalcBaseAndBitshift>
 8002668:	4603      	mov	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	223f      	movs	r2, #63	@ 0x3f
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	f010803f 	.word	0xf010803f

08002694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Start_IT+0x26>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e040      	b.n	800273c <HAL_DMA_Start_IT+0xa8>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12f      	bne.n	800272e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fa4a 	bl	8002b7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	223f      	movs	r2, #63	@ 0x3f
 80026ee:	409a      	lsls	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0216 	orr.w	r2, r2, #22
 8002702:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0208 	orr.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e005      	b.n	800273a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002752:	f7ff fdd3 	bl	80022fc <HAL_GetTick>
 8002756:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d008      	beq.n	8002776 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e052      	b.n	800281c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0216 	bic.w	r2, r2, #22
 8002784:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002794:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <HAL_DMA_Abort+0x62>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0208 	bic.w	r2, r2, #8
 80027b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c6:	e013      	b.n	80027f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c8:	f7ff fd98 	bl	80022fc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d90c      	bls.n	80027f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2203      	movs	r2, #3
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e015      	b.n	800281c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e4      	bne.n	80027c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	223f      	movs	r2, #63	@ 0x3f
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d004      	beq.n	8002842 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	@ 0x80
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00c      	b.n	800285c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2205      	movs	r2, #5
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002874:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab0 <HAL_DMA_IRQHandler+0x248>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a8e      	ldr	r2, [pc, #568]	@ (8002ab4 <HAL_DMA_IRQHandler+0x24c>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	2208      	movs	r2, #8
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0204 	bic.w	r2, r2, #4
 80028ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	2208      	movs	r2, #8
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	2201      	movs	r2, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2204      	movs	r2, #4
 8002910:	409a      	lsls	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	2204      	movs	r2, #4
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	2210      	movs	r2, #16
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d043      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03c      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2210      	movs	r2, #16
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d018      	beq.n	80029aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d108      	bne.n	8002998 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d024      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e01f      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0208 	bic.w	r2, r2, #8
 80029c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	2220      	movs	r2, #32
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 808f 	beq.w	8002b08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8087 	beq.w	8002b08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	2220      	movs	r2, #32
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d136      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0216 	bic.w	r2, r2, #22
 8002a20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x1da>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0208 	bic.w	r2, r2, #8
 8002a50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	223f      	movs	r2, #63	@ 0x3f
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07e      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
        }
        return;
 8002a7e:	e079      	b.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10d      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d031      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
 8002aac:	e02c      	b.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
 8002aae:	bf00      	nop
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d023      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
 8002ac8:	e01e      	b.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10f      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0210 	bic.w	r2, r2, #16
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d032      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2205      	movs	r2, #5
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d307      	bcc.n	8002b50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f2      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x2cc>
 8002b4e:	e000      	b.n	8002b52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
 8002b72:	e000      	b.n	8002b76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b74:	bf00      	nop
    }
  }
}
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b40      	cmp	r3, #64	@ 0x40
 8002ba8:	d108      	bne.n	8002bbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bba:	e007      	b.n	8002bcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3b10      	subs	r3, #16
 8002be8:	4a14      	ldr	r2, [pc, #80]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x64>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf2:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d909      	bls.n	8002c1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c18:	e007      	b.n	8002c2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	aaaaaaab 	.word	0xaaaaaaab
 8002c40:	08007fbc 	.word	0x08007fbc

08002c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d856      	bhi.n	8002d12 <DMA_CheckFifoParam+0xce>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <DMA_CheckFifoParam+0x28>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002d13 	.word	0x08002d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8c:	e043      	b.n	8002d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c96:	d140      	bne.n	8002d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e03d      	b.n	8002d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca6:	d121      	bne.n	8002cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d837      	bhi.n	8002d1e <DMA_CheckFifoParam+0xda>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <DMA_CheckFifoParam+0x70>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccb 	.word	0x08002ccb
 8002cbc:	08002cc5 	.word	0x08002cc5
 8002cc0:	08002cdd 	.word	0x08002cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e030      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d025      	beq.n	8002d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e022      	b.n	8002d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce4:	d11f      	bne.n	8002d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cea:	e01c      	b.n	8002d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d903      	bls.n	8002cfa <DMA_CheckFifoParam+0xb6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf8:	e018      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e015      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e00b      	b.n	8002d2a <DMA_CheckFifoParam+0xe6>
      break;
 8002d12:	bf00      	nop
 8002d14:	e00a      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e008      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e006      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e004      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e165      	b.n	8003024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f040 8154 	bne.w	800301e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d005      	beq.n	8002d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d130      	bne.n	8002df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 0201 	and.w	r2, r3, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d017      	beq.n	8002e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d123      	bne.n	8002e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80ae 	beq.w	800301e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800303c <HAL_GPIO_Init+0x300>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	4a5c      	ldr	r2, [pc, #368]	@ (800303c <HAL_GPIO_Init+0x300>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800303c <HAL_GPIO_Init+0x300>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ede:	4a58      	ldr	r2, [pc, #352]	@ (8003040 <HAL_GPIO_Init+0x304>)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4f      	ldr	r2, [pc, #316]	@ (8003044 <HAL_GPIO_Init+0x308>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d025      	beq.n	8002f56 <HAL_GPIO_Init+0x21a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8003048 <HAL_GPIO_Init+0x30c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01f      	beq.n	8002f52 <HAL_GPIO_Init+0x216>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4d      	ldr	r2, [pc, #308]	@ (800304c <HAL_GPIO_Init+0x310>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d019      	beq.n	8002f4e <HAL_GPIO_Init+0x212>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8003050 <HAL_GPIO_Init+0x314>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_GPIO_Init+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4b      	ldr	r2, [pc, #300]	@ (8003054 <HAL_GPIO_Init+0x318>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00d      	beq.n	8002f46 <HAL_GPIO_Init+0x20a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003058 <HAL_GPIO_Init+0x31c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d007      	beq.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a49      	ldr	r2, [pc, #292]	@ (800305c <HAL_GPIO_Init+0x320>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_GPIO_Init+0x202>
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	e00c      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00a      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f42:	2305      	movs	r3, #5
 8002f44:	e008      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f46:	2304      	movs	r3, #4
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e004      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f56:	2300      	movs	r3, #0
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f002 0203 	and.w	r2, r2, #3
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	4093      	lsls	r3, r2
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f68:	4935      	ldr	r1, [pc, #212]	@ (8003040 <HAL_GPIO_Init+0x304>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	3302      	adds	r3, #2
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f76:	4b3a      	ldr	r3, [pc, #232]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f9a:	4a31      	ldr	r2, [pc, #196]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc4:	4a26      	ldr	r2, [pc, #152]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fca:	4b25      	ldr	r3, [pc, #148]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fee:	4a1c      	ldr	r2, [pc, #112]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <HAL_GPIO_Init+0x324>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003018:	4a11      	ldr	r2, [pc, #68]	@ (8003060 <HAL_GPIO_Init+0x324>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	f67f ae96 	bls.w	8002d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40013800 	.word	0x40013800
 8003044:	40020000 	.word	0x40020000
 8003048:	40020400 	.word	0x40020400
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00
 8003054:	40021000 	.word	0x40021000
 8003058:	40021400 	.word	0x40021400
 800305c:	40021800 	.word	0x40021800
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
 8003070:	4613      	mov	r3, r2
 8003072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003074:	787b      	ldrb	r3, [r7, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003080:	e003      	b.n	800308a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	041a      	lsls	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	619a      	str	r2, [r3, #24]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0cc      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b68      	ldr	r3, [pc, #416]	@ (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d90c      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b65      	ldr	r3, [pc, #404]	@ (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b63      	ldr	r3, [pc, #396]	@ (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0b8      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ec:	4b59      	ldr	r3, [pc, #356]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4a58      	ldr	r2, [pc, #352]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003104:	4b53      	ldr	r3, [pc, #332]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a52      	ldr	r2, [pc, #328]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800310e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003110:	4b50      	ldr	r3, [pc, #320]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	494d      	ldr	r1, [pc, #308]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d044      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b47      	ldr	r3, [pc, #284]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d119      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e07f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d003      	beq.n	8003156 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003152:	2b03      	cmp	r3, #3
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b3f      	ldr	r3, [pc, #252]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3b      	ldr	r3, [pc, #236]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e067      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b37      	ldr	r3, [pc, #220]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4934      	ldr	r1, [pc, #208]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7ff f8b8 	bl	80022fc <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7ff f8b4 	bl	80022fc <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e04f      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d20c      	bcs.n	80031e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e032      	b.n	8003246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ec:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4916      	ldr	r1, [pc, #88]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320a:	4b12      	ldr	r3, [pc, #72]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	490e      	ldr	r1, [pc, #56]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321e:	f000 f855 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 8003222:	4602      	mov	r2, r0
 8003224:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	490a      	ldr	r1, [pc, #40]	@ (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	5ccb      	ldrb	r3, [r1, r3]
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	4a09      	ldr	r2, [pc, #36]	@ (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800323a:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f818 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023c00 	.word	0x40023c00
 8003254:	40023800 	.word	0x40023800
 8003258:	08007fa4 	.word	0x08007fa4
 800325c:	20000010 	.word	0x20000010
 8003260:	20000014 	.word	0x20000014

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <HAL_RCC_GetHCLKFreq+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000010 	.word	0x20000010

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff0 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0a9b      	lsrs	r3, r3, #10
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	@ (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	08007fb4 	.word	0x08007fb4

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a8:	f7ff ffdc 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0b5b      	lsrs	r3, r3, #13
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	@ (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	08007fb4 	.word	0x08007fb4

080032cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d0:	b0ae      	sub	sp, #184	@ 0xb8
 80032d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f2:	4bcb      	ldr	r3, [pc, #812]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	f200 8206 	bhi.w	800370c <HAL_RCC_GetSysClockFreq+0x440>
 8003300:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	0800333d 	.word	0x0800333d
 800330c:	0800370d 	.word	0x0800370d
 8003310:	0800370d 	.word	0x0800370d
 8003314:	0800370d 	.word	0x0800370d
 8003318:	08003345 	.word	0x08003345
 800331c:	0800370d 	.word	0x0800370d
 8003320:	0800370d 	.word	0x0800370d
 8003324:	0800370d 	.word	0x0800370d
 8003328:	0800334d 	.word	0x0800334d
 800332c:	0800370d 	.word	0x0800370d
 8003330:	0800370d 	.word	0x0800370d
 8003334:	0800370d 	.word	0x0800370d
 8003338:	0800353d 	.word	0x0800353d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4bb9      	ldr	r3, [pc, #740]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x358>)
 800333e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003342:	e1e7      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003344:	4bb8      	ldr	r3, [pc, #736]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800334a:	e1e3      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334c:	4bb4      	ldr	r3, [pc, #720]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003358:	4bb1      	ldr	r3, [pc, #708]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d071      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003364:	4bae      	ldr	r3, [pc, #696]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003370:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339c:	0150      	lsls	r0, r2, #5
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4621      	mov	r1, r4
 80033a4:	1a51      	subs	r1, r2, r1
 80033a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80033a8:	4629      	mov	r1, r5
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80033bc:	4649      	mov	r1, r9
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	4641      	mov	r1, r8
 80033c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c6:	4641      	mov	r1, r8
 80033c8:	018a      	lsls	r2, r1, #6
 80033ca:	4641      	mov	r1, r8
 80033cc:	1a51      	subs	r1, r2, r1
 80033ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d0:	4649      	mov	r1, r9
 80033d2:	eb63 0301 	sbc.w	r3, r3, r1
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80033e4:	4649      	mov	r1, r9
 80033e6:	00cb      	lsls	r3, r1, #3
 80033e8:	4641      	mov	r1, r8
 80033ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ee:	4641      	mov	r1, r8
 80033f0:	00ca      	lsls	r2, r1, #3
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	4622      	mov	r2, r4
 80033fa:	189b      	adds	r3, r3, r2
 80033fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033fe:	462b      	mov	r3, r5
 8003400:	460a      	mov	r2, r1
 8003402:	eb42 0303 	adc.w	r3, r2, r3
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003414:	4629      	mov	r1, r5
 8003416:	024b      	lsls	r3, r1, #9
 8003418:	4621      	mov	r1, r4
 800341a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800341e:	4621      	mov	r1, r4
 8003420:	024a      	lsls	r2, r1, #9
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003430:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003434:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003438:	f7fd fbce 	bl	8000bd8 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4613      	mov	r3, r2
 8003442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003446:	e067      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003448:	4b75      	ldr	r3, [pc, #468]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	2200      	movs	r2, #0
 8003450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003454:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003458:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800345c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003462:	2300      	movs	r3, #0
 8003464:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003466:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800346a:	4622      	mov	r2, r4
 800346c:	462b      	mov	r3, r5
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800347c:	0150      	lsls	r0, r2, #5
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4621      	mov	r1, r4
 8003484:	1a51      	subs	r1, r2, r1
 8003486:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003488:	4629      	mov	r1, r5
 800348a:	eb63 0301 	sbc.w	r3, r3, r1
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800349c:	4649      	mov	r1, r9
 800349e:	018b      	lsls	r3, r1, #6
 80034a0:	4641      	mov	r1, r8
 80034a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034a6:	4641      	mov	r1, r8
 80034a8:	018a      	lsls	r2, r1, #6
 80034aa:	4641      	mov	r1, r8
 80034ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b0:	4649      	mov	r1, r9
 80034b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ca:	4692      	mov	sl, r2
 80034cc:	469b      	mov	fp, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb1a 0303 	adds.w	r3, sl, r3
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	462b      	mov	r3, r5
 80034d8:	eb4b 0303 	adc.w	r3, fp, r3
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034ea:	4629      	mov	r1, r5
 80034ec:	028b      	lsls	r3, r1, #10
 80034ee:	4621      	mov	r1, r4
 80034f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f4:	4621      	mov	r1, r4
 80034f6:	028a      	lsls	r2, r1, #10
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003500:	2200      	movs	r2, #0
 8003502:	673b      	str	r3, [r7, #112]	@ 0x70
 8003504:	677a      	str	r2, [r7, #116]	@ 0x74
 8003506:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800350a:	f7fd fb65 	bl	8000bd8 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4613      	mov	r3, r2
 8003514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003518:	4b41      	ldr	r3, [pc, #260]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800352a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800352e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800353a:	e0eb      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353c:	4b38      	ldr	r3, [pc, #224]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003548:	4b35      	ldr	r3, [pc, #212]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d06b      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003554:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x354>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	2200      	movs	r2, #0
 800355c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800355e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003566:	663b      	str	r3, [r7, #96]	@ 0x60
 8003568:	2300      	movs	r3, #0
 800356a:	667b      	str	r3, [r7, #100]	@ 0x64
 800356c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003570:	4622      	mov	r2, r4
 8003572:	462b      	mov	r3, r5
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	0159      	lsls	r1, r3, #5
 800357e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003582:	0150      	lsls	r0, r2, #5
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4621      	mov	r1, r4
 800358a:	1a51      	subs	r1, r2, r1
 800358c:	61b9      	str	r1, [r7, #24]
 800358e:	4629      	mov	r1, r5
 8003590:	eb63 0301 	sbc.w	r3, r3, r1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035a2:	4659      	mov	r1, fp
 80035a4:	018b      	lsls	r3, r1, #6
 80035a6:	4651      	mov	r1, sl
 80035a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ac:	4651      	mov	r1, sl
 80035ae:	018a      	lsls	r2, r1, #6
 80035b0:	4651      	mov	r1, sl
 80035b2:	ebb2 0801 	subs.w	r8, r2, r1
 80035b6:	4659      	mov	r1, fp
 80035b8:	eb63 0901 	sbc.w	r9, r3, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d0:	4690      	mov	r8, r2
 80035d2:	4699      	mov	r9, r3
 80035d4:	4623      	mov	r3, r4
 80035d6:	eb18 0303 	adds.w	r3, r8, r3
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	462b      	mov	r3, r5
 80035de:	eb49 0303 	adc.w	r3, r9, r3
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035f0:	4629      	mov	r1, r5
 80035f2:	024b      	lsls	r3, r1, #9
 80035f4:	4621      	mov	r1, r4
 80035f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035fa:	4621      	mov	r1, r4
 80035fc:	024a      	lsls	r2, r1, #9
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003606:	2200      	movs	r2, #0
 8003608:	65bb      	str	r3, [r7, #88]	@ 0x58
 800360a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800360c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003610:	f7fd fae2 	bl	8000bd8 <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4613      	mov	r3, r2
 800361a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800361e:	e065      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x420>
 8003620:	40023800 	.word	0x40023800
 8003624:	00f42400 	.word	0x00f42400
 8003628:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362c:	4b3d      	ldr	r3, [pc, #244]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x458>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	2200      	movs	r2, #0
 8003634:	4618      	mov	r0, r3
 8003636:	4611      	mov	r1, r2
 8003638:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800363c:	653b      	str	r3, [r7, #80]	@ 0x50
 800363e:	2300      	movs	r3, #0
 8003640:	657b      	str	r3, [r7, #84]	@ 0x54
 8003642:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003646:	4642      	mov	r2, r8
 8003648:	464b      	mov	r3, r9
 800364a:	f04f 0000 	mov.w	r0, #0
 800364e:	f04f 0100 	mov.w	r1, #0
 8003652:	0159      	lsls	r1, r3, #5
 8003654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003658:	0150      	lsls	r0, r2, #5
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4641      	mov	r1, r8
 8003660:	1a51      	subs	r1, r2, r1
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	4649      	mov	r1, r9
 8003666:	eb63 0301 	sbc.w	r3, r3, r1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003678:	4659      	mov	r1, fp
 800367a:	018b      	lsls	r3, r1, #6
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003682:	4651      	mov	r1, sl
 8003684:	018a      	lsls	r2, r1, #6
 8003686:	4651      	mov	r1, sl
 8003688:	1a54      	subs	r4, r2, r1
 800368a:	4659      	mov	r1, fp
 800368c:	eb63 0501 	sbc.w	r5, r3, r1
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	00eb      	lsls	r3, r5, #3
 800369a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800369e:	00e2      	lsls	r2, r4, #3
 80036a0:	4614      	mov	r4, r2
 80036a2:	461d      	mov	r5, r3
 80036a4:	4643      	mov	r3, r8
 80036a6:	18e3      	adds	r3, r4, r3
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	464b      	mov	r3, r9
 80036ac:	eb45 0303 	adc.w	r3, r5, r3
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036be:	4629      	mov	r1, r5
 80036c0:	028b      	lsls	r3, r1, #10
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c8:	4621      	mov	r1, r4
 80036ca:	028a      	lsls	r2, r1, #10
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036d4:	2200      	movs	r2, #0
 80036d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036de:	f7fd fa7b 	bl	8000bd8 <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4613      	mov	r3, r2
 80036e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x458>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0f1b      	lsrs	r3, r3, #28
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80036fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800370a:	e003      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x45c>)
 800370e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003712:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003718:	4618      	mov	r0, r3
 800371a:	37b8      	adds	r7, #184	@ 0xb8
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	00f42400 	.word	0x00f42400

0800372c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e28d      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8083 	beq.w	8003852 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800374c:	4b94      	ldr	r3, [pc, #592]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b04      	cmp	r3, #4
 8003756:	d019      	beq.n	800378c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003758:	4b91      	ldr	r3, [pc, #580]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003760:	2b08      	cmp	r3, #8
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003764:	4b8e      	ldr	r3, [pc, #568]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003770:	d00c      	beq.n	800378c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b8b      	ldr	r3, [pc, #556]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d112      	bne.n	80037a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377e:	4b88      	ldr	r3, [pc, #544]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800378a:	d10b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	4b84      	ldr	r3, [pc, #528]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05b      	beq.n	8003850 <HAL_RCC_OscConfig+0x124>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d157      	bne.n	8003850 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e25a      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x90>
 80037ae:	4b7c      	ldr	r3, [pc, #496]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7b      	ldr	r2, [pc, #492]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xcc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0xb4>
 80037c6:	4b76      	ldr	r3, [pc, #472]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a72      	ldr	r2, [pc, #456]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xcc>
 80037e0:	4b6f      	ldr	r3, [pc, #444]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6e      	ldr	r2, [pc, #440]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b6c      	ldr	r3, [pc, #432]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6b      	ldr	r2, [pc, #428]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe fd7c 	bl	80022fc <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fd78 	bl	80022fc <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e21f      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b61      	ldr	r3, [pc, #388]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xdc>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fd68 	bl	80022fc <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe fd64 	bl	80022fc <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	@ 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e20b      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b57      	ldr	r3, [pc, #348]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x104>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d06f      	beq.n	800393e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800385e:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d017      	beq.n	800389a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800386a:	4b4d      	ldr	r3, [pc, #308]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003872:	2b08      	cmp	r3, #8
 8003874:	d105      	bne.n	8003882 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003876:	4b4a      	ldr	r3, [pc, #296]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003882:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b44      	ldr	r3, [pc, #272]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b41      	ldr	r3, [pc, #260]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x186>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1d3      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4937      	ldr	r1, [pc, #220]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b34      	ldr	r3, [pc, #208]	@ (80039a4 <HAL_RCC_OscConfig+0x278>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe fd11 	bl	80022fc <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038de:	f7fe fd0d 	bl	80022fc <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1b4      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b28      	ldr	r3, [pc, #160]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4925      	ldr	r1, [pc, #148]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b24      	ldr	r3, [pc, #144]	@ (80039a4 <HAL_RCC_OscConfig+0x278>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe fcf0 	bl	80022fc <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003920:	f7fe fcec 	bl	80022fc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e193      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d036      	beq.n	80039b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_RCC_OscConfig+0x27c>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fe fcd0 	bl	80022fc <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003960:	f7fe fccc 	bl	80022fc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e173      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_RCC_OscConfig+0x274>)
 8003974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x234>
 800397e:	e01b      	b.n	80039b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_RCC_OscConfig+0x27c>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe fcb9 	bl	80022fc <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e00e      	b.n	80039ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe fcb5 	bl	80022fc <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d907      	bls.n	80039ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e15c      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	42470000 	.word	0x42470000
 80039a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b8a      	ldr	r3, [pc, #552]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ea      	bne.n	800398e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8097 	beq.w	8003af4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b83      	ldr	r3, [pc, #524]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	4a7e      	ldr	r2, [pc, #504]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b79      	ldr	r3, [pc, #484]	@ (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a02:	4b76      	ldr	r3, [pc, #472]	@ (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	@ (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe fc75 	bl	80022fc <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7fe fc71 	bl	80022fc <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e118      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b6c      	ldr	r3, [pc, #432]	@ (8003bdc <HAL_RCC_OscConfig+0x4b0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x31e>
 8003a3c:	4b66      	ldr	r3, [pc, #408]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a40:	4a65      	ldr	r2, [pc, #404]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a48:	e01c      	b.n	8003a84 <HAL_RCC_OscConfig+0x358>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x340>
 8003a52:	4b61      	ldr	r3, [pc, #388]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	4a60      	ldr	r2, [pc, #384]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	4a5d      	ldr	r2, [pc, #372]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x358>
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a70:	4a59      	ldr	r2, [pc, #356]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a78:	4b57      	ldr	r3, [pc, #348]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	4a56      	ldr	r2, [pc, #344]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003a7e:	f023 0304 	bic.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fc36 	bl	80022fc <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fe fc32 	bl	80022fc <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0d7      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ee      	beq.n	8003a94 <HAL_RCC_OscConfig+0x368>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fc20 	bl	80022fc <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fc1c 	bl	80022fc <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0c1      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad6:	4b40      	ldr	r3, [pc, #256]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ee      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80ad 	beq.w	8003c58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003afe:	4b36      	ldr	r3, [pc, #216]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d060      	beq.n	8003bcc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d145      	bne.n	8003b9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b33      	ldr	r3, [pc, #204]	@ (8003be0 <HAL_RCC_OscConfig+0x4b4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe fbf0 	bl	80022fc <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fe fbec 	bl	80022fc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e093      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	491b      	ldr	r1, [pc, #108]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x4b4>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fe fbc1 	bl	80022fc <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fe fbbd 	bl	80022fc <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e064      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x452>
 8003b9c:	e05c      	b.n	8003c58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <HAL_RCC_OscConfig+0x4b4>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fbaa 	bl	80022fc <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fe fba6 	bl	80022fc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e04d      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_OscConfig+0x4ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x480>
 8003bca:	e045      	b.n	8003c58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e040      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c64 <HAL_RCC_OscConfig+0x538>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d030      	beq.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d129      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d122      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d119      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d10f      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e041      	b.n	8003cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe f89a 	bl	8001dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f000 fad8 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e041      	b.n	8003d9c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f839 	bl	8003da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f000 fa89 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start+0x24>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e022      	b.n	8003e22 <HAL_TIM_PWM_Start+0x6a>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d109      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x3e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e015      	b.n	8003e22 <HAL_TIM_PWM_Start+0x6a>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x58>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_PWM_Start+0x6a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e07c      	b.n	8003f24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x82>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e38:	e013      	b.n	8003e62 <HAL_TIM_PWM_Start+0xaa>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start+0x92>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e48:	e00b      	b.n	8003e62 <HAL_TIM_PWM_Start+0xaa>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Start+0xa2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e58:	e003      	b.n	8003e62 <HAL_TIM_PWM_Start+0xaa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2201      	movs	r2, #1
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fcec 	bl	8004848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2d      	ldr	r2, [pc, #180]	@ (8003f2c <HAL_TIM_PWM_Start+0x174>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_PWM_Start+0xcc>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f30 <HAL_TIM_PWM_Start+0x178>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_TIM_PWM_Start+0xd0>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_TIM_PWM_Start+0xd2>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <HAL_TIM_PWM_Start+0x174>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d022      	beq.n	8003eee <HAL_TIM_PWM_Start+0x136>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb0:	d01d      	beq.n	8003eee <HAL_TIM_PWM_Start+0x136>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f34 <HAL_TIM_PWM_Start+0x17c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d018      	beq.n	8003eee <HAL_TIM_PWM_Start+0x136>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <HAL_TIM_PWM_Start+0x180>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_TIM_PWM_Start+0x136>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <HAL_TIM_PWM_Start+0x184>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIM_PWM_Start+0x136>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <HAL_TIM_PWM_Start+0x178>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIM_PWM_Start+0x136>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a18      	ldr	r2, [pc, #96]	@ (8003f40 <HAL_TIM_PWM_Start+0x188>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIM_PWM_Start+0x136>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <HAL_TIM_PWM_Start+0x18c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d111      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d010      	beq.n	8003f22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	e007      	b.n	8003f22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40001800 	.word	0x40001800

08003f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0ae      	b.n	80040c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b0c      	cmp	r3, #12
 8003f72:	f200 809f 	bhi.w	80040b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f76:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fb1 	.word	0x08003fb1
 8003f80:	080040b5 	.word	0x080040b5
 8003f84:	080040b5 	.word	0x080040b5
 8003f88:	080040b5 	.word	0x080040b5
 8003f8c:	08003ff1 	.word	0x08003ff1
 8003f90:	080040b5 	.word	0x080040b5
 8003f94:	080040b5 	.word	0x080040b5
 8003f98:	080040b5 	.word	0x080040b5
 8003f9c:	08004033 	.word	0x08004033
 8003fa0:	080040b5 	.word	0x080040b5
 8003fa4:	080040b5 	.word	0x080040b5
 8003fa8:	080040b5 	.word	0x080040b5
 8003fac:	08004073 	.word	0x08004073
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f9fc 	bl	80043b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0208 	orr.w	r2, r2, #8
 8003fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0204 	bic.w	r2, r2, #4
 8003fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6999      	ldr	r1, [r3, #24]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	619a      	str	r2, [r3, #24]
      break;
 8003fee:	e064      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fa4c 	bl	8004494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800400a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6999      	ldr	r1, [r3, #24]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	021a      	lsls	r2, r3, #8
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	619a      	str	r2, [r3, #24]
      break;
 8004030:	e043      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 faa1 	bl	8004580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0208 	orr.w	r2, r2, #8
 800404c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0204 	bic.w	r2, r2, #4
 800405c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69d9      	ldr	r1, [r3, #28]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	61da      	str	r2, [r3, #28]
      break;
 8004070:	e023      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 faf5 	bl	8004668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800408c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	021a      	lsls	r2, r3, #8
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]
      break;
 80040b2:	e002      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75fb      	strb	r3, [r7, #23]
      break;
 80040b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIM_ConfigClockSource+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0b4      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x186>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800410e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004120:	d03e      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004126:	f200 8087 	bhi.w	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800412e:	f000 8086 	beq.w	800423e <HAL_TIM_ConfigClockSource+0x172>
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004136:	d87f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b70      	cmp	r3, #112	@ 0x70
 800413a:	d01a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0xa6>
 800413c:	2b70      	cmp	r3, #112	@ 0x70
 800413e:	d87b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b60      	cmp	r3, #96	@ 0x60
 8004142:	d050      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004144:	2b60      	cmp	r3, #96	@ 0x60
 8004146:	d877      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b50      	cmp	r3, #80	@ 0x50
 800414a:	d03c      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0xfa>
 800414c:	2b50      	cmp	r3, #80	@ 0x50
 800414e:	d873      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b40      	cmp	r3, #64	@ 0x40
 8004152:	d058      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x13a>
 8004154:	2b40      	cmp	r3, #64	@ 0x40
 8004156:	d86f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b30      	cmp	r3, #48	@ 0x30
 800415a:	d064      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	2b30      	cmp	r3, #48	@ 0x30
 800415e:	d86b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d060      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 8004164:	2b20      	cmp	r3, #32
 8004166:	d867      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05c      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d05a      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 8004170:	e062      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004182:	f000 fb41 	bl	8004808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	609a      	str	r2, [r3, #8]
      break;
 800419e:	e04f      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041b0:	f000 fb2a 	bl	8004808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041c2:	609a      	str	r2, [r3, #8]
      break;
 80041c4:	e03c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 fa9e 	bl	8004714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2150      	movs	r1, #80	@ 0x50
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 faf7 	bl	80047d2 <TIM_ITRx_SetConfig>
      break;
 80041e4:	e02c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 fabd 	bl	8004772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2160      	movs	r1, #96	@ 0x60
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fae7 	bl	80047d2 <TIM_ITRx_SetConfig>
      break;
 8004204:	e01c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	461a      	mov	r2, r3
 8004214:	f000 fa7e 	bl	8004714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2140      	movs	r1, #64	@ 0x40
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fad7 	bl	80047d2 <TIM_ITRx_SetConfig>
      break;
 8004224:	e00c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f000 face 	bl	80047d2 <TIM_ITRx_SetConfig>
      break;
 8004236:	e003      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e000      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800423e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a46      	ldr	r2, [pc, #280]	@ (8004388 <TIM_Base_SetConfig+0x12c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427a:	d00f      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a43      	ldr	r2, [pc, #268]	@ (800438c <TIM_Base_SetConfig+0x130>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00b      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a42      	ldr	r2, [pc, #264]	@ (8004390 <TIM_Base_SetConfig+0x134>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d007      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a41      	ldr	r2, [pc, #260]	@ (8004394 <TIM_Base_SetConfig+0x138>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a40      	ldr	r2, [pc, #256]	@ (8004398 <TIM_Base_SetConfig+0x13c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a35      	ldr	r2, [pc, #212]	@ (8004388 <TIM_Base_SetConfig+0x12c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02b      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042bc:	d027      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a32      	ldr	r2, [pc, #200]	@ (800438c <TIM_Base_SetConfig+0x130>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d023      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a31      	ldr	r2, [pc, #196]	@ (8004390 <TIM_Base_SetConfig+0x134>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01f      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a30      	ldr	r2, [pc, #192]	@ (8004394 <TIM_Base_SetConfig+0x138>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01b      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004398 <TIM_Base_SetConfig+0x13c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d017      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2e      	ldr	r2, [pc, #184]	@ (800439c <TIM_Base_SetConfig+0x140>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2d      	ldr	r2, [pc, #180]	@ (80043a0 <TIM_Base_SetConfig+0x144>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00f      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	@ (80043a4 <TIM_Base_SetConfig+0x148>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00b      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2b      	ldr	r2, [pc, #172]	@ (80043a8 <TIM_Base_SetConfig+0x14c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2a      	ldr	r2, [pc, #168]	@ (80043ac <TIM_Base_SetConfig+0x150>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a29      	ldr	r2, [pc, #164]	@ (80043b0 <TIM_Base_SetConfig+0x154>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d108      	bne.n	8004320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a10      	ldr	r2, [pc, #64]	@ (8004388 <TIM_Base_SetConfig+0x12c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <TIM_Base_SetConfig+0x13c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d103      	bne.n	800435c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	611a      	str	r2, [r3, #16]
  }
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40010400 	.word	0x40010400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	40001800 	.word	0x40001800
 80043ac:	40001c00 	.word	0x40001c00
 80043b0:	40002000 	.word	0x40002000

080043b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f023 0201 	bic.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0303 	bic.w	r3, r3, #3
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f023 0302 	bic.w	r3, r3, #2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a20      	ldr	r2, [pc, #128]	@ (800448c <TIM_OC1_SetConfig+0xd8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_OC1_SetConfig+0x64>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1f      	ldr	r2, [pc, #124]	@ (8004490 <TIM_OC1_SetConfig+0xdc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10c      	bne.n	8004432 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0308 	bic.w	r3, r3, #8
 800441e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a15      	ldr	r2, [pc, #84]	@ (800448c <TIM_OC1_SetConfig+0xd8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_OC1_SetConfig+0x8e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a14      	ldr	r2, [pc, #80]	@ (8004490 <TIM_OC1_SetConfig+0xdc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	621a      	str	r2, [r3, #32]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40010000 	.word	0x40010000
 8004490:	40010400 	.word	0x40010400

08004494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f023 0210 	bic.w	r2, r3, #16
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0320 	bic.w	r3, r3, #32
 80044de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <TIM_OC2_SetConfig+0xe4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_OC2_SetConfig+0x68>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a21      	ldr	r2, [pc, #132]	@ (800457c <TIM_OC2_SetConfig+0xe8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10d      	bne.n	8004518 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004516:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a17      	ldr	r2, [pc, #92]	@ (8004578 <TIM_OC2_SetConfig+0xe4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC2_SetConfig+0x94>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a16      	ldr	r2, [pc, #88]	@ (800457c <TIM_OC2_SetConfig+0xe8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d113      	bne.n	8004550 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800452e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40010400 	.word	0x40010400

08004580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a21      	ldr	r2, [pc, #132]	@ (8004660 <TIM_OC3_SetConfig+0xe0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_OC3_SetConfig+0x66>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a20      	ldr	r2, [pc, #128]	@ (8004664 <TIM_OC3_SetConfig+0xe4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d10d      	bne.n	8004602 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a16      	ldr	r2, [pc, #88]	@ (8004660 <TIM_OC3_SetConfig+0xe0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_OC3_SetConfig+0x92>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a15      	ldr	r2, [pc, #84]	@ (8004664 <TIM_OC3_SetConfig+0xe4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d113      	bne.n	800463a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40010000 	.word	0x40010000
 8004664:	40010400 	.word	0x40010400

08004668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800469e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a12      	ldr	r2, [pc, #72]	@ (800470c <TIM_OC4_SetConfig+0xa4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_OC4_SetConfig+0x68>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a11      	ldr	r2, [pc, #68]	@ (8004710 <TIM_OC4_SetConfig+0xa8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d109      	bne.n	80046e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	019b      	lsls	r3, r3, #6
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40010400 	.word	0x40010400

08004714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800473e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 030a 	bic.w	r3, r3, #10
 8004750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004772:	b480      	push	{r7}
 8004774:	b087      	sub	sp, #28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f023 0210 	bic.w	r2, r3, #16
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800479c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	031b      	lsls	r3, r3, #12
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f043 0307 	orr.w	r3, r3, #7
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	431a      	orrs	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2201      	movs	r2, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1a      	ldr	r2, [r3, #32]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	43db      	mvns	r3, r3
 800486a:	401a      	ands	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	fa01 f303 	lsl.w	r3, r1, r3
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e05a      	b.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a21      	ldr	r2, [pc, #132]	@ (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d01d      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1b      	ldr	r2, [pc, #108]	@ (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1a      	ldr	r2, [pc, #104]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a15      	ldr	r2, [pc, #84]	@ (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d10c      	bne.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800493c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	4313      	orrs	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40000c00 	.word	0x40000c00
 8004980:	40010400 	.word	0x40010400
 8004984:	40014000 	.word	0x40014000
 8004988:	40001800 	.word	0x40001800

0800498c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e03d      	b.n	8004a24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e042      	b.n	8004ac8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fd fa28 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	@ 0x24
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 ff4f 	bl	8005918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	@ 0x28
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d175      	bne.n	8004bdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_UART_Transmit+0x2c>
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e06e      	b.n	8004bde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2221      	movs	r2, #33	@ 0x21
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0e:	f7fd fbf5 	bl	80022fc <HAL_GetTick>
 8004b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b28:	d108      	bne.n	8004b3c <HAL_UART_Transmit+0x6c>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e003      	b.n	8004b44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b44:	e02e      	b.n	8004ba4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2180      	movs	r1, #128	@ 0x80
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fc27 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e03a      	b.n	8004bde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	3302      	adds	r3, #2
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e007      	b.n	8004b96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	3301      	adds	r3, #1
 8004b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1cb      	bne.n	8004b46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2140      	movs	r1, #64	@ 0x40
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fbf3 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e006      	b.n	8004bde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e000      	b.n	8004bde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bdc:	2302      	movs	r3, #2
  }
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d112      	bne.n	8004c26 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Receive_DMA+0x26>
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e00b      	b.n	8004c28 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fc1b 	bl	8005458 <UART_Start_Receive_DMA>
 8004c22:	4603      	mov	r3, r0
 8004c24:	e000      	b.n	8004c28 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c26:	2302      	movs	r3, #2
  }
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b0ba      	sub	sp, #232	@ 0xe8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_UART_IRQHandler+0x66>
 8004c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fd83 	bl	800579a <UART_Receive_IT>
      return;
 8004c94:	e25b      	b.n	800514e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 80de 	beq.w	8004e5c <HAL_UART_IRQHandler+0x22c>
 8004ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80d1 	beq.w	8004e5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_UART_IRQHandler+0xae>
 8004cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <HAL_UART_IRQHandler+0xd2>
 8004cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f043 0202 	orr.w	r2, r3, #2
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_UART_IRQHandler+0xf6>
 8004d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f043 0204 	orr.w	r2, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d011      	beq.n	8004d56 <HAL_UART_IRQHandler+0x126>
 8004d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f043 0208 	orr.w	r2, r3, #8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 81f2 	beq.w	8005144 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x14e>
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fd0e 	bl	800579a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <HAL_UART_IRQHandler+0x17a>
 8004da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04f      	beq.n	8004e4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fc16 	bl	80055dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b40      	cmp	r3, #64	@ 0x40
 8004dbc:	d141      	bne.n	8004e42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3314      	adds	r3, #20
 8004dc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3314      	adds	r3, #20
 8004de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1d9      	bne.n	8004dbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d013      	beq.n	8004e3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	4a7e      	ldr	r2, [pc, #504]	@ (8005010 <HAL_UART_IRQHandler+0x3e0>)
 8004e18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fd00 	bl	8002824 <HAL_DMA_Abort_IT>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e34:	4610      	mov	r0, r2
 8004e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	e00e      	b.n	8004e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f99e 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	e00a      	b.n	8004e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f99a 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	e006      	b.n	8004e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f996 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e56:	e175      	b.n	8005144 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	bf00      	nop
    return;
 8004e5a:	e173      	b.n	8005144 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 814f 	bne.w	8005104 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8148 	beq.w	8005104 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8141 	beq.w	8005104 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	2b40      	cmp	r3, #64	@ 0x40
 8004ea4:	f040 80b6 	bne.w	8005014 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8145 	beq.w	8005148 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	f080 813e 	bcs.w	8005148 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ed2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ede:	f000 8088 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1d9      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3314      	adds	r3, #20
 8004f34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e1      	bne.n	8004f2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3314      	adds	r3, #20
 8004f70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e3      	bne.n	8004f6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc2:	f023 0310 	bic.w	r3, r3, #16
 8004fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fd6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e3      	bne.n	8004fb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fd fba9 	bl	8002744 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005000:	b29b      	uxth	r3, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	b29b      	uxth	r3, r3
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8c1 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800500e:	e09b      	b.n	8005148 <HAL_UART_IRQHandler+0x518>
 8005010:	080056a3 	.word	0x080056a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800501c:	b29b      	uxth	r3, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 808e 	beq.w	800514c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8089 	beq.w	800514c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005050:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800505e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005060:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800506c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e3      	bne.n	800503a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3314      	adds	r3, #20
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	623b      	str	r3, [r7, #32]
   return(result);
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3314      	adds	r3, #20
 8005092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005096:	633a      	str	r2, [r7, #48]	@ 0x30
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800509c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e3      	bne.n	8005072 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0310 	bic.w	r3, r3, #16
 80050ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050dc:	61fa      	str	r2, [r7, #28]
 80050de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	69b9      	ldr	r1, [r7, #24]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e3      	bne.n	80050b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f847 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005102:	e023      	b.n	800514c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <HAL_UART_IRQHandler+0x4f4>
 8005110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fad4 	bl	80056ca <UART_Transmit_IT>
    return;
 8005122:	e014      	b.n	800514e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <HAL_UART_IRQHandler+0x51e>
 8005130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fb14 	bl	800576a <UART_EndTransmit_IT>
    return;
 8005142:	e004      	b.n	800514e <HAL_UART_IRQHandler+0x51e>
    return;
 8005144:	bf00      	nop
 8005146:	e002      	b.n	800514e <HAL_UART_IRQHandler+0x51e>
      return;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_UART_IRQHandler+0x51e>
      return;
 800514c:	bf00      	nop
  }
}
 800514e:	37e8      	adds	r7, #232	@ 0xe8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b09c      	sub	sp, #112	@ 0x70
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d172      	bne.n	80052aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80051c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051c6:	2200      	movs	r2, #0
 80051c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80051ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e5      	bne.n	80051ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800520e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	667b      	str	r3, [r7, #100]	@ 0x64
 8005216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800521e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800522c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3314      	adds	r3, #20
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	623b      	str	r3, [r7, #32]
   return(result);
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005248:	663b      	str	r3, [r7, #96]	@ 0x60
 800524a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005252:	633a      	str	r2, [r7, #48]	@ 0x30
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005268:	2220      	movs	r2, #32
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005272:	2b01      	cmp	r3, #1
 8005274:	d119      	bne.n	80052aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	60fb      	str	r3, [r7, #12]
   return(result);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f023 0310 	bic.w	r3, r3, #16
 800528c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800528e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005296:	61fa      	str	r2, [r7, #28]
 8005298:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	69b9      	ldr	r1, [r7, #24]
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	617b      	str	r3, [r7, #20]
   return(result);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ac:	2200      	movs	r2, #0
 80052ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d106      	bne.n	80052c6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052bc:	4619      	mov	r1, r3
 80052be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80052c0:	f7ff ff66 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052c4:	e002      	b.n	80052cc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80052c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80052c8:	f7fb fdfe 	bl	8000ec8 <HAL_UART_RxCpltCallback>
}
 80052cc:	bf00      	nop
 80052ce:	3770      	adds	r7, #112	@ 0x70
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d108      	bne.n	8005302 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4619      	mov	r1, r3
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff ff48 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005300:	e002      	b.n	8005308 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff ff30 	bl	8005168 <HAL_UART_RxHalfCpltCallback>
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532c:	2b80      	cmp	r3, #128	@ 0x80
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b21      	cmp	r3, #33	@ 0x21
 8005342:	d108      	bne.n	8005356 <UART_DMAError+0x46>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f000 f91b 	bl	800558c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005360:	2b40      	cmp	r3, #64	@ 0x40
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b22      	cmp	r3, #34	@ 0x22
 8005376:	d108      	bne.n	800538a <UART_DMAError+0x7a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f000 f929 	bl	80055dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f043 0210 	orr.w	r2, r3, #16
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f7ff fef0 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b4:	e03b      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d037      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fc ff9d 	bl	80022fc <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e03a      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d023      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b80      	cmp	r3, #128	@ 0x80
 80053ea:	d020      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b40      	cmp	r3, #64	@ 0x40
 80053f0:	d01d      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d116      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f8e0 	bl	80055dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2208      	movs	r2, #8
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e00f      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d0b4      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b098      	sub	sp, #96	@ 0x60
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2222      	movs	r2, #34	@ 0x22
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005484:	4a3e      	ldr	r2, [pc, #248]	@ (8005580 <UART_Start_Receive_DMA+0x128>)
 8005486:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548c:	4a3d      	ldr	r2, [pc, #244]	@ (8005584 <UART_Start_Receive_DMA+0x12c>)
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005494:	4a3c      	ldr	r2, [pc, #240]	@ (8005588 <UART_Start_Receive_DMA+0x130>)
 8005496:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549c:	2200      	movs	r2, #0
 800549e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	f7fd f8ec 	bl	8002694 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d019      	beq.n	800550e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005500:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e5      	bne.n	80054da <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800551e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	657b      	str	r3, [r7, #84]	@ 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3314      	adds	r3, #20
 800552c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800552e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e5      	bne.n	800550e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	617b      	str	r3, [r7, #20]
   return(result);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005558:	653b      	str	r3, [r7, #80]	@ 0x50
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005562:	627a      	str	r2, [r7, #36]	@ 0x24
 8005564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6a39      	ldr	r1, [r7, #32]
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3760      	adds	r7, #96	@ 0x60
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	080051a9 	.word	0x080051a9
 8005584:	080052d5 	.word	0x080052d5
 8005588:	08005311 	.word	0x08005311

0800558c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b089      	sub	sp, #36	@ 0x24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	61ba      	str	r2, [r7, #24]
 80055b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	613b      	str	r3, [r7, #16]
   return(result);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e5      	bne.n	8005594 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80055d0:	bf00      	nop
 80055d2:	3724      	adds	r7, #36	@ 0x24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b095      	sub	sp, #84	@ 0x54
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005604:	643a      	str	r2, [r7, #64]	@ 0x40
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800560a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	61fb      	str	r3, [r7, #28]
   return(result);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005638:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800563e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	d119      	bne.n	8005688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	60bb      	str	r3, [r7, #8]
   return(result);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	647b      	str	r3, [r7, #68]	@ 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005674:	61ba      	str	r2, [r7, #24]
 8005676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6979      	ldr	r1, [r7, #20]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	613b      	str	r3, [r7, #16]
   return(result);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005696:	bf00      	nop
 8005698:	3754      	adds	r7, #84	@ 0x54
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff fd5d 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b21      	cmp	r3, #33	@ 0x21
 80056dc:	d13e      	bne.n	800575c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e6:	d114      	bne.n	8005712 <UART_Transmit_IT+0x48>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d110      	bne.n	8005712 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	1c9a      	adds	r2, r3, #2
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	621a      	str	r2, [r3, #32]
 8005710:	e008      	b.n	8005724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6211      	str	r1, [r2, #32]
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29b      	uxth	r3, r3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4619      	mov	r1, r3
 8005732:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10f      	bne.n	8005758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	e000      	b.n	800575e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
  }
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fce2 	bl	8005154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b08c      	sub	sp, #48	@ 0x30
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b22      	cmp	r3, #34	@ 0x22
 80057ac:	f040 80ae 	bne.w	800590c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b8:	d117      	bne.n	80057ea <UART_Receive_IT+0x50>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d113      	bne.n	80057ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80057e8:	e026      	b.n	8005838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fc:	d007      	beq.n	800580e <UART_Receive_IT+0x74>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <UART_Receive_IT+0x82>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e008      	b.n	800582e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005828:	b2da      	uxtb	r2, r3
 800582a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29b      	uxth	r3, r3
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4619      	mov	r1, r3
 8005846:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005848:	2b00      	cmp	r3, #0
 800584a:	d15d      	bne.n	8005908 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0220 	bic.w	r2, r2, #32
 800585a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800586a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0201 	bic.w	r2, r2, #1
 800587a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	2b01      	cmp	r3, #1
 8005890:	d135      	bne.n	80058fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	613b      	str	r3, [r7, #16]
   return(result);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f023 0310 	bic.w	r3, r3, #16
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b8:	623a      	str	r2, [r7, #32]
 80058ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b10      	cmp	r3, #16
 80058d8:	d10a      	bne.n	80058f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff fc4a 	bl	8005190 <HAL_UARTEx_RxEventCallback>
 80058fc:	e002      	b.n	8005904 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fb fae2 	bl	8000ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e002      	b.n	800590e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	e000      	b.n	800590e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3730      	adds	r7, #48	@ 0x30
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b0c0      	sub	sp, #256	@ 0x100
 800591e:	af00      	add	r7, sp, #0
 8005920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	68d9      	ldr	r1, [r3, #12]
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	ea40 0301 	orr.w	r3, r0, r1
 8005940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	431a      	orrs	r2, r3
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	431a      	orrs	r2, r3
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005970:	f021 010c 	bic.w	r1, r1, #12
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800597e:	430b      	orrs	r3, r1
 8005980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	6999      	ldr	r1, [r3, #24]
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	ea40 0301 	orr.w	r3, r0, r1
 800599e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b8f      	ldr	r3, [pc, #572]	@ (8005be4 <UART_SetConfig+0x2cc>)
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d005      	beq.n	80059b8 <UART_SetConfig+0xa0>
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b8d      	ldr	r3, [pc, #564]	@ (8005be8 <UART_SetConfig+0x2d0>)
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d104      	bne.n	80059c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fd fc74 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 80059bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059c0:	e003      	b.n	80059ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059c2:	f7fd fc5b 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 80059c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d4:	f040 810c 	bne.w	8005bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	1891      	adds	r1, r2, r2
 80059f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059f2:	415b      	adcs	r3, r3
 80059f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059fa:	4621      	mov	r1, r4
 80059fc:	eb12 0801 	adds.w	r8, r2, r1
 8005a00:	4629      	mov	r1, r5
 8005a02:	eb43 0901 	adc.w	r9, r3, r1
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a1a:	4690      	mov	r8, r2
 8005a1c:	4699      	mov	r9, r3
 8005a1e:	4623      	mov	r3, r4
 8005a20:	eb18 0303 	adds.w	r3, r8, r3
 8005a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a28:	462b      	mov	r3, r5
 8005a2a:	eb49 0303 	adc.w	r3, r9, r3
 8005a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a46:	460b      	mov	r3, r1
 8005a48:	18db      	adds	r3, r3, r3
 8005a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	eb42 0303 	adc.w	r3, r2, r3
 8005a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a5c:	f7fb f8bc 	bl	8000bd8 <__aeabi_uldivmod>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4b61      	ldr	r3, [pc, #388]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005a66:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	011c      	lsls	r4, r3, #4
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a80:	4642      	mov	r2, r8
 8005a82:	464b      	mov	r3, r9
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a90:	4641      	mov	r1, r8
 8005a92:	eb12 0a01 	adds.w	sl, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb43 0b01 	adc.w	fp, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ab0:	4692      	mov	sl, r2
 8005ab2:	469b      	mov	fp, r3
 8005ab4:	4643      	mov	r3, r8
 8005ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8005aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005abe:	464b      	mov	r3, r9
 8005ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005adc:	460b      	mov	r3, r1
 8005ade:	18db      	adds	r3, r3, r3
 8005ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	eb42 0303 	adc.w	r3, r2, r3
 8005ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005af2:	f7fb f871 	bl	8000bd8 <__aeabi_uldivmod>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005afe:	fba3 2301 	umull	r2, r3, r3, r1
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2264      	movs	r2, #100	@ 0x64
 8005b06:	fb02 f303 	mul.w	r3, r2, r3
 8005b0a:	1acb      	subs	r3, r1, r3
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b12:	4b36      	ldr	r3, [pc, #216]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005b14:	fba3 2302 	umull	r2, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b20:	441c      	add	r4, r3
 8005b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b78:	464b      	mov	r3, r9
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b98:	460b      	mov	r3, r1
 8005b9a:	18db      	adds	r3, r3, r3
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	eb42 0303 	adc.w	r3, r2, r3
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bae:	f7fb f813 	bl	8000bd8 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	@ 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	3332      	adds	r3, #50	@ 0x32
 8005bca:	4a08      	ldr	r2, [pc, #32]	@ (8005bec <UART_SetConfig+0x2d4>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 0207 	and.w	r2, r3, #7
 8005bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4422      	add	r2, r4
 8005bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005be0:	e106      	b.n	8005df0 <UART_SetConfig+0x4d8>
 8005be2:	bf00      	nop
 8005be4:	40011000 	.word	0x40011000
 8005be8:	40011400 	.word	0x40011400
 8005bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c02:	4642      	mov	r2, r8
 8005c04:	464b      	mov	r3, r9
 8005c06:	1891      	adds	r1, r2, r2
 8005c08:	6239      	str	r1, [r7, #32]
 8005c0a:	415b      	adcs	r3, r3
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c12:	4641      	mov	r1, r8
 8005c14:	1854      	adds	r4, r2, r1
 8005c16:	4649      	mov	r1, r9
 8005c18:	eb43 0501 	adc.w	r5, r3, r1
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	00eb      	lsls	r3, r5, #3
 8005c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c2a:	00e2      	lsls	r2, r4, #3
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	461d      	mov	r5, r3
 8005c30:	4643      	mov	r3, r8
 8005c32:	18e3      	adds	r3, r4, r3
 8005c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c38:	464b      	mov	r3, r9
 8005c3a:	eb45 0303 	adc.w	r3, r5, r3
 8005c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c5e:	4629      	mov	r1, r5
 8005c60:	008b      	lsls	r3, r1, #2
 8005c62:	4621      	mov	r1, r4
 8005c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c68:	4621      	mov	r1, r4
 8005c6a:	008a      	lsls	r2, r1, #2
 8005c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c70:	f7fa ffb2 	bl	8000bd8 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4b60      	ldr	r3, [pc, #384]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	011c      	lsls	r4, r3, #4
 8005c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	1891      	adds	r1, r2, r2
 8005c9a:	61b9      	str	r1, [r7, #24]
 8005c9c:	415b      	adcs	r3, r3
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	1851      	adds	r1, r2, r1
 8005ca8:	6139      	str	r1, [r7, #16]
 8005caa:	4649      	mov	r1, r9
 8005cac:	414b      	adcs	r3, r1
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	00cb      	lsls	r3, r1, #3
 8005cc0:	4651      	mov	r1, sl
 8005cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc6:	4651      	mov	r1, sl
 8005cc8:	00ca      	lsls	r2, r1, #3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cd8:	464b      	mov	r3, r9
 8005cda:	460a      	mov	r2, r1
 8005cdc:	eb42 0303 	adc.w	r3, r2, r3
 8005ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	008b      	lsls	r3, r1, #2
 8005d00:	4641      	mov	r1, r8
 8005d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d06:	4641      	mov	r1, r8
 8005d08:	008a      	lsls	r2, r1, #2
 8005d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d0e:	f7fa ff63 	bl	8000bd8 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	4b38      	ldr	r3, [pc, #224]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2264      	movs	r2, #100	@ 0x64
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	1acb      	subs	r3, r1, r3
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	3332      	adds	r3, #50	@ 0x32
 8005d2c:	4a33      	ldr	r2, [pc, #204]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d38:	441c      	add	r4, r3
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3e:	2200      	movs	r2, #0
 8005d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d42:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d48:	4642      	mov	r2, r8
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	1891      	adds	r1, r2, r2
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	415b      	adcs	r3, r3
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d58:	4641      	mov	r1, r8
 8005d5a:	1851      	adds	r1, r2, r1
 8005d5c:	6039      	str	r1, [r7, #0]
 8005d5e:	4649      	mov	r1, r9
 8005d60:	414b      	adcs	r3, r1
 8005d62:	607b      	str	r3, [r7, #4]
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d70:	4659      	mov	r1, fp
 8005d72:	00cb      	lsls	r3, r1, #3
 8005d74:	4651      	mov	r1, sl
 8005d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	00ca      	lsls	r2, r1, #3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	4642      	mov	r2, r8
 8005d86:	189b      	adds	r3, r3, r2
 8005d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	460a      	mov	r2, r1
 8005d8e:	eb42 0303 	adc.w	r3, r2, r3
 8005d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dac:	4649      	mov	r1, r9
 8005dae:	008b      	lsls	r3, r1, #2
 8005db0:	4641      	mov	r1, r8
 8005db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db6:	4641      	mov	r1, r8
 8005db8:	008a      	lsls	r2, r1, #2
 8005dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dbe:	f7fa ff0b 	bl	8000bd8 <__aeabi_uldivmod>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	2164      	movs	r1, #100	@ 0x64
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	3332      	adds	r3, #50	@ 0x32
 8005dda:	4a08      	ldr	r2, [pc, #32]	@ (8005dfc <UART_SetConfig+0x4e4>)
 8005ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f003 020f 	and.w	r2, r3, #15
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4422      	add	r2, r4
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005df6:	46bd      	mov	sp, r7
 8005df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfc:	51eb851f 	.word	0x51eb851f

08005e00 <std>:
 8005e00:	2300      	movs	r3, #0
 8005e02:	b510      	push	{r4, lr}
 8005e04:	4604      	mov	r4, r0
 8005e06:	e9c0 3300 	strd	r3, r3, [r0]
 8005e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e0e:	6083      	str	r3, [r0, #8]
 8005e10:	8181      	strh	r1, [r0, #12]
 8005e12:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e14:	81c2      	strh	r2, [r0, #14]
 8005e16:	6183      	str	r3, [r0, #24]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	305c      	adds	r0, #92	@ 0x5c
 8005e1e:	f000 f906 	bl	800602e <memset>
 8005e22:	4b0d      	ldr	r3, [pc, #52]	@ (8005e58 <std+0x58>)
 8005e24:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e26:	4b0d      	ldr	r3, [pc, #52]	@ (8005e5c <std+0x5c>)
 8005e28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <std+0x60>)
 8005e2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <std+0x64>)
 8005e30:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e32:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <std+0x68>)
 8005e34:	6224      	str	r4, [r4, #32]
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d006      	beq.n	8005e48 <std+0x48>
 8005e3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e3e:	4294      	cmp	r4, r2
 8005e40:	d002      	beq.n	8005e48 <std+0x48>
 8005e42:	33d0      	adds	r3, #208	@ 0xd0
 8005e44:	429c      	cmp	r4, r3
 8005e46:	d105      	bne.n	8005e54 <std+0x54>
 8005e48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e50:	f000 b966 	b.w	8006120 <__retarget_lock_init_recursive>
 8005e54:	bd10      	pop	{r4, pc}
 8005e56:	bf00      	nop
 8005e58:	08005fa9 	.word	0x08005fa9
 8005e5c:	08005fcb 	.word	0x08005fcb
 8005e60:	08006003 	.word	0x08006003
 8005e64:	08006027 	.word	0x08006027
 8005e68:	200002ac 	.word	0x200002ac

08005e6c <stdio_exit_handler>:
 8005e6c:	4a02      	ldr	r2, [pc, #8]	@ (8005e78 <stdio_exit_handler+0xc>)
 8005e6e:	4903      	ldr	r1, [pc, #12]	@ (8005e7c <stdio_exit_handler+0x10>)
 8005e70:	4803      	ldr	r0, [pc, #12]	@ (8005e80 <stdio_exit_handler+0x14>)
 8005e72:	f000 b869 	b.w	8005f48 <_fwalk_sglue>
 8005e76:	bf00      	nop
 8005e78:	2000001c 	.word	0x2000001c
 8005e7c:	080069c1 	.word	0x080069c1
 8005e80:	2000002c 	.word	0x2000002c

08005e84 <cleanup_stdio>:
 8005e84:	6841      	ldr	r1, [r0, #4]
 8005e86:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb8 <cleanup_stdio+0x34>)
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	d001      	beq.n	8005e94 <cleanup_stdio+0x10>
 8005e90:	f000 fd96 	bl	80069c0 <_fflush_r>
 8005e94:	68a1      	ldr	r1, [r4, #8]
 8005e96:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <cleanup_stdio+0x38>)
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	d002      	beq.n	8005ea2 <cleanup_stdio+0x1e>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 fd8f 	bl	80069c0 <_fflush_r>
 8005ea2:	68e1      	ldr	r1, [r4, #12]
 8005ea4:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <cleanup_stdio+0x3c>)
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	d004      	beq.n	8005eb4 <cleanup_stdio+0x30>
 8005eaa:	4620      	mov	r0, r4
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb0:	f000 bd86 	b.w	80069c0 <_fflush_r>
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200002ac 	.word	0x200002ac
 8005ebc:	20000314 	.word	0x20000314
 8005ec0:	2000037c 	.word	0x2000037c

08005ec4 <global_stdio_init.part.0>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef4 <global_stdio_init.part.0+0x30>)
 8005ec8:	4c0b      	ldr	r4, [pc, #44]	@ (8005ef8 <global_stdio_init.part.0+0x34>)
 8005eca:	4a0c      	ldr	r2, [pc, #48]	@ (8005efc <global_stdio_init.part.0+0x38>)
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	f7ff ff94 	bl	8005e00 <std>
 8005ed8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005edc:	2201      	movs	r2, #1
 8005ede:	2109      	movs	r1, #9
 8005ee0:	f7ff ff8e 	bl	8005e00 <std>
 8005ee4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ee8:	2202      	movs	r2, #2
 8005eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eee:	2112      	movs	r1, #18
 8005ef0:	f7ff bf86 	b.w	8005e00 <std>
 8005ef4:	200003e4 	.word	0x200003e4
 8005ef8:	200002ac 	.word	0x200002ac
 8005efc:	08005e6d 	.word	0x08005e6d

08005f00 <__sfp_lock_acquire>:
 8005f00:	4801      	ldr	r0, [pc, #4]	@ (8005f08 <__sfp_lock_acquire+0x8>)
 8005f02:	f000 b90e 	b.w	8006122 <__retarget_lock_acquire_recursive>
 8005f06:	bf00      	nop
 8005f08:	200003ed 	.word	0x200003ed

08005f0c <__sfp_lock_release>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	@ (8005f14 <__sfp_lock_release+0x8>)
 8005f0e:	f000 b909 	b.w	8006124 <__retarget_lock_release_recursive>
 8005f12:	bf00      	nop
 8005f14:	200003ed 	.word	0x200003ed

08005f18 <__sinit>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	f7ff fff0 	bl	8005f00 <__sfp_lock_acquire>
 8005f20:	6a23      	ldr	r3, [r4, #32]
 8005f22:	b11b      	cbz	r3, 8005f2c <__sinit+0x14>
 8005f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f28:	f7ff bff0 	b.w	8005f0c <__sfp_lock_release>
 8005f2c:	4b04      	ldr	r3, [pc, #16]	@ (8005f40 <__sinit+0x28>)
 8005f2e:	6223      	str	r3, [r4, #32]
 8005f30:	4b04      	ldr	r3, [pc, #16]	@ (8005f44 <__sinit+0x2c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f5      	bne.n	8005f24 <__sinit+0xc>
 8005f38:	f7ff ffc4 	bl	8005ec4 <global_stdio_init.part.0>
 8005f3c:	e7f2      	b.n	8005f24 <__sinit+0xc>
 8005f3e:	bf00      	nop
 8005f40:	08005e85 	.word	0x08005e85
 8005f44:	200003e4 	.word	0x200003e4

08005f48 <_fwalk_sglue>:
 8005f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	4688      	mov	r8, r1
 8005f50:	4614      	mov	r4, r2
 8005f52:	2600      	movs	r6, #0
 8005f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f58:	f1b9 0901 	subs.w	r9, r9, #1
 8005f5c:	d505      	bpl.n	8005f6a <_fwalk_sglue+0x22>
 8005f5e:	6824      	ldr	r4, [r4, #0]
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	d1f7      	bne.n	8005f54 <_fwalk_sglue+0xc>
 8005f64:	4630      	mov	r0, r6
 8005f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d907      	bls.n	8005f80 <_fwalk_sglue+0x38>
 8005f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f74:	3301      	adds	r3, #1
 8005f76:	d003      	beq.n	8005f80 <_fwalk_sglue+0x38>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c0      	blx	r8
 8005f7e:	4306      	orrs	r6, r0
 8005f80:	3568      	adds	r5, #104	@ 0x68
 8005f82:	e7e9      	b.n	8005f58 <_fwalk_sglue+0x10>

08005f84 <iprintf>:
 8005f84:	b40f      	push	{r0, r1, r2, r3}
 8005f86:	b507      	push	{r0, r1, r2, lr}
 8005f88:	4906      	ldr	r1, [pc, #24]	@ (8005fa4 <iprintf+0x20>)
 8005f8a:	ab04      	add	r3, sp, #16
 8005f8c:	6808      	ldr	r0, [r1, #0]
 8005f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f92:	6881      	ldr	r1, [r0, #8]
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	f000 f9e9 	bl	800636c <_vfiprintf_r>
 8005f9a:	b003      	add	sp, #12
 8005f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fa0:	b004      	add	sp, #16
 8005fa2:	4770      	bx	lr
 8005fa4:	20000028 	.word	0x20000028

08005fa8 <__sread>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	460c      	mov	r4, r1
 8005fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb0:	f000 f868 	bl	8006084 <_read_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	bfab      	itete	ge
 8005fb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fba:	89a3      	ldrhlt	r3, [r4, #12]
 8005fbc:	181b      	addge	r3, r3, r0
 8005fbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fc2:	bfac      	ite	ge
 8005fc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fc6:	81a3      	strhlt	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__swrite>:
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	461f      	mov	r7, r3
 8005fd0:	898b      	ldrh	r3, [r1, #12]
 8005fd2:	05db      	lsls	r3, r3, #23
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	4616      	mov	r6, r2
 8005fda:	d505      	bpl.n	8005fe8 <__swrite+0x1e>
 8005fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f000 f83c 	bl	8006060 <_lseek_r>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffe:	f000 b853 	b.w	80060a8 <_write_r>

08006002 <__sseek>:
 8006002:	b510      	push	{r4, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600a:	f000 f829 	bl	8006060 <_lseek_r>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	bf15      	itete	ne
 8006014:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006016:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800601a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800601e:	81a3      	strheq	r3, [r4, #12]
 8006020:	bf18      	it	ne
 8006022:	81a3      	strhne	r3, [r4, #12]
 8006024:	bd10      	pop	{r4, pc}

08006026 <__sclose>:
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 b809 	b.w	8006040 <_close_r>

0800602e <memset>:
 800602e:	4402      	add	r2, r0
 8006030:	4603      	mov	r3, r0
 8006032:	4293      	cmp	r3, r2
 8006034:	d100      	bne.n	8006038 <memset+0xa>
 8006036:	4770      	bx	lr
 8006038:	f803 1b01 	strb.w	r1, [r3], #1
 800603c:	e7f9      	b.n	8006032 <memset+0x4>
	...

08006040 <_close_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d06      	ldr	r5, [pc, #24]	@ (800605c <_close_r+0x1c>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fc f849 	bl	80020e2 <_close>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_close_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_close_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	200003e8 	.word	0x200003e8

08006060 <_lseek_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d07      	ldr	r5, [pc, #28]	@ (8006080 <_lseek_r+0x20>)
 8006064:	4604      	mov	r4, r0
 8006066:	4608      	mov	r0, r1
 8006068:	4611      	mov	r1, r2
 800606a:	2200      	movs	r2, #0
 800606c:	602a      	str	r2, [r5, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f7fc f85e 	bl	8002130 <_lseek>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_lseek_r+0x1e>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_lseek_r+0x1e>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	200003e8 	.word	0x200003e8

08006084 <_read_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4d07      	ldr	r5, [pc, #28]	@ (80060a4 <_read_r+0x20>)
 8006088:	4604      	mov	r4, r0
 800608a:	4608      	mov	r0, r1
 800608c:	4611      	mov	r1, r2
 800608e:	2200      	movs	r2, #0
 8006090:	602a      	str	r2, [r5, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	f7fc f808 	bl	80020a8 <_read>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_read_r+0x1e>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_read_r+0x1e>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	200003e8 	.word	0x200003e8

080060a8 <_write_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d07      	ldr	r5, [pc, #28]	@ (80060c8 <_write_r+0x20>)
 80060ac:	4604      	mov	r4, r0
 80060ae:	4608      	mov	r0, r1
 80060b0:	4611      	mov	r1, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7fb fe42 	bl	8001d40 <_write>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_write_r+0x1e>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_write_r+0x1e>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	200003e8 	.word	0x200003e8

080060cc <__errno>:
 80060cc:	4b01      	ldr	r3, [pc, #4]	@ (80060d4 <__errno+0x8>)
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000028 	.word	0x20000028

080060d8 <__libc_init_array>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	4d0d      	ldr	r5, [pc, #52]	@ (8006110 <__libc_init_array+0x38>)
 80060dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006114 <__libc_init_array+0x3c>)
 80060de:	1b64      	subs	r4, r4, r5
 80060e0:	10a4      	asrs	r4, r4, #2
 80060e2:	2600      	movs	r6, #0
 80060e4:	42a6      	cmp	r6, r4
 80060e6:	d109      	bne.n	80060fc <__libc_init_array+0x24>
 80060e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006118 <__libc_init_array+0x40>)
 80060ea:	4c0c      	ldr	r4, [pc, #48]	@ (800611c <__libc_init_array+0x44>)
 80060ec:	f001 ff44 	bl	8007f78 <_init>
 80060f0:	1b64      	subs	r4, r4, r5
 80060f2:	10a4      	asrs	r4, r4, #2
 80060f4:	2600      	movs	r6, #0
 80060f6:	42a6      	cmp	r6, r4
 80060f8:	d105      	bne.n	8006106 <__libc_init_array+0x2e>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006100:	4798      	blx	r3
 8006102:	3601      	adds	r6, #1
 8006104:	e7ee      	b.n	80060e4 <__libc_init_array+0xc>
 8006106:	f855 3b04 	ldr.w	r3, [r5], #4
 800610a:	4798      	blx	r3
 800610c:	3601      	adds	r6, #1
 800610e:	e7f2      	b.n	80060f6 <__libc_init_array+0x1e>
 8006110:	080081d8 	.word	0x080081d8
 8006114:	080081d8 	.word	0x080081d8
 8006118:	080081d8 	.word	0x080081d8
 800611c:	080081dc 	.word	0x080081dc

08006120 <__retarget_lock_init_recursive>:
 8006120:	4770      	bx	lr

08006122 <__retarget_lock_acquire_recursive>:
 8006122:	4770      	bx	lr

08006124 <__retarget_lock_release_recursive>:
 8006124:	4770      	bx	lr
	...

08006128 <_free_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4605      	mov	r5, r0
 800612c:	2900      	cmp	r1, #0
 800612e:	d041      	beq.n	80061b4 <_free_r+0x8c>
 8006130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006134:	1f0c      	subs	r4, r1, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	bfb8      	it	lt
 800613a:	18e4      	addlt	r4, r4, r3
 800613c:	f000 f8e0 	bl	8006300 <__malloc_lock>
 8006140:	4a1d      	ldr	r2, [pc, #116]	@ (80061b8 <_free_r+0x90>)
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	b933      	cbnz	r3, 8006154 <_free_r+0x2c>
 8006146:	6063      	str	r3, [r4, #4]
 8006148:	6014      	str	r4, [r2, #0]
 800614a:	4628      	mov	r0, r5
 800614c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006150:	f000 b8dc 	b.w	800630c <__malloc_unlock>
 8006154:	42a3      	cmp	r3, r4
 8006156:	d908      	bls.n	800616a <_free_r+0x42>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	1821      	adds	r1, r4, r0
 800615c:	428b      	cmp	r3, r1
 800615e:	bf01      	itttt	eq
 8006160:	6819      	ldreq	r1, [r3, #0]
 8006162:	685b      	ldreq	r3, [r3, #4]
 8006164:	1809      	addeq	r1, r1, r0
 8006166:	6021      	streq	r1, [r4, #0]
 8006168:	e7ed      	b.n	8006146 <_free_r+0x1e>
 800616a:	461a      	mov	r2, r3
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	b10b      	cbz	r3, 8006174 <_free_r+0x4c>
 8006170:	42a3      	cmp	r3, r4
 8006172:	d9fa      	bls.n	800616a <_free_r+0x42>
 8006174:	6811      	ldr	r1, [r2, #0]
 8006176:	1850      	adds	r0, r2, r1
 8006178:	42a0      	cmp	r0, r4
 800617a:	d10b      	bne.n	8006194 <_free_r+0x6c>
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	4401      	add	r1, r0
 8006180:	1850      	adds	r0, r2, r1
 8006182:	4283      	cmp	r3, r0
 8006184:	6011      	str	r1, [r2, #0]
 8006186:	d1e0      	bne.n	800614a <_free_r+0x22>
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	6053      	str	r3, [r2, #4]
 800618e:	4408      	add	r0, r1
 8006190:	6010      	str	r0, [r2, #0]
 8006192:	e7da      	b.n	800614a <_free_r+0x22>
 8006194:	d902      	bls.n	800619c <_free_r+0x74>
 8006196:	230c      	movs	r3, #12
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	e7d6      	b.n	800614a <_free_r+0x22>
 800619c:	6820      	ldr	r0, [r4, #0]
 800619e:	1821      	adds	r1, r4, r0
 80061a0:	428b      	cmp	r3, r1
 80061a2:	bf04      	itt	eq
 80061a4:	6819      	ldreq	r1, [r3, #0]
 80061a6:	685b      	ldreq	r3, [r3, #4]
 80061a8:	6063      	str	r3, [r4, #4]
 80061aa:	bf04      	itt	eq
 80061ac:	1809      	addeq	r1, r1, r0
 80061ae:	6021      	streq	r1, [r4, #0]
 80061b0:	6054      	str	r4, [r2, #4]
 80061b2:	e7ca      	b.n	800614a <_free_r+0x22>
 80061b4:	bd38      	pop	{r3, r4, r5, pc}
 80061b6:	bf00      	nop
 80061b8:	200003f4 	.word	0x200003f4

080061bc <sbrk_aligned>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	4e0f      	ldr	r6, [pc, #60]	@ (80061fc <sbrk_aligned+0x40>)
 80061c0:	460c      	mov	r4, r1
 80061c2:	6831      	ldr	r1, [r6, #0]
 80061c4:	4605      	mov	r5, r0
 80061c6:	b911      	cbnz	r1, 80061ce <sbrk_aligned+0x12>
 80061c8:	f000 fcb6 	bl	8006b38 <_sbrk_r>
 80061cc:	6030      	str	r0, [r6, #0]
 80061ce:	4621      	mov	r1, r4
 80061d0:	4628      	mov	r0, r5
 80061d2:	f000 fcb1 	bl	8006b38 <_sbrk_r>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	d103      	bne.n	80061e2 <sbrk_aligned+0x26>
 80061da:	f04f 34ff 	mov.w	r4, #4294967295
 80061de:	4620      	mov	r0, r4
 80061e0:	bd70      	pop	{r4, r5, r6, pc}
 80061e2:	1cc4      	adds	r4, r0, #3
 80061e4:	f024 0403 	bic.w	r4, r4, #3
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d0f8      	beq.n	80061de <sbrk_aligned+0x22>
 80061ec:	1a21      	subs	r1, r4, r0
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 fca2 	bl	8006b38 <_sbrk_r>
 80061f4:	3001      	adds	r0, #1
 80061f6:	d1f2      	bne.n	80061de <sbrk_aligned+0x22>
 80061f8:	e7ef      	b.n	80061da <sbrk_aligned+0x1e>
 80061fa:	bf00      	nop
 80061fc:	200003f0 	.word	0x200003f0

08006200 <_malloc_r>:
 8006200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006204:	1ccd      	adds	r5, r1, #3
 8006206:	f025 0503 	bic.w	r5, r5, #3
 800620a:	3508      	adds	r5, #8
 800620c:	2d0c      	cmp	r5, #12
 800620e:	bf38      	it	cc
 8006210:	250c      	movcc	r5, #12
 8006212:	2d00      	cmp	r5, #0
 8006214:	4606      	mov	r6, r0
 8006216:	db01      	blt.n	800621c <_malloc_r+0x1c>
 8006218:	42a9      	cmp	r1, r5
 800621a:	d904      	bls.n	8006226 <_malloc_r+0x26>
 800621c:	230c      	movs	r3, #12
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	2000      	movs	r0, #0
 8006222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062fc <_malloc_r+0xfc>
 800622a:	f000 f869 	bl	8006300 <__malloc_lock>
 800622e:	f8d8 3000 	ldr.w	r3, [r8]
 8006232:	461c      	mov	r4, r3
 8006234:	bb44      	cbnz	r4, 8006288 <_malloc_r+0x88>
 8006236:	4629      	mov	r1, r5
 8006238:	4630      	mov	r0, r6
 800623a:	f7ff ffbf 	bl	80061bc <sbrk_aligned>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	4604      	mov	r4, r0
 8006242:	d158      	bne.n	80062f6 <_malloc_r+0xf6>
 8006244:	f8d8 4000 	ldr.w	r4, [r8]
 8006248:	4627      	mov	r7, r4
 800624a:	2f00      	cmp	r7, #0
 800624c:	d143      	bne.n	80062d6 <_malloc_r+0xd6>
 800624e:	2c00      	cmp	r4, #0
 8006250:	d04b      	beq.n	80062ea <_malloc_r+0xea>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	4639      	mov	r1, r7
 8006256:	4630      	mov	r0, r6
 8006258:	eb04 0903 	add.w	r9, r4, r3
 800625c:	f000 fc6c 	bl	8006b38 <_sbrk_r>
 8006260:	4581      	cmp	r9, r0
 8006262:	d142      	bne.n	80062ea <_malloc_r+0xea>
 8006264:	6821      	ldr	r1, [r4, #0]
 8006266:	1a6d      	subs	r5, r5, r1
 8006268:	4629      	mov	r1, r5
 800626a:	4630      	mov	r0, r6
 800626c:	f7ff ffa6 	bl	80061bc <sbrk_aligned>
 8006270:	3001      	adds	r0, #1
 8006272:	d03a      	beq.n	80062ea <_malloc_r+0xea>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	442b      	add	r3, r5
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	f8d8 3000 	ldr.w	r3, [r8]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	bb62      	cbnz	r2, 80062dc <_malloc_r+0xdc>
 8006282:	f8c8 7000 	str.w	r7, [r8]
 8006286:	e00f      	b.n	80062a8 <_malloc_r+0xa8>
 8006288:	6822      	ldr	r2, [r4, #0]
 800628a:	1b52      	subs	r2, r2, r5
 800628c:	d420      	bmi.n	80062d0 <_malloc_r+0xd0>
 800628e:	2a0b      	cmp	r2, #11
 8006290:	d917      	bls.n	80062c2 <_malloc_r+0xc2>
 8006292:	1961      	adds	r1, r4, r5
 8006294:	42a3      	cmp	r3, r4
 8006296:	6025      	str	r5, [r4, #0]
 8006298:	bf18      	it	ne
 800629a:	6059      	strne	r1, [r3, #4]
 800629c:	6863      	ldr	r3, [r4, #4]
 800629e:	bf08      	it	eq
 80062a0:	f8c8 1000 	streq.w	r1, [r8]
 80062a4:	5162      	str	r2, [r4, r5]
 80062a6:	604b      	str	r3, [r1, #4]
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 f82f 	bl	800630c <__malloc_unlock>
 80062ae:	f104 000b 	add.w	r0, r4, #11
 80062b2:	1d23      	adds	r3, r4, #4
 80062b4:	f020 0007 	bic.w	r0, r0, #7
 80062b8:	1ac2      	subs	r2, r0, r3
 80062ba:	bf1c      	itt	ne
 80062bc:	1a1b      	subne	r3, r3, r0
 80062be:	50a3      	strne	r3, [r4, r2]
 80062c0:	e7af      	b.n	8006222 <_malloc_r+0x22>
 80062c2:	6862      	ldr	r2, [r4, #4]
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	bf0c      	ite	eq
 80062c8:	f8c8 2000 	streq.w	r2, [r8]
 80062cc:	605a      	strne	r2, [r3, #4]
 80062ce:	e7eb      	b.n	80062a8 <_malloc_r+0xa8>
 80062d0:	4623      	mov	r3, r4
 80062d2:	6864      	ldr	r4, [r4, #4]
 80062d4:	e7ae      	b.n	8006234 <_malloc_r+0x34>
 80062d6:	463c      	mov	r4, r7
 80062d8:	687f      	ldr	r7, [r7, #4]
 80062da:	e7b6      	b.n	800624a <_malloc_r+0x4a>
 80062dc:	461a      	mov	r2, r3
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d1fb      	bne.n	80062dc <_malloc_r+0xdc>
 80062e4:	2300      	movs	r3, #0
 80062e6:	6053      	str	r3, [r2, #4]
 80062e8:	e7de      	b.n	80062a8 <_malloc_r+0xa8>
 80062ea:	230c      	movs	r3, #12
 80062ec:	6033      	str	r3, [r6, #0]
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 f80c 	bl	800630c <__malloc_unlock>
 80062f4:	e794      	b.n	8006220 <_malloc_r+0x20>
 80062f6:	6005      	str	r5, [r0, #0]
 80062f8:	e7d6      	b.n	80062a8 <_malloc_r+0xa8>
 80062fa:	bf00      	nop
 80062fc:	200003f4 	.word	0x200003f4

08006300 <__malloc_lock>:
 8006300:	4801      	ldr	r0, [pc, #4]	@ (8006308 <__malloc_lock+0x8>)
 8006302:	f7ff bf0e 	b.w	8006122 <__retarget_lock_acquire_recursive>
 8006306:	bf00      	nop
 8006308:	200003ec 	.word	0x200003ec

0800630c <__malloc_unlock>:
 800630c:	4801      	ldr	r0, [pc, #4]	@ (8006314 <__malloc_unlock+0x8>)
 800630e:	f7ff bf09 	b.w	8006124 <__retarget_lock_release_recursive>
 8006312:	bf00      	nop
 8006314:	200003ec 	.word	0x200003ec

08006318 <__sfputc_r>:
 8006318:	6893      	ldr	r3, [r2, #8]
 800631a:	3b01      	subs	r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	b410      	push	{r4}
 8006320:	6093      	str	r3, [r2, #8]
 8006322:	da08      	bge.n	8006336 <__sfputc_r+0x1e>
 8006324:	6994      	ldr	r4, [r2, #24]
 8006326:	42a3      	cmp	r3, r4
 8006328:	db01      	blt.n	800632e <__sfputc_r+0x16>
 800632a:	290a      	cmp	r1, #10
 800632c:	d103      	bne.n	8006336 <__sfputc_r+0x1e>
 800632e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006332:	f000 bb6d 	b.w	8006a10 <__swbuf_r>
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	1c58      	adds	r0, r3, #1
 800633a:	6010      	str	r0, [r2, #0]
 800633c:	7019      	strb	r1, [r3, #0]
 800633e:	4608      	mov	r0, r1
 8006340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006344:	4770      	bx	lr

08006346 <__sfputs_r>:
 8006346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006348:	4606      	mov	r6, r0
 800634a:	460f      	mov	r7, r1
 800634c:	4614      	mov	r4, r2
 800634e:	18d5      	adds	r5, r2, r3
 8006350:	42ac      	cmp	r4, r5
 8006352:	d101      	bne.n	8006358 <__sfputs_r+0x12>
 8006354:	2000      	movs	r0, #0
 8006356:	e007      	b.n	8006368 <__sfputs_r+0x22>
 8006358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635c:	463a      	mov	r2, r7
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ffda 	bl	8006318 <__sfputc_r>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d1f3      	bne.n	8006350 <__sfputs_r+0xa>
 8006368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800636c <_vfiprintf_r>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	460d      	mov	r5, r1
 8006372:	b09d      	sub	sp, #116	@ 0x74
 8006374:	4614      	mov	r4, r2
 8006376:	4698      	mov	r8, r3
 8006378:	4606      	mov	r6, r0
 800637a:	b118      	cbz	r0, 8006384 <_vfiprintf_r+0x18>
 800637c:	6a03      	ldr	r3, [r0, #32]
 800637e:	b90b      	cbnz	r3, 8006384 <_vfiprintf_r+0x18>
 8006380:	f7ff fdca 	bl	8005f18 <__sinit>
 8006384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006386:	07d9      	lsls	r1, r3, #31
 8006388:	d405      	bmi.n	8006396 <_vfiprintf_r+0x2a>
 800638a:	89ab      	ldrh	r3, [r5, #12]
 800638c:	059a      	lsls	r2, r3, #22
 800638e:	d402      	bmi.n	8006396 <_vfiprintf_r+0x2a>
 8006390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006392:	f7ff fec6 	bl	8006122 <__retarget_lock_acquire_recursive>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	071b      	lsls	r3, r3, #28
 800639a:	d501      	bpl.n	80063a0 <_vfiprintf_r+0x34>
 800639c:	692b      	ldr	r3, [r5, #16]
 800639e:	b99b      	cbnz	r3, 80063c8 <_vfiprintf_r+0x5c>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4630      	mov	r0, r6
 80063a4:	f000 fb72 	bl	8006a8c <__swsetup_r>
 80063a8:	b170      	cbz	r0, 80063c8 <_vfiprintf_r+0x5c>
 80063aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063ac:	07dc      	lsls	r4, r3, #31
 80063ae:	d504      	bpl.n	80063ba <_vfiprintf_r+0x4e>
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	b01d      	add	sp, #116	@ 0x74
 80063b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	0598      	lsls	r0, r3, #22
 80063be:	d4f7      	bmi.n	80063b0 <_vfiprintf_r+0x44>
 80063c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063c2:	f7ff feaf 	bl	8006124 <__retarget_lock_release_recursive>
 80063c6:	e7f3      	b.n	80063b0 <_vfiprintf_r+0x44>
 80063c8:	2300      	movs	r3, #0
 80063ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80063cc:	2320      	movs	r3, #32
 80063ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063d6:	2330      	movs	r3, #48	@ 0x30
 80063d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006588 <_vfiprintf_r+0x21c>
 80063dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063e0:	f04f 0901 	mov.w	r9, #1
 80063e4:	4623      	mov	r3, r4
 80063e6:	469a      	mov	sl, r3
 80063e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063ec:	b10a      	cbz	r2, 80063f2 <_vfiprintf_r+0x86>
 80063ee:	2a25      	cmp	r2, #37	@ 0x25
 80063f0:	d1f9      	bne.n	80063e6 <_vfiprintf_r+0x7a>
 80063f2:	ebba 0b04 	subs.w	fp, sl, r4
 80063f6:	d00b      	beq.n	8006410 <_vfiprintf_r+0xa4>
 80063f8:	465b      	mov	r3, fp
 80063fa:	4622      	mov	r2, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	4630      	mov	r0, r6
 8006400:	f7ff ffa1 	bl	8006346 <__sfputs_r>
 8006404:	3001      	adds	r0, #1
 8006406:	f000 80a7 	beq.w	8006558 <_vfiprintf_r+0x1ec>
 800640a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800640c:	445a      	add	r2, fp
 800640e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006410:	f89a 3000 	ldrb.w	r3, [sl]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 809f 	beq.w	8006558 <_vfiprintf_r+0x1ec>
 800641a:	2300      	movs	r3, #0
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006424:	f10a 0a01 	add.w	sl, sl, #1
 8006428:	9304      	str	r3, [sp, #16]
 800642a:	9307      	str	r3, [sp, #28]
 800642c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006430:	931a      	str	r3, [sp, #104]	@ 0x68
 8006432:	4654      	mov	r4, sl
 8006434:	2205      	movs	r2, #5
 8006436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643a:	4853      	ldr	r0, [pc, #332]	@ (8006588 <_vfiprintf_r+0x21c>)
 800643c:	f7f9 fee8 	bl	8000210 <memchr>
 8006440:	9a04      	ldr	r2, [sp, #16]
 8006442:	b9d8      	cbnz	r0, 800647c <_vfiprintf_r+0x110>
 8006444:	06d1      	lsls	r1, r2, #27
 8006446:	bf44      	itt	mi
 8006448:	2320      	movmi	r3, #32
 800644a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800644e:	0713      	lsls	r3, r2, #28
 8006450:	bf44      	itt	mi
 8006452:	232b      	movmi	r3, #43	@ 0x2b
 8006454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006458:	f89a 3000 	ldrb.w	r3, [sl]
 800645c:	2b2a      	cmp	r3, #42	@ 0x2a
 800645e:	d015      	beq.n	800648c <_vfiprintf_r+0x120>
 8006460:	9a07      	ldr	r2, [sp, #28]
 8006462:	4654      	mov	r4, sl
 8006464:	2000      	movs	r0, #0
 8006466:	f04f 0c0a 	mov.w	ip, #10
 800646a:	4621      	mov	r1, r4
 800646c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006470:	3b30      	subs	r3, #48	@ 0x30
 8006472:	2b09      	cmp	r3, #9
 8006474:	d94b      	bls.n	800650e <_vfiprintf_r+0x1a2>
 8006476:	b1b0      	cbz	r0, 80064a6 <_vfiprintf_r+0x13a>
 8006478:	9207      	str	r2, [sp, #28]
 800647a:	e014      	b.n	80064a6 <_vfiprintf_r+0x13a>
 800647c:	eba0 0308 	sub.w	r3, r0, r8
 8006480:	fa09 f303 	lsl.w	r3, r9, r3
 8006484:	4313      	orrs	r3, r2
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	46a2      	mov	sl, r4
 800648a:	e7d2      	b.n	8006432 <_vfiprintf_r+0xc6>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	1d19      	adds	r1, r3, #4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	9103      	str	r1, [sp, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	bfbb      	ittet	lt
 8006498:	425b      	neglt	r3, r3
 800649a:	f042 0202 	orrlt.w	r2, r2, #2
 800649e:	9307      	strge	r3, [sp, #28]
 80064a0:	9307      	strlt	r3, [sp, #28]
 80064a2:	bfb8      	it	lt
 80064a4:	9204      	strlt	r2, [sp, #16]
 80064a6:	7823      	ldrb	r3, [r4, #0]
 80064a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80064aa:	d10a      	bne.n	80064c2 <_vfiprintf_r+0x156>
 80064ac:	7863      	ldrb	r3, [r4, #1]
 80064ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80064b0:	d132      	bne.n	8006518 <_vfiprintf_r+0x1ac>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	1d1a      	adds	r2, r3, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	9203      	str	r2, [sp, #12]
 80064ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064be:	3402      	adds	r4, #2
 80064c0:	9305      	str	r3, [sp, #20]
 80064c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006598 <_vfiprintf_r+0x22c>
 80064c6:	7821      	ldrb	r1, [r4, #0]
 80064c8:	2203      	movs	r2, #3
 80064ca:	4650      	mov	r0, sl
 80064cc:	f7f9 fea0 	bl	8000210 <memchr>
 80064d0:	b138      	cbz	r0, 80064e2 <_vfiprintf_r+0x176>
 80064d2:	9b04      	ldr	r3, [sp, #16]
 80064d4:	eba0 000a 	sub.w	r0, r0, sl
 80064d8:	2240      	movs	r2, #64	@ 0x40
 80064da:	4082      	lsls	r2, r0
 80064dc:	4313      	orrs	r3, r2
 80064de:	3401      	adds	r4, #1
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064e6:	4829      	ldr	r0, [pc, #164]	@ (800658c <_vfiprintf_r+0x220>)
 80064e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064ec:	2206      	movs	r2, #6
 80064ee:	f7f9 fe8f 	bl	8000210 <memchr>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d03f      	beq.n	8006576 <_vfiprintf_r+0x20a>
 80064f6:	4b26      	ldr	r3, [pc, #152]	@ (8006590 <_vfiprintf_r+0x224>)
 80064f8:	bb1b      	cbnz	r3, 8006542 <_vfiprintf_r+0x1d6>
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	3307      	adds	r3, #7
 80064fe:	f023 0307 	bic.w	r3, r3, #7
 8006502:	3308      	adds	r3, #8
 8006504:	9303      	str	r3, [sp, #12]
 8006506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006508:	443b      	add	r3, r7
 800650a:	9309      	str	r3, [sp, #36]	@ 0x24
 800650c:	e76a      	b.n	80063e4 <_vfiprintf_r+0x78>
 800650e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006512:	460c      	mov	r4, r1
 8006514:	2001      	movs	r0, #1
 8006516:	e7a8      	b.n	800646a <_vfiprintf_r+0xfe>
 8006518:	2300      	movs	r3, #0
 800651a:	3401      	adds	r4, #1
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	4619      	mov	r1, r3
 8006520:	f04f 0c0a 	mov.w	ip, #10
 8006524:	4620      	mov	r0, r4
 8006526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800652a:	3a30      	subs	r2, #48	@ 0x30
 800652c:	2a09      	cmp	r2, #9
 800652e:	d903      	bls.n	8006538 <_vfiprintf_r+0x1cc>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0c6      	beq.n	80064c2 <_vfiprintf_r+0x156>
 8006534:	9105      	str	r1, [sp, #20]
 8006536:	e7c4      	b.n	80064c2 <_vfiprintf_r+0x156>
 8006538:	fb0c 2101 	mla	r1, ip, r1, r2
 800653c:	4604      	mov	r4, r0
 800653e:	2301      	movs	r3, #1
 8006540:	e7f0      	b.n	8006524 <_vfiprintf_r+0x1b8>
 8006542:	ab03      	add	r3, sp, #12
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	462a      	mov	r2, r5
 8006548:	4b12      	ldr	r3, [pc, #72]	@ (8006594 <_vfiprintf_r+0x228>)
 800654a:	a904      	add	r1, sp, #16
 800654c:	4630      	mov	r0, r6
 800654e:	f3af 8000 	nop.w
 8006552:	4607      	mov	r7, r0
 8006554:	1c78      	adds	r0, r7, #1
 8006556:	d1d6      	bne.n	8006506 <_vfiprintf_r+0x19a>
 8006558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800655a:	07d9      	lsls	r1, r3, #31
 800655c:	d405      	bmi.n	800656a <_vfiprintf_r+0x1fe>
 800655e:	89ab      	ldrh	r3, [r5, #12]
 8006560:	059a      	lsls	r2, r3, #22
 8006562:	d402      	bmi.n	800656a <_vfiprintf_r+0x1fe>
 8006564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006566:	f7ff fddd 	bl	8006124 <__retarget_lock_release_recursive>
 800656a:	89ab      	ldrh	r3, [r5, #12]
 800656c:	065b      	lsls	r3, r3, #25
 800656e:	f53f af1f 	bmi.w	80063b0 <_vfiprintf_r+0x44>
 8006572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006574:	e71e      	b.n	80063b4 <_vfiprintf_r+0x48>
 8006576:	ab03      	add	r3, sp, #12
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	462a      	mov	r2, r5
 800657c:	4b05      	ldr	r3, [pc, #20]	@ (8006594 <_vfiprintf_r+0x228>)
 800657e:	a904      	add	r1, sp, #16
 8006580:	4630      	mov	r0, r6
 8006582:	f000 f879 	bl	8006678 <_printf_i>
 8006586:	e7e4      	b.n	8006552 <_vfiprintf_r+0x1e6>
 8006588:	08007fc4 	.word	0x08007fc4
 800658c:	08007fce 	.word	0x08007fce
 8006590:	00000000 	.word	0x00000000
 8006594:	08006347 	.word	0x08006347
 8006598:	08007fca 	.word	0x08007fca

0800659c <_printf_common>:
 800659c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	4616      	mov	r6, r2
 80065a2:	4698      	mov	r8, r3
 80065a4:	688a      	ldr	r2, [r1, #8]
 80065a6:	690b      	ldr	r3, [r1, #16]
 80065a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bfb8      	it	lt
 80065b0:	4613      	movlt	r3, r2
 80065b2:	6033      	str	r3, [r6, #0]
 80065b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065b8:	4607      	mov	r7, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	b10a      	cbz	r2, 80065c2 <_printf_common+0x26>
 80065be:	3301      	adds	r3, #1
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	0699      	lsls	r1, r3, #26
 80065c6:	bf42      	ittt	mi
 80065c8:	6833      	ldrmi	r3, [r6, #0]
 80065ca:	3302      	addmi	r3, #2
 80065cc:	6033      	strmi	r3, [r6, #0]
 80065ce:	6825      	ldr	r5, [r4, #0]
 80065d0:	f015 0506 	ands.w	r5, r5, #6
 80065d4:	d106      	bne.n	80065e4 <_printf_common+0x48>
 80065d6:	f104 0a19 	add.w	sl, r4, #25
 80065da:	68e3      	ldr	r3, [r4, #12]
 80065dc:	6832      	ldr	r2, [r6, #0]
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	42ab      	cmp	r3, r5
 80065e2:	dc26      	bgt.n	8006632 <_printf_common+0x96>
 80065e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	3b00      	subs	r3, #0
 80065ec:	bf18      	it	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	0692      	lsls	r2, r2, #26
 80065f2:	d42b      	bmi.n	800664c <_printf_common+0xb0>
 80065f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065f8:	4641      	mov	r1, r8
 80065fa:	4638      	mov	r0, r7
 80065fc:	47c8      	blx	r9
 80065fe:	3001      	adds	r0, #1
 8006600:	d01e      	beq.n	8006640 <_printf_common+0xa4>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	6922      	ldr	r2, [r4, #16]
 8006606:	f003 0306 	and.w	r3, r3, #6
 800660a:	2b04      	cmp	r3, #4
 800660c:	bf02      	ittt	eq
 800660e:	68e5      	ldreq	r5, [r4, #12]
 8006610:	6833      	ldreq	r3, [r6, #0]
 8006612:	1aed      	subeq	r5, r5, r3
 8006614:	68a3      	ldr	r3, [r4, #8]
 8006616:	bf0c      	ite	eq
 8006618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800661c:	2500      	movne	r5, #0
 800661e:	4293      	cmp	r3, r2
 8006620:	bfc4      	itt	gt
 8006622:	1a9b      	subgt	r3, r3, r2
 8006624:	18ed      	addgt	r5, r5, r3
 8006626:	2600      	movs	r6, #0
 8006628:	341a      	adds	r4, #26
 800662a:	42b5      	cmp	r5, r6
 800662c:	d11a      	bne.n	8006664 <_printf_common+0xc8>
 800662e:	2000      	movs	r0, #0
 8006630:	e008      	b.n	8006644 <_printf_common+0xa8>
 8006632:	2301      	movs	r3, #1
 8006634:	4652      	mov	r2, sl
 8006636:	4641      	mov	r1, r8
 8006638:	4638      	mov	r0, r7
 800663a:	47c8      	blx	r9
 800663c:	3001      	adds	r0, #1
 800663e:	d103      	bne.n	8006648 <_printf_common+0xac>
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006648:	3501      	adds	r5, #1
 800664a:	e7c6      	b.n	80065da <_printf_common+0x3e>
 800664c:	18e1      	adds	r1, r4, r3
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	2030      	movs	r0, #48	@ 0x30
 8006652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006656:	4422      	add	r2, r4
 8006658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800665c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006660:	3302      	adds	r3, #2
 8006662:	e7c7      	b.n	80065f4 <_printf_common+0x58>
 8006664:	2301      	movs	r3, #1
 8006666:	4622      	mov	r2, r4
 8006668:	4641      	mov	r1, r8
 800666a:	4638      	mov	r0, r7
 800666c:	47c8      	blx	r9
 800666e:	3001      	adds	r0, #1
 8006670:	d0e6      	beq.n	8006640 <_printf_common+0xa4>
 8006672:	3601      	adds	r6, #1
 8006674:	e7d9      	b.n	800662a <_printf_common+0x8e>
	...

08006678 <_printf_i>:
 8006678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	7e0f      	ldrb	r7, [r1, #24]
 800667e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006680:	2f78      	cmp	r7, #120	@ 0x78
 8006682:	4691      	mov	r9, r2
 8006684:	4680      	mov	r8, r0
 8006686:	460c      	mov	r4, r1
 8006688:	469a      	mov	sl, r3
 800668a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800668e:	d807      	bhi.n	80066a0 <_printf_i+0x28>
 8006690:	2f62      	cmp	r7, #98	@ 0x62
 8006692:	d80a      	bhi.n	80066aa <_printf_i+0x32>
 8006694:	2f00      	cmp	r7, #0
 8006696:	f000 80d2 	beq.w	800683e <_printf_i+0x1c6>
 800669a:	2f58      	cmp	r7, #88	@ 0x58
 800669c:	f000 80b9 	beq.w	8006812 <_printf_i+0x19a>
 80066a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066a8:	e03a      	b.n	8006720 <_printf_i+0xa8>
 80066aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066ae:	2b15      	cmp	r3, #21
 80066b0:	d8f6      	bhi.n	80066a0 <_printf_i+0x28>
 80066b2:	a101      	add	r1, pc, #4	@ (adr r1, 80066b8 <_printf_i+0x40>)
 80066b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b8:	08006711 	.word	0x08006711
 80066bc:	08006725 	.word	0x08006725
 80066c0:	080066a1 	.word	0x080066a1
 80066c4:	080066a1 	.word	0x080066a1
 80066c8:	080066a1 	.word	0x080066a1
 80066cc:	080066a1 	.word	0x080066a1
 80066d0:	08006725 	.word	0x08006725
 80066d4:	080066a1 	.word	0x080066a1
 80066d8:	080066a1 	.word	0x080066a1
 80066dc:	080066a1 	.word	0x080066a1
 80066e0:	080066a1 	.word	0x080066a1
 80066e4:	08006825 	.word	0x08006825
 80066e8:	0800674f 	.word	0x0800674f
 80066ec:	080067df 	.word	0x080067df
 80066f0:	080066a1 	.word	0x080066a1
 80066f4:	080066a1 	.word	0x080066a1
 80066f8:	08006847 	.word	0x08006847
 80066fc:	080066a1 	.word	0x080066a1
 8006700:	0800674f 	.word	0x0800674f
 8006704:	080066a1 	.word	0x080066a1
 8006708:	080066a1 	.word	0x080066a1
 800670c:	080067e7 	.word	0x080067e7
 8006710:	6833      	ldr	r3, [r6, #0]
 8006712:	1d1a      	adds	r2, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6032      	str	r2, [r6, #0]
 8006718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800671c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006720:	2301      	movs	r3, #1
 8006722:	e09d      	b.n	8006860 <_printf_i+0x1e8>
 8006724:	6833      	ldr	r3, [r6, #0]
 8006726:	6820      	ldr	r0, [r4, #0]
 8006728:	1d19      	adds	r1, r3, #4
 800672a:	6031      	str	r1, [r6, #0]
 800672c:	0606      	lsls	r6, r0, #24
 800672e:	d501      	bpl.n	8006734 <_printf_i+0xbc>
 8006730:	681d      	ldr	r5, [r3, #0]
 8006732:	e003      	b.n	800673c <_printf_i+0xc4>
 8006734:	0645      	lsls	r5, r0, #25
 8006736:	d5fb      	bpl.n	8006730 <_printf_i+0xb8>
 8006738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800673c:	2d00      	cmp	r5, #0
 800673e:	da03      	bge.n	8006748 <_printf_i+0xd0>
 8006740:	232d      	movs	r3, #45	@ 0x2d
 8006742:	426d      	negs	r5, r5
 8006744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006748:	4859      	ldr	r0, [pc, #356]	@ (80068b0 <_printf_i+0x238>)
 800674a:	230a      	movs	r3, #10
 800674c:	e011      	b.n	8006772 <_printf_i+0xfa>
 800674e:	6821      	ldr	r1, [r4, #0]
 8006750:	6833      	ldr	r3, [r6, #0]
 8006752:	0608      	lsls	r0, r1, #24
 8006754:	f853 5b04 	ldr.w	r5, [r3], #4
 8006758:	d402      	bmi.n	8006760 <_printf_i+0xe8>
 800675a:	0649      	lsls	r1, r1, #25
 800675c:	bf48      	it	mi
 800675e:	b2ad      	uxthmi	r5, r5
 8006760:	2f6f      	cmp	r7, #111	@ 0x6f
 8006762:	4853      	ldr	r0, [pc, #332]	@ (80068b0 <_printf_i+0x238>)
 8006764:	6033      	str	r3, [r6, #0]
 8006766:	bf14      	ite	ne
 8006768:	230a      	movne	r3, #10
 800676a:	2308      	moveq	r3, #8
 800676c:	2100      	movs	r1, #0
 800676e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006772:	6866      	ldr	r6, [r4, #4]
 8006774:	60a6      	str	r6, [r4, #8]
 8006776:	2e00      	cmp	r6, #0
 8006778:	bfa2      	ittt	ge
 800677a:	6821      	ldrge	r1, [r4, #0]
 800677c:	f021 0104 	bicge.w	r1, r1, #4
 8006780:	6021      	strge	r1, [r4, #0]
 8006782:	b90d      	cbnz	r5, 8006788 <_printf_i+0x110>
 8006784:	2e00      	cmp	r6, #0
 8006786:	d04b      	beq.n	8006820 <_printf_i+0x1a8>
 8006788:	4616      	mov	r6, r2
 800678a:	fbb5 f1f3 	udiv	r1, r5, r3
 800678e:	fb03 5711 	mls	r7, r3, r1, r5
 8006792:	5dc7      	ldrb	r7, [r0, r7]
 8006794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006798:	462f      	mov	r7, r5
 800679a:	42bb      	cmp	r3, r7
 800679c:	460d      	mov	r5, r1
 800679e:	d9f4      	bls.n	800678a <_printf_i+0x112>
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d10b      	bne.n	80067bc <_printf_i+0x144>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	07df      	lsls	r7, r3, #31
 80067a8:	d508      	bpl.n	80067bc <_printf_i+0x144>
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6861      	ldr	r1, [r4, #4]
 80067ae:	4299      	cmp	r1, r3
 80067b0:	bfde      	ittt	le
 80067b2:	2330      	movle	r3, #48	@ 0x30
 80067b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067bc:	1b92      	subs	r2, r2, r6
 80067be:	6122      	str	r2, [r4, #16]
 80067c0:	f8cd a000 	str.w	sl, [sp]
 80067c4:	464b      	mov	r3, r9
 80067c6:	aa03      	add	r2, sp, #12
 80067c8:	4621      	mov	r1, r4
 80067ca:	4640      	mov	r0, r8
 80067cc:	f7ff fee6 	bl	800659c <_printf_common>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d14a      	bne.n	800686a <_printf_i+0x1f2>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295
 80067d8:	b004      	add	sp, #16
 80067da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	f043 0320 	orr.w	r3, r3, #32
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	4833      	ldr	r0, [pc, #204]	@ (80068b4 <_printf_i+0x23c>)
 80067e8:	2778      	movs	r7, #120	@ 0x78
 80067ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	6831      	ldr	r1, [r6, #0]
 80067f2:	061f      	lsls	r7, r3, #24
 80067f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80067f8:	d402      	bmi.n	8006800 <_printf_i+0x188>
 80067fa:	065f      	lsls	r7, r3, #25
 80067fc:	bf48      	it	mi
 80067fe:	b2ad      	uxthmi	r5, r5
 8006800:	6031      	str	r1, [r6, #0]
 8006802:	07d9      	lsls	r1, r3, #31
 8006804:	bf44      	itt	mi
 8006806:	f043 0320 	orrmi.w	r3, r3, #32
 800680a:	6023      	strmi	r3, [r4, #0]
 800680c:	b11d      	cbz	r5, 8006816 <_printf_i+0x19e>
 800680e:	2310      	movs	r3, #16
 8006810:	e7ac      	b.n	800676c <_printf_i+0xf4>
 8006812:	4827      	ldr	r0, [pc, #156]	@ (80068b0 <_printf_i+0x238>)
 8006814:	e7e9      	b.n	80067ea <_printf_i+0x172>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	f023 0320 	bic.w	r3, r3, #32
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	e7f6      	b.n	800680e <_printf_i+0x196>
 8006820:	4616      	mov	r6, r2
 8006822:	e7bd      	b.n	80067a0 <_printf_i+0x128>
 8006824:	6833      	ldr	r3, [r6, #0]
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	6961      	ldr	r1, [r4, #20]
 800682a:	1d18      	adds	r0, r3, #4
 800682c:	6030      	str	r0, [r6, #0]
 800682e:	062e      	lsls	r6, r5, #24
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	d501      	bpl.n	8006838 <_printf_i+0x1c0>
 8006834:	6019      	str	r1, [r3, #0]
 8006836:	e002      	b.n	800683e <_printf_i+0x1c6>
 8006838:	0668      	lsls	r0, r5, #25
 800683a:	d5fb      	bpl.n	8006834 <_printf_i+0x1bc>
 800683c:	8019      	strh	r1, [r3, #0]
 800683e:	2300      	movs	r3, #0
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	4616      	mov	r6, r2
 8006844:	e7bc      	b.n	80067c0 <_printf_i+0x148>
 8006846:	6833      	ldr	r3, [r6, #0]
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	6032      	str	r2, [r6, #0]
 800684c:	681e      	ldr	r6, [r3, #0]
 800684e:	6862      	ldr	r2, [r4, #4]
 8006850:	2100      	movs	r1, #0
 8006852:	4630      	mov	r0, r6
 8006854:	f7f9 fcdc 	bl	8000210 <memchr>
 8006858:	b108      	cbz	r0, 800685e <_printf_i+0x1e6>
 800685a:	1b80      	subs	r0, r0, r6
 800685c:	6060      	str	r0, [r4, #4]
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	2300      	movs	r3, #0
 8006864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006868:	e7aa      	b.n	80067c0 <_printf_i+0x148>
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	4632      	mov	r2, r6
 800686e:	4649      	mov	r1, r9
 8006870:	4640      	mov	r0, r8
 8006872:	47d0      	blx	sl
 8006874:	3001      	adds	r0, #1
 8006876:	d0ad      	beq.n	80067d4 <_printf_i+0x15c>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	079b      	lsls	r3, r3, #30
 800687c:	d413      	bmi.n	80068a6 <_printf_i+0x22e>
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	4298      	cmp	r0, r3
 8006884:	bfb8      	it	lt
 8006886:	4618      	movlt	r0, r3
 8006888:	e7a6      	b.n	80067d8 <_printf_i+0x160>
 800688a:	2301      	movs	r3, #1
 800688c:	4632      	mov	r2, r6
 800688e:	4649      	mov	r1, r9
 8006890:	4640      	mov	r0, r8
 8006892:	47d0      	blx	sl
 8006894:	3001      	adds	r0, #1
 8006896:	d09d      	beq.n	80067d4 <_printf_i+0x15c>
 8006898:	3501      	adds	r5, #1
 800689a:	68e3      	ldr	r3, [r4, #12]
 800689c:	9903      	ldr	r1, [sp, #12]
 800689e:	1a5b      	subs	r3, r3, r1
 80068a0:	42ab      	cmp	r3, r5
 80068a2:	dcf2      	bgt.n	800688a <_printf_i+0x212>
 80068a4:	e7eb      	b.n	800687e <_printf_i+0x206>
 80068a6:	2500      	movs	r5, #0
 80068a8:	f104 0619 	add.w	r6, r4, #25
 80068ac:	e7f5      	b.n	800689a <_printf_i+0x222>
 80068ae:	bf00      	nop
 80068b0:	08007fd5 	.word	0x08007fd5
 80068b4:	08007fe6 	.word	0x08007fe6

080068b8 <__sflush_r>:
 80068b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	0716      	lsls	r6, r2, #28
 80068c2:	4605      	mov	r5, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	d454      	bmi.n	8006972 <__sflush_r+0xba>
 80068c8:	684b      	ldr	r3, [r1, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	dc02      	bgt.n	80068d4 <__sflush_r+0x1c>
 80068ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dd48      	ble.n	8006966 <__sflush_r+0xae>
 80068d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	d045      	beq.n	8006966 <__sflush_r+0xae>
 80068da:	2300      	movs	r3, #0
 80068dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068e0:	682f      	ldr	r7, [r5, #0]
 80068e2:	6a21      	ldr	r1, [r4, #32]
 80068e4:	602b      	str	r3, [r5, #0]
 80068e6:	d030      	beq.n	800694a <__sflush_r+0x92>
 80068e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	0759      	lsls	r1, r3, #29
 80068ee:	d505      	bpl.n	80068fc <__sflush_r+0x44>
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068f6:	b10b      	cbz	r3, 80068fc <__sflush_r+0x44>
 80068f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006900:	6a21      	ldr	r1, [r4, #32]
 8006902:	4628      	mov	r0, r5
 8006904:	47b0      	blx	r6
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	d106      	bne.n	800691a <__sflush_r+0x62>
 800690c:	6829      	ldr	r1, [r5, #0]
 800690e:	291d      	cmp	r1, #29
 8006910:	d82b      	bhi.n	800696a <__sflush_r+0xb2>
 8006912:	4a2a      	ldr	r2, [pc, #168]	@ (80069bc <__sflush_r+0x104>)
 8006914:	410a      	asrs	r2, r1
 8006916:	07d6      	lsls	r6, r2, #31
 8006918:	d427      	bmi.n	800696a <__sflush_r+0xb2>
 800691a:	2200      	movs	r2, #0
 800691c:	6062      	str	r2, [r4, #4]
 800691e:	04d9      	lsls	r1, r3, #19
 8006920:	6922      	ldr	r2, [r4, #16]
 8006922:	6022      	str	r2, [r4, #0]
 8006924:	d504      	bpl.n	8006930 <__sflush_r+0x78>
 8006926:	1c42      	adds	r2, r0, #1
 8006928:	d101      	bne.n	800692e <__sflush_r+0x76>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	b903      	cbnz	r3, 8006930 <__sflush_r+0x78>
 800692e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006932:	602f      	str	r7, [r5, #0]
 8006934:	b1b9      	cbz	r1, 8006966 <__sflush_r+0xae>
 8006936:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800693a:	4299      	cmp	r1, r3
 800693c:	d002      	beq.n	8006944 <__sflush_r+0x8c>
 800693e:	4628      	mov	r0, r5
 8006940:	f7ff fbf2 	bl	8006128 <_free_r>
 8006944:	2300      	movs	r3, #0
 8006946:	6363      	str	r3, [r4, #52]	@ 0x34
 8006948:	e00d      	b.n	8006966 <__sflush_r+0xae>
 800694a:	2301      	movs	r3, #1
 800694c:	4628      	mov	r0, r5
 800694e:	47b0      	blx	r6
 8006950:	4602      	mov	r2, r0
 8006952:	1c50      	adds	r0, r2, #1
 8006954:	d1c9      	bne.n	80068ea <__sflush_r+0x32>
 8006956:	682b      	ldr	r3, [r5, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0c6      	beq.n	80068ea <__sflush_r+0x32>
 800695c:	2b1d      	cmp	r3, #29
 800695e:	d001      	beq.n	8006964 <__sflush_r+0xac>
 8006960:	2b16      	cmp	r3, #22
 8006962:	d11e      	bne.n	80069a2 <__sflush_r+0xea>
 8006964:	602f      	str	r7, [r5, #0]
 8006966:	2000      	movs	r0, #0
 8006968:	e022      	b.n	80069b0 <__sflush_r+0xf8>
 800696a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696e:	b21b      	sxth	r3, r3
 8006970:	e01b      	b.n	80069aa <__sflush_r+0xf2>
 8006972:	690f      	ldr	r7, [r1, #16]
 8006974:	2f00      	cmp	r7, #0
 8006976:	d0f6      	beq.n	8006966 <__sflush_r+0xae>
 8006978:	0793      	lsls	r3, r2, #30
 800697a:	680e      	ldr	r6, [r1, #0]
 800697c:	bf08      	it	eq
 800697e:	694b      	ldreq	r3, [r1, #20]
 8006980:	600f      	str	r7, [r1, #0]
 8006982:	bf18      	it	ne
 8006984:	2300      	movne	r3, #0
 8006986:	eba6 0807 	sub.w	r8, r6, r7
 800698a:	608b      	str	r3, [r1, #8]
 800698c:	f1b8 0f00 	cmp.w	r8, #0
 8006990:	dde9      	ble.n	8006966 <__sflush_r+0xae>
 8006992:	6a21      	ldr	r1, [r4, #32]
 8006994:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006996:	4643      	mov	r3, r8
 8006998:	463a      	mov	r2, r7
 800699a:	4628      	mov	r0, r5
 800699c:	47b0      	blx	r6
 800699e:	2800      	cmp	r0, #0
 80069a0:	dc08      	bgt.n	80069b4 <__sflush_r+0xfc>
 80069a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069aa:	81a3      	strh	r3, [r4, #12]
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b4:	4407      	add	r7, r0
 80069b6:	eba8 0800 	sub.w	r8, r8, r0
 80069ba:	e7e7      	b.n	800698c <__sflush_r+0xd4>
 80069bc:	dfbffffe 	.word	0xdfbffffe

080069c0 <_fflush_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	690b      	ldr	r3, [r1, #16]
 80069c4:	4605      	mov	r5, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	b913      	cbnz	r3, 80069d0 <_fflush_r+0x10>
 80069ca:	2500      	movs	r5, #0
 80069cc:	4628      	mov	r0, r5
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	b118      	cbz	r0, 80069da <_fflush_r+0x1a>
 80069d2:	6a03      	ldr	r3, [r0, #32]
 80069d4:	b90b      	cbnz	r3, 80069da <_fflush_r+0x1a>
 80069d6:	f7ff fa9f 	bl	8005f18 <__sinit>
 80069da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f3      	beq.n	80069ca <_fflush_r+0xa>
 80069e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069e4:	07d0      	lsls	r0, r2, #31
 80069e6:	d404      	bmi.n	80069f2 <_fflush_r+0x32>
 80069e8:	0599      	lsls	r1, r3, #22
 80069ea:	d402      	bmi.n	80069f2 <_fflush_r+0x32>
 80069ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ee:	f7ff fb98 	bl	8006122 <__retarget_lock_acquire_recursive>
 80069f2:	4628      	mov	r0, r5
 80069f4:	4621      	mov	r1, r4
 80069f6:	f7ff ff5f 	bl	80068b8 <__sflush_r>
 80069fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069fc:	07da      	lsls	r2, r3, #31
 80069fe:	4605      	mov	r5, r0
 8006a00:	d4e4      	bmi.n	80069cc <_fflush_r+0xc>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	059b      	lsls	r3, r3, #22
 8006a06:	d4e1      	bmi.n	80069cc <_fflush_r+0xc>
 8006a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a0a:	f7ff fb8b 	bl	8006124 <__retarget_lock_release_recursive>
 8006a0e:	e7dd      	b.n	80069cc <_fflush_r+0xc>

08006a10 <__swbuf_r>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	460e      	mov	r6, r1
 8006a14:	4614      	mov	r4, r2
 8006a16:	4605      	mov	r5, r0
 8006a18:	b118      	cbz	r0, 8006a22 <__swbuf_r+0x12>
 8006a1a:	6a03      	ldr	r3, [r0, #32]
 8006a1c:	b90b      	cbnz	r3, 8006a22 <__swbuf_r+0x12>
 8006a1e:	f7ff fa7b 	bl	8005f18 <__sinit>
 8006a22:	69a3      	ldr	r3, [r4, #24]
 8006a24:	60a3      	str	r3, [r4, #8]
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	071a      	lsls	r2, r3, #28
 8006a2a:	d501      	bpl.n	8006a30 <__swbuf_r+0x20>
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	b943      	cbnz	r3, 8006a42 <__swbuf_r+0x32>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f82a 	bl	8006a8c <__swsetup_r>
 8006a38:	b118      	cbz	r0, 8006a42 <__swbuf_r+0x32>
 8006a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a3e:	4638      	mov	r0, r7
 8006a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	1a98      	subs	r0, r3, r2
 8006a48:	6963      	ldr	r3, [r4, #20]
 8006a4a:	b2f6      	uxtb	r6, r6
 8006a4c:	4283      	cmp	r3, r0
 8006a4e:	4637      	mov	r7, r6
 8006a50:	dc05      	bgt.n	8006a5e <__swbuf_r+0x4e>
 8006a52:	4621      	mov	r1, r4
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7ff ffb3 	bl	80069c0 <_fflush_r>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d1ed      	bne.n	8006a3a <__swbuf_r+0x2a>
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	6022      	str	r2, [r4, #0]
 8006a6a:	701e      	strb	r6, [r3, #0]
 8006a6c:	6962      	ldr	r2, [r4, #20]
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d004      	beq.n	8006a7e <__swbuf_r+0x6e>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	07db      	lsls	r3, r3, #31
 8006a78:	d5e1      	bpl.n	8006a3e <__swbuf_r+0x2e>
 8006a7a:	2e0a      	cmp	r6, #10
 8006a7c:	d1df      	bne.n	8006a3e <__swbuf_r+0x2e>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f7ff ff9d 	bl	80069c0 <_fflush_r>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0d9      	beq.n	8006a3e <__swbuf_r+0x2e>
 8006a8a:	e7d6      	b.n	8006a3a <__swbuf_r+0x2a>

08006a8c <__swsetup_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4b29      	ldr	r3, [pc, #164]	@ (8006b34 <__swsetup_r+0xa8>)
 8006a90:	4605      	mov	r5, r0
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	460c      	mov	r4, r1
 8006a96:	b118      	cbz	r0, 8006aa0 <__swsetup_r+0x14>
 8006a98:	6a03      	ldr	r3, [r0, #32]
 8006a9a:	b90b      	cbnz	r3, 8006aa0 <__swsetup_r+0x14>
 8006a9c:	f7ff fa3c 	bl	8005f18 <__sinit>
 8006aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa4:	0719      	lsls	r1, r3, #28
 8006aa6:	d422      	bmi.n	8006aee <__swsetup_r+0x62>
 8006aa8:	06da      	lsls	r2, r3, #27
 8006aaa:	d407      	bmi.n	8006abc <__swsetup_r+0x30>
 8006aac:	2209      	movs	r2, #9
 8006aae:	602a      	str	r2, [r5, #0]
 8006ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aba:	e033      	b.n	8006b24 <__swsetup_r+0x98>
 8006abc:	0758      	lsls	r0, r3, #29
 8006abe:	d512      	bpl.n	8006ae6 <__swsetup_r+0x5a>
 8006ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ac2:	b141      	cbz	r1, 8006ad6 <__swsetup_r+0x4a>
 8006ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ac8:	4299      	cmp	r1, r3
 8006aca:	d002      	beq.n	8006ad2 <__swsetup_r+0x46>
 8006acc:	4628      	mov	r0, r5
 8006ace:	f7ff fb2b 	bl	8006128 <_free_r>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006adc:	81a3      	strh	r3, [r4, #12]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f043 0308 	orr.w	r3, r3, #8
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	b94b      	cbnz	r3, 8006b06 <__swsetup_r+0x7a>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006afc:	d003      	beq.n	8006b06 <__swsetup_r+0x7a>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 f84f 	bl	8006ba4 <__smakebuf_r>
 8006b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0a:	f013 0201 	ands.w	r2, r3, #1
 8006b0e:	d00a      	beq.n	8006b26 <__swsetup_r+0x9a>
 8006b10:	2200      	movs	r2, #0
 8006b12:	60a2      	str	r2, [r4, #8]
 8006b14:	6962      	ldr	r2, [r4, #20]
 8006b16:	4252      	negs	r2, r2
 8006b18:	61a2      	str	r2, [r4, #24]
 8006b1a:	6922      	ldr	r2, [r4, #16]
 8006b1c:	b942      	cbnz	r2, 8006b30 <__swsetup_r+0xa4>
 8006b1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b22:	d1c5      	bne.n	8006ab0 <__swsetup_r+0x24>
 8006b24:	bd38      	pop	{r3, r4, r5, pc}
 8006b26:	0799      	lsls	r1, r3, #30
 8006b28:	bf58      	it	pl
 8006b2a:	6962      	ldrpl	r2, [r4, #20]
 8006b2c:	60a2      	str	r2, [r4, #8]
 8006b2e:	e7f4      	b.n	8006b1a <__swsetup_r+0x8e>
 8006b30:	2000      	movs	r0, #0
 8006b32:	e7f7      	b.n	8006b24 <__swsetup_r+0x98>
 8006b34:	20000028 	.word	0x20000028

08006b38 <_sbrk_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d06      	ldr	r5, [pc, #24]	@ (8006b54 <_sbrk_r+0x1c>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fb fb02 	bl	800214c <_sbrk>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_sbrk_r+0x1a>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_sbrk_r+0x1a>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	200003e8 	.word	0x200003e8

08006b58 <__swhatbuf_r>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	b096      	sub	sp, #88	@ 0x58
 8006b64:	4615      	mov	r5, r2
 8006b66:	461e      	mov	r6, r3
 8006b68:	da0d      	bge.n	8006b86 <__swhatbuf_r+0x2e>
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b70:	f04f 0100 	mov.w	r1, #0
 8006b74:	bf14      	ite	ne
 8006b76:	2340      	movne	r3, #64	@ 0x40
 8006b78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	6031      	str	r1, [r6, #0]
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	b016      	add	sp, #88	@ 0x58
 8006b84:	bd70      	pop	{r4, r5, r6, pc}
 8006b86:	466a      	mov	r2, sp
 8006b88:	f000 f848 	bl	8006c1c <_fstat_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	dbec      	blt.n	8006b6a <__swhatbuf_r+0x12>
 8006b90:	9901      	ldr	r1, [sp, #4]
 8006b92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b9a:	4259      	negs	r1, r3
 8006b9c:	4159      	adcs	r1, r3
 8006b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ba2:	e7eb      	b.n	8006b7c <__swhatbuf_r+0x24>

08006ba4 <__smakebuf_r>:
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba8:	079d      	lsls	r5, r3, #30
 8006baa:	4606      	mov	r6, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	d507      	bpl.n	8006bc0 <__smakebuf_r+0x1c>
 8006bb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	2301      	movs	r3, #1
 8006bba:	6163      	str	r3, [r4, #20]
 8006bbc:	b003      	add	sp, #12
 8006bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bc0:	ab01      	add	r3, sp, #4
 8006bc2:	466a      	mov	r2, sp
 8006bc4:	f7ff ffc8 	bl	8006b58 <__swhatbuf_r>
 8006bc8:	9f00      	ldr	r7, [sp, #0]
 8006bca:	4605      	mov	r5, r0
 8006bcc:	4639      	mov	r1, r7
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff fb16 	bl	8006200 <_malloc_r>
 8006bd4:	b948      	cbnz	r0, 8006bea <__smakebuf_r+0x46>
 8006bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bda:	059a      	lsls	r2, r3, #22
 8006bdc:	d4ee      	bmi.n	8006bbc <__smakebuf_r+0x18>
 8006bde:	f023 0303 	bic.w	r3, r3, #3
 8006be2:	f043 0302 	orr.w	r3, r3, #2
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	e7e2      	b.n	8006bb0 <__smakebuf_r+0xc>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	6020      	str	r0, [r4, #0]
 8006bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bfa:	b15b      	cbz	r3, 8006c14 <__smakebuf_r+0x70>
 8006bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 f81d 	bl	8006c40 <_isatty_r>
 8006c06:	b128      	cbz	r0, 8006c14 <__smakebuf_r+0x70>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	431d      	orrs	r5, r3
 8006c18:	81a5      	strh	r5, [r4, #12]
 8006c1a:	e7cf      	b.n	8006bbc <__smakebuf_r+0x18>

08006c1c <_fstat_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d07      	ldr	r5, [pc, #28]	@ (8006c3c <_fstat_r+0x20>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4608      	mov	r0, r1
 8006c26:	4611      	mov	r1, r2
 8006c28:	602b      	str	r3, [r5, #0]
 8006c2a:	f7fb fa66 	bl	80020fa <_fstat>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	d102      	bne.n	8006c38 <_fstat_r+0x1c>
 8006c32:	682b      	ldr	r3, [r5, #0]
 8006c34:	b103      	cbz	r3, 8006c38 <_fstat_r+0x1c>
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
 8006c3a:	bf00      	nop
 8006c3c:	200003e8 	.word	0x200003e8

08006c40 <_isatty_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d06      	ldr	r5, [pc, #24]	@ (8006c5c <_isatty_r+0x1c>)
 8006c44:	2300      	movs	r3, #0
 8006c46:	4604      	mov	r4, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	f7fb fa65 	bl	800211a <_isatty>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_isatty_r+0x1a>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_isatty_r+0x1a>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	200003e8 	.word	0x200003e8

08006c60 <sqrt>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	ed2d 8b02 	vpush	{d8}
 8006c66:	ec55 4b10 	vmov	r4, r5, d0
 8006c6a:	f000 f8cd 	bl	8006e08 <__ieee754_sqrt>
 8006c6e:	4622      	mov	r2, r4
 8006c70:	462b      	mov	r3, r5
 8006c72:	4620      	mov	r0, r4
 8006c74:	4629      	mov	r1, r5
 8006c76:	eeb0 8a40 	vmov.f32	s16, s0
 8006c7a:	eef0 8a60 	vmov.f32	s17, s1
 8006c7e:	f7f9 ff6d 	bl	8000b5c <__aeabi_dcmpun>
 8006c82:	b990      	cbnz	r0, 8006caa <sqrt+0x4a>
 8006c84:	2200      	movs	r2, #0
 8006c86:	2300      	movs	r3, #0
 8006c88:	4620      	mov	r0, r4
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7f9 ff3e 	bl	8000b0c <__aeabi_dcmplt>
 8006c90:	b158      	cbz	r0, 8006caa <sqrt+0x4a>
 8006c92:	f7ff fa1b 	bl	80060cc <__errno>
 8006c96:	2321      	movs	r3, #33	@ 0x21
 8006c98:	6003      	str	r3, [r0, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f7f9 fdeb 	bl	800087c <__aeabi_ddiv>
 8006ca6:	ec41 0b18 	vmov	d8, r0, r1
 8006caa:	eeb0 0a48 	vmov.f32	s0, s16
 8006cae:	eef0 0a68 	vmov.f32	s1, s17
 8006cb2:	ecbd 8b02 	vpop	{d8}
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}

08006cb8 <cos>:
 8006cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cba:	ec53 2b10 	vmov	r2, r3, d0
 8006cbe:	4826      	ldr	r0, [pc, #152]	@ (8006d58 <cos+0xa0>)
 8006cc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cc4:	4281      	cmp	r1, r0
 8006cc6:	d806      	bhi.n	8006cd6 <cos+0x1e>
 8006cc8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006d50 <cos+0x98>
 8006ccc:	b005      	add	sp, #20
 8006cce:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cd2:	f000 b975 	b.w	8006fc0 <__kernel_cos>
 8006cd6:	4821      	ldr	r0, [pc, #132]	@ (8006d5c <cos+0xa4>)
 8006cd8:	4281      	cmp	r1, r0
 8006cda:	d908      	bls.n	8006cee <cos+0x36>
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f7f9 faea 	bl	80002b8 <__aeabi_dsub>
 8006ce4:	ec41 0b10 	vmov	d0, r0, r1
 8006ce8:	b005      	add	sp, #20
 8006cea:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cee:	4668      	mov	r0, sp
 8006cf0:	f000 faea 	bl	80072c8 <__ieee754_rem_pio2>
 8006cf4:	f000 0003 	and.w	r0, r0, #3
 8006cf8:	2801      	cmp	r0, #1
 8006cfa:	d00b      	beq.n	8006d14 <cos+0x5c>
 8006cfc:	2802      	cmp	r0, #2
 8006cfe:	d015      	beq.n	8006d2c <cos+0x74>
 8006d00:	b9d8      	cbnz	r0, 8006d3a <cos+0x82>
 8006d02:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d06:	ed9d 0b00 	vldr	d0, [sp]
 8006d0a:	f000 f959 	bl	8006fc0 <__kernel_cos>
 8006d0e:	ec51 0b10 	vmov	r0, r1, d0
 8006d12:	e7e7      	b.n	8006ce4 <cos+0x2c>
 8006d14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d18:	ed9d 0b00 	vldr	d0, [sp]
 8006d1c:	f000 fa18 	bl	8007150 <__kernel_sin>
 8006d20:	ec53 2b10 	vmov	r2, r3, d0
 8006d24:	4610      	mov	r0, r2
 8006d26:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006d2a:	e7db      	b.n	8006ce4 <cos+0x2c>
 8006d2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d30:	ed9d 0b00 	vldr	d0, [sp]
 8006d34:	f000 f944 	bl	8006fc0 <__kernel_cos>
 8006d38:	e7f2      	b.n	8006d20 <cos+0x68>
 8006d3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d3e:	ed9d 0b00 	vldr	d0, [sp]
 8006d42:	2001      	movs	r0, #1
 8006d44:	f000 fa04 	bl	8007150 <__kernel_sin>
 8006d48:	e7e1      	b.n	8006d0e <cos+0x56>
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w
	...
 8006d58:	3fe921fb 	.word	0x3fe921fb
 8006d5c:	7fefffff 	.word	0x7fefffff

08006d60 <sin>:
 8006d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d62:	ec53 2b10 	vmov	r2, r3, d0
 8006d66:	4826      	ldr	r0, [pc, #152]	@ (8006e00 <sin+0xa0>)
 8006d68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d6c:	4281      	cmp	r1, r0
 8006d6e:	d807      	bhi.n	8006d80 <sin+0x20>
 8006d70:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006df8 <sin+0x98>
 8006d74:	2000      	movs	r0, #0
 8006d76:	b005      	add	sp, #20
 8006d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d7c:	f000 b9e8 	b.w	8007150 <__kernel_sin>
 8006d80:	4820      	ldr	r0, [pc, #128]	@ (8006e04 <sin+0xa4>)
 8006d82:	4281      	cmp	r1, r0
 8006d84:	d908      	bls.n	8006d98 <sin+0x38>
 8006d86:	4610      	mov	r0, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f7f9 fa95 	bl	80002b8 <__aeabi_dsub>
 8006d8e:	ec41 0b10 	vmov	d0, r0, r1
 8006d92:	b005      	add	sp, #20
 8006d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d98:	4668      	mov	r0, sp
 8006d9a:	f000 fa95 	bl	80072c8 <__ieee754_rem_pio2>
 8006d9e:	f000 0003 	and.w	r0, r0, #3
 8006da2:	2801      	cmp	r0, #1
 8006da4:	d00c      	beq.n	8006dc0 <sin+0x60>
 8006da6:	2802      	cmp	r0, #2
 8006da8:	d011      	beq.n	8006dce <sin+0x6e>
 8006daa:	b9e8      	cbnz	r0, 8006de8 <sin+0x88>
 8006dac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006db0:	ed9d 0b00 	vldr	d0, [sp]
 8006db4:	2001      	movs	r0, #1
 8006db6:	f000 f9cb 	bl	8007150 <__kernel_sin>
 8006dba:	ec51 0b10 	vmov	r0, r1, d0
 8006dbe:	e7e6      	b.n	8006d8e <sin+0x2e>
 8006dc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dc4:	ed9d 0b00 	vldr	d0, [sp]
 8006dc8:	f000 f8fa 	bl	8006fc0 <__kernel_cos>
 8006dcc:	e7f5      	b.n	8006dba <sin+0x5a>
 8006dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dd2:	ed9d 0b00 	vldr	d0, [sp]
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	f000 f9ba 	bl	8007150 <__kernel_sin>
 8006ddc:	ec53 2b10 	vmov	r2, r3, d0
 8006de0:	4610      	mov	r0, r2
 8006de2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006de6:	e7d2      	b.n	8006d8e <sin+0x2e>
 8006de8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dec:	ed9d 0b00 	vldr	d0, [sp]
 8006df0:	f000 f8e6 	bl	8006fc0 <__kernel_cos>
 8006df4:	e7f2      	b.n	8006ddc <sin+0x7c>
 8006df6:	bf00      	nop
	...
 8006e00:	3fe921fb 	.word	0x3fe921fb
 8006e04:	7fefffff 	.word	0x7fefffff

08006e08 <__ieee754_sqrt>:
 8006e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	4a68      	ldr	r2, [pc, #416]	@ (8006fb0 <__ieee754_sqrt+0x1a8>)
 8006e0e:	ec55 4b10 	vmov	r4, r5, d0
 8006e12:	43aa      	bics	r2, r5
 8006e14:	462b      	mov	r3, r5
 8006e16:	4621      	mov	r1, r4
 8006e18:	d110      	bne.n	8006e3c <__ieee754_sqrt+0x34>
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fc02 	bl	8000628 <__aeabi_dmul>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4620      	mov	r0, r4
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	f7f9 fa46 	bl	80002bc <__adddf3>
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	ec45 4b10 	vmov	d0, r4, r5
 8006e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	dc0e      	bgt.n	8006e5e <__ieee754_sqrt+0x56>
 8006e40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006e44:	4322      	orrs	r2, r4
 8006e46:	d0f5      	beq.n	8006e34 <__ieee754_sqrt+0x2c>
 8006e48:	b19d      	cbz	r5, 8006e72 <__ieee754_sqrt+0x6a>
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	4629      	mov	r1, r5
 8006e50:	f7f9 fa32 	bl	80002b8 <__aeabi_dsub>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	f7f9 fd10 	bl	800087c <__aeabi_ddiv>
 8006e5c:	e7e8      	b.n	8006e30 <__ieee754_sqrt+0x28>
 8006e5e:	152a      	asrs	r2, r5, #20
 8006e60:	d115      	bne.n	8006e8e <__ieee754_sqrt+0x86>
 8006e62:	2000      	movs	r0, #0
 8006e64:	e009      	b.n	8006e7a <__ieee754_sqrt+0x72>
 8006e66:	0acb      	lsrs	r3, r1, #11
 8006e68:	3a15      	subs	r2, #21
 8006e6a:	0549      	lsls	r1, r1, #21
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0fa      	beq.n	8006e66 <__ieee754_sqrt+0x5e>
 8006e70:	e7f7      	b.n	8006e62 <__ieee754_sqrt+0x5a>
 8006e72:	462a      	mov	r2, r5
 8006e74:	e7fa      	b.n	8006e6c <__ieee754_sqrt+0x64>
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	3001      	adds	r0, #1
 8006e7a:	02dc      	lsls	r4, r3, #11
 8006e7c:	d5fb      	bpl.n	8006e76 <__ieee754_sqrt+0x6e>
 8006e7e:	1e44      	subs	r4, r0, #1
 8006e80:	1b12      	subs	r2, r2, r4
 8006e82:	f1c0 0420 	rsb	r4, r0, #32
 8006e86:	fa21 f404 	lsr.w	r4, r1, r4
 8006e8a:	4323      	orrs	r3, r4
 8006e8c:	4081      	lsls	r1, r0
 8006e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e92:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e9a:	07d2      	lsls	r2, r2, #31
 8006e9c:	bf5c      	itt	pl
 8006e9e:	005b      	lslpl	r3, r3, #1
 8006ea0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006ea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ea8:	bf58      	it	pl
 8006eaa:	0049      	lslpl	r1, r1, #1
 8006eac:	2600      	movs	r6, #0
 8006eae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006eb2:	106d      	asrs	r5, r5, #1
 8006eb4:	0049      	lsls	r1, r1, #1
 8006eb6:	2016      	movs	r0, #22
 8006eb8:	4632      	mov	r2, r6
 8006eba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006ebe:	1917      	adds	r7, r2, r4
 8006ec0:	429f      	cmp	r7, r3
 8006ec2:	bfde      	ittt	le
 8006ec4:	193a      	addle	r2, r7, r4
 8006ec6:	1bdb      	suble	r3, r3, r7
 8006ec8:	1936      	addle	r6, r6, r4
 8006eca:	0fcf      	lsrs	r7, r1, #31
 8006ecc:	3801      	subs	r0, #1
 8006ece:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006ed2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ed6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006eda:	d1f0      	bne.n	8006ebe <__ieee754_sqrt+0xb6>
 8006edc:	4604      	mov	r4, r0
 8006ede:	2720      	movs	r7, #32
 8006ee0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	eb00 0e0c 	add.w	lr, r0, ip
 8006eea:	db02      	blt.n	8006ef2 <__ieee754_sqrt+0xea>
 8006eec:	d113      	bne.n	8006f16 <__ieee754_sqrt+0x10e>
 8006eee:	458e      	cmp	lr, r1
 8006ef0:	d811      	bhi.n	8006f16 <__ieee754_sqrt+0x10e>
 8006ef2:	f1be 0f00 	cmp.w	lr, #0
 8006ef6:	eb0e 000c 	add.w	r0, lr, ip
 8006efa:	da42      	bge.n	8006f82 <__ieee754_sqrt+0x17a>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	db40      	blt.n	8006f82 <__ieee754_sqrt+0x17a>
 8006f00:	f102 0801 	add.w	r8, r2, #1
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	458e      	cmp	lr, r1
 8006f08:	bf88      	it	hi
 8006f0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006f0e:	eba1 010e 	sub.w	r1, r1, lr
 8006f12:	4464      	add	r4, ip
 8006f14:	4642      	mov	r2, r8
 8006f16:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006f1a:	3f01      	subs	r7, #1
 8006f1c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006f20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f24:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006f28:	d1dc      	bne.n	8006ee4 <__ieee754_sqrt+0xdc>
 8006f2a:	4319      	orrs	r1, r3
 8006f2c:	d01b      	beq.n	8006f66 <__ieee754_sqrt+0x15e>
 8006f2e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006fb4 <__ieee754_sqrt+0x1ac>
 8006f32:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006fb8 <__ieee754_sqrt+0x1b0>
 8006f36:	e9da 0100 	ldrd	r0, r1, [sl]
 8006f3a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006f3e:	f7f9 f9bb 	bl	80002b8 <__aeabi_dsub>
 8006f42:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 fde7 	bl	8000b20 <__aeabi_dcmple>
 8006f52:	b140      	cbz	r0, 8006f66 <__ieee754_sqrt+0x15e>
 8006f54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006f58:	e9da 0100 	ldrd	r0, r1, [sl]
 8006f5c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006f60:	d111      	bne.n	8006f86 <__ieee754_sqrt+0x17e>
 8006f62:	3601      	adds	r6, #1
 8006f64:	463c      	mov	r4, r7
 8006f66:	1072      	asrs	r2, r6, #1
 8006f68:	0863      	lsrs	r3, r4, #1
 8006f6a:	07f1      	lsls	r1, r6, #31
 8006f6c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006f70:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006f74:	bf48      	it	mi
 8006f76:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006f7a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006f7e:	4618      	mov	r0, r3
 8006f80:	e756      	b.n	8006e30 <__ieee754_sqrt+0x28>
 8006f82:	4690      	mov	r8, r2
 8006f84:	e7be      	b.n	8006f04 <__ieee754_sqrt+0xfc>
 8006f86:	f7f9 f999 	bl	80002bc <__adddf3>
 8006f8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4640      	mov	r0, r8
 8006f94:	4649      	mov	r1, r9
 8006f96:	f7f9 fdb9 	bl	8000b0c <__aeabi_dcmplt>
 8006f9a:	b120      	cbz	r0, 8006fa6 <__ieee754_sqrt+0x19e>
 8006f9c:	1ca0      	adds	r0, r4, #2
 8006f9e:	bf08      	it	eq
 8006fa0:	3601      	addeq	r6, #1
 8006fa2:	3402      	adds	r4, #2
 8006fa4:	e7df      	b.n	8006f66 <__ieee754_sqrt+0x15e>
 8006fa6:	1c63      	adds	r3, r4, #1
 8006fa8:	f023 0401 	bic.w	r4, r3, #1
 8006fac:	e7db      	b.n	8006f66 <__ieee754_sqrt+0x15e>
 8006fae:	bf00      	nop
 8006fb0:	7ff00000 	.word	0x7ff00000
 8006fb4:	20000080 	.word	0x20000080
 8006fb8:	20000078 	.word	0x20000078
 8006fbc:	00000000 	.word	0x00000000

08006fc0 <__kernel_cos>:
 8006fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	ec57 6b10 	vmov	r6, r7, d0
 8006fc8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006fcc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006fd0:	ed8d 1b00 	vstr	d1, [sp]
 8006fd4:	d206      	bcs.n	8006fe4 <__kernel_cos+0x24>
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	f7f9 fdd5 	bl	8000b88 <__aeabi_d2iz>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f000 8088 	beq.w	80070f4 <__kernel_cos+0x134>
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fb1c 	bl	8000628 <__aeabi_dmul>
 8006ff0:	4b51      	ldr	r3, [pc, #324]	@ (8007138 <__kernel_cos+0x178>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	f7f9 fb16 	bl	8000628 <__aeabi_dmul>
 8006ffc:	a340      	add	r3, pc, #256	@ (adr r3, 8007100 <__kernel_cos+0x140>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	4682      	mov	sl, r0
 8007004:	468b      	mov	fp, r1
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 fb0d 	bl	8000628 <__aeabi_dmul>
 800700e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007108 <__kernel_cos+0x148>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 f952 	bl	80002bc <__adddf3>
 8007018:	4622      	mov	r2, r4
 800701a:	462b      	mov	r3, r5
 800701c:	f7f9 fb04 	bl	8000628 <__aeabi_dmul>
 8007020:	a33b      	add	r3, pc, #236	@ (adr r3, 8007110 <__kernel_cos+0x150>)
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f7f9 f947 	bl	80002b8 <__aeabi_dsub>
 800702a:	4622      	mov	r2, r4
 800702c:	462b      	mov	r3, r5
 800702e:	f7f9 fafb 	bl	8000628 <__aeabi_dmul>
 8007032:	a339      	add	r3, pc, #228	@ (adr r3, 8007118 <__kernel_cos+0x158>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f7f9 f940 	bl	80002bc <__adddf3>
 800703c:	4622      	mov	r2, r4
 800703e:	462b      	mov	r3, r5
 8007040:	f7f9 faf2 	bl	8000628 <__aeabi_dmul>
 8007044:	a336      	add	r3, pc, #216	@ (adr r3, 8007120 <__kernel_cos+0x160>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 f935 	bl	80002b8 <__aeabi_dsub>
 800704e:	4622      	mov	r2, r4
 8007050:	462b      	mov	r3, r5
 8007052:	f7f9 fae9 	bl	8000628 <__aeabi_dmul>
 8007056:	a334      	add	r3, pc, #208	@ (adr r3, 8007128 <__kernel_cos+0x168>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 f92e 	bl	80002bc <__adddf3>
 8007060:	4622      	mov	r2, r4
 8007062:	462b      	mov	r3, r5
 8007064:	f7f9 fae0 	bl	8000628 <__aeabi_dmul>
 8007068:	4622      	mov	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	f7f9 fadc 	bl	8000628 <__aeabi_dmul>
 8007070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007074:	4604      	mov	r4, r0
 8007076:	460d      	mov	r5, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fad4 	bl	8000628 <__aeabi_dmul>
 8007080:	460b      	mov	r3, r1
 8007082:	4602      	mov	r2, r0
 8007084:	4629      	mov	r1, r5
 8007086:	4620      	mov	r0, r4
 8007088:	f7f9 f916 	bl	80002b8 <__aeabi_dsub>
 800708c:	4b2b      	ldr	r3, [pc, #172]	@ (800713c <__kernel_cos+0x17c>)
 800708e:	4598      	cmp	r8, r3
 8007090:	4606      	mov	r6, r0
 8007092:	460f      	mov	r7, r1
 8007094:	d810      	bhi.n	80070b8 <__kernel_cos+0xf8>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4650      	mov	r0, sl
 800709c:	4659      	mov	r1, fp
 800709e:	f7f9 f90b 	bl	80002b8 <__aeabi_dsub>
 80070a2:	460b      	mov	r3, r1
 80070a4:	4926      	ldr	r1, [pc, #152]	@ (8007140 <__kernel_cos+0x180>)
 80070a6:	4602      	mov	r2, r0
 80070a8:	2000      	movs	r0, #0
 80070aa:	f7f9 f905 	bl	80002b8 <__aeabi_dsub>
 80070ae:	ec41 0b10 	vmov	d0, r0, r1
 80070b2:	b003      	add	sp, #12
 80070b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b8:	4b22      	ldr	r3, [pc, #136]	@ (8007144 <__kernel_cos+0x184>)
 80070ba:	4921      	ldr	r1, [pc, #132]	@ (8007140 <__kernel_cos+0x180>)
 80070bc:	4598      	cmp	r8, r3
 80070be:	bf8c      	ite	hi
 80070c0:	4d21      	ldrhi	r5, [pc, #132]	@ (8007148 <__kernel_cos+0x188>)
 80070c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80070c6:	2400      	movs	r4, #0
 80070c8:	4622      	mov	r2, r4
 80070ca:	462b      	mov	r3, r5
 80070cc:	2000      	movs	r0, #0
 80070ce:	f7f9 f8f3 	bl	80002b8 <__aeabi_dsub>
 80070d2:	4622      	mov	r2, r4
 80070d4:	4680      	mov	r8, r0
 80070d6:	4689      	mov	r9, r1
 80070d8:	462b      	mov	r3, r5
 80070da:	4650      	mov	r0, sl
 80070dc:	4659      	mov	r1, fp
 80070de:	f7f9 f8eb 	bl	80002b8 <__aeabi_dsub>
 80070e2:	4632      	mov	r2, r6
 80070e4:	463b      	mov	r3, r7
 80070e6:	f7f9 f8e7 	bl	80002b8 <__aeabi_dsub>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4640      	mov	r0, r8
 80070f0:	4649      	mov	r1, r9
 80070f2:	e7da      	b.n	80070aa <__kernel_cos+0xea>
 80070f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007130 <__kernel_cos+0x170>
 80070f8:	e7db      	b.n	80070b2 <__kernel_cos+0xf2>
 80070fa:	bf00      	nop
 80070fc:	f3af 8000 	nop.w
 8007100:	be8838d4 	.word	0xbe8838d4
 8007104:	bda8fae9 	.word	0xbda8fae9
 8007108:	bdb4b1c4 	.word	0xbdb4b1c4
 800710c:	3e21ee9e 	.word	0x3e21ee9e
 8007110:	809c52ad 	.word	0x809c52ad
 8007114:	3e927e4f 	.word	0x3e927e4f
 8007118:	19cb1590 	.word	0x19cb1590
 800711c:	3efa01a0 	.word	0x3efa01a0
 8007120:	16c15177 	.word	0x16c15177
 8007124:	3f56c16c 	.word	0x3f56c16c
 8007128:	5555554c 	.word	0x5555554c
 800712c:	3fa55555 	.word	0x3fa55555
 8007130:	00000000 	.word	0x00000000
 8007134:	3ff00000 	.word	0x3ff00000
 8007138:	3fe00000 	.word	0x3fe00000
 800713c:	3fd33332 	.word	0x3fd33332
 8007140:	3ff00000 	.word	0x3ff00000
 8007144:	3fe90000 	.word	0x3fe90000
 8007148:	3fd20000 	.word	0x3fd20000
 800714c:	00000000 	.word	0x00000000

08007150 <__kernel_sin>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	ec55 4b10 	vmov	r4, r5, d0
 8007158:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800715c:	b085      	sub	sp, #20
 800715e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007162:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007166:	4680      	mov	r8, r0
 8007168:	d205      	bcs.n	8007176 <__kernel_sin+0x26>
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 fd0b 	bl	8000b88 <__aeabi_d2iz>
 8007172:	2800      	cmp	r0, #0
 8007174:	d052      	beq.n	800721c <__kernel_sin+0xcc>
 8007176:	4622      	mov	r2, r4
 8007178:	462b      	mov	r3, r5
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 fa53 	bl	8000628 <__aeabi_dmul>
 8007182:	4682      	mov	sl, r0
 8007184:	468b      	mov	fp, r1
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 fa4b 	bl	8000628 <__aeabi_dmul>
 8007192:	a342      	add	r3, pc, #264	@ (adr r3, 800729c <__kernel_sin+0x14c>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	e9cd 0100 	strd	r0, r1, [sp]
 800719c:	4650      	mov	r0, sl
 800719e:	4659      	mov	r1, fp
 80071a0:	f7f9 fa42 	bl	8000628 <__aeabi_dmul>
 80071a4:	a33f      	add	r3, pc, #252	@ (adr r3, 80072a4 <__kernel_sin+0x154>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f885 	bl	80002b8 <__aeabi_dsub>
 80071ae:	4652      	mov	r2, sl
 80071b0:	465b      	mov	r3, fp
 80071b2:	f7f9 fa39 	bl	8000628 <__aeabi_dmul>
 80071b6:	a33d      	add	r3, pc, #244	@ (adr r3, 80072ac <__kernel_sin+0x15c>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f9 f87e 	bl	80002bc <__adddf3>
 80071c0:	4652      	mov	r2, sl
 80071c2:	465b      	mov	r3, fp
 80071c4:	f7f9 fa30 	bl	8000628 <__aeabi_dmul>
 80071c8:	a33a      	add	r3, pc, #232	@ (adr r3, 80072b4 <__kernel_sin+0x164>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 f873 	bl	80002b8 <__aeabi_dsub>
 80071d2:	4652      	mov	r2, sl
 80071d4:	465b      	mov	r3, fp
 80071d6:	f7f9 fa27 	bl	8000628 <__aeabi_dmul>
 80071da:	a338      	add	r3, pc, #224	@ (adr r3, 80072bc <__kernel_sin+0x16c>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 f86c 	bl	80002bc <__adddf3>
 80071e4:	4606      	mov	r6, r0
 80071e6:	460f      	mov	r7, r1
 80071e8:	f1b8 0f00 	cmp.w	r8, #0
 80071ec:	d11b      	bne.n	8007226 <__kernel_sin+0xd6>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4650      	mov	r0, sl
 80071f4:	4659      	mov	r1, fp
 80071f6:	f7f9 fa17 	bl	8000628 <__aeabi_dmul>
 80071fa:	a325      	add	r3, pc, #148	@ (adr r3, 8007290 <__kernel_sin+0x140>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 f85a 	bl	80002b8 <__aeabi_dsub>
 8007204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007208:	f7f9 fa0e 	bl	8000628 <__aeabi_dmul>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4620      	mov	r0, r4
 8007212:	4629      	mov	r1, r5
 8007214:	f7f9 f852 	bl	80002bc <__adddf3>
 8007218:	4604      	mov	r4, r0
 800721a:	460d      	mov	r5, r1
 800721c:	ec45 4b10 	vmov	d0, r4, r5
 8007220:	b005      	add	sp, #20
 8007222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800722a:	4b1b      	ldr	r3, [pc, #108]	@ (8007298 <__kernel_sin+0x148>)
 800722c:	2200      	movs	r2, #0
 800722e:	f7f9 f9fb 	bl	8000628 <__aeabi_dmul>
 8007232:	4632      	mov	r2, r6
 8007234:	4680      	mov	r8, r0
 8007236:	4689      	mov	r9, r1
 8007238:	463b      	mov	r3, r7
 800723a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800723e:	f7f9 f9f3 	bl	8000628 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f9 f835 	bl	80002b8 <__aeabi_dsub>
 800724e:	4652      	mov	r2, sl
 8007250:	465b      	mov	r3, fp
 8007252:	f7f9 f9e9 	bl	8000628 <__aeabi_dmul>
 8007256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800725a:	f7f9 f82d 	bl	80002b8 <__aeabi_dsub>
 800725e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007290 <__kernel_sin+0x140>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800726c:	f7f9 f9dc 	bl	8000628 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4630      	mov	r0, r6
 8007276:	4639      	mov	r1, r7
 8007278:	f7f9 f820 	bl	80002bc <__adddf3>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4620      	mov	r0, r4
 8007282:	4629      	mov	r1, r5
 8007284:	f7f9 f818 	bl	80002b8 <__aeabi_dsub>
 8007288:	e7c6      	b.n	8007218 <__kernel_sin+0xc8>
 800728a:	bf00      	nop
 800728c:	f3af 8000 	nop.w
 8007290:	55555549 	.word	0x55555549
 8007294:	3fc55555 	.word	0x3fc55555
 8007298:	3fe00000 	.word	0x3fe00000
 800729c:	5acfd57c 	.word	0x5acfd57c
 80072a0:	3de5d93a 	.word	0x3de5d93a
 80072a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80072a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80072ac:	57b1fe7d 	.word	0x57b1fe7d
 80072b0:	3ec71de3 	.word	0x3ec71de3
 80072b4:	19c161d5 	.word	0x19c161d5
 80072b8:	3f2a01a0 	.word	0x3f2a01a0
 80072bc:	1110f8a6 	.word	0x1110f8a6
 80072c0:	3f811111 	.word	0x3f811111
 80072c4:	00000000 	.word	0x00000000

080072c8 <__ieee754_rem_pio2>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	ec57 6b10 	vmov	r6, r7, d0
 80072d0:	4bc5      	ldr	r3, [pc, #788]	@ (80075e8 <__ieee754_rem_pio2+0x320>)
 80072d2:	b08d      	sub	sp, #52	@ 0x34
 80072d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80072d8:	4598      	cmp	r8, r3
 80072da:	4604      	mov	r4, r0
 80072dc:	9704      	str	r7, [sp, #16]
 80072de:	d807      	bhi.n	80072f0 <__ieee754_rem_pio2+0x28>
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	ed80 0b00 	vstr	d0, [r0]
 80072e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80072ec:	2500      	movs	r5, #0
 80072ee:	e028      	b.n	8007342 <__ieee754_rem_pio2+0x7a>
 80072f0:	4bbe      	ldr	r3, [pc, #760]	@ (80075ec <__ieee754_rem_pio2+0x324>)
 80072f2:	4598      	cmp	r8, r3
 80072f4:	d878      	bhi.n	80073e8 <__ieee754_rem_pio2+0x120>
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	4dbd      	ldr	r5, [pc, #756]	@ (80075f0 <__ieee754_rem_pio2+0x328>)
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	4630      	mov	r0, r6
 80072fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 80075b0 <__ieee754_rem_pio2+0x2e8>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	4639      	mov	r1, r7
 8007306:	dd38      	ble.n	800737a <__ieee754_rem_pio2+0xb2>
 8007308:	f7f8 ffd6 	bl	80002b8 <__aeabi_dsub>
 800730c:	45a8      	cmp	r8, r5
 800730e:	4606      	mov	r6, r0
 8007310:	460f      	mov	r7, r1
 8007312:	d01a      	beq.n	800734a <__ieee754_rem_pio2+0x82>
 8007314:	a3a8      	add	r3, pc, #672	@ (adr r3, 80075b8 <__ieee754_rem_pio2+0x2f0>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f8 ffcd 	bl	80002b8 <__aeabi_dsub>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4680      	mov	r8, r0
 8007324:	4689      	mov	r9, r1
 8007326:	4630      	mov	r0, r6
 8007328:	4639      	mov	r1, r7
 800732a:	f7f8 ffc5 	bl	80002b8 <__aeabi_dsub>
 800732e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80075b8 <__ieee754_rem_pio2+0x2f0>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f8 ffc0 	bl	80002b8 <__aeabi_dsub>
 8007338:	e9c4 8900 	strd	r8, r9, [r4]
 800733c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007340:	2501      	movs	r5, #1
 8007342:	4628      	mov	r0, r5
 8007344:	b00d      	add	sp, #52	@ 0x34
 8007346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734a:	a39d      	add	r3, pc, #628	@ (adr r3, 80075c0 <__ieee754_rem_pio2+0x2f8>)
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f7f8 ffb2 	bl	80002b8 <__aeabi_dsub>
 8007354:	a39c      	add	r3, pc, #624	@ (adr r3, 80075c8 <__ieee754_rem_pio2+0x300>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	4606      	mov	r6, r0
 800735c:	460f      	mov	r7, r1
 800735e:	f7f8 ffab 	bl	80002b8 <__aeabi_dsub>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4680      	mov	r8, r0
 8007368:	4689      	mov	r9, r1
 800736a:	4630      	mov	r0, r6
 800736c:	4639      	mov	r1, r7
 800736e:	f7f8 ffa3 	bl	80002b8 <__aeabi_dsub>
 8007372:	a395      	add	r3, pc, #596	@ (adr r3, 80075c8 <__ieee754_rem_pio2+0x300>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	e7dc      	b.n	8007334 <__ieee754_rem_pio2+0x6c>
 800737a:	f7f8 ff9f 	bl	80002bc <__adddf3>
 800737e:	45a8      	cmp	r8, r5
 8007380:	4606      	mov	r6, r0
 8007382:	460f      	mov	r7, r1
 8007384:	d018      	beq.n	80073b8 <__ieee754_rem_pio2+0xf0>
 8007386:	a38c      	add	r3, pc, #560	@ (adr r3, 80075b8 <__ieee754_rem_pio2+0x2f0>)
 8007388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738c:	f7f8 ff96 	bl	80002bc <__adddf3>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4680      	mov	r8, r0
 8007396:	4689      	mov	r9, r1
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f8 ff8c 	bl	80002b8 <__aeabi_dsub>
 80073a0:	a385      	add	r3, pc, #532	@ (adr r3, 80075b8 <__ieee754_rem_pio2+0x2f0>)
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	f7f8 ff89 	bl	80002bc <__adddf3>
 80073aa:	f04f 35ff 	mov.w	r5, #4294967295
 80073ae:	e9c4 8900 	strd	r8, r9, [r4]
 80073b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80073b6:	e7c4      	b.n	8007342 <__ieee754_rem_pio2+0x7a>
 80073b8:	a381      	add	r3, pc, #516	@ (adr r3, 80075c0 <__ieee754_rem_pio2+0x2f8>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f7f8 ff7d 	bl	80002bc <__adddf3>
 80073c2:	a381      	add	r3, pc, #516	@ (adr r3, 80075c8 <__ieee754_rem_pio2+0x300>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	4606      	mov	r6, r0
 80073ca:	460f      	mov	r7, r1
 80073cc:	f7f8 ff76 	bl	80002bc <__adddf3>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4680      	mov	r8, r0
 80073d6:	4689      	mov	r9, r1
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f8 ff6c 	bl	80002b8 <__aeabi_dsub>
 80073e0:	a379      	add	r3, pc, #484	@ (adr r3, 80075c8 <__ieee754_rem_pio2+0x300>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	e7de      	b.n	80073a6 <__ieee754_rem_pio2+0xde>
 80073e8:	4b82      	ldr	r3, [pc, #520]	@ (80075f4 <__ieee754_rem_pio2+0x32c>)
 80073ea:	4598      	cmp	r8, r3
 80073ec:	f200 80d1 	bhi.w	8007592 <__ieee754_rem_pio2+0x2ca>
 80073f0:	f000 f966 	bl	80076c0 <fabs>
 80073f4:	ec57 6b10 	vmov	r6, r7, d0
 80073f8:	a375      	add	r3, pc, #468	@ (adr r3, 80075d0 <__ieee754_rem_pio2+0x308>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	f7f9 f911 	bl	8000628 <__aeabi_dmul>
 8007406:	4b7c      	ldr	r3, [pc, #496]	@ (80075f8 <__ieee754_rem_pio2+0x330>)
 8007408:	2200      	movs	r2, #0
 800740a:	f7f8 ff57 	bl	80002bc <__adddf3>
 800740e:	f7f9 fbbb 	bl	8000b88 <__aeabi_d2iz>
 8007412:	4605      	mov	r5, r0
 8007414:	f7f9 f89e 	bl	8000554 <__aeabi_i2d>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007420:	a363      	add	r3, pc, #396	@ (adr r3, 80075b0 <__ieee754_rem_pio2+0x2e8>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f7f9 f8ff 	bl	8000628 <__aeabi_dmul>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4630      	mov	r0, r6
 8007430:	4639      	mov	r1, r7
 8007432:	f7f8 ff41 	bl	80002b8 <__aeabi_dsub>
 8007436:	a360      	add	r3, pc, #384	@ (adr r3, 80075b8 <__ieee754_rem_pio2+0x2f0>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	4682      	mov	sl, r0
 800743e:	468b      	mov	fp, r1
 8007440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007444:	f7f9 f8f0 	bl	8000628 <__aeabi_dmul>
 8007448:	2d1f      	cmp	r5, #31
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	dc0c      	bgt.n	800746a <__ieee754_rem_pio2+0x1a2>
 8007450:	4b6a      	ldr	r3, [pc, #424]	@ (80075fc <__ieee754_rem_pio2+0x334>)
 8007452:	1e6a      	subs	r2, r5, #1
 8007454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007458:	4543      	cmp	r3, r8
 800745a:	d006      	beq.n	800746a <__ieee754_rem_pio2+0x1a2>
 800745c:	4632      	mov	r2, r6
 800745e:	463b      	mov	r3, r7
 8007460:	4650      	mov	r0, sl
 8007462:	4659      	mov	r1, fp
 8007464:	f7f8 ff28 	bl	80002b8 <__aeabi_dsub>
 8007468:	e00e      	b.n	8007488 <__ieee754_rem_pio2+0x1c0>
 800746a:	463b      	mov	r3, r7
 800746c:	4632      	mov	r2, r6
 800746e:	4650      	mov	r0, sl
 8007470:	4659      	mov	r1, fp
 8007472:	f7f8 ff21 	bl	80002b8 <__aeabi_dsub>
 8007476:	ea4f 5328 	mov.w	r3, r8, asr #20
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007480:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007484:	2b10      	cmp	r3, #16
 8007486:	dc02      	bgt.n	800748e <__ieee754_rem_pio2+0x1c6>
 8007488:	e9c4 0100 	strd	r0, r1, [r4]
 800748c:	e039      	b.n	8007502 <__ieee754_rem_pio2+0x23a>
 800748e:	a34c      	add	r3, pc, #304	@ (adr r3, 80075c0 <__ieee754_rem_pio2+0x2f8>)
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007498:	f7f9 f8c6 	bl	8000628 <__aeabi_dmul>
 800749c:	4606      	mov	r6, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4650      	mov	r0, sl
 80074a6:	4659      	mov	r1, fp
 80074a8:	f7f8 ff06 	bl	80002b8 <__aeabi_dsub>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4680      	mov	r8, r0
 80074b2:	4689      	mov	r9, r1
 80074b4:	4650      	mov	r0, sl
 80074b6:	4659      	mov	r1, fp
 80074b8:	f7f8 fefe 	bl	80002b8 <__aeabi_dsub>
 80074bc:	4632      	mov	r2, r6
 80074be:	463b      	mov	r3, r7
 80074c0:	f7f8 fefa 	bl	80002b8 <__aeabi_dsub>
 80074c4:	a340      	add	r3, pc, #256	@ (adr r3, 80075c8 <__ieee754_rem_pio2+0x300>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	4606      	mov	r6, r0
 80074cc:	460f      	mov	r7, r1
 80074ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d2:	f7f9 f8a9 	bl	8000628 <__aeabi_dmul>
 80074d6:	4632      	mov	r2, r6
 80074d8:	463b      	mov	r3, r7
 80074da:	f7f8 feed 	bl	80002b8 <__aeabi_dsub>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	4640      	mov	r0, r8
 80074e8:	4649      	mov	r1, r9
 80074ea:	f7f8 fee5 	bl	80002b8 <__aeabi_dsub>
 80074ee:	9a05      	ldr	r2, [sp, #20]
 80074f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b31      	cmp	r3, #49	@ 0x31
 80074f8:	dc20      	bgt.n	800753c <__ieee754_rem_pio2+0x274>
 80074fa:	e9c4 0100 	strd	r0, r1, [r4]
 80074fe:	46c2      	mov	sl, r8
 8007500:	46cb      	mov	fp, r9
 8007502:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007506:	4650      	mov	r0, sl
 8007508:	4642      	mov	r2, r8
 800750a:	464b      	mov	r3, r9
 800750c:	4659      	mov	r1, fp
 800750e:	f7f8 fed3 	bl	80002b8 <__aeabi_dsub>
 8007512:	463b      	mov	r3, r7
 8007514:	4632      	mov	r2, r6
 8007516:	f7f8 fecf 	bl	80002b8 <__aeabi_dsub>
 800751a:	9b04      	ldr	r3, [sp, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007522:	f6bf af0e 	bge.w	8007342 <__ieee754_rem_pio2+0x7a>
 8007526:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800752a:	6063      	str	r3, [r4, #4]
 800752c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007530:	f8c4 8000 	str.w	r8, [r4]
 8007534:	60a0      	str	r0, [r4, #8]
 8007536:	60e3      	str	r3, [r4, #12]
 8007538:	426d      	negs	r5, r5
 800753a:	e702      	b.n	8007342 <__ieee754_rem_pio2+0x7a>
 800753c:	a326      	add	r3, pc, #152	@ (adr r3, 80075d8 <__ieee754_rem_pio2+0x310>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007546:	f7f9 f86f 	bl	8000628 <__aeabi_dmul>
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f8 feaf 	bl	80002b8 <__aeabi_dsub>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4682      	mov	sl, r0
 8007560:	468b      	mov	fp, r1
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	f7f8 fea7 	bl	80002b8 <__aeabi_dsub>
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	f7f8 fea3 	bl	80002b8 <__aeabi_dsub>
 8007572:	a31b      	add	r3, pc, #108	@ (adr r3, 80075e0 <__ieee754_rem_pio2+0x318>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	4606      	mov	r6, r0
 800757a:	460f      	mov	r7, r1
 800757c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007580:	f7f9 f852 	bl	8000628 <__aeabi_dmul>
 8007584:	4632      	mov	r2, r6
 8007586:	463b      	mov	r3, r7
 8007588:	f7f8 fe96 	bl	80002b8 <__aeabi_dsub>
 800758c:	4606      	mov	r6, r0
 800758e:	460f      	mov	r7, r1
 8007590:	e764      	b.n	800745c <__ieee754_rem_pio2+0x194>
 8007592:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <__ieee754_rem_pio2+0x338>)
 8007594:	4598      	cmp	r8, r3
 8007596:	d935      	bls.n	8007604 <__ieee754_rem_pio2+0x33c>
 8007598:	4632      	mov	r2, r6
 800759a:	463b      	mov	r3, r7
 800759c:	4630      	mov	r0, r6
 800759e:	4639      	mov	r1, r7
 80075a0:	f7f8 fe8a 	bl	80002b8 <__aeabi_dsub>
 80075a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80075a8:	e9c4 0100 	strd	r0, r1, [r4]
 80075ac:	e69e      	b.n	80072ec <__ieee754_rem_pio2+0x24>
 80075ae:	bf00      	nop
 80075b0:	54400000 	.word	0x54400000
 80075b4:	3ff921fb 	.word	0x3ff921fb
 80075b8:	1a626331 	.word	0x1a626331
 80075bc:	3dd0b461 	.word	0x3dd0b461
 80075c0:	1a600000 	.word	0x1a600000
 80075c4:	3dd0b461 	.word	0x3dd0b461
 80075c8:	2e037073 	.word	0x2e037073
 80075cc:	3ba3198a 	.word	0x3ba3198a
 80075d0:	6dc9c883 	.word	0x6dc9c883
 80075d4:	3fe45f30 	.word	0x3fe45f30
 80075d8:	2e000000 	.word	0x2e000000
 80075dc:	3ba3198a 	.word	0x3ba3198a
 80075e0:	252049c1 	.word	0x252049c1
 80075e4:	397b839a 	.word	0x397b839a
 80075e8:	3fe921fb 	.word	0x3fe921fb
 80075ec:	4002d97b 	.word	0x4002d97b
 80075f0:	3ff921fb 	.word	0x3ff921fb
 80075f4:	413921fb 	.word	0x413921fb
 80075f8:	3fe00000 	.word	0x3fe00000
 80075fc:	08007ff8 	.word	0x08007ff8
 8007600:	7fefffff 	.word	0x7fefffff
 8007604:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007608:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800760c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007610:	4630      	mov	r0, r6
 8007612:	460f      	mov	r7, r1
 8007614:	f7f9 fab8 	bl	8000b88 <__aeabi_d2iz>
 8007618:	f7f8 ff9c 	bl	8000554 <__aeabi_i2d>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007628:	f7f8 fe46 	bl	80002b8 <__aeabi_dsub>
 800762c:	4b22      	ldr	r3, [pc, #136]	@ (80076b8 <__ieee754_rem_pio2+0x3f0>)
 800762e:	2200      	movs	r2, #0
 8007630:	f7f8 fffa 	bl	8000628 <__aeabi_dmul>
 8007634:	460f      	mov	r7, r1
 8007636:	4606      	mov	r6, r0
 8007638:	f7f9 faa6 	bl	8000b88 <__aeabi_d2iz>
 800763c:	f7f8 ff8a 	bl	8000554 <__aeabi_i2d>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4630      	mov	r0, r6
 8007646:	4639      	mov	r1, r7
 8007648:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800764c:	f7f8 fe34 	bl	80002b8 <__aeabi_dsub>
 8007650:	4b19      	ldr	r3, [pc, #100]	@ (80076b8 <__ieee754_rem_pio2+0x3f0>)
 8007652:	2200      	movs	r2, #0
 8007654:	f7f8 ffe8 	bl	8000628 <__aeabi_dmul>
 8007658:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800765c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007660:	f04f 0803 	mov.w	r8, #3
 8007664:	2600      	movs	r6, #0
 8007666:	2700      	movs	r7, #0
 8007668:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800766c:	4632      	mov	r2, r6
 800766e:	463b      	mov	r3, r7
 8007670:	46c2      	mov	sl, r8
 8007672:	f108 38ff 	add.w	r8, r8, #4294967295
 8007676:	f7f9 fa3f 	bl	8000af8 <__aeabi_dcmpeq>
 800767a:	2800      	cmp	r0, #0
 800767c:	d1f4      	bne.n	8007668 <__ieee754_rem_pio2+0x3a0>
 800767e:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <__ieee754_rem_pio2+0x3f4>)
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	2302      	movs	r3, #2
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	462a      	mov	r2, r5
 8007688:	4653      	mov	r3, sl
 800768a:	4621      	mov	r1, r4
 800768c:	a806      	add	r0, sp, #24
 800768e:	f000 f81f 	bl	80076d0 <__kernel_rem_pio2>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	4605      	mov	r5, r0
 8007698:	f6bf ae53 	bge.w	8007342 <__ieee754_rem_pio2+0x7a>
 800769c:	e9d4 2100 	ldrd	r2, r1, [r4]
 80076a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076a4:	e9c4 2300 	strd	r2, r3, [r4]
 80076a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80076ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80076b4:	e740      	b.n	8007538 <__ieee754_rem_pio2+0x270>
 80076b6:	bf00      	nop
 80076b8:	41700000 	.word	0x41700000
 80076bc:	08008078 	.word	0x08008078

080076c0 <fabs>:
 80076c0:	ec51 0b10 	vmov	r0, r1, d0
 80076c4:	4602      	mov	r2, r0
 80076c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80076ca:	ec43 2b10 	vmov	d0, r2, r3
 80076ce:	4770      	bx	lr

080076d0 <__kernel_rem_pio2>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	ed2d 8b02 	vpush	{d8}
 80076d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80076dc:	f112 0f14 	cmn.w	r2, #20
 80076e0:	9306      	str	r3, [sp, #24]
 80076e2:	9104      	str	r1, [sp, #16]
 80076e4:	4bbe      	ldr	r3, [pc, #760]	@ (80079e0 <__kernel_rem_pio2+0x310>)
 80076e6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80076e8:	9008      	str	r0, [sp, #32]
 80076ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	9b06      	ldr	r3, [sp, #24]
 80076f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80076f6:	bfa8      	it	ge
 80076f8:	1ed4      	subge	r4, r2, #3
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	bfb2      	itee	lt
 80076fe:	2400      	movlt	r4, #0
 8007700:	2318      	movge	r3, #24
 8007702:	fb94 f4f3 	sdivge	r4, r4, r3
 8007706:	f06f 0317 	mvn.w	r3, #23
 800770a:	fb04 3303 	mla	r3, r4, r3, r3
 800770e:	eb03 0b02 	add.w	fp, r3, r2
 8007712:	9b00      	ldr	r3, [sp, #0]
 8007714:	9a05      	ldr	r2, [sp, #20]
 8007716:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80079d0 <__kernel_rem_pio2+0x300>
 800771a:	eb03 0802 	add.w	r8, r3, r2
 800771e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007720:	1aa7      	subs	r7, r4, r2
 8007722:	ae20      	add	r6, sp, #128	@ 0x80
 8007724:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007728:	2500      	movs	r5, #0
 800772a:	4545      	cmp	r5, r8
 800772c:	dd13      	ble.n	8007756 <__kernel_rem_pio2+0x86>
 800772e:	9b06      	ldr	r3, [sp, #24]
 8007730:	aa20      	add	r2, sp, #128	@ 0x80
 8007732:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007736:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	9b00      	ldr	r3, [sp, #0]
 8007740:	4598      	cmp	r8, r3
 8007742:	dc31      	bgt.n	80077a8 <__kernel_rem_pio2+0xd8>
 8007744:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80079d0 <__kernel_rem_pio2+0x300>
 8007748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800774c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007750:	462f      	mov	r7, r5
 8007752:	2600      	movs	r6, #0
 8007754:	e01b      	b.n	800778e <__kernel_rem_pio2+0xbe>
 8007756:	42ef      	cmn	r7, r5
 8007758:	d407      	bmi.n	800776a <__kernel_rem_pio2+0x9a>
 800775a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800775e:	f7f8 fef9 	bl	8000554 <__aeabi_i2d>
 8007762:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007766:	3501      	adds	r5, #1
 8007768:	e7df      	b.n	800772a <__kernel_rem_pio2+0x5a>
 800776a:	ec51 0b18 	vmov	r0, r1, d8
 800776e:	e7f8      	b.n	8007762 <__kernel_rem_pio2+0x92>
 8007770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007774:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007778:	f7f8 ff56 	bl	8000628 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007784:	f7f8 fd9a 	bl	80002bc <__adddf3>
 8007788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778c:	3601      	adds	r6, #1
 800778e:	9b05      	ldr	r3, [sp, #20]
 8007790:	429e      	cmp	r6, r3
 8007792:	f1a7 0708 	sub.w	r7, r7, #8
 8007796:	ddeb      	ble.n	8007770 <__kernel_rem_pio2+0xa0>
 8007798:	ed9d 7b02 	vldr	d7, [sp, #8]
 800779c:	f108 0801 	add.w	r8, r8, #1
 80077a0:	ecaa 7b02 	vstmia	sl!, {d7}
 80077a4:	3508      	adds	r5, #8
 80077a6:	e7ca      	b.n	800773e <__kernel_rem_pio2+0x6e>
 80077a8:	9b00      	ldr	r3, [sp, #0]
 80077aa:	f8dd 8000 	ldr.w	r8, [sp]
 80077ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80077b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80077b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80077b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80077bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80077c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077c4:	ab98      	add	r3, sp, #608	@ 0x260
 80077c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80077ca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80077ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077d2:	ac0c      	add	r4, sp, #48	@ 0x30
 80077d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80077d6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80077da:	46a1      	mov	r9, r4
 80077dc:	46c2      	mov	sl, r8
 80077de:	f1ba 0f00 	cmp.w	sl, #0
 80077e2:	f1a5 0508 	sub.w	r5, r5, #8
 80077e6:	dc77      	bgt.n	80078d8 <__kernel_rem_pio2+0x208>
 80077e8:	4658      	mov	r0, fp
 80077ea:	ed9d 0b02 	vldr	d0, [sp, #8]
 80077ee:	f000 fac7 	bl	8007d80 <scalbn>
 80077f2:	ec57 6b10 	vmov	r6, r7, d0
 80077f6:	2200      	movs	r2, #0
 80077f8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f8 ff12 	bl	8000628 <__aeabi_dmul>
 8007804:	ec41 0b10 	vmov	d0, r0, r1
 8007808:	f000 fb3a 	bl	8007e80 <floor>
 800780c:	4b75      	ldr	r3, [pc, #468]	@ (80079e4 <__kernel_rem_pio2+0x314>)
 800780e:	ec51 0b10 	vmov	r0, r1, d0
 8007812:	2200      	movs	r2, #0
 8007814:	f7f8 ff08 	bl	8000628 <__aeabi_dmul>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f8 fd4a 	bl	80002b8 <__aeabi_dsub>
 8007824:	460f      	mov	r7, r1
 8007826:	4606      	mov	r6, r0
 8007828:	f7f9 f9ae 	bl	8000b88 <__aeabi_d2iz>
 800782c:	9002      	str	r0, [sp, #8]
 800782e:	f7f8 fe91 	bl	8000554 <__aeabi_i2d>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4630      	mov	r0, r6
 8007838:	4639      	mov	r1, r7
 800783a:	f7f8 fd3d 	bl	80002b8 <__aeabi_dsub>
 800783e:	f1bb 0f00 	cmp.w	fp, #0
 8007842:	4606      	mov	r6, r0
 8007844:	460f      	mov	r7, r1
 8007846:	dd6c      	ble.n	8007922 <__kernel_rem_pio2+0x252>
 8007848:	f108 31ff 	add.w	r1, r8, #4294967295
 800784c:	ab0c      	add	r3, sp, #48	@ 0x30
 800784e:	9d02      	ldr	r5, [sp, #8]
 8007850:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007854:	f1cb 0018 	rsb	r0, fp, #24
 8007858:	fa43 f200 	asr.w	r2, r3, r0
 800785c:	4415      	add	r5, r2
 800785e:	4082      	lsls	r2, r0
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	aa0c      	add	r2, sp, #48	@ 0x30
 8007864:	9502      	str	r5, [sp, #8]
 8007866:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800786a:	f1cb 0217 	rsb	r2, fp, #23
 800786e:	fa43 f902 	asr.w	r9, r3, r2
 8007872:	f1b9 0f00 	cmp.w	r9, #0
 8007876:	dd64      	ble.n	8007942 <__kernel_rem_pio2+0x272>
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	3301      	adds	r3, #1
 800787e:	9302      	str	r3, [sp, #8]
 8007880:	4615      	mov	r5, r2
 8007882:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007886:	4590      	cmp	r8, r2
 8007888:	f300 80b8 	bgt.w	80079fc <__kernel_rem_pio2+0x32c>
 800788c:	f1bb 0f00 	cmp.w	fp, #0
 8007890:	dd07      	ble.n	80078a2 <__kernel_rem_pio2+0x1d2>
 8007892:	f1bb 0f01 	cmp.w	fp, #1
 8007896:	f000 80bf 	beq.w	8007a18 <__kernel_rem_pio2+0x348>
 800789a:	f1bb 0f02 	cmp.w	fp, #2
 800789e:	f000 80c6 	beq.w	8007a2e <__kernel_rem_pio2+0x35e>
 80078a2:	f1b9 0f02 	cmp.w	r9, #2
 80078a6:	d14c      	bne.n	8007942 <__kernel_rem_pio2+0x272>
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	494e      	ldr	r1, [pc, #312]	@ (80079e8 <__kernel_rem_pio2+0x318>)
 80078ae:	2000      	movs	r0, #0
 80078b0:	f7f8 fd02 	bl	80002b8 <__aeabi_dsub>
 80078b4:	4606      	mov	r6, r0
 80078b6:	460f      	mov	r7, r1
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	d042      	beq.n	8007942 <__kernel_rem_pio2+0x272>
 80078bc:	4658      	mov	r0, fp
 80078be:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80079d8 <__kernel_rem_pio2+0x308>
 80078c2:	f000 fa5d 	bl	8007d80 <scalbn>
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	ec53 2b10 	vmov	r2, r3, d0
 80078ce:	f7f8 fcf3 	bl	80002b8 <__aeabi_dsub>
 80078d2:	4606      	mov	r6, r0
 80078d4:	460f      	mov	r7, r1
 80078d6:	e034      	b.n	8007942 <__kernel_rem_pio2+0x272>
 80078d8:	4b44      	ldr	r3, [pc, #272]	@ (80079ec <__kernel_rem_pio2+0x31c>)
 80078da:	2200      	movs	r2, #0
 80078dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e0:	f7f8 fea2 	bl	8000628 <__aeabi_dmul>
 80078e4:	f7f9 f950 	bl	8000b88 <__aeabi_d2iz>
 80078e8:	f7f8 fe34 	bl	8000554 <__aeabi_i2d>
 80078ec:	4b40      	ldr	r3, [pc, #256]	@ (80079f0 <__kernel_rem_pio2+0x320>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	4606      	mov	r6, r0
 80078f2:	460f      	mov	r7, r1
 80078f4:	f7f8 fe98 	bl	8000628 <__aeabi_dmul>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007900:	f7f8 fcda 	bl	80002b8 <__aeabi_dsub>
 8007904:	f7f9 f940 	bl	8000b88 <__aeabi_d2iz>
 8007908:	e9d5 2300 	ldrd	r2, r3, [r5]
 800790c:	f849 0b04 	str.w	r0, [r9], #4
 8007910:	4639      	mov	r1, r7
 8007912:	4630      	mov	r0, r6
 8007914:	f7f8 fcd2 	bl	80002bc <__adddf3>
 8007918:	f10a 3aff 	add.w	sl, sl, #4294967295
 800791c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007920:	e75d      	b.n	80077de <__kernel_rem_pio2+0x10e>
 8007922:	d107      	bne.n	8007934 <__kernel_rem_pio2+0x264>
 8007924:	f108 33ff 	add.w	r3, r8, #4294967295
 8007928:	aa0c      	add	r2, sp, #48	@ 0x30
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007932:	e79e      	b.n	8007872 <__kernel_rem_pio2+0x1a2>
 8007934:	4b2f      	ldr	r3, [pc, #188]	@ (80079f4 <__kernel_rem_pio2+0x324>)
 8007936:	2200      	movs	r2, #0
 8007938:	f7f9 f8fc 	bl	8000b34 <__aeabi_dcmpge>
 800793c:	2800      	cmp	r0, #0
 800793e:	d143      	bne.n	80079c8 <__kernel_rem_pio2+0x2f8>
 8007940:	4681      	mov	r9, r0
 8007942:	2200      	movs	r2, #0
 8007944:	2300      	movs	r3, #0
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f9 f8d5 	bl	8000af8 <__aeabi_dcmpeq>
 800794e:	2800      	cmp	r0, #0
 8007950:	f000 80bf 	beq.w	8007ad2 <__kernel_rem_pio2+0x402>
 8007954:	f108 33ff 	add.w	r3, r8, #4294967295
 8007958:	2200      	movs	r2, #0
 800795a:	9900      	ldr	r1, [sp, #0]
 800795c:	428b      	cmp	r3, r1
 800795e:	da6e      	bge.n	8007a3e <__kernel_rem_pio2+0x36e>
 8007960:	2a00      	cmp	r2, #0
 8007962:	f000 8089 	beq.w	8007a78 <__kernel_rem_pio2+0x3a8>
 8007966:	f108 38ff 	add.w	r8, r8, #4294967295
 800796a:	ab0c      	add	r3, sp, #48	@ 0x30
 800796c:	f1ab 0b18 	sub.w	fp, fp, #24
 8007970:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0f6      	beq.n	8007966 <__kernel_rem_pio2+0x296>
 8007978:	4658      	mov	r0, fp
 800797a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80079d8 <__kernel_rem_pio2+0x308>
 800797e:	f000 f9ff 	bl	8007d80 <scalbn>
 8007982:	f108 0301 	add.w	r3, r8, #1
 8007986:	00da      	lsls	r2, r3, #3
 8007988:	9205      	str	r2, [sp, #20]
 800798a:	ec55 4b10 	vmov	r4, r5, d0
 800798e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007990:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80079ec <__kernel_rem_pio2+0x31c>
 8007994:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007998:	4646      	mov	r6, r8
 800799a:	f04f 0a00 	mov.w	sl, #0
 800799e:	2e00      	cmp	r6, #0
 80079a0:	f280 80cf 	bge.w	8007b42 <__kernel_rem_pio2+0x472>
 80079a4:	4644      	mov	r4, r8
 80079a6:	2c00      	cmp	r4, #0
 80079a8:	f2c0 80fd 	blt.w	8007ba6 <__kernel_rem_pio2+0x4d6>
 80079ac:	4b12      	ldr	r3, [pc, #72]	@ (80079f8 <__kernel_rem_pio2+0x328>)
 80079ae:	461f      	mov	r7, r3
 80079b0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80079b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079b6:	9306      	str	r3, [sp, #24]
 80079b8:	f04f 0a00 	mov.w	sl, #0
 80079bc:	f04f 0b00 	mov.w	fp, #0
 80079c0:	2600      	movs	r6, #0
 80079c2:	eba8 0504 	sub.w	r5, r8, r4
 80079c6:	e0e2      	b.n	8007b8e <__kernel_rem_pio2+0x4be>
 80079c8:	f04f 0902 	mov.w	r9, #2
 80079cc:	e754      	b.n	8007878 <__kernel_rem_pio2+0x1a8>
 80079ce:	bf00      	nop
	...
 80079dc:	3ff00000 	.word	0x3ff00000
 80079e0:	080081c0 	.word	0x080081c0
 80079e4:	40200000 	.word	0x40200000
 80079e8:	3ff00000 	.word	0x3ff00000
 80079ec:	3e700000 	.word	0x3e700000
 80079f0:	41700000 	.word	0x41700000
 80079f4:	3fe00000 	.word	0x3fe00000
 80079f8:	08008180 	.word	0x08008180
 80079fc:	f854 3b04 	ldr.w	r3, [r4], #4
 8007a00:	b945      	cbnz	r5, 8007a14 <__kernel_rem_pio2+0x344>
 8007a02:	b123      	cbz	r3, 8007a0e <__kernel_rem_pio2+0x33e>
 8007a04:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007a08:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	3201      	adds	r2, #1
 8007a10:	461d      	mov	r5, r3
 8007a12:	e738      	b.n	8007886 <__kernel_rem_pio2+0x1b6>
 8007a14:	1acb      	subs	r3, r1, r3
 8007a16:	e7f7      	b.n	8007a08 <__kernel_rem_pio2+0x338>
 8007a18:	f108 32ff 	add.w	r2, r8, #4294967295
 8007a1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a26:	a90c      	add	r1, sp, #48	@ 0x30
 8007a28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a2c:	e739      	b.n	80078a2 <__kernel_rem_pio2+0x1d2>
 8007a2e:	f108 32ff 	add.w	r2, r8, #4294967295
 8007a32:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a3c:	e7f3      	b.n	8007a26 <__kernel_rem_pio2+0x356>
 8007a3e:	a90c      	add	r1, sp, #48	@ 0x30
 8007a40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	430a      	orrs	r2, r1
 8007a48:	e787      	b.n	800795a <__kernel_rem_pio2+0x28a>
 8007a4a:	3401      	adds	r4, #1
 8007a4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	d0fa      	beq.n	8007a4a <__kernel_rem_pio2+0x37a>
 8007a54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007a5a:	eb0d 0503 	add.w	r5, sp, r3
 8007a5e:	9b06      	ldr	r3, [sp, #24]
 8007a60:	aa20      	add	r2, sp, #128	@ 0x80
 8007a62:	4443      	add	r3, r8
 8007a64:	f108 0701 	add.w	r7, r8, #1
 8007a68:	3d98      	subs	r5, #152	@ 0x98
 8007a6a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007a6e:	4444      	add	r4, r8
 8007a70:	42bc      	cmp	r4, r7
 8007a72:	da04      	bge.n	8007a7e <__kernel_rem_pio2+0x3ae>
 8007a74:	46a0      	mov	r8, r4
 8007a76:	e6a2      	b.n	80077be <__kernel_rem_pio2+0xee>
 8007a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7a:	2401      	movs	r4, #1
 8007a7c:	e7e6      	b.n	8007a4c <__kernel_rem_pio2+0x37c>
 8007a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a80:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007a84:	f7f8 fd66 	bl	8000554 <__aeabi_i2d>
 8007a88:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007d50 <__kernel_rem_pio2+0x680>
 8007a8c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007a90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a98:	46b2      	mov	sl, r6
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	9b05      	ldr	r3, [sp, #20]
 8007aa0:	4598      	cmp	r8, r3
 8007aa2:	dd05      	ble.n	8007ab0 <__kernel_rem_pio2+0x3e0>
 8007aa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007aa8:	3701      	adds	r7, #1
 8007aaa:	eca5 7b02 	vstmia	r5!, {d7}
 8007aae:	e7df      	b.n	8007a70 <__kernel_rem_pio2+0x3a0>
 8007ab0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007ab4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007ab8:	f7f8 fdb6 	bl	8000628 <__aeabi_dmul>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac4:	f7f8 fbfa 	bl	80002bc <__adddf3>
 8007ac8:	f108 0801 	add.w	r8, r8, #1
 8007acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad0:	e7e5      	b.n	8007a9e <__kernel_rem_pio2+0x3ce>
 8007ad2:	f1cb 0000 	rsb	r0, fp, #0
 8007ad6:	ec47 6b10 	vmov	d0, r6, r7
 8007ada:	f000 f951 	bl	8007d80 <scalbn>
 8007ade:	ec55 4b10 	vmov	r4, r5, d0
 8007ae2:	4b9d      	ldr	r3, [pc, #628]	@ (8007d58 <__kernel_rem_pio2+0x688>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f9 f823 	bl	8000b34 <__aeabi_dcmpge>
 8007aee:	b300      	cbz	r0, 8007b32 <__kernel_rem_pio2+0x462>
 8007af0:	4b9a      	ldr	r3, [pc, #616]	@ (8007d5c <__kernel_rem_pio2+0x68c>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	4620      	mov	r0, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	f7f8 fd96 	bl	8000628 <__aeabi_dmul>
 8007afc:	f7f9 f844 	bl	8000b88 <__aeabi_d2iz>
 8007b00:	4606      	mov	r6, r0
 8007b02:	f7f8 fd27 	bl	8000554 <__aeabi_i2d>
 8007b06:	4b94      	ldr	r3, [pc, #592]	@ (8007d58 <__kernel_rem_pio2+0x688>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fd8d 	bl	8000628 <__aeabi_dmul>
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4602      	mov	r2, r0
 8007b12:	4629      	mov	r1, r5
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7f8 fbcf 	bl	80002b8 <__aeabi_dsub>
 8007b1a:	f7f9 f835 	bl	8000b88 <__aeabi_d2iz>
 8007b1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007b20:	f10b 0b18 	add.w	fp, fp, #24
 8007b24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007b28:	f108 0801 	add.w	r8, r8, #1
 8007b2c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007b30:	e722      	b.n	8007978 <__kernel_rem_pio2+0x2a8>
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f9 f827 	bl	8000b88 <__aeabi_d2iz>
 8007b3a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007b3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007b40:	e71a      	b.n	8007978 <__kernel_rem_pio2+0x2a8>
 8007b42:	ab0c      	add	r3, sp, #48	@ 0x30
 8007b44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b48:	f7f8 fd04 	bl	8000554 <__aeabi_i2d>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	462b      	mov	r3, r5
 8007b50:	f7f8 fd6a 	bl	8000628 <__aeabi_dmul>
 8007b54:	4652      	mov	r2, sl
 8007b56:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007b5a:	465b      	mov	r3, fp
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	4629      	mov	r1, r5
 8007b60:	f7f8 fd62 	bl	8000628 <__aeabi_dmul>
 8007b64:	3e01      	subs	r6, #1
 8007b66:	4604      	mov	r4, r0
 8007b68:	460d      	mov	r5, r1
 8007b6a:	e718      	b.n	800799e <__kernel_rem_pio2+0x2ce>
 8007b6c:	9906      	ldr	r1, [sp, #24]
 8007b6e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007b72:	9106      	str	r1, [sp, #24]
 8007b74:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007b78:	f7f8 fd56 	bl	8000628 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	f7f8 fb9a 	bl	80002bc <__adddf3>
 8007b88:	3601      	adds	r6, #1
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	468b      	mov	fp, r1
 8007b8e:	9b00      	ldr	r3, [sp, #0]
 8007b90:	429e      	cmp	r6, r3
 8007b92:	dc01      	bgt.n	8007b98 <__kernel_rem_pio2+0x4c8>
 8007b94:	42b5      	cmp	r5, r6
 8007b96:	dae9      	bge.n	8007b6c <__kernel_rem_pio2+0x49c>
 8007b98:	ab48      	add	r3, sp, #288	@ 0x120
 8007b9a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007b9e:	e9c5 ab00 	strd	sl, fp, [r5]
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	e6ff      	b.n	80079a6 <__kernel_rem_pio2+0x2d6>
 8007ba6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	dc0b      	bgt.n	8007bc4 <__kernel_rem_pio2+0x4f4>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc39      	bgt.n	8007c24 <__kernel_rem_pio2+0x554>
 8007bb0:	d05d      	beq.n	8007c6e <__kernel_rem_pio2+0x59e>
 8007bb2:	9b02      	ldr	r3, [sp, #8]
 8007bb4:	f003 0007 	and.w	r0, r3, #7
 8007bb8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007bbc:	ecbd 8b02 	vpop	{d8}
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d1f3      	bne.n	8007bb2 <__kernel_rem_pio2+0x4e2>
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007bd0:	eb0d 0403 	add.w	r4, sp, r3
 8007bd4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007bd8:	4625      	mov	r5, r4
 8007bda:	46c2      	mov	sl, r8
 8007bdc:	f1ba 0f00 	cmp.w	sl, #0
 8007be0:	f1a5 0508 	sub.w	r5, r5, #8
 8007be4:	dc6b      	bgt.n	8007cbe <__kernel_rem_pio2+0x5ee>
 8007be6:	4645      	mov	r5, r8
 8007be8:	2d01      	cmp	r5, #1
 8007bea:	f1a4 0408 	sub.w	r4, r4, #8
 8007bee:	f300 8087 	bgt.w	8007d00 <__kernel_rem_pio2+0x630>
 8007bf2:	9c05      	ldr	r4, [sp, #20]
 8007bf4:	ab48      	add	r3, sp, #288	@ 0x120
 8007bf6:	441c      	add	r4, r3
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	f1b8 0f01 	cmp.w	r8, #1
 8007c00:	f300 809c 	bgt.w	8007d3c <__kernel_rem_pio2+0x66c>
 8007c04:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007c08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007c0c:	f1b9 0f00 	cmp.w	r9, #0
 8007c10:	f040 80a6 	bne.w	8007d60 <__kernel_rem_pio2+0x690>
 8007c14:	9b04      	ldr	r3, [sp, #16]
 8007c16:	e9c3 7800 	strd	r7, r8, [r3]
 8007c1a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007c1e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007c22:	e7c6      	b.n	8007bb2 <__kernel_rem_pio2+0x4e2>
 8007c24:	9d05      	ldr	r5, [sp, #20]
 8007c26:	ab48      	add	r3, sp, #288	@ 0x120
 8007c28:	441d      	add	r5, r3
 8007c2a:	4644      	mov	r4, r8
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	2100      	movs	r1, #0
 8007c30:	2c00      	cmp	r4, #0
 8007c32:	da35      	bge.n	8007ca0 <__kernel_rem_pio2+0x5d0>
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	d038      	beq.n	8007cac <__kernel_rem_pio2+0x5dc>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c40:	9c04      	ldr	r4, [sp, #16]
 8007c42:	e9c4 2300 	strd	r2, r3, [r4]
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007c4e:	f7f8 fb33 	bl	80002b8 <__aeabi_dsub>
 8007c52:	ad4a      	add	r5, sp, #296	@ 0x128
 8007c54:	2401      	movs	r4, #1
 8007c56:	45a0      	cmp	r8, r4
 8007c58:	da2b      	bge.n	8007cb2 <__kernel_rem_pio2+0x5e2>
 8007c5a:	f1b9 0f00 	cmp.w	r9, #0
 8007c5e:	d002      	beq.n	8007c66 <__kernel_rem_pio2+0x596>
 8007c60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c64:	4619      	mov	r1, r3
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007c6c:	e7a1      	b.n	8007bb2 <__kernel_rem_pio2+0x4e2>
 8007c6e:	9c05      	ldr	r4, [sp, #20]
 8007c70:	ab48      	add	r3, sp, #288	@ 0x120
 8007c72:	441c      	add	r4, r3
 8007c74:	2000      	movs	r0, #0
 8007c76:	2100      	movs	r1, #0
 8007c78:	f1b8 0f00 	cmp.w	r8, #0
 8007c7c:	da09      	bge.n	8007c92 <__kernel_rem_pio2+0x5c2>
 8007c7e:	f1b9 0f00 	cmp.w	r9, #0
 8007c82:	d002      	beq.n	8007c8a <__kernel_rem_pio2+0x5ba>
 8007c84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c88:	4619      	mov	r1, r3
 8007c8a:	9b04      	ldr	r3, [sp, #16]
 8007c8c:	e9c3 0100 	strd	r0, r1, [r3]
 8007c90:	e78f      	b.n	8007bb2 <__kernel_rem_pio2+0x4e2>
 8007c92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c96:	f7f8 fb11 	bl	80002bc <__adddf3>
 8007c9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c9e:	e7eb      	b.n	8007c78 <__kernel_rem_pio2+0x5a8>
 8007ca0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007ca4:	f7f8 fb0a 	bl	80002bc <__adddf3>
 8007ca8:	3c01      	subs	r4, #1
 8007caa:	e7c1      	b.n	8007c30 <__kernel_rem_pio2+0x560>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	e7c6      	b.n	8007c40 <__kernel_rem_pio2+0x570>
 8007cb2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007cb6:	f7f8 fb01 	bl	80002bc <__adddf3>
 8007cba:	3401      	adds	r4, #1
 8007cbc:	e7cb      	b.n	8007c56 <__kernel_rem_pio2+0x586>
 8007cbe:	ed95 7b00 	vldr	d7, [r5]
 8007cc2:	ed8d 7b00 	vstr	d7, [sp]
 8007cc6:	ed95 7b02 	vldr	d7, [r5, #8]
 8007cca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cce:	ec53 2b17 	vmov	r2, r3, d7
 8007cd2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007cd6:	f7f8 faf1 	bl	80002bc <__adddf3>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4606      	mov	r6, r0
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ce6:	f7f8 fae7 	bl	80002b8 <__aeabi_dsub>
 8007cea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cee:	f7f8 fae5 	bl	80002bc <__adddf3>
 8007cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cf6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007cfa:	e9c5 6700 	strd	r6, r7, [r5]
 8007cfe:	e76d      	b.n	8007bdc <__kernel_rem_pio2+0x50c>
 8007d00:	ed94 7b00 	vldr	d7, [r4]
 8007d04:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007d08:	ec51 0b17 	vmov	r0, r1, d7
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	465b      	mov	r3, fp
 8007d10:	ed8d 7b00 	vstr	d7, [sp]
 8007d14:	f7f8 fad2 	bl	80002bc <__adddf3>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	460f      	mov	r7, r1
 8007d20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d24:	f7f8 fac8 	bl	80002b8 <__aeabi_dsub>
 8007d28:	4652      	mov	r2, sl
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	f7f8 fac6 	bl	80002bc <__adddf3>
 8007d30:	3d01      	subs	r5, #1
 8007d32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d36:	e9c4 6700 	strd	r6, r7, [r4]
 8007d3a:	e755      	b.n	8007be8 <__kernel_rem_pio2+0x518>
 8007d3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d40:	f7f8 fabc 	bl	80002bc <__adddf3>
 8007d44:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d48:	e758      	b.n	8007bfc <__kernel_rem_pio2+0x52c>
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w
	...
 8007d58:	41700000 	.word	0x41700000
 8007d5c:	3e700000 	.word	0x3e700000
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	9a04      	ldr	r2, [sp, #16]
 8007d64:	601f      	str	r7, [r3, #0]
 8007d66:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007d6a:	605c      	str	r4, [r3, #4]
 8007d6c:	609d      	str	r5, [r3, #8]
 8007d6e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d72:	60d3      	str	r3, [r2, #12]
 8007d74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d78:	6110      	str	r0, [r2, #16]
 8007d7a:	6153      	str	r3, [r2, #20]
 8007d7c:	e719      	b.n	8007bb2 <__kernel_rem_pio2+0x4e2>
 8007d7e:	bf00      	nop

08007d80 <scalbn>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	ec55 4b10 	vmov	r4, r5, d0
 8007d86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	b991      	cbnz	r1, 8007db6 <scalbn+0x36>
 8007d90:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007d94:	4323      	orrs	r3, r4
 8007d96:	d03d      	beq.n	8007e14 <scalbn+0x94>
 8007d98:	4b35      	ldr	r3, [pc, #212]	@ (8007e70 <scalbn+0xf0>)
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f7f8 fc42 	bl	8000628 <__aeabi_dmul>
 8007da4:	4b33      	ldr	r3, [pc, #204]	@ (8007e74 <scalbn+0xf4>)
 8007da6:	429e      	cmp	r6, r3
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	da0f      	bge.n	8007dce <scalbn+0x4e>
 8007dae:	a328      	add	r3, pc, #160	@ (adr r3, 8007e50 <scalbn+0xd0>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	e01e      	b.n	8007df4 <scalbn+0x74>
 8007db6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007dba:	4291      	cmp	r1, r2
 8007dbc:	d10b      	bne.n	8007dd6 <scalbn+0x56>
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7f8 fa7a 	bl	80002bc <__adddf3>
 8007dc8:	4604      	mov	r4, r0
 8007dca:	460d      	mov	r5, r1
 8007dcc:	e022      	b.n	8007e14 <scalbn+0x94>
 8007dce:	460b      	mov	r3, r1
 8007dd0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007dd4:	3936      	subs	r1, #54	@ 0x36
 8007dd6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007dda:	4296      	cmp	r6, r2
 8007ddc:	dd0d      	ble.n	8007dfa <scalbn+0x7a>
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007e58 <scalbn+0xd8>)
 8007de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007de6:	da02      	bge.n	8007dee <scalbn+0x6e>
 8007de8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007e60 <scalbn+0xe0>)
 8007dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dee:	a31a      	add	r3, pc, #104	@ (adr r3, 8007e58 <scalbn+0xd8>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fc18 	bl	8000628 <__aeabi_dmul>
 8007df8:	e7e6      	b.n	8007dc8 <scalbn+0x48>
 8007dfa:	1872      	adds	r2, r6, r1
 8007dfc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007e00:	428a      	cmp	r2, r1
 8007e02:	dcec      	bgt.n	8007dde <scalbn+0x5e>
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	dd08      	ble.n	8007e1a <scalbn+0x9a>
 8007e08:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007e0c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007e10:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e14:	ec45 4b10 	vmov	d0, r4, r5
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
 8007e1a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007e1e:	da08      	bge.n	8007e32 <scalbn+0xb2>
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	a10b      	add	r1, pc, #44	@ (adr r1, 8007e50 <scalbn+0xd0>)
 8007e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e28:	dac1      	bge.n	8007dae <scalbn+0x2e>
 8007e2a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007e68 <scalbn+0xe8>)
 8007e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e30:	e7bd      	b.n	8007dae <scalbn+0x2e>
 8007e32:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007e36:	3236      	adds	r2, #54	@ 0x36
 8007e38:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007e3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e40:	4620      	mov	r0, r4
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <scalbn+0xf8>)
 8007e44:	4629      	mov	r1, r5
 8007e46:	2200      	movs	r2, #0
 8007e48:	e7d4      	b.n	8007df4 <scalbn+0x74>
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w
 8007e50:	c2f8f359 	.word	0xc2f8f359
 8007e54:	01a56e1f 	.word	0x01a56e1f
 8007e58:	8800759c 	.word	0x8800759c
 8007e5c:	7e37e43c 	.word	0x7e37e43c
 8007e60:	8800759c 	.word	0x8800759c
 8007e64:	fe37e43c 	.word	0xfe37e43c
 8007e68:	c2f8f359 	.word	0xc2f8f359
 8007e6c:	81a56e1f 	.word	0x81a56e1f
 8007e70:	43500000 	.word	0x43500000
 8007e74:	ffff3cb0 	.word	0xffff3cb0
 8007e78:	3c900000 	.word	0x3c900000
 8007e7c:	00000000 	.word	0x00000000

08007e80 <floor>:
 8007e80:	ec51 0b10 	vmov	r0, r1, d0
 8007e84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007e90:	2e13      	cmp	r6, #19
 8007e92:	460c      	mov	r4, r1
 8007e94:	4605      	mov	r5, r0
 8007e96:	4680      	mov	r8, r0
 8007e98:	dc34      	bgt.n	8007f04 <floor+0x84>
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	da17      	bge.n	8007ece <floor+0x4e>
 8007e9e:	a332      	add	r3, pc, #200	@ (adr r3, 8007f68 <floor+0xe8>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 fa0a 	bl	80002bc <__adddf3>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f7f8 fe4c 	bl	8000b48 <__aeabi_dcmpgt>
 8007eb0:	b150      	cbz	r0, 8007ec8 <floor+0x48>
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	da55      	bge.n	8007f62 <floor+0xe2>
 8007eb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007eba:	432c      	orrs	r4, r5
 8007ebc:	2500      	movs	r5, #0
 8007ebe:	42ac      	cmp	r4, r5
 8007ec0:	4c2b      	ldr	r4, [pc, #172]	@ (8007f70 <floor+0xf0>)
 8007ec2:	bf08      	it	eq
 8007ec4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	e023      	b.n	8007f16 <floor+0x96>
 8007ece:	4f29      	ldr	r7, [pc, #164]	@ (8007f74 <floor+0xf4>)
 8007ed0:	4137      	asrs	r7, r6
 8007ed2:	ea01 0307 	and.w	r3, r1, r7
 8007ed6:	4303      	orrs	r3, r0
 8007ed8:	d01d      	beq.n	8007f16 <floor+0x96>
 8007eda:	a323      	add	r3, pc, #140	@ (adr r3, 8007f68 <floor+0xe8>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 f9ec 	bl	80002bc <__adddf3>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f7f8 fe2e 	bl	8000b48 <__aeabi_dcmpgt>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d0eb      	beq.n	8007ec8 <floor+0x48>
 8007ef0:	2c00      	cmp	r4, #0
 8007ef2:	bfbe      	ittt	lt
 8007ef4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007ef8:	4133      	asrlt	r3, r6
 8007efa:	18e4      	addlt	r4, r4, r3
 8007efc:	ea24 0407 	bic.w	r4, r4, r7
 8007f00:	2500      	movs	r5, #0
 8007f02:	e7e1      	b.n	8007ec8 <floor+0x48>
 8007f04:	2e33      	cmp	r6, #51	@ 0x33
 8007f06:	dd0a      	ble.n	8007f1e <floor+0x9e>
 8007f08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007f0c:	d103      	bne.n	8007f16 <floor+0x96>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	f7f8 f9d3 	bl	80002bc <__adddf3>
 8007f16:	ec41 0b10 	vmov	d0, r0, r1
 8007f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007f22:	f04f 37ff 	mov.w	r7, #4294967295
 8007f26:	40df      	lsrs	r7, r3
 8007f28:	4207      	tst	r7, r0
 8007f2a:	d0f4      	beq.n	8007f16 <floor+0x96>
 8007f2c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f68 <floor+0xe8>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 f9c3 	bl	80002bc <__adddf3>
 8007f36:	2200      	movs	r2, #0
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f7f8 fe05 	bl	8000b48 <__aeabi_dcmpgt>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d0c2      	beq.n	8007ec8 <floor+0x48>
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	da0a      	bge.n	8007f5c <floor+0xdc>
 8007f46:	2e14      	cmp	r6, #20
 8007f48:	d101      	bne.n	8007f4e <floor+0xce>
 8007f4a:	3401      	adds	r4, #1
 8007f4c:	e006      	b.n	8007f5c <floor+0xdc>
 8007f4e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007f52:	2301      	movs	r3, #1
 8007f54:	40b3      	lsls	r3, r6
 8007f56:	441d      	add	r5, r3
 8007f58:	4545      	cmp	r5, r8
 8007f5a:	d3f6      	bcc.n	8007f4a <floor+0xca>
 8007f5c:	ea25 0507 	bic.w	r5, r5, r7
 8007f60:	e7b2      	b.n	8007ec8 <floor+0x48>
 8007f62:	2500      	movs	r5, #0
 8007f64:	462c      	mov	r4, r5
 8007f66:	e7af      	b.n	8007ec8 <floor+0x48>
 8007f68:	8800759c 	.word	0x8800759c
 8007f6c:	7e37e43c 	.word	0x7e37e43c
 8007f70:	bff00000 	.word	0xbff00000
 8007f74:	000fffff 	.word	0x000fffff

08007f78 <_init>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr

08007f84 <_fini>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr
